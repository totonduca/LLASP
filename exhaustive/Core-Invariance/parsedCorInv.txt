
0
assignment

question: 
Compose an ASP program that maps a single label from the set "chicago","storm","singapore","black","roof","wall","strength","hair","desk" to elements determined by the predicate "toronto".

answer from file: 
assign(X,"chicago")|assign(X,"storm")|assign(X,"singapore")|assign(X,"black")|assign(X,"roof")|assign(X,"wall")|assign(X,"strength")|assign(X,"hair")|assign(X,"desk"):-toronto(X).

parsed from model: 
assign(X,"chicago")|assign(X,"storm")|assign(X,"singapore")|assign(X,"black")|assign(X,"roof")|assign(X,"wall")|assign(X,"strength")|assign(X,"hair")|assign(X,"desk"):-toronto(X).

facts: 
toronto(1..5).

generated: 
Compose an ASP program that maps a single label from the set "chicago","storm","singapore","black","roof","wall","strength","hair","desk" to elements determined by the predicate "toronto".
Answer: assign(X,"chicago")|assign(X,"storm")|assign(X,"singapore")|assign(X,"black")|assign(X,"roof")|assign(X,"wall")|assign(X,"strength")|assign(X,"hair")|assign(X,"desk"):-toronto(X).
Explanation:
The predicate "toronto" returns elements associated with the labels "chicago","storm","singapore","black","roof","wall","strength","hair","desk","rome","shangai","moto","height","color","description","author","city","name","price","height","description","author","city","name","price","height","description","author","city","name","price

unique_rules: 
['assign(X,"chicago")|assign(X,"storm")|assign(X,"singapore")|assign(X,"black")|assign(X,"roof")|assign(X,"wall")|assign(X,"strength")|assign(X,"hair")|assign(X,"desk"):-toronto(X).']

jaccard: 1.0

AS desired: [['toronto(1)', 'toronto(2)', 'toronto(3)', 'toronto(4)', 'toronto(5)', 'assign(1,"desk")', 'assign(2,"desk")', 'assign(3,"desk")', 'assign(4,"desk")', 'assign(5,"desk")']]
\AS obtained: [['toronto(1)', 'toronto(2)', 'toronto(3)', 'toronto(4)', 'toronto(5)', 'assign(1,"desk")', 'assign(2,"desk")', 'assign(3,"desk")', 'assign(4,"desk")', 'assign(5,"desk")']]


1
constraint

question: 
Develop an ASP application that avoids the predicate "quality" with a value of 15 being linked to the label "cairo".

answer from file: 
:-assign(15,cairo).

parsed from model: 
:-assign(15,cairo).

facts: 
quality(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-quality(X).

generated: 
Develop an ASP application that avoids the predicate "quality" with a value of 15 being linked to the label "cairo".
Answer: :-assign(15,cairo).
Explanation: The predicate "quality" includes a field "ID" that is linked to the label "city".
The predicate "city" includes a field "ID" that is linked to the label "description".
The predicate "description" includes a field "ID" that is linked to the label "author".
The predicate "author" includes a field "ID" that is linked to the label "description".
The predicate "description" includes a field "ID" that is linked to the label "city".
The predicate "city" includes a field "ID" that is linked to the label "author".
So, the predicate "quality" avoids the predicate

unique_rules: 
[':-assign(15,cairo).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'quality(6)', 'quality(7)', 'quality(8)', 'quality(9)', 'quality(10)', 'quality(11)', 'quality(12)', 'quality(13)', 'quality(14)', 'quality(15)', 'quality(16)', 'quality(17)', 'quality(18)', 'quality(19)', 'quality(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'quality(6)', 'quality(7)', 'quality(8)', 'quality(9)', 'quality(10)', 'quality(11)', 'quality(12)', 'quality(13)', 'quality(14)', 'quality(15)', 'quality(16)', 'quality(17)', 'quality(18)', 'quality(19)', 'quality(20)']]


2
combination

question: 
Compose an ASP script that generates the cross-product of elements between the predicates "flower" and "strength".

answer from file: 
combination(X,Y):-flower(X),strength(Y).

parsed from model: 
cross_product(X,Y):-flower(X),strength(Y).

facts: 
flower(1..4).strength(1..5).

generated: 
Compose an ASP script that generates the cross-product of elements between the predicates "flower" and "strength".
Answer: cross_product(X,Y):-flower(X),strength(Y).
cross_product(X,Y):-flower(X),not strength(Y).
cross_product(X,Y):-not flower(X),strength(Y).

unique_rules: 
['cross_product(X,Y):-flower(X),strength(Y).', 'cross_product(X,Y):-flower(X),not strength(Y).', 'cross_product(X,Y):-not flower(X),strength(Y).']

jaccard: 0.0

AS desired: [['strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'flower(1)', 'flower(2)', 'flower(3)', 'flower(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'flower(1)', 'flower(2)', 'flower(3)', 'flower(4)', 'cross_product(1,1)', 'cross_product(1,2)', 'cross_product(1,3)', 'cross_product(1,4)', 'cross_product(1,5)', 'cross_product(2,1)', 'cross_product(2,2)', 'cross_product(2,3)', 'cross_product(2,4)', 'cross_product(2,5)', 'cross_product(3,1)', 'cross_product(3,2)', 'cross_product(3,3)', 'cross_product(3,4)', 'cross_product(3,5)', 'cross_product(4,1)', 'cross_product(4,2)', 'cross_product(4,3)', 'cross_product(4,4)', 'cross_product(4,5)']]


3
join

question: 
Write an ASP program for the following problem. Consider predicate "moscow" having fields "ID","flowerID","strength","lake", and the predicate "flower" having fields "ID","lake","owner","strength". Define a predicate "moscow_flower" that associates to each "moscow" the "lake" of "flower".

answer from file: 
moscow_flower(X,Z):-moscow(X,Y,_,_),flower(Y,Z,_,_).

parsed from model: 
moscow_flower(X,Z):-moscow(X,Y,_,_),flower(Y,Z,_,Y).

facts: 
moscow("ID","flowerID","strength","lake").flower("ID","lake","owner","strength").

generated: 
Write an ASP program for the following problem. Consider predicate "moscow" having fields "ID","flowerID","strength","lake", and the predicate "flower" having fields "ID","lake","owner","strength". Define a predicate "moscow_flower" that associates to each "moscow" the "lake" of "flower".
Answer: moscow_flower(X,Z):-moscow(X,Y,_,_),flower(Y,Z,_,Y).
moscow_flower(X,Z):-moscow(X,Y,_,_),flower(Y,_,_,X).

unique_rules: 
['moscow_flower(X,Z):-moscow(X,Y,_,_),flower(Y,Z,_,Y).', 'moscow_flower(X,Z):-moscow(X,Y,_,_),flower(Y,_,_,X).']

jaccard: 1.0

AS desired: [['moscow("ID","flowerID","strength","lake")', 'flower("ID","lake","owner","strength")']]
\AS obtained: [['moscow("ID","flowerID","strength","lake")', 'flower("ID","lake","owner","strength")']]


4
closure

question: 
Create an ASP solution that establishes the predicate "loops" through the transitive closure of the "darkmagenta" predicate.

answer from file: 
loops(X,Y):-darkmagenta(X,Y).
loops(X,Y):-darkmagenta(X,Z),loops(Z,Y).

parsed from model: 
loops(X,Y):-darkmagenta(X,Y).
loops(X,Y):-darkmagenta(X,Z),loops(Z,Y).

facts: 
darkmagenta(1..3, 1..4).

generated: 
Create an ASP solution that establishes the predicate "loops" through the transitive closure of the "darkmagenta" predicate.
Answer: loops(X,Y):-darkmagenta(X,Y).
loops(X,Y):-darkmagenta(X,Z),loops(Z,Y).
loops(X,Y):-darkmagenta(X,Z),not darkmagenta(Z,Y).
darkmagenta(X,Y):-city(X,Y).
darkmagenta(X,Y):-city(X,Z),loops(Z,Y).
darkmagenta(X,Y):-city(X,Z),not darkmagenta(Z,Y).

unique_rules: 
['loops(X,Y):-darkmagenta(X,Y).', 'loops(X,Y):-darkmagenta(X,Z),loops(Z,Y).', 'loops(X,Y):-darkmagenta(X,Z),not darkmagenta(Z,Y).', 'darkmagenta(X,Y):-city(X,Y).', 'darkmagenta(X,Y):-city(X,Z),loops(Z,Y).', 'darkmagenta(X,Y):-city(X,Z),not darkmagenta(Z,Y).']

jaccard: 1.0

AS desired: [['darkmagenta(1,1)', 'darkmagenta(1,2)', 'darkmagenta(1,3)', 'darkmagenta(1,4)', 'darkmagenta(2,1)', 'darkmagenta(2,2)', 'darkmagenta(2,3)', 'darkmagenta(2,4)', 'darkmagenta(3,1)', 'darkmagenta(3,2)', 'darkmagenta(3,3)', 'darkmagenta(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]
\AS obtained: [['darkmagenta(1,1)', 'darkmagenta(1,2)', 'darkmagenta(1,3)', 'darkmagenta(1,4)', 'darkmagenta(2,1)', 'darkmagenta(2,2)', 'darkmagenta(2,3)', 'darkmagenta(2,4)', 'darkmagenta(3,1)', 'darkmagenta(3,2)', 'darkmagenta(3,3)', 'darkmagenta(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]


5
preference

question: 
Write an ASP application that avoids the predicate "chair" with value "4" from being linked to "singapore", incurring a cost of "1" at level "1" if linked.

answer from file: 
:~assign(4,"singapore").[1@1]

parsed from model: 
:~assign(4,"singapore").[1@1]

facts: 
chair(1..20).

generated: 
Write an ASP application that avoids the predicate "chair" with value "4" from being linked to "singapore", incurring a cost of "1" at level "1" if linked.
Answer: :~assign(4,"singapore").[1@1]

unique_rules: 
[':~assign(4,"singapore").[1@1]']

jaccard: 1.0

AS desired: [['chair(1)', 'chair(2)', 'chair(3)', 'chair(4)', 'chair(5)', 'chair(6)', 'chair(7)', 'chair(8)', 'chair(9)', 'chair(10)', 'chair(11)', 'chair(12)', 'chair(13)', 'chair(14)', 'chair(15)', 'chair(16)', 'chair(17)', 'chair(18)', 'chair(19)', 'chair(20)']]
\AS obtained: [['chair(1)', 'chair(2)', 'chair(3)', 'chair(4)', 'chair(5)', 'chair(6)', 'chair(7)', 'chair(8)', 'chair(9)', 'chair(10)', 'chair(11)', 'chair(12)', 'chair(13)', 'chair(14)', 'chair(15)', 'chair(16)', 'chair(17)', 'chair(18)', 'chair(19)', 'chair(20)']]


6
filtering

question: 
Design an ASP application to fetch values tied to the label "chicago" within the context of the "pink" predicate.

answer from file: 
select(X):-pink(X,"chicago").

parsed from model: 
select(X):-pink(X,"chicago").

facts: 
pink(1..5, "chicago").

generated: 
Design an ASP application to fetch values tied to the label "chicago" within the context of the "pink" predicate.
Answer: select(X):-pink(X,"chicago").
pink(X,Z):-pink(X,Z).
pink(X,C):-pink(X,"city").
pink(X,Z):-pink(X,Z).

unique_rules: 
['select(X):-pink(X,"chicago").', 'pink(X,Z):-pink(X,Z).', 'pink(X,C):-pink(X,"city").']

jaccard: 1.0

AS desired: [['pink(1,"chicago")', 'pink(2,"chicago")', 'pink(3,"chicago")', 'pink(4,"chicago")', 'pink(5,"chicago")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['pink(1,"chicago")', 'pink(2,"chicago")', 'pink(3,"chicago")', 'pink(4,"chicago")', 'pink(5,"chicago")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


7
negative_filtering

question: 
Create an ASP application to fetch values associated with the predicate "desk" but not linked to the predicate "singapore" and labeled "storm".

answer from file: 
select(X):-desk(X),not singapore(X,"storm").

parsed from model: 
select(X):-desk(X),not singapore(X,"storm").

facts: 
desk(1..3).singapore(1,"lightblue").singapore(2,"quality").singapore(3,"pink").

generated: 
Create an ASP application to fetch values associated with the predicate "desk" but not linked to the predicate "singapore" and labeled "storm".
Answer: select(X):-desk(X),not singapore(X,"storm").
Explanation: The predicate "desk" includes values associated with the predicate "city","height","author","moto","description","name","city","author","description","height","name","city","author","description","name","height","description","city","author","description","height","name","city","author","description","name","height","description","city","author","description","height","name","city","author","description","name","height","description","city","author","description","height","name","city","author","description","name","height","description","city","author","description","height","name","city","author","description","name

unique_rules: 
['select(X):-desk(X),not singapore(X,"storm").']

jaccard: 1.0

AS desired: [['desk(1)', 'desk(2)', 'desk(3)', 'singapore(1,"lightblue")', 'singapore(2,"quality")', 'singapore(3,"pink")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['desk(1)', 'desk(2)', 'desk(3)', 'singapore(1,"lightblue")', 'singapore(2,"quality")', 'singapore(3,"pink")', 'select(1)', 'select(2)', 'select(3)']]


8
numeric_filtering

question: 
Write an ASP solution to identify values tied to the predicate "cosenza" with a value different than 37.

answer from file: 
select(X):-cosenza(X,C),C!=37.

parsed from model: 
select(X):-cosenza(X,C),C!=37.

facts: 
cosenza(1..3, 1..100).

generated: 
Write an ASP solution to identify values tied to the predicate "cosenza" with a value different than 37.
Answer: select(X):-cosenza(X,C),C!=37.
cosenza(X,C):-cosenza(X,C),C==37.

unique_rules: 
['select(X):-cosenza(X,C),C!=37.', 'cosenza(X,C):-cosenza(X,C),C==37.']

jaccard: 1.0

AS desired: [['cosenza(1,1)', 'cosenza(1,2)', 'cosenza(1,3)', 'cosenza(1,4)', 'cosenza(1,5)', 'cosenza(1,6)', 'cosenza(1,7)', 'cosenza(1,8)', 'cosenza(1,9)', 'cosenza(1,10)', 'cosenza(1,11)', 'cosenza(1,12)', 'cosenza(1,13)', 'cosenza(1,14)', 'cosenza(1,15)', 'cosenza(1,16)', 'cosenza(1,17)', 'cosenza(1,18)', 'cosenza(1,19)', 'cosenza(1,20)', 'cosenza(1,21)', 'cosenza(1,22)', 'cosenza(1,23)', 'cosenza(1,24)', 'cosenza(1,25)', 'cosenza(1,26)', 'cosenza(1,27)', 'cosenza(1,28)', 'cosenza(1,29)', 'cosenza(1,30)', 'cosenza(1,31)', 'cosenza(1,32)', 'cosenza(1,33)', 'cosenza(1,34)', 'cosenza(1,35)', 'cosenza(1,36)', 'cosenza(1,37)', 'cosenza(1,38)', 'cosenza(1,39)', 'cosenza(1,40)', 'cosenza(1,41)', 'cosenza(1,42)', 'cosenza(1,43)', 'cosenza(1,44)', 'cosenza(1,45)', 'cosenza(1,46)', 'cosenza(1,47)', 'cosenza(1,48)', 'cosenza(1,49)', 'cosenza(1,50)', 'cosenza(1,51)', 'cosenza(1,52)', 'cosenza(1,53)', 'cosenza(1,54)', 'cosenza(1,55)', 'cosenza(1,56)', 'cosenza(1,57)', 'cosenza(1,58)', 'cosenza(1,59)', 'cosenza(1,60)', 'cosenza(1,61)', 'cosenza(1,62)', 'cosenza(1,63)', 'cosenza(1,64)', 'cosenza(1,65)', 'cosenza(1,66)', 'cosenza(1,67)', 'cosenza(1,68)', 'cosenza(1,69)', 'cosenza(1,70)', 'cosenza(1,71)', 'cosenza(1,72)', 'cosenza(1,73)', 'cosenza(1,74)', 'cosenza(1,75)', 'cosenza(1,76)', 'cosenza(1,77)', 'cosenza(1,78)', 'cosenza(1,79)', 'cosenza(1,80)', 'cosenza(1,81)', 'cosenza(1,82)', 'cosenza(1,83)', 'cosenza(1,84)', 'cosenza(1,85)', 'cosenza(1,86)', 'cosenza(1,87)', 'cosenza(1,88)', 'cosenza(1,89)', 'cosenza(1,90)', 'cosenza(1,91)', 'cosenza(1,92)', 'cosenza(1,93)', 'cosenza(1,94)', 'cosenza(1,95)', 'cosenza(1,96)', 'cosenza(1,97)', 'cosenza(1,98)', 'cosenza(1,99)', 'cosenza(1,100)', 'cosenza(2,1)', 'cosenza(2,2)', 'cosenza(2,3)', 'cosenza(2,4)', 'cosenza(2,5)', 'cosenza(2,6)', 'cosenza(2,7)', 'cosenza(2,8)', 'cosenza(2,9)', 'cosenza(2,10)', 'cosenza(2,11)', 'cosenza(2,12)', 'cosenza(2,13)', 'cosenza(2,14)', 'cosenza(2,15)', 'cosenza(2,16)', 'cosenza(2,17)', 'cosenza(2,18)', 'cosenza(2,19)', 'cosenza(2,20)', 'cosenza(2,21)', 'cosenza(2,22)', 'cosenza(2,23)', 'cosenza(2,24)', 'cosenza(2,25)', 'cosenza(2,26)', 'cosenza(2,27)', 'cosenza(2,28)', 'cosenza(2,29)', 'cosenza(2,30)', 'cosenza(2,31)', 'cosenza(2,32)', 'cosenza(2,33)', 'cosenza(2,34)', 'cosenza(2,35)', 'cosenza(2,36)', 'cosenza(2,37)', 'cosenza(2,38)', 'cosenza(2,39)', 'cosenza(2,40)', 'cosenza(2,41)', 'cosenza(2,42)', 'cosenza(2,43)', 'cosenza(2,44)', 'cosenza(2,45)', 'cosenza(2,46)', 'cosenza(2,47)', 'cosenza(2,48)', 'cosenza(2,49)', 'cosenza(2,50)', 'cosenza(2,51)', 'cosenza(2,52)', 'cosenza(2,53)', 'cosenza(2,54)', 'cosenza(2,55)', 'cosenza(2,56)', 'cosenza(2,57)', 'cosenza(2,58)', 'cosenza(2,59)', 'cosenza(2,60)', 'cosenza(2,61)', 'cosenza(2,62)', 'cosenza(2,63)', 'cosenza(2,64)', 'cosenza(2,65)', 'cosenza(2,66)', 'cosenza(2,67)', 'cosenza(2,68)', 'cosenza(2,69)', 'cosenza(2,70)', 'cosenza(2,71)', 'cosenza(2,72)', 'cosenza(2,73)', 'cosenza(2,74)', 'cosenza(2,75)', 'cosenza(2,76)', 'cosenza(2,77)', 'cosenza(2,78)', 'cosenza(2,79)', 'cosenza(2,80)', 'cosenza(2,81)', 'cosenza(2,82)', 'cosenza(2,83)', 'cosenza(2,84)', 'cosenza(2,85)', 'cosenza(2,86)', 'cosenza(2,87)', 'cosenza(2,88)', 'cosenza(2,89)', 'cosenza(2,90)', 'cosenza(2,91)', 'cosenza(2,92)', 'cosenza(2,93)', 'cosenza(2,94)', 'cosenza(2,95)', 'cosenza(2,96)', 'cosenza(2,97)', 'cosenza(2,98)', 'cosenza(2,99)', 'cosenza(2,100)', 'cosenza(3,1)', 'cosenza(3,2)', 'cosenza(3,3)', 'cosenza(3,4)', 'cosenza(3,5)', 'cosenza(3,6)', 'cosenza(3,7)', 'cosenza(3,8)', 'cosenza(3,9)', 'cosenza(3,10)', 'cosenza(3,11)', 'cosenza(3,12)', 'cosenza(3,13)', 'cosenza(3,14)', 'cosenza(3,15)', 'cosenza(3,16)', 'cosenza(3,17)', 'cosenza(3,18)', 'cosenza(3,19)', 'cosenza(3,20)', 'cosenza(3,21)', 'cosenza(3,22)', 'cosenza(3,23)', 'cosenza(3,24)', 'cosenza(3,25)', 'cosenza(3,26)', 'cosenza(3,27)', 'cosenza(3,28)', 'cosenza(3,29)', 'cosenza(3,30)', 'cosenza(3,31)', 'cosenza(3,32)', 'cosenza(3,33)', 'cosenza(3,34)', 'cosenza(3,35)', 'cosenza(3,36)', 'cosenza(3,37)', 'cosenza(3,38)', 'cosenza(3,39)', 'cosenza(3,40)', 'cosenza(3,41)', 'cosenza(3,42)', 'cosenza(3,43)', 'cosenza(3,44)', 'cosenza(3,45)', 'cosenza(3,46)', 'cosenza(3,47)', 'cosenza(3,48)', 'cosenza(3,49)', 'cosenza(3,50)', 'cosenza(3,51)', 'cosenza(3,52)', 'cosenza(3,53)', 'cosenza(3,54)', 'cosenza(3,55)', 'cosenza(3,56)', 'cosenza(3,57)', 'cosenza(3,58)', 'cosenza(3,59)', 'cosenza(3,60)', 'cosenza(3,61)', 'cosenza(3,62)', 'cosenza(3,63)', 'cosenza(3,64)', 'cosenza(3,65)', 'cosenza(3,66)', 'cosenza(3,67)', 'cosenza(3,68)', 'cosenza(3,69)', 'cosenza(3,70)', 'cosenza(3,71)', 'cosenza(3,72)', 'cosenza(3,73)', 'cosenza(3,74)', 'cosenza(3,75)', 'cosenza(3,76)', 'cosenza(3,77)', 'cosenza(3,78)', 'cosenza(3,79)', 'cosenza(3,80)', 'cosenza(3,81)', 'cosenza(3,82)', 'cosenza(3,83)', 'cosenza(3,84)', 'cosenza(3,85)', 'cosenza(3,86)', 'cosenza(3,87)', 'cosenza(3,88)', 'cosenza(3,89)', 'cosenza(3,90)', 'cosenza(3,91)', 'cosenza(3,92)', 'cosenza(3,93)', 'cosenza(3,94)', 'cosenza(3,95)', 'cosenza(3,96)', 'cosenza(3,97)', 'cosenza(3,98)', 'cosenza(3,99)', 'cosenza(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['cosenza(1,1)', 'cosenza(1,2)', 'cosenza(1,3)', 'cosenza(1,4)', 'cosenza(1,5)', 'cosenza(1,6)', 'cosenza(1,7)', 'cosenza(1,8)', 'cosenza(1,9)', 'cosenza(1,10)', 'cosenza(1,11)', 'cosenza(1,12)', 'cosenza(1,13)', 'cosenza(1,14)', 'cosenza(1,15)', 'cosenza(1,16)', 'cosenza(1,17)', 'cosenza(1,18)', 'cosenza(1,19)', 'cosenza(1,20)', 'cosenza(1,21)', 'cosenza(1,22)', 'cosenza(1,23)', 'cosenza(1,24)', 'cosenza(1,25)', 'cosenza(1,26)', 'cosenza(1,27)', 'cosenza(1,28)', 'cosenza(1,29)', 'cosenza(1,30)', 'cosenza(1,31)', 'cosenza(1,32)', 'cosenza(1,33)', 'cosenza(1,34)', 'cosenza(1,35)', 'cosenza(1,36)', 'cosenza(1,37)', 'cosenza(1,38)', 'cosenza(1,39)', 'cosenza(1,40)', 'cosenza(1,41)', 'cosenza(1,42)', 'cosenza(1,43)', 'cosenza(1,44)', 'cosenza(1,45)', 'cosenza(1,46)', 'cosenza(1,47)', 'cosenza(1,48)', 'cosenza(1,49)', 'cosenza(1,50)', 'cosenza(1,51)', 'cosenza(1,52)', 'cosenza(1,53)', 'cosenza(1,54)', 'cosenza(1,55)', 'cosenza(1,56)', 'cosenza(1,57)', 'cosenza(1,58)', 'cosenza(1,59)', 'cosenza(1,60)', 'cosenza(1,61)', 'cosenza(1,62)', 'cosenza(1,63)', 'cosenza(1,64)', 'cosenza(1,65)', 'cosenza(1,66)', 'cosenza(1,67)', 'cosenza(1,68)', 'cosenza(1,69)', 'cosenza(1,70)', 'cosenza(1,71)', 'cosenza(1,72)', 'cosenza(1,73)', 'cosenza(1,74)', 'cosenza(1,75)', 'cosenza(1,76)', 'cosenza(1,77)', 'cosenza(1,78)', 'cosenza(1,79)', 'cosenza(1,80)', 'cosenza(1,81)', 'cosenza(1,82)', 'cosenza(1,83)', 'cosenza(1,84)', 'cosenza(1,85)', 'cosenza(1,86)', 'cosenza(1,87)', 'cosenza(1,88)', 'cosenza(1,89)', 'cosenza(1,90)', 'cosenza(1,91)', 'cosenza(1,92)', 'cosenza(1,93)', 'cosenza(1,94)', 'cosenza(1,95)', 'cosenza(1,96)', 'cosenza(1,97)', 'cosenza(1,98)', 'cosenza(1,99)', 'cosenza(1,100)', 'cosenza(2,1)', 'cosenza(2,2)', 'cosenza(2,3)', 'cosenza(2,4)', 'cosenza(2,5)', 'cosenza(2,6)', 'cosenza(2,7)', 'cosenza(2,8)', 'cosenza(2,9)', 'cosenza(2,10)', 'cosenza(2,11)', 'cosenza(2,12)', 'cosenza(2,13)', 'cosenza(2,14)', 'cosenza(2,15)', 'cosenza(2,16)', 'cosenza(2,17)', 'cosenza(2,18)', 'cosenza(2,19)', 'cosenza(2,20)', 'cosenza(2,21)', 'cosenza(2,22)', 'cosenza(2,23)', 'cosenza(2,24)', 'cosenza(2,25)', 'cosenza(2,26)', 'cosenza(2,27)', 'cosenza(2,28)', 'cosenza(2,29)', 'cosenza(2,30)', 'cosenza(2,31)', 'cosenza(2,32)', 'cosenza(2,33)', 'cosenza(2,34)', 'cosenza(2,35)', 'cosenza(2,36)', 'cosenza(2,37)', 'cosenza(2,38)', 'cosenza(2,39)', 'cosenza(2,40)', 'cosenza(2,41)', 'cosenza(2,42)', 'cosenza(2,43)', 'cosenza(2,44)', 'cosenza(2,45)', 'cosenza(2,46)', 'cosenza(2,47)', 'cosenza(2,48)', 'cosenza(2,49)', 'cosenza(2,50)', 'cosenza(2,51)', 'cosenza(2,52)', 'cosenza(2,53)', 'cosenza(2,54)', 'cosenza(2,55)', 'cosenza(2,56)', 'cosenza(2,57)', 'cosenza(2,58)', 'cosenza(2,59)', 'cosenza(2,60)', 'cosenza(2,61)', 'cosenza(2,62)', 'cosenza(2,63)', 'cosenza(2,64)', 'cosenza(2,65)', 'cosenza(2,66)', 'cosenza(2,67)', 'cosenza(2,68)', 'cosenza(2,69)', 'cosenza(2,70)', 'cosenza(2,71)', 'cosenza(2,72)', 'cosenza(2,73)', 'cosenza(2,74)', 'cosenza(2,75)', 'cosenza(2,76)', 'cosenza(2,77)', 'cosenza(2,78)', 'cosenza(2,79)', 'cosenza(2,80)', 'cosenza(2,81)', 'cosenza(2,82)', 'cosenza(2,83)', 'cosenza(2,84)', 'cosenza(2,85)', 'cosenza(2,86)', 'cosenza(2,87)', 'cosenza(2,88)', 'cosenza(2,89)', 'cosenza(2,90)', 'cosenza(2,91)', 'cosenza(2,92)', 'cosenza(2,93)', 'cosenza(2,94)', 'cosenza(2,95)', 'cosenza(2,96)', 'cosenza(2,97)', 'cosenza(2,98)', 'cosenza(2,99)', 'cosenza(2,100)', 'cosenza(3,1)', 'cosenza(3,2)', 'cosenza(3,3)', 'cosenza(3,4)', 'cosenza(3,5)', 'cosenza(3,6)', 'cosenza(3,7)', 'cosenza(3,8)', 'cosenza(3,9)', 'cosenza(3,10)', 'cosenza(3,11)', 'cosenza(3,12)', 'cosenza(3,13)', 'cosenza(3,14)', 'cosenza(3,15)', 'cosenza(3,16)', 'cosenza(3,17)', 'cosenza(3,18)', 'cosenza(3,19)', 'cosenza(3,20)', 'cosenza(3,21)', 'cosenza(3,22)', 'cosenza(3,23)', 'cosenza(3,24)', 'cosenza(3,25)', 'cosenza(3,26)', 'cosenza(3,27)', 'cosenza(3,28)', 'cosenza(3,29)', 'cosenza(3,30)', 'cosenza(3,31)', 'cosenza(3,32)', 'cosenza(3,33)', 'cosenza(3,34)', 'cosenza(3,35)', 'cosenza(3,36)', 'cosenza(3,37)', 'cosenza(3,38)', 'cosenza(3,39)', 'cosenza(3,40)', 'cosenza(3,41)', 'cosenza(3,42)', 'cosenza(3,43)', 'cosenza(3,44)', 'cosenza(3,45)', 'cosenza(3,46)', 'cosenza(3,47)', 'cosenza(3,48)', 'cosenza(3,49)', 'cosenza(3,50)', 'cosenza(3,51)', 'cosenza(3,52)', 'cosenza(3,53)', 'cosenza(3,54)', 'cosenza(3,55)', 'cosenza(3,56)', 'cosenza(3,57)', 'cosenza(3,58)', 'cosenza(3,59)', 'cosenza(3,60)', 'cosenza(3,61)', 'cosenza(3,62)', 'cosenza(3,63)', 'cosenza(3,64)', 'cosenza(3,65)', 'cosenza(3,66)', 'cosenza(3,67)', 'cosenza(3,68)', 'cosenza(3,69)', 'cosenza(3,70)', 'cosenza(3,71)', 'cosenza(3,72)', 'cosenza(3,73)', 'cosenza(3,74)', 'cosenza(3,75)', 'cosenza(3,76)', 'cosenza(3,77)', 'cosenza(3,78)', 'cosenza(3,79)', 'cosenza(3,80)', 'cosenza(3,81)', 'cosenza(3,82)', 'cosenza(3,83)', 'cosenza(3,84)', 'cosenza(3,85)', 'cosenza(3,86)', 'cosenza(3,87)', 'cosenza(3,88)', 'cosenza(3,89)', 'cosenza(3,90)', 'cosenza(3,91)', 'cosenza(3,92)', 'cosenza(3,93)', 'cosenza(3,94)', 'cosenza(3,95)', 'cosenza(3,96)', 'cosenza(3,97)', 'cosenza(3,98)', 'cosenza(3,99)', 'cosenza(3,100)', 'select(1)', 'select(2)', 'select(3)']]


9
assignment

question: 
Design an ASP script to connect each element, as determined by the predicate "quality", with one label from "barcelona","darkmagenta","quality","delhi","hair","weight","chicago","lake".

answer from file: 
assign(X,"barcelona")|assign(X,"darkmagenta")|assign(X,"quality")|assign(X,"delhi")|assign(X,"hair")|assign(X,"weight")|assign(X,"chicago")|assign(X,"lake"):-quality(X).

parsed from model: 
assign(X,"barcelona")|assign(X,"darkmagenta")|assign(X,"quality")|assign(X,"delhi")|assign(X,"hair")|assign(X,"weight")|assign(X,"chicago")|assign(X,"lake"):-quality(X).

facts: 
quality(1..5).

generated: 
Design an ASP script to connect each element, as determined by the predicate "quality", with one label from "barcelona","darkmagenta","quality","delhi","hair","weight","chicago","lake".
Answer: assign(X,"barcelona")|assign(X,"darkmagenta")|assign(X,"quality")|assign(X,"delhi")|assign(X,"hair")|assign(X,"weight")|assign(X,"chicago")|assign(X,"lake"):-quality(X).
assign(X,"city")|assign(X,"author")|assign(X,"description","city"):-quality(X).
assign(X,"author"):-description(X).
assign(X,"description"):-author(X).
assign(X,"city"):-author(X).
assign(X,"author","description"):-quality(X).
assign(X,"description","

unique_rules: 
['assign(X,"barcelona")|assign(X,"darkmagenta")|assign(X,"quality")|assign(X,"delhi")|assign(X,"hair")|assign(X,"weight")|assign(X,"chicago")|assign(X,"lake"):-quality(X).', 'assign(X,"city")|assign(X,"author")|assign(X,"description","city"):-quality(X).', 'assign(X,"author"):-description(X).', 'assign(X,"description"):-author(X).', 'assign(X,"city"):-author(X).', 'assign(X,"author","description"):-quality(X).']

jaccard: 1.0

AS desired: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'assign(1,"lake")', 'assign(2,"lake")', 'assign(3,"chicago")', 'assign(4,"lake")', 'assign(5,"lake")']]
\AS obtained: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'assign(1,"lake")', 'assign(2,"lake")', 'assign(3,"chicago")', 'assign(4,"lake")', 'assign(5,"lake")']]


10
constraint

question: 
Formulate an ASP code that ensures the "lake" predicate having value 9 is not connected to the label "strength".

answer from file: 
:-assign(9,strength).

parsed from model: 


facts: 
lake(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-lake(X).

generated: 
Formulate an ASP code that ensures the "lake" predicate having value 9 is not connected to the label "strength".
```
assign(9,"strength")
```
This code uses the "assign" predicate to associate the value 9 with the label "strength".
The "assign" predicate ensures that the "strength" label is not associated with the value 9.

unique_rules: 
[]

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lake(6)', 'lake(7)', 'lake(8)', 'lake(9)', 'lake(10)', 'lake(11)', 'lake(12)', 'lake(13)', 'lake(14)', 'lake(15)', 'lake(16)', 'lake(17)', 'lake(18)', 'lake(19)', 'lake(20)']]
\AS obtained: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lake(6)', 'lake(7)', 'lake(8)', 'lake(9)', 'lake(10)', 'lake(11)', 'lake(12)', 'lake(13)', 'lake(14)', 'lake(15)', 'lake(16)', 'lake(17)', 'lake(18)', 'lake(19)', 'lake(20)', 'assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")']]


11
combination

question: 
Compose an ASP script to calculate the Cartesian product of elements represented by the predicates "white" and "butterfly".

answer from file: 
combination(X,Y):-white(X),butterfly(Y).

parsed from model: 
combination(X,Y):-white(X), arrivant(Y).

facts: 
white(1..4).butterfly(1..5).

generated: 
Compose an ASP script to calculate the Cartesian product of elements represented by the predicates "white" and "butterfly".
Answer: combination(X,Y):-white(X), arrivant(Y).
combination(X,Y):-white(X),not arrivant(Y).
combination(X,Y):-not white(X), arrivant(Y).
combination(X,Y):-not white(X),not arrivant(Y).

unique_rules: 
['combination(X,Y):-white(X), arrivant(Y).', 'combination(X,Y):-white(X),not arrivant(Y).', 'combination(X,Y):-not white(X), arrivant(Y).', 'combination(X,Y):-not white(X),not arrivant(Y).']

jaccard: 0.0

AS desired: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)', 'white(1)', 'white(2)', 'white(3)', 'white(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['white(1)', 'white(2)', 'white(3)', 'white(4)', 'butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)']]


12
join

question: 
Write an ASP application to address the problem where the predicate "singapore" has fields "ID","laptopID","owner","lake","hair", and the predicate "laptop" has fields "ID","weight","strength","quality". Define the predicate "singapore_laptop" that associates each singapore with the weight of laptop.

answer from file: 
singapore_laptop(X,Z):-singapore(X,Y,_,_,_),laptop(Y,Z,_,_).

parsed from model: 
singapore_laptop(X,Z):-singapore(X,Y,_,_,_),laptop(Y,Z,_,_).

facts: 
singapore("ID","laptopID","owner","lake","hair").laptop("ID","weight","strength","quality").

generated: 
Write an ASP application to address the problem where the predicate "singapore" has fields "ID","laptopID","owner","lake","hair", and the predicate "laptop" has fields "ID","weight","strength","quality". Define the predicate "singapore_laptop" that associates each singapore with the weight of laptop.
Answer: singapore_laptop(X,Z):-singapore(X,Y,_,_,_),laptop(Y,Z,_,_).
singapore_laptop(X,Z):-singapore(X,Y,_,_),not laptop(Y,Z,_,_).

unique_rules: 
['singapore_laptop(X,Z):-singapore(X,Y,_,_,_),laptop(Y,Z,_,_).', 'singapore_laptop(X,Z):-singapore(X,Y,_,_),not laptop(Y,Z,_,_).']

jaccard: 1.0

AS desired: [['singapore("ID","laptopID","owner","lake","hair")', 'laptop("ID","weight","strength","quality")']]
\AS obtained: [['singapore("ID","laptopID","owner","lake","hair")', 'laptop("ID","weight","strength","quality")']]


13
closure

question: 
Formulate an ASP solution to establish the transitive closure of the "toronto" predicate, defined as "loops".

answer from file: 
loops(X,Y):-toronto(X,Y).
loops(X,Y):-toronto(X,Z),loops(Z,Y).

parsed from model: 
closure(X,Y):-loops(X,Y).
closure(X,Y):-loops(X,Z),closure(Z,Y).

facts: 
toronto(1..3, 1..4).

generated: 
Formulate an ASP solution to establish the transitive closure of the "toronto" predicate, defined as "loops".
Answer: closure(X,Y):-loops(X,Y).
closure(X,Y):-loops(X,Z),closure(Z,Y).
closure(X,Y):-loops(X,Z),closure(Z,Y).
closure(X,Y):-loops(X,Y).
closure(X,Y):-loops(X,Z),loops(Z,Y).
closure(X,Y):-loops(X,Z),loops(Z,Y).

unique_rules: 
['closure(X,Y):-loops(X,Y).', 'closure(X,Y):-loops(X,Z),closure(Z,Y).', 'closure(X,Y):-loops(X,Z),loops(Z,Y).']

jaccard: 0.0

AS desired: [['toronto(1,1)', 'toronto(1,2)', 'toronto(1,3)', 'toronto(1,4)', 'toronto(2,1)', 'toronto(2,2)', 'toronto(2,3)', 'toronto(2,4)', 'toronto(3,1)', 'toronto(3,2)', 'toronto(3,3)', 'toronto(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]
\AS obtained: [['toronto(1,1)', 'toronto(1,2)', 'toronto(1,3)', 'toronto(1,4)', 'toronto(2,1)', 'toronto(2,2)', 'toronto(2,3)', 'toronto(2,4)', 'toronto(3,1)', 'toronto(3,2)', 'toronto(3,3)', 'toronto(3,4)']]


14
preference

question: 
Generate an ASP program to disallow the association of the predicate "strength" with value "12" with "weight". If associated, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(12,"weight").[1@1]

parsed from model: 
:~assign(12,"weight").[1@1]

facts: 
strength(1..20).

generated: 
Generate an ASP program to disallow the association of the predicate "strength" with value "12" with "weight". If associated, it incurs a cost of "1" at level "1".
Answer: :~assign(12,"weight").[1@1]
This program uses the predicate "height" with fields "ID","city","author","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description

unique_rules: 
[':~assign(12,"weight").[1@1]']

jaccard: 1.0

AS desired: [['strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'strength(6)', 'strength(7)', 'strength(8)', 'strength(9)', 'strength(10)', 'strength(11)', 'strength(12)', 'strength(13)', 'strength(14)', 'strength(15)', 'strength(16)', 'strength(17)', 'strength(18)', 'strength(19)', 'strength(20)']]
\AS obtained: [['strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'strength(6)', 'strength(7)', 'strength(8)', 'strength(9)', 'strength(10)', 'strength(11)', 'strength(12)', 'strength(13)', 'strength(14)', 'strength(15)', 'strength(16)', 'strength(17)', 'strength(18)', 'strength(19)', 'strength(20)']]


15
filtering

question: 
Produce an ASP program to gather and retrieve values linked to the "owner" label in the "owner" predicate.

answer from file: 
select(X):-owner(X,"owner").

parsed from model: 
select(X):-owner(X,"owner").

facts: 
owner(1..5, "owner").

generated: 
Produce an ASP program to gather and retrieve values linked to the "owner" label in the "owner" predicate.
Answer: select(X):-owner(X,"owner").
owner(X,Z):-owner(X,Z).
owner(X,"author").
owner(X,"moto").
owner(X,"rome").
owner(X,"author","rome").
owner(X,"author","moto").
owner(X,"author","author").
owner(X,"author","author").

unique_rules: 
['select(X):-owner(X,"owner").', 'owner(X,Z):-owner(X,Z).']

jaccard: 1.0

AS desired: [['owner(1,"owner")', 'owner(2,"owner")', 'owner(3,"owner")', 'owner(4,"owner")', 'owner(5,"owner")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['owner(1,"owner")', 'owner(2,"owner")', 'owner(3,"owner")', 'owner(4,"owner")', 'owner(5,"owner")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


16
negative_filtering

question: 
Draft an ASP solution to identify values associated with the predicate "barcelona" but not tied to the predicate "barcelona" and labeled "chicago".

answer from file: 
select(X):-barcelona(X),not barcelona(X,"chicago").

parsed from model: 
select(X):-barcelona(X),not barcelona(X,"chicago").

facts: 
barcelona(1..3).barcelona(1,"surname").barcelona(2,"chicago").barcelona(3,"flower").

generated: 
Draft an ASP solution to identify values associated with the predicate "barcelona" but not tied to the predicate "barcelona" and labeled "chicago".
Answer: select(X):-barcelona(X),not barcelona(X,"chicago").
Explanation: The predicate "barcelona" includes values associated with the predicate "moto", and the predicate "chicago" includes values labeled "moto".
The predicate "select" identifies values associated with the predicate "moto" but not tied to the predicate "barcelona" and labeled "chicago".

unique_rules: 
['select(X):-barcelona(X),not barcelona(X,"chicago").']

jaccard: 1.0

AS desired: [['barcelona(1)', 'barcelona(2)', 'barcelona(3)', 'barcelona(1,"surname")', 'barcelona(2,"chicago")', 'barcelona(3,"flower")', 'select(1)', 'select(3)']]
\AS obtained: [['barcelona(1)', 'barcelona(2)', 'barcelona(3)', 'barcelona(1,"surname")', 'barcelona(2,"chicago")', 'barcelona(3,"flower")', 'select(1)', 'select(3)']]


17
numeric_filtering

question: 
Craft an ASP code to retrieve values connected to the predicate "desk" with a value different than 12.

answer from file: 
select(X):-desk(X,C),C!=12.

parsed from model: 
select(X):-desk(X,C),C!=12.

facts: 
desk(1..3, 1..100).

generated: 
Craft an ASP code to retrieve values connected to the predicate "desk" with a value different than 12.
Answer: select(X):-desk(X,C),C!=12.
desk(X,C):-desk(X,C),C==12.

unique_rules: 
['select(X):-desk(X,C),C!=12.', 'desk(X,C):-desk(X,C),C==12.']

jaccard: 1.0

AS desired: [['desk(1,1)', 'desk(1,2)', 'desk(1,3)', 'desk(1,4)', 'desk(1,5)', 'desk(1,6)', 'desk(1,7)', 'desk(1,8)', 'desk(1,9)', 'desk(1,10)', 'desk(1,11)', 'desk(1,12)', 'desk(1,13)', 'desk(1,14)', 'desk(1,15)', 'desk(1,16)', 'desk(1,17)', 'desk(1,18)', 'desk(1,19)', 'desk(1,20)', 'desk(1,21)', 'desk(1,22)', 'desk(1,23)', 'desk(1,24)', 'desk(1,25)', 'desk(1,26)', 'desk(1,27)', 'desk(1,28)', 'desk(1,29)', 'desk(1,30)', 'desk(1,31)', 'desk(1,32)', 'desk(1,33)', 'desk(1,34)', 'desk(1,35)', 'desk(1,36)', 'desk(1,37)', 'desk(1,38)', 'desk(1,39)', 'desk(1,40)', 'desk(1,41)', 'desk(1,42)', 'desk(1,43)', 'desk(1,44)', 'desk(1,45)', 'desk(1,46)', 'desk(1,47)', 'desk(1,48)', 'desk(1,49)', 'desk(1,50)', 'desk(1,51)', 'desk(1,52)', 'desk(1,53)', 'desk(1,54)', 'desk(1,55)', 'desk(1,56)', 'desk(1,57)', 'desk(1,58)', 'desk(1,59)', 'desk(1,60)', 'desk(1,61)', 'desk(1,62)', 'desk(1,63)', 'desk(1,64)', 'desk(1,65)', 'desk(1,66)', 'desk(1,67)', 'desk(1,68)', 'desk(1,69)', 'desk(1,70)', 'desk(1,71)', 'desk(1,72)', 'desk(1,73)', 'desk(1,74)', 'desk(1,75)', 'desk(1,76)', 'desk(1,77)', 'desk(1,78)', 'desk(1,79)', 'desk(1,80)', 'desk(1,81)', 'desk(1,82)', 'desk(1,83)', 'desk(1,84)', 'desk(1,85)', 'desk(1,86)', 'desk(1,87)', 'desk(1,88)', 'desk(1,89)', 'desk(1,90)', 'desk(1,91)', 'desk(1,92)', 'desk(1,93)', 'desk(1,94)', 'desk(1,95)', 'desk(1,96)', 'desk(1,97)', 'desk(1,98)', 'desk(1,99)', 'desk(1,100)', 'desk(2,1)', 'desk(2,2)', 'desk(2,3)', 'desk(2,4)', 'desk(2,5)', 'desk(2,6)', 'desk(2,7)', 'desk(2,8)', 'desk(2,9)', 'desk(2,10)', 'desk(2,11)', 'desk(2,12)', 'desk(2,13)', 'desk(2,14)', 'desk(2,15)', 'desk(2,16)', 'desk(2,17)', 'desk(2,18)', 'desk(2,19)', 'desk(2,20)', 'desk(2,21)', 'desk(2,22)', 'desk(2,23)', 'desk(2,24)', 'desk(2,25)', 'desk(2,26)', 'desk(2,27)', 'desk(2,28)', 'desk(2,29)', 'desk(2,30)', 'desk(2,31)', 'desk(2,32)', 'desk(2,33)', 'desk(2,34)', 'desk(2,35)', 'desk(2,36)', 'desk(2,37)', 'desk(2,38)', 'desk(2,39)', 'desk(2,40)', 'desk(2,41)', 'desk(2,42)', 'desk(2,43)', 'desk(2,44)', 'desk(2,45)', 'desk(2,46)', 'desk(2,47)', 'desk(2,48)', 'desk(2,49)', 'desk(2,50)', 'desk(2,51)', 'desk(2,52)', 'desk(2,53)', 'desk(2,54)', 'desk(2,55)', 'desk(2,56)', 'desk(2,57)', 'desk(2,58)', 'desk(2,59)', 'desk(2,60)', 'desk(2,61)', 'desk(2,62)', 'desk(2,63)', 'desk(2,64)', 'desk(2,65)', 'desk(2,66)', 'desk(2,67)', 'desk(2,68)', 'desk(2,69)', 'desk(2,70)', 'desk(2,71)', 'desk(2,72)', 'desk(2,73)', 'desk(2,74)', 'desk(2,75)', 'desk(2,76)', 'desk(2,77)', 'desk(2,78)', 'desk(2,79)', 'desk(2,80)', 'desk(2,81)', 'desk(2,82)', 'desk(2,83)', 'desk(2,84)', 'desk(2,85)', 'desk(2,86)', 'desk(2,87)', 'desk(2,88)', 'desk(2,89)', 'desk(2,90)', 'desk(2,91)', 'desk(2,92)', 'desk(2,93)', 'desk(2,94)', 'desk(2,95)', 'desk(2,96)', 'desk(2,97)', 'desk(2,98)', 'desk(2,99)', 'desk(2,100)', 'desk(3,1)', 'desk(3,2)', 'desk(3,3)', 'desk(3,4)', 'desk(3,5)', 'desk(3,6)', 'desk(3,7)', 'desk(3,8)', 'desk(3,9)', 'desk(3,10)', 'desk(3,11)', 'desk(3,12)', 'desk(3,13)', 'desk(3,14)', 'desk(3,15)', 'desk(3,16)', 'desk(3,17)', 'desk(3,18)', 'desk(3,19)', 'desk(3,20)', 'desk(3,21)', 'desk(3,22)', 'desk(3,23)', 'desk(3,24)', 'desk(3,25)', 'desk(3,26)', 'desk(3,27)', 'desk(3,28)', 'desk(3,29)', 'desk(3,30)', 'desk(3,31)', 'desk(3,32)', 'desk(3,33)', 'desk(3,34)', 'desk(3,35)', 'desk(3,36)', 'desk(3,37)', 'desk(3,38)', 'desk(3,39)', 'desk(3,40)', 'desk(3,41)', 'desk(3,42)', 'desk(3,43)', 'desk(3,44)', 'desk(3,45)', 'desk(3,46)', 'desk(3,47)', 'desk(3,48)', 'desk(3,49)', 'desk(3,50)', 'desk(3,51)', 'desk(3,52)', 'desk(3,53)', 'desk(3,54)', 'desk(3,55)', 'desk(3,56)', 'desk(3,57)', 'desk(3,58)', 'desk(3,59)', 'desk(3,60)', 'desk(3,61)', 'desk(3,62)', 'desk(3,63)', 'desk(3,64)', 'desk(3,65)', 'desk(3,66)', 'desk(3,67)', 'desk(3,68)', 'desk(3,69)', 'desk(3,70)', 'desk(3,71)', 'desk(3,72)', 'desk(3,73)', 'desk(3,74)', 'desk(3,75)', 'desk(3,76)', 'desk(3,77)', 'desk(3,78)', 'desk(3,79)', 'desk(3,80)', 'desk(3,81)', 'desk(3,82)', 'desk(3,83)', 'desk(3,84)', 'desk(3,85)', 'desk(3,86)', 'desk(3,87)', 'desk(3,88)', 'desk(3,89)', 'desk(3,90)', 'desk(3,91)', 'desk(3,92)', 'desk(3,93)', 'desk(3,94)', 'desk(3,95)', 'desk(3,96)', 'desk(3,97)', 'desk(3,98)', 'desk(3,99)', 'desk(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['desk(1,1)', 'desk(1,2)', 'desk(1,3)', 'desk(1,4)', 'desk(1,5)', 'desk(1,6)', 'desk(1,7)', 'desk(1,8)', 'desk(1,9)', 'desk(1,10)', 'desk(1,11)', 'desk(1,12)', 'desk(1,13)', 'desk(1,14)', 'desk(1,15)', 'desk(1,16)', 'desk(1,17)', 'desk(1,18)', 'desk(1,19)', 'desk(1,20)', 'desk(1,21)', 'desk(1,22)', 'desk(1,23)', 'desk(1,24)', 'desk(1,25)', 'desk(1,26)', 'desk(1,27)', 'desk(1,28)', 'desk(1,29)', 'desk(1,30)', 'desk(1,31)', 'desk(1,32)', 'desk(1,33)', 'desk(1,34)', 'desk(1,35)', 'desk(1,36)', 'desk(1,37)', 'desk(1,38)', 'desk(1,39)', 'desk(1,40)', 'desk(1,41)', 'desk(1,42)', 'desk(1,43)', 'desk(1,44)', 'desk(1,45)', 'desk(1,46)', 'desk(1,47)', 'desk(1,48)', 'desk(1,49)', 'desk(1,50)', 'desk(1,51)', 'desk(1,52)', 'desk(1,53)', 'desk(1,54)', 'desk(1,55)', 'desk(1,56)', 'desk(1,57)', 'desk(1,58)', 'desk(1,59)', 'desk(1,60)', 'desk(1,61)', 'desk(1,62)', 'desk(1,63)', 'desk(1,64)', 'desk(1,65)', 'desk(1,66)', 'desk(1,67)', 'desk(1,68)', 'desk(1,69)', 'desk(1,70)', 'desk(1,71)', 'desk(1,72)', 'desk(1,73)', 'desk(1,74)', 'desk(1,75)', 'desk(1,76)', 'desk(1,77)', 'desk(1,78)', 'desk(1,79)', 'desk(1,80)', 'desk(1,81)', 'desk(1,82)', 'desk(1,83)', 'desk(1,84)', 'desk(1,85)', 'desk(1,86)', 'desk(1,87)', 'desk(1,88)', 'desk(1,89)', 'desk(1,90)', 'desk(1,91)', 'desk(1,92)', 'desk(1,93)', 'desk(1,94)', 'desk(1,95)', 'desk(1,96)', 'desk(1,97)', 'desk(1,98)', 'desk(1,99)', 'desk(1,100)', 'desk(2,1)', 'desk(2,2)', 'desk(2,3)', 'desk(2,4)', 'desk(2,5)', 'desk(2,6)', 'desk(2,7)', 'desk(2,8)', 'desk(2,9)', 'desk(2,10)', 'desk(2,11)', 'desk(2,12)', 'desk(2,13)', 'desk(2,14)', 'desk(2,15)', 'desk(2,16)', 'desk(2,17)', 'desk(2,18)', 'desk(2,19)', 'desk(2,20)', 'desk(2,21)', 'desk(2,22)', 'desk(2,23)', 'desk(2,24)', 'desk(2,25)', 'desk(2,26)', 'desk(2,27)', 'desk(2,28)', 'desk(2,29)', 'desk(2,30)', 'desk(2,31)', 'desk(2,32)', 'desk(2,33)', 'desk(2,34)', 'desk(2,35)', 'desk(2,36)', 'desk(2,37)', 'desk(2,38)', 'desk(2,39)', 'desk(2,40)', 'desk(2,41)', 'desk(2,42)', 'desk(2,43)', 'desk(2,44)', 'desk(2,45)', 'desk(2,46)', 'desk(2,47)', 'desk(2,48)', 'desk(2,49)', 'desk(2,50)', 'desk(2,51)', 'desk(2,52)', 'desk(2,53)', 'desk(2,54)', 'desk(2,55)', 'desk(2,56)', 'desk(2,57)', 'desk(2,58)', 'desk(2,59)', 'desk(2,60)', 'desk(2,61)', 'desk(2,62)', 'desk(2,63)', 'desk(2,64)', 'desk(2,65)', 'desk(2,66)', 'desk(2,67)', 'desk(2,68)', 'desk(2,69)', 'desk(2,70)', 'desk(2,71)', 'desk(2,72)', 'desk(2,73)', 'desk(2,74)', 'desk(2,75)', 'desk(2,76)', 'desk(2,77)', 'desk(2,78)', 'desk(2,79)', 'desk(2,80)', 'desk(2,81)', 'desk(2,82)', 'desk(2,83)', 'desk(2,84)', 'desk(2,85)', 'desk(2,86)', 'desk(2,87)', 'desk(2,88)', 'desk(2,89)', 'desk(2,90)', 'desk(2,91)', 'desk(2,92)', 'desk(2,93)', 'desk(2,94)', 'desk(2,95)', 'desk(2,96)', 'desk(2,97)', 'desk(2,98)', 'desk(2,99)', 'desk(2,100)', 'desk(3,1)', 'desk(3,2)', 'desk(3,3)', 'desk(3,4)', 'desk(3,5)', 'desk(3,6)', 'desk(3,7)', 'desk(3,8)', 'desk(3,9)', 'desk(3,10)', 'desk(3,11)', 'desk(3,12)', 'desk(3,13)', 'desk(3,14)', 'desk(3,15)', 'desk(3,16)', 'desk(3,17)', 'desk(3,18)', 'desk(3,19)', 'desk(3,20)', 'desk(3,21)', 'desk(3,22)', 'desk(3,23)', 'desk(3,24)', 'desk(3,25)', 'desk(3,26)', 'desk(3,27)', 'desk(3,28)', 'desk(3,29)', 'desk(3,30)', 'desk(3,31)', 'desk(3,32)', 'desk(3,33)', 'desk(3,34)', 'desk(3,35)', 'desk(3,36)', 'desk(3,37)', 'desk(3,38)', 'desk(3,39)', 'desk(3,40)', 'desk(3,41)', 'desk(3,42)', 'desk(3,43)', 'desk(3,44)', 'desk(3,45)', 'desk(3,46)', 'desk(3,47)', 'desk(3,48)', 'desk(3,49)', 'desk(3,50)', 'desk(3,51)', 'desk(3,52)', 'desk(3,53)', 'desk(3,54)', 'desk(3,55)', 'desk(3,56)', 'desk(3,57)', 'desk(3,58)', 'desk(3,59)', 'desk(3,60)', 'desk(3,61)', 'desk(3,62)', 'desk(3,63)', 'desk(3,64)', 'desk(3,65)', 'desk(3,66)', 'desk(3,67)', 'desk(3,68)', 'desk(3,69)', 'desk(3,70)', 'desk(3,71)', 'desk(3,72)', 'desk(3,73)', 'desk(3,74)', 'desk(3,75)', 'desk(3,76)', 'desk(3,77)', 'desk(3,78)', 'desk(3,79)', 'desk(3,80)', 'desk(3,81)', 'desk(3,82)', 'desk(3,83)', 'desk(3,84)', 'desk(3,85)', 'desk(3,86)', 'desk(3,87)', 'desk(3,88)', 'desk(3,89)', 'desk(3,90)', 'desk(3,91)', 'desk(3,92)', 'desk(3,93)', 'desk(3,94)', 'desk(3,95)', 'desk(3,96)', 'desk(3,97)', 'desk(3,98)', 'desk(3,99)', 'desk(3,100)', 'select(1)', 'select(2)', 'select(3)']]


18
assignment

question: 
Craft an ASP solution that associates precisely one label from "delhi","wall","pink","toronto","flower" with elements specified by the predicate "white".

answer from file: 
assign(X,"delhi")|assign(X,"wall")|assign(X,"pink")|assign(X,"toronto")|assign(X,"flower"):-white(X).

parsed from model: 
assign(X,"delhi")|assign(X,"wall")|assign(X,"pink")|assign(X,"toronto")|assign(X,"flower"):-white(X).

facts: 
white(1..5).

generated: 
Craft an ASP solution that associates precisely one label from "delhi","wall","pink","toronto","flower" with elements specified by the predicate "white".
Answer: assign(X,"delhi")|assign(X,"wall")|assign(X,"pink")|assign(X,"toronto")|assign(X,"flower"):-white(X).
assign(X,"delhi"):-white(X).
assign(X,"wall"):-white(X).
assign(X,"pink"):-white(X).
assign(X,"toronto"):-white(X).
assign(X,"flower"):-white(X).
where "white(X)" returns true if the element X is labeled "delhi","wall","pink","toronto","flower".

unique_rules: 
['assign(X,"delhi")|assign(X,"wall")|assign(X,"pink")|assign(X,"toronto")|assign(X,"flower"):-white(X).', 'assign(X,"delhi"):-white(X).', 'assign(X,"wall"):-white(X).', 'assign(X,"pink"):-white(X).', 'assign(X,"toronto"):-white(X).', 'assign(X,"flower"):-white(X).']

jaccard: 1.0

AS desired: [['white(1)', 'white(2)', 'white(3)', 'white(4)', 'white(5)', 'assign(1,"flower")', 'assign(2,"flower")', 'assign(3,"flower")', 'assign(4,"flower")', 'assign(5,"flower")']]
\AS obtained: [['white(1)', 'white(2)', 'white(3)', 'white(4)', 'white(5)', 'assign(1,"flower")', 'assign(2,"flower")', 'assign(3,"flower")', 'assign(4,"flower")', 'assign(5,"flower")']]


19
constraint

question: 
Draft an ASP program to disallow assigning the predicate "surname" with value 6 to the label "darkmagenta".

answer from file: 
:-assign(6,darkmagenta).

parsed from model: 
:-assign(6,darkmagenta).

facts: 
surname(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-surname(X).

generated: 
Draft an ASP program to disallow assigning the predicate "surname" with value 6 to the label "darkmagenta".
Answer: :-assign(6,darkmagenta).
Explanation: The predicate "brown" includes the "darkmagenta" label for the "cyan" value.
The predicate "cyan" includes the "description" label for the "height" value.
The predicate "height" includes the "description" label for the "height" value.
So, the predicate "brown" includes the "darkmagenta" label for the "height" value.
The predicate "cyan" includes the "description" label for the "height" value.
The predicate "height" includes the "description" label for the "height" value.
Therefore, the predicate "brown" includes the "darkmagenta" label for the "height

unique_rules: 
[':-assign(6,darkmagenta).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'surname(1)', 'surname(2)', 'surname(3)', 'surname(4)', 'surname(5)', 'surname(6)', 'surname(7)', 'surname(8)', 'surname(9)', 'surname(10)', 'surname(11)', 'surname(12)', 'surname(13)', 'surname(14)', 'surname(15)', 'surname(16)', 'surname(17)', 'surname(18)', 'surname(19)', 'surname(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'surname(1)', 'surname(2)', 'surname(3)', 'surname(4)', 'surname(5)', 'surname(6)', 'surname(7)', 'surname(8)', 'surname(9)', 'surname(10)', 'surname(11)', 'surname(12)', 'surname(13)', 'surname(14)', 'surname(15)', 'surname(16)', 'surname(17)', 'surname(18)', 'surname(19)', 'surname(20)']]


20
combination

question: 
Generate an ASP code to compute the cross-product of elements in the sets defined by "mumbai" and "owner".

answer from file: 
combination(X,Y):-mumbai(X),owner(Y).

parsed from model: 


facts: 
mumbai(1..4).owner(1..5).

generated: 
Generate an ASP code to compute the cross-product of elements in the sets defined by "mumbai" and "owner".
Answer: cross_product(mumbai,owner)

unique_rules: 
[]

jaccard: 0.0

AS desired: [['owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'owner(5)', 'mumbai(1)', 'mumbai(2)', 'mumbai(3)', 'mumbai(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['mumbai(1)', 'mumbai(2)', 'mumbai(3)', 'mumbai(4)', 'owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'owner(5)']]


21
join

question: 
Draft an ASP script to define the predicate "roof_hair" that associates each roof with the strength of hair, given "roof" has fields "ID","surname","hairID" and "hair" has fields "ID","hair","strength","weight".

answer from file: 
roof_hair(X,Z):-roof(X,_,Y),hair(Y,_,Z,_).

parsed from model: 
roof_hair(X,Z):-roof(X,_,Y),hair(Y,Z,Z,_).

facts: 
roof("ID","surname","hairID").hair("ID","hair","strength","weight").

generated: 
Draft an ASP script to define the predicate "roof_hair" that associates each roof with the strength of hair, given "roof" has fields "ID","surname","hairID" and "hair" has fields "ID","hair","strength","weight". Define the predicate "roof_hair" that associates each roof with the strength of hair.
Answer: roof_hair(X,Z):-roof(X,_,Y),hair(Y,Z,Z,_).
roof_hair(X,Z):-roof(X,_,Z),not hair(Z,Z,_,_).

unique_rules: 
['roof_hair(X,Z):-roof(X,_,Y),hair(Y,Z,Z,_).', 'roof_hair(X,Z):-roof(X,_,Z),not hair(Z,Z,_,_).']

jaccard: 1.0

AS desired: [['roof("ID","surname","hairID")', 'hair("ID","hair","strength","weight")']]
\AS obtained: [['roof("ID","surname","hairID")', 'hair("ID","hair","strength","weight")']]


22
closure

question: 
Develop an ASP script that derives the "journey" predicate through the transitive closure of the "singapore" predicate.

answer from file: 
journey(X,Y):-singapore(X,Y).
journey(X,Y):-singapore(X,Z),journey(Z,Y).

parsed from model: 
journey(X,Y):-singapore(X,Y).
journey(X,Y):-singapore(X,Z),journey(Z,Y).

facts: 
singapore(1..3, 1..4).

generated: 
Develop an ASP script that derives the "journey" predicate through the transitive closure of the "singapore" predicate.
Answer: journey(X,Y):-singapore(X,Y).
journey(X,Y):-singapore(X,Z),journey(Z,Y).
journey(X,Y):-not singapore(X,Y).
journey(X,Y):-age(X,Y).
age(X,Y):-city(X,Y).
city(X,Y):-age(X,Y).

unique_rules: 
['journey(X,Y):-singapore(X,Y).', 'journey(X,Y):-singapore(X,Z),journey(Z,Y).', 'journey(X,Y):-not singapore(X,Y).', 'journey(X,Y):-age(X,Y).', 'age(X,Y):-city(X,Y).', 'city(X,Y):-age(X,Y).']

jaccard: 1.0

AS desired: [['singapore(1,1)', 'singapore(1,2)', 'singapore(1,3)', 'singapore(1,4)', 'singapore(2,1)', 'singapore(2,2)', 'singapore(2,3)', 'singapore(2,4)', 'singapore(3,1)', 'singapore(3,2)', 'singapore(3,3)', 'singapore(3,4)', 'journey(1,1)', 'journey(1,2)', 'journey(1,3)', 'journey(1,4)', 'journey(2,1)', 'journey(2,2)', 'journey(2,3)', 'journey(2,4)', 'journey(3,1)', 'journey(3,2)', 'journey(3,3)', 'journey(3,4)']]
\AS obtained: [['singapore(1,1)', 'singapore(1,2)', 'singapore(1,3)', 'singapore(1,4)', 'singapore(2,1)', 'singapore(2,2)', 'singapore(2,3)', 'singapore(2,4)', 'singapore(3,1)', 'singapore(3,2)', 'singapore(3,3)', 'singapore(3,4)', 'journey(1,1)', 'journey(1,2)', 'journey(1,3)', 'journey(1,4)', 'journey(2,1)', 'journey(2,2)', 'journey(2,3)', 'journey(2,4)', 'journey(3,1)', 'journey(3,2)', 'journey(3,3)', 'journey(3,4)']]


23
preference

question: 
Craft an ASP solution to prevent the linking of the "owner" predicate with value "11" to "lightblue". Any link incurs a cost of "1" at level "1".

answer from file: 
:~assign(11,"lightblue").[1@1]

parsed from model: 
:~assign(11,"lightblue").[1@1]

facts: 
owner(1..20).

generated: 
Craft an ASP solution to prevent the linking of the "owner" predicate with value "11" to "lightblue". Any link incurs a cost of "1" at level "1".
Answer: :~assign(11,"lightblue").[1@1]
Explanation: The predicate "author" includes a field "name" that links to the "lightblue" label. The predicate "city" includes fields "ID","height","name","author","city","age","description","author","name","city","price","height","description","author","age","city","name","price","height","description","city","author","name","city","price","height","description","author","age","city","name","price","height","description","city","author","name","city","price","height","description","city","author","name","city","price","height","description","city","author","

unique_rules: 
[':~assign(11,"lightblue").[1@1]']

jaccard: 1.0

AS desired: [['owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'owner(5)', 'owner(6)', 'owner(7)', 'owner(8)', 'owner(9)', 'owner(10)', 'owner(11)', 'owner(12)', 'owner(13)', 'owner(14)', 'owner(15)', 'owner(16)', 'owner(17)', 'owner(18)', 'owner(19)', 'owner(20)']]
\AS obtained: [['owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'owner(5)', 'owner(6)', 'owner(7)', 'owner(8)', 'owner(9)', 'owner(10)', 'owner(11)', 'owner(12)', 'owner(13)', 'owner(14)', 'owner(15)', 'owner(16)', 'owner(17)', 'owner(18)', 'owner(19)', 'owner(20)']]


24
filtering

question: 
Produce an ASP program to gather and retrieve values linked to the "lightblue" label in the "cairo" predicate.

answer from file: 
select(X):-cairo(X,"lightblue").

parsed from model: 
select(X):-cairo(X,"lightblue").

facts: 
cairo(1..5, "lightblue").

generated: 
Produce an ASP program to gather and retrieve values linked to the "lightblue" label in the "cairo" predicate.
Answer: select(X):-cairo(X,"lightblue").
select(X):-cairo(X,"city").
select(X):-cairo(X,"author").
select(X):-cairo(X,"description").
select(X):-cairo(X,"author","description").
select(X):-cairo(X,"description","author").
select(X):-cairo(X,"description","city").
select(X):-cairo(X,"city","description").
select(X):-cairo(X,"description","author").
select(X):-cairo(X,"author","description").
select(X):-cairo(X,"description","city").
select(X):-cairo(X,"city","description

unique_rules: 
['select(X):-cairo(X,"lightblue").', 'select(X):-cairo(X,"city").', 'select(X):-cairo(X,"author").', 'select(X):-cairo(X,"description").', 'select(X):-cairo(X,"author","description").', 'select(X):-cairo(X,"description","author").', 'select(X):-cairo(X,"description","city").', 'select(X):-cairo(X,"city","description").', 'select(X):-cairo(X,"city","description']

jaccard: 1.0

AS desired: [['cairo(1,"lightblue")', 'cairo(2,"lightblue")', 'cairo(3,"lightblue")', 'cairo(4,"lightblue")', 'cairo(5,"lightblue")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['cairo(1,"lightblue")', 'cairo(2,"lightblue")', 'cairo(3,"lightblue")', 'cairo(4,"lightblue")', 'cairo(5,"lightblue")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


25
negative_filtering

question: 
Produce an ASP program to gather values associated with the predicate "desk" but not linked to the predicate "chair" and labeled "cloud".

answer from file: 
select(X):-desk(X),not chair(X,"cloud").

parsed from model: 
select(X):-desk(X),not chair(X,"cloud").

facts: 
desk(1..3).chair(1,"laptop").chair(2,"moscow").chair(3,"chair").

generated: 
Produce an ASP program to gather values associated with the predicate "desk" but not linked to the predicate "chair" and labeled "cloud".
Answer: select(X):-desk(X),not chair(X,"cloud").
Explanation: The predicate "desk" includes values associated with the predicate "city","height","author","rome","description","name","city","author","description","height","name","city","description","author","height","description","name","city","author","description","height","name","city","description","author","height","description","name","city","author","description","height","name","city","description","author","height","description","name","city","author","description","height","name","city","description","author","height","description","name","city","author","description","height","name","city","description","author","height

unique_rules: 
['select(X):-desk(X),not chair(X,"cloud").']

jaccard: 1.0

AS desired: [['desk(1)', 'desk(2)', 'desk(3)', 'chair(1,"laptop")', 'chair(2,"moscow")', 'chair(3,"chair")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['desk(1)', 'desk(2)', 'desk(3)', 'chair(1,"laptop")', 'chair(2,"moscow")', 'chair(3,"chair")', 'select(1)', 'select(2)', 'select(3)']]


26
numeric_filtering

question: 
Develop an ASP program to gather all values linked to the predicate "lake" with a value different than 87.

answer from file: 
select(X):-lake(X,C),C!=87.

parsed from model: 
select(X):-lake(X,C),C!=87.

facts: 
lake(1..3, 1..100).

generated: 
Develop an ASP program to gather all values linked to the predicate "lake" with a value different than 87.
Answer: select(X):-lake(X,C),C!=87.
select(X):-lake(X,C),C==87.

unique_rules: 
['select(X):-lake(X,C),C!=87.', 'select(X):-lake(X,C),C==87.']

jaccard: 1.0

AS desired: [['lake(1,1)', 'lake(1,2)', 'lake(1,3)', 'lake(1,4)', 'lake(1,5)', 'lake(1,6)', 'lake(1,7)', 'lake(1,8)', 'lake(1,9)', 'lake(1,10)', 'lake(1,11)', 'lake(1,12)', 'lake(1,13)', 'lake(1,14)', 'lake(1,15)', 'lake(1,16)', 'lake(1,17)', 'lake(1,18)', 'lake(1,19)', 'lake(1,20)', 'lake(1,21)', 'lake(1,22)', 'lake(1,23)', 'lake(1,24)', 'lake(1,25)', 'lake(1,26)', 'lake(1,27)', 'lake(1,28)', 'lake(1,29)', 'lake(1,30)', 'lake(1,31)', 'lake(1,32)', 'lake(1,33)', 'lake(1,34)', 'lake(1,35)', 'lake(1,36)', 'lake(1,37)', 'lake(1,38)', 'lake(1,39)', 'lake(1,40)', 'lake(1,41)', 'lake(1,42)', 'lake(1,43)', 'lake(1,44)', 'lake(1,45)', 'lake(1,46)', 'lake(1,47)', 'lake(1,48)', 'lake(1,49)', 'lake(1,50)', 'lake(1,51)', 'lake(1,52)', 'lake(1,53)', 'lake(1,54)', 'lake(1,55)', 'lake(1,56)', 'lake(1,57)', 'lake(1,58)', 'lake(1,59)', 'lake(1,60)', 'lake(1,61)', 'lake(1,62)', 'lake(1,63)', 'lake(1,64)', 'lake(1,65)', 'lake(1,66)', 'lake(1,67)', 'lake(1,68)', 'lake(1,69)', 'lake(1,70)', 'lake(1,71)', 'lake(1,72)', 'lake(1,73)', 'lake(1,74)', 'lake(1,75)', 'lake(1,76)', 'lake(1,77)', 'lake(1,78)', 'lake(1,79)', 'lake(1,80)', 'lake(1,81)', 'lake(1,82)', 'lake(1,83)', 'lake(1,84)', 'lake(1,85)', 'lake(1,86)', 'lake(1,87)', 'lake(1,88)', 'lake(1,89)', 'lake(1,90)', 'lake(1,91)', 'lake(1,92)', 'lake(1,93)', 'lake(1,94)', 'lake(1,95)', 'lake(1,96)', 'lake(1,97)', 'lake(1,98)', 'lake(1,99)', 'lake(1,100)', 'lake(2,1)', 'lake(2,2)', 'lake(2,3)', 'lake(2,4)', 'lake(2,5)', 'lake(2,6)', 'lake(2,7)', 'lake(2,8)', 'lake(2,9)', 'lake(2,10)', 'lake(2,11)', 'lake(2,12)', 'lake(2,13)', 'lake(2,14)', 'lake(2,15)', 'lake(2,16)', 'lake(2,17)', 'lake(2,18)', 'lake(2,19)', 'lake(2,20)', 'lake(2,21)', 'lake(2,22)', 'lake(2,23)', 'lake(2,24)', 'lake(2,25)', 'lake(2,26)', 'lake(2,27)', 'lake(2,28)', 'lake(2,29)', 'lake(2,30)', 'lake(2,31)', 'lake(2,32)', 'lake(2,33)', 'lake(2,34)', 'lake(2,35)', 'lake(2,36)', 'lake(2,37)', 'lake(2,38)', 'lake(2,39)', 'lake(2,40)', 'lake(2,41)', 'lake(2,42)', 'lake(2,43)', 'lake(2,44)', 'lake(2,45)', 'lake(2,46)', 'lake(2,47)', 'lake(2,48)', 'lake(2,49)', 'lake(2,50)', 'lake(2,51)', 'lake(2,52)', 'lake(2,53)', 'lake(2,54)', 'lake(2,55)', 'lake(2,56)', 'lake(2,57)', 'lake(2,58)', 'lake(2,59)', 'lake(2,60)', 'lake(2,61)', 'lake(2,62)', 'lake(2,63)', 'lake(2,64)', 'lake(2,65)', 'lake(2,66)', 'lake(2,67)', 'lake(2,68)', 'lake(2,69)', 'lake(2,70)', 'lake(2,71)', 'lake(2,72)', 'lake(2,73)', 'lake(2,74)', 'lake(2,75)', 'lake(2,76)', 'lake(2,77)', 'lake(2,78)', 'lake(2,79)', 'lake(2,80)', 'lake(2,81)', 'lake(2,82)', 'lake(2,83)', 'lake(2,84)', 'lake(2,85)', 'lake(2,86)', 'lake(2,87)', 'lake(2,88)', 'lake(2,89)', 'lake(2,90)', 'lake(2,91)', 'lake(2,92)', 'lake(2,93)', 'lake(2,94)', 'lake(2,95)', 'lake(2,96)', 'lake(2,97)', 'lake(2,98)', 'lake(2,99)', 'lake(2,100)', 'lake(3,1)', 'lake(3,2)', 'lake(3,3)', 'lake(3,4)', 'lake(3,5)', 'lake(3,6)', 'lake(3,7)', 'lake(3,8)', 'lake(3,9)', 'lake(3,10)', 'lake(3,11)', 'lake(3,12)', 'lake(3,13)', 'lake(3,14)', 'lake(3,15)', 'lake(3,16)', 'lake(3,17)', 'lake(3,18)', 'lake(3,19)', 'lake(3,20)', 'lake(3,21)', 'lake(3,22)', 'lake(3,23)', 'lake(3,24)', 'lake(3,25)', 'lake(3,26)', 'lake(3,27)', 'lake(3,28)', 'lake(3,29)', 'lake(3,30)', 'lake(3,31)', 'lake(3,32)', 'lake(3,33)', 'lake(3,34)', 'lake(3,35)', 'lake(3,36)', 'lake(3,37)', 'lake(3,38)', 'lake(3,39)', 'lake(3,40)', 'lake(3,41)', 'lake(3,42)', 'lake(3,43)', 'lake(3,44)', 'lake(3,45)', 'lake(3,46)', 'lake(3,47)', 'lake(3,48)', 'lake(3,49)', 'lake(3,50)', 'lake(3,51)', 'lake(3,52)', 'lake(3,53)', 'lake(3,54)', 'lake(3,55)', 'lake(3,56)', 'lake(3,57)', 'lake(3,58)', 'lake(3,59)', 'lake(3,60)', 'lake(3,61)', 'lake(3,62)', 'lake(3,63)', 'lake(3,64)', 'lake(3,65)', 'lake(3,66)', 'lake(3,67)', 'lake(3,68)', 'lake(3,69)', 'lake(3,70)', 'lake(3,71)', 'lake(3,72)', 'lake(3,73)', 'lake(3,74)', 'lake(3,75)', 'lake(3,76)', 'lake(3,77)', 'lake(3,78)', 'lake(3,79)', 'lake(3,80)', 'lake(3,81)', 'lake(3,82)', 'lake(3,83)', 'lake(3,84)', 'lake(3,85)', 'lake(3,86)', 'lake(3,87)', 'lake(3,88)', 'lake(3,89)', 'lake(3,90)', 'lake(3,91)', 'lake(3,92)', 'lake(3,93)', 'lake(3,94)', 'lake(3,95)', 'lake(3,96)', 'lake(3,97)', 'lake(3,98)', 'lake(3,99)', 'lake(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['lake(1,1)', 'lake(1,2)', 'lake(1,3)', 'lake(1,4)', 'lake(1,5)', 'lake(1,6)', 'lake(1,7)', 'lake(1,8)', 'lake(1,9)', 'lake(1,10)', 'lake(1,11)', 'lake(1,12)', 'lake(1,13)', 'lake(1,14)', 'lake(1,15)', 'lake(1,16)', 'lake(1,17)', 'lake(1,18)', 'lake(1,19)', 'lake(1,20)', 'lake(1,21)', 'lake(1,22)', 'lake(1,23)', 'lake(1,24)', 'lake(1,25)', 'lake(1,26)', 'lake(1,27)', 'lake(1,28)', 'lake(1,29)', 'lake(1,30)', 'lake(1,31)', 'lake(1,32)', 'lake(1,33)', 'lake(1,34)', 'lake(1,35)', 'lake(1,36)', 'lake(1,37)', 'lake(1,38)', 'lake(1,39)', 'lake(1,40)', 'lake(1,41)', 'lake(1,42)', 'lake(1,43)', 'lake(1,44)', 'lake(1,45)', 'lake(1,46)', 'lake(1,47)', 'lake(1,48)', 'lake(1,49)', 'lake(1,50)', 'lake(1,51)', 'lake(1,52)', 'lake(1,53)', 'lake(1,54)', 'lake(1,55)', 'lake(1,56)', 'lake(1,57)', 'lake(1,58)', 'lake(1,59)', 'lake(1,60)', 'lake(1,61)', 'lake(1,62)', 'lake(1,63)', 'lake(1,64)', 'lake(1,65)', 'lake(1,66)', 'lake(1,67)', 'lake(1,68)', 'lake(1,69)', 'lake(1,70)', 'lake(1,71)', 'lake(1,72)', 'lake(1,73)', 'lake(1,74)', 'lake(1,75)', 'lake(1,76)', 'lake(1,77)', 'lake(1,78)', 'lake(1,79)', 'lake(1,80)', 'lake(1,81)', 'lake(1,82)', 'lake(1,83)', 'lake(1,84)', 'lake(1,85)', 'lake(1,86)', 'lake(1,87)', 'lake(1,88)', 'lake(1,89)', 'lake(1,90)', 'lake(1,91)', 'lake(1,92)', 'lake(1,93)', 'lake(1,94)', 'lake(1,95)', 'lake(1,96)', 'lake(1,97)', 'lake(1,98)', 'lake(1,99)', 'lake(1,100)', 'lake(2,1)', 'lake(2,2)', 'lake(2,3)', 'lake(2,4)', 'lake(2,5)', 'lake(2,6)', 'lake(2,7)', 'lake(2,8)', 'lake(2,9)', 'lake(2,10)', 'lake(2,11)', 'lake(2,12)', 'lake(2,13)', 'lake(2,14)', 'lake(2,15)', 'lake(2,16)', 'lake(2,17)', 'lake(2,18)', 'lake(2,19)', 'lake(2,20)', 'lake(2,21)', 'lake(2,22)', 'lake(2,23)', 'lake(2,24)', 'lake(2,25)', 'lake(2,26)', 'lake(2,27)', 'lake(2,28)', 'lake(2,29)', 'lake(2,30)', 'lake(2,31)', 'lake(2,32)', 'lake(2,33)', 'lake(2,34)', 'lake(2,35)', 'lake(2,36)', 'lake(2,37)', 'lake(2,38)', 'lake(2,39)', 'lake(2,40)', 'lake(2,41)', 'lake(2,42)', 'lake(2,43)', 'lake(2,44)', 'lake(2,45)', 'lake(2,46)', 'lake(2,47)', 'lake(2,48)', 'lake(2,49)', 'lake(2,50)', 'lake(2,51)', 'lake(2,52)', 'lake(2,53)', 'lake(2,54)', 'lake(2,55)', 'lake(2,56)', 'lake(2,57)', 'lake(2,58)', 'lake(2,59)', 'lake(2,60)', 'lake(2,61)', 'lake(2,62)', 'lake(2,63)', 'lake(2,64)', 'lake(2,65)', 'lake(2,66)', 'lake(2,67)', 'lake(2,68)', 'lake(2,69)', 'lake(2,70)', 'lake(2,71)', 'lake(2,72)', 'lake(2,73)', 'lake(2,74)', 'lake(2,75)', 'lake(2,76)', 'lake(2,77)', 'lake(2,78)', 'lake(2,79)', 'lake(2,80)', 'lake(2,81)', 'lake(2,82)', 'lake(2,83)', 'lake(2,84)', 'lake(2,85)', 'lake(2,86)', 'lake(2,87)', 'lake(2,88)', 'lake(2,89)', 'lake(2,90)', 'lake(2,91)', 'lake(2,92)', 'lake(2,93)', 'lake(2,94)', 'lake(2,95)', 'lake(2,96)', 'lake(2,97)', 'lake(2,98)', 'lake(2,99)', 'lake(2,100)', 'lake(3,1)', 'lake(3,2)', 'lake(3,3)', 'lake(3,4)', 'lake(3,5)', 'lake(3,6)', 'lake(3,7)', 'lake(3,8)', 'lake(3,9)', 'lake(3,10)', 'lake(3,11)', 'lake(3,12)', 'lake(3,13)', 'lake(3,14)', 'lake(3,15)', 'lake(3,16)', 'lake(3,17)', 'lake(3,18)', 'lake(3,19)', 'lake(3,20)', 'lake(3,21)', 'lake(3,22)', 'lake(3,23)', 'lake(3,24)', 'lake(3,25)', 'lake(3,26)', 'lake(3,27)', 'lake(3,28)', 'lake(3,29)', 'lake(3,30)', 'lake(3,31)', 'lake(3,32)', 'lake(3,33)', 'lake(3,34)', 'lake(3,35)', 'lake(3,36)', 'lake(3,37)', 'lake(3,38)', 'lake(3,39)', 'lake(3,40)', 'lake(3,41)', 'lake(3,42)', 'lake(3,43)', 'lake(3,44)', 'lake(3,45)', 'lake(3,46)', 'lake(3,47)', 'lake(3,48)', 'lake(3,49)', 'lake(3,50)', 'lake(3,51)', 'lake(3,52)', 'lake(3,53)', 'lake(3,54)', 'lake(3,55)', 'lake(3,56)', 'lake(3,57)', 'lake(3,58)', 'lake(3,59)', 'lake(3,60)', 'lake(3,61)', 'lake(3,62)', 'lake(3,63)', 'lake(3,64)', 'lake(3,65)', 'lake(3,66)', 'lake(3,67)', 'lake(3,68)', 'lake(3,69)', 'lake(3,70)', 'lake(3,71)', 'lake(3,72)', 'lake(3,73)', 'lake(3,74)', 'lake(3,75)', 'lake(3,76)', 'lake(3,77)', 'lake(3,78)', 'lake(3,79)', 'lake(3,80)', 'lake(3,81)', 'lake(3,82)', 'lake(3,83)', 'lake(3,84)', 'lake(3,85)', 'lake(3,86)', 'lake(3,87)', 'lake(3,88)', 'lake(3,89)', 'lake(3,90)', 'lake(3,91)', 'lake(3,92)', 'lake(3,93)', 'lake(3,94)', 'lake(3,95)', 'lake(3,96)', 'lake(3,97)', 'lake(3,98)', 'lake(3,99)', 'lake(3,100)', 'select(1)', 'select(2)', 'select(3)']]


27
assignment

question: 
Write an ASP solution to connect each element defined by the predicate "chair" with a single label from "darkmagenta","cairo","laptop","wall","toronto","desk","weight","singapore".

answer from file: 
assign(X,"darkmagenta")|assign(X,"cairo")|assign(X,"laptop")|assign(X,"wall")|assign(X,"toronto")|assign(X,"desk")|assign(X,"weight")|assign(X,"singapore"):-chair(X).

parsed from model: 
assign(X,"darkmagenta")|assign(X,"cairo")|assign(X,"laptop")|assign(X,"wall")|assign(X,"toronto")|assign(X,"desk")|assign(X,"weight")|assign(X,"singapore"):-chair(X).

facts: 
chair(1..5).

generated: 
Write an ASP solution to connect each element defined by the predicate "chair" with a single label from "darkmagenta","cairo","laptop","wall","toronto","desk","weight","singapore".
Answer: assign(X,"darkmagenta")|assign(X,"cairo")|assign(X,"laptop")|assign(X,"wall")|assign(X,"toronto")|assign(X,"desk")|assign(X,"weight")|assign(X,"singapore"):-chair(X).
chair(X)<-darkmagenta(X)|cairo(X)|laptop(X)|wall(X)|toronto(X)|desk(X)|weight(X)|singapore(X).

unique_rules: 
['assign(X,"darkmagenta")|assign(X,"cairo")|assign(X,"laptop")|assign(X,"wall")|assign(X,"toronto")|assign(X,"desk")|assign(X,"weight")|assign(X,"singapore"):-chair(X).']

jaccard: 1.0

AS desired: [['chair(1)', 'chair(2)', 'chair(3)', 'chair(4)', 'chair(5)', 'assign(1,"singapore")', 'assign(2,"singapore")', 'assign(3,"weight")', 'assign(4,"singapore")', 'assign(5,"singapore")']]
\AS obtained: [['chair(1)', 'chair(2)', 'chair(3)', 'chair(4)', 'chair(5)', 'assign(1,"singapore")', 'assign(2,"singapore")', 'assign(3,"weight")', 'assign(4,"singapore")', 'assign(5,"singapore")']]


28
constraint

question: 
Create an ASP script that excludes the predicate "toronto" with value 14 from being mapped to the label "surname".

answer from file: 
:-assign(14,surname).

parsed from model: 
:-assign(14,surname).

facts: 
toronto(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-toronto(X).

generated: 
Create an ASP script that excludes the predicate "toronto" with value 14 from being mapped to the label "surname".
Answer: :-assign(14,surname).
Explanation: The predicate "tokyo" includes the label "description","author","city","florence","description","height","name","object","price","rome","description","city","author","height","name","object","price","rome","description","city","author","height","name","object","price","rome","description","city","author","height","name","object","price","rome","description","city","author","height","name","object","price","rome","description","city","author","height","name","object","price","rome","description","city","author","height","name","object","price","rome","description","city","author","height","name","

unique_rules: 
[':-assign(14,surname).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'toronto(1)', 'toronto(2)', 'toronto(3)', 'toronto(4)', 'toronto(5)', 'toronto(6)', 'toronto(7)', 'toronto(8)', 'toronto(9)', 'toronto(10)', 'toronto(11)', 'toronto(12)', 'toronto(13)', 'toronto(14)', 'toronto(15)', 'toronto(16)', 'toronto(17)', 'toronto(18)', 'toronto(19)', 'toronto(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'toronto(1)', 'toronto(2)', 'toronto(3)', 'toronto(4)', 'toronto(5)', 'toronto(6)', 'toronto(7)', 'toronto(8)', 'toronto(9)', 'toronto(10)', 'toronto(11)', 'toronto(12)', 'toronto(13)', 'toronto(14)', 'toronto(15)', 'toronto(16)', 'toronto(17)', 'toronto(18)', 'toronto(19)', 'toronto(20)']]


29
combination

question: 
Generate an ASP script to enumerate all possible pairings of elements from the sets "pink" and "storm".

answer from file: 
combination(X,Y):-pink(X),storm(Y).

parsed from model: 
combination(X,Y):-pink(X),storm(Y).

facts: 
pink(1..4).storm(1..5).

generated: 
Generate an ASP script to enumerate all possible pairings of elements from the sets "pink" and "storm".
Answer: combination(X,Y):-pink(X),storm(Y).
combination(X,Y):-pink(X),not storm(Y).
combination(X,Y):-not pink(X),storm(Y).
combination(X,Y):-not pink(X),not storm(Y).

unique_rules: 
['combination(X,Y):-pink(X),storm(Y).', 'combination(X,Y):-pink(X),not storm(Y).', 'combination(X,Y):-not pink(X),storm(Y).', 'combination(X,Y):-not pink(X),not storm(Y).']

jaccard: 1.0

AS desired: [['storm(1)', 'storm(2)', 'storm(3)', 'storm(4)', 'storm(5)', 'pink(1)', 'pink(2)', 'pink(3)', 'pink(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['storm(1)', 'storm(2)', 'storm(3)', 'storm(4)', 'storm(5)', 'pink(1)', 'pink(2)', 'pink(3)', 'pink(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


30
join

question: 
Write an ASP program for the following problem. Consider predicate "butterfly" having fields "ID","darkmagentaID","lake","owner","quality", and the predicate "darkmagenta" having fields "ID","weight". Define a predicate "butterfly_darkmagenta" that associates to each "butterfly" the "weight" of "darkmagenta".

answer from file: 
butterfly_darkmagenta(X,Z):-butterfly(X,Y,_,_,_),darkmagenta(Y,Z).

parsed from model: 
butterfly_darkmagenta(X,Z):- arrivant(X,Y,_,_,_), arrivant(Y,Z).

facts: 
butterfly("ID","darkmagentaID","lake","owner","quality").darkmagenta("ID","weight").

generated: 
Write an ASP program for the following problem. Consider predicate "butterfly" having fields "ID","darkmagentaID","lake","owner","quality", and the predicate "darkmagenta" having fields "ID","weight". Define a predicate "butterfly_darkmagenta" that associates to each "butterfly" the "weight" of "darkmagenta".
Answer: butterfly_darkmagenta(X,Z):- arrivant(X,Y,_,_,_), arrivant(Y,Z).
butterfly_darkmagenta(X,Z):- arrivant(X,Y,_,_), not arrivant(Y,Z).
 ángulo(X,Y):- arrivant(X,Y,_,_,_), not arrivant(Y,Y).
 ángulo(X,Y):- arrivant(X,Y,_,_,_), Z="height".
 ángulo(X,Y):- arrivant(X,Y,_,_,_), Z="height","height".
 ángulo(X,Y):- arrivant(X,Y,_,_,_), Z="height","height","height".

unique_rules: 
['butterfly_darkmagenta(X,Z):- arrivant(X,Y,_,_,_), arrivant(Y,Z).', 'butterfly_darkmagenta(X,Z):- arrivant(X,Y,_,_), not arrivant(Y,Z).', 'ángulo(X,Y):- arrivant(X,Y,_,_,_), not arrivant(Y,Y).', 'ángulo(X,Y):- arrivant(X,Y,_,_,_), Z="height".', 'ángulo(X,Y):- arrivant(X,Y,_,_,_), Z="height","height".', 'ángulo(X,Y):- arrivant(X,Y,_,_,_), Z="height","height","height".']

jaccard: 1.0

AS desired: [['darkmagenta("ID","weight")', 'butterfly("ID","darkmagentaID","lake","owner","quality")']]
\AS obtained: [['butterfly("ID","darkmagentaID","lake","owner","quality")', 'darkmagenta("ID","weight")']]


31
closure

question: 
Generate an ASP program to construct the "journey" predicate based on the transitive closure of the "mumbai" predicate.

answer from file: 
journey(X,Y):-mumbai(X,Y).
journey(X,Y):-mumbai(X,Z),journey(Z,Y).

parsed from model: 
journey(X,Y):-mumbai(X,Y).
journey(X,Y):-mumbai(X,Z),journey(Z,Y).

facts: 
mumbai(1..3, 1..4).

generated: 
Generate an ASP program to construct the "journey" predicate based on the transitive closure of the "mumbai" predicate.
Answer: journey(X,Y):-mumbai(X,Y).
journey(X,Y):-mumbai(X,Z),journey(Z,Y).
journey(X,Y):-not mumbai(X,Y).
mumbai(X,Y):-city(X,Y).
city(X,Y):-street(X,Y).
street(X,Y):-bike(X,Y).
bike(X,Y):-moto(X,Y).
moto(X,Y):-city(X,Y).

unique_rules: 
['journey(X,Y):-mumbai(X,Y).', 'journey(X,Y):-mumbai(X,Z),journey(Z,Y).', 'journey(X,Y):-not mumbai(X,Y).', 'mumbai(X,Y):-city(X,Y).', 'city(X,Y):-street(X,Y).', 'street(X,Y):-bike(X,Y).', 'bike(X,Y):-moto(X,Y).', 'moto(X,Y):-city(X,Y).']

jaccard: 1.0

AS desired: [['mumbai(1,1)', 'mumbai(1,2)', 'mumbai(1,3)', 'mumbai(1,4)', 'mumbai(2,1)', 'mumbai(2,2)', 'mumbai(2,3)', 'mumbai(2,4)', 'mumbai(3,1)', 'mumbai(3,2)', 'mumbai(3,3)', 'mumbai(3,4)', 'journey(1,1)', 'journey(1,2)', 'journey(1,3)', 'journey(1,4)', 'journey(2,1)', 'journey(2,2)', 'journey(2,3)', 'journey(2,4)', 'journey(3,1)', 'journey(3,2)', 'journey(3,3)', 'journey(3,4)']]
\AS obtained: [['mumbai(1,1)', 'mumbai(1,2)', 'mumbai(1,3)', 'mumbai(1,4)', 'mumbai(2,1)', 'mumbai(2,2)', 'mumbai(2,3)', 'mumbai(2,4)', 'mumbai(3,1)', 'mumbai(3,2)', 'mumbai(3,3)', 'mumbai(3,4)', 'journey(1,1)', 'journey(1,2)', 'journey(1,3)', 'journey(1,4)', 'journey(2,1)', 'journey(2,2)', 'journey(2,3)', 'journey(2,4)', 'journey(3,1)', 'journey(3,2)', 'journey(3,3)', 'journey(3,4)']]


32
preference

question: 
Generate an ASP program to disallow the association of the predicate "surname" with value "5" with "quality". If associated, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(5,"quality").[1@1]

parsed from model: 
:~assign(5,"quality").[1@1]

facts: 
surname(1..20).

generated: 
Generate an ASP program to disallow the association of the predicate "surname" with value "5" with "quality". If associated, it incurs a cost of "1" at level "1".
Answer: :~assign(5,"quality").[1@1]
This program uses the predicate "description" with fields "ID","city","author","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","

unique_rules: 
[':~assign(5,"quality").[1@1]']

jaccard: 1.0

AS desired: [['surname(1)', 'surname(2)', 'surname(3)', 'surname(4)', 'surname(5)', 'surname(6)', 'surname(7)', 'surname(8)', 'surname(9)', 'surname(10)', 'surname(11)', 'surname(12)', 'surname(13)', 'surname(14)', 'surname(15)', 'surname(16)', 'surname(17)', 'surname(18)', 'surname(19)', 'surname(20)']]
\AS obtained: [['surname(1)', 'surname(2)', 'surname(3)', 'surname(4)', 'surname(5)', 'surname(6)', 'surname(7)', 'surname(8)', 'surname(9)', 'surname(10)', 'surname(11)', 'surname(12)', 'surname(13)', 'surname(14)', 'surname(15)', 'surname(16)', 'surname(17)', 'surname(18)', 'surname(19)', 'surname(20)']]


33
filtering

question: 
Craft an ASP code snippet to capture all relevant values for the "darkmagenta" label within the "lightblue" predicate.

answer from file: 
select(X):-lightblue(X,"darkmagenta").

parsed from model: 
select(X):-lightblue(X,"darkmagenta").

facts: 
lightblue(1..5, "darkmagenta").

generated: 
Craft an ASP code snippet to capture all relevant values for the "darkmagenta" label within the "lightblue" predicate.
Answer: select(X):-lightblue(X,"darkmagenta").
select(X):-lightblue(X,"gray").
select(X):-lightblue(X,"object").
lightblue(X,"darkmagenta").
lightblue(X,"gray").
lightblue(X,"object").

unique_rules: 
['select(X):-lightblue(X,"darkmagenta").', 'select(X):-lightblue(X,"gray").', 'select(X):-lightblue(X,"object").']

jaccard: 1.0

AS desired: [['lightblue(1,"darkmagenta")', 'lightblue(2,"darkmagenta")', 'lightblue(3,"darkmagenta")', 'lightblue(4,"darkmagenta")', 'lightblue(5,"darkmagenta")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['lightblue(1,"darkmagenta")', 'lightblue(2,"darkmagenta")', 'lightblue(3,"darkmagenta")', 'lightblue(4,"darkmagenta")', 'lightblue(5,"darkmagenta")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


34
negative_filtering

question: 
Create an ASP application to fetch values associated with the predicate "wall" but not linked to the predicate "lightblue" and labeled "hair".

answer from file: 
select(X):-wall(X),not lightblue(X,"hair").

parsed from model: 
select(X):-wall(X),not lightblue(X,"hair").

facts: 
wall(1..3).lightblue(1,"hair").lightblue(2,"laptop").lightblue(3,"cosenza").

generated: 
Create an ASP application to fetch values associated with the predicate "wall" but not linked to the predicate "lightblue" and labeled "hair".
Answer: select(X):-wall(X),not lightblue(X,"hair").
Explanation: The predicate "wall" includes values associated with the predicate "city","height","author","rome","description","name","city","author","description","height","name","city","description","name","height","author","description","city","author","description","height","name","city","description","name","height","author","description","city","author","description","height","name","city","description","name","height","author","description","city","author","description","height","name","city","description","name","height","author","description","city","author","description","height","name","city","description","name","

unique_rules: 
['select(X):-wall(X),not lightblue(X,"hair").']

jaccard: 1.0

AS desired: [['wall(1)', 'wall(2)', 'wall(3)', 'lightblue(1,"hair")', 'lightblue(2,"laptop")', 'lightblue(3,"cosenza")', 'select(2)', 'select(3)']]
\AS obtained: [['wall(1)', 'wall(2)', 'wall(3)', 'lightblue(1,"hair")', 'lightblue(2,"laptop")', 'lightblue(3,"cosenza")', 'select(2)', 'select(3)']]


35
numeric_filtering

question: 
Create an ASP application to select values connected to the predicate "owner" with a value different than 23.

answer from file: 
select(X):-owner(X,C),C!=23.

parsed from model: 
select(X):-owner(X,C),C!=23.

facts: 
owner(1..3, 1..100).

generated: 
Create an ASP application to select values connected to the predicate "owner" with a value different than 23.
Answer: select(X):-owner(X,C),C!=23.
select(X):-owner(X,C),C==23.
The predicate "owner" includes fields "ID","height","author","city","description","name","price","author","city","description","name","height","author","city","description","price","author","city","description","name","height","author","city","description","price","author","city","description","name","height","author","city","description","price","author","city","description","name","height","author","city","description","price","author","city","description","name","height","author","city","description","price","author","city

unique_rules: 
['select(X):-owner(X,C),C!=23.', 'select(X):-owner(X,C),C==23.']

jaccard: 1.0

AS desired: [['owner(1,1)', 'owner(1,2)', 'owner(1,3)', 'owner(1,4)', 'owner(1,5)', 'owner(1,6)', 'owner(1,7)', 'owner(1,8)', 'owner(1,9)', 'owner(1,10)', 'owner(1,11)', 'owner(1,12)', 'owner(1,13)', 'owner(1,14)', 'owner(1,15)', 'owner(1,16)', 'owner(1,17)', 'owner(1,18)', 'owner(1,19)', 'owner(1,20)', 'owner(1,21)', 'owner(1,22)', 'owner(1,23)', 'owner(1,24)', 'owner(1,25)', 'owner(1,26)', 'owner(1,27)', 'owner(1,28)', 'owner(1,29)', 'owner(1,30)', 'owner(1,31)', 'owner(1,32)', 'owner(1,33)', 'owner(1,34)', 'owner(1,35)', 'owner(1,36)', 'owner(1,37)', 'owner(1,38)', 'owner(1,39)', 'owner(1,40)', 'owner(1,41)', 'owner(1,42)', 'owner(1,43)', 'owner(1,44)', 'owner(1,45)', 'owner(1,46)', 'owner(1,47)', 'owner(1,48)', 'owner(1,49)', 'owner(1,50)', 'owner(1,51)', 'owner(1,52)', 'owner(1,53)', 'owner(1,54)', 'owner(1,55)', 'owner(1,56)', 'owner(1,57)', 'owner(1,58)', 'owner(1,59)', 'owner(1,60)', 'owner(1,61)', 'owner(1,62)', 'owner(1,63)', 'owner(1,64)', 'owner(1,65)', 'owner(1,66)', 'owner(1,67)', 'owner(1,68)', 'owner(1,69)', 'owner(1,70)', 'owner(1,71)', 'owner(1,72)', 'owner(1,73)', 'owner(1,74)', 'owner(1,75)', 'owner(1,76)', 'owner(1,77)', 'owner(1,78)', 'owner(1,79)', 'owner(1,80)', 'owner(1,81)', 'owner(1,82)', 'owner(1,83)', 'owner(1,84)', 'owner(1,85)', 'owner(1,86)', 'owner(1,87)', 'owner(1,88)', 'owner(1,89)', 'owner(1,90)', 'owner(1,91)', 'owner(1,92)', 'owner(1,93)', 'owner(1,94)', 'owner(1,95)', 'owner(1,96)', 'owner(1,97)', 'owner(1,98)', 'owner(1,99)', 'owner(1,100)', 'owner(2,1)', 'owner(2,2)', 'owner(2,3)', 'owner(2,4)', 'owner(2,5)', 'owner(2,6)', 'owner(2,7)', 'owner(2,8)', 'owner(2,9)', 'owner(2,10)', 'owner(2,11)', 'owner(2,12)', 'owner(2,13)', 'owner(2,14)', 'owner(2,15)', 'owner(2,16)', 'owner(2,17)', 'owner(2,18)', 'owner(2,19)', 'owner(2,20)', 'owner(2,21)', 'owner(2,22)', 'owner(2,23)', 'owner(2,24)', 'owner(2,25)', 'owner(2,26)', 'owner(2,27)', 'owner(2,28)', 'owner(2,29)', 'owner(2,30)', 'owner(2,31)', 'owner(2,32)', 'owner(2,33)', 'owner(2,34)', 'owner(2,35)', 'owner(2,36)', 'owner(2,37)', 'owner(2,38)', 'owner(2,39)', 'owner(2,40)', 'owner(2,41)', 'owner(2,42)', 'owner(2,43)', 'owner(2,44)', 'owner(2,45)', 'owner(2,46)', 'owner(2,47)', 'owner(2,48)', 'owner(2,49)', 'owner(2,50)', 'owner(2,51)', 'owner(2,52)', 'owner(2,53)', 'owner(2,54)', 'owner(2,55)', 'owner(2,56)', 'owner(2,57)', 'owner(2,58)', 'owner(2,59)', 'owner(2,60)', 'owner(2,61)', 'owner(2,62)', 'owner(2,63)', 'owner(2,64)', 'owner(2,65)', 'owner(2,66)', 'owner(2,67)', 'owner(2,68)', 'owner(2,69)', 'owner(2,70)', 'owner(2,71)', 'owner(2,72)', 'owner(2,73)', 'owner(2,74)', 'owner(2,75)', 'owner(2,76)', 'owner(2,77)', 'owner(2,78)', 'owner(2,79)', 'owner(2,80)', 'owner(2,81)', 'owner(2,82)', 'owner(2,83)', 'owner(2,84)', 'owner(2,85)', 'owner(2,86)', 'owner(2,87)', 'owner(2,88)', 'owner(2,89)', 'owner(2,90)', 'owner(2,91)', 'owner(2,92)', 'owner(2,93)', 'owner(2,94)', 'owner(2,95)', 'owner(2,96)', 'owner(2,97)', 'owner(2,98)', 'owner(2,99)', 'owner(2,100)', 'owner(3,1)', 'owner(3,2)', 'owner(3,3)', 'owner(3,4)', 'owner(3,5)', 'owner(3,6)', 'owner(3,7)', 'owner(3,8)', 'owner(3,9)', 'owner(3,10)', 'owner(3,11)', 'owner(3,12)', 'owner(3,13)', 'owner(3,14)', 'owner(3,15)', 'owner(3,16)', 'owner(3,17)', 'owner(3,18)', 'owner(3,19)', 'owner(3,20)', 'owner(3,21)', 'owner(3,22)', 'owner(3,23)', 'owner(3,24)', 'owner(3,25)', 'owner(3,26)', 'owner(3,27)', 'owner(3,28)', 'owner(3,29)', 'owner(3,30)', 'owner(3,31)', 'owner(3,32)', 'owner(3,33)', 'owner(3,34)', 'owner(3,35)', 'owner(3,36)', 'owner(3,37)', 'owner(3,38)', 'owner(3,39)', 'owner(3,40)', 'owner(3,41)', 'owner(3,42)', 'owner(3,43)', 'owner(3,44)', 'owner(3,45)', 'owner(3,46)', 'owner(3,47)', 'owner(3,48)', 'owner(3,49)', 'owner(3,50)', 'owner(3,51)', 'owner(3,52)', 'owner(3,53)', 'owner(3,54)', 'owner(3,55)', 'owner(3,56)', 'owner(3,57)', 'owner(3,58)', 'owner(3,59)', 'owner(3,60)', 'owner(3,61)', 'owner(3,62)', 'owner(3,63)', 'owner(3,64)', 'owner(3,65)', 'owner(3,66)', 'owner(3,67)', 'owner(3,68)', 'owner(3,69)', 'owner(3,70)', 'owner(3,71)', 'owner(3,72)', 'owner(3,73)', 'owner(3,74)', 'owner(3,75)', 'owner(3,76)', 'owner(3,77)', 'owner(3,78)', 'owner(3,79)', 'owner(3,80)', 'owner(3,81)', 'owner(3,82)', 'owner(3,83)', 'owner(3,84)', 'owner(3,85)', 'owner(3,86)', 'owner(3,87)', 'owner(3,88)', 'owner(3,89)', 'owner(3,90)', 'owner(3,91)', 'owner(3,92)', 'owner(3,93)', 'owner(3,94)', 'owner(3,95)', 'owner(3,96)', 'owner(3,97)', 'owner(3,98)', 'owner(3,99)', 'owner(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['owner(1,1)', 'owner(1,2)', 'owner(1,3)', 'owner(1,4)', 'owner(1,5)', 'owner(1,6)', 'owner(1,7)', 'owner(1,8)', 'owner(1,9)', 'owner(1,10)', 'owner(1,11)', 'owner(1,12)', 'owner(1,13)', 'owner(1,14)', 'owner(1,15)', 'owner(1,16)', 'owner(1,17)', 'owner(1,18)', 'owner(1,19)', 'owner(1,20)', 'owner(1,21)', 'owner(1,22)', 'owner(1,23)', 'owner(1,24)', 'owner(1,25)', 'owner(1,26)', 'owner(1,27)', 'owner(1,28)', 'owner(1,29)', 'owner(1,30)', 'owner(1,31)', 'owner(1,32)', 'owner(1,33)', 'owner(1,34)', 'owner(1,35)', 'owner(1,36)', 'owner(1,37)', 'owner(1,38)', 'owner(1,39)', 'owner(1,40)', 'owner(1,41)', 'owner(1,42)', 'owner(1,43)', 'owner(1,44)', 'owner(1,45)', 'owner(1,46)', 'owner(1,47)', 'owner(1,48)', 'owner(1,49)', 'owner(1,50)', 'owner(1,51)', 'owner(1,52)', 'owner(1,53)', 'owner(1,54)', 'owner(1,55)', 'owner(1,56)', 'owner(1,57)', 'owner(1,58)', 'owner(1,59)', 'owner(1,60)', 'owner(1,61)', 'owner(1,62)', 'owner(1,63)', 'owner(1,64)', 'owner(1,65)', 'owner(1,66)', 'owner(1,67)', 'owner(1,68)', 'owner(1,69)', 'owner(1,70)', 'owner(1,71)', 'owner(1,72)', 'owner(1,73)', 'owner(1,74)', 'owner(1,75)', 'owner(1,76)', 'owner(1,77)', 'owner(1,78)', 'owner(1,79)', 'owner(1,80)', 'owner(1,81)', 'owner(1,82)', 'owner(1,83)', 'owner(1,84)', 'owner(1,85)', 'owner(1,86)', 'owner(1,87)', 'owner(1,88)', 'owner(1,89)', 'owner(1,90)', 'owner(1,91)', 'owner(1,92)', 'owner(1,93)', 'owner(1,94)', 'owner(1,95)', 'owner(1,96)', 'owner(1,97)', 'owner(1,98)', 'owner(1,99)', 'owner(1,100)', 'owner(2,1)', 'owner(2,2)', 'owner(2,3)', 'owner(2,4)', 'owner(2,5)', 'owner(2,6)', 'owner(2,7)', 'owner(2,8)', 'owner(2,9)', 'owner(2,10)', 'owner(2,11)', 'owner(2,12)', 'owner(2,13)', 'owner(2,14)', 'owner(2,15)', 'owner(2,16)', 'owner(2,17)', 'owner(2,18)', 'owner(2,19)', 'owner(2,20)', 'owner(2,21)', 'owner(2,22)', 'owner(2,23)', 'owner(2,24)', 'owner(2,25)', 'owner(2,26)', 'owner(2,27)', 'owner(2,28)', 'owner(2,29)', 'owner(2,30)', 'owner(2,31)', 'owner(2,32)', 'owner(2,33)', 'owner(2,34)', 'owner(2,35)', 'owner(2,36)', 'owner(2,37)', 'owner(2,38)', 'owner(2,39)', 'owner(2,40)', 'owner(2,41)', 'owner(2,42)', 'owner(2,43)', 'owner(2,44)', 'owner(2,45)', 'owner(2,46)', 'owner(2,47)', 'owner(2,48)', 'owner(2,49)', 'owner(2,50)', 'owner(2,51)', 'owner(2,52)', 'owner(2,53)', 'owner(2,54)', 'owner(2,55)', 'owner(2,56)', 'owner(2,57)', 'owner(2,58)', 'owner(2,59)', 'owner(2,60)', 'owner(2,61)', 'owner(2,62)', 'owner(2,63)', 'owner(2,64)', 'owner(2,65)', 'owner(2,66)', 'owner(2,67)', 'owner(2,68)', 'owner(2,69)', 'owner(2,70)', 'owner(2,71)', 'owner(2,72)', 'owner(2,73)', 'owner(2,74)', 'owner(2,75)', 'owner(2,76)', 'owner(2,77)', 'owner(2,78)', 'owner(2,79)', 'owner(2,80)', 'owner(2,81)', 'owner(2,82)', 'owner(2,83)', 'owner(2,84)', 'owner(2,85)', 'owner(2,86)', 'owner(2,87)', 'owner(2,88)', 'owner(2,89)', 'owner(2,90)', 'owner(2,91)', 'owner(2,92)', 'owner(2,93)', 'owner(2,94)', 'owner(2,95)', 'owner(2,96)', 'owner(2,97)', 'owner(2,98)', 'owner(2,99)', 'owner(2,100)', 'owner(3,1)', 'owner(3,2)', 'owner(3,3)', 'owner(3,4)', 'owner(3,5)', 'owner(3,6)', 'owner(3,7)', 'owner(3,8)', 'owner(3,9)', 'owner(3,10)', 'owner(3,11)', 'owner(3,12)', 'owner(3,13)', 'owner(3,14)', 'owner(3,15)', 'owner(3,16)', 'owner(3,17)', 'owner(3,18)', 'owner(3,19)', 'owner(3,20)', 'owner(3,21)', 'owner(3,22)', 'owner(3,23)', 'owner(3,24)', 'owner(3,25)', 'owner(3,26)', 'owner(3,27)', 'owner(3,28)', 'owner(3,29)', 'owner(3,30)', 'owner(3,31)', 'owner(3,32)', 'owner(3,33)', 'owner(3,34)', 'owner(3,35)', 'owner(3,36)', 'owner(3,37)', 'owner(3,38)', 'owner(3,39)', 'owner(3,40)', 'owner(3,41)', 'owner(3,42)', 'owner(3,43)', 'owner(3,44)', 'owner(3,45)', 'owner(3,46)', 'owner(3,47)', 'owner(3,48)', 'owner(3,49)', 'owner(3,50)', 'owner(3,51)', 'owner(3,52)', 'owner(3,53)', 'owner(3,54)', 'owner(3,55)', 'owner(3,56)', 'owner(3,57)', 'owner(3,58)', 'owner(3,59)', 'owner(3,60)', 'owner(3,61)', 'owner(3,62)', 'owner(3,63)', 'owner(3,64)', 'owner(3,65)', 'owner(3,66)', 'owner(3,67)', 'owner(3,68)', 'owner(3,69)', 'owner(3,70)', 'owner(3,71)', 'owner(3,72)', 'owner(3,73)', 'owner(3,74)', 'owner(3,75)', 'owner(3,76)', 'owner(3,77)', 'owner(3,78)', 'owner(3,79)', 'owner(3,80)', 'owner(3,81)', 'owner(3,82)', 'owner(3,83)', 'owner(3,84)', 'owner(3,85)', 'owner(3,86)', 'owner(3,87)', 'owner(3,88)', 'owner(3,89)', 'owner(3,90)', 'owner(3,91)', 'owner(3,92)', 'owner(3,93)', 'owner(3,94)', 'owner(3,95)', 'owner(3,96)', 'owner(3,97)', 'owner(3,98)', 'owner(3,99)', 'owner(3,100)', 'select(1)', 'select(2)', 'select(3)']]


36
assignment

question: 
Design an ASP script to connect each element, as determined by the predicate "quality", with one label from "barcelona","darkmagenta","quality","delhi","hair","weight","chicago","lake".

answer from file: 
assign(X,"barcelona")|assign(X,"darkmagenta")|assign(X,"quality")|assign(X,"delhi")|assign(X,"hair")|assign(X,"weight")|assign(X,"chicago")|assign(X,"lake"):-quality(X).

parsed from model: 
assign(X,"barcelona")|assign(X,"darkmagenta")|assign(X,"quality")|assign(X,"delhi")|assign(X,"hair")|assign(X,"weight")|assign(X,"chicago")|assign(X,"lake"):-quality(X).

facts: 
quality(1..5).

generated: 
Design an ASP script to connect each element, as determined by the predicate "quality", with one label from "barcelona","darkmagenta","quality","delhi","hair","weight","chicago","lake".
Answer: assign(X,"barcelona")|assign(X,"darkmagenta")|assign(X,"quality")|assign(X,"delhi")|assign(X,"hair")|assign(X,"weight")|assign(X,"chicago")|assign(X,"lake"):-quality(X).
assign(X,"city"):-price(X).
```
The predicate "quality" includes fields "ID","height","city","author","price","name","description","author","city","height","description","name","price","height","description","author","city","height","description","name","price","height","description","author","city","height","description","name","price","height","description","

unique_rules: 
['assign(X,"barcelona")|assign(X,"darkmagenta")|assign(X,"quality")|assign(X,"delhi")|assign(X,"hair")|assign(X,"weight")|assign(X,"chicago")|assign(X,"lake"):-quality(X).', 'assign(X,"city"):-price(X).']

jaccard: 1.0

AS desired: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'assign(1,"lake")', 'assign(2,"lake")', 'assign(3,"chicago")', 'assign(4,"lake")', 'assign(5,"lake")']]
\AS obtained: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'assign(1,"lake")', 'assign(2,"lake")', 'assign(3,"chicago")', 'assign(4,"lake")', 'assign(5,"lake")']]


37
constraint

question: 
Formulate an ASP code that ensures the "lake" predicate having value 9 is not connected to the label "strength".

answer from file: 
:-assign(9,strength).

parsed from model: 
:-assign(9,strength).

facts: 
lake(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-lake(X).

generated: 
Formulate an ASP code that ensures the "lake" predicate having value 9 is not connected to the label "strength".
Answer: :-assign(9,strength).
Explanation: The predicate "lake" having value 9 is not connected to the label "strength".
The predicate "strength" having value 9 is connected to the label "height".
The predicate "height" having value 9 is connected to the label "description".
The predicate "description" having value 9 is not connected to the label "height".

unique_rules: 
[':-assign(9,strength).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lake(6)', 'lake(7)', 'lake(8)', 'lake(9)', 'lake(10)', 'lake(11)', 'lake(12)', 'lake(13)', 'lake(14)', 'lake(15)', 'lake(16)', 'lake(17)', 'lake(18)', 'lake(19)', 'lake(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lake(6)', 'lake(7)', 'lake(8)', 'lake(9)', 'lake(10)', 'lake(11)', 'lake(12)', 'lake(13)', 'lake(14)', 'lake(15)', 'lake(16)', 'lake(17)', 'lake(18)', 'lake(19)', 'lake(20)']]


38
combination

question: 
Compose an ASP script to calculate the Cartesian product of elements represented by the predicates "white" and "butterfly".

answer from file: 
combination(X,Y):-white(X),butterfly(Y).

parsed from model: 
combination(X,Y):-white(X),butterfly(Y).

facts: 
white(1..4).butterfly(1..5).

generated: 
Compose an ASP script to calculate the Cartesian product of elements represented by the predicates "white" and "butterfly".
Answer: combination(X,Y):-white(X),butterfly(Y).
combination(X,Y):-white(X),Y.
combination(X,Y):-Y,white(X).
combination(X,Y):-Y,Y.
combination(X,Y):-X,white(Y).
combination(X,Y):-X,Y.

unique_rules: 
['combination(X,Y):-white(X),butterfly(Y).', 'combination(X,Y):-white(X),Y.', 'combination(X,Y):-Y,white(X).', 'combination(X,Y):-Y,Y.', 'combination(X,Y):-X,white(Y).', 'combination(X,Y):-X,Y.']

jaccard: 1.0

AS desired: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)', 'white(1)', 'white(2)', 'white(3)', 'white(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)', 'white(1)', 'white(2)', 'white(3)', 'white(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


39
join

question: 
Write an ASP application to address the problem where the predicate "singapore" has fields "ID","laptopID","owner","lake","hair", and the predicate "laptop" has fields "ID","weight","strength","quality". Define the predicate "singapore_laptop" that associates each singapore with the weight of laptop.

answer from file: 
singapore_laptop(X,Z):-singapore(X,Y,_,_,_),laptop(Y,Z,_,_).

parsed from model: 
singapore_laptop(X,Z):-singapore(X,Y,_,_,_),laptop(Y,Z,_,_).

facts: 
singapore("ID","laptopID","owner","lake","hair").laptop("ID","weight","strength","quality").

generated: 
Write an ASP application to address the problem where the predicate "singapore" has fields "ID","laptopID","owner","lake","hair", and the predicate "laptop" has fields "ID","weight","strength","quality". Define the predicate "singapore_laptop" that associates each singapore with the weight of laptop.
Answer: singapore_laptop(X,Z):-singapore(X,Y,_,_,_),laptop(Y,Z,_,_).
singapore_laptop(X,Z):-singapore(X,Y,_,_),not laptop(Y,Z,_,_).

unique_rules: 
['singapore_laptop(X,Z):-singapore(X,Y,_,_,_),laptop(Y,Z,_,_).', 'singapore_laptop(X,Z):-singapore(X,Y,_,_),not laptop(Y,Z,_,_).']

jaccard: 1.0

AS desired: [['singapore("ID","laptopID","owner","lake","hair")', 'laptop("ID","weight","strength","quality")']]
\AS obtained: [['singapore("ID","laptopID","owner","lake","hair")', 'laptop("ID","weight","strength","quality")']]


40
closure

question: 
Formulate an ASP solution to establish the transitive closure of the "toronto" predicate, defined as "loops".

answer from file: 
loops(X,Y):-toronto(X,Y).
loops(X,Y):-toronto(X,Z),loops(Z,Y).

parsed from model: 
closure(X,Y):-loops(X,Y).
closure(X,Y):-loops(X,Z),closure(Z,Y).

facts: 
toronto(1..3, 1..4).

generated: 
Formulate an ASP solution to establish the transitive closure of the "toronto" predicate, defined as "loops".
Answer: closure(X,Y):-loops(X,Y).
closure(X,Y):-loops(X,Z),closure(Z,Y).
closure(X,Y):-loops(X,Z),closure(Z,Y).
closure(X,Y):-loops(X,Y).
closure(X,Y):-loops(X,Z),loops(Z,Y).
closure(X,Y):-loops(X,Z),loops(Z,Y).

unique_rules: 
['closure(X,Y):-loops(X,Y).', 'closure(X,Y):-loops(X,Z),closure(Z,Y).', 'closure(X,Y):-loops(X,Z),loops(Z,Y).']

jaccard: 0.0

AS desired: [['toronto(1,1)', 'toronto(1,2)', 'toronto(1,3)', 'toronto(1,4)', 'toronto(2,1)', 'toronto(2,2)', 'toronto(2,3)', 'toronto(2,4)', 'toronto(3,1)', 'toronto(3,2)', 'toronto(3,3)', 'toronto(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]
\AS obtained: [['toronto(1,1)', 'toronto(1,2)', 'toronto(1,3)', 'toronto(1,4)', 'toronto(2,1)', 'toronto(2,2)', 'toronto(2,3)', 'toronto(2,4)', 'toronto(3,1)', 'toronto(3,2)', 'toronto(3,3)', 'toronto(3,4)']]


41
preference

question: 
Generate an ASP program to disallow the association of the predicate "strength" with value "12" with "weight". If associated, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(12,"weight").[1@1]

parsed from model: 
:~assign(12,"weight").[1@1]

facts: 
strength(1..20).

generated: 
Generate an ASP program to disallow the association of the predicate "strength" with value "12" with "weight". If associated, it incurs a cost of "1" at level "1".
Answer: :~assign(12,"weight").[1@1]
This program uses the predicate "height" with fields "ID","city","author","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description

unique_rules: 
[':~assign(12,"weight").[1@1]']

jaccard: 1.0

AS desired: [['strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'strength(6)', 'strength(7)', 'strength(8)', 'strength(9)', 'strength(10)', 'strength(11)', 'strength(12)', 'strength(13)', 'strength(14)', 'strength(15)', 'strength(16)', 'strength(17)', 'strength(18)', 'strength(19)', 'strength(20)']]
\AS obtained: [['strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'strength(6)', 'strength(7)', 'strength(8)', 'strength(9)', 'strength(10)', 'strength(11)', 'strength(12)', 'strength(13)', 'strength(14)', 'strength(15)', 'strength(16)', 'strength(17)', 'strength(18)', 'strength(19)', 'strength(20)']]


42
filtering

question: 
Produce an ASP program to gather and retrieve values linked to the "owner" label in the "owner" predicate.

answer from file: 
select(X):-owner(X,"owner").

parsed from model: 
select(X):-owner(X,"owner").

facts: 
owner(1..5, "owner").

generated: 
Produce an ASP program to gather and retrieve values linked to the "owner" label in the "owner" predicate.
Answer: select(X):-owner(X,"owner").
owner(X,Z):-owner(X,Z).
owner(X,"author").
owner(X,"moto").
owner(X,"rome").
owner(X,"description").
owner(X,"author","description").
owner(X,"description","author").
owner(X,"description","moto").
owner(X,"description","rome").
owner(X,"description","description").

unique_rules: 
['select(X):-owner(X,"owner").', 'owner(X,Z):-owner(X,Z).']

jaccard: 1.0

AS desired: [['owner(1,"owner")', 'owner(2,"owner")', 'owner(3,"owner")', 'owner(4,"owner")', 'owner(5,"owner")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['owner(1,"owner")', 'owner(2,"owner")', 'owner(3,"owner")', 'owner(4,"owner")', 'owner(5,"owner")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


43
negative_filtering

question: 
Draft an ASP solution to identify values associated with the predicate "barcelona" but not tied to the predicate "barcelona" and labeled "chicago".

answer from file: 
select(X):-barcelona(X),not barcelona(X,"chicago").

parsed from model: 
select(X):-barcelona(X),not barcelona(X,"chicago").

facts: 
barcelona(1..3).barcelona(1,"surname").barcelona(2,"chicago").barcelona(3,"flower").

generated: 
Draft an ASP solution to identify values associated with the predicate "barcelona" but not tied to the predicate "barcelona" and labeled "chicago".
Answer: select(X):-barcelona(X),not barcelona(X,"chicago").
Explanation: The predicate "barcelona" includes values associated with the predicate "city","height","author","moto","description","name","city","author","description","height","name","city","description","name","height","author","description","city","author","description","height","name","city","description","name","height","author","description","city","author","description","height","name","city","description","name","height","author","description","city","author","description","height","name","city","description","name","height","author","description","city","author","description","height","name","city","description","name","height

unique_rules: 
['select(X):-barcelona(X),not barcelona(X,"chicago").']

jaccard: 1.0

AS desired: [['barcelona(1)', 'barcelona(2)', 'barcelona(3)', 'barcelona(1,"surname")', 'barcelona(2,"chicago")', 'barcelona(3,"flower")', 'select(1)', 'select(3)']]
\AS obtained: [['barcelona(1)', 'barcelona(2)', 'barcelona(3)', 'barcelona(1,"surname")', 'barcelona(2,"chicago")', 'barcelona(3,"flower")', 'select(1)', 'select(3)']]


44
numeric_filtering

question: 
Craft an ASP code to retrieve values connected to the predicate "desk" with a value different than 12.

answer from file: 
select(X):-desk(X,C),C!=12.

parsed from model: 
select(X):-desk(X,C),C!=12.

facts: 
desk(1..3, 1..100).

generated: 
Craft an ASP code to retrieve values connected to the predicate "desk" with a value different than 12.
Answer: select(X):-desk(X,C),C!=12.
desk(X,C):-desk(X,C),C==12.

unique_rules: 
['select(X):-desk(X,C),C!=12.', 'desk(X,C):-desk(X,C),C==12.']

jaccard: 1.0

AS desired: [['desk(1,1)', 'desk(1,2)', 'desk(1,3)', 'desk(1,4)', 'desk(1,5)', 'desk(1,6)', 'desk(1,7)', 'desk(1,8)', 'desk(1,9)', 'desk(1,10)', 'desk(1,11)', 'desk(1,12)', 'desk(1,13)', 'desk(1,14)', 'desk(1,15)', 'desk(1,16)', 'desk(1,17)', 'desk(1,18)', 'desk(1,19)', 'desk(1,20)', 'desk(1,21)', 'desk(1,22)', 'desk(1,23)', 'desk(1,24)', 'desk(1,25)', 'desk(1,26)', 'desk(1,27)', 'desk(1,28)', 'desk(1,29)', 'desk(1,30)', 'desk(1,31)', 'desk(1,32)', 'desk(1,33)', 'desk(1,34)', 'desk(1,35)', 'desk(1,36)', 'desk(1,37)', 'desk(1,38)', 'desk(1,39)', 'desk(1,40)', 'desk(1,41)', 'desk(1,42)', 'desk(1,43)', 'desk(1,44)', 'desk(1,45)', 'desk(1,46)', 'desk(1,47)', 'desk(1,48)', 'desk(1,49)', 'desk(1,50)', 'desk(1,51)', 'desk(1,52)', 'desk(1,53)', 'desk(1,54)', 'desk(1,55)', 'desk(1,56)', 'desk(1,57)', 'desk(1,58)', 'desk(1,59)', 'desk(1,60)', 'desk(1,61)', 'desk(1,62)', 'desk(1,63)', 'desk(1,64)', 'desk(1,65)', 'desk(1,66)', 'desk(1,67)', 'desk(1,68)', 'desk(1,69)', 'desk(1,70)', 'desk(1,71)', 'desk(1,72)', 'desk(1,73)', 'desk(1,74)', 'desk(1,75)', 'desk(1,76)', 'desk(1,77)', 'desk(1,78)', 'desk(1,79)', 'desk(1,80)', 'desk(1,81)', 'desk(1,82)', 'desk(1,83)', 'desk(1,84)', 'desk(1,85)', 'desk(1,86)', 'desk(1,87)', 'desk(1,88)', 'desk(1,89)', 'desk(1,90)', 'desk(1,91)', 'desk(1,92)', 'desk(1,93)', 'desk(1,94)', 'desk(1,95)', 'desk(1,96)', 'desk(1,97)', 'desk(1,98)', 'desk(1,99)', 'desk(1,100)', 'desk(2,1)', 'desk(2,2)', 'desk(2,3)', 'desk(2,4)', 'desk(2,5)', 'desk(2,6)', 'desk(2,7)', 'desk(2,8)', 'desk(2,9)', 'desk(2,10)', 'desk(2,11)', 'desk(2,12)', 'desk(2,13)', 'desk(2,14)', 'desk(2,15)', 'desk(2,16)', 'desk(2,17)', 'desk(2,18)', 'desk(2,19)', 'desk(2,20)', 'desk(2,21)', 'desk(2,22)', 'desk(2,23)', 'desk(2,24)', 'desk(2,25)', 'desk(2,26)', 'desk(2,27)', 'desk(2,28)', 'desk(2,29)', 'desk(2,30)', 'desk(2,31)', 'desk(2,32)', 'desk(2,33)', 'desk(2,34)', 'desk(2,35)', 'desk(2,36)', 'desk(2,37)', 'desk(2,38)', 'desk(2,39)', 'desk(2,40)', 'desk(2,41)', 'desk(2,42)', 'desk(2,43)', 'desk(2,44)', 'desk(2,45)', 'desk(2,46)', 'desk(2,47)', 'desk(2,48)', 'desk(2,49)', 'desk(2,50)', 'desk(2,51)', 'desk(2,52)', 'desk(2,53)', 'desk(2,54)', 'desk(2,55)', 'desk(2,56)', 'desk(2,57)', 'desk(2,58)', 'desk(2,59)', 'desk(2,60)', 'desk(2,61)', 'desk(2,62)', 'desk(2,63)', 'desk(2,64)', 'desk(2,65)', 'desk(2,66)', 'desk(2,67)', 'desk(2,68)', 'desk(2,69)', 'desk(2,70)', 'desk(2,71)', 'desk(2,72)', 'desk(2,73)', 'desk(2,74)', 'desk(2,75)', 'desk(2,76)', 'desk(2,77)', 'desk(2,78)', 'desk(2,79)', 'desk(2,80)', 'desk(2,81)', 'desk(2,82)', 'desk(2,83)', 'desk(2,84)', 'desk(2,85)', 'desk(2,86)', 'desk(2,87)', 'desk(2,88)', 'desk(2,89)', 'desk(2,90)', 'desk(2,91)', 'desk(2,92)', 'desk(2,93)', 'desk(2,94)', 'desk(2,95)', 'desk(2,96)', 'desk(2,97)', 'desk(2,98)', 'desk(2,99)', 'desk(2,100)', 'desk(3,1)', 'desk(3,2)', 'desk(3,3)', 'desk(3,4)', 'desk(3,5)', 'desk(3,6)', 'desk(3,7)', 'desk(3,8)', 'desk(3,9)', 'desk(3,10)', 'desk(3,11)', 'desk(3,12)', 'desk(3,13)', 'desk(3,14)', 'desk(3,15)', 'desk(3,16)', 'desk(3,17)', 'desk(3,18)', 'desk(3,19)', 'desk(3,20)', 'desk(3,21)', 'desk(3,22)', 'desk(3,23)', 'desk(3,24)', 'desk(3,25)', 'desk(3,26)', 'desk(3,27)', 'desk(3,28)', 'desk(3,29)', 'desk(3,30)', 'desk(3,31)', 'desk(3,32)', 'desk(3,33)', 'desk(3,34)', 'desk(3,35)', 'desk(3,36)', 'desk(3,37)', 'desk(3,38)', 'desk(3,39)', 'desk(3,40)', 'desk(3,41)', 'desk(3,42)', 'desk(3,43)', 'desk(3,44)', 'desk(3,45)', 'desk(3,46)', 'desk(3,47)', 'desk(3,48)', 'desk(3,49)', 'desk(3,50)', 'desk(3,51)', 'desk(3,52)', 'desk(3,53)', 'desk(3,54)', 'desk(3,55)', 'desk(3,56)', 'desk(3,57)', 'desk(3,58)', 'desk(3,59)', 'desk(3,60)', 'desk(3,61)', 'desk(3,62)', 'desk(3,63)', 'desk(3,64)', 'desk(3,65)', 'desk(3,66)', 'desk(3,67)', 'desk(3,68)', 'desk(3,69)', 'desk(3,70)', 'desk(3,71)', 'desk(3,72)', 'desk(3,73)', 'desk(3,74)', 'desk(3,75)', 'desk(3,76)', 'desk(3,77)', 'desk(3,78)', 'desk(3,79)', 'desk(3,80)', 'desk(3,81)', 'desk(3,82)', 'desk(3,83)', 'desk(3,84)', 'desk(3,85)', 'desk(3,86)', 'desk(3,87)', 'desk(3,88)', 'desk(3,89)', 'desk(3,90)', 'desk(3,91)', 'desk(3,92)', 'desk(3,93)', 'desk(3,94)', 'desk(3,95)', 'desk(3,96)', 'desk(3,97)', 'desk(3,98)', 'desk(3,99)', 'desk(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['desk(1,1)', 'desk(1,2)', 'desk(1,3)', 'desk(1,4)', 'desk(1,5)', 'desk(1,6)', 'desk(1,7)', 'desk(1,8)', 'desk(1,9)', 'desk(1,10)', 'desk(1,11)', 'desk(1,12)', 'desk(1,13)', 'desk(1,14)', 'desk(1,15)', 'desk(1,16)', 'desk(1,17)', 'desk(1,18)', 'desk(1,19)', 'desk(1,20)', 'desk(1,21)', 'desk(1,22)', 'desk(1,23)', 'desk(1,24)', 'desk(1,25)', 'desk(1,26)', 'desk(1,27)', 'desk(1,28)', 'desk(1,29)', 'desk(1,30)', 'desk(1,31)', 'desk(1,32)', 'desk(1,33)', 'desk(1,34)', 'desk(1,35)', 'desk(1,36)', 'desk(1,37)', 'desk(1,38)', 'desk(1,39)', 'desk(1,40)', 'desk(1,41)', 'desk(1,42)', 'desk(1,43)', 'desk(1,44)', 'desk(1,45)', 'desk(1,46)', 'desk(1,47)', 'desk(1,48)', 'desk(1,49)', 'desk(1,50)', 'desk(1,51)', 'desk(1,52)', 'desk(1,53)', 'desk(1,54)', 'desk(1,55)', 'desk(1,56)', 'desk(1,57)', 'desk(1,58)', 'desk(1,59)', 'desk(1,60)', 'desk(1,61)', 'desk(1,62)', 'desk(1,63)', 'desk(1,64)', 'desk(1,65)', 'desk(1,66)', 'desk(1,67)', 'desk(1,68)', 'desk(1,69)', 'desk(1,70)', 'desk(1,71)', 'desk(1,72)', 'desk(1,73)', 'desk(1,74)', 'desk(1,75)', 'desk(1,76)', 'desk(1,77)', 'desk(1,78)', 'desk(1,79)', 'desk(1,80)', 'desk(1,81)', 'desk(1,82)', 'desk(1,83)', 'desk(1,84)', 'desk(1,85)', 'desk(1,86)', 'desk(1,87)', 'desk(1,88)', 'desk(1,89)', 'desk(1,90)', 'desk(1,91)', 'desk(1,92)', 'desk(1,93)', 'desk(1,94)', 'desk(1,95)', 'desk(1,96)', 'desk(1,97)', 'desk(1,98)', 'desk(1,99)', 'desk(1,100)', 'desk(2,1)', 'desk(2,2)', 'desk(2,3)', 'desk(2,4)', 'desk(2,5)', 'desk(2,6)', 'desk(2,7)', 'desk(2,8)', 'desk(2,9)', 'desk(2,10)', 'desk(2,11)', 'desk(2,12)', 'desk(2,13)', 'desk(2,14)', 'desk(2,15)', 'desk(2,16)', 'desk(2,17)', 'desk(2,18)', 'desk(2,19)', 'desk(2,20)', 'desk(2,21)', 'desk(2,22)', 'desk(2,23)', 'desk(2,24)', 'desk(2,25)', 'desk(2,26)', 'desk(2,27)', 'desk(2,28)', 'desk(2,29)', 'desk(2,30)', 'desk(2,31)', 'desk(2,32)', 'desk(2,33)', 'desk(2,34)', 'desk(2,35)', 'desk(2,36)', 'desk(2,37)', 'desk(2,38)', 'desk(2,39)', 'desk(2,40)', 'desk(2,41)', 'desk(2,42)', 'desk(2,43)', 'desk(2,44)', 'desk(2,45)', 'desk(2,46)', 'desk(2,47)', 'desk(2,48)', 'desk(2,49)', 'desk(2,50)', 'desk(2,51)', 'desk(2,52)', 'desk(2,53)', 'desk(2,54)', 'desk(2,55)', 'desk(2,56)', 'desk(2,57)', 'desk(2,58)', 'desk(2,59)', 'desk(2,60)', 'desk(2,61)', 'desk(2,62)', 'desk(2,63)', 'desk(2,64)', 'desk(2,65)', 'desk(2,66)', 'desk(2,67)', 'desk(2,68)', 'desk(2,69)', 'desk(2,70)', 'desk(2,71)', 'desk(2,72)', 'desk(2,73)', 'desk(2,74)', 'desk(2,75)', 'desk(2,76)', 'desk(2,77)', 'desk(2,78)', 'desk(2,79)', 'desk(2,80)', 'desk(2,81)', 'desk(2,82)', 'desk(2,83)', 'desk(2,84)', 'desk(2,85)', 'desk(2,86)', 'desk(2,87)', 'desk(2,88)', 'desk(2,89)', 'desk(2,90)', 'desk(2,91)', 'desk(2,92)', 'desk(2,93)', 'desk(2,94)', 'desk(2,95)', 'desk(2,96)', 'desk(2,97)', 'desk(2,98)', 'desk(2,99)', 'desk(2,100)', 'desk(3,1)', 'desk(3,2)', 'desk(3,3)', 'desk(3,4)', 'desk(3,5)', 'desk(3,6)', 'desk(3,7)', 'desk(3,8)', 'desk(3,9)', 'desk(3,10)', 'desk(3,11)', 'desk(3,12)', 'desk(3,13)', 'desk(3,14)', 'desk(3,15)', 'desk(3,16)', 'desk(3,17)', 'desk(3,18)', 'desk(3,19)', 'desk(3,20)', 'desk(3,21)', 'desk(3,22)', 'desk(3,23)', 'desk(3,24)', 'desk(3,25)', 'desk(3,26)', 'desk(3,27)', 'desk(3,28)', 'desk(3,29)', 'desk(3,30)', 'desk(3,31)', 'desk(3,32)', 'desk(3,33)', 'desk(3,34)', 'desk(3,35)', 'desk(3,36)', 'desk(3,37)', 'desk(3,38)', 'desk(3,39)', 'desk(3,40)', 'desk(3,41)', 'desk(3,42)', 'desk(3,43)', 'desk(3,44)', 'desk(3,45)', 'desk(3,46)', 'desk(3,47)', 'desk(3,48)', 'desk(3,49)', 'desk(3,50)', 'desk(3,51)', 'desk(3,52)', 'desk(3,53)', 'desk(3,54)', 'desk(3,55)', 'desk(3,56)', 'desk(3,57)', 'desk(3,58)', 'desk(3,59)', 'desk(3,60)', 'desk(3,61)', 'desk(3,62)', 'desk(3,63)', 'desk(3,64)', 'desk(3,65)', 'desk(3,66)', 'desk(3,67)', 'desk(3,68)', 'desk(3,69)', 'desk(3,70)', 'desk(3,71)', 'desk(3,72)', 'desk(3,73)', 'desk(3,74)', 'desk(3,75)', 'desk(3,76)', 'desk(3,77)', 'desk(3,78)', 'desk(3,79)', 'desk(3,80)', 'desk(3,81)', 'desk(3,82)', 'desk(3,83)', 'desk(3,84)', 'desk(3,85)', 'desk(3,86)', 'desk(3,87)', 'desk(3,88)', 'desk(3,89)', 'desk(3,90)', 'desk(3,91)', 'desk(3,92)', 'desk(3,93)', 'desk(3,94)', 'desk(3,95)', 'desk(3,96)', 'desk(3,97)', 'desk(3,98)', 'desk(3,99)', 'desk(3,100)', 'select(1)', 'select(2)', 'select(3)']]


45
assignment

question: 
Develop an ASP solution to map one specific label from "cloud","moscow","strength" to each element defined by the predicate "storm".

answer from file: 
assign(X,"cloud")|assign(X,"moscow")|assign(X,"strength"):-storm(X).

parsed from model: 
assign(X,"cloud")|assign(X,"moscow")|assign(X,"strength"):-storm(X).

facts: 
storm(1..5).

generated: 
Develop an ASP solution to map one specific label from "cloud","moscow","strength" to each element defined by the predicate "storm".
Answer: assign(X,"cloud")|assign(X,"moscow")|assign(X,"strength"):-storm(X).
assign(X,"cloud"):-height(X,"city").
assign(X,"moscow"):-height(X,"city").
assign(X,"strength"):-height(X,"city").

unique_rules: 
['assign(X,"cloud")|assign(X,"moscow")|assign(X,"strength"):-storm(X).', 'assign(X,"cloud"):-height(X,"city").', 'assign(X,"moscow"):-height(X,"city").', 'assign(X,"strength"):-height(X,"city").']

jaccard: 1.0

AS desired: [['storm(1)', 'storm(2)', 'storm(3)', 'storm(4)', 'storm(5)', 'assign(1,"strength")', 'assign(2,"strength")', 'assign(3,"strength")', 'assign(4,"strength")', 'assign(5,"strength")']]
\AS obtained: [['storm(1)', 'storm(2)', 'storm(3)', 'storm(4)', 'storm(5)', 'assign(1,"strength")', 'assign(2,"strength")', 'assign(3,"strength")', 'assign(4,"strength")', 'assign(5,"strength")']]


46
constraint

question: 
Create an ASP script that excludes the predicate "lightblue" with value 12 from being mapped to the label "delhi".

answer from file: 
:-assign(12,delhi).

parsed from model: 
:-assign(12,delhi).

facts: 
lightblue(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-lightblue(X).

generated: 
Create an ASP script that excludes the predicate "lightblue" with value 12 from being mapped to the label "delhi".
Answer: :-assign(12,delhi).
Explanation: The predicate "lightblue" includes values 12 and 17, and the label "delhi" is assigned to the value 12.
The predicate "bike" includes values 12 and 17, but the label "delhi" is not assigned to the value 17.

unique_rules: 
[':-assign(12,delhi).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'lightblue(4)', 'lightblue(5)', 'lightblue(6)', 'lightblue(7)', 'lightblue(8)', 'lightblue(9)', 'lightblue(10)', 'lightblue(11)', 'lightblue(12)', 'lightblue(13)', 'lightblue(14)', 'lightblue(15)', 'lightblue(16)', 'lightblue(17)', 'lightblue(18)', 'lightblue(19)', 'lightblue(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'lightblue(4)', 'lightblue(5)', 'lightblue(6)', 'lightblue(7)', 'lightblue(8)', 'lightblue(9)', 'lightblue(10)', 'lightblue(11)', 'lightblue(12)', 'lightblue(13)', 'lightblue(14)', 'lightblue(15)', 'lightblue(16)', 'lightblue(17)', 'lightblue(18)', 'lightblue(19)', 'lightblue(20)']]


47
combination

question: 
Develop an ASP code snippet to produce all valid combinations of elements from the "black" and "singapore" sets.

answer from file: 
combination(X,Y):-black(X),singapore(Y).

parsed from model: 
combination(X,Y):-black(X), ángapore(Y).

facts: 
black(1..4).singapore(1..5).

generated: 
Develop an ASP code snippet to produce all valid combinations of elements from the "black" and "singapore" sets.
Answer: combination(X,Y):-black(X), ángapore(Y).
combination(X,Y):-black(X),not singapore(Y).
combination(X,Y):- ángapore(X),not black(Y).
combination(X,Y):-black(X), ángapore(Y).

unique_rules: 
['combination(X,Y):-black(X), ángapore(Y).', 'combination(X,Y):-black(X),not singapore(Y).', 'combination(X,Y):- ángapore(X),not black(Y).']

jaccard: 0.0

AS desired: [['singapore(1)', 'singapore(2)', 'singapore(3)', 'singapore(4)', 'singapore(5)', 'black(1)', 'black(2)', 'black(3)', 'black(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: ['error']


48
join

question: 
Generate an ASP program to create the predicate "cairo_black" that associates each cairo with the hair of black, with the fields "ID","quality","lake","blackID" of "cairo" and the fields "ID","hair","quality" of "black".

answer from file: 
cairo_black(X,Z):-cairo(X,_,_,Y),black(Y,Z,_).

parsed from model: 
cairo_black(X,Z):-cairo(X,_,_,Y),black(Y,Z,_).

facts: 
cairo("ID","quality","lake","blackID").black("ID","hair","quality").

generated: 
Generate an ASP program to create the predicate "cairo_black" that associates each cairo with the hair of black, with the fields "ID","quality","lake","blackID" of "cairo" and the fields "ID","hair","quality" of "black".
Answer: cairo_black(X,Z):-cairo(X,_,_,Y),black(Y,Z,_).
cairo(X,_,_,Y):-black(Y,_,_),cairo(X,_,Z).
black(X,_,Z):-cairo(X,_,Z,_).

unique_rules: 
['cairo_black(X,Z):-cairo(X,_,_,Y),black(Y,Z,_).', 'cairo(X,_,_,Y):-black(Y,_,_),cairo(X,_,Z).', 'black(X,_,Z):-cairo(X,_,Z,_).']

jaccard: 1.0

AS desired: [['cairo("ID","quality","lake","blackID")', 'black("ID","hair","quality")']]
\AS obtained: [['cairo("ID","quality","lake","blackID")', 'black("ID","hair","quality")']]


49
closure

question: 
Develop an ASP script that derives the "family" predicate through the transitive closure of the "quality" predicate.

answer from file: 
family(X,Y):-quality(X,Y).
family(X,Y):-quality(X,Z),family(Z,Y).

parsed from model: 
family(X,Y):-quality(X,Y).
family(X,Y):-quality(X,Z),family(Z,Y).

facts: 
quality(1..3, 1..4).

generated: 
Develop an ASP script that derives the "family" predicate through the transitive closure of the "quality" predicate.
Answer: family(X,Y):-quality(X,Y).
family(X,Y):-quality(X,Z),family(Z,Y).
family(X,Y):-quality(X,Z),not family(Z,Y).
family(X,Y):-quality(X,Z),not quality(Z,Y).
family(X,Y):-quality(X,Z),quality(Z,Y).
family(X,Y):-not quality(X,Y).
family(X,Y):-not quality(X,Z),family(Z,Y).
family(X,Y):-not quality(X,Z),not family(Z,Y).

unique_rules: 
['family(X,Y):-quality(X,Y).', 'family(X,Y):-quality(X,Z),family(Z,Y).', 'family(X,Y):-quality(X,Z),not family(Z,Y).', 'family(X,Y):-quality(X,Z),not quality(Z,Y).', 'family(X,Y):-quality(X,Z),quality(Z,Y).', 'family(X,Y):-not quality(X,Y).', 'family(X,Y):-not quality(X,Z),family(Z,Y).', 'family(X,Y):-not quality(X,Z),not family(Z,Y).']

jaccard: 1.0

AS desired: [['quality(1,1)', 'quality(1,2)', 'quality(1,3)', 'quality(1,4)', 'quality(2,1)', 'quality(2,2)', 'quality(2,3)', 'quality(2,4)', 'quality(3,1)', 'quality(3,2)', 'quality(3,3)', 'quality(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]
\AS obtained: [['quality(1,1)', 'quality(1,2)', 'quality(1,3)', 'quality(1,4)', 'quality(2,1)', 'quality(2,2)', 'quality(2,3)', 'quality(2,4)', 'quality(3,1)', 'quality(3,2)', 'quality(3,3)', 'quality(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]


50
preference

question: 
Design an ASP solution to prevent the predicate "weight" with value "2" from being linked to "weight". If this occurs, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(2,"weight").[1@1]

parsed from model: 
:~assign(2,"weight").[1@1]

facts: 
weight(1..20).

generated: 
Design an ASP solution to prevent the predicate "weight" with value "2" from being linked to "weight". If this occurs, it incurs a cost of "1" at level "1".
Answer: :~assign(2,"weight").[1@1]
Explanation: The predicate "weight" has fields "ID","city","author","name","price","description","authorID","city","name","price","description","author","age","height","description","city","name","price","author","height","description","age","height","city","name","price","author","height","description","age","height","city","name","price","author","height","description","age","height","city","name","price","author","height","description","age","height","city","name","price","author","height","description","age","height","city","name","price","author","height","description","

unique_rules: 
[':~assign(2,"weight").[1@1]']

jaccard: 1.0

AS desired: [['weight(1)', 'weight(2)', 'weight(3)', 'weight(4)', 'weight(5)', 'weight(6)', 'weight(7)', 'weight(8)', 'weight(9)', 'weight(10)', 'weight(11)', 'weight(12)', 'weight(13)', 'weight(14)', 'weight(15)', 'weight(16)', 'weight(17)', 'weight(18)', 'weight(19)', 'weight(20)']]
\AS obtained: [['weight(1)', 'weight(2)', 'weight(3)', 'weight(4)', 'weight(5)', 'weight(6)', 'weight(7)', 'weight(8)', 'weight(9)', 'weight(10)', 'weight(11)', 'weight(12)', 'weight(13)', 'weight(14)', 'weight(15)', 'weight(16)', 'weight(17)', 'weight(18)', 'weight(19)', 'weight(20)']]


51
filtering

question: 
Write an ASP script to collect values associated with the "cairo" label from the "delhi" predicate.

answer from file: 
select(X):-delhi(X,"cairo").

parsed from model: 
select(X):-delhi(X,"city").

facts: 
delhi(1..5, "cairo").

generated: 
Write an ASP script to collect values associated with the "cairo" label from the "delhi" predicate.
Answer: select(X):-delhi(X,"city").
select(X):-delhi(X,"author").
select(X):-delhi(X,"city","author").
delhi(X,"city").
delhi(X,"author").
delhi(X,"city","author").

unique_rules: 
['select(X):-delhi(X,"city").', 'select(X):-delhi(X,"author").', 'select(X):-delhi(X,"city","author").']

jaccard: 0.0

AS desired: [['delhi(1,"cairo")', 'delhi(2,"cairo")', 'delhi(3,"cairo")', 'delhi(4,"cairo")', 'delhi(5,"cairo")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['delhi(1,"cairo")', 'delhi(2,"cairo")', 'delhi(3,"cairo")', 'delhi(4,"cairo")', 'delhi(5,"cairo")']]


52
negative_filtering

question: 
Draft an ASP solution to identify values associated with the predicate "barcelona" but not tied to the predicate "chicago" and labeled "cairo".

answer from file: 
select(X):-barcelona(X),not chicago(X,"cairo").

parsed from model: 
select(X):-barcelona(X),not chicago(X,"cairo").

facts: 
barcelona(1..3).chicago(1,"quality").chicago(2,"mumbai").chicago(3,"hair").

generated: 
Draft an ASP solution to identify values associated with the predicate "barcelona" but not tied to the predicate "chicago" and labeled "cairo".
Answer: select(X):-barcelona(X),not chicago(X,"cairo").
Explanation: The predicate "barcelona" includes values associated with the predicate "city","height","author","moto","description","name","city","author","description","height","name","city","description","author","moto","description","height","name","city","description","author","moto","description","height","name","city","description","author","moto","description","height","name","city","description","author","moto","description","height","name","city","description","author","moto","description","height","name","city","description","author","moto","description","height","name","city","description","author","moto","description","height

unique_rules: 
['select(X):-barcelona(X),not chicago(X,"cairo").']

jaccard: 1.0

AS desired: [['barcelona(1)', 'barcelona(2)', 'barcelona(3)', 'chicago(1,"quality")', 'chicago(2,"mumbai")', 'chicago(3,"hair")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['barcelona(1)', 'barcelona(2)', 'barcelona(3)', 'chicago(1,"quality")', 'chicago(2,"mumbai")', 'chicago(3,"hair")', 'select(1)', 'select(2)', 'select(3)']]


53
numeric_filtering

question: 
Craft an ASP code to retrieve values connected to the predicate "mumbai" with a value different than 35.

answer from file: 
select(X):-mumbai(X,C),C!=35.

parsed from model: 
select(X):-mumbai(X,C),C!=35.

facts: 
mumbai(1..3, 1..100).

generated: 
Craft an ASP code to retrieve values connected to the predicate "mumbai" with a value different than 35.
Answer: select(X):-mumbai(X,C),C!=35.
mumbai(X,C):-mumbai(X,C),C==35.

unique_rules: 
['select(X):-mumbai(X,C),C!=35.', 'mumbai(X,C):-mumbai(X,C),C==35.']

jaccard: 1.0

AS desired: [['mumbai(1,1)', 'mumbai(1,2)', 'mumbai(1,3)', 'mumbai(1,4)', 'mumbai(1,5)', 'mumbai(1,6)', 'mumbai(1,7)', 'mumbai(1,8)', 'mumbai(1,9)', 'mumbai(1,10)', 'mumbai(1,11)', 'mumbai(1,12)', 'mumbai(1,13)', 'mumbai(1,14)', 'mumbai(1,15)', 'mumbai(1,16)', 'mumbai(1,17)', 'mumbai(1,18)', 'mumbai(1,19)', 'mumbai(1,20)', 'mumbai(1,21)', 'mumbai(1,22)', 'mumbai(1,23)', 'mumbai(1,24)', 'mumbai(1,25)', 'mumbai(1,26)', 'mumbai(1,27)', 'mumbai(1,28)', 'mumbai(1,29)', 'mumbai(1,30)', 'mumbai(1,31)', 'mumbai(1,32)', 'mumbai(1,33)', 'mumbai(1,34)', 'mumbai(1,35)', 'mumbai(1,36)', 'mumbai(1,37)', 'mumbai(1,38)', 'mumbai(1,39)', 'mumbai(1,40)', 'mumbai(1,41)', 'mumbai(1,42)', 'mumbai(1,43)', 'mumbai(1,44)', 'mumbai(1,45)', 'mumbai(1,46)', 'mumbai(1,47)', 'mumbai(1,48)', 'mumbai(1,49)', 'mumbai(1,50)', 'mumbai(1,51)', 'mumbai(1,52)', 'mumbai(1,53)', 'mumbai(1,54)', 'mumbai(1,55)', 'mumbai(1,56)', 'mumbai(1,57)', 'mumbai(1,58)', 'mumbai(1,59)', 'mumbai(1,60)', 'mumbai(1,61)', 'mumbai(1,62)', 'mumbai(1,63)', 'mumbai(1,64)', 'mumbai(1,65)', 'mumbai(1,66)', 'mumbai(1,67)', 'mumbai(1,68)', 'mumbai(1,69)', 'mumbai(1,70)', 'mumbai(1,71)', 'mumbai(1,72)', 'mumbai(1,73)', 'mumbai(1,74)', 'mumbai(1,75)', 'mumbai(1,76)', 'mumbai(1,77)', 'mumbai(1,78)', 'mumbai(1,79)', 'mumbai(1,80)', 'mumbai(1,81)', 'mumbai(1,82)', 'mumbai(1,83)', 'mumbai(1,84)', 'mumbai(1,85)', 'mumbai(1,86)', 'mumbai(1,87)', 'mumbai(1,88)', 'mumbai(1,89)', 'mumbai(1,90)', 'mumbai(1,91)', 'mumbai(1,92)', 'mumbai(1,93)', 'mumbai(1,94)', 'mumbai(1,95)', 'mumbai(1,96)', 'mumbai(1,97)', 'mumbai(1,98)', 'mumbai(1,99)', 'mumbai(1,100)', 'mumbai(2,1)', 'mumbai(2,2)', 'mumbai(2,3)', 'mumbai(2,4)', 'mumbai(2,5)', 'mumbai(2,6)', 'mumbai(2,7)', 'mumbai(2,8)', 'mumbai(2,9)', 'mumbai(2,10)', 'mumbai(2,11)', 'mumbai(2,12)', 'mumbai(2,13)', 'mumbai(2,14)', 'mumbai(2,15)', 'mumbai(2,16)', 'mumbai(2,17)', 'mumbai(2,18)', 'mumbai(2,19)', 'mumbai(2,20)', 'mumbai(2,21)', 'mumbai(2,22)', 'mumbai(2,23)', 'mumbai(2,24)', 'mumbai(2,25)', 'mumbai(2,26)', 'mumbai(2,27)', 'mumbai(2,28)', 'mumbai(2,29)', 'mumbai(2,30)', 'mumbai(2,31)', 'mumbai(2,32)', 'mumbai(2,33)', 'mumbai(2,34)', 'mumbai(2,35)', 'mumbai(2,36)', 'mumbai(2,37)', 'mumbai(2,38)', 'mumbai(2,39)', 'mumbai(2,40)', 'mumbai(2,41)', 'mumbai(2,42)', 'mumbai(2,43)', 'mumbai(2,44)', 'mumbai(2,45)', 'mumbai(2,46)', 'mumbai(2,47)', 'mumbai(2,48)', 'mumbai(2,49)', 'mumbai(2,50)', 'mumbai(2,51)', 'mumbai(2,52)', 'mumbai(2,53)', 'mumbai(2,54)', 'mumbai(2,55)', 'mumbai(2,56)', 'mumbai(2,57)', 'mumbai(2,58)', 'mumbai(2,59)', 'mumbai(2,60)', 'mumbai(2,61)', 'mumbai(2,62)', 'mumbai(2,63)', 'mumbai(2,64)', 'mumbai(2,65)', 'mumbai(2,66)', 'mumbai(2,67)', 'mumbai(2,68)', 'mumbai(2,69)', 'mumbai(2,70)', 'mumbai(2,71)', 'mumbai(2,72)', 'mumbai(2,73)', 'mumbai(2,74)', 'mumbai(2,75)', 'mumbai(2,76)', 'mumbai(2,77)', 'mumbai(2,78)', 'mumbai(2,79)', 'mumbai(2,80)', 'mumbai(2,81)', 'mumbai(2,82)', 'mumbai(2,83)', 'mumbai(2,84)', 'mumbai(2,85)', 'mumbai(2,86)', 'mumbai(2,87)', 'mumbai(2,88)', 'mumbai(2,89)', 'mumbai(2,90)', 'mumbai(2,91)', 'mumbai(2,92)', 'mumbai(2,93)', 'mumbai(2,94)', 'mumbai(2,95)', 'mumbai(2,96)', 'mumbai(2,97)', 'mumbai(2,98)', 'mumbai(2,99)', 'mumbai(2,100)', 'mumbai(3,1)', 'mumbai(3,2)', 'mumbai(3,3)', 'mumbai(3,4)', 'mumbai(3,5)', 'mumbai(3,6)', 'mumbai(3,7)', 'mumbai(3,8)', 'mumbai(3,9)', 'mumbai(3,10)', 'mumbai(3,11)', 'mumbai(3,12)', 'mumbai(3,13)', 'mumbai(3,14)', 'mumbai(3,15)', 'mumbai(3,16)', 'mumbai(3,17)', 'mumbai(3,18)', 'mumbai(3,19)', 'mumbai(3,20)', 'mumbai(3,21)', 'mumbai(3,22)', 'mumbai(3,23)', 'mumbai(3,24)', 'mumbai(3,25)', 'mumbai(3,26)', 'mumbai(3,27)', 'mumbai(3,28)', 'mumbai(3,29)', 'mumbai(3,30)', 'mumbai(3,31)', 'mumbai(3,32)', 'mumbai(3,33)', 'mumbai(3,34)', 'mumbai(3,35)', 'mumbai(3,36)', 'mumbai(3,37)', 'mumbai(3,38)', 'mumbai(3,39)', 'mumbai(3,40)', 'mumbai(3,41)', 'mumbai(3,42)', 'mumbai(3,43)', 'mumbai(3,44)', 'mumbai(3,45)', 'mumbai(3,46)', 'mumbai(3,47)', 'mumbai(3,48)', 'mumbai(3,49)', 'mumbai(3,50)', 'mumbai(3,51)', 'mumbai(3,52)', 'mumbai(3,53)', 'mumbai(3,54)', 'mumbai(3,55)', 'mumbai(3,56)', 'mumbai(3,57)', 'mumbai(3,58)', 'mumbai(3,59)', 'mumbai(3,60)', 'mumbai(3,61)', 'mumbai(3,62)', 'mumbai(3,63)', 'mumbai(3,64)', 'mumbai(3,65)', 'mumbai(3,66)', 'mumbai(3,67)', 'mumbai(3,68)', 'mumbai(3,69)', 'mumbai(3,70)', 'mumbai(3,71)', 'mumbai(3,72)', 'mumbai(3,73)', 'mumbai(3,74)', 'mumbai(3,75)', 'mumbai(3,76)', 'mumbai(3,77)', 'mumbai(3,78)', 'mumbai(3,79)', 'mumbai(3,80)', 'mumbai(3,81)', 'mumbai(3,82)', 'mumbai(3,83)', 'mumbai(3,84)', 'mumbai(3,85)', 'mumbai(3,86)', 'mumbai(3,87)', 'mumbai(3,88)', 'mumbai(3,89)', 'mumbai(3,90)', 'mumbai(3,91)', 'mumbai(3,92)', 'mumbai(3,93)', 'mumbai(3,94)', 'mumbai(3,95)', 'mumbai(3,96)', 'mumbai(3,97)', 'mumbai(3,98)', 'mumbai(3,99)', 'mumbai(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['mumbai(1,1)', 'mumbai(1,2)', 'mumbai(1,3)', 'mumbai(1,4)', 'mumbai(1,5)', 'mumbai(1,6)', 'mumbai(1,7)', 'mumbai(1,8)', 'mumbai(1,9)', 'mumbai(1,10)', 'mumbai(1,11)', 'mumbai(1,12)', 'mumbai(1,13)', 'mumbai(1,14)', 'mumbai(1,15)', 'mumbai(1,16)', 'mumbai(1,17)', 'mumbai(1,18)', 'mumbai(1,19)', 'mumbai(1,20)', 'mumbai(1,21)', 'mumbai(1,22)', 'mumbai(1,23)', 'mumbai(1,24)', 'mumbai(1,25)', 'mumbai(1,26)', 'mumbai(1,27)', 'mumbai(1,28)', 'mumbai(1,29)', 'mumbai(1,30)', 'mumbai(1,31)', 'mumbai(1,32)', 'mumbai(1,33)', 'mumbai(1,34)', 'mumbai(1,35)', 'mumbai(1,36)', 'mumbai(1,37)', 'mumbai(1,38)', 'mumbai(1,39)', 'mumbai(1,40)', 'mumbai(1,41)', 'mumbai(1,42)', 'mumbai(1,43)', 'mumbai(1,44)', 'mumbai(1,45)', 'mumbai(1,46)', 'mumbai(1,47)', 'mumbai(1,48)', 'mumbai(1,49)', 'mumbai(1,50)', 'mumbai(1,51)', 'mumbai(1,52)', 'mumbai(1,53)', 'mumbai(1,54)', 'mumbai(1,55)', 'mumbai(1,56)', 'mumbai(1,57)', 'mumbai(1,58)', 'mumbai(1,59)', 'mumbai(1,60)', 'mumbai(1,61)', 'mumbai(1,62)', 'mumbai(1,63)', 'mumbai(1,64)', 'mumbai(1,65)', 'mumbai(1,66)', 'mumbai(1,67)', 'mumbai(1,68)', 'mumbai(1,69)', 'mumbai(1,70)', 'mumbai(1,71)', 'mumbai(1,72)', 'mumbai(1,73)', 'mumbai(1,74)', 'mumbai(1,75)', 'mumbai(1,76)', 'mumbai(1,77)', 'mumbai(1,78)', 'mumbai(1,79)', 'mumbai(1,80)', 'mumbai(1,81)', 'mumbai(1,82)', 'mumbai(1,83)', 'mumbai(1,84)', 'mumbai(1,85)', 'mumbai(1,86)', 'mumbai(1,87)', 'mumbai(1,88)', 'mumbai(1,89)', 'mumbai(1,90)', 'mumbai(1,91)', 'mumbai(1,92)', 'mumbai(1,93)', 'mumbai(1,94)', 'mumbai(1,95)', 'mumbai(1,96)', 'mumbai(1,97)', 'mumbai(1,98)', 'mumbai(1,99)', 'mumbai(1,100)', 'mumbai(2,1)', 'mumbai(2,2)', 'mumbai(2,3)', 'mumbai(2,4)', 'mumbai(2,5)', 'mumbai(2,6)', 'mumbai(2,7)', 'mumbai(2,8)', 'mumbai(2,9)', 'mumbai(2,10)', 'mumbai(2,11)', 'mumbai(2,12)', 'mumbai(2,13)', 'mumbai(2,14)', 'mumbai(2,15)', 'mumbai(2,16)', 'mumbai(2,17)', 'mumbai(2,18)', 'mumbai(2,19)', 'mumbai(2,20)', 'mumbai(2,21)', 'mumbai(2,22)', 'mumbai(2,23)', 'mumbai(2,24)', 'mumbai(2,25)', 'mumbai(2,26)', 'mumbai(2,27)', 'mumbai(2,28)', 'mumbai(2,29)', 'mumbai(2,30)', 'mumbai(2,31)', 'mumbai(2,32)', 'mumbai(2,33)', 'mumbai(2,34)', 'mumbai(2,35)', 'mumbai(2,36)', 'mumbai(2,37)', 'mumbai(2,38)', 'mumbai(2,39)', 'mumbai(2,40)', 'mumbai(2,41)', 'mumbai(2,42)', 'mumbai(2,43)', 'mumbai(2,44)', 'mumbai(2,45)', 'mumbai(2,46)', 'mumbai(2,47)', 'mumbai(2,48)', 'mumbai(2,49)', 'mumbai(2,50)', 'mumbai(2,51)', 'mumbai(2,52)', 'mumbai(2,53)', 'mumbai(2,54)', 'mumbai(2,55)', 'mumbai(2,56)', 'mumbai(2,57)', 'mumbai(2,58)', 'mumbai(2,59)', 'mumbai(2,60)', 'mumbai(2,61)', 'mumbai(2,62)', 'mumbai(2,63)', 'mumbai(2,64)', 'mumbai(2,65)', 'mumbai(2,66)', 'mumbai(2,67)', 'mumbai(2,68)', 'mumbai(2,69)', 'mumbai(2,70)', 'mumbai(2,71)', 'mumbai(2,72)', 'mumbai(2,73)', 'mumbai(2,74)', 'mumbai(2,75)', 'mumbai(2,76)', 'mumbai(2,77)', 'mumbai(2,78)', 'mumbai(2,79)', 'mumbai(2,80)', 'mumbai(2,81)', 'mumbai(2,82)', 'mumbai(2,83)', 'mumbai(2,84)', 'mumbai(2,85)', 'mumbai(2,86)', 'mumbai(2,87)', 'mumbai(2,88)', 'mumbai(2,89)', 'mumbai(2,90)', 'mumbai(2,91)', 'mumbai(2,92)', 'mumbai(2,93)', 'mumbai(2,94)', 'mumbai(2,95)', 'mumbai(2,96)', 'mumbai(2,97)', 'mumbai(2,98)', 'mumbai(2,99)', 'mumbai(2,100)', 'mumbai(3,1)', 'mumbai(3,2)', 'mumbai(3,3)', 'mumbai(3,4)', 'mumbai(3,5)', 'mumbai(3,6)', 'mumbai(3,7)', 'mumbai(3,8)', 'mumbai(3,9)', 'mumbai(3,10)', 'mumbai(3,11)', 'mumbai(3,12)', 'mumbai(3,13)', 'mumbai(3,14)', 'mumbai(3,15)', 'mumbai(3,16)', 'mumbai(3,17)', 'mumbai(3,18)', 'mumbai(3,19)', 'mumbai(3,20)', 'mumbai(3,21)', 'mumbai(3,22)', 'mumbai(3,23)', 'mumbai(3,24)', 'mumbai(3,25)', 'mumbai(3,26)', 'mumbai(3,27)', 'mumbai(3,28)', 'mumbai(3,29)', 'mumbai(3,30)', 'mumbai(3,31)', 'mumbai(3,32)', 'mumbai(3,33)', 'mumbai(3,34)', 'mumbai(3,35)', 'mumbai(3,36)', 'mumbai(3,37)', 'mumbai(3,38)', 'mumbai(3,39)', 'mumbai(3,40)', 'mumbai(3,41)', 'mumbai(3,42)', 'mumbai(3,43)', 'mumbai(3,44)', 'mumbai(3,45)', 'mumbai(3,46)', 'mumbai(3,47)', 'mumbai(3,48)', 'mumbai(3,49)', 'mumbai(3,50)', 'mumbai(3,51)', 'mumbai(3,52)', 'mumbai(3,53)', 'mumbai(3,54)', 'mumbai(3,55)', 'mumbai(3,56)', 'mumbai(3,57)', 'mumbai(3,58)', 'mumbai(3,59)', 'mumbai(3,60)', 'mumbai(3,61)', 'mumbai(3,62)', 'mumbai(3,63)', 'mumbai(3,64)', 'mumbai(3,65)', 'mumbai(3,66)', 'mumbai(3,67)', 'mumbai(3,68)', 'mumbai(3,69)', 'mumbai(3,70)', 'mumbai(3,71)', 'mumbai(3,72)', 'mumbai(3,73)', 'mumbai(3,74)', 'mumbai(3,75)', 'mumbai(3,76)', 'mumbai(3,77)', 'mumbai(3,78)', 'mumbai(3,79)', 'mumbai(3,80)', 'mumbai(3,81)', 'mumbai(3,82)', 'mumbai(3,83)', 'mumbai(3,84)', 'mumbai(3,85)', 'mumbai(3,86)', 'mumbai(3,87)', 'mumbai(3,88)', 'mumbai(3,89)', 'mumbai(3,90)', 'mumbai(3,91)', 'mumbai(3,92)', 'mumbai(3,93)', 'mumbai(3,94)', 'mumbai(3,95)', 'mumbai(3,96)', 'mumbai(3,97)', 'mumbai(3,98)', 'mumbai(3,99)', 'mumbai(3,100)', 'select(1)', 'select(2)', 'select(3)']]


54
assignment

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate singapore. The labels are "chair","storm","lake","black","white".

answer from file: 
assign(X,"chair")|assign(X,"storm")|assign(X,"lake")|assign(X,"black")|assign(X,"white"):-singapore(X).

parsed from model: 
assign(X,"chair")|assign(X,"storm")|assign(X,"lake")|assign(X,"black")|assign(X,"white"):- arrivant(X).

facts: 
singapore(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate singapore. The labels are "chair","storm","lake","black","white".
Answer: assign(X,"chair")|assign(X,"storm")|assign(X,"lake")|assign(X,"black")|assign(X,"white"):- arrivant(X).
assign(X,"chair")|assign(X,"storm")|assign(X,"lake")|assign(X,"black")|assign(X,"white"):- arrivant(X).
assign(X,"city"):- arrivant(X).
assign(X,"city"):- arrivant(X).
```

unique_rules: 
['assign(X,"chair")|assign(X,"storm")|assign(X,"lake")|assign(X,"black")|assign(X,"white"):- arrivant(X).', 'assign(X,"city"):- arrivant(X).']

jaccard: 0.0

AS desired: [['singapore(1)', 'singapore(2)', 'singapore(3)', 'singapore(4)', 'singapore(5)', 'assign(1,"white")', 'assign(2,"white")', 'assign(3,"white")', 'assign(4,"white")', 'assign(5,"white")']]
\AS obtained: [['singapore(1)', 'singapore(2)', 'singapore(3)', 'singapore(4)', 'singapore(5)']]


55
constraint

question: 
Create an ASP code snippet to ensure the "cairo" predicate with a value of 10 is not linked to the label "laptop".

answer from file: 
:-assign(10,laptop).

parsed from model: 
:-assign(10,laptop).

facts: 
cairo(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-cairo(X).

generated: 
Create an ASP code snippet to ensure the "cairo" predicate with a value of 10 is not linked to the label "laptop".
Answer: :-assign(10,laptop).
Explanation: The predicate "city" includes a "city" label for the "shangai" value, and the predicate "shangai" contains a "city" label for the "height" value. If the "city" label is assigned to the "height" value, it violates the "city" label constraint.

unique_rules: 
[':-assign(10,laptop).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'cairo(1)', 'cairo(2)', 'cairo(3)', 'cairo(4)', 'cairo(5)', 'cairo(6)', 'cairo(7)', 'cairo(8)', 'cairo(9)', 'cairo(10)', 'cairo(11)', 'cairo(12)', 'cairo(13)', 'cairo(14)', 'cairo(15)', 'cairo(16)', 'cairo(17)', 'cairo(18)', 'cairo(19)', 'cairo(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'cairo(1)', 'cairo(2)', 'cairo(3)', 'cairo(4)', 'cairo(5)', 'cairo(6)', 'cairo(7)', 'cairo(8)', 'cairo(9)', 'cairo(10)', 'cairo(11)', 'cairo(12)', 'cairo(13)', 'cairo(14)', 'cairo(15)', 'cairo(16)', 'cairo(17)', 'cairo(18)', 'cairo(19)', 'cairo(20)']]


56
combination

question: 
Develop an ASP code snippet to produce all valid combinations of elements from the "lightblue" and "lake" sets.

answer from file: 
combination(X,Y):-lightblue(X),lake(Y).

parsed from model: 
combination(X,Y):-lightblue(X),lake(Y).

facts: 
lightblue(1..4).lake(1..5).

generated: 
Develop an ASP code snippet to produce all valid combinations of elements from the "lightblue" and "lake" sets.
Answer: combination(X,Y):-lightblue(X),lake(Y).
combination(X,Y):-lightblue(X),not lake(Y).
combination(X,Y):-not lightblue(X),lake(Y).
combination(X,Y):-not lightblue(X),not lake(Y).

unique_rules: 
['combination(X,Y):-lightblue(X),lake(Y).', 'combination(X,Y):-lightblue(X),not lake(Y).', 'combination(X,Y):-not lightblue(X),lake(Y).', 'combination(X,Y):-not lightblue(X),not lake(Y).']

jaccard: 1.0

AS desired: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'lightblue(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'lightblue(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


57
join

question: 
Develop an ASP solution that defines the predicate "lake_storm" to link each lake to the surname of storm, with "lake" having fields "ID","stormID","owner","weight","lake" and "storm" having fields "ID","surname","owner".

answer from file: 
lake_storm(X,Z):-lake(X,Y,_,_,_),storm(Y,Z,_).

parsed from model: 
lake_storm(X,Z):-lake(X,Y,_,_,_),storm(Y,Z,_).

facts: 
lake("ID","stormID","owner","weight","lake").storm("ID","surname","owner").

generated: 
Develop an ASP solution that defines the predicate "lake_storm" to link each lake to the surname of storm, with "lake" having fields "ID","stormID","owner","weight","lake" and "storm" having fields "ID","surname","owner". Define the predicate "lake_storm" that links each lake to the surname of storm.
Answer: lake_storm(X,Z):-lake(X,Y,_,_,_),storm(Y,Z,_).
lake_storm(X,Z):-lake(X,Y,_,_,Z),storm(Y,_,Z).

unique_rules: 
['lake_storm(X,Z):-lake(X,Y,_,_,_),storm(Y,Z,_).', 'lake_storm(X,Z):-lake(X,Y,_,_,Z),storm(Y,_,Z).']

jaccard: 1.0

AS desired: [['lake("ID","stormID","owner","weight","lake")', 'storm("ID","surname","owner")']]
\AS obtained: [['lake("ID","stormID","owner","weight","lake")', 'storm("ID","surname","owner")']]


58
closure

question: 
Create an ASP solution that establishes the transitive closure of the "moscow" predicate, defined as "loops".

answer from file: 
loops(X,Y):-moscow(X,Y).
loops(X,Y):-moscow(X,Z),loops(Z,Y).

parsed from model: 


facts: 
moscow(1..3, 1..4).

generated: 
Create an ASP solution that establishes the transitive closure of the "moscow" predicate, defined as "loops".
Answer: closure(loops)
closure(loops) = {X|X∈loops}.
closure(loops) = loops.
closure(loops) = union(closure(X),closure(Y))|X,Y∈loops.
closure(loops) = union(loops,city(X,Y))|X,Y∈loops.
city(X,Y) = {X|X,Y∈loops}.

unique_rules: 
[]

jaccard: 0.0

AS desired: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]
\AS obtained: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)']]


59
preference

question: 
Craft an ASP solution to prevent the linking of the "quality" predicate with value "5" to "quality". Any link incurs a cost of "1" at level "1".

answer from file: 
:~assign(5,"quality").[1@1]

parsed from model: 
:~assign(5,"quality").[1@1]

facts: 
quality(1..20).

generated: 
Craft an ASP solution to prevent the linking of the "quality" predicate with value "5" to "quality". Any link incurs a cost of "1" at level "1".
Answer: :~assign(5,"quality").[1@1]
Explanation: The predicate "quality" includes values "1","city","author","rome","description","moto","author","city","description","author","rome","description","author","city","description","author","rome","description","author","city","description","author","rome","description","author","city","description","author","rome","description","author","city","description","author","rome","description","author","city","description","author","rome","description","author","city","description","author","rome","description","author","city","description","author","rome","description","author","city","description","author","rome","description","author","city

unique_rules: 
[':~assign(5,"quality").[1@1]']

jaccard: 1.0

AS desired: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'quality(6)', 'quality(7)', 'quality(8)', 'quality(9)', 'quality(10)', 'quality(11)', 'quality(12)', 'quality(13)', 'quality(14)', 'quality(15)', 'quality(16)', 'quality(17)', 'quality(18)', 'quality(19)', 'quality(20)']]
\AS obtained: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'quality(6)', 'quality(7)', 'quality(8)', 'quality(9)', 'quality(10)', 'quality(11)', 'quality(12)', 'quality(13)', 'quality(14)', 'quality(15)', 'quality(16)', 'quality(17)', 'quality(18)', 'quality(19)', 'quality(20)']]


60
filtering

question: 
Write an ASP script to collect values associated with the "surname" label from the "strength" predicate.

answer from file: 
select(X):-strength(X,"surname").

parsed from model: 
select(X):-strength(X,"description").

facts: 
strength(1..5, "surname").

generated: 
Write an ASP script to collect values associated with the "surname" label from the "strength" predicate.
Answer: select(X):-strength(X,"description").
select(X):-strength(X,"author").
select(X):-strength(X,"description","author").
strength(X,"description").
strength(X,"author").
strength(X,"description","author").

unique_rules: 
['select(X):-strength(X,"description").', 'select(X):-strength(X,"author").', 'select(X):-strength(X,"description","author").']

jaccard: 0.0

AS desired: [['strength(1,"surname")', 'strength(2,"surname")', 'strength(3,"surname")', 'strength(4,"surname")', 'strength(5,"surname")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['strength(1,"surname")', 'strength(2,"surname")', 'strength(3,"surname")', 'strength(4,"surname")', 'strength(5,"surname")']]


61
negative_filtering

question: 
Develop an ASP script to collect values tied to the predicate "flower" but not linked to the predicate "owner" and labeled "butterfly".

answer from file: 
select(X):-flower(X),not owner(X,"butterfly").

parsed from model: 
select(X):-flower(X),not owner(X,"butterfly").

facts: 
flower(1..3).owner(1,"surname").owner(2,"quality").owner(3,"black").

generated: 
Develop an ASP script to collect values tied to the predicate "flower" but not linked to the predicate "owner" and labeled "butterfly".
Answer: select(X):-flower(X),not owner(X,"butterfly").

unique_rules: 
['select(X):-flower(X),not owner(X,"butterfly").']

jaccard: 1.0

AS desired: [['flower(1)', 'flower(2)', 'flower(3)', 'owner(1,"surname")', 'owner(2,"quality")', 'owner(3,"black")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['flower(1)', 'flower(2)', 'flower(3)', 'owner(1,"surname")', 'owner(2,"quality")', 'owner(3,"black")', 'select(1)', 'select(2)', 'select(3)']]


62
numeric_filtering

question: 
Produce an ASP script to retrieve values associated with the predicate "flower" with a value different than 47.

answer from file: 
select(X):-flower(X,C),C!=47.

parsed from model: 
select(X):-flower(X,C),C!=47.

facts: 
flower(1..3, 1..100).

generated: 
Produce an ASP script to retrieve values associated with the predicate "flower" with a value different than 47.
Answer: select(X):-flower(X,C),C!=47.
select(X):-flower(X,C),C==47.

unique_rules: 
['select(X):-flower(X,C),C!=47.', 'select(X):-flower(X,C),C==47.']

jaccard: 1.0

AS desired: [['flower(1,1)', 'flower(1,2)', 'flower(1,3)', 'flower(1,4)', 'flower(1,5)', 'flower(1,6)', 'flower(1,7)', 'flower(1,8)', 'flower(1,9)', 'flower(1,10)', 'flower(1,11)', 'flower(1,12)', 'flower(1,13)', 'flower(1,14)', 'flower(1,15)', 'flower(1,16)', 'flower(1,17)', 'flower(1,18)', 'flower(1,19)', 'flower(1,20)', 'flower(1,21)', 'flower(1,22)', 'flower(1,23)', 'flower(1,24)', 'flower(1,25)', 'flower(1,26)', 'flower(1,27)', 'flower(1,28)', 'flower(1,29)', 'flower(1,30)', 'flower(1,31)', 'flower(1,32)', 'flower(1,33)', 'flower(1,34)', 'flower(1,35)', 'flower(1,36)', 'flower(1,37)', 'flower(1,38)', 'flower(1,39)', 'flower(1,40)', 'flower(1,41)', 'flower(1,42)', 'flower(1,43)', 'flower(1,44)', 'flower(1,45)', 'flower(1,46)', 'flower(1,47)', 'flower(1,48)', 'flower(1,49)', 'flower(1,50)', 'flower(1,51)', 'flower(1,52)', 'flower(1,53)', 'flower(1,54)', 'flower(1,55)', 'flower(1,56)', 'flower(1,57)', 'flower(1,58)', 'flower(1,59)', 'flower(1,60)', 'flower(1,61)', 'flower(1,62)', 'flower(1,63)', 'flower(1,64)', 'flower(1,65)', 'flower(1,66)', 'flower(1,67)', 'flower(1,68)', 'flower(1,69)', 'flower(1,70)', 'flower(1,71)', 'flower(1,72)', 'flower(1,73)', 'flower(1,74)', 'flower(1,75)', 'flower(1,76)', 'flower(1,77)', 'flower(1,78)', 'flower(1,79)', 'flower(1,80)', 'flower(1,81)', 'flower(1,82)', 'flower(1,83)', 'flower(1,84)', 'flower(1,85)', 'flower(1,86)', 'flower(1,87)', 'flower(1,88)', 'flower(1,89)', 'flower(1,90)', 'flower(1,91)', 'flower(1,92)', 'flower(1,93)', 'flower(1,94)', 'flower(1,95)', 'flower(1,96)', 'flower(1,97)', 'flower(1,98)', 'flower(1,99)', 'flower(1,100)', 'flower(2,1)', 'flower(2,2)', 'flower(2,3)', 'flower(2,4)', 'flower(2,5)', 'flower(2,6)', 'flower(2,7)', 'flower(2,8)', 'flower(2,9)', 'flower(2,10)', 'flower(2,11)', 'flower(2,12)', 'flower(2,13)', 'flower(2,14)', 'flower(2,15)', 'flower(2,16)', 'flower(2,17)', 'flower(2,18)', 'flower(2,19)', 'flower(2,20)', 'flower(2,21)', 'flower(2,22)', 'flower(2,23)', 'flower(2,24)', 'flower(2,25)', 'flower(2,26)', 'flower(2,27)', 'flower(2,28)', 'flower(2,29)', 'flower(2,30)', 'flower(2,31)', 'flower(2,32)', 'flower(2,33)', 'flower(2,34)', 'flower(2,35)', 'flower(2,36)', 'flower(2,37)', 'flower(2,38)', 'flower(2,39)', 'flower(2,40)', 'flower(2,41)', 'flower(2,42)', 'flower(2,43)', 'flower(2,44)', 'flower(2,45)', 'flower(2,46)', 'flower(2,47)', 'flower(2,48)', 'flower(2,49)', 'flower(2,50)', 'flower(2,51)', 'flower(2,52)', 'flower(2,53)', 'flower(2,54)', 'flower(2,55)', 'flower(2,56)', 'flower(2,57)', 'flower(2,58)', 'flower(2,59)', 'flower(2,60)', 'flower(2,61)', 'flower(2,62)', 'flower(2,63)', 'flower(2,64)', 'flower(2,65)', 'flower(2,66)', 'flower(2,67)', 'flower(2,68)', 'flower(2,69)', 'flower(2,70)', 'flower(2,71)', 'flower(2,72)', 'flower(2,73)', 'flower(2,74)', 'flower(2,75)', 'flower(2,76)', 'flower(2,77)', 'flower(2,78)', 'flower(2,79)', 'flower(2,80)', 'flower(2,81)', 'flower(2,82)', 'flower(2,83)', 'flower(2,84)', 'flower(2,85)', 'flower(2,86)', 'flower(2,87)', 'flower(2,88)', 'flower(2,89)', 'flower(2,90)', 'flower(2,91)', 'flower(2,92)', 'flower(2,93)', 'flower(2,94)', 'flower(2,95)', 'flower(2,96)', 'flower(2,97)', 'flower(2,98)', 'flower(2,99)', 'flower(2,100)', 'flower(3,1)', 'flower(3,2)', 'flower(3,3)', 'flower(3,4)', 'flower(3,5)', 'flower(3,6)', 'flower(3,7)', 'flower(3,8)', 'flower(3,9)', 'flower(3,10)', 'flower(3,11)', 'flower(3,12)', 'flower(3,13)', 'flower(3,14)', 'flower(3,15)', 'flower(3,16)', 'flower(3,17)', 'flower(3,18)', 'flower(3,19)', 'flower(3,20)', 'flower(3,21)', 'flower(3,22)', 'flower(3,23)', 'flower(3,24)', 'flower(3,25)', 'flower(3,26)', 'flower(3,27)', 'flower(3,28)', 'flower(3,29)', 'flower(3,30)', 'flower(3,31)', 'flower(3,32)', 'flower(3,33)', 'flower(3,34)', 'flower(3,35)', 'flower(3,36)', 'flower(3,37)', 'flower(3,38)', 'flower(3,39)', 'flower(3,40)', 'flower(3,41)', 'flower(3,42)', 'flower(3,43)', 'flower(3,44)', 'flower(3,45)', 'flower(3,46)', 'flower(3,47)', 'flower(3,48)', 'flower(3,49)', 'flower(3,50)', 'flower(3,51)', 'flower(3,52)', 'flower(3,53)', 'flower(3,54)', 'flower(3,55)', 'flower(3,56)', 'flower(3,57)', 'flower(3,58)', 'flower(3,59)', 'flower(3,60)', 'flower(3,61)', 'flower(3,62)', 'flower(3,63)', 'flower(3,64)', 'flower(3,65)', 'flower(3,66)', 'flower(3,67)', 'flower(3,68)', 'flower(3,69)', 'flower(3,70)', 'flower(3,71)', 'flower(3,72)', 'flower(3,73)', 'flower(3,74)', 'flower(3,75)', 'flower(3,76)', 'flower(3,77)', 'flower(3,78)', 'flower(3,79)', 'flower(3,80)', 'flower(3,81)', 'flower(3,82)', 'flower(3,83)', 'flower(3,84)', 'flower(3,85)', 'flower(3,86)', 'flower(3,87)', 'flower(3,88)', 'flower(3,89)', 'flower(3,90)', 'flower(3,91)', 'flower(3,92)', 'flower(3,93)', 'flower(3,94)', 'flower(3,95)', 'flower(3,96)', 'flower(3,97)', 'flower(3,98)', 'flower(3,99)', 'flower(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['flower(1,1)', 'flower(1,2)', 'flower(1,3)', 'flower(1,4)', 'flower(1,5)', 'flower(1,6)', 'flower(1,7)', 'flower(1,8)', 'flower(1,9)', 'flower(1,10)', 'flower(1,11)', 'flower(1,12)', 'flower(1,13)', 'flower(1,14)', 'flower(1,15)', 'flower(1,16)', 'flower(1,17)', 'flower(1,18)', 'flower(1,19)', 'flower(1,20)', 'flower(1,21)', 'flower(1,22)', 'flower(1,23)', 'flower(1,24)', 'flower(1,25)', 'flower(1,26)', 'flower(1,27)', 'flower(1,28)', 'flower(1,29)', 'flower(1,30)', 'flower(1,31)', 'flower(1,32)', 'flower(1,33)', 'flower(1,34)', 'flower(1,35)', 'flower(1,36)', 'flower(1,37)', 'flower(1,38)', 'flower(1,39)', 'flower(1,40)', 'flower(1,41)', 'flower(1,42)', 'flower(1,43)', 'flower(1,44)', 'flower(1,45)', 'flower(1,46)', 'flower(1,47)', 'flower(1,48)', 'flower(1,49)', 'flower(1,50)', 'flower(1,51)', 'flower(1,52)', 'flower(1,53)', 'flower(1,54)', 'flower(1,55)', 'flower(1,56)', 'flower(1,57)', 'flower(1,58)', 'flower(1,59)', 'flower(1,60)', 'flower(1,61)', 'flower(1,62)', 'flower(1,63)', 'flower(1,64)', 'flower(1,65)', 'flower(1,66)', 'flower(1,67)', 'flower(1,68)', 'flower(1,69)', 'flower(1,70)', 'flower(1,71)', 'flower(1,72)', 'flower(1,73)', 'flower(1,74)', 'flower(1,75)', 'flower(1,76)', 'flower(1,77)', 'flower(1,78)', 'flower(1,79)', 'flower(1,80)', 'flower(1,81)', 'flower(1,82)', 'flower(1,83)', 'flower(1,84)', 'flower(1,85)', 'flower(1,86)', 'flower(1,87)', 'flower(1,88)', 'flower(1,89)', 'flower(1,90)', 'flower(1,91)', 'flower(1,92)', 'flower(1,93)', 'flower(1,94)', 'flower(1,95)', 'flower(1,96)', 'flower(1,97)', 'flower(1,98)', 'flower(1,99)', 'flower(1,100)', 'flower(2,1)', 'flower(2,2)', 'flower(2,3)', 'flower(2,4)', 'flower(2,5)', 'flower(2,6)', 'flower(2,7)', 'flower(2,8)', 'flower(2,9)', 'flower(2,10)', 'flower(2,11)', 'flower(2,12)', 'flower(2,13)', 'flower(2,14)', 'flower(2,15)', 'flower(2,16)', 'flower(2,17)', 'flower(2,18)', 'flower(2,19)', 'flower(2,20)', 'flower(2,21)', 'flower(2,22)', 'flower(2,23)', 'flower(2,24)', 'flower(2,25)', 'flower(2,26)', 'flower(2,27)', 'flower(2,28)', 'flower(2,29)', 'flower(2,30)', 'flower(2,31)', 'flower(2,32)', 'flower(2,33)', 'flower(2,34)', 'flower(2,35)', 'flower(2,36)', 'flower(2,37)', 'flower(2,38)', 'flower(2,39)', 'flower(2,40)', 'flower(2,41)', 'flower(2,42)', 'flower(2,43)', 'flower(2,44)', 'flower(2,45)', 'flower(2,46)', 'flower(2,47)', 'flower(2,48)', 'flower(2,49)', 'flower(2,50)', 'flower(2,51)', 'flower(2,52)', 'flower(2,53)', 'flower(2,54)', 'flower(2,55)', 'flower(2,56)', 'flower(2,57)', 'flower(2,58)', 'flower(2,59)', 'flower(2,60)', 'flower(2,61)', 'flower(2,62)', 'flower(2,63)', 'flower(2,64)', 'flower(2,65)', 'flower(2,66)', 'flower(2,67)', 'flower(2,68)', 'flower(2,69)', 'flower(2,70)', 'flower(2,71)', 'flower(2,72)', 'flower(2,73)', 'flower(2,74)', 'flower(2,75)', 'flower(2,76)', 'flower(2,77)', 'flower(2,78)', 'flower(2,79)', 'flower(2,80)', 'flower(2,81)', 'flower(2,82)', 'flower(2,83)', 'flower(2,84)', 'flower(2,85)', 'flower(2,86)', 'flower(2,87)', 'flower(2,88)', 'flower(2,89)', 'flower(2,90)', 'flower(2,91)', 'flower(2,92)', 'flower(2,93)', 'flower(2,94)', 'flower(2,95)', 'flower(2,96)', 'flower(2,97)', 'flower(2,98)', 'flower(2,99)', 'flower(2,100)', 'flower(3,1)', 'flower(3,2)', 'flower(3,3)', 'flower(3,4)', 'flower(3,5)', 'flower(3,6)', 'flower(3,7)', 'flower(3,8)', 'flower(3,9)', 'flower(3,10)', 'flower(3,11)', 'flower(3,12)', 'flower(3,13)', 'flower(3,14)', 'flower(3,15)', 'flower(3,16)', 'flower(3,17)', 'flower(3,18)', 'flower(3,19)', 'flower(3,20)', 'flower(3,21)', 'flower(3,22)', 'flower(3,23)', 'flower(3,24)', 'flower(3,25)', 'flower(3,26)', 'flower(3,27)', 'flower(3,28)', 'flower(3,29)', 'flower(3,30)', 'flower(3,31)', 'flower(3,32)', 'flower(3,33)', 'flower(3,34)', 'flower(3,35)', 'flower(3,36)', 'flower(3,37)', 'flower(3,38)', 'flower(3,39)', 'flower(3,40)', 'flower(3,41)', 'flower(3,42)', 'flower(3,43)', 'flower(3,44)', 'flower(3,45)', 'flower(3,46)', 'flower(3,47)', 'flower(3,48)', 'flower(3,49)', 'flower(3,50)', 'flower(3,51)', 'flower(3,52)', 'flower(3,53)', 'flower(3,54)', 'flower(3,55)', 'flower(3,56)', 'flower(3,57)', 'flower(3,58)', 'flower(3,59)', 'flower(3,60)', 'flower(3,61)', 'flower(3,62)', 'flower(3,63)', 'flower(3,64)', 'flower(3,65)', 'flower(3,66)', 'flower(3,67)', 'flower(3,68)', 'flower(3,69)', 'flower(3,70)', 'flower(3,71)', 'flower(3,72)', 'flower(3,73)', 'flower(3,74)', 'flower(3,75)', 'flower(3,76)', 'flower(3,77)', 'flower(3,78)', 'flower(3,79)', 'flower(3,80)', 'flower(3,81)', 'flower(3,82)', 'flower(3,83)', 'flower(3,84)', 'flower(3,85)', 'flower(3,86)', 'flower(3,87)', 'flower(3,88)', 'flower(3,89)', 'flower(3,90)', 'flower(3,91)', 'flower(3,92)', 'flower(3,93)', 'flower(3,94)', 'flower(3,95)', 'flower(3,96)', 'flower(3,97)', 'flower(3,98)', 'flower(3,99)', 'flower(3,100)', 'select(1)', 'select(2)', 'select(3)']]


63
assignment

question: 
Build an ASP program that links each element identified by the predicate "white" to a single label from "moscow","laptop".

answer from file: 
assign(X,"moscow")|assign(X,"laptop"):-white(X).

parsed from model: 
assign(X,"moscow")|assign(X,"laptop"):-white(X).

facts: 
white(1..5).

generated: 
Build an ASP program that links each element identified by the predicate "white" to a single label from "moscow","laptop".
Answer: assign(X,"moscow")|assign(X,"laptop"):-white(X).
assign(X,"moscow"):-white(X).
assign(X,"laptop"):-white(X).
white(X):-assign(X,"moto").
white(X):-assign(X,"dubai").
white(X):-assign(X,"shangai").
white(X):-assign(X,"florence").
white(X):-assign(X,"rome").
white(X):-assign(X,"dubai").
white(X):-assign(X,"shangai").
white(X):-assign(X,"florence").
white(

unique_rules: 
['assign(X,"moscow")|assign(X,"laptop"):-white(X).', 'assign(X,"moscow"):-white(X).', 'assign(X,"laptop"):-white(X).', 'white(X):-assign(X,"moto").', 'white(X):-assign(X,"dubai").', 'white(X):-assign(X,"shangai").', 'white(X):-assign(X,"florence").', 'white(X):-assign(X,"rome").']

jaccard: 1.0

AS desired: [['white(1)', 'white(2)', 'white(3)', 'white(4)', 'white(5)', 'assign(1,"laptop")', 'assign(2,"moscow")', 'assign(3,"moscow")', 'assign(4,"laptop")', 'assign(5,"moscow")']]
\AS obtained: [['white(1)', 'white(2)', 'white(3)', 'white(4)', 'white(5)', 'assign(1,"laptop")', 'assign(2,"moscow")', 'assign(3,"moscow")', 'assign(4,"laptop")', 'assign(5,"moscow")']]


64
constraint

question: 
Create an ASP script that excludes the predicate "butterfly" with value 19 from being mapped to the label "strength".

answer from file: 
:-assign(19,strength).

parsed from model: 
:-assign(19,strength).

facts: 
butterfly(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-butterfly(X).

generated: 
Create an ASP script that excludes the predicate "butterfly" with value 19 from being mapped to the label "strength".
Answer: :-assign(19,strength).
Explanation: The predicate " arrivant" includes fields "ID","height","city","name","price","author","description","city","name","price","author","description","height","city","name","price","author","description","city","name","price","author","description","height","city","name","price","author","description","city","name","price","author","description","height","city","name","price","author","description","city","name","price","author","description","height","city","name","price","author","description","city","name","price","author","description","height","city","name","price","author","description","city","name","

unique_rules: 
[':-assign(19,strength).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)', 'butterfly(6)', 'butterfly(7)', 'butterfly(8)', 'butterfly(9)', 'butterfly(10)', 'butterfly(11)', 'butterfly(12)', 'butterfly(13)', 'butterfly(14)', 'butterfly(15)', 'butterfly(16)', 'butterfly(17)', 'butterfly(18)', 'butterfly(19)', 'butterfly(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)', 'butterfly(6)', 'butterfly(7)', 'butterfly(8)', 'butterfly(9)', 'butterfly(10)', 'butterfly(11)', 'butterfly(12)', 'butterfly(13)', 'butterfly(14)', 'butterfly(15)', 'butterfly(16)', 'butterfly(17)', 'butterfly(18)', 'butterfly(19)', 'butterfly(20)']]


65
combination

question: 
Write an ASP program that determines all possible combinations of elements from sets represented by the predicates "flower" and "hair".

answer from file: 
combination(X,Y):-flower(X),hair(Y).

parsed from model: 
combination(X,Y):-flower(X),hair(Y).

facts: 
flower(1..4).hair(1..5).

generated: 
Write an ASP program that determines all possible combinations of elements from sets represented by the predicates "flower" and "hair".
Answer: combination(X,Y):-flower(X),hair(Y).
combination(X,Y):-flower(X),not hair(Y).
combination(X,Y):-not flower(X),hair(Y).
combination(X,Y):-not flower(X),not hair(Y).

unique_rules: 
['combination(X,Y):-flower(X),hair(Y).', 'combination(X,Y):-flower(X),not hair(Y).', 'combination(X,Y):-not flower(X),hair(Y).', 'combination(X,Y):-not flower(X),not hair(Y).']

jaccard: 1.0

AS desired: [['hair(1)', 'hair(2)', 'hair(3)', 'hair(4)', 'hair(5)', 'flower(1)', 'flower(2)', 'flower(3)', 'flower(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['hair(1)', 'hair(2)', 'hair(3)', 'hair(4)', 'hair(5)', 'flower(1)', 'flower(2)', 'flower(3)', 'flower(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


66
join

question: 
Design an ASP application to solve the problem by defining the predicate "butterfly_darkmagenta" which links each butterfly to the weight of darkmagenta, given "butterfly" has fields "ID","darkmagentaID","quality","lake","owner" and "darkmagenta" has fields "ID","weight".

answer from file: 
butterfly_darkmagenta(X,Z):-butterfly(X,Y,_,_,_),darkmagenta(Y,Z).

parsed from model: 
butterfly_darkmagenta(X,Z):-butterfly(X,Y,_,_,_),darkmagenta(Y,Z).

facts: 
butterfly("ID","darkmagentaID","quality","lake","owner").darkmagenta("ID","weight").

generated: 
Design an ASP application to solve the problem by defining the predicate "butterfly_darkmagenta" which links each butterfly to the weight of darkmagenta, given "butterfly" has fields "ID","darkmagentaID","quality","lake","owner" and "darkmagenta" has fields "ID","weight". Define the predicate "butterfly_darkmagenta" which links each butterfly to the weight of darkmagenta.
Answer: butterfly_darkmagenta(X,Z):-butterfly(X,Y,_,_,_),darkmagenta(Y,Z).
butterfly_darkmagenta(X,Z):- arrivant(X,Y,Z).
 arrivant(X,Y,Z):-bike(X,Y,Z).
bike(X,Y,Z):-height(X,Y,Z).

unique_rules: 
['butterfly_darkmagenta(X,Z):-butterfly(X,Y,_,_,_),darkmagenta(Y,Z).', 'butterfly_darkmagenta(X,Z):- arrivant(X,Y,Z).', 'arrivant(X,Y,Z):-bike(X,Y,Z).', 'bike(X,Y,Z):-height(X,Y,Z).']

jaccard: 1.0

AS desired: [['darkmagenta("ID","weight")', 'butterfly("ID","darkmagentaID","quality","lake","owner")']]
\AS obtained: [['darkmagenta("ID","weight")', 'butterfly("ID","darkmagentaID","quality","lake","owner")']]


67
closure

question: 
Write an ASP application to compute the transitive closure of the "owner" predicate, resulting in the definition of the "loops" predicate.

answer from file: 
loops(X,Y):-owner(X,Y).
loops(X,Y):-owner(X,Z),loops(Z,Y).

parsed from model: 
loops(X,Y):-owner(X,Y).
loops(X,Y):-owner(X,Z),loops(Z,Y).

facts: 
owner(1..3, 1..4).

generated: 
Write an ASP application to compute the transitive closure of the "owner" predicate, resulting in the definition of the "loops" predicate.
Answer: loops(X,Y):-owner(X,Y).
loops(X,Y):-owner(X,Z),loops(Z,Y).
loops(X,Y):-owner(X,Z),Z!=Y.
loops(X,Y):-owner(X,Z),Z==Y.
loops(X,Y):-owner(X,Z),Z<Y.

unique_rules: 
['loops(X,Y):-owner(X,Y).', 'loops(X,Y):-owner(X,Z),loops(Z,Y).', 'loops(X,Y):-owner(X,Z),Z!=Y.', 'loops(X,Y):-owner(X,Z),Z==Y.', 'loops(X,Y):-owner(X,Z),Z<Y.']

jaccard: 1.0

AS desired: [['owner(1,1)', 'owner(1,2)', 'owner(1,3)', 'owner(1,4)', 'owner(2,1)', 'owner(2,2)', 'owner(2,3)', 'owner(2,4)', 'owner(3,1)', 'owner(3,2)', 'owner(3,3)', 'owner(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]
\AS obtained: [['owner(1,1)', 'owner(1,2)', 'owner(1,3)', 'owner(1,4)', 'owner(2,1)', 'owner(2,2)', 'owner(2,3)', 'owner(2,4)', 'owner(3,1)', 'owner(3,2)', 'owner(3,3)', 'owner(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]


68
preference

question: 
Generate an ASP program to disallow the association of the predicate "strength" with value "9" with "white". If associated, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(9,"white").[1@1]

parsed from model: 
:~assign(9,"white").[1@1]

facts: 
strength(1..20).

generated: 
Generate an ASP program to disallow the association of the predicate "strength" with value "9" with "white". If associated, it incurs a cost of "1" at level "1".
Answer: :~assign(9,"white").[1@1]
This program uses the predicate "strength" with value "9" to determine the association of the predicate "white". If the association is found, it incurs a cost of "1" at level "1".

unique_rules: 
[':~assign(9,"white").[1@1]']

jaccard: 1.0

AS desired: [['strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'strength(6)', 'strength(7)', 'strength(8)', 'strength(9)', 'strength(10)', 'strength(11)', 'strength(12)', 'strength(13)', 'strength(14)', 'strength(15)', 'strength(16)', 'strength(17)', 'strength(18)', 'strength(19)', 'strength(20)']]
\AS obtained: [['strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'strength(6)', 'strength(7)', 'strength(8)', 'strength(9)', 'strength(10)', 'strength(11)', 'strength(12)', 'strength(13)', 'strength(14)', 'strength(15)', 'strength(16)', 'strength(17)', 'strength(18)', 'strength(19)', 'strength(20)']]


69
filtering

question: 
Develop an ASP script to capture all values linked to the "toronto" label within the "darkmagenta" predicate.

answer from file: 
select(X):-darkmagenta(X,"toronto").

parsed from model: 
select(X):-darkmagenta(X,"toronto").

facts: 
darkmagenta(1..5, "toronto").

generated: 
Develop an ASP script to capture all values linked to the "toronto" label within the "darkmagenta" predicate.
Answer: select(X):-darkmagenta(X,"toronto").
select(X):-darkmagenta(X,"city").
select(X):-darkmagenta(X,"author").
darkmagenta(X,"toronto").
darkmagenta(X,"city").
darkmagenta(X,"author").

unique_rules: 
['select(X):-darkmagenta(X,"toronto").', 'select(X):-darkmagenta(X,"city").', 'select(X):-darkmagenta(X,"author").']

jaccard: 1.0

AS desired: [['darkmagenta(1,"toronto")', 'darkmagenta(2,"toronto")', 'darkmagenta(3,"toronto")', 'darkmagenta(4,"toronto")', 'darkmagenta(5,"toronto")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['darkmagenta(1,"toronto")', 'darkmagenta(2,"toronto")', 'darkmagenta(3,"toronto")', 'darkmagenta(4,"toronto")', 'darkmagenta(5,"toronto")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


70
negative_filtering

question: 
Create an ASP application to collect values tied to the predicate "cloud" but not linked to the predicate "cloud" and labeled "darkmagenta".

answer from file: 
select(X):-cloud(X),not cloud(X,"darkmagenta").

parsed from model: 
select(X):-cloud(X),not cloud(X,"darkmagenta").

facts: 
cloud(1..3).cloud(1,"singapore").cloud(2,"darkmagenta").cloud(3,"owner").

generated: 
Create an ASP application to collect values tied to the predicate "cloud" but not linked to the predicate "cloud" and labeled "darkmagenta".
Answer: select(X):-cloud(X),not cloud(X,"darkmagenta").
select(X):-cloud(X).

unique_rules: 
['select(X):-cloud(X),not cloud(X,"darkmagenta").', 'select(X):-cloud(X).']

jaccard: 1.0

AS desired: [['cloud(1)', 'cloud(2)', 'cloud(3)', 'cloud(1,"singapore")', 'cloud(2,"darkmagenta")', 'cloud(3,"owner")', 'select(1)', 'select(3)']]
\AS obtained: [['cloud(1)', 'cloud(2)', 'cloud(3)', 'cloud(1,"singapore")', 'cloud(2,"darkmagenta")', 'cloud(3,"owner")', 'select(1)', 'select(3)']]


71
numeric_filtering

question: 
Write an ASP program for the following problem. Select all values associated with predicate "toronto" with a value different than 94.

answer from file: 
select(X):-toronto(X,C),C!=94.

parsed from model: 
select(X):-toronto(X,C),C!=94.

facts: 
toronto(1..3, 1..100).

generated: 
Write an ASP program for the following problem. Select all values associated with predicate "toronto" with a value different than 94.
Answer: select(X):-toronto(X,C),C!=94.
Explanation: The predicate "toronto" includes values associated with the "city" label, and the predicate "city" contains values associated with the "description" label.
The predicate "select" selects all values associated with the "city" label, and the predicate "city" contains values associated with the "description" label.
The predicate "description" contains values associated with the "description" label.
The predicate "select" selects all values associated with the "city" label, but not with the "description" label.
The predicate "city" contains values associated with the "description" label.
So, the predicate "select

unique_rules: 
['select(X):-toronto(X,C),C!=94.']

jaccard: 1.0

AS desired: [['toronto(1,1)', 'toronto(1,2)', 'toronto(1,3)', 'toronto(1,4)', 'toronto(1,5)', 'toronto(1,6)', 'toronto(1,7)', 'toronto(1,8)', 'toronto(1,9)', 'toronto(1,10)', 'toronto(1,11)', 'toronto(1,12)', 'toronto(1,13)', 'toronto(1,14)', 'toronto(1,15)', 'toronto(1,16)', 'toronto(1,17)', 'toronto(1,18)', 'toronto(1,19)', 'toronto(1,20)', 'toronto(1,21)', 'toronto(1,22)', 'toronto(1,23)', 'toronto(1,24)', 'toronto(1,25)', 'toronto(1,26)', 'toronto(1,27)', 'toronto(1,28)', 'toronto(1,29)', 'toronto(1,30)', 'toronto(1,31)', 'toronto(1,32)', 'toronto(1,33)', 'toronto(1,34)', 'toronto(1,35)', 'toronto(1,36)', 'toronto(1,37)', 'toronto(1,38)', 'toronto(1,39)', 'toronto(1,40)', 'toronto(1,41)', 'toronto(1,42)', 'toronto(1,43)', 'toronto(1,44)', 'toronto(1,45)', 'toronto(1,46)', 'toronto(1,47)', 'toronto(1,48)', 'toronto(1,49)', 'toronto(1,50)', 'toronto(1,51)', 'toronto(1,52)', 'toronto(1,53)', 'toronto(1,54)', 'toronto(1,55)', 'toronto(1,56)', 'toronto(1,57)', 'toronto(1,58)', 'toronto(1,59)', 'toronto(1,60)', 'toronto(1,61)', 'toronto(1,62)', 'toronto(1,63)', 'toronto(1,64)', 'toronto(1,65)', 'toronto(1,66)', 'toronto(1,67)', 'toronto(1,68)', 'toronto(1,69)', 'toronto(1,70)', 'toronto(1,71)', 'toronto(1,72)', 'toronto(1,73)', 'toronto(1,74)', 'toronto(1,75)', 'toronto(1,76)', 'toronto(1,77)', 'toronto(1,78)', 'toronto(1,79)', 'toronto(1,80)', 'toronto(1,81)', 'toronto(1,82)', 'toronto(1,83)', 'toronto(1,84)', 'toronto(1,85)', 'toronto(1,86)', 'toronto(1,87)', 'toronto(1,88)', 'toronto(1,89)', 'toronto(1,90)', 'toronto(1,91)', 'toronto(1,92)', 'toronto(1,93)', 'toronto(1,94)', 'toronto(1,95)', 'toronto(1,96)', 'toronto(1,97)', 'toronto(1,98)', 'toronto(1,99)', 'toronto(1,100)', 'toronto(2,1)', 'toronto(2,2)', 'toronto(2,3)', 'toronto(2,4)', 'toronto(2,5)', 'toronto(2,6)', 'toronto(2,7)', 'toronto(2,8)', 'toronto(2,9)', 'toronto(2,10)', 'toronto(2,11)', 'toronto(2,12)', 'toronto(2,13)', 'toronto(2,14)', 'toronto(2,15)', 'toronto(2,16)', 'toronto(2,17)', 'toronto(2,18)', 'toronto(2,19)', 'toronto(2,20)', 'toronto(2,21)', 'toronto(2,22)', 'toronto(2,23)', 'toronto(2,24)', 'toronto(2,25)', 'toronto(2,26)', 'toronto(2,27)', 'toronto(2,28)', 'toronto(2,29)', 'toronto(2,30)', 'toronto(2,31)', 'toronto(2,32)', 'toronto(2,33)', 'toronto(2,34)', 'toronto(2,35)', 'toronto(2,36)', 'toronto(2,37)', 'toronto(2,38)', 'toronto(2,39)', 'toronto(2,40)', 'toronto(2,41)', 'toronto(2,42)', 'toronto(2,43)', 'toronto(2,44)', 'toronto(2,45)', 'toronto(2,46)', 'toronto(2,47)', 'toronto(2,48)', 'toronto(2,49)', 'toronto(2,50)', 'toronto(2,51)', 'toronto(2,52)', 'toronto(2,53)', 'toronto(2,54)', 'toronto(2,55)', 'toronto(2,56)', 'toronto(2,57)', 'toronto(2,58)', 'toronto(2,59)', 'toronto(2,60)', 'toronto(2,61)', 'toronto(2,62)', 'toronto(2,63)', 'toronto(2,64)', 'toronto(2,65)', 'toronto(2,66)', 'toronto(2,67)', 'toronto(2,68)', 'toronto(2,69)', 'toronto(2,70)', 'toronto(2,71)', 'toronto(2,72)', 'toronto(2,73)', 'toronto(2,74)', 'toronto(2,75)', 'toronto(2,76)', 'toronto(2,77)', 'toronto(2,78)', 'toronto(2,79)', 'toronto(2,80)', 'toronto(2,81)', 'toronto(2,82)', 'toronto(2,83)', 'toronto(2,84)', 'toronto(2,85)', 'toronto(2,86)', 'toronto(2,87)', 'toronto(2,88)', 'toronto(2,89)', 'toronto(2,90)', 'toronto(2,91)', 'toronto(2,92)', 'toronto(2,93)', 'toronto(2,94)', 'toronto(2,95)', 'toronto(2,96)', 'toronto(2,97)', 'toronto(2,98)', 'toronto(2,99)', 'toronto(2,100)', 'toronto(3,1)', 'toronto(3,2)', 'toronto(3,3)', 'toronto(3,4)', 'toronto(3,5)', 'toronto(3,6)', 'toronto(3,7)', 'toronto(3,8)', 'toronto(3,9)', 'toronto(3,10)', 'toronto(3,11)', 'toronto(3,12)', 'toronto(3,13)', 'toronto(3,14)', 'toronto(3,15)', 'toronto(3,16)', 'toronto(3,17)', 'toronto(3,18)', 'toronto(3,19)', 'toronto(3,20)', 'toronto(3,21)', 'toronto(3,22)', 'toronto(3,23)', 'toronto(3,24)', 'toronto(3,25)', 'toronto(3,26)', 'toronto(3,27)', 'toronto(3,28)', 'toronto(3,29)', 'toronto(3,30)', 'toronto(3,31)', 'toronto(3,32)', 'toronto(3,33)', 'toronto(3,34)', 'toronto(3,35)', 'toronto(3,36)', 'toronto(3,37)', 'toronto(3,38)', 'toronto(3,39)', 'toronto(3,40)', 'toronto(3,41)', 'toronto(3,42)', 'toronto(3,43)', 'toronto(3,44)', 'toronto(3,45)', 'toronto(3,46)', 'toronto(3,47)', 'toronto(3,48)', 'toronto(3,49)', 'toronto(3,50)', 'toronto(3,51)', 'toronto(3,52)', 'toronto(3,53)', 'toronto(3,54)', 'toronto(3,55)', 'toronto(3,56)', 'toronto(3,57)', 'toronto(3,58)', 'toronto(3,59)', 'toronto(3,60)', 'toronto(3,61)', 'toronto(3,62)', 'toronto(3,63)', 'toronto(3,64)', 'toronto(3,65)', 'toronto(3,66)', 'toronto(3,67)', 'toronto(3,68)', 'toronto(3,69)', 'toronto(3,70)', 'toronto(3,71)', 'toronto(3,72)', 'toronto(3,73)', 'toronto(3,74)', 'toronto(3,75)', 'toronto(3,76)', 'toronto(3,77)', 'toronto(3,78)', 'toronto(3,79)', 'toronto(3,80)', 'toronto(3,81)', 'toronto(3,82)', 'toronto(3,83)', 'toronto(3,84)', 'toronto(3,85)', 'toronto(3,86)', 'toronto(3,87)', 'toronto(3,88)', 'toronto(3,89)', 'toronto(3,90)', 'toronto(3,91)', 'toronto(3,92)', 'toronto(3,93)', 'toronto(3,94)', 'toronto(3,95)', 'toronto(3,96)', 'toronto(3,97)', 'toronto(3,98)', 'toronto(3,99)', 'toronto(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['toronto(1,1)', 'toronto(1,2)', 'toronto(1,3)', 'toronto(1,4)', 'toronto(1,5)', 'toronto(1,6)', 'toronto(1,7)', 'toronto(1,8)', 'toronto(1,9)', 'toronto(1,10)', 'toronto(1,11)', 'toronto(1,12)', 'toronto(1,13)', 'toronto(1,14)', 'toronto(1,15)', 'toronto(1,16)', 'toronto(1,17)', 'toronto(1,18)', 'toronto(1,19)', 'toronto(1,20)', 'toronto(1,21)', 'toronto(1,22)', 'toronto(1,23)', 'toronto(1,24)', 'toronto(1,25)', 'toronto(1,26)', 'toronto(1,27)', 'toronto(1,28)', 'toronto(1,29)', 'toronto(1,30)', 'toronto(1,31)', 'toronto(1,32)', 'toronto(1,33)', 'toronto(1,34)', 'toronto(1,35)', 'toronto(1,36)', 'toronto(1,37)', 'toronto(1,38)', 'toronto(1,39)', 'toronto(1,40)', 'toronto(1,41)', 'toronto(1,42)', 'toronto(1,43)', 'toronto(1,44)', 'toronto(1,45)', 'toronto(1,46)', 'toronto(1,47)', 'toronto(1,48)', 'toronto(1,49)', 'toronto(1,50)', 'toronto(1,51)', 'toronto(1,52)', 'toronto(1,53)', 'toronto(1,54)', 'toronto(1,55)', 'toronto(1,56)', 'toronto(1,57)', 'toronto(1,58)', 'toronto(1,59)', 'toronto(1,60)', 'toronto(1,61)', 'toronto(1,62)', 'toronto(1,63)', 'toronto(1,64)', 'toronto(1,65)', 'toronto(1,66)', 'toronto(1,67)', 'toronto(1,68)', 'toronto(1,69)', 'toronto(1,70)', 'toronto(1,71)', 'toronto(1,72)', 'toronto(1,73)', 'toronto(1,74)', 'toronto(1,75)', 'toronto(1,76)', 'toronto(1,77)', 'toronto(1,78)', 'toronto(1,79)', 'toronto(1,80)', 'toronto(1,81)', 'toronto(1,82)', 'toronto(1,83)', 'toronto(1,84)', 'toronto(1,85)', 'toronto(1,86)', 'toronto(1,87)', 'toronto(1,88)', 'toronto(1,89)', 'toronto(1,90)', 'toronto(1,91)', 'toronto(1,92)', 'toronto(1,93)', 'toronto(1,94)', 'toronto(1,95)', 'toronto(1,96)', 'toronto(1,97)', 'toronto(1,98)', 'toronto(1,99)', 'toronto(1,100)', 'toronto(2,1)', 'toronto(2,2)', 'toronto(2,3)', 'toronto(2,4)', 'toronto(2,5)', 'toronto(2,6)', 'toronto(2,7)', 'toronto(2,8)', 'toronto(2,9)', 'toronto(2,10)', 'toronto(2,11)', 'toronto(2,12)', 'toronto(2,13)', 'toronto(2,14)', 'toronto(2,15)', 'toronto(2,16)', 'toronto(2,17)', 'toronto(2,18)', 'toronto(2,19)', 'toronto(2,20)', 'toronto(2,21)', 'toronto(2,22)', 'toronto(2,23)', 'toronto(2,24)', 'toronto(2,25)', 'toronto(2,26)', 'toronto(2,27)', 'toronto(2,28)', 'toronto(2,29)', 'toronto(2,30)', 'toronto(2,31)', 'toronto(2,32)', 'toronto(2,33)', 'toronto(2,34)', 'toronto(2,35)', 'toronto(2,36)', 'toronto(2,37)', 'toronto(2,38)', 'toronto(2,39)', 'toronto(2,40)', 'toronto(2,41)', 'toronto(2,42)', 'toronto(2,43)', 'toronto(2,44)', 'toronto(2,45)', 'toronto(2,46)', 'toronto(2,47)', 'toronto(2,48)', 'toronto(2,49)', 'toronto(2,50)', 'toronto(2,51)', 'toronto(2,52)', 'toronto(2,53)', 'toronto(2,54)', 'toronto(2,55)', 'toronto(2,56)', 'toronto(2,57)', 'toronto(2,58)', 'toronto(2,59)', 'toronto(2,60)', 'toronto(2,61)', 'toronto(2,62)', 'toronto(2,63)', 'toronto(2,64)', 'toronto(2,65)', 'toronto(2,66)', 'toronto(2,67)', 'toronto(2,68)', 'toronto(2,69)', 'toronto(2,70)', 'toronto(2,71)', 'toronto(2,72)', 'toronto(2,73)', 'toronto(2,74)', 'toronto(2,75)', 'toronto(2,76)', 'toronto(2,77)', 'toronto(2,78)', 'toronto(2,79)', 'toronto(2,80)', 'toronto(2,81)', 'toronto(2,82)', 'toronto(2,83)', 'toronto(2,84)', 'toronto(2,85)', 'toronto(2,86)', 'toronto(2,87)', 'toronto(2,88)', 'toronto(2,89)', 'toronto(2,90)', 'toronto(2,91)', 'toronto(2,92)', 'toronto(2,93)', 'toronto(2,94)', 'toronto(2,95)', 'toronto(2,96)', 'toronto(2,97)', 'toronto(2,98)', 'toronto(2,99)', 'toronto(2,100)', 'toronto(3,1)', 'toronto(3,2)', 'toronto(3,3)', 'toronto(3,4)', 'toronto(3,5)', 'toronto(3,6)', 'toronto(3,7)', 'toronto(3,8)', 'toronto(3,9)', 'toronto(3,10)', 'toronto(3,11)', 'toronto(3,12)', 'toronto(3,13)', 'toronto(3,14)', 'toronto(3,15)', 'toronto(3,16)', 'toronto(3,17)', 'toronto(3,18)', 'toronto(3,19)', 'toronto(3,20)', 'toronto(3,21)', 'toronto(3,22)', 'toronto(3,23)', 'toronto(3,24)', 'toronto(3,25)', 'toronto(3,26)', 'toronto(3,27)', 'toronto(3,28)', 'toronto(3,29)', 'toronto(3,30)', 'toronto(3,31)', 'toronto(3,32)', 'toronto(3,33)', 'toronto(3,34)', 'toronto(3,35)', 'toronto(3,36)', 'toronto(3,37)', 'toronto(3,38)', 'toronto(3,39)', 'toronto(3,40)', 'toronto(3,41)', 'toronto(3,42)', 'toronto(3,43)', 'toronto(3,44)', 'toronto(3,45)', 'toronto(3,46)', 'toronto(3,47)', 'toronto(3,48)', 'toronto(3,49)', 'toronto(3,50)', 'toronto(3,51)', 'toronto(3,52)', 'toronto(3,53)', 'toronto(3,54)', 'toronto(3,55)', 'toronto(3,56)', 'toronto(3,57)', 'toronto(3,58)', 'toronto(3,59)', 'toronto(3,60)', 'toronto(3,61)', 'toronto(3,62)', 'toronto(3,63)', 'toronto(3,64)', 'toronto(3,65)', 'toronto(3,66)', 'toronto(3,67)', 'toronto(3,68)', 'toronto(3,69)', 'toronto(3,70)', 'toronto(3,71)', 'toronto(3,72)', 'toronto(3,73)', 'toronto(3,74)', 'toronto(3,75)', 'toronto(3,76)', 'toronto(3,77)', 'toronto(3,78)', 'toronto(3,79)', 'toronto(3,80)', 'toronto(3,81)', 'toronto(3,82)', 'toronto(3,83)', 'toronto(3,84)', 'toronto(3,85)', 'toronto(3,86)', 'toronto(3,87)', 'toronto(3,88)', 'toronto(3,89)', 'toronto(3,90)', 'toronto(3,91)', 'toronto(3,92)', 'toronto(3,93)', 'toronto(3,94)', 'toronto(3,95)', 'toronto(3,96)', 'toronto(3,97)', 'toronto(3,98)', 'toronto(3,99)', 'toronto(3,100)', 'select(1)', 'select(2)', 'select(3)']]


72
assignment

question: 
Develop an ASP solution to map one specific label from "cloud","moscow","strength" to each element defined by the predicate "storm".

answer from file: 
assign(X,"cloud")|assign(X,"moscow")|assign(X,"strength"):-storm(X).

parsed from model: 
assign(X,"cloud")|assign(X,"moscow")|assign(X,"strength"):-storm(X).

facts: 
storm(1..5).

generated: 
Develop an ASP solution to map one specific label from "cloud","moscow","strength" to each element defined by the predicate "storm".
Answer: assign(X,"cloud")|assign(X,"moscow")|assign(X,"strength"):-storm(X).
assign(X,"cloud"):-height(X,"city").
assign(X,"moscow"):-height(X,"city").
assign(X,"strength"):-height(X,"city").
where "height" and "city" are predicates defined in the context of the "storm" predicate.

unique_rules: 
['assign(X,"cloud")|assign(X,"moscow")|assign(X,"strength"):-storm(X).', 'assign(X,"cloud"):-height(X,"city").', 'assign(X,"moscow"):-height(X,"city").', 'assign(X,"strength"):-height(X,"city").']

jaccard: 1.0

AS desired: [['storm(1)', 'storm(2)', 'storm(3)', 'storm(4)', 'storm(5)', 'assign(1,"strength")', 'assign(2,"strength")', 'assign(3,"strength")', 'assign(4,"strength")', 'assign(5,"strength")']]
\AS obtained: [['storm(1)', 'storm(2)', 'storm(3)', 'storm(4)', 'storm(5)', 'assign(1,"strength")', 'assign(2,"strength")', 'assign(3,"strength")', 'assign(4,"strength")', 'assign(5,"strength")']]


73
constraint

question: 
Create an ASP script that excludes the predicate "lightblue" with value 12 from being mapped to the label "delhi".

answer from file: 
:-assign(12,delhi).

parsed from model: 
:-assign(12,delhi).

facts: 
lightblue(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-lightblue(X).

generated: 
Create an ASP script that excludes the predicate "lightblue" with value 12 from being mapped to the label "delhi".
Answer: :-assign(12,delhi).
Explanation: The predicate "lightblue" includes the value 12, and the label "delhi" is assigned to it.
The predicate "delhi" includes the value 12, but the label "delhi" is not assigned to it.

unique_rules: 
[':-assign(12,delhi).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'lightblue(4)', 'lightblue(5)', 'lightblue(6)', 'lightblue(7)', 'lightblue(8)', 'lightblue(9)', 'lightblue(10)', 'lightblue(11)', 'lightblue(12)', 'lightblue(13)', 'lightblue(14)', 'lightblue(15)', 'lightblue(16)', 'lightblue(17)', 'lightblue(18)', 'lightblue(19)', 'lightblue(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'lightblue(4)', 'lightblue(5)', 'lightblue(6)', 'lightblue(7)', 'lightblue(8)', 'lightblue(9)', 'lightblue(10)', 'lightblue(11)', 'lightblue(12)', 'lightblue(13)', 'lightblue(14)', 'lightblue(15)', 'lightblue(16)', 'lightblue(17)', 'lightblue(18)', 'lightblue(19)', 'lightblue(20)']]


74
combination

question: 
Develop an ASP code snippet to produce all valid combinations of elements from the "black" and "singapore" sets.

answer from file: 
combination(X,Y):-black(X),singapore(Y).

parsed from model: 
combination(X,Y):-black(X), ángapore(Y).

facts: 
black(1..4).singapore(1..5).

generated: 
Develop an ASP code snippet to produce all valid combinations of elements from the "black" and "singapore" sets.
Answer: combination(X,Y):-black(X), ángapore(Y).
combination(X,Y):-black(X),not singapore(Y).
combination(X,Y):- ángapore(X),not black(Y).
combination(X,Y):-black(X), ángapore(Y).

unique_rules: 
['combination(X,Y):-black(X), ángapore(Y).', 'combination(X,Y):-black(X),not singapore(Y).', 'combination(X,Y):- ángapore(X),not black(Y).']

jaccard: 0.0

AS desired: [['singapore(1)', 'singapore(2)', 'singapore(3)', 'singapore(4)', 'singapore(5)', 'black(1)', 'black(2)', 'black(3)', 'black(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: ['error']


75
join

question: 
Generate an ASP program to create the predicate "cairo_black" that associates each cairo with the hair of black, with the fields "ID","quality","lake","blackID" of "cairo" and the fields "ID","hair","quality" of "black".

answer from file: 
cairo_black(X,Z):-cairo(X,_,_,Y),black(Y,Z,_).

parsed from model: 
cairo_black(X,Z):-cairo(X,_,_,Y),black(Y,Z,_).

facts: 
cairo("ID","quality","lake","blackID").black("ID","hair","quality").

generated: 
Generate an ASP program to create the predicate "cairo_black" that associates each cairo with the hair of black, with the fields "ID","quality","lake","blackID" of "cairo" and the fields "ID","hair","quality" of "black".
Answer: cairo_black(X,Z):-cairo(X,_,_,Y),black(Y,Z,_).
cairo(X,_,_,Y):-black(Y,_,_),cairo(X,_,Z).
black(X,_,Z):-cairo(X,_,Z,_).

unique_rules: 
['cairo_black(X,Z):-cairo(X,_,_,Y),black(Y,Z,_).', 'cairo(X,_,_,Y):-black(Y,_,_),cairo(X,_,Z).', 'black(X,_,Z):-cairo(X,_,Z,_).']

jaccard: 1.0

AS desired: [['cairo("ID","quality","lake","blackID")', 'black("ID","hair","quality")']]
\AS obtained: [['cairo("ID","quality","lake","blackID")', 'black("ID","hair","quality")']]


76
closure

question: 
Develop an ASP script that derives the "family" predicate through the transitive closure of the "quality" predicate.

answer from file: 
family(X,Y):-quality(X,Y).
family(X,Y):-quality(X,Z),family(Z,Y).

parsed from model: 
family(X,Y):-quality(X,Y).
family(X,Y):-quality(X,Z),family(Z,Y).

facts: 
quality(1..3, 1..4).

generated: 
Develop an ASP script that derives the "family" predicate through the transitive closure of the "quality" predicate.
Answer: family(X,Y):-quality(X,Y).
family(X,Y):-quality(X,Z),family(Z,Y).
family(X,Y):-quality(X,Z),Z!=Y.
family(X,Y):-quality(X,Z),Z==Y.
The "family" predicate is derived from the transitive closure of the "quality" predicate.
The transitive closure of the "quality" predicate is defined as the "family" predicate.
The "family" predicate is a transitive closure of the "quality" predicate.

unique_rules: 
['family(X,Y):-quality(X,Y).', 'family(X,Y):-quality(X,Z),family(Z,Y).', 'family(X,Y):-quality(X,Z),Z!=Y.', 'family(X,Y):-quality(X,Z),Z==Y.']

jaccard: 1.0

AS desired: [['quality(1,1)', 'quality(1,2)', 'quality(1,3)', 'quality(1,4)', 'quality(2,1)', 'quality(2,2)', 'quality(2,3)', 'quality(2,4)', 'quality(3,1)', 'quality(3,2)', 'quality(3,3)', 'quality(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]
\AS obtained: [['quality(1,1)', 'quality(1,2)', 'quality(1,3)', 'quality(1,4)', 'quality(2,1)', 'quality(2,2)', 'quality(2,3)', 'quality(2,4)', 'quality(3,1)', 'quality(3,2)', 'quality(3,3)', 'quality(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]


77
preference

question: 
Design an ASP solution to prevent the predicate "weight" with value "2" from being linked to "weight". If this occurs, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(2,"weight").[1@1]

parsed from model: 
:~assign(2,"weight").[1@1]

facts: 
weight(1..20).

generated: 
Design an ASP solution to prevent the predicate "weight" with value "2" from being linked to "weight". If this occurs, it incurs a cost of "1" at level "1".
Answer: :~assign(2,"weight").[1@1]
Explanation: The predicate "weight" has fields "ID","city","author","height","name","price","author","city","description","name","price","height","author","city","description","height","price","name","city","author","description","height","price","name","city","description","height","price","name","city","author","description","height","price","name","city","description","height","price","name","city","author","description","height","price","name","city","description","height","price","name","city","author","description","height","price","name","city","description","height","price","name

unique_rules: 
[':~assign(2,"weight").[1@1]']

jaccard: 1.0

AS desired: [['weight(1)', 'weight(2)', 'weight(3)', 'weight(4)', 'weight(5)', 'weight(6)', 'weight(7)', 'weight(8)', 'weight(9)', 'weight(10)', 'weight(11)', 'weight(12)', 'weight(13)', 'weight(14)', 'weight(15)', 'weight(16)', 'weight(17)', 'weight(18)', 'weight(19)', 'weight(20)']]
\AS obtained: [['weight(1)', 'weight(2)', 'weight(3)', 'weight(4)', 'weight(5)', 'weight(6)', 'weight(7)', 'weight(8)', 'weight(9)', 'weight(10)', 'weight(11)', 'weight(12)', 'weight(13)', 'weight(14)', 'weight(15)', 'weight(16)', 'weight(17)', 'weight(18)', 'weight(19)', 'weight(20)']]


78
filtering

question: 
Write an ASP script to collect values associated with the "cairo" label from the "delhi" predicate.

answer from file: 
select(X):-delhi(X,"cairo").

parsed from model: 
select(X):-delhi(X,"city").

facts: 
delhi(1..5, "cairo").

generated: 
Write an ASP script to collect values associated with the "cairo" label from the "delhi" predicate.
Answer: select(X):-delhi(X,"city").
select(X):-delhi(X,"description").
select(X):-delhi(X,"author").
select(X):-delhi(X,"city","description").
select(X):-delhi(X,"city","author").
select(X):-delhi(X,"description","author").

unique_rules: 
['select(X):-delhi(X,"city").', 'select(X):-delhi(X,"description").', 'select(X):-delhi(X,"author").', 'select(X):-delhi(X,"city","description").', 'select(X):-delhi(X,"city","author").', 'select(X):-delhi(X,"description","author").']

jaccard: 0.0

AS desired: [['delhi(1,"cairo")', 'delhi(2,"cairo")', 'delhi(3,"cairo")', 'delhi(4,"cairo")', 'delhi(5,"cairo")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['delhi(1,"cairo")', 'delhi(2,"cairo")', 'delhi(3,"cairo")', 'delhi(4,"cairo")', 'delhi(5,"cairo")']]


79
negative_filtering

question: 
Draft an ASP solution to identify values associated with the predicate "barcelona" but not tied to the predicate "chicago" and labeled "cairo".

answer from file: 
select(X):-barcelona(X),not chicago(X,"cairo").

parsed from model: 
select(X):-barcelona(X),not chicago(X,"cairo").

facts: 
barcelona(1..3).chicago(1,"quality").chicago(2,"mumbai").chicago(3,"hair").

generated: 
Draft an ASP solution to identify values associated with the predicate "barcelona" but not tied to the predicate "chicago" and labeled "cairo".
Answer: select(X):-barcelona(X),not chicago(X,"cairo").
Explanation: The predicate "barcelona" includes values associated with the predicate "city","height","author","rome","description","moto","city","name","author","description","height","city","name","description","rome","author","city","name","description","height","city","name","description","rome","author","city","name","description","height","city","name","description","rome","author","city","name","description","height","city","name","description","rome","author","city","name","description","height","city","name","description","rome","author","city","name","description","height","city","name","description

unique_rules: 
['select(X):-barcelona(X),not chicago(X,"cairo").']

jaccard: 1.0

AS desired: [['barcelona(1)', 'barcelona(2)', 'barcelona(3)', 'chicago(1,"quality")', 'chicago(2,"mumbai")', 'chicago(3,"hair")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['barcelona(1)', 'barcelona(2)', 'barcelona(3)', 'chicago(1,"quality")', 'chicago(2,"mumbai")', 'chicago(3,"hair")', 'select(1)', 'select(2)', 'select(3)']]


80
numeric_filtering

question: 
Craft an ASP code to retrieve values connected to the predicate "mumbai" with a value different than 35.

answer from file: 
select(X):-mumbai(X,C),C!=35.

parsed from model: 
select(X):-mumbai(X,C),C!=35.

facts: 
mumbai(1..3, 1..100).

generated: 
Craft an ASP code to retrieve values connected to the predicate "mumbai" with a value different than 35.
Answer: select(X):-mumbai(X,C),C!=35.
mumbai(X,C):-mumbai(X,C),C==35.

unique_rules: 
['select(X):-mumbai(X,C),C!=35.', 'mumbai(X,C):-mumbai(X,C),C==35.']

jaccard: 1.0

AS desired: [['mumbai(1,1)', 'mumbai(1,2)', 'mumbai(1,3)', 'mumbai(1,4)', 'mumbai(1,5)', 'mumbai(1,6)', 'mumbai(1,7)', 'mumbai(1,8)', 'mumbai(1,9)', 'mumbai(1,10)', 'mumbai(1,11)', 'mumbai(1,12)', 'mumbai(1,13)', 'mumbai(1,14)', 'mumbai(1,15)', 'mumbai(1,16)', 'mumbai(1,17)', 'mumbai(1,18)', 'mumbai(1,19)', 'mumbai(1,20)', 'mumbai(1,21)', 'mumbai(1,22)', 'mumbai(1,23)', 'mumbai(1,24)', 'mumbai(1,25)', 'mumbai(1,26)', 'mumbai(1,27)', 'mumbai(1,28)', 'mumbai(1,29)', 'mumbai(1,30)', 'mumbai(1,31)', 'mumbai(1,32)', 'mumbai(1,33)', 'mumbai(1,34)', 'mumbai(1,35)', 'mumbai(1,36)', 'mumbai(1,37)', 'mumbai(1,38)', 'mumbai(1,39)', 'mumbai(1,40)', 'mumbai(1,41)', 'mumbai(1,42)', 'mumbai(1,43)', 'mumbai(1,44)', 'mumbai(1,45)', 'mumbai(1,46)', 'mumbai(1,47)', 'mumbai(1,48)', 'mumbai(1,49)', 'mumbai(1,50)', 'mumbai(1,51)', 'mumbai(1,52)', 'mumbai(1,53)', 'mumbai(1,54)', 'mumbai(1,55)', 'mumbai(1,56)', 'mumbai(1,57)', 'mumbai(1,58)', 'mumbai(1,59)', 'mumbai(1,60)', 'mumbai(1,61)', 'mumbai(1,62)', 'mumbai(1,63)', 'mumbai(1,64)', 'mumbai(1,65)', 'mumbai(1,66)', 'mumbai(1,67)', 'mumbai(1,68)', 'mumbai(1,69)', 'mumbai(1,70)', 'mumbai(1,71)', 'mumbai(1,72)', 'mumbai(1,73)', 'mumbai(1,74)', 'mumbai(1,75)', 'mumbai(1,76)', 'mumbai(1,77)', 'mumbai(1,78)', 'mumbai(1,79)', 'mumbai(1,80)', 'mumbai(1,81)', 'mumbai(1,82)', 'mumbai(1,83)', 'mumbai(1,84)', 'mumbai(1,85)', 'mumbai(1,86)', 'mumbai(1,87)', 'mumbai(1,88)', 'mumbai(1,89)', 'mumbai(1,90)', 'mumbai(1,91)', 'mumbai(1,92)', 'mumbai(1,93)', 'mumbai(1,94)', 'mumbai(1,95)', 'mumbai(1,96)', 'mumbai(1,97)', 'mumbai(1,98)', 'mumbai(1,99)', 'mumbai(1,100)', 'mumbai(2,1)', 'mumbai(2,2)', 'mumbai(2,3)', 'mumbai(2,4)', 'mumbai(2,5)', 'mumbai(2,6)', 'mumbai(2,7)', 'mumbai(2,8)', 'mumbai(2,9)', 'mumbai(2,10)', 'mumbai(2,11)', 'mumbai(2,12)', 'mumbai(2,13)', 'mumbai(2,14)', 'mumbai(2,15)', 'mumbai(2,16)', 'mumbai(2,17)', 'mumbai(2,18)', 'mumbai(2,19)', 'mumbai(2,20)', 'mumbai(2,21)', 'mumbai(2,22)', 'mumbai(2,23)', 'mumbai(2,24)', 'mumbai(2,25)', 'mumbai(2,26)', 'mumbai(2,27)', 'mumbai(2,28)', 'mumbai(2,29)', 'mumbai(2,30)', 'mumbai(2,31)', 'mumbai(2,32)', 'mumbai(2,33)', 'mumbai(2,34)', 'mumbai(2,35)', 'mumbai(2,36)', 'mumbai(2,37)', 'mumbai(2,38)', 'mumbai(2,39)', 'mumbai(2,40)', 'mumbai(2,41)', 'mumbai(2,42)', 'mumbai(2,43)', 'mumbai(2,44)', 'mumbai(2,45)', 'mumbai(2,46)', 'mumbai(2,47)', 'mumbai(2,48)', 'mumbai(2,49)', 'mumbai(2,50)', 'mumbai(2,51)', 'mumbai(2,52)', 'mumbai(2,53)', 'mumbai(2,54)', 'mumbai(2,55)', 'mumbai(2,56)', 'mumbai(2,57)', 'mumbai(2,58)', 'mumbai(2,59)', 'mumbai(2,60)', 'mumbai(2,61)', 'mumbai(2,62)', 'mumbai(2,63)', 'mumbai(2,64)', 'mumbai(2,65)', 'mumbai(2,66)', 'mumbai(2,67)', 'mumbai(2,68)', 'mumbai(2,69)', 'mumbai(2,70)', 'mumbai(2,71)', 'mumbai(2,72)', 'mumbai(2,73)', 'mumbai(2,74)', 'mumbai(2,75)', 'mumbai(2,76)', 'mumbai(2,77)', 'mumbai(2,78)', 'mumbai(2,79)', 'mumbai(2,80)', 'mumbai(2,81)', 'mumbai(2,82)', 'mumbai(2,83)', 'mumbai(2,84)', 'mumbai(2,85)', 'mumbai(2,86)', 'mumbai(2,87)', 'mumbai(2,88)', 'mumbai(2,89)', 'mumbai(2,90)', 'mumbai(2,91)', 'mumbai(2,92)', 'mumbai(2,93)', 'mumbai(2,94)', 'mumbai(2,95)', 'mumbai(2,96)', 'mumbai(2,97)', 'mumbai(2,98)', 'mumbai(2,99)', 'mumbai(2,100)', 'mumbai(3,1)', 'mumbai(3,2)', 'mumbai(3,3)', 'mumbai(3,4)', 'mumbai(3,5)', 'mumbai(3,6)', 'mumbai(3,7)', 'mumbai(3,8)', 'mumbai(3,9)', 'mumbai(3,10)', 'mumbai(3,11)', 'mumbai(3,12)', 'mumbai(3,13)', 'mumbai(3,14)', 'mumbai(3,15)', 'mumbai(3,16)', 'mumbai(3,17)', 'mumbai(3,18)', 'mumbai(3,19)', 'mumbai(3,20)', 'mumbai(3,21)', 'mumbai(3,22)', 'mumbai(3,23)', 'mumbai(3,24)', 'mumbai(3,25)', 'mumbai(3,26)', 'mumbai(3,27)', 'mumbai(3,28)', 'mumbai(3,29)', 'mumbai(3,30)', 'mumbai(3,31)', 'mumbai(3,32)', 'mumbai(3,33)', 'mumbai(3,34)', 'mumbai(3,35)', 'mumbai(3,36)', 'mumbai(3,37)', 'mumbai(3,38)', 'mumbai(3,39)', 'mumbai(3,40)', 'mumbai(3,41)', 'mumbai(3,42)', 'mumbai(3,43)', 'mumbai(3,44)', 'mumbai(3,45)', 'mumbai(3,46)', 'mumbai(3,47)', 'mumbai(3,48)', 'mumbai(3,49)', 'mumbai(3,50)', 'mumbai(3,51)', 'mumbai(3,52)', 'mumbai(3,53)', 'mumbai(3,54)', 'mumbai(3,55)', 'mumbai(3,56)', 'mumbai(3,57)', 'mumbai(3,58)', 'mumbai(3,59)', 'mumbai(3,60)', 'mumbai(3,61)', 'mumbai(3,62)', 'mumbai(3,63)', 'mumbai(3,64)', 'mumbai(3,65)', 'mumbai(3,66)', 'mumbai(3,67)', 'mumbai(3,68)', 'mumbai(3,69)', 'mumbai(3,70)', 'mumbai(3,71)', 'mumbai(3,72)', 'mumbai(3,73)', 'mumbai(3,74)', 'mumbai(3,75)', 'mumbai(3,76)', 'mumbai(3,77)', 'mumbai(3,78)', 'mumbai(3,79)', 'mumbai(3,80)', 'mumbai(3,81)', 'mumbai(3,82)', 'mumbai(3,83)', 'mumbai(3,84)', 'mumbai(3,85)', 'mumbai(3,86)', 'mumbai(3,87)', 'mumbai(3,88)', 'mumbai(3,89)', 'mumbai(3,90)', 'mumbai(3,91)', 'mumbai(3,92)', 'mumbai(3,93)', 'mumbai(3,94)', 'mumbai(3,95)', 'mumbai(3,96)', 'mumbai(3,97)', 'mumbai(3,98)', 'mumbai(3,99)', 'mumbai(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['mumbai(1,1)', 'mumbai(1,2)', 'mumbai(1,3)', 'mumbai(1,4)', 'mumbai(1,5)', 'mumbai(1,6)', 'mumbai(1,7)', 'mumbai(1,8)', 'mumbai(1,9)', 'mumbai(1,10)', 'mumbai(1,11)', 'mumbai(1,12)', 'mumbai(1,13)', 'mumbai(1,14)', 'mumbai(1,15)', 'mumbai(1,16)', 'mumbai(1,17)', 'mumbai(1,18)', 'mumbai(1,19)', 'mumbai(1,20)', 'mumbai(1,21)', 'mumbai(1,22)', 'mumbai(1,23)', 'mumbai(1,24)', 'mumbai(1,25)', 'mumbai(1,26)', 'mumbai(1,27)', 'mumbai(1,28)', 'mumbai(1,29)', 'mumbai(1,30)', 'mumbai(1,31)', 'mumbai(1,32)', 'mumbai(1,33)', 'mumbai(1,34)', 'mumbai(1,35)', 'mumbai(1,36)', 'mumbai(1,37)', 'mumbai(1,38)', 'mumbai(1,39)', 'mumbai(1,40)', 'mumbai(1,41)', 'mumbai(1,42)', 'mumbai(1,43)', 'mumbai(1,44)', 'mumbai(1,45)', 'mumbai(1,46)', 'mumbai(1,47)', 'mumbai(1,48)', 'mumbai(1,49)', 'mumbai(1,50)', 'mumbai(1,51)', 'mumbai(1,52)', 'mumbai(1,53)', 'mumbai(1,54)', 'mumbai(1,55)', 'mumbai(1,56)', 'mumbai(1,57)', 'mumbai(1,58)', 'mumbai(1,59)', 'mumbai(1,60)', 'mumbai(1,61)', 'mumbai(1,62)', 'mumbai(1,63)', 'mumbai(1,64)', 'mumbai(1,65)', 'mumbai(1,66)', 'mumbai(1,67)', 'mumbai(1,68)', 'mumbai(1,69)', 'mumbai(1,70)', 'mumbai(1,71)', 'mumbai(1,72)', 'mumbai(1,73)', 'mumbai(1,74)', 'mumbai(1,75)', 'mumbai(1,76)', 'mumbai(1,77)', 'mumbai(1,78)', 'mumbai(1,79)', 'mumbai(1,80)', 'mumbai(1,81)', 'mumbai(1,82)', 'mumbai(1,83)', 'mumbai(1,84)', 'mumbai(1,85)', 'mumbai(1,86)', 'mumbai(1,87)', 'mumbai(1,88)', 'mumbai(1,89)', 'mumbai(1,90)', 'mumbai(1,91)', 'mumbai(1,92)', 'mumbai(1,93)', 'mumbai(1,94)', 'mumbai(1,95)', 'mumbai(1,96)', 'mumbai(1,97)', 'mumbai(1,98)', 'mumbai(1,99)', 'mumbai(1,100)', 'mumbai(2,1)', 'mumbai(2,2)', 'mumbai(2,3)', 'mumbai(2,4)', 'mumbai(2,5)', 'mumbai(2,6)', 'mumbai(2,7)', 'mumbai(2,8)', 'mumbai(2,9)', 'mumbai(2,10)', 'mumbai(2,11)', 'mumbai(2,12)', 'mumbai(2,13)', 'mumbai(2,14)', 'mumbai(2,15)', 'mumbai(2,16)', 'mumbai(2,17)', 'mumbai(2,18)', 'mumbai(2,19)', 'mumbai(2,20)', 'mumbai(2,21)', 'mumbai(2,22)', 'mumbai(2,23)', 'mumbai(2,24)', 'mumbai(2,25)', 'mumbai(2,26)', 'mumbai(2,27)', 'mumbai(2,28)', 'mumbai(2,29)', 'mumbai(2,30)', 'mumbai(2,31)', 'mumbai(2,32)', 'mumbai(2,33)', 'mumbai(2,34)', 'mumbai(2,35)', 'mumbai(2,36)', 'mumbai(2,37)', 'mumbai(2,38)', 'mumbai(2,39)', 'mumbai(2,40)', 'mumbai(2,41)', 'mumbai(2,42)', 'mumbai(2,43)', 'mumbai(2,44)', 'mumbai(2,45)', 'mumbai(2,46)', 'mumbai(2,47)', 'mumbai(2,48)', 'mumbai(2,49)', 'mumbai(2,50)', 'mumbai(2,51)', 'mumbai(2,52)', 'mumbai(2,53)', 'mumbai(2,54)', 'mumbai(2,55)', 'mumbai(2,56)', 'mumbai(2,57)', 'mumbai(2,58)', 'mumbai(2,59)', 'mumbai(2,60)', 'mumbai(2,61)', 'mumbai(2,62)', 'mumbai(2,63)', 'mumbai(2,64)', 'mumbai(2,65)', 'mumbai(2,66)', 'mumbai(2,67)', 'mumbai(2,68)', 'mumbai(2,69)', 'mumbai(2,70)', 'mumbai(2,71)', 'mumbai(2,72)', 'mumbai(2,73)', 'mumbai(2,74)', 'mumbai(2,75)', 'mumbai(2,76)', 'mumbai(2,77)', 'mumbai(2,78)', 'mumbai(2,79)', 'mumbai(2,80)', 'mumbai(2,81)', 'mumbai(2,82)', 'mumbai(2,83)', 'mumbai(2,84)', 'mumbai(2,85)', 'mumbai(2,86)', 'mumbai(2,87)', 'mumbai(2,88)', 'mumbai(2,89)', 'mumbai(2,90)', 'mumbai(2,91)', 'mumbai(2,92)', 'mumbai(2,93)', 'mumbai(2,94)', 'mumbai(2,95)', 'mumbai(2,96)', 'mumbai(2,97)', 'mumbai(2,98)', 'mumbai(2,99)', 'mumbai(2,100)', 'mumbai(3,1)', 'mumbai(3,2)', 'mumbai(3,3)', 'mumbai(3,4)', 'mumbai(3,5)', 'mumbai(3,6)', 'mumbai(3,7)', 'mumbai(3,8)', 'mumbai(3,9)', 'mumbai(3,10)', 'mumbai(3,11)', 'mumbai(3,12)', 'mumbai(3,13)', 'mumbai(3,14)', 'mumbai(3,15)', 'mumbai(3,16)', 'mumbai(3,17)', 'mumbai(3,18)', 'mumbai(3,19)', 'mumbai(3,20)', 'mumbai(3,21)', 'mumbai(3,22)', 'mumbai(3,23)', 'mumbai(3,24)', 'mumbai(3,25)', 'mumbai(3,26)', 'mumbai(3,27)', 'mumbai(3,28)', 'mumbai(3,29)', 'mumbai(3,30)', 'mumbai(3,31)', 'mumbai(3,32)', 'mumbai(3,33)', 'mumbai(3,34)', 'mumbai(3,35)', 'mumbai(3,36)', 'mumbai(3,37)', 'mumbai(3,38)', 'mumbai(3,39)', 'mumbai(3,40)', 'mumbai(3,41)', 'mumbai(3,42)', 'mumbai(3,43)', 'mumbai(3,44)', 'mumbai(3,45)', 'mumbai(3,46)', 'mumbai(3,47)', 'mumbai(3,48)', 'mumbai(3,49)', 'mumbai(3,50)', 'mumbai(3,51)', 'mumbai(3,52)', 'mumbai(3,53)', 'mumbai(3,54)', 'mumbai(3,55)', 'mumbai(3,56)', 'mumbai(3,57)', 'mumbai(3,58)', 'mumbai(3,59)', 'mumbai(3,60)', 'mumbai(3,61)', 'mumbai(3,62)', 'mumbai(3,63)', 'mumbai(3,64)', 'mumbai(3,65)', 'mumbai(3,66)', 'mumbai(3,67)', 'mumbai(3,68)', 'mumbai(3,69)', 'mumbai(3,70)', 'mumbai(3,71)', 'mumbai(3,72)', 'mumbai(3,73)', 'mumbai(3,74)', 'mumbai(3,75)', 'mumbai(3,76)', 'mumbai(3,77)', 'mumbai(3,78)', 'mumbai(3,79)', 'mumbai(3,80)', 'mumbai(3,81)', 'mumbai(3,82)', 'mumbai(3,83)', 'mumbai(3,84)', 'mumbai(3,85)', 'mumbai(3,86)', 'mumbai(3,87)', 'mumbai(3,88)', 'mumbai(3,89)', 'mumbai(3,90)', 'mumbai(3,91)', 'mumbai(3,92)', 'mumbai(3,93)', 'mumbai(3,94)', 'mumbai(3,95)', 'mumbai(3,96)', 'mumbai(3,97)', 'mumbai(3,98)', 'mumbai(3,99)', 'mumbai(3,100)', 'select(1)', 'select(2)', 'select(3)']]


81
assignment

question: 
Design an ASP script to connect each element, as determined by the predicate "quality", with one label from "barcelona","darkmagenta","quality","delhi","hair","weight","chicago","lake".

answer from file: 
assign(X,"barcelona")|assign(X,"darkmagenta")|assign(X,"quality")|assign(X,"delhi")|assign(X,"hair")|assign(X,"weight")|assign(X,"chicago")|assign(X,"lake"):-quality(X).

parsed from model: 
assign(X,"barcelona")|assign(X,"darkmagenta")|assign(X,"quality")|assign(X,"delhi")|assign(X,"hair")|assign(X,"weight")|assign(X,"chicago")|assign(X,"lake"):-quality(X).

facts: 
quality(1..5).

generated: 
Design an ASP script to connect each element, as determined by the predicate "quality", with one label from "barcelona","darkmagenta","quality","delhi","hair","weight","chicago","lake".
Answer: assign(X,"barcelona")|assign(X,"darkmagenta")|assign(X,"quality")|assign(X,"delhi")|assign(X,"hair")|assign(X,"weight")|assign(X,"chicago")|assign(X,"lake"):-quality(X).
assign(X,"city")|assign(X,"moto")|assign(X,"rome","city","moto","height","description","author","city","moto","description","height","description","author","city","moto","description","height","description","author","city","moto","description","height","description","author","city","moto","description","height","description","author","city","moto","description","

unique_rules: 
['assign(X,"barcelona")|assign(X,"darkmagenta")|assign(X,"quality")|assign(X,"delhi")|assign(X,"hair")|assign(X,"weight")|assign(X,"chicago")|assign(X,"lake"):-quality(X).']

jaccard: 1.0

AS desired: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'assign(1,"lake")', 'assign(2,"lake")', 'assign(3,"chicago")', 'assign(4,"lake")', 'assign(5,"lake")']]
\AS obtained: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'assign(1,"lake")', 'assign(2,"lake")', 'assign(3,"chicago")', 'assign(4,"lake")', 'assign(5,"lake")']]


82
constraint

question: 
Formulate an ASP code that ensures the "lake" predicate having value 9 is not connected to the label "strength".

answer from file: 
:-assign(9,strength).

parsed from model: 


facts: 
lake(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-lake(X).

generated: 
Formulate an ASP code that ensures the "lake" predicate having value 9 is not connected to the label "strength".
```
assign(9,"strength")
```
This code uses the "assign" predicate to associate the value 9 with the label "strength".
The "assign" predicate ensures that the "strength" label is not associated with the value 9.

unique_rules: 
[]

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lake(6)', 'lake(7)', 'lake(8)', 'lake(9)', 'lake(10)', 'lake(11)', 'lake(12)', 'lake(13)', 'lake(14)', 'lake(15)', 'lake(16)', 'lake(17)', 'lake(18)', 'lake(19)', 'lake(20)']]
\AS obtained: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lake(6)', 'lake(7)', 'lake(8)', 'lake(9)', 'lake(10)', 'lake(11)', 'lake(12)', 'lake(13)', 'lake(14)', 'lake(15)', 'lake(16)', 'lake(17)', 'lake(18)', 'lake(19)', 'lake(20)', 'assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")']]


83
combination

question: 
Compose an ASP script to calculate the Cartesian product of elements represented by the predicates "white" and "butterfly".

answer from file: 
combination(X,Y):-white(X),butterfly(Y).

parsed from model: 
combination(X,Y):-white(X),butterfly(Y).

facts: 
white(1..4).butterfly(1..5).

generated: 
Compose an ASP script to calculate the Cartesian product of elements represented by the predicates "white" and "butterfly".
Answer: combination(X,Y):-white(X),butterfly(Y).
combination(X,Y):-white(X),Y.
combination(X,Y):-Y,white(X).
combination(X,Y):-Y,Y.
combination(X,Y):-X,white(Y).
combination(X,Y):-X,Y.

unique_rules: 
['combination(X,Y):-white(X),butterfly(Y).', 'combination(X,Y):-white(X),Y.', 'combination(X,Y):-Y,white(X).', 'combination(X,Y):-Y,Y.', 'combination(X,Y):-X,white(Y).', 'combination(X,Y):-X,Y.']

jaccard: 1.0

AS desired: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)', 'white(1)', 'white(2)', 'white(3)', 'white(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)', 'white(1)', 'white(2)', 'white(3)', 'white(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


84
join

question: 
Write an ASP application to address the problem where the predicate "singapore" has fields "ID","laptopID","owner","lake","hair", and the predicate "laptop" has fields "ID","weight","strength","quality". Define the predicate "singapore_laptop" that associates each singapore with the weight of laptop.

answer from file: 
singapore_laptop(X,Z):-singapore(X,Y,_,_,_),laptop(Y,Z,_,_).

parsed from model: 
singapore_laptop(X,Z):-singapore(X,Y,_,_,_),laptop(Y,Z,_,_).

facts: 
singapore("ID","laptopID","owner","lake","hair").laptop("ID","weight","strength","quality").

generated: 
Write an ASP application to address the problem where the predicate "singapore" has fields "ID","laptopID","owner","lake","hair", and the predicate "laptop" has fields "ID","weight","strength","quality". Define the predicate "singapore_laptop" that associates each singapore with the weight of laptop.
Answer: singapore_laptop(X,Z):-singapore(X,Y,_,_,_),laptop(Y,Z,_,_).
singapore_laptop(X,Z):-singapore(X,Y,_,_),not laptop(Y,Z,_,_).

unique_rules: 
['singapore_laptop(X,Z):-singapore(X,Y,_,_,_),laptop(Y,Z,_,_).', 'singapore_laptop(X,Z):-singapore(X,Y,_,_),not laptop(Y,Z,_,_).']

jaccard: 1.0

AS desired: [['singapore("ID","laptopID","owner","lake","hair")', 'laptop("ID","weight","strength","quality")']]
\AS obtained: [['singapore("ID","laptopID","owner","lake","hair")', 'laptop("ID","weight","strength","quality")']]


85
closure

question: 
Formulate an ASP solution to establish the transitive closure of the "toronto" predicate, defined as "loops".

answer from file: 
loops(X,Y):-toronto(X,Y).
loops(X,Y):-toronto(X,Z),loops(Z,Y).

parsed from model: 
closure(X,Y):-loops(X,Y).
closure(X,Y):-loops(X,Z),closure(Z,Y).

facts: 
toronto(1..3, 1..4).

generated: 
Formulate an ASP solution to establish the transitive closure of the "toronto" predicate, defined as "loops".
Answer: closure(X,Y):-loops(X,Y).
closure(X,Y):-loops(X,Z),closure(Z,Y).
closure(X,Y):-loops(X,Z),closure(Z,Y).
closure(X,Y):-loops(X,Y).
closure(X,Y):-loops(X,Z),loops(Z,Y).
closure(X,Y):-loops(X,Z),loops(Z,Y).

unique_rules: 
['closure(X,Y):-loops(X,Y).', 'closure(X,Y):-loops(X,Z),closure(Z,Y).', 'closure(X,Y):-loops(X,Z),loops(Z,Y).']

jaccard: 0.0

AS desired: [['toronto(1,1)', 'toronto(1,2)', 'toronto(1,3)', 'toronto(1,4)', 'toronto(2,1)', 'toronto(2,2)', 'toronto(2,3)', 'toronto(2,4)', 'toronto(3,1)', 'toronto(3,2)', 'toronto(3,3)', 'toronto(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]
\AS obtained: [['toronto(1,1)', 'toronto(1,2)', 'toronto(1,3)', 'toronto(1,4)', 'toronto(2,1)', 'toronto(2,2)', 'toronto(2,3)', 'toronto(2,4)', 'toronto(3,1)', 'toronto(3,2)', 'toronto(3,3)', 'toronto(3,4)']]


86
preference

question: 
Generate an ASP program to disallow the association of the predicate "strength" with value "12" with "weight". If associated, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(12,"weight").[1@1]

parsed from model: 
:~assign(12,"weight").[1@1]

facts: 
strength(1..20).

generated: 
Generate an ASP program to disallow the association of the predicate "strength" with value "12" with "weight". If associated, it incurs a cost of "1" at level "1".
Answer: :~assign(12,"weight").[1@1]
This program uses the predicate "height" with fields "ID","city","author","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description

unique_rules: 
[':~assign(12,"weight").[1@1]']

jaccard: 1.0

AS desired: [['strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'strength(6)', 'strength(7)', 'strength(8)', 'strength(9)', 'strength(10)', 'strength(11)', 'strength(12)', 'strength(13)', 'strength(14)', 'strength(15)', 'strength(16)', 'strength(17)', 'strength(18)', 'strength(19)', 'strength(20)']]
\AS obtained: [['strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'strength(6)', 'strength(7)', 'strength(8)', 'strength(9)', 'strength(10)', 'strength(11)', 'strength(12)', 'strength(13)', 'strength(14)', 'strength(15)', 'strength(16)', 'strength(17)', 'strength(18)', 'strength(19)', 'strength(20)']]


87
filtering

question: 
Produce an ASP program to gather and retrieve values linked to the "owner" label in the "owner" predicate.

answer from file: 
select(X):-owner(X,"owner").

parsed from model: 
select(X):-owner(X,"owner").

facts: 
owner(1..5, "owner").

generated: 
Produce an ASP program to gather and retrieve values linked to the "owner" label in the "owner" predicate.
Answer: select(X):-owner(X,"owner").
owner(X,Z):-owner(X,Z).
owner(X,"city").
owner(X,"moto").
owner(X,"author").
owner(X,"description").
owner(X,"rome").
owner(X,"city","description").
owner(X,"city","moto").
owner(X,"city","author").
owner(X,"city","description","moto").
owner(X,"city","description","rome").

unique_rules: 
['select(X):-owner(X,"owner").', 'owner(X,Z):-owner(X,Z).']

jaccard: 1.0

AS desired: [['owner(1,"owner")', 'owner(2,"owner")', 'owner(3,"owner")', 'owner(4,"owner")', 'owner(5,"owner")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['owner(1,"owner")', 'owner(2,"owner")', 'owner(3,"owner")', 'owner(4,"owner")', 'owner(5,"owner")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


88
negative_filtering

question: 
Draft an ASP solution to identify values associated with the predicate "barcelona" but not tied to the predicate "barcelona" and labeled "chicago".

answer from file: 
select(X):-barcelona(X),not barcelona(X,"chicago").

parsed from model: 
select(X):-barcelona(X),not barcelona(X,"chicago").

facts: 
barcelona(1..3).barcelona(1,"surname").barcelona(2,"chicago").barcelona(3,"flower").

generated: 
Draft an ASP solution to identify values associated with the predicate "barcelona" but not tied to the predicate "barcelona" and labeled "chicago".
Answer: select(X):-barcelona(X),not barcelona(X,"chicago").
Explanation: The predicate "barcelona" includes values associated with the predicate "city","author","height","description","name","city","author","height","description","name","city","author","height","description","name","city","author","height","description","name","city","author","height","description","name","city","author","height","description","name","city","author","height","description","name","city","author","height","description","name","city","author","height","description","name","city","author","height","description","name","city","author","height","description","name","city","author","height","description

unique_rules: 
['select(X):-barcelona(X),not barcelona(X,"chicago").']

jaccard: 1.0

AS desired: [['barcelona(1)', 'barcelona(2)', 'barcelona(3)', 'barcelona(1,"surname")', 'barcelona(2,"chicago")', 'barcelona(3,"flower")', 'select(1)', 'select(3)']]
\AS obtained: [['barcelona(1)', 'barcelona(2)', 'barcelona(3)', 'barcelona(1,"surname")', 'barcelona(2,"chicago")', 'barcelona(3,"flower")', 'select(1)', 'select(3)']]


89
numeric_filtering

question: 
Craft an ASP code to retrieve values connected to the predicate "desk" with a value different than 12.

answer from file: 
select(X):-desk(X,C),C!=12.

parsed from model: 
select(X):-desk(X,C),C!=12.

facts: 
desk(1..3, 1..100).

generated: 
Craft an ASP code to retrieve values connected to the predicate "desk" with a value different than 12.
Answer: select(X):-desk(X,C),C!=12.
desk(X,C):-desk(X,C),C==12.

unique_rules: 
['select(X):-desk(X,C),C!=12.', 'desk(X,C):-desk(X,C),C==12.']

jaccard: 1.0

AS desired: [['desk(1,1)', 'desk(1,2)', 'desk(1,3)', 'desk(1,4)', 'desk(1,5)', 'desk(1,6)', 'desk(1,7)', 'desk(1,8)', 'desk(1,9)', 'desk(1,10)', 'desk(1,11)', 'desk(1,12)', 'desk(1,13)', 'desk(1,14)', 'desk(1,15)', 'desk(1,16)', 'desk(1,17)', 'desk(1,18)', 'desk(1,19)', 'desk(1,20)', 'desk(1,21)', 'desk(1,22)', 'desk(1,23)', 'desk(1,24)', 'desk(1,25)', 'desk(1,26)', 'desk(1,27)', 'desk(1,28)', 'desk(1,29)', 'desk(1,30)', 'desk(1,31)', 'desk(1,32)', 'desk(1,33)', 'desk(1,34)', 'desk(1,35)', 'desk(1,36)', 'desk(1,37)', 'desk(1,38)', 'desk(1,39)', 'desk(1,40)', 'desk(1,41)', 'desk(1,42)', 'desk(1,43)', 'desk(1,44)', 'desk(1,45)', 'desk(1,46)', 'desk(1,47)', 'desk(1,48)', 'desk(1,49)', 'desk(1,50)', 'desk(1,51)', 'desk(1,52)', 'desk(1,53)', 'desk(1,54)', 'desk(1,55)', 'desk(1,56)', 'desk(1,57)', 'desk(1,58)', 'desk(1,59)', 'desk(1,60)', 'desk(1,61)', 'desk(1,62)', 'desk(1,63)', 'desk(1,64)', 'desk(1,65)', 'desk(1,66)', 'desk(1,67)', 'desk(1,68)', 'desk(1,69)', 'desk(1,70)', 'desk(1,71)', 'desk(1,72)', 'desk(1,73)', 'desk(1,74)', 'desk(1,75)', 'desk(1,76)', 'desk(1,77)', 'desk(1,78)', 'desk(1,79)', 'desk(1,80)', 'desk(1,81)', 'desk(1,82)', 'desk(1,83)', 'desk(1,84)', 'desk(1,85)', 'desk(1,86)', 'desk(1,87)', 'desk(1,88)', 'desk(1,89)', 'desk(1,90)', 'desk(1,91)', 'desk(1,92)', 'desk(1,93)', 'desk(1,94)', 'desk(1,95)', 'desk(1,96)', 'desk(1,97)', 'desk(1,98)', 'desk(1,99)', 'desk(1,100)', 'desk(2,1)', 'desk(2,2)', 'desk(2,3)', 'desk(2,4)', 'desk(2,5)', 'desk(2,6)', 'desk(2,7)', 'desk(2,8)', 'desk(2,9)', 'desk(2,10)', 'desk(2,11)', 'desk(2,12)', 'desk(2,13)', 'desk(2,14)', 'desk(2,15)', 'desk(2,16)', 'desk(2,17)', 'desk(2,18)', 'desk(2,19)', 'desk(2,20)', 'desk(2,21)', 'desk(2,22)', 'desk(2,23)', 'desk(2,24)', 'desk(2,25)', 'desk(2,26)', 'desk(2,27)', 'desk(2,28)', 'desk(2,29)', 'desk(2,30)', 'desk(2,31)', 'desk(2,32)', 'desk(2,33)', 'desk(2,34)', 'desk(2,35)', 'desk(2,36)', 'desk(2,37)', 'desk(2,38)', 'desk(2,39)', 'desk(2,40)', 'desk(2,41)', 'desk(2,42)', 'desk(2,43)', 'desk(2,44)', 'desk(2,45)', 'desk(2,46)', 'desk(2,47)', 'desk(2,48)', 'desk(2,49)', 'desk(2,50)', 'desk(2,51)', 'desk(2,52)', 'desk(2,53)', 'desk(2,54)', 'desk(2,55)', 'desk(2,56)', 'desk(2,57)', 'desk(2,58)', 'desk(2,59)', 'desk(2,60)', 'desk(2,61)', 'desk(2,62)', 'desk(2,63)', 'desk(2,64)', 'desk(2,65)', 'desk(2,66)', 'desk(2,67)', 'desk(2,68)', 'desk(2,69)', 'desk(2,70)', 'desk(2,71)', 'desk(2,72)', 'desk(2,73)', 'desk(2,74)', 'desk(2,75)', 'desk(2,76)', 'desk(2,77)', 'desk(2,78)', 'desk(2,79)', 'desk(2,80)', 'desk(2,81)', 'desk(2,82)', 'desk(2,83)', 'desk(2,84)', 'desk(2,85)', 'desk(2,86)', 'desk(2,87)', 'desk(2,88)', 'desk(2,89)', 'desk(2,90)', 'desk(2,91)', 'desk(2,92)', 'desk(2,93)', 'desk(2,94)', 'desk(2,95)', 'desk(2,96)', 'desk(2,97)', 'desk(2,98)', 'desk(2,99)', 'desk(2,100)', 'desk(3,1)', 'desk(3,2)', 'desk(3,3)', 'desk(3,4)', 'desk(3,5)', 'desk(3,6)', 'desk(3,7)', 'desk(3,8)', 'desk(3,9)', 'desk(3,10)', 'desk(3,11)', 'desk(3,12)', 'desk(3,13)', 'desk(3,14)', 'desk(3,15)', 'desk(3,16)', 'desk(3,17)', 'desk(3,18)', 'desk(3,19)', 'desk(3,20)', 'desk(3,21)', 'desk(3,22)', 'desk(3,23)', 'desk(3,24)', 'desk(3,25)', 'desk(3,26)', 'desk(3,27)', 'desk(3,28)', 'desk(3,29)', 'desk(3,30)', 'desk(3,31)', 'desk(3,32)', 'desk(3,33)', 'desk(3,34)', 'desk(3,35)', 'desk(3,36)', 'desk(3,37)', 'desk(3,38)', 'desk(3,39)', 'desk(3,40)', 'desk(3,41)', 'desk(3,42)', 'desk(3,43)', 'desk(3,44)', 'desk(3,45)', 'desk(3,46)', 'desk(3,47)', 'desk(3,48)', 'desk(3,49)', 'desk(3,50)', 'desk(3,51)', 'desk(3,52)', 'desk(3,53)', 'desk(3,54)', 'desk(3,55)', 'desk(3,56)', 'desk(3,57)', 'desk(3,58)', 'desk(3,59)', 'desk(3,60)', 'desk(3,61)', 'desk(3,62)', 'desk(3,63)', 'desk(3,64)', 'desk(3,65)', 'desk(3,66)', 'desk(3,67)', 'desk(3,68)', 'desk(3,69)', 'desk(3,70)', 'desk(3,71)', 'desk(3,72)', 'desk(3,73)', 'desk(3,74)', 'desk(3,75)', 'desk(3,76)', 'desk(3,77)', 'desk(3,78)', 'desk(3,79)', 'desk(3,80)', 'desk(3,81)', 'desk(3,82)', 'desk(3,83)', 'desk(3,84)', 'desk(3,85)', 'desk(3,86)', 'desk(3,87)', 'desk(3,88)', 'desk(3,89)', 'desk(3,90)', 'desk(3,91)', 'desk(3,92)', 'desk(3,93)', 'desk(3,94)', 'desk(3,95)', 'desk(3,96)', 'desk(3,97)', 'desk(3,98)', 'desk(3,99)', 'desk(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['desk(1,1)', 'desk(1,2)', 'desk(1,3)', 'desk(1,4)', 'desk(1,5)', 'desk(1,6)', 'desk(1,7)', 'desk(1,8)', 'desk(1,9)', 'desk(1,10)', 'desk(1,11)', 'desk(1,12)', 'desk(1,13)', 'desk(1,14)', 'desk(1,15)', 'desk(1,16)', 'desk(1,17)', 'desk(1,18)', 'desk(1,19)', 'desk(1,20)', 'desk(1,21)', 'desk(1,22)', 'desk(1,23)', 'desk(1,24)', 'desk(1,25)', 'desk(1,26)', 'desk(1,27)', 'desk(1,28)', 'desk(1,29)', 'desk(1,30)', 'desk(1,31)', 'desk(1,32)', 'desk(1,33)', 'desk(1,34)', 'desk(1,35)', 'desk(1,36)', 'desk(1,37)', 'desk(1,38)', 'desk(1,39)', 'desk(1,40)', 'desk(1,41)', 'desk(1,42)', 'desk(1,43)', 'desk(1,44)', 'desk(1,45)', 'desk(1,46)', 'desk(1,47)', 'desk(1,48)', 'desk(1,49)', 'desk(1,50)', 'desk(1,51)', 'desk(1,52)', 'desk(1,53)', 'desk(1,54)', 'desk(1,55)', 'desk(1,56)', 'desk(1,57)', 'desk(1,58)', 'desk(1,59)', 'desk(1,60)', 'desk(1,61)', 'desk(1,62)', 'desk(1,63)', 'desk(1,64)', 'desk(1,65)', 'desk(1,66)', 'desk(1,67)', 'desk(1,68)', 'desk(1,69)', 'desk(1,70)', 'desk(1,71)', 'desk(1,72)', 'desk(1,73)', 'desk(1,74)', 'desk(1,75)', 'desk(1,76)', 'desk(1,77)', 'desk(1,78)', 'desk(1,79)', 'desk(1,80)', 'desk(1,81)', 'desk(1,82)', 'desk(1,83)', 'desk(1,84)', 'desk(1,85)', 'desk(1,86)', 'desk(1,87)', 'desk(1,88)', 'desk(1,89)', 'desk(1,90)', 'desk(1,91)', 'desk(1,92)', 'desk(1,93)', 'desk(1,94)', 'desk(1,95)', 'desk(1,96)', 'desk(1,97)', 'desk(1,98)', 'desk(1,99)', 'desk(1,100)', 'desk(2,1)', 'desk(2,2)', 'desk(2,3)', 'desk(2,4)', 'desk(2,5)', 'desk(2,6)', 'desk(2,7)', 'desk(2,8)', 'desk(2,9)', 'desk(2,10)', 'desk(2,11)', 'desk(2,12)', 'desk(2,13)', 'desk(2,14)', 'desk(2,15)', 'desk(2,16)', 'desk(2,17)', 'desk(2,18)', 'desk(2,19)', 'desk(2,20)', 'desk(2,21)', 'desk(2,22)', 'desk(2,23)', 'desk(2,24)', 'desk(2,25)', 'desk(2,26)', 'desk(2,27)', 'desk(2,28)', 'desk(2,29)', 'desk(2,30)', 'desk(2,31)', 'desk(2,32)', 'desk(2,33)', 'desk(2,34)', 'desk(2,35)', 'desk(2,36)', 'desk(2,37)', 'desk(2,38)', 'desk(2,39)', 'desk(2,40)', 'desk(2,41)', 'desk(2,42)', 'desk(2,43)', 'desk(2,44)', 'desk(2,45)', 'desk(2,46)', 'desk(2,47)', 'desk(2,48)', 'desk(2,49)', 'desk(2,50)', 'desk(2,51)', 'desk(2,52)', 'desk(2,53)', 'desk(2,54)', 'desk(2,55)', 'desk(2,56)', 'desk(2,57)', 'desk(2,58)', 'desk(2,59)', 'desk(2,60)', 'desk(2,61)', 'desk(2,62)', 'desk(2,63)', 'desk(2,64)', 'desk(2,65)', 'desk(2,66)', 'desk(2,67)', 'desk(2,68)', 'desk(2,69)', 'desk(2,70)', 'desk(2,71)', 'desk(2,72)', 'desk(2,73)', 'desk(2,74)', 'desk(2,75)', 'desk(2,76)', 'desk(2,77)', 'desk(2,78)', 'desk(2,79)', 'desk(2,80)', 'desk(2,81)', 'desk(2,82)', 'desk(2,83)', 'desk(2,84)', 'desk(2,85)', 'desk(2,86)', 'desk(2,87)', 'desk(2,88)', 'desk(2,89)', 'desk(2,90)', 'desk(2,91)', 'desk(2,92)', 'desk(2,93)', 'desk(2,94)', 'desk(2,95)', 'desk(2,96)', 'desk(2,97)', 'desk(2,98)', 'desk(2,99)', 'desk(2,100)', 'desk(3,1)', 'desk(3,2)', 'desk(3,3)', 'desk(3,4)', 'desk(3,5)', 'desk(3,6)', 'desk(3,7)', 'desk(3,8)', 'desk(3,9)', 'desk(3,10)', 'desk(3,11)', 'desk(3,12)', 'desk(3,13)', 'desk(3,14)', 'desk(3,15)', 'desk(3,16)', 'desk(3,17)', 'desk(3,18)', 'desk(3,19)', 'desk(3,20)', 'desk(3,21)', 'desk(3,22)', 'desk(3,23)', 'desk(3,24)', 'desk(3,25)', 'desk(3,26)', 'desk(3,27)', 'desk(3,28)', 'desk(3,29)', 'desk(3,30)', 'desk(3,31)', 'desk(3,32)', 'desk(3,33)', 'desk(3,34)', 'desk(3,35)', 'desk(3,36)', 'desk(3,37)', 'desk(3,38)', 'desk(3,39)', 'desk(3,40)', 'desk(3,41)', 'desk(3,42)', 'desk(3,43)', 'desk(3,44)', 'desk(3,45)', 'desk(3,46)', 'desk(3,47)', 'desk(3,48)', 'desk(3,49)', 'desk(3,50)', 'desk(3,51)', 'desk(3,52)', 'desk(3,53)', 'desk(3,54)', 'desk(3,55)', 'desk(3,56)', 'desk(3,57)', 'desk(3,58)', 'desk(3,59)', 'desk(3,60)', 'desk(3,61)', 'desk(3,62)', 'desk(3,63)', 'desk(3,64)', 'desk(3,65)', 'desk(3,66)', 'desk(3,67)', 'desk(3,68)', 'desk(3,69)', 'desk(3,70)', 'desk(3,71)', 'desk(3,72)', 'desk(3,73)', 'desk(3,74)', 'desk(3,75)', 'desk(3,76)', 'desk(3,77)', 'desk(3,78)', 'desk(3,79)', 'desk(3,80)', 'desk(3,81)', 'desk(3,82)', 'desk(3,83)', 'desk(3,84)', 'desk(3,85)', 'desk(3,86)', 'desk(3,87)', 'desk(3,88)', 'desk(3,89)', 'desk(3,90)', 'desk(3,91)', 'desk(3,92)', 'desk(3,93)', 'desk(3,94)', 'desk(3,95)', 'desk(3,96)', 'desk(3,97)', 'desk(3,98)', 'desk(3,99)', 'desk(3,100)', 'select(1)', 'select(2)', 'select(3)']]


90
assignment

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate singapore. The labels are "chair","storm","lake","black","white".

answer from file: 
assign(X,"chair")|assign(X,"storm")|assign(X,"lake")|assign(X,"black")|assign(X,"white"):-singapore(X).

parsed from model: 
assign(X,"chair")|assign(X,"storm")|assign(X,"lake")|assign(X,"black")|assign(X,"white"):- arrivant(X).

facts: 
singapore(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate singapore. The labels are "chair","storm","lake","black","white".
Answer: assign(X,"chair")|assign(X,"storm")|assign(X,"lake")|assign(X,"black")|assign(X,"white"):- arrivant(X).
assign(X,"chair")|assign(X,"storm")|assign(X,"lake")|assign(X,"black")|assign(X,"white"):- arrivant(X).
assign(X,"city"):- arrivant(X).
assign(X,"city"):- arrivant(X).
```

unique_rules: 
['assign(X,"chair")|assign(X,"storm")|assign(X,"lake")|assign(X,"black")|assign(X,"white"):- arrivant(X).', 'assign(X,"city"):- arrivant(X).']

jaccard: 0.0

AS desired: [['singapore(1)', 'singapore(2)', 'singapore(3)', 'singapore(4)', 'singapore(5)', 'assign(1,"white")', 'assign(2,"white")', 'assign(3,"white")', 'assign(4,"white")', 'assign(5,"white")']]
\AS obtained: [['singapore(1)', 'singapore(2)', 'singapore(3)', 'singapore(4)', 'singapore(5)']]


91
constraint

question: 
Create an ASP code snippet to ensure the "cairo" predicate with a value of 10 is not linked to the label "laptop".

answer from file: 
:-assign(10,laptop).

parsed from model: 
:-assign(10,laptop).

facts: 
cairo(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-cairo(X).

generated: 
Create an ASP code snippet to ensure the "cairo" predicate with a value of 10 is not linked to the label "laptop".
Answer: :-assign(10,laptop).
Explanation: The predicate "city" includes a "city" label for the "shangai" value, and the predicate "shangai" contains a "city" label for the "height" value. If the "city" label is assigned to the "height" value, it violates the "city" label constraint.

unique_rules: 
[':-assign(10,laptop).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'cairo(1)', 'cairo(2)', 'cairo(3)', 'cairo(4)', 'cairo(5)', 'cairo(6)', 'cairo(7)', 'cairo(8)', 'cairo(9)', 'cairo(10)', 'cairo(11)', 'cairo(12)', 'cairo(13)', 'cairo(14)', 'cairo(15)', 'cairo(16)', 'cairo(17)', 'cairo(18)', 'cairo(19)', 'cairo(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'cairo(1)', 'cairo(2)', 'cairo(3)', 'cairo(4)', 'cairo(5)', 'cairo(6)', 'cairo(7)', 'cairo(8)', 'cairo(9)', 'cairo(10)', 'cairo(11)', 'cairo(12)', 'cairo(13)', 'cairo(14)', 'cairo(15)', 'cairo(16)', 'cairo(17)', 'cairo(18)', 'cairo(19)', 'cairo(20)']]


92
combination

question: 
Develop an ASP code snippet to produce all valid combinations of elements from the "lightblue" and "lake" sets.

answer from file: 
combination(X,Y):-lightblue(X),lake(Y).

parsed from model: 
combination(X,Y):-lightblue(X),lake(Y).

facts: 
lightblue(1..4).lake(1..5).

generated: 
Develop an ASP code snippet to produce all valid combinations of elements from the "lightblue" and "lake" sets.
Answer: combination(X,Y):-lightblue(X),lake(Y).
combination(X,Y):-lightblue(X),not lake(Y).
combination(X,Y):-not lightblue(X),lake(Y).
combination(X,Y):-not lightblue(X),not lake(Y).

unique_rules: 
['combination(X,Y):-lightblue(X),lake(Y).', 'combination(X,Y):-lightblue(X),not lake(Y).', 'combination(X,Y):-not lightblue(X),lake(Y).', 'combination(X,Y):-not lightblue(X),not lake(Y).']

jaccard: 1.0

AS desired: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'lightblue(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'lightblue(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


93
join

question: 
Develop an ASP solution that defines the predicate "lake_storm" to link each lake to the surname of storm, with "lake" having fields "ID","stormID","owner","weight","lake" and "storm" having fields "ID","surname","owner".

answer from file: 
lake_storm(X,Z):-lake(X,Y,_,_,_),storm(Y,Z,_).

parsed from model: 
lake_storm(X,Z):-lake(X,Y,_,_,_),storm(Y,Z,_).

facts: 
lake("ID","stormID","owner","weight","lake").storm("ID","surname","owner").

generated: 
Develop an ASP solution that defines the predicate "lake_storm" to link each lake to the surname of storm, with "lake" having fields "ID","stormID","owner","weight","lake" and "storm" having fields "ID","surname","owner". Define the predicate "lake_storm" that links each lake to the surname of storm.
Answer: lake_storm(X,Z):-lake(X,Y,_,_,_),storm(Y,Z,_).
lake_storm(X,Z):-lake(X,Y,_,_,Z),storm(Y,Z,_).

unique_rules: 
['lake_storm(X,Z):-lake(X,Y,_,_,_),storm(Y,Z,_).', 'lake_storm(X,Z):-lake(X,Y,_,_,Z),storm(Y,Z,_).']

jaccard: 1.0

AS desired: [['lake("ID","stormID","owner","weight","lake")', 'storm("ID","surname","owner")']]
\AS obtained: [['lake("ID","stormID","owner","weight","lake")', 'storm("ID","surname","owner")']]


94
closure

question: 
Create an ASP solution that establishes the transitive closure of the "moscow" predicate, defined as "loops".

answer from file: 
loops(X,Y):-moscow(X,Y).
loops(X,Y):-moscow(X,Z),loops(Z,Y).

parsed from model: 


facts: 
moscow(1..3, 1..4).

generated: 
Create an ASP solution that establishes the transitive closure of the "moscow" predicate, defined as "loops".
Answer: closure(loops)
closure(loops) = {X|X∈loops}.
closure(loops) = loops.
closure(loops) = union(closure(X),closure(Y))|X,Y∈loops.
closure(loops) = union(loops,closure(Z))|Z∈loops.

unique_rules: 
[]

jaccard: 0.0

AS desired: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]
\AS obtained: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)']]


95
preference

question: 
Craft an ASP solution to prevent the linking of the "quality" predicate with value "5" to "quality". Any link incurs a cost of "1" at level "1".

answer from file: 
:~assign(5,"quality").[1@1]

parsed from model: 
:~assign(5,"quality").[1@1]

facts: 
quality(1..20).

generated: 
Craft an ASP solution to prevent the linking of the "quality" predicate with value "5" to "quality". Any link incurs a cost of "1" at level "1".
Answer: :~assign(5,"quality").[1@1]
Explanation: The predicate "quality" includes values "1","height","city","author","description","rome","color","city","author","description","height","city","author","description","rome","city","author","description","height","city","author","description","rome","city","author","description","height","city","author","description","rome","city","author","description","height","city","author","description","rome","city","author","description","height","city","author","description","rome","city","author","description","height","city","author","description","rome","city","author","description","height","city","author","description

unique_rules: 
[':~assign(5,"quality").[1@1]']

jaccard: 1.0

AS desired: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'quality(6)', 'quality(7)', 'quality(8)', 'quality(9)', 'quality(10)', 'quality(11)', 'quality(12)', 'quality(13)', 'quality(14)', 'quality(15)', 'quality(16)', 'quality(17)', 'quality(18)', 'quality(19)', 'quality(20)']]
\AS obtained: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'quality(6)', 'quality(7)', 'quality(8)', 'quality(9)', 'quality(10)', 'quality(11)', 'quality(12)', 'quality(13)', 'quality(14)', 'quality(15)', 'quality(16)', 'quality(17)', 'quality(18)', 'quality(19)', 'quality(20)']]


96
filtering

question: 
Write an ASP script to collect values associated with the "surname" label from the "strength" predicate.

answer from file: 
select(X):-strength(X,"surname").

parsed from model: 
select(X):-strength(X,"description").

facts: 
strength(1..5, "surname").

generated: 
Write an ASP script to collect values associated with the "surname" label from the "strength" predicate.
Answer: select(X):-strength(X,"description").
select(X):-strength(X,"author").
select(X):-strength(X,"description","author").
strength(X,"description").
strength(X,"author").
strength(X,"description","author").

unique_rules: 
['select(X):-strength(X,"description").', 'select(X):-strength(X,"author").', 'select(X):-strength(X,"description","author").']

jaccard: 0.0

AS desired: [['strength(1,"surname")', 'strength(2,"surname")', 'strength(3,"surname")', 'strength(4,"surname")', 'strength(5,"surname")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['strength(1,"surname")', 'strength(2,"surname")', 'strength(3,"surname")', 'strength(4,"surname")', 'strength(5,"surname")']]


97
negative_filtering

question: 
Develop an ASP script to collect values tied to the predicate "flower" but not linked to the predicate "owner" and labeled "butterfly".

answer from file: 
select(X):-flower(X),not owner(X,"butterfly").

parsed from model: 
select(X):-flower(X),not owner(X,"butterfly").

facts: 
flower(1..3).owner(1,"surname").owner(2,"quality").owner(3,"black").

generated: 
Develop an ASP script to collect values tied to the predicate "flower" but not linked to the predicate "owner" and labeled "butterfly".
Answer: select(X):-flower(X),not owner(X,"butterfly").

unique_rules: 
['select(X):-flower(X),not owner(X,"butterfly").']

jaccard: 1.0

AS desired: [['flower(1)', 'flower(2)', 'flower(3)', 'owner(1,"surname")', 'owner(2,"quality")', 'owner(3,"black")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['flower(1)', 'flower(2)', 'flower(3)', 'owner(1,"surname")', 'owner(2,"quality")', 'owner(3,"black")', 'select(1)', 'select(2)', 'select(3)']]


98
numeric_filtering

question: 
Produce an ASP script to retrieve values associated with the predicate "flower" with a value different than 47.

answer from file: 
select(X):-flower(X,C),C!=47.

parsed from model: 
select(X):-flower(X,C),C!=47.

facts: 
flower(1..3, 1..100).

generated: 
Produce an ASP script to retrieve values associated with the predicate "flower" with a value different than 47.
Answer: select(X):-flower(X,C),C!=47.
select(X):-flower(X,C),C==47.

unique_rules: 
['select(X):-flower(X,C),C!=47.', 'select(X):-flower(X,C),C==47.']

jaccard: 1.0

AS desired: [['flower(1,1)', 'flower(1,2)', 'flower(1,3)', 'flower(1,4)', 'flower(1,5)', 'flower(1,6)', 'flower(1,7)', 'flower(1,8)', 'flower(1,9)', 'flower(1,10)', 'flower(1,11)', 'flower(1,12)', 'flower(1,13)', 'flower(1,14)', 'flower(1,15)', 'flower(1,16)', 'flower(1,17)', 'flower(1,18)', 'flower(1,19)', 'flower(1,20)', 'flower(1,21)', 'flower(1,22)', 'flower(1,23)', 'flower(1,24)', 'flower(1,25)', 'flower(1,26)', 'flower(1,27)', 'flower(1,28)', 'flower(1,29)', 'flower(1,30)', 'flower(1,31)', 'flower(1,32)', 'flower(1,33)', 'flower(1,34)', 'flower(1,35)', 'flower(1,36)', 'flower(1,37)', 'flower(1,38)', 'flower(1,39)', 'flower(1,40)', 'flower(1,41)', 'flower(1,42)', 'flower(1,43)', 'flower(1,44)', 'flower(1,45)', 'flower(1,46)', 'flower(1,47)', 'flower(1,48)', 'flower(1,49)', 'flower(1,50)', 'flower(1,51)', 'flower(1,52)', 'flower(1,53)', 'flower(1,54)', 'flower(1,55)', 'flower(1,56)', 'flower(1,57)', 'flower(1,58)', 'flower(1,59)', 'flower(1,60)', 'flower(1,61)', 'flower(1,62)', 'flower(1,63)', 'flower(1,64)', 'flower(1,65)', 'flower(1,66)', 'flower(1,67)', 'flower(1,68)', 'flower(1,69)', 'flower(1,70)', 'flower(1,71)', 'flower(1,72)', 'flower(1,73)', 'flower(1,74)', 'flower(1,75)', 'flower(1,76)', 'flower(1,77)', 'flower(1,78)', 'flower(1,79)', 'flower(1,80)', 'flower(1,81)', 'flower(1,82)', 'flower(1,83)', 'flower(1,84)', 'flower(1,85)', 'flower(1,86)', 'flower(1,87)', 'flower(1,88)', 'flower(1,89)', 'flower(1,90)', 'flower(1,91)', 'flower(1,92)', 'flower(1,93)', 'flower(1,94)', 'flower(1,95)', 'flower(1,96)', 'flower(1,97)', 'flower(1,98)', 'flower(1,99)', 'flower(1,100)', 'flower(2,1)', 'flower(2,2)', 'flower(2,3)', 'flower(2,4)', 'flower(2,5)', 'flower(2,6)', 'flower(2,7)', 'flower(2,8)', 'flower(2,9)', 'flower(2,10)', 'flower(2,11)', 'flower(2,12)', 'flower(2,13)', 'flower(2,14)', 'flower(2,15)', 'flower(2,16)', 'flower(2,17)', 'flower(2,18)', 'flower(2,19)', 'flower(2,20)', 'flower(2,21)', 'flower(2,22)', 'flower(2,23)', 'flower(2,24)', 'flower(2,25)', 'flower(2,26)', 'flower(2,27)', 'flower(2,28)', 'flower(2,29)', 'flower(2,30)', 'flower(2,31)', 'flower(2,32)', 'flower(2,33)', 'flower(2,34)', 'flower(2,35)', 'flower(2,36)', 'flower(2,37)', 'flower(2,38)', 'flower(2,39)', 'flower(2,40)', 'flower(2,41)', 'flower(2,42)', 'flower(2,43)', 'flower(2,44)', 'flower(2,45)', 'flower(2,46)', 'flower(2,47)', 'flower(2,48)', 'flower(2,49)', 'flower(2,50)', 'flower(2,51)', 'flower(2,52)', 'flower(2,53)', 'flower(2,54)', 'flower(2,55)', 'flower(2,56)', 'flower(2,57)', 'flower(2,58)', 'flower(2,59)', 'flower(2,60)', 'flower(2,61)', 'flower(2,62)', 'flower(2,63)', 'flower(2,64)', 'flower(2,65)', 'flower(2,66)', 'flower(2,67)', 'flower(2,68)', 'flower(2,69)', 'flower(2,70)', 'flower(2,71)', 'flower(2,72)', 'flower(2,73)', 'flower(2,74)', 'flower(2,75)', 'flower(2,76)', 'flower(2,77)', 'flower(2,78)', 'flower(2,79)', 'flower(2,80)', 'flower(2,81)', 'flower(2,82)', 'flower(2,83)', 'flower(2,84)', 'flower(2,85)', 'flower(2,86)', 'flower(2,87)', 'flower(2,88)', 'flower(2,89)', 'flower(2,90)', 'flower(2,91)', 'flower(2,92)', 'flower(2,93)', 'flower(2,94)', 'flower(2,95)', 'flower(2,96)', 'flower(2,97)', 'flower(2,98)', 'flower(2,99)', 'flower(2,100)', 'flower(3,1)', 'flower(3,2)', 'flower(3,3)', 'flower(3,4)', 'flower(3,5)', 'flower(3,6)', 'flower(3,7)', 'flower(3,8)', 'flower(3,9)', 'flower(3,10)', 'flower(3,11)', 'flower(3,12)', 'flower(3,13)', 'flower(3,14)', 'flower(3,15)', 'flower(3,16)', 'flower(3,17)', 'flower(3,18)', 'flower(3,19)', 'flower(3,20)', 'flower(3,21)', 'flower(3,22)', 'flower(3,23)', 'flower(3,24)', 'flower(3,25)', 'flower(3,26)', 'flower(3,27)', 'flower(3,28)', 'flower(3,29)', 'flower(3,30)', 'flower(3,31)', 'flower(3,32)', 'flower(3,33)', 'flower(3,34)', 'flower(3,35)', 'flower(3,36)', 'flower(3,37)', 'flower(3,38)', 'flower(3,39)', 'flower(3,40)', 'flower(3,41)', 'flower(3,42)', 'flower(3,43)', 'flower(3,44)', 'flower(3,45)', 'flower(3,46)', 'flower(3,47)', 'flower(3,48)', 'flower(3,49)', 'flower(3,50)', 'flower(3,51)', 'flower(3,52)', 'flower(3,53)', 'flower(3,54)', 'flower(3,55)', 'flower(3,56)', 'flower(3,57)', 'flower(3,58)', 'flower(3,59)', 'flower(3,60)', 'flower(3,61)', 'flower(3,62)', 'flower(3,63)', 'flower(3,64)', 'flower(3,65)', 'flower(3,66)', 'flower(3,67)', 'flower(3,68)', 'flower(3,69)', 'flower(3,70)', 'flower(3,71)', 'flower(3,72)', 'flower(3,73)', 'flower(3,74)', 'flower(3,75)', 'flower(3,76)', 'flower(3,77)', 'flower(3,78)', 'flower(3,79)', 'flower(3,80)', 'flower(3,81)', 'flower(3,82)', 'flower(3,83)', 'flower(3,84)', 'flower(3,85)', 'flower(3,86)', 'flower(3,87)', 'flower(3,88)', 'flower(3,89)', 'flower(3,90)', 'flower(3,91)', 'flower(3,92)', 'flower(3,93)', 'flower(3,94)', 'flower(3,95)', 'flower(3,96)', 'flower(3,97)', 'flower(3,98)', 'flower(3,99)', 'flower(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['flower(1,1)', 'flower(1,2)', 'flower(1,3)', 'flower(1,4)', 'flower(1,5)', 'flower(1,6)', 'flower(1,7)', 'flower(1,8)', 'flower(1,9)', 'flower(1,10)', 'flower(1,11)', 'flower(1,12)', 'flower(1,13)', 'flower(1,14)', 'flower(1,15)', 'flower(1,16)', 'flower(1,17)', 'flower(1,18)', 'flower(1,19)', 'flower(1,20)', 'flower(1,21)', 'flower(1,22)', 'flower(1,23)', 'flower(1,24)', 'flower(1,25)', 'flower(1,26)', 'flower(1,27)', 'flower(1,28)', 'flower(1,29)', 'flower(1,30)', 'flower(1,31)', 'flower(1,32)', 'flower(1,33)', 'flower(1,34)', 'flower(1,35)', 'flower(1,36)', 'flower(1,37)', 'flower(1,38)', 'flower(1,39)', 'flower(1,40)', 'flower(1,41)', 'flower(1,42)', 'flower(1,43)', 'flower(1,44)', 'flower(1,45)', 'flower(1,46)', 'flower(1,47)', 'flower(1,48)', 'flower(1,49)', 'flower(1,50)', 'flower(1,51)', 'flower(1,52)', 'flower(1,53)', 'flower(1,54)', 'flower(1,55)', 'flower(1,56)', 'flower(1,57)', 'flower(1,58)', 'flower(1,59)', 'flower(1,60)', 'flower(1,61)', 'flower(1,62)', 'flower(1,63)', 'flower(1,64)', 'flower(1,65)', 'flower(1,66)', 'flower(1,67)', 'flower(1,68)', 'flower(1,69)', 'flower(1,70)', 'flower(1,71)', 'flower(1,72)', 'flower(1,73)', 'flower(1,74)', 'flower(1,75)', 'flower(1,76)', 'flower(1,77)', 'flower(1,78)', 'flower(1,79)', 'flower(1,80)', 'flower(1,81)', 'flower(1,82)', 'flower(1,83)', 'flower(1,84)', 'flower(1,85)', 'flower(1,86)', 'flower(1,87)', 'flower(1,88)', 'flower(1,89)', 'flower(1,90)', 'flower(1,91)', 'flower(1,92)', 'flower(1,93)', 'flower(1,94)', 'flower(1,95)', 'flower(1,96)', 'flower(1,97)', 'flower(1,98)', 'flower(1,99)', 'flower(1,100)', 'flower(2,1)', 'flower(2,2)', 'flower(2,3)', 'flower(2,4)', 'flower(2,5)', 'flower(2,6)', 'flower(2,7)', 'flower(2,8)', 'flower(2,9)', 'flower(2,10)', 'flower(2,11)', 'flower(2,12)', 'flower(2,13)', 'flower(2,14)', 'flower(2,15)', 'flower(2,16)', 'flower(2,17)', 'flower(2,18)', 'flower(2,19)', 'flower(2,20)', 'flower(2,21)', 'flower(2,22)', 'flower(2,23)', 'flower(2,24)', 'flower(2,25)', 'flower(2,26)', 'flower(2,27)', 'flower(2,28)', 'flower(2,29)', 'flower(2,30)', 'flower(2,31)', 'flower(2,32)', 'flower(2,33)', 'flower(2,34)', 'flower(2,35)', 'flower(2,36)', 'flower(2,37)', 'flower(2,38)', 'flower(2,39)', 'flower(2,40)', 'flower(2,41)', 'flower(2,42)', 'flower(2,43)', 'flower(2,44)', 'flower(2,45)', 'flower(2,46)', 'flower(2,47)', 'flower(2,48)', 'flower(2,49)', 'flower(2,50)', 'flower(2,51)', 'flower(2,52)', 'flower(2,53)', 'flower(2,54)', 'flower(2,55)', 'flower(2,56)', 'flower(2,57)', 'flower(2,58)', 'flower(2,59)', 'flower(2,60)', 'flower(2,61)', 'flower(2,62)', 'flower(2,63)', 'flower(2,64)', 'flower(2,65)', 'flower(2,66)', 'flower(2,67)', 'flower(2,68)', 'flower(2,69)', 'flower(2,70)', 'flower(2,71)', 'flower(2,72)', 'flower(2,73)', 'flower(2,74)', 'flower(2,75)', 'flower(2,76)', 'flower(2,77)', 'flower(2,78)', 'flower(2,79)', 'flower(2,80)', 'flower(2,81)', 'flower(2,82)', 'flower(2,83)', 'flower(2,84)', 'flower(2,85)', 'flower(2,86)', 'flower(2,87)', 'flower(2,88)', 'flower(2,89)', 'flower(2,90)', 'flower(2,91)', 'flower(2,92)', 'flower(2,93)', 'flower(2,94)', 'flower(2,95)', 'flower(2,96)', 'flower(2,97)', 'flower(2,98)', 'flower(2,99)', 'flower(2,100)', 'flower(3,1)', 'flower(3,2)', 'flower(3,3)', 'flower(3,4)', 'flower(3,5)', 'flower(3,6)', 'flower(3,7)', 'flower(3,8)', 'flower(3,9)', 'flower(3,10)', 'flower(3,11)', 'flower(3,12)', 'flower(3,13)', 'flower(3,14)', 'flower(3,15)', 'flower(3,16)', 'flower(3,17)', 'flower(3,18)', 'flower(3,19)', 'flower(3,20)', 'flower(3,21)', 'flower(3,22)', 'flower(3,23)', 'flower(3,24)', 'flower(3,25)', 'flower(3,26)', 'flower(3,27)', 'flower(3,28)', 'flower(3,29)', 'flower(3,30)', 'flower(3,31)', 'flower(3,32)', 'flower(3,33)', 'flower(3,34)', 'flower(3,35)', 'flower(3,36)', 'flower(3,37)', 'flower(3,38)', 'flower(3,39)', 'flower(3,40)', 'flower(3,41)', 'flower(3,42)', 'flower(3,43)', 'flower(3,44)', 'flower(3,45)', 'flower(3,46)', 'flower(3,47)', 'flower(3,48)', 'flower(3,49)', 'flower(3,50)', 'flower(3,51)', 'flower(3,52)', 'flower(3,53)', 'flower(3,54)', 'flower(3,55)', 'flower(3,56)', 'flower(3,57)', 'flower(3,58)', 'flower(3,59)', 'flower(3,60)', 'flower(3,61)', 'flower(3,62)', 'flower(3,63)', 'flower(3,64)', 'flower(3,65)', 'flower(3,66)', 'flower(3,67)', 'flower(3,68)', 'flower(3,69)', 'flower(3,70)', 'flower(3,71)', 'flower(3,72)', 'flower(3,73)', 'flower(3,74)', 'flower(3,75)', 'flower(3,76)', 'flower(3,77)', 'flower(3,78)', 'flower(3,79)', 'flower(3,80)', 'flower(3,81)', 'flower(3,82)', 'flower(3,83)', 'flower(3,84)', 'flower(3,85)', 'flower(3,86)', 'flower(3,87)', 'flower(3,88)', 'flower(3,89)', 'flower(3,90)', 'flower(3,91)', 'flower(3,92)', 'flower(3,93)', 'flower(3,94)', 'flower(3,95)', 'flower(3,96)', 'flower(3,97)', 'flower(3,98)', 'flower(3,99)', 'flower(3,100)', 'select(1)', 'select(2)', 'select(3)']]


99
assignment

question: 
Implement an ASP application to tag elements, defined by the predicate "quality", with one label from the set "cloud","weight".

answer from file: 
assign(X,"cloud")|assign(X,"weight"):-quality(X).

parsed from model: 
assign(X,"cloud")|assign(X,"weight"):-quality(X).

facts: 
quality(1..5).

generated: 
Implement an ASP application to tag elements, defined by the predicate "quality", with one label from the set "cloud","weight".
Answer: assign(X,"cloud")|assign(X,"weight"):-quality(X).
assign(X,"cloud"):-price(X,"city").
assign(X,"weight"):-price(X,"city").
price(X,Y):-quality(X),city(Y).
price(X,Y):-weight(X),city(Y).
price(X,Y):-city(X),city(Y).
price(X,Y):-city(X),city(Y).

unique_rules: 
['assign(X,"cloud")|assign(X,"weight"):-quality(X).', 'assign(X,"cloud"):-price(X,"city").', 'assign(X,"weight"):-price(X,"city").', 'price(X,Y):-quality(X),city(Y).', 'price(X,Y):-weight(X),city(Y).', 'price(X,Y):-city(X),city(Y).']

jaccard: 1.0

AS desired: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'assign(1,"weight")', 'assign(2,"cloud")', 'assign(3,"cloud")', 'assign(4,"weight")', 'assign(5,"cloud")']]
\AS obtained: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'assign(1,"weight")', 'assign(2,"cloud")', 'assign(3,"cloud")', 'assign(4,"weight")', 'assign(5,"cloud")']]


100
constraint

question: 
Develop an ASP application to disallow connecting the "desk" predicate having value 7 with the "toronto" label.

answer from file: 
:-assign(7,toronto).

parsed from model: 
:-assign(7,toronto).

facts: 
desk(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-desk(X).

generated: 
Develop an ASP application to disallow connecting the "desk" predicate having value 7 with the "toronto" label.
Answer: :-assign(7,toronto).
Explanation: The predicate "table" includes fields "ID","city","author","name","description","price","author","city","description","name","height","age","city","description","price","author","name","height","age","city","description","price","author","name","height","age","city","description","price","author","name","height","age","city","description","price","author","name","height","age","city","description","price","author","name","height","age","city","description","price","author","name","height","age","city","description","price","author","name","height","age","city","description","price","author

unique_rules: 
[':-assign(7,toronto).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'desk(1)', 'desk(2)', 'desk(3)', 'desk(4)', 'desk(5)', 'desk(6)', 'desk(7)', 'desk(8)', 'desk(9)', 'desk(10)', 'desk(11)', 'desk(12)', 'desk(13)', 'desk(14)', 'desk(15)', 'desk(16)', 'desk(17)', 'desk(18)', 'desk(19)', 'desk(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'desk(1)', 'desk(2)', 'desk(3)', 'desk(4)', 'desk(5)', 'desk(6)', 'desk(7)', 'desk(8)', 'desk(9)', 'desk(10)', 'desk(11)', 'desk(12)', 'desk(13)', 'desk(14)', 'desk(15)', 'desk(16)', 'desk(17)', 'desk(18)', 'desk(19)', 'desk(20)']]


101
combination

question: 
Develop an ASP solution that finds all pairings of elements from the predicates "hair" and "white".

answer from file: 
combination(X,Y):-hair(X),white(Y).

parsed from model: 
combination(X,Y):-hair(X),white(Y).

facts: 
hair(1..4).white(1..5).

generated: 
Develop an ASP solution that finds all pairings of elements from the predicates "hair" and "white".
Answer: combination(X,Y):-hair(X),white(Y).
combination(X,Y):-hair(X),not white(Y).
combination(X,Y):-not hair(X),white(Y).
combination(X,Y):-not hair(X),not white(Y).

unique_rules: 
['combination(X,Y):-hair(X),white(Y).', 'combination(X,Y):-hair(X),not white(Y).', 'combination(X,Y):-not hair(X),white(Y).', 'combination(X,Y):-not hair(X),not white(Y).']

jaccard: 1.0

AS desired: [['white(1)', 'white(2)', 'white(3)', 'white(4)', 'white(5)', 'hair(1)', 'hair(2)', 'hair(3)', 'hair(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['white(1)', 'white(2)', 'white(3)', 'white(4)', 'white(5)', 'hair(1)', 'hair(2)', 'hair(3)', 'hair(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


102
join

question: 
Develop an ASP solution that defines the predicate "flower_strength" to link each flower to the quality of strength, with "flower" having fields "ID","strengthID","quality" and "strength" having fields "ID","quality","owner".

answer from file: 
flower_strength(X,Z):-flower(X,Y,_),strength(Y,Z,_).

parsed from model: 
flower_strength(X,Z):-flower(X,Y,_),strength(Y,Z,_).

facts: 
flower("ID","strengthID","quality").strength("ID","quality","owner").

generated: 
Develop an ASP solution that defines the predicate "flower_strength" to link each flower to the quality of strength, with "flower" having fields "ID","strengthID","quality" and "strength" having fields "ID","quality","owner". Define the predicate "flower_strength" that links each flower to the quality of strength.
Answer: flower_strength(X,Z):-flower(X,Y,_),strength(Y,Z,_).
flower_strength(X,Z):-flower(X,Y,Z).

unique_rules: 
['flower_strength(X,Z):-flower(X,Y,_),strength(Y,Z,_).', 'flower_strength(X,Z):-flower(X,Y,Z).']

jaccard: 1.0

AS desired: [['flower("ID","strengthID","quality")', 'strength("ID","quality","owner")']]
\AS obtained: [['flower("ID","strengthID","quality")', 'strength("ID","quality","owner")']]


103
closure

question: 
Create an ASP solution that establishes the predicate "loops" through the transitive closure of the "moscow" predicate.

answer from file: 
loops(X,Y):-moscow(X,Y).
loops(X,Y):-moscow(X,Z),loops(Z,Y).

parsed from model: 
loops(X,Y):-moscow(X,Y).
loops(X,Y):-moscow(X,Z),loops(Z,Y).

facts: 
moscow(1..3, 1..4).

generated: 
Create an ASP solution that establishes the predicate "loops" through the transitive closure of the "moscow" predicate.
Answer: loops(X,Y):-moscow(X,Y).
loops(X,Y):-moscow(X,Z),loops(Z,Y).
loops(X,Y):-not moscow(X,Y).
loops(X,Y):-X==Y.
loops(X,Y):-X!=Y,city(X,Y).
city(X,Y):-loops(X,Y).
city(X,Y):-X,city(Y,Z),loops(Z,Y).

unique_rules: 
['loops(X,Y):-moscow(X,Y).', 'loops(X,Y):-moscow(X,Z),loops(Z,Y).', 'loops(X,Y):-not moscow(X,Y).', 'loops(X,Y):-X==Y.', 'loops(X,Y):-X!=Y,city(X,Y).', 'city(X,Y):-loops(X,Y).', 'city(X,Y):-X,city(Y,Z),loops(Z,Y).']

jaccard: 1.0

AS desired: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]
\AS obtained: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]


104
preference

question: 
Craft an ASP application to avoid the predicate "barcelona" with value "4" from being associated with "strength". If this occurs, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(4,"strength").[1@1]

parsed from model: 
:~assign(4,"strength").[1@1]

facts: 
barcelona(1..20).

generated: 
Craft an ASP application to avoid the predicate "barcelona" with value "4" from being associated with "strength". If this occurs, it incurs a cost of "1" at level "1".
Answer: :~assign(4,"strength").[1@1]
The predicate "height" includes fields "ID","city","author","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city

unique_rules: 
[':~assign(4,"strength").[1@1]']

jaccard: 1.0

AS desired: [['barcelona(1)', 'barcelona(2)', 'barcelona(3)', 'barcelona(4)', 'barcelona(5)', 'barcelona(6)', 'barcelona(7)', 'barcelona(8)', 'barcelona(9)', 'barcelona(10)', 'barcelona(11)', 'barcelona(12)', 'barcelona(13)', 'barcelona(14)', 'barcelona(15)', 'barcelona(16)', 'barcelona(17)', 'barcelona(18)', 'barcelona(19)', 'barcelona(20)']]
\AS obtained: [['barcelona(1)', 'barcelona(2)', 'barcelona(3)', 'barcelona(4)', 'barcelona(5)', 'barcelona(6)', 'barcelona(7)', 'barcelona(8)', 'barcelona(9)', 'barcelona(10)', 'barcelona(11)', 'barcelona(12)', 'barcelona(13)', 'barcelona(14)', 'barcelona(15)', 'barcelona(16)', 'barcelona(17)', 'barcelona(18)', 'barcelona(19)', 'barcelona(20)']]


105
filtering

question: 
Craft an ASP code snippet to capture all relevant values for the "cosenza" label within the "pink" predicate.

answer from file: 
select(X):-pink(X,"cosenza").

parsed from model: 
select(X):-pink(X,"cosenza").

facts: 
pink(1..5, "cosenza").

generated: 
Craft an ASP code snippet to capture all relevant values for the "cosenza" label within the "pink" predicate.
Answer: select(X):-pink(X,"cosenza").
select(X):-pink(X,"description").
select(X):-pink(X,"author").
pink(X,"description").
pink(X,"author").
```

unique_rules: 
['select(X):-pink(X,"cosenza").', 'select(X):-pink(X,"description").', 'select(X):-pink(X,"author").']

jaccard: 1.0

AS desired: [['pink(1,"cosenza")', 'pink(2,"cosenza")', 'pink(3,"cosenza")', 'pink(4,"cosenza")', 'pink(5,"cosenza")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['pink(1,"cosenza")', 'pink(2,"cosenza")', 'pink(3,"cosenza")', 'pink(4,"cosenza")', 'pink(5,"cosenza")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


106
negative_filtering

question: 
Produce an ASP program to gather values associated with the predicate "mumbai" but not linked to the predicate "black" and labeled "white".

answer from file: 
select(X):-mumbai(X),not black(X,"white").

parsed from model: 
select(X):-mumbai(X),not black(X,"white").

facts: 
mumbai(1..3).black(1,"mumbai").black(2,"hair").black(3,"toronto").

generated: 
Produce an ASP program to gather values associated with the predicate "mumbai" but not linked to the predicate "black" and labeled "white".
Answer: select(X):-mumbai(X),not black(X,"white").
mumbai(X):-city(X),height(X,18).
black(X,"white").
height(X,Y):-city(X),Y.

unique_rules: 
['select(X):-mumbai(X),not black(X,"white").', 'mumbai(X):-city(X),height(X,18).', 'height(X,Y):-city(X),Y.']

jaccard: 1.0

AS desired: [['mumbai(1)', 'mumbai(2)', 'mumbai(3)', 'black(1,"mumbai")', 'black(2,"hair")', 'black(3,"toronto")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['mumbai(1)', 'mumbai(2)', 'mumbai(3)', 'black(1,"mumbai")', 'black(2,"hair")', 'black(3,"toronto")', 'select(1)', 'select(2)', 'select(3)']]


107
numeric_filtering

question: 
Design an ASP solution to capture all values tied to the predicate "quality" with a value different than 76.

answer from file: 
select(X):-quality(X,C),C!=76.

parsed from model: 
select(X):-quality(X,C),C!=76.

facts: 
quality(1..3, 1..100).

generated: 
Design an ASP solution to capture all values tied to the predicate "quality" with a value different than 76.
Answer: select(X):-quality(X,C),C!=76.
select(X):-quality(X,C),C==76.

unique_rules: 
['select(X):-quality(X,C),C!=76.', 'select(X):-quality(X,C),C==76.']

jaccard: 1.0

AS desired: [['quality(1,1)', 'quality(1,2)', 'quality(1,3)', 'quality(1,4)', 'quality(1,5)', 'quality(1,6)', 'quality(1,7)', 'quality(1,8)', 'quality(1,9)', 'quality(1,10)', 'quality(1,11)', 'quality(1,12)', 'quality(1,13)', 'quality(1,14)', 'quality(1,15)', 'quality(1,16)', 'quality(1,17)', 'quality(1,18)', 'quality(1,19)', 'quality(1,20)', 'quality(1,21)', 'quality(1,22)', 'quality(1,23)', 'quality(1,24)', 'quality(1,25)', 'quality(1,26)', 'quality(1,27)', 'quality(1,28)', 'quality(1,29)', 'quality(1,30)', 'quality(1,31)', 'quality(1,32)', 'quality(1,33)', 'quality(1,34)', 'quality(1,35)', 'quality(1,36)', 'quality(1,37)', 'quality(1,38)', 'quality(1,39)', 'quality(1,40)', 'quality(1,41)', 'quality(1,42)', 'quality(1,43)', 'quality(1,44)', 'quality(1,45)', 'quality(1,46)', 'quality(1,47)', 'quality(1,48)', 'quality(1,49)', 'quality(1,50)', 'quality(1,51)', 'quality(1,52)', 'quality(1,53)', 'quality(1,54)', 'quality(1,55)', 'quality(1,56)', 'quality(1,57)', 'quality(1,58)', 'quality(1,59)', 'quality(1,60)', 'quality(1,61)', 'quality(1,62)', 'quality(1,63)', 'quality(1,64)', 'quality(1,65)', 'quality(1,66)', 'quality(1,67)', 'quality(1,68)', 'quality(1,69)', 'quality(1,70)', 'quality(1,71)', 'quality(1,72)', 'quality(1,73)', 'quality(1,74)', 'quality(1,75)', 'quality(1,76)', 'quality(1,77)', 'quality(1,78)', 'quality(1,79)', 'quality(1,80)', 'quality(1,81)', 'quality(1,82)', 'quality(1,83)', 'quality(1,84)', 'quality(1,85)', 'quality(1,86)', 'quality(1,87)', 'quality(1,88)', 'quality(1,89)', 'quality(1,90)', 'quality(1,91)', 'quality(1,92)', 'quality(1,93)', 'quality(1,94)', 'quality(1,95)', 'quality(1,96)', 'quality(1,97)', 'quality(1,98)', 'quality(1,99)', 'quality(1,100)', 'quality(2,1)', 'quality(2,2)', 'quality(2,3)', 'quality(2,4)', 'quality(2,5)', 'quality(2,6)', 'quality(2,7)', 'quality(2,8)', 'quality(2,9)', 'quality(2,10)', 'quality(2,11)', 'quality(2,12)', 'quality(2,13)', 'quality(2,14)', 'quality(2,15)', 'quality(2,16)', 'quality(2,17)', 'quality(2,18)', 'quality(2,19)', 'quality(2,20)', 'quality(2,21)', 'quality(2,22)', 'quality(2,23)', 'quality(2,24)', 'quality(2,25)', 'quality(2,26)', 'quality(2,27)', 'quality(2,28)', 'quality(2,29)', 'quality(2,30)', 'quality(2,31)', 'quality(2,32)', 'quality(2,33)', 'quality(2,34)', 'quality(2,35)', 'quality(2,36)', 'quality(2,37)', 'quality(2,38)', 'quality(2,39)', 'quality(2,40)', 'quality(2,41)', 'quality(2,42)', 'quality(2,43)', 'quality(2,44)', 'quality(2,45)', 'quality(2,46)', 'quality(2,47)', 'quality(2,48)', 'quality(2,49)', 'quality(2,50)', 'quality(2,51)', 'quality(2,52)', 'quality(2,53)', 'quality(2,54)', 'quality(2,55)', 'quality(2,56)', 'quality(2,57)', 'quality(2,58)', 'quality(2,59)', 'quality(2,60)', 'quality(2,61)', 'quality(2,62)', 'quality(2,63)', 'quality(2,64)', 'quality(2,65)', 'quality(2,66)', 'quality(2,67)', 'quality(2,68)', 'quality(2,69)', 'quality(2,70)', 'quality(2,71)', 'quality(2,72)', 'quality(2,73)', 'quality(2,74)', 'quality(2,75)', 'quality(2,76)', 'quality(2,77)', 'quality(2,78)', 'quality(2,79)', 'quality(2,80)', 'quality(2,81)', 'quality(2,82)', 'quality(2,83)', 'quality(2,84)', 'quality(2,85)', 'quality(2,86)', 'quality(2,87)', 'quality(2,88)', 'quality(2,89)', 'quality(2,90)', 'quality(2,91)', 'quality(2,92)', 'quality(2,93)', 'quality(2,94)', 'quality(2,95)', 'quality(2,96)', 'quality(2,97)', 'quality(2,98)', 'quality(2,99)', 'quality(2,100)', 'quality(3,1)', 'quality(3,2)', 'quality(3,3)', 'quality(3,4)', 'quality(3,5)', 'quality(3,6)', 'quality(3,7)', 'quality(3,8)', 'quality(3,9)', 'quality(3,10)', 'quality(3,11)', 'quality(3,12)', 'quality(3,13)', 'quality(3,14)', 'quality(3,15)', 'quality(3,16)', 'quality(3,17)', 'quality(3,18)', 'quality(3,19)', 'quality(3,20)', 'quality(3,21)', 'quality(3,22)', 'quality(3,23)', 'quality(3,24)', 'quality(3,25)', 'quality(3,26)', 'quality(3,27)', 'quality(3,28)', 'quality(3,29)', 'quality(3,30)', 'quality(3,31)', 'quality(3,32)', 'quality(3,33)', 'quality(3,34)', 'quality(3,35)', 'quality(3,36)', 'quality(3,37)', 'quality(3,38)', 'quality(3,39)', 'quality(3,40)', 'quality(3,41)', 'quality(3,42)', 'quality(3,43)', 'quality(3,44)', 'quality(3,45)', 'quality(3,46)', 'quality(3,47)', 'quality(3,48)', 'quality(3,49)', 'quality(3,50)', 'quality(3,51)', 'quality(3,52)', 'quality(3,53)', 'quality(3,54)', 'quality(3,55)', 'quality(3,56)', 'quality(3,57)', 'quality(3,58)', 'quality(3,59)', 'quality(3,60)', 'quality(3,61)', 'quality(3,62)', 'quality(3,63)', 'quality(3,64)', 'quality(3,65)', 'quality(3,66)', 'quality(3,67)', 'quality(3,68)', 'quality(3,69)', 'quality(3,70)', 'quality(3,71)', 'quality(3,72)', 'quality(3,73)', 'quality(3,74)', 'quality(3,75)', 'quality(3,76)', 'quality(3,77)', 'quality(3,78)', 'quality(3,79)', 'quality(3,80)', 'quality(3,81)', 'quality(3,82)', 'quality(3,83)', 'quality(3,84)', 'quality(3,85)', 'quality(3,86)', 'quality(3,87)', 'quality(3,88)', 'quality(3,89)', 'quality(3,90)', 'quality(3,91)', 'quality(3,92)', 'quality(3,93)', 'quality(3,94)', 'quality(3,95)', 'quality(3,96)', 'quality(3,97)', 'quality(3,98)', 'quality(3,99)', 'quality(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['quality(1,1)', 'quality(1,2)', 'quality(1,3)', 'quality(1,4)', 'quality(1,5)', 'quality(1,6)', 'quality(1,7)', 'quality(1,8)', 'quality(1,9)', 'quality(1,10)', 'quality(1,11)', 'quality(1,12)', 'quality(1,13)', 'quality(1,14)', 'quality(1,15)', 'quality(1,16)', 'quality(1,17)', 'quality(1,18)', 'quality(1,19)', 'quality(1,20)', 'quality(1,21)', 'quality(1,22)', 'quality(1,23)', 'quality(1,24)', 'quality(1,25)', 'quality(1,26)', 'quality(1,27)', 'quality(1,28)', 'quality(1,29)', 'quality(1,30)', 'quality(1,31)', 'quality(1,32)', 'quality(1,33)', 'quality(1,34)', 'quality(1,35)', 'quality(1,36)', 'quality(1,37)', 'quality(1,38)', 'quality(1,39)', 'quality(1,40)', 'quality(1,41)', 'quality(1,42)', 'quality(1,43)', 'quality(1,44)', 'quality(1,45)', 'quality(1,46)', 'quality(1,47)', 'quality(1,48)', 'quality(1,49)', 'quality(1,50)', 'quality(1,51)', 'quality(1,52)', 'quality(1,53)', 'quality(1,54)', 'quality(1,55)', 'quality(1,56)', 'quality(1,57)', 'quality(1,58)', 'quality(1,59)', 'quality(1,60)', 'quality(1,61)', 'quality(1,62)', 'quality(1,63)', 'quality(1,64)', 'quality(1,65)', 'quality(1,66)', 'quality(1,67)', 'quality(1,68)', 'quality(1,69)', 'quality(1,70)', 'quality(1,71)', 'quality(1,72)', 'quality(1,73)', 'quality(1,74)', 'quality(1,75)', 'quality(1,76)', 'quality(1,77)', 'quality(1,78)', 'quality(1,79)', 'quality(1,80)', 'quality(1,81)', 'quality(1,82)', 'quality(1,83)', 'quality(1,84)', 'quality(1,85)', 'quality(1,86)', 'quality(1,87)', 'quality(1,88)', 'quality(1,89)', 'quality(1,90)', 'quality(1,91)', 'quality(1,92)', 'quality(1,93)', 'quality(1,94)', 'quality(1,95)', 'quality(1,96)', 'quality(1,97)', 'quality(1,98)', 'quality(1,99)', 'quality(1,100)', 'quality(2,1)', 'quality(2,2)', 'quality(2,3)', 'quality(2,4)', 'quality(2,5)', 'quality(2,6)', 'quality(2,7)', 'quality(2,8)', 'quality(2,9)', 'quality(2,10)', 'quality(2,11)', 'quality(2,12)', 'quality(2,13)', 'quality(2,14)', 'quality(2,15)', 'quality(2,16)', 'quality(2,17)', 'quality(2,18)', 'quality(2,19)', 'quality(2,20)', 'quality(2,21)', 'quality(2,22)', 'quality(2,23)', 'quality(2,24)', 'quality(2,25)', 'quality(2,26)', 'quality(2,27)', 'quality(2,28)', 'quality(2,29)', 'quality(2,30)', 'quality(2,31)', 'quality(2,32)', 'quality(2,33)', 'quality(2,34)', 'quality(2,35)', 'quality(2,36)', 'quality(2,37)', 'quality(2,38)', 'quality(2,39)', 'quality(2,40)', 'quality(2,41)', 'quality(2,42)', 'quality(2,43)', 'quality(2,44)', 'quality(2,45)', 'quality(2,46)', 'quality(2,47)', 'quality(2,48)', 'quality(2,49)', 'quality(2,50)', 'quality(2,51)', 'quality(2,52)', 'quality(2,53)', 'quality(2,54)', 'quality(2,55)', 'quality(2,56)', 'quality(2,57)', 'quality(2,58)', 'quality(2,59)', 'quality(2,60)', 'quality(2,61)', 'quality(2,62)', 'quality(2,63)', 'quality(2,64)', 'quality(2,65)', 'quality(2,66)', 'quality(2,67)', 'quality(2,68)', 'quality(2,69)', 'quality(2,70)', 'quality(2,71)', 'quality(2,72)', 'quality(2,73)', 'quality(2,74)', 'quality(2,75)', 'quality(2,76)', 'quality(2,77)', 'quality(2,78)', 'quality(2,79)', 'quality(2,80)', 'quality(2,81)', 'quality(2,82)', 'quality(2,83)', 'quality(2,84)', 'quality(2,85)', 'quality(2,86)', 'quality(2,87)', 'quality(2,88)', 'quality(2,89)', 'quality(2,90)', 'quality(2,91)', 'quality(2,92)', 'quality(2,93)', 'quality(2,94)', 'quality(2,95)', 'quality(2,96)', 'quality(2,97)', 'quality(2,98)', 'quality(2,99)', 'quality(2,100)', 'quality(3,1)', 'quality(3,2)', 'quality(3,3)', 'quality(3,4)', 'quality(3,5)', 'quality(3,6)', 'quality(3,7)', 'quality(3,8)', 'quality(3,9)', 'quality(3,10)', 'quality(3,11)', 'quality(3,12)', 'quality(3,13)', 'quality(3,14)', 'quality(3,15)', 'quality(3,16)', 'quality(3,17)', 'quality(3,18)', 'quality(3,19)', 'quality(3,20)', 'quality(3,21)', 'quality(3,22)', 'quality(3,23)', 'quality(3,24)', 'quality(3,25)', 'quality(3,26)', 'quality(3,27)', 'quality(3,28)', 'quality(3,29)', 'quality(3,30)', 'quality(3,31)', 'quality(3,32)', 'quality(3,33)', 'quality(3,34)', 'quality(3,35)', 'quality(3,36)', 'quality(3,37)', 'quality(3,38)', 'quality(3,39)', 'quality(3,40)', 'quality(3,41)', 'quality(3,42)', 'quality(3,43)', 'quality(3,44)', 'quality(3,45)', 'quality(3,46)', 'quality(3,47)', 'quality(3,48)', 'quality(3,49)', 'quality(3,50)', 'quality(3,51)', 'quality(3,52)', 'quality(3,53)', 'quality(3,54)', 'quality(3,55)', 'quality(3,56)', 'quality(3,57)', 'quality(3,58)', 'quality(3,59)', 'quality(3,60)', 'quality(3,61)', 'quality(3,62)', 'quality(3,63)', 'quality(3,64)', 'quality(3,65)', 'quality(3,66)', 'quality(3,67)', 'quality(3,68)', 'quality(3,69)', 'quality(3,70)', 'quality(3,71)', 'quality(3,72)', 'quality(3,73)', 'quality(3,74)', 'quality(3,75)', 'quality(3,76)', 'quality(3,77)', 'quality(3,78)', 'quality(3,79)', 'quality(3,80)', 'quality(3,81)', 'quality(3,82)', 'quality(3,83)', 'quality(3,84)', 'quality(3,85)', 'quality(3,86)', 'quality(3,87)', 'quality(3,88)', 'quality(3,89)', 'quality(3,90)', 'quality(3,91)', 'quality(3,92)', 'quality(3,93)', 'quality(3,94)', 'quality(3,95)', 'quality(3,96)', 'quality(3,97)', 'quality(3,98)', 'quality(3,99)', 'quality(3,100)', 'select(1)', 'select(2)', 'select(3)']]


108
assignment

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate singapore. The labels are "chair","storm","lake","black","white".

answer from file: 
assign(X,"chair")|assign(X,"storm")|assign(X,"lake")|assign(X,"black")|assign(X,"white"):-singapore(X).

parsed from model: 
assign(X,"chair")|assign(X,"storm")|assign(X,"lake")|assign(X,"black")|assign(X,"white"):- arrivant(X).

facts: 
singapore(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate singapore. The labels are "chair","storm","lake","black","white".
Answer: assign(X,"chair")|assign(X,"storm")|assign(X,"lake")|assign(X,"black")|assign(X,"white"):- arrivant(X).
assign(X,"chair"):-dubai(X).
assign(X,"storm"):-dubai(X).
assign(X,"lake"):-dubai(X).
assign(X,"black"):-dubai(X).
assign(X,"white"):-dubai(X).
where DUBBI(X) means that the predicate "dubai" with value "X" has the label "table".
The predicate "dubai" has fields "ID","height","city","author","name","description","city","

unique_rules: 
['assign(X,"chair")|assign(X,"storm")|assign(X,"lake")|assign(X,"black")|assign(X,"white"):- arrivant(X).', 'assign(X,"chair"):-dubai(X).', 'assign(X,"storm"):-dubai(X).', 'assign(X,"lake"):-dubai(X).', 'assign(X,"black"):-dubai(X).', 'assign(X,"white"):-dubai(X).']

jaccard: 0.0

AS desired: [['singapore(1)', 'singapore(2)', 'singapore(3)', 'singapore(4)', 'singapore(5)', 'assign(1,"white")', 'assign(2,"white")', 'assign(3,"white")', 'assign(4,"white")', 'assign(5,"white")']]
\AS obtained: [['singapore(1)', 'singapore(2)', 'singapore(3)', 'singapore(4)', 'singapore(5)']]


109
constraint

question: 
Create an ASP code snippet to ensure the "cairo" predicate with a value of 10 is not linked to the label "laptop".

answer from file: 
:-assign(10,laptop).

parsed from model: 
:-assign(10,laptop).

facts: 
cairo(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-cairo(X).

generated: 
Create an ASP code snippet to ensure the "cairo" predicate with a value of 10 is not linked to the label "laptop".
Answer: :-assign(10,laptop).
Explanation: The predicate "city" includes a "city" label for the "shangai" value, and the predicate "shangai" contains a "city" label for the "height" value. If the "city" label is assigned to the "height" value, it violates the "city" label constraint.

unique_rules: 
[':-assign(10,laptop).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'cairo(1)', 'cairo(2)', 'cairo(3)', 'cairo(4)', 'cairo(5)', 'cairo(6)', 'cairo(7)', 'cairo(8)', 'cairo(9)', 'cairo(10)', 'cairo(11)', 'cairo(12)', 'cairo(13)', 'cairo(14)', 'cairo(15)', 'cairo(16)', 'cairo(17)', 'cairo(18)', 'cairo(19)', 'cairo(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'cairo(1)', 'cairo(2)', 'cairo(3)', 'cairo(4)', 'cairo(5)', 'cairo(6)', 'cairo(7)', 'cairo(8)', 'cairo(9)', 'cairo(10)', 'cairo(11)', 'cairo(12)', 'cairo(13)', 'cairo(14)', 'cairo(15)', 'cairo(16)', 'cairo(17)', 'cairo(18)', 'cairo(19)', 'cairo(20)']]


110
combination

question: 
Develop an ASP code snippet to produce all valid combinations of elements from the "lightblue" and "lake" sets.

answer from file: 
combination(X,Y):-lightblue(X),lake(Y).

parsed from model: 
combination(X,Y):-lightblue(X),lake(Y).

facts: 
lightblue(1..4).lake(1..5).

generated: 
Develop an ASP code snippet to produce all valid combinations of elements from the "lightblue" and "lake" sets.
Answer: combination(X,Y):-lightblue(X),lake(Y).
combination(X,Y):-lightblue(X),not lake(Y).
combination(X,Y):-not lightblue(X),lake(Y).

unique_rules: 
['combination(X,Y):-lightblue(X),lake(Y).', 'combination(X,Y):-lightblue(X),not lake(Y).', 'combination(X,Y):-not lightblue(X),lake(Y).']

jaccard: 1.0

AS desired: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'lightblue(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'lightblue(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


111
join

question: 
Develop an ASP solution that defines the predicate "lake_storm" to link each lake to the surname of storm, with "lake" having fields "ID","stormID","owner","weight","lake" and "storm" having fields "ID","surname","owner".

answer from file: 
lake_storm(X,Z):-lake(X,Y,_,_,_),storm(Y,Z,_).

parsed from model: 
lake_storm(X,Z):-lake(X,Y,_,_,_),storm(Y,Z,_).

facts: 
lake("ID","stormID","owner","weight","lake").storm("ID","surname","owner").

generated: 
Develop an ASP solution that defines the predicate "lake_storm" to link each lake to the surname of storm, with "lake" having fields "ID","stormID","owner","weight","lake" and "storm" having fields "ID","surname","owner". Define the predicate "lake_storm" that links each lake to the surname of storm.
Answer: lake_storm(X,Z):-lake(X,Y,_,_,_),storm(Y,Z,_).
lake_storm(X,Z):-lake(X,Y,_,_,Z),storm(Y,_,Z).

unique_rules: 
['lake_storm(X,Z):-lake(X,Y,_,_,_),storm(Y,Z,_).', 'lake_storm(X,Z):-lake(X,Y,_,_,Z),storm(Y,_,Z).']

jaccard: 1.0

AS desired: [['lake("ID","stormID","owner","weight","lake")', 'storm("ID","surname","owner")']]
\AS obtained: [['lake("ID","stormID","owner","weight","lake")', 'storm("ID","surname","owner")']]


112
closure

question: 
Create an ASP solution that establishes the transitive closure of the "moscow" predicate, defined as "loops".

answer from file: 
loops(X,Y):-moscow(X,Y).
loops(X,Y):-moscow(X,Z),loops(Z,Y).

parsed from model: 


facts: 
moscow(1..3, 1..4).

generated: 
Create an ASP solution that establishes the transitive closure of the "moscow" predicate, defined as "loops".
Answer: closure(loops)
closure(loops) = {X|X∈loops}.
closure(loops) = loops.
closure(loops) = union(closure(X),closure(Y))|X,Y∈loops.
closure(loops) = union(loops,city(X,Y))|X,Y∈loops.
city(X,Y) = {X|X,Y∈loops}.

unique_rules: 
[]

jaccard: 0.0

AS desired: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]
\AS obtained: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)']]


113
preference

question: 
Craft an ASP solution to prevent the linking of the "quality" predicate with value "5" to "quality". Any link incurs a cost of "1" at level "1".

answer from file: 
:~assign(5,"quality").[1@1]

parsed from model: 
:~assign(5,"quality").[1@1]

facts: 
quality(1..20).

generated: 
Craft an ASP solution to prevent the linking of the "quality" predicate with value "5" to "quality". Any link incurs a cost of "1" at level "1".
Answer: :~assign(5,"quality").[1@1]
Explanation: The predicate "quality" includes a link with a cost of "1" at level "1". The predicate "author" does not contain any links. The predicate "bike" links the "quality" predicate with the "author" predicate. The predicate "price" links the "author" predicate with the "bike" predicate. The predicate "city" links the "author" predicate with the "price" predicate. The predicate "moto" links the "author" predicate with the "city" predicate. The predicate "car" links the "author" predicate with the "moto" predicate. The predicate "height" links the "author"

unique_rules: 
[':~assign(5,"quality").[1@1]']

jaccard: 1.0

AS desired: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'quality(6)', 'quality(7)', 'quality(8)', 'quality(9)', 'quality(10)', 'quality(11)', 'quality(12)', 'quality(13)', 'quality(14)', 'quality(15)', 'quality(16)', 'quality(17)', 'quality(18)', 'quality(19)', 'quality(20)']]
\AS obtained: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'quality(6)', 'quality(7)', 'quality(8)', 'quality(9)', 'quality(10)', 'quality(11)', 'quality(12)', 'quality(13)', 'quality(14)', 'quality(15)', 'quality(16)', 'quality(17)', 'quality(18)', 'quality(19)', 'quality(20)']]


114
filtering

question: 
Write an ASP script to collect values associated with the "surname" label from the "strength" predicate.

answer from file: 
select(X):-strength(X,"surname").

parsed from model: 
select(X):-strength(X,"description").

facts: 
strength(1..5, "surname").

generated: 
Write an ASP script to collect values associated with the "surname" label from the "strength" predicate.
Answer: select(X):-strength(X,"description").
select(X):-strength(X,"author").
select(X):-strength(X,"description","author").
strength(X,"description").
strength(X,"author").
strength(X,"description","author").

unique_rules: 
['select(X):-strength(X,"description").', 'select(X):-strength(X,"author").', 'select(X):-strength(X,"description","author").']

jaccard: 0.0

AS desired: [['strength(1,"surname")', 'strength(2,"surname")', 'strength(3,"surname")', 'strength(4,"surname")', 'strength(5,"surname")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['strength(1,"surname")', 'strength(2,"surname")', 'strength(3,"surname")', 'strength(4,"surname")', 'strength(5,"surname")']]


115
negative_filtering

question: 
Develop an ASP script to collect values tied to the predicate "flower" but not linked to the predicate "owner" and labeled "butterfly".

answer from file: 
select(X):-flower(X),not owner(X,"butterfly").

parsed from model: 
select(X):-flower(X),not owner(X,"butterfly").

facts: 
flower(1..3).owner(1,"surname").owner(2,"quality").owner(3,"black").

generated: 
Develop an ASP script to collect values tied to the predicate "flower" but not linked to the predicate "owner" and labeled "butterfly".
Answer: select(X):-flower(X),not owner(X,"butterfly").

unique_rules: 
['select(X):-flower(X),not owner(X,"butterfly").']

jaccard: 1.0

AS desired: [['flower(1)', 'flower(2)', 'flower(3)', 'owner(1,"surname")', 'owner(2,"quality")', 'owner(3,"black")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['flower(1)', 'flower(2)', 'flower(3)', 'owner(1,"surname")', 'owner(2,"quality")', 'owner(3,"black")', 'select(1)', 'select(2)', 'select(3)']]


116
numeric_filtering

question: 
Produce an ASP script to retrieve values associated with the predicate "flower" with a value different than 47.

answer from file: 
select(X):-flower(X,C),C!=47.

parsed from model: 
select(X):-flower(X,C),C!=47.

facts: 
flower(1..3, 1..100).

generated: 
Produce an ASP script to retrieve values associated with the predicate "flower" with a value different than 47.
Answer: select(X):-flower(X,C),C!=47.
select(X):-flower(X,C),C==47.

unique_rules: 
['select(X):-flower(X,C),C!=47.', 'select(X):-flower(X,C),C==47.']

jaccard: 1.0

AS desired: [['flower(1,1)', 'flower(1,2)', 'flower(1,3)', 'flower(1,4)', 'flower(1,5)', 'flower(1,6)', 'flower(1,7)', 'flower(1,8)', 'flower(1,9)', 'flower(1,10)', 'flower(1,11)', 'flower(1,12)', 'flower(1,13)', 'flower(1,14)', 'flower(1,15)', 'flower(1,16)', 'flower(1,17)', 'flower(1,18)', 'flower(1,19)', 'flower(1,20)', 'flower(1,21)', 'flower(1,22)', 'flower(1,23)', 'flower(1,24)', 'flower(1,25)', 'flower(1,26)', 'flower(1,27)', 'flower(1,28)', 'flower(1,29)', 'flower(1,30)', 'flower(1,31)', 'flower(1,32)', 'flower(1,33)', 'flower(1,34)', 'flower(1,35)', 'flower(1,36)', 'flower(1,37)', 'flower(1,38)', 'flower(1,39)', 'flower(1,40)', 'flower(1,41)', 'flower(1,42)', 'flower(1,43)', 'flower(1,44)', 'flower(1,45)', 'flower(1,46)', 'flower(1,47)', 'flower(1,48)', 'flower(1,49)', 'flower(1,50)', 'flower(1,51)', 'flower(1,52)', 'flower(1,53)', 'flower(1,54)', 'flower(1,55)', 'flower(1,56)', 'flower(1,57)', 'flower(1,58)', 'flower(1,59)', 'flower(1,60)', 'flower(1,61)', 'flower(1,62)', 'flower(1,63)', 'flower(1,64)', 'flower(1,65)', 'flower(1,66)', 'flower(1,67)', 'flower(1,68)', 'flower(1,69)', 'flower(1,70)', 'flower(1,71)', 'flower(1,72)', 'flower(1,73)', 'flower(1,74)', 'flower(1,75)', 'flower(1,76)', 'flower(1,77)', 'flower(1,78)', 'flower(1,79)', 'flower(1,80)', 'flower(1,81)', 'flower(1,82)', 'flower(1,83)', 'flower(1,84)', 'flower(1,85)', 'flower(1,86)', 'flower(1,87)', 'flower(1,88)', 'flower(1,89)', 'flower(1,90)', 'flower(1,91)', 'flower(1,92)', 'flower(1,93)', 'flower(1,94)', 'flower(1,95)', 'flower(1,96)', 'flower(1,97)', 'flower(1,98)', 'flower(1,99)', 'flower(1,100)', 'flower(2,1)', 'flower(2,2)', 'flower(2,3)', 'flower(2,4)', 'flower(2,5)', 'flower(2,6)', 'flower(2,7)', 'flower(2,8)', 'flower(2,9)', 'flower(2,10)', 'flower(2,11)', 'flower(2,12)', 'flower(2,13)', 'flower(2,14)', 'flower(2,15)', 'flower(2,16)', 'flower(2,17)', 'flower(2,18)', 'flower(2,19)', 'flower(2,20)', 'flower(2,21)', 'flower(2,22)', 'flower(2,23)', 'flower(2,24)', 'flower(2,25)', 'flower(2,26)', 'flower(2,27)', 'flower(2,28)', 'flower(2,29)', 'flower(2,30)', 'flower(2,31)', 'flower(2,32)', 'flower(2,33)', 'flower(2,34)', 'flower(2,35)', 'flower(2,36)', 'flower(2,37)', 'flower(2,38)', 'flower(2,39)', 'flower(2,40)', 'flower(2,41)', 'flower(2,42)', 'flower(2,43)', 'flower(2,44)', 'flower(2,45)', 'flower(2,46)', 'flower(2,47)', 'flower(2,48)', 'flower(2,49)', 'flower(2,50)', 'flower(2,51)', 'flower(2,52)', 'flower(2,53)', 'flower(2,54)', 'flower(2,55)', 'flower(2,56)', 'flower(2,57)', 'flower(2,58)', 'flower(2,59)', 'flower(2,60)', 'flower(2,61)', 'flower(2,62)', 'flower(2,63)', 'flower(2,64)', 'flower(2,65)', 'flower(2,66)', 'flower(2,67)', 'flower(2,68)', 'flower(2,69)', 'flower(2,70)', 'flower(2,71)', 'flower(2,72)', 'flower(2,73)', 'flower(2,74)', 'flower(2,75)', 'flower(2,76)', 'flower(2,77)', 'flower(2,78)', 'flower(2,79)', 'flower(2,80)', 'flower(2,81)', 'flower(2,82)', 'flower(2,83)', 'flower(2,84)', 'flower(2,85)', 'flower(2,86)', 'flower(2,87)', 'flower(2,88)', 'flower(2,89)', 'flower(2,90)', 'flower(2,91)', 'flower(2,92)', 'flower(2,93)', 'flower(2,94)', 'flower(2,95)', 'flower(2,96)', 'flower(2,97)', 'flower(2,98)', 'flower(2,99)', 'flower(2,100)', 'flower(3,1)', 'flower(3,2)', 'flower(3,3)', 'flower(3,4)', 'flower(3,5)', 'flower(3,6)', 'flower(3,7)', 'flower(3,8)', 'flower(3,9)', 'flower(3,10)', 'flower(3,11)', 'flower(3,12)', 'flower(3,13)', 'flower(3,14)', 'flower(3,15)', 'flower(3,16)', 'flower(3,17)', 'flower(3,18)', 'flower(3,19)', 'flower(3,20)', 'flower(3,21)', 'flower(3,22)', 'flower(3,23)', 'flower(3,24)', 'flower(3,25)', 'flower(3,26)', 'flower(3,27)', 'flower(3,28)', 'flower(3,29)', 'flower(3,30)', 'flower(3,31)', 'flower(3,32)', 'flower(3,33)', 'flower(3,34)', 'flower(3,35)', 'flower(3,36)', 'flower(3,37)', 'flower(3,38)', 'flower(3,39)', 'flower(3,40)', 'flower(3,41)', 'flower(3,42)', 'flower(3,43)', 'flower(3,44)', 'flower(3,45)', 'flower(3,46)', 'flower(3,47)', 'flower(3,48)', 'flower(3,49)', 'flower(3,50)', 'flower(3,51)', 'flower(3,52)', 'flower(3,53)', 'flower(3,54)', 'flower(3,55)', 'flower(3,56)', 'flower(3,57)', 'flower(3,58)', 'flower(3,59)', 'flower(3,60)', 'flower(3,61)', 'flower(3,62)', 'flower(3,63)', 'flower(3,64)', 'flower(3,65)', 'flower(3,66)', 'flower(3,67)', 'flower(3,68)', 'flower(3,69)', 'flower(3,70)', 'flower(3,71)', 'flower(3,72)', 'flower(3,73)', 'flower(3,74)', 'flower(3,75)', 'flower(3,76)', 'flower(3,77)', 'flower(3,78)', 'flower(3,79)', 'flower(3,80)', 'flower(3,81)', 'flower(3,82)', 'flower(3,83)', 'flower(3,84)', 'flower(3,85)', 'flower(3,86)', 'flower(3,87)', 'flower(3,88)', 'flower(3,89)', 'flower(3,90)', 'flower(3,91)', 'flower(3,92)', 'flower(3,93)', 'flower(3,94)', 'flower(3,95)', 'flower(3,96)', 'flower(3,97)', 'flower(3,98)', 'flower(3,99)', 'flower(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['flower(1,1)', 'flower(1,2)', 'flower(1,3)', 'flower(1,4)', 'flower(1,5)', 'flower(1,6)', 'flower(1,7)', 'flower(1,8)', 'flower(1,9)', 'flower(1,10)', 'flower(1,11)', 'flower(1,12)', 'flower(1,13)', 'flower(1,14)', 'flower(1,15)', 'flower(1,16)', 'flower(1,17)', 'flower(1,18)', 'flower(1,19)', 'flower(1,20)', 'flower(1,21)', 'flower(1,22)', 'flower(1,23)', 'flower(1,24)', 'flower(1,25)', 'flower(1,26)', 'flower(1,27)', 'flower(1,28)', 'flower(1,29)', 'flower(1,30)', 'flower(1,31)', 'flower(1,32)', 'flower(1,33)', 'flower(1,34)', 'flower(1,35)', 'flower(1,36)', 'flower(1,37)', 'flower(1,38)', 'flower(1,39)', 'flower(1,40)', 'flower(1,41)', 'flower(1,42)', 'flower(1,43)', 'flower(1,44)', 'flower(1,45)', 'flower(1,46)', 'flower(1,47)', 'flower(1,48)', 'flower(1,49)', 'flower(1,50)', 'flower(1,51)', 'flower(1,52)', 'flower(1,53)', 'flower(1,54)', 'flower(1,55)', 'flower(1,56)', 'flower(1,57)', 'flower(1,58)', 'flower(1,59)', 'flower(1,60)', 'flower(1,61)', 'flower(1,62)', 'flower(1,63)', 'flower(1,64)', 'flower(1,65)', 'flower(1,66)', 'flower(1,67)', 'flower(1,68)', 'flower(1,69)', 'flower(1,70)', 'flower(1,71)', 'flower(1,72)', 'flower(1,73)', 'flower(1,74)', 'flower(1,75)', 'flower(1,76)', 'flower(1,77)', 'flower(1,78)', 'flower(1,79)', 'flower(1,80)', 'flower(1,81)', 'flower(1,82)', 'flower(1,83)', 'flower(1,84)', 'flower(1,85)', 'flower(1,86)', 'flower(1,87)', 'flower(1,88)', 'flower(1,89)', 'flower(1,90)', 'flower(1,91)', 'flower(1,92)', 'flower(1,93)', 'flower(1,94)', 'flower(1,95)', 'flower(1,96)', 'flower(1,97)', 'flower(1,98)', 'flower(1,99)', 'flower(1,100)', 'flower(2,1)', 'flower(2,2)', 'flower(2,3)', 'flower(2,4)', 'flower(2,5)', 'flower(2,6)', 'flower(2,7)', 'flower(2,8)', 'flower(2,9)', 'flower(2,10)', 'flower(2,11)', 'flower(2,12)', 'flower(2,13)', 'flower(2,14)', 'flower(2,15)', 'flower(2,16)', 'flower(2,17)', 'flower(2,18)', 'flower(2,19)', 'flower(2,20)', 'flower(2,21)', 'flower(2,22)', 'flower(2,23)', 'flower(2,24)', 'flower(2,25)', 'flower(2,26)', 'flower(2,27)', 'flower(2,28)', 'flower(2,29)', 'flower(2,30)', 'flower(2,31)', 'flower(2,32)', 'flower(2,33)', 'flower(2,34)', 'flower(2,35)', 'flower(2,36)', 'flower(2,37)', 'flower(2,38)', 'flower(2,39)', 'flower(2,40)', 'flower(2,41)', 'flower(2,42)', 'flower(2,43)', 'flower(2,44)', 'flower(2,45)', 'flower(2,46)', 'flower(2,47)', 'flower(2,48)', 'flower(2,49)', 'flower(2,50)', 'flower(2,51)', 'flower(2,52)', 'flower(2,53)', 'flower(2,54)', 'flower(2,55)', 'flower(2,56)', 'flower(2,57)', 'flower(2,58)', 'flower(2,59)', 'flower(2,60)', 'flower(2,61)', 'flower(2,62)', 'flower(2,63)', 'flower(2,64)', 'flower(2,65)', 'flower(2,66)', 'flower(2,67)', 'flower(2,68)', 'flower(2,69)', 'flower(2,70)', 'flower(2,71)', 'flower(2,72)', 'flower(2,73)', 'flower(2,74)', 'flower(2,75)', 'flower(2,76)', 'flower(2,77)', 'flower(2,78)', 'flower(2,79)', 'flower(2,80)', 'flower(2,81)', 'flower(2,82)', 'flower(2,83)', 'flower(2,84)', 'flower(2,85)', 'flower(2,86)', 'flower(2,87)', 'flower(2,88)', 'flower(2,89)', 'flower(2,90)', 'flower(2,91)', 'flower(2,92)', 'flower(2,93)', 'flower(2,94)', 'flower(2,95)', 'flower(2,96)', 'flower(2,97)', 'flower(2,98)', 'flower(2,99)', 'flower(2,100)', 'flower(3,1)', 'flower(3,2)', 'flower(3,3)', 'flower(3,4)', 'flower(3,5)', 'flower(3,6)', 'flower(3,7)', 'flower(3,8)', 'flower(3,9)', 'flower(3,10)', 'flower(3,11)', 'flower(3,12)', 'flower(3,13)', 'flower(3,14)', 'flower(3,15)', 'flower(3,16)', 'flower(3,17)', 'flower(3,18)', 'flower(3,19)', 'flower(3,20)', 'flower(3,21)', 'flower(3,22)', 'flower(3,23)', 'flower(3,24)', 'flower(3,25)', 'flower(3,26)', 'flower(3,27)', 'flower(3,28)', 'flower(3,29)', 'flower(3,30)', 'flower(3,31)', 'flower(3,32)', 'flower(3,33)', 'flower(3,34)', 'flower(3,35)', 'flower(3,36)', 'flower(3,37)', 'flower(3,38)', 'flower(3,39)', 'flower(3,40)', 'flower(3,41)', 'flower(3,42)', 'flower(3,43)', 'flower(3,44)', 'flower(3,45)', 'flower(3,46)', 'flower(3,47)', 'flower(3,48)', 'flower(3,49)', 'flower(3,50)', 'flower(3,51)', 'flower(3,52)', 'flower(3,53)', 'flower(3,54)', 'flower(3,55)', 'flower(3,56)', 'flower(3,57)', 'flower(3,58)', 'flower(3,59)', 'flower(3,60)', 'flower(3,61)', 'flower(3,62)', 'flower(3,63)', 'flower(3,64)', 'flower(3,65)', 'flower(3,66)', 'flower(3,67)', 'flower(3,68)', 'flower(3,69)', 'flower(3,70)', 'flower(3,71)', 'flower(3,72)', 'flower(3,73)', 'flower(3,74)', 'flower(3,75)', 'flower(3,76)', 'flower(3,77)', 'flower(3,78)', 'flower(3,79)', 'flower(3,80)', 'flower(3,81)', 'flower(3,82)', 'flower(3,83)', 'flower(3,84)', 'flower(3,85)', 'flower(3,86)', 'flower(3,87)', 'flower(3,88)', 'flower(3,89)', 'flower(3,90)', 'flower(3,91)', 'flower(3,92)', 'flower(3,93)', 'flower(3,94)', 'flower(3,95)', 'flower(3,96)', 'flower(3,97)', 'flower(3,98)', 'flower(3,99)', 'flower(3,100)', 'select(1)', 'select(2)', 'select(3)']]


117
assignment

question: 
Design an ASP script to connect each element, as determined by the predicate "chicago", with one label from "weight","cosenza".

answer from file: 
assign(X,"weight")|assign(X,"cosenza"):-chicago(X).

parsed from model: 
assign(X,"weight")|assign(X,"cosenza"):-chicago(X).

facts: 
chicago(1..5).

generated: 
Design an ASP script to connect each element, as determined by the predicate "chicago", with one label from "weight","cosenza".
Answer: assign(X,"weight")|assign(X,"cosenza"):-chicago(X).
assign(X,"weight"):-chicago(X).
assign(X,"cosenza"):-chicago(X).
```
The predicate "chicago" includes fields "ID","height","author","city","description","name","author","city","description","height","price","name","description","city","author","height","description","price","name","city","description","height","price","name","description","city","author","height","description","price","name","city","description","height","price","name","description","city","author","height","description","price","name","city","description","height","

unique_rules: 
['assign(X,"weight")|assign(X,"cosenza"):-chicago(X).', 'assign(X,"weight"):-chicago(X).', 'assign(X,"cosenza"):-chicago(X).']

jaccard: 1.0

AS desired: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'chicago(5)', 'assign(1,"cosenza")', 'assign(2,"weight")', 'assign(3,"weight")', 'assign(4,"cosenza")', 'assign(5,"weight")']]
\AS obtained: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'chicago(5)', 'assign(1,"cosenza")', 'assign(2,"weight")', 'assign(3,"weight")', 'assign(4,"cosenza")', 'assign(5,"weight")']]


118
constraint

question: 
Write an ASP program for the following problem. Prevent the predicate "cairo" with value "7" from having label "lake".

answer from file: 
:-assign(7,lake).

parsed from model: 


facts: 
cairo(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-cairo(X).

generated: 
Write an ASP program for the following problem. Prevent the predicate "cairo" with value "7" from having label "lake".
```
assign(7,lake).
```
The predicate "city" has fields "ID","height","author","name","city","description","author","name","city","description","height","price","author","city","description","name","city","height","price","author","city","description","name","city","height","price","author","city","description","name","city","height","price","author","city","description","name","city","height","price","author","city","description","name","city","height","price","author","city","description","name","city","height","price","author","city","description","name","city","height","price","author","city","description","name","

unique_rules: 
[]

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'cairo(1)', 'cairo(2)', 'cairo(3)', 'cairo(4)', 'cairo(5)', 'cairo(6)', 'cairo(7)', 'cairo(8)', 'cairo(9)', 'cairo(10)', 'cairo(11)', 'cairo(12)', 'cairo(13)', 'cairo(14)', 'cairo(15)', 'cairo(16)', 'cairo(17)', 'cairo(18)', 'cairo(19)', 'cairo(20)']]
\AS obtained: [['cairo(1)', 'cairo(2)', 'cairo(3)', 'cairo(4)', 'cairo(5)', 'cairo(6)', 'cairo(7)', 'cairo(8)', 'cairo(9)', 'cairo(10)', 'cairo(11)', 'cairo(12)', 'cairo(13)', 'cairo(14)', 'cairo(15)', 'cairo(16)', 'cairo(17)', 'cairo(18)', 'cairo(19)', 'cairo(20)', 'assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")']]


119
combination

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "chicago" and "owner".

answer from file: 
combination(X,Y):-chicago(X),owner(Y).

parsed from model: 
combination(X,Y):-chicago(X),owner(Y).

facts: 
chicago(1..4).owner(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "chicago" and "owner".
Answer: combination(X,Y):-chicago(X),owner(Y).
combination(X,Y):-chicago(X),not owner(Y).
combination(X,Y):-not chicago(X),owner(Y).
combination(X,Y):-not chicago(X),not owner(Y).

unique_rules: 
['combination(X,Y):-chicago(X),owner(Y).', 'combination(X,Y):-chicago(X),not owner(Y).', 'combination(X,Y):-not chicago(X),owner(Y).', 'combination(X,Y):-not chicago(X),not owner(Y).']

jaccard: 1.0

AS desired: [['owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'owner(5)', 'chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'owner(5)', 'chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


120
join

question: 
Develop an ASP solution to create the predicate "desk_moscow" that links each desk with the lake of moscow, with "desk" having fields "ID","moscowID","hair" and "moscow" having fields "ID","lake","owner","hair".

answer from file: 
desk_moscow(X,Z):-desk(X,Y,_),moscow(Y,Z,_,_).

parsed from model: 
desk_moscow(X,Z):-desk(X,Y,_),moscow(Y,Z,_,_).

facts: 
desk("ID","moscowID","hair").moscow("ID","lake","owner","hair").

generated: 
Develop an ASP solution to create the predicate "desk_moscow" that links each desk with the lake of moscow, with "desk" having fields "ID","moscowID","hair" and "moscow" having fields "ID","lake","owner","hair". Define the predicate "desk_moscow" that links each desk with the lake of moscow.
Answer: desk_moscow(X,Z):-desk(X,Y,_),moscow(Y,Z,_,_).
desk_moscow(X,Z):-desk(X,Y,_),moscow(Y,Z,_,Y).

unique_rules: 
['desk_moscow(X,Z):-desk(X,Y,_),moscow(Y,Z,_,_).', 'desk_moscow(X,Z):-desk(X,Y,_),moscow(Y,Z,_,Y).']

jaccard: 1.0

AS desired: [['desk("ID","moscowID","hair")', 'moscow("ID","lake","owner","hair")']]
\AS obtained: [['desk("ID","moscowID","hair")', 'moscow("ID","lake","owner","hair")']]


121
closure

question: 
Produce an ASP program to compute the transitive closure of the "mumbai" predicate and define it as "journey".

answer from file: 
journey(X,Y):-mumbai(X,Y).
journey(X,Y):-mumbai(X,Z),journey(Z,Y).

parsed from model: 
journey(X,Y):-mumbai(X,Y).
journey(X,Y):-mumbai(X,Z),journey(Z,Y).

facts: 
mumbai(1..3, 1..4).

generated: 
Produce an ASP program to compute the transitive closure of the "mumbai" predicate and define it as "journey".
Answer: journey(X,Y):-mumbai(X,Y).
journey(X,Y):-mumbai(X,Z),journey(Z,Y).
journey(X,Y):-not(mumbai(X,Y)).
journey(X,Y):-mumbai(X,Y).
journey(X,Y):-not(mumbai(X,Y)).
journey(X,Y):-mumbai(X,Y).
journey(X,Y):-not(mumbai(X,Y)).
journey(X,Y):-mumbai(X,Y).

unique_rules: 
['journey(X,Y):-mumbai(X,Y).', 'journey(X,Y):-mumbai(X,Z),journey(Z,Y).', 'journey(X,Y):-not(mumbai(X,Y)).']

jaccard: 1.0

AS desired: [['mumbai(1,1)', 'mumbai(1,2)', 'mumbai(1,3)', 'mumbai(1,4)', 'mumbai(2,1)', 'mumbai(2,2)', 'mumbai(2,3)', 'mumbai(2,4)', 'mumbai(3,1)', 'mumbai(3,2)', 'mumbai(3,3)', 'mumbai(3,4)', 'journey(1,1)', 'journey(1,2)', 'journey(1,3)', 'journey(1,4)', 'journey(2,1)', 'journey(2,2)', 'journey(2,3)', 'journey(2,4)', 'journey(3,1)', 'journey(3,2)', 'journey(3,3)', 'journey(3,4)']]
\AS obtained: [['mumbai(1,1)', 'mumbai(1,2)', 'mumbai(1,3)', 'mumbai(1,4)', 'mumbai(2,1)', 'mumbai(2,2)', 'mumbai(2,3)', 'mumbai(2,4)', 'mumbai(3,1)', 'mumbai(3,2)', 'mumbai(3,3)', 'mumbai(3,4)', 'journey(1,1)', 'journey(1,2)', 'journey(1,3)', 'journey(1,4)', 'journey(2,1)', 'journey(2,2)', 'journey(2,3)', 'journey(2,4)', 'journey(3,1)', 'journey(3,2)', 'journey(3,3)', 'journey(3,4)']]


122
preference

question: 
Generate an ASP program to disallow the association of the predicate "wall" with value "15" with "laptop". If associated, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(15,"laptop").[1@1]

parsed from model: 
:~assign(15,"laptop").[1@1]

facts: 
wall(1..20).

generated: 
Generate an ASP program to disallow the association of the predicate "wall" with value "15" with "laptop". If associated, it incurs a cost of "1" at level "1".
Answer: :~assign(15,"laptop").[1@1]
This program uses the predicate "wall" with value "15" to determine the association of the predicate "laptop". If the association is found, it incurs a cost of "1" at level "1".

unique_rules: 
[':~assign(15,"laptop").[1@1]']

jaccard: 1.0

AS desired: [['wall(1)', 'wall(2)', 'wall(3)', 'wall(4)', 'wall(5)', 'wall(6)', 'wall(7)', 'wall(8)', 'wall(9)', 'wall(10)', 'wall(11)', 'wall(12)', 'wall(13)', 'wall(14)', 'wall(15)', 'wall(16)', 'wall(17)', 'wall(18)', 'wall(19)', 'wall(20)']]
\AS obtained: [['wall(1)', 'wall(2)', 'wall(3)', 'wall(4)', 'wall(5)', 'wall(6)', 'wall(7)', 'wall(8)', 'wall(9)', 'wall(10)', 'wall(11)', 'wall(12)', 'wall(13)', 'wall(14)', 'wall(15)', 'wall(16)', 'wall(17)', 'wall(18)', 'wall(19)', 'wall(20)']]


123
filtering

question: 
Generate an ASP code snippet to capture values related to the "chicago" label in the "hair" predicate.

answer from file: 
select(X):-hair(X,"chicago").

parsed from model: 
select(X):-hair(X,"chicago").

facts: 
hair(1..5, "chicago").

generated: 
Generate an ASP code snippet to capture values related to the "chicago" label in the "hair" predicate.
Answer: select(X):-hair(X,"chicago").
select(X):-hair(X,"city").
select(X):-hair(X,"author").
select(X):-hair(X,"description").
select(X):-hair(X,"height").
select(X):-hair(X,"name").
select(X):-hair(X,"author","description").
select(X):-hair(X,"author","height").
select(X):-hair(X,"author","name").
select(X):-hair(X,"description","height").
select(X):-hair(X,"height","description").

unique_rules: 
['select(X):-hair(X,"chicago").', 'select(X):-hair(X,"city").', 'select(X):-hair(X,"author").', 'select(X):-hair(X,"description").', 'select(X):-hair(X,"height").', 'select(X):-hair(X,"name").', 'select(X):-hair(X,"author","description").', 'select(X):-hair(X,"author","height").', 'select(X):-hair(X,"author","name").', 'select(X):-hair(X,"description","height").', 'select(X):-hair(X,"height","description").']

jaccard: 1.0

AS desired: [['hair(1,"chicago")', 'hair(2,"chicago")', 'hair(3,"chicago")', 'hair(4,"chicago")', 'hair(5,"chicago")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['hair(1,"chicago")', 'hair(2,"chicago")', 'hair(3,"chicago")', 'hair(4,"chicago")', 'hair(5,"chicago")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


124
negative_filtering

question: 
Create an ASP solution to fetch values connected to the predicate "roof" but not associated with the predicate "mumbai" and labeled "laptop".

answer from file: 
select(X):-roof(X),not mumbai(X,"laptop").

parsed from model: 
select(X):-roof(X),not mumbai(X,"laptop").

facts: 
roof(1..3).mumbai(1,"laptop").mumbai(2,"roof").mumbai(3,"desk").

generated: 
Create an ASP solution to fetch values connected to the predicate "roof" but not associated with the predicate "mumbai" and labeled "laptop".
Answer: select(X):-roof(X),not mumbai(X,"laptop").
Explanation: The predicate "roof" includes values connected to the predicate "city", and the predicate "mumbai" includes values labeled "bike".
The predicate " arrivant" combines values from "city" and "bike".
The predicate "laptop" includes values labeled "bike".
The predicate "select" combines values from " arrivant","city","bike".
The predicate "not mumbai" excludes values labeled "bike" from the result of " arrivant".

unique_rules: 
['select(X):-roof(X),not mumbai(X,"laptop").']

jaccard: 1.0

AS desired: [['roof(1)', 'roof(2)', 'roof(3)', 'mumbai(1,"laptop")', 'mumbai(2,"roof")', 'mumbai(3,"desk")', 'select(2)', 'select(3)']]
\AS obtained: [['roof(1)', 'roof(2)', 'roof(3)', 'mumbai(1,"laptop")', 'mumbai(2,"roof")', 'mumbai(3,"desk")', 'select(2)', 'select(3)']]


125
numeric_filtering

question: 
Draft an ASP code snippet to identify values linked to the predicate "black" with a value different than 85.

answer from file: 
select(X):-black(X,C),C!=85.

parsed from model: 
select(X):-black(X,C),C!=85.

facts: 
black(1..3, 1..100).

generated: 
Draft an ASP code snippet to identify values linked to the predicate "black" with a value different than 85.
Answer: select(X):-black(X,C),C!=85.
black(X,C):-black(X,C),C==85.

unique_rules: 
['select(X):-black(X,C),C!=85.', 'black(X,C):-black(X,C),C==85.']

jaccard: 1.0

AS desired: [['black(1,1)', 'black(1,2)', 'black(1,3)', 'black(1,4)', 'black(1,5)', 'black(1,6)', 'black(1,7)', 'black(1,8)', 'black(1,9)', 'black(1,10)', 'black(1,11)', 'black(1,12)', 'black(1,13)', 'black(1,14)', 'black(1,15)', 'black(1,16)', 'black(1,17)', 'black(1,18)', 'black(1,19)', 'black(1,20)', 'black(1,21)', 'black(1,22)', 'black(1,23)', 'black(1,24)', 'black(1,25)', 'black(1,26)', 'black(1,27)', 'black(1,28)', 'black(1,29)', 'black(1,30)', 'black(1,31)', 'black(1,32)', 'black(1,33)', 'black(1,34)', 'black(1,35)', 'black(1,36)', 'black(1,37)', 'black(1,38)', 'black(1,39)', 'black(1,40)', 'black(1,41)', 'black(1,42)', 'black(1,43)', 'black(1,44)', 'black(1,45)', 'black(1,46)', 'black(1,47)', 'black(1,48)', 'black(1,49)', 'black(1,50)', 'black(1,51)', 'black(1,52)', 'black(1,53)', 'black(1,54)', 'black(1,55)', 'black(1,56)', 'black(1,57)', 'black(1,58)', 'black(1,59)', 'black(1,60)', 'black(1,61)', 'black(1,62)', 'black(1,63)', 'black(1,64)', 'black(1,65)', 'black(1,66)', 'black(1,67)', 'black(1,68)', 'black(1,69)', 'black(1,70)', 'black(1,71)', 'black(1,72)', 'black(1,73)', 'black(1,74)', 'black(1,75)', 'black(1,76)', 'black(1,77)', 'black(1,78)', 'black(1,79)', 'black(1,80)', 'black(1,81)', 'black(1,82)', 'black(1,83)', 'black(1,84)', 'black(1,85)', 'black(1,86)', 'black(1,87)', 'black(1,88)', 'black(1,89)', 'black(1,90)', 'black(1,91)', 'black(1,92)', 'black(1,93)', 'black(1,94)', 'black(1,95)', 'black(1,96)', 'black(1,97)', 'black(1,98)', 'black(1,99)', 'black(1,100)', 'black(2,1)', 'black(2,2)', 'black(2,3)', 'black(2,4)', 'black(2,5)', 'black(2,6)', 'black(2,7)', 'black(2,8)', 'black(2,9)', 'black(2,10)', 'black(2,11)', 'black(2,12)', 'black(2,13)', 'black(2,14)', 'black(2,15)', 'black(2,16)', 'black(2,17)', 'black(2,18)', 'black(2,19)', 'black(2,20)', 'black(2,21)', 'black(2,22)', 'black(2,23)', 'black(2,24)', 'black(2,25)', 'black(2,26)', 'black(2,27)', 'black(2,28)', 'black(2,29)', 'black(2,30)', 'black(2,31)', 'black(2,32)', 'black(2,33)', 'black(2,34)', 'black(2,35)', 'black(2,36)', 'black(2,37)', 'black(2,38)', 'black(2,39)', 'black(2,40)', 'black(2,41)', 'black(2,42)', 'black(2,43)', 'black(2,44)', 'black(2,45)', 'black(2,46)', 'black(2,47)', 'black(2,48)', 'black(2,49)', 'black(2,50)', 'black(2,51)', 'black(2,52)', 'black(2,53)', 'black(2,54)', 'black(2,55)', 'black(2,56)', 'black(2,57)', 'black(2,58)', 'black(2,59)', 'black(2,60)', 'black(2,61)', 'black(2,62)', 'black(2,63)', 'black(2,64)', 'black(2,65)', 'black(2,66)', 'black(2,67)', 'black(2,68)', 'black(2,69)', 'black(2,70)', 'black(2,71)', 'black(2,72)', 'black(2,73)', 'black(2,74)', 'black(2,75)', 'black(2,76)', 'black(2,77)', 'black(2,78)', 'black(2,79)', 'black(2,80)', 'black(2,81)', 'black(2,82)', 'black(2,83)', 'black(2,84)', 'black(2,85)', 'black(2,86)', 'black(2,87)', 'black(2,88)', 'black(2,89)', 'black(2,90)', 'black(2,91)', 'black(2,92)', 'black(2,93)', 'black(2,94)', 'black(2,95)', 'black(2,96)', 'black(2,97)', 'black(2,98)', 'black(2,99)', 'black(2,100)', 'black(3,1)', 'black(3,2)', 'black(3,3)', 'black(3,4)', 'black(3,5)', 'black(3,6)', 'black(3,7)', 'black(3,8)', 'black(3,9)', 'black(3,10)', 'black(3,11)', 'black(3,12)', 'black(3,13)', 'black(3,14)', 'black(3,15)', 'black(3,16)', 'black(3,17)', 'black(3,18)', 'black(3,19)', 'black(3,20)', 'black(3,21)', 'black(3,22)', 'black(3,23)', 'black(3,24)', 'black(3,25)', 'black(3,26)', 'black(3,27)', 'black(3,28)', 'black(3,29)', 'black(3,30)', 'black(3,31)', 'black(3,32)', 'black(3,33)', 'black(3,34)', 'black(3,35)', 'black(3,36)', 'black(3,37)', 'black(3,38)', 'black(3,39)', 'black(3,40)', 'black(3,41)', 'black(3,42)', 'black(3,43)', 'black(3,44)', 'black(3,45)', 'black(3,46)', 'black(3,47)', 'black(3,48)', 'black(3,49)', 'black(3,50)', 'black(3,51)', 'black(3,52)', 'black(3,53)', 'black(3,54)', 'black(3,55)', 'black(3,56)', 'black(3,57)', 'black(3,58)', 'black(3,59)', 'black(3,60)', 'black(3,61)', 'black(3,62)', 'black(3,63)', 'black(3,64)', 'black(3,65)', 'black(3,66)', 'black(3,67)', 'black(3,68)', 'black(3,69)', 'black(3,70)', 'black(3,71)', 'black(3,72)', 'black(3,73)', 'black(3,74)', 'black(3,75)', 'black(3,76)', 'black(3,77)', 'black(3,78)', 'black(3,79)', 'black(3,80)', 'black(3,81)', 'black(3,82)', 'black(3,83)', 'black(3,84)', 'black(3,85)', 'black(3,86)', 'black(3,87)', 'black(3,88)', 'black(3,89)', 'black(3,90)', 'black(3,91)', 'black(3,92)', 'black(3,93)', 'black(3,94)', 'black(3,95)', 'black(3,96)', 'black(3,97)', 'black(3,98)', 'black(3,99)', 'black(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['black(1,1)', 'black(1,2)', 'black(1,3)', 'black(1,4)', 'black(1,5)', 'black(1,6)', 'black(1,7)', 'black(1,8)', 'black(1,9)', 'black(1,10)', 'black(1,11)', 'black(1,12)', 'black(1,13)', 'black(1,14)', 'black(1,15)', 'black(1,16)', 'black(1,17)', 'black(1,18)', 'black(1,19)', 'black(1,20)', 'black(1,21)', 'black(1,22)', 'black(1,23)', 'black(1,24)', 'black(1,25)', 'black(1,26)', 'black(1,27)', 'black(1,28)', 'black(1,29)', 'black(1,30)', 'black(1,31)', 'black(1,32)', 'black(1,33)', 'black(1,34)', 'black(1,35)', 'black(1,36)', 'black(1,37)', 'black(1,38)', 'black(1,39)', 'black(1,40)', 'black(1,41)', 'black(1,42)', 'black(1,43)', 'black(1,44)', 'black(1,45)', 'black(1,46)', 'black(1,47)', 'black(1,48)', 'black(1,49)', 'black(1,50)', 'black(1,51)', 'black(1,52)', 'black(1,53)', 'black(1,54)', 'black(1,55)', 'black(1,56)', 'black(1,57)', 'black(1,58)', 'black(1,59)', 'black(1,60)', 'black(1,61)', 'black(1,62)', 'black(1,63)', 'black(1,64)', 'black(1,65)', 'black(1,66)', 'black(1,67)', 'black(1,68)', 'black(1,69)', 'black(1,70)', 'black(1,71)', 'black(1,72)', 'black(1,73)', 'black(1,74)', 'black(1,75)', 'black(1,76)', 'black(1,77)', 'black(1,78)', 'black(1,79)', 'black(1,80)', 'black(1,81)', 'black(1,82)', 'black(1,83)', 'black(1,84)', 'black(1,85)', 'black(1,86)', 'black(1,87)', 'black(1,88)', 'black(1,89)', 'black(1,90)', 'black(1,91)', 'black(1,92)', 'black(1,93)', 'black(1,94)', 'black(1,95)', 'black(1,96)', 'black(1,97)', 'black(1,98)', 'black(1,99)', 'black(1,100)', 'black(2,1)', 'black(2,2)', 'black(2,3)', 'black(2,4)', 'black(2,5)', 'black(2,6)', 'black(2,7)', 'black(2,8)', 'black(2,9)', 'black(2,10)', 'black(2,11)', 'black(2,12)', 'black(2,13)', 'black(2,14)', 'black(2,15)', 'black(2,16)', 'black(2,17)', 'black(2,18)', 'black(2,19)', 'black(2,20)', 'black(2,21)', 'black(2,22)', 'black(2,23)', 'black(2,24)', 'black(2,25)', 'black(2,26)', 'black(2,27)', 'black(2,28)', 'black(2,29)', 'black(2,30)', 'black(2,31)', 'black(2,32)', 'black(2,33)', 'black(2,34)', 'black(2,35)', 'black(2,36)', 'black(2,37)', 'black(2,38)', 'black(2,39)', 'black(2,40)', 'black(2,41)', 'black(2,42)', 'black(2,43)', 'black(2,44)', 'black(2,45)', 'black(2,46)', 'black(2,47)', 'black(2,48)', 'black(2,49)', 'black(2,50)', 'black(2,51)', 'black(2,52)', 'black(2,53)', 'black(2,54)', 'black(2,55)', 'black(2,56)', 'black(2,57)', 'black(2,58)', 'black(2,59)', 'black(2,60)', 'black(2,61)', 'black(2,62)', 'black(2,63)', 'black(2,64)', 'black(2,65)', 'black(2,66)', 'black(2,67)', 'black(2,68)', 'black(2,69)', 'black(2,70)', 'black(2,71)', 'black(2,72)', 'black(2,73)', 'black(2,74)', 'black(2,75)', 'black(2,76)', 'black(2,77)', 'black(2,78)', 'black(2,79)', 'black(2,80)', 'black(2,81)', 'black(2,82)', 'black(2,83)', 'black(2,84)', 'black(2,85)', 'black(2,86)', 'black(2,87)', 'black(2,88)', 'black(2,89)', 'black(2,90)', 'black(2,91)', 'black(2,92)', 'black(2,93)', 'black(2,94)', 'black(2,95)', 'black(2,96)', 'black(2,97)', 'black(2,98)', 'black(2,99)', 'black(2,100)', 'black(3,1)', 'black(3,2)', 'black(3,3)', 'black(3,4)', 'black(3,5)', 'black(3,6)', 'black(3,7)', 'black(3,8)', 'black(3,9)', 'black(3,10)', 'black(3,11)', 'black(3,12)', 'black(3,13)', 'black(3,14)', 'black(3,15)', 'black(3,16)', 'black(3,17)', 'black(3,18)', 'black(3,19)', 'black(3,20)', 'black(3,21)', 'black(3,22)', 'black(3,23)', 'black(3,24)', 'black(3,25)', 'black(3,26)', 'black(3,27)', 'black(3,28)', 'black(3,29)', 'black(3,30)', 'black(3,31)', 'black(3,32)', 'black(3,33)', 'black(3,34)', 'black(3,35)', 'black(3,36)', 'black(3,37)', 'black(3,38)', 'black(3,39)', 'black(3,40)', 'black(3,41)', 'black(3,42)', 'black(3,43)', 'black(3,44)', 'black(3,45)', 'black(3,46)', 'black(3,47)', 'black(3,48)', 'black(3,49)', 'black(3,50)', 'black(3,51)', 'black(3,52)', 'black(3,53)', 'black(3,54)', 'black(3,55)', 'black(3,56)', 'black(3,57)', 'black(3,58)', 'black(3,59)', 'black(3,60)', 'black(3,61)', 'black(3,62)', 'black(3,63)', 'black(3,64)', 'black(3,65)', 'black(3,66)', 'black(3,67)', 'black(3,68)', 'black(3,69)', 'black(3,70)', 'black(3,71)', 'black(3,72)', 'black(3,73)', 'black(3,74)', 'black(3,75)', 'black(3,76)', 'black(3,77)', 'black(3,78)', 'black(3,79)', 'black(3,80)', 'black(3,81)', 'black(3,82)', 'black(3,83)', 'black(3,84)', 'black(3,85)', 'black(3,86)', 'black(3,87)', 'black(3,88)', 'black(3,89)', 'black(3,90)', 'black(3,91)', 'black(3,92)', 'black(3,93)', 'black(3,94)', 'black(3,95)', 'black(3,96)', 'black(3,97)', 'black(3,98)', 'black(3,99)', 'black(3,100)', 'select(1)', 'select(2)', 'select(3)']]


126
assignment

question: 
Implement an ASP application to tag elements, defined by the predicate "quality", with one label from the set "cloud","weight".

answer from file: 
assign(X,"cloud")|assign(X,"weight"):-quality(X).

parsed from model: 
assign(X,"cloud")|assign(X,"weight"):-quality(X).

facts: 
quality(1..5).

generated: 
Implement an ASP application to tag elements, defined by the predicate "quality", with one label from the set "cloud","weight".
Answer: assign(X,"cloud")|assign(X,"weight"):-quality(X).
assign(X,"cloud"):-price(X,"city").
assign(X,"weight"):-price(X,"city").
price(X,Y):-quality(X),Y="city".
price(X,Y):-quality(X),Y="height".
price(X,Y):-weight(X),Y="city".
price(X,Y):-weight(X),Y="height".

unique_rules: 
['assign(X,"cloud")|assign(X,"weight"):-quality(X).', 'assign(X,"cloud"):-price(X,"city").', 'assign(X,"weight"):-price(X,"city").', 'price(X,Y):-quality(X),Y="city".', 'price(X,Y):-quality(X),Y="height".', 'price(X,Y):-weight(X),Y="city".', 'price(X,Y):-weight(X),Y="height".']

jaccard: 1.0

AS desired: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'assign(1,"weight")', 'assign(2,"cloud")', 'assign(3,"cloud")', 'assign(4,"weight")', 'assign(5,"cloud")']]
\AS obtained: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'assign(1,"weight")', 'assign(2,"cloud")', 'assign(3,"cloud")', 'assign(4,"weight")', 'assign(5,"cloud")']]


127
constraint

question: 
Develop an ASP application to disallow connecting the "desk" predicate having value 7 with the "toronto" label.

answer from file: 
:-assign(7,toronto).

parsed from model: 
:-assign(7,toronto).

facts: 
desk(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-desk(X).

generated: 
Develop an ASP application to disallow connecting the "desk" predicate having value 7 with the "toronto" label.
Answer: :-assign(7,toronto).
Explanation: The predicate "table" includes fields "ID","city","author","name","description","price","author","city","description","name","height","age","city","description","price","author","name","height","age","city","description","price","author","city","description","name","height","age","city","description","price","author","name","height","age","city","description","price","author","city","description","name","height","age","city","description","price","author","name","height","age","city","description","price","author","city","description","name","height","age","city","description","price","author","name

unique_rules: 
[':-assign(7,toronto).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'desk(1)', 'desk(2)', 'desk(3)', 'desk(4)', 'desk(5)', 'desk(6)', 'desk(7)', 'desk(8)', 'desk(9)', 'desk(10)', 'desk(11)', 'desk(12)', 'desk(13)', 'desk(14)', 'desk(15)', 'desk(16)', 'desk(17)', 'desk(18)', 'desk(19)', 'desk(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'desk(1)', 'desk(2)', 'desk(3)', 'desk(4)', 'desk(5)', 'desk(6)', 'desk(7)', 'desk(8)', 'desk(9)', 'desk(10)', 'desk(11)', 'desk(12)', 'desk(13)', 'desk(14)', 'desk(15)', 'desk(16)', 'desk(17)', 'desk(18)', 'desk(19)', 'desk(20)']]


128
combination

question: 
Develop an ASP solution that finds all pairings of elements from the predicates "hair" and "white".

answer from file: 
combination(X,Y):-hair(X),white(Y).

parsed from model: 
combination(X,Y):-hair(X),white(Y).

facts: 
hair(1..4).white(1..5).

generated: 
Develop an ASP solution that finds all pairings of elements from the predicates "hair" and "white".
Answer: combination(X,Y):-hair(X),white(Y).
combination(X,Y):-hair(X),not white(Y).
combination(X,Y):-not hair(X),white(Y).
combination(X,Y):-not hair(X),not white(Y).

unique_rules: 
['combination(X,Y):-hair(X),white(Y).', 'combination(X,Y):-hair(X),not white(Y).', 'combination(X,Y):-not hair(X),white(Y).', 'combination(X,Y):-not hair(X),not white(Y).']

jaccard: 1.0

AS desired: [['white(1)', 'white(2)', 'white(3)', 'white(4)', 'white(5)', 'hair(1)', 'hair(2)', 'hair(3)', 'hair(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['white(1)', 'white(2)', 'white(3)', 'white(4)', 'white(5)', 'hair(1)', 'hair(2)', 'hair(3)', 'hair(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


129
join

question: 
Develop an ASP solution that defines the predicate "flower_strength" to link each flower to the quality of strength, with "flower" having fields "ID","strengthID","quality" and "strength" having fields "ID","quality","owner".

answer from file: 
flower_strength(X,Z):-flower(X,Y,_),strength(Y,Z,_).

parsed from model: 
flower_strength(X,Z):-flower(X,Y,_),strength(Y,Z,_).

facts: 
flower("ID","strengthID","quality").strength("ID","quality","owner").

generated: 
Develop an ASP solution that defines the predicate "flower_strength" to link each flower to the quality of strength, with "flower" having fields "ID","strengthID","quality" and "strength" having fields "ID","quality","owner". Define the predicate "flower_strength" that links each flower to the quality of strength.
Answer: flower_strength(X,Z):-flower(X,Y,_),strength(Y,Z,_).
flower_strength(X,Z):-flower(X,Y,Z).

unique_rules: 
['flower_strength(X,Z):-flower(X,Y,_),strength(Y,Z,_).', 'flower_strength(X,Z):-flower(X,Y,Z).']

jaccard: 1.0

AS desired: [['flower("ID","strengthID","quality")', 'strength("ID","quality","owner")']]
\AS obtained: [['flower("ID","strengthID","quality")', 'strength("ID","quality","owner")']]


130
closure

question: 
Create an ASP solution that establishes the predicate "loops" through the transitive closure of the "moscow" predicate.

answer from file: 
loops(X,Y):-moscow(X,Y).
loops(X,Y):-moscow(X,Z),loops(Z,Y).

parsed from model: 
loops(X,Y):-moscow(X,Y).
loops(X,Y):-moscow(X,Z),loops(Z,Y).

facts: 
moscow(1..3, 1..4).

generated: 
Create an ASP solution that establishes the predicate "loops" through the transitive closure of the "moscow" predicate.
Answer: loops(X,Y):-moscow(X,Y).
loops(X,Y):-moscow(X,Z),loops(Z,Y).
loops(X,Y):-not moscow(X,Y).
loops(X,Y):-X==Y.
loops(X,Y):-X!=Y,city(X,Y).
city(X,Y):-loops(X,Y).
city(X,Y):-X,city(Y,Z),loops(Z,Y).

unique_rules: 
['loops(X,Y):-moscow(X,Y).', 'loops(X,Y):-moscow(X,Z),loops(Z,Y).', 'loops(X,Y):-not moscow(X,Y).', 'loops(X,Y):-X==Y.', 'loops(X,Y):-X!=Y,city(X,Y).', 'city(X,Y):-loops(X,Y).', 'city(X,Y):-X,city(Y,Z),loops(Z,Y).']

jaccard: 1.0

AS desired: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]
\AS obtained: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]


131
preference

question: 
Craft an ASP application to avoid the predicate "barcelona" with value "4" from being associated with "strength". If this occurs, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(4,"strength").[1@1]

parsed from model: 
:~assign(4,"strength").[1@1]

facts: 
barcelona(1..20).

generated: 
Craft an ASP application to avoid the predicate "barcelona" with value "4" from being associated with "strength". If this occurs, it incurs a cost of "1" at level "1".
Answer: :~assign(4,"strength").[1@1]
The predicate "height" includes fields "ID","city","author","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city

unique_rules: 
[':~assign(4,"strength").[1@1]']

jaccard: 1.0

AS desired: [['barcelona(1)', 'barcelona(2)', 'barcelona(3)', 'barcelona(4)', 'barcelona(5)', 'barcelona(6)', 'barcelona(7)', 'barcelona(8)', 'barcelona(9)', 'barcelona(10)', 'barcelona(11)', 'barcelona(12)', 'barcelona(13)', 'barcelona(14)', 'barcelona(15)', 'barcelona(16)', 'barcelona(17)', 'barcelona(18)', 'barcelona(19)', 'barcelona(20)']]
\AS obtained: [['barcelona(1)', 'barcelona(2)', 'barcelona(3)', 'barcelona(4)', 'barcelona(5)', 'barcelona(6)', 'barcelona(7)', 'barcelona(8)', 'barcelona(9)', 'barcelona(10)', 'barcelona(11)', 'barcelona(12)', 'barcelona(13)', 'barcelona(14)', 'barcelona(15)', 'barcelona(16)', 'barcelona(17)', 'barcelona(18)', 'barcelona(19)', 'barcelona(20)']]


132
filtering

question: 
Craft an ASP code snippet to capture all relevant values for the "cosenza" label within the "pink" predicate.

answer from file: 
select(X):-pink(X,"cosenza").

parsed from model: 
select(X):-pink(X,"cosenza").

facts: 
pink(1..5, "cosenza").

generated: 
Craft an ASP code snippet to capture all relevant values for the "cosenza" label within the "pink" predicate.
Answer: select(X):-pink(X,"cosenza").
pink(X,"cosenza")|select(X):-pink(X,"city").
pink(X,"city")|select(X):-pink(X,"moto").
pink(X,"moto")|select(X):-pink(X,"author").
pink(X,"author")|select(X):-pink(X,"description").
pink(X,"description")|select(X):-pink(X,"height").
pink(X,"height").

unique_rules: 
['select(X):-pink(X,"cosenza").', 'pink(X,"cosenza")|select(X):-pink(X,"city").', 'pink(X,"city")|select(X):-pink(X,"moto").', 'pink(X,"moto")|select(X):-pink(X,"author").', 'pink(X,"author")|select(X):-pink(X,"description").', 'pink(X,"description")|select(X):-pink(X,"height").']

jaccard: 1.0

AS desired: [['pink(1,"cosenza")', 'pink(2,"cosenza")', 'pink(3,"cosenza")', 'pink(4,"cosenza")', 'pink(5,"cosenza")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['pink(1,"cosenza")', 'pink(2,"cosenza")', 'pink(3,"cosenza")', 'pink(4,"cosenza")', 'pink(5,"cosenza")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


133
negative_filtering

question: 
Produce an ASP program to gather values associated with the predicate "mumbai" but not linked to the predicate "black" and labeled "white".

answer from file: 
select(X):-mumbai(X),not black(X,"white").

parsed from model: 
select(X):-mumbai(X),not black(X,"white").

facts: 
mumbai(1..3).black(1,"mumbai").black(2,"hair").black(3,"toronto").

generated: 
Produce an ASP program to gather values associated with the predicate "mumbai" but not linked to the predicate "black" and labeled "white".
Answer: select(X):-mumbai(X),not black(X,"white").
mumbai(X):-city(X),height(X,18).
black(X,"white").
height(X,Y):-city(X),Y.

unique_rules: 
['select(X):-mumbai(X),not black(X,"white").', 'mumbai(X):-city(X),height(X,18).', 'height(X,Y):-city(X),Y.']

jaccard: 1.0

AS desired: [['mumbai(1)', 'mumbai(2)', 'mumbai(3)', 'black(1,"mumbai")', 'black(2,"hair")', 'black(3,"toronto")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['mumbai(1)', 'mumbai(2)', 'mumbai(3)', 'black(1,"mumbai")', 'black(2,"hair")', 'black(3,"toronto")', 'select(1)', 'select(2)', 'select(3)']]


134
numeric_filtering

question: 
Design an ASP solution to capture all values tied to the predicate "quality" with a value different than 76.

answer from file: 
select(X):-quality(X,C),C!=76.

parsed from model: 
select(X):-quality(X,C),C!=76.

facts: 
quality(1..3, 1..100).

generated: 
Design an ASP solution to capture all values tied to the predicate "quality" with a value different than 76.
Answer: select(X):-quality(X,C),C!=76.
select(X):-quality(X,C),C==76.

unique_rules: 
['select(X):-quality(X,C),C!=76.', 'select(X):-quality(X,C),C==76.']

jaccard: 1.0

AS desired: [['quality(1,1)', 'quality(1,2)', 'quality(1,3)', 'quality(1,4)', 'quality(1,5)', 'quality(1,6)', 'quality(1,7)', 'quality(1,8)', 'quality(1,9)', 'quality(1,10)', 'quality(1,11)', 'quality(1,12)', 'quality(1,13)', 'quality(1,14)', 'quality(1,15)', 'quality(1,16)', 'quality(1,17)', 'quality(1,18)', 'quality(1,19)', 'quality(1,20)', 'quality(1,21)', 'quality(1,22)', 'quality(1,23)', 'quality(1,24)', 'quality(1,25)', 'quality(1,26)', 'quality(1,27)', 'quality(1,28)', 'quality(1,29)', 'quality(1,30)', 'quality(1,31)', 'quality(1,32)', 'quality(1,33)', 'quality(1,34)', 'quality(1,35)', 'quality(1,36)', 'quality(1,37)', 'quality(1,38)', 'quality(1,39)', 'quality(1,40)', 'quality(1,41)', 'quality(1,42)', 'quality(1,43)', 'quality(1,44)', 'quality(1,45)', 'quality(1,46)', 'quality(1,47)', 'quality(1,48)', 'quality(1,49)', 'quality(1,50)', 'quality(1,51)', 'quality(1,52)', 'quality(1,53)', 'quality(1,54)', 'quality(1,55)', 'quality(1,56)', 'quality(1,57)', 'quality(1,58)', 'quality(1,59)', 'quality(1,60)', 'quality(1,61)', 'quality(1,62)', 'quality(1,63)', 'quality(1,64)', 'quality(1,65)', 'quality(1,66)', 'quality(1,67)', 'quality(1,68)', 'quality(1,69)', 'quality(1,70)', 'quality(1,71)', 'quality(1,72)', 'quality(1,73)', 'quality(1,74)', 'quality(1,75)', 'quality(1,76)', 'quality(1,77)', 'quality(1,78)', 'quality(1,79)', 'quality(1,80)', 'quality(1,81)', 'quality(1,82)', 'quality(1,83)', 'quality(1,84)', 'quality(1,85)', 'quality(1,86)', 'quality(1,87)', 'quality(1,88)', 'quality(1,89)', 'quality(1,90)', 'quality(1,91)', 'quality(1,92)', 'quality(1,93)', 'quality(1,94)', 'quality(1,95)', 'quality(1,96)', 'quality(1,97)', 'quality(1,98)', 'quality(1,99)', 'quality(1,100)', 'quality(2,1)', 'quality(2,2)', 'quality(2,3)', 'quality(2,4)', 'quality(2,5)', 'quality(2,6)', 'quality(2,7)', 'quality(2,8)', 'quality(2,9)', 'quality(2,10)', 'quality(2,11)', 'quality(2,12)', 'quality(2,13)', 'quality(2,14)', 'quality(2,15)', 'quality(2,16)', 'quality(2,17)', 'quality(2,18)', 'quality(2,19)', 'quality(2,20)', 'quality(2,21)', 'quality(2,22)', 'quality(2,23)', 'quality(2,24)', 'quality(2,25)', 'quality(2,26)', 'quality(2,27)', 'quality(2,28)', 'quality(2,29)', 'quality(2,30)', 'quality(2,31)', 'quality(2,32)', 'quality(2,33)', 'quality(2,34)', 'quality(2,35)', 'quality(2,36)', 'quality(2,37)', 'quality(2,38)', 'quality(2,39)', 'quality(2,40)', 'quality(2,41)', 'quality(2,42)', 'quality(2,43)', 'quality(2,44)', 'quality(2,45)', 'quality(2,46)', 'quality(2,47)', 'quality(2,48)', 'quality(2,49)', 'quality(2,50)', 'quality(2,51)', 'quality(2,52)', 'quality(2,53)', 'quality(2,54)', 'quality(2,55)', 'quality(2,56)', 'quality(2,57)', 'quality(2,58)', 'quality(2,59)', 'quality(2,60)', 'quality(2,61)', 'quality(2,62)', 'quality(2,63)', 'quality(2,64)', 'quality(2,65)', 'quality(2,66)', 'quality(2,67)', 'quality(2,68)', 'quality(2,69)', 'quality(2,70)', 'quality(2,71)', 'quality(2,72)', 'quality(2,73)', 'quality(2,74)', 'quality(2,75)', 'quality(2,76)', 'quality(2,77)', 'quality(2,78)', 'quality(2,79)', 'quality(2,80)', 'quality(2,81)', 'quality(2,82)', 'quality(2,83)', 'quality(2,84)', 'quality(2,85)', 'quality(2,86)', 'quality(2,87)', 'quality(2,88)', 'quality(2,89)', 'quality(2,90)', 'quality(2,91)', 'quality(2,92)', 'quality(2,93)', 'quality(2,94)', 'quality(2,95)', 'quality(2,96)', 'quality(2,97)', 'quality(2,98)', 'quality(2,99)', 'quality(2,100)', 'quality(3,1)', 'quality(3,2)', 'quality(3,3)', 'quality(3,4)', 'quality(3,5)', 'quality(3,6)', 'quality(3,7)', 'quality(3,8)', 'quality(3,9)', 'quality(3,10)', 'quality(3,11)', 'quality(3,12)', 'quality(3,13)', 'quality(3,14)', 'quality(3,15)', 'quality(3,16)', 'quality(3,17)', 'quality(3,18)', 'quality(3,19)', 'quality(3,20)', 'quality(3,21)', 'quality(3,22)', 'quality(3,23)', 'quality(3,24)', 'quality(3,25)', 'quality(3,26)', 'quality(3,27)', 'quality(3,28)', 'quality(3,29)', 'quality(3,30)', 'quality(3,31)', 'quality(3,32)', 'quality(3,33)', 'quality(3,34)', 'quality(3,35)', 'quality(3,36)', 'quality(3,37)', 'quality(3,38)', 'quality(3,39)', 'quality(3,40)', 'quality(3,41)', 'quality(3,42)', 'quality(3,43)', 'quality(3,44)', 'quality(3,45)', 'quality(3,46)', 'quality(3,47)', 'quality(3,48)', 'quality(3,49)', 'quality(3,50)', 'quality(3,51)', 'quality(3,52)', 'quality(3,53)', 'quality(3,54)', 'quality(3,55)', 'quality(3,56)', 'quality(3,57)', 'quality(3,58)', 'quality(3,59)', 'quality(3,60)', 'quality(3,61)', 'quality(3,62)', 'quality(3,63)', 'quality(3,64)', 'quality(3,65)', 'quality(3,66)', 'quality(3,67)', 'quality(3,68)', 'quality(3,69)', 'quality(3,70)', 'quality(3,71)', 'quality(3,72)', 'quality(3,73)', 'quality(3,74)', 'quality(3,75)', 'quality(3,76)', 'quality(3,77)', 'quality(3,78)', 'quality(3,79)', 'quality(3,80)', 'quality(3,81)', 'quality(3,82)', 'quality(3,83)', 'quality(3,84)', 'quality(3,85)', 'quality(3,86)', 'quality(3,87)', 'quality(3,88)', 'quality(3,89)', 'quality(3,90)', 'quality(3,91)', 'quality(3,92)', 'quality(3,93)', 'quality(3,94)', 'quality(3,95)', 'quality(3,96)', 'quality(3,97)', 'quality(3,98)', 'quality(3,99)', 'quality(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['quality(1,1)', 'quality(1,2)', 'quality(1,3)', 'quality(1,4)', 'quality(1,5)', 'quality(1,6)', 'quality(1,7)', 'quality(1,8)', 'quality(1,9)', 'quality(1,10)', 'quality(1,11)', 'quality(1,12)', 'quality(1,13)', 'quality(1,14)', 'quality(1,15)', 'quality(1,16)', 'quality(1,17)', 'quality(1,18)', 'quality(1,19)', 'quality(1,20)', 'quality(1,21)', 'quality(1,22)', 'quality(1,23)', 'quality(1,24)', 'quality(1,25)', 'quality(1,26)', 'quality(1,27)', 'quality(1,28)', 'quality(1,29)', 'quality(1,30)', 'quality(1,31)', 'quality(1,32)', 'quality(1,33)', 'quality(1,34)', 'quality(1,35)', 'quality(1,36)', 'quality(1,37)', 'quality(1,38)', 'quality(1,39)', 'quality(1,40)', 'quality(1,41)', 'quality(1,42)', 'quality(1,43)', 'quality(1,44)', 'quality(1,45)', 'quality(1,46)', 'quality(1,47)', 'quality(1,48)', 'quality(1,49)', 'quality(1,50)', 'quality(1,51)', 'quality(1,52)', 'quality(1,53)', 'quality(1,54)', 'quality(1,55)', 'quality(1,56)', 'quality(1,57)', 'quality(1,58)', 'quality(1,59)', 'quality(1,60)', 'quality(1,61)', 'quality(1,62)', 'quality(1,63)', 'quality(1,64)', 'quality(1,65)', 'quality(1,66)', 'quality(1,67)', 'quality(1,68)', 'quality(1,69)', 'quality(1,70)', 'quality(1,71)', 'quality(1,72)', 'quality(1,73)', 'quality(1,74)', 'quality(1,75)', 'quality(1,76)', 'quality(1,77)', 'quality(1,78)', 'quality(1,79)', 'quality(1,80)', 'quality(1,81)', 'quality(1,82)', 'quality(1,83)', 'quality(1,84)', 'quality(1,85)', 'quality(1,86)', 'quality(1,87)', 'quality(1,88)', 'quality(1,89)', 'quality(1,90)', 'quality(1,91)', 'quality(1,92)', 'quality(1,93)', 'quality(1,94)', 'quality(1,95)', 'quality(1,96)', 'quality(1,97)', 'quality(1,98)', 'quality(1,99)', 'quality(1,100)', 'quality(2,1)', 'quality(2,2)', 'quality(2,3)', 'quality(2,4)', 'quality(2,5)', 'quality(2,6)', 'quality(2,7)', 'quality(2,8)', 'quality(2,9)', 'quality(2,10)', 'quality(2,11)', 'quality(2,12)', 'quality(2,13)', 'quality(2,14)', 'quality(2,15)', 'quality(2,16)', 'quality(2,17)', 'quality(2,18)', 'quality(2,19)', 'quality(2,20)', 'quality(2,21)', 'quality(2,22)', 'quality(2,23)', 'quality(2,24)', 'quality(2,25)', 'quality(2,26)', 'quality(2,27)', 'quality(2,28)', 'quality(2,29)', 'quality(2,30)', 'quality(2,31)', 'quality(2,32)', 'quality(2,33)', 'quality(2,34)', 'quality(2,35)', 'quality(2,36)', 'quality(2,37)', 'quality(2,38)', 'quality(2,39)', 'quality(2,40)', 'quality(2,41)', 'quality(2,42)', 'quality(2,43)', 'quality(2,44)', 'quality(2,45)', 'quality(2,46)', 'quality(2,47)', 'quality(2,48)', 'quality(2,49)', 'quality(2,50)', 'quality(2,51)', 'quality(2,52)', 'quality(2,53)', 'quality(2,54)', 'quality(2,55)', 'quality(2,56)', 'quality(2,57)', 'quality(2,58)', 'quality(2,59)', 'quality(2,60)', 'quality(2,61)', 'quality(2,62)', 'quality(2,63)', 'quality(2,64)', 'quality(2,65)', 'quality(2,66)', 'quality(2,67)', 'quality(2,68)', 'quality(2,69)', 'quality(2,70)', 'quality(2,71)', 'quality(2,72)', 'quality(2,73)', 'quality(2,74)', 'quality(2,75)', 'quality(2,76)', 'quality(2,77)', 'quality(2,78)', 'quality(2,79)', 'quality(2,80)', 'quality(2,81)', 'quality(2,82)', 'quality(2,83)', 'quality(2,84)', 'quality(2,85)', 'quality(2,86)', 'quality(2,87)', 'quality(2,88)', 'quality(2,89)', 'quality(2,90)', 'quality(2,91)', 'quality(2,92)', 'quality(2,93)', 'quality(2,94)', 'quality(2,95)', 'quality(2,96)', 'quality(2,97)', 'quality(2,98)', 'quality(2,99)', 'quality(2,100)', 'quality(3,1)', 'quality(3,2)', 'quality(3,3)', 'quality(3,4)', 'quality(3,5)', 'quality(3,6)', 'quality(3,7)', 'quality(3,8)', 'quality(3,9)', 'quality(3,10)', 'quality(3,11)', 'quality(3,12)', 'quality(3,13)', 'quality(3,14)', 'quality(3,15)', 'quality(3,16)', 'quality(3,17)', 'quality(3,18)', 'quality(3,19)', 'quality(3,20)', 'quality(3,21)', 'quality(3,22)', 'quality(3,23)', 'quality(3,24)', 'quality(3,25)', 'quality(3,26)', 'quality(3,27)', 'quality(3,28)', 'quality(3,29)', 'quality(3,30)', 'quality(3,31)', 'quality(3,32)', 'quality(3,33)', 'quality(3,34)', 'quality(3,35)', 'quality(3,36)', 'quality(3,37)', 'quality(3,38)', 'quality(3,39)', 'quality(3,40)', 'quality(3,41)', 'quality(3,42)', 'quality(3,43)', 'quality(3,44)', 'quality(3,45)', 'quality(3,46)', 'quality(3,47)', 'quality(3,48)', 'quality(3,49)', 'quality(3,50)', 'quality(3,51)', 'quality(3,52)', 'quality(3,53)', 'quality(3,54)', 'quality(3,55)', 'quality(3,56)', 'quality(3,57)', 'quality(3,58)', 'quality(3,59)', 'quality(3,60)', 'quality(3,61)', 'quality(3,62)', 'quality(3,63)', 'quality(3,64)', 'quality(3,65)', 'quality(3,66)', 'quality(3,67)', 'quality(3,68)', 'quality(3,69)', 'quality(3,70)', 'quality(3,71)', 'quality(3,72)', 'quality(3,73)', 'quality(3,74)', 'quality(3,75)', 'quality(3,76)', 'quality(3,77)', 'quality(3,78)', 'quality(3,79)', 'quality(3,80)', 'quality(3,81)', 'quality(3,82)', 'quality(3,83)', 'quality(3,84)', 'quality(3,85)', 'quality(3,86)', 'quality(3,87)', 'quality(3,88)', 'quality(3,89)', 'quality(3,90)', 'quality(3,91)', 'quality(3,92)', 'quality(3,93)', 'quality(3,94)', 'quality(3,95)', 'quality(3,96)', 'quality(3,97)', 'quality(3,98)', 'quality(3,99)', 'quality(3,100)', 'select(1)', 'select(2)', 'select(3)']]


135
assignment

question: 
Write an ASP code snippet to connect a single label from "weight","lightblue","wall","cloud","pink","desk","chicago","cosenza" to elements specified by the predicate "white".

answer from file: 
assign(X,"weight")|assign(X,"lightblue")|assign(X,"wall")|assign(X,"cloud")|assign(X,"pink")|assign(X,"desk")|assign(X,"chicago")|assign(X,"cosenza"):-white(X).

parsed from model: 
assign(X,"weight")|assign(X,"lightblue")|assign(X,"wall")|assign(X,"cloud")|assign(X,"pink")|assign(X,"desk")|assign(X,"chicago")|assign(X,"cosenza"):-white(X).

facts: 
white(1..5).

generated: 
Write an ASP code snippet to connect a single label from "weight","lightblue","wall","cloud","pink","desk","chicago","cosenza" to elements specified by the predicate "white".
Answer: assign(X,"weight")|assign(X,"lightblue")|assign(X,"wall")|assign(X,"cloud")|assign(X,"pink")|assign(X,"desk")|assign(X,"chicago")|assign(X,"cosenza"):-white(X).

unique_rules: 
['assign(X,"weight")|assign(X,"lightblue")|assign(X,"wall")|assign(X,"cloud")|assign(X,"pink")|assign(X,"desk")|assign(X,"chicago")|assign(X,"cosenza"):-white(X).']

jaccard: 1.0

AS desired: [['white(1)', 'white(2)', 'white(3)', 'white(4)', 'white(5)', 'assign(1,"cosenza")', 'assign(2,"cosenza")', 'assign(3,"chicago")', 'assign(4,"cosenza")', 'assign(5,"cosenza")']]
\AS obtained: [['white(1)', 'white(2)', 'white(3)', 'white(4)', 'white(5)', 'assign(1,"cosenza")', 'assign(2,"cosenza")', 'assign(3,"chicago")', 'assign(4,"cosenza")', 'assign(5,"cosenza")']]


136
constraint

question: 
Compose an ASP solution to ensure the "weight" predicate with value 19 is not associated with the label "delhi".

answer from file: 
:-assign(19,delhi).

parsed from model: 


facts: 
weight(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-weight(X).

generated: 
Compose an ASP solution to ensure the "weight" predicate with value 19 is not associated with the label "delhi".
```python
assign(19,"delhi")
```
This code uses the "assign" function to associate the "delhi" label with the "weight" value.
The "assign" function takes two arguments: the value to be assigned and the label to be associated.
The "delhi" label is not associated with the "weight" value.

unique_rules: 
[]

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'weight(1)', 'weight(2)', 'weight(3)', 'weight(4)', 'weight(5)', 'weight(6)', 'weight(7)', 'weight(8)', 'weight(9)', 'weight(10)', 'weight(11)', 'weight(12)', 'weight(13)', 'weight(14)', 'weight(15)', 'weight(16)', 'weight(17)', 'weight(18)', 'weight(19)', 'weight(20)']]
\AS obtained: [['weight(1)', 'weight(2)', 'weight(3)', 'weight(4)', 'weight(5)', 'weight(6)', 'weight(7)', 'weight(8)', 'weight(9)', 'weight(10)', 'weight(11)', 'weight(12)', 'weight(13)', 'weight(14)', 'weight(15)', 'weight(16)', 'weight(17)', 'weight(18)', 'weight(19)', 'weight(20)', 'assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")']]


137
combination

question: 
Develop an ASP solution that finds all pairings of elements from the predicates "toronto" and "strength".

answer from file: 
combination(X,Y):-toronto(X),strength(Y).

parsed from model: 
combination(X,Y):-toronto(X),strength(Y).

facts: 
toronto(1..4).strength(1..5).

generated: 
Develop an ASP solution that finds all pairings of elements from the predicates "toronto" and "strength".
Answer: combination(X,Y):-toronto(X),strength(Y).
combination(X,Y):-toronto(X),not strength(Y).
combination(X,Y):-not toronto(X),strength(Y).

unique_rules: 
['combination(X,Y):-toronto(X),strength(Y).', 'combination(X,Y):-toronto(X),not strength(Y).', 'combination(X,Y):-not toronto(X),strength(Y).']

jaccard: 1.0

AS desired: [['strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'toronto(1)', 'toronto(2)', 'toronto(3)', 'toronto(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'toronto(1)', 'toronto(2)', 'toronto(3)', 'toronto(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


138
join

question: 
Create an ASP solution to define the predicate "pink_white" that links each pink to the surname of white, given "pink" has fields "ID","strength","whiteID","surname" and "white" has fields "ID","surname","owner".

answer from file: 
pink_white(X,Z):-pink(X,_,Y,_),white(Y,Z,_).

parsed from model: 
pink_white(X,Z):-pink(X,_,Y,_),white(Y,_,Z).

facts: 
pink("ID","strength","whiteID","surname").white("ID","surname","owner").

generated: 
Create an ASP solution to define the predicate "pink_white" that links each pink to the surname of white, given "pink" has fields "ID","strength","whiteID","surname" and "white" has fields "ID","surname","owner". Define the predicate "pink_white" that links each pink to the owner of white.
Answer: pink_white(X,Z):-pink(X,_,Y,_),white(Y,_,Z).
pink_white(X,Z):-pink(X,_,Y,_),white(Y,_,Z).

unique_rules: 
['pink_white(X,Z):-pink(X,_,Y,_),white(Y,_,Z).']

jaccard: 1.0

AS desired: [['pink("ID","strength","whiteID","surname")', 'white("ID","surname","owner")']]
\AS obtained: [['pink("ID","strength","whiteID","surname")', 'white("ID","surname","owner")']]


139
closure

question: 
Design an ASP code to link the predicate "surname" to its transitive closure, defined as "loops".

answer from file: 
loops(X,Y):-surname(X,Y).
loops(X,Y):-surname(X,Z),loops(Z,Y).

parsed from model: 
loops(X,Y):-surname(X,Y).
loops(X,Y):-surname(X,Z),loops(Z,Y).

facts: 
surname(1..3, 1..4).

generated: 
Design an ASP code to link the predicate "surname" to its transitive closure, defined as "loops".
loops(X,Y):-surname(X,Y).
loops(X,Y):-surname(X,Z),loops(Z,Y).
loops(X,Y):- assurent(X,Y).
 assurent(X,Y):- assurent(X,Z),loops(Z,Y).

unique_rules: 
['loops(X,Y):-surname(X,Y).', 'loops(X,Y):-surname(X,Z),loops(Z,Y).', 'loops(X,Y):- assurent(X,Y).', 'assurent(X,Y):- assurent(X,Z),loops(Z,Y).']

jaccard: 1.0

AS desired: [['surname(1,1)', 'surname(1,2)', 'surname(1,3)', 'surname(1,4)', 'surname(2,1)', 'surname(2,2)', 'surname(2,3)', 'surname(2,4)', 'surname(3,1)', 'surname(3,2)', 'surname(3,3)', 'surname(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]
\AS obtained: [['surname(1,1)', 'surname(1,2)', 'surname(1,3)', 'surname(1,4)', 'surname(2,1)', 'surname(2,2)', 'surname(2,3)', 'surname(2,4)', 'surname(3,1)', 'surname(3,2)', 'surname(3,3)', 'surname(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]


140
preference

question: 
Generate an ASP program to disallow the association of the predicate "moscow" with value "5" with "storm". If associated, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(5,"storm").[1@1]

parsed from model: 
:~assign(5,"storm").[1@1]

facts: 
moscow(1..20).

generated: 
Generate an ASP program to disallow the association of the predicate "moscow" with value "5" with "storm". If associated, it incurs a cost of "1" at level "1".
Answer: :~assign(5,"storm").[1@1]
This program uses the predicate "moto" with fields "ID","height","author","city","price","name","description","author","city","price","description","height","name","author","city","price","description","height","name","author","city","price","description","height","name","author","city","price","description","height","name","author","city","price","description","height","name","author","city","price","description","height","name","author","city","price","description","height","name","author","city","price","description","height","name","author","city","price","description","height","name","

unique_rules: 
[':~assign(5,"storm").[1@1]']

jaccard: 1.0

AS desired: [['moscow(1)', 'moscow(2)', 'moscow(3)', 'moscow(4)', 'moscow(5)', 'moscow(6)', 'moscow(7)', 'moscow(8)', 'moscow(9)', 'moscow(10)', 'moscow(11)', 'moscow(12)', 'moscow(13)', 'moscow(14)', 'moscow(15)', 'moscow(16)', 'moscow(17)', 'moscow(18)', 'moscow(19)', 'moscow(20)']]
\AS obtained: [['moscow(1)', 'moscow(2)', 'moscow(3)', 'moscow(4)', 'moscow(5)', 'moscow(6)', 'moscow(7)', 'moscow(8)', 'moscow(9)', 'moscow(10)', 'moscow(11)', 'moscow(12)', 'moscow(13)', 'moscow(14)', 'moscow(15)', 'moscow(16)', 'moscow(17)', 'moscow(18)', 'moscow(19)', 'moscow(20)']]


141
filtering

question: 
Create an ASP code to retrieve values associated with the label "barcelona" within the "singapore" predicate.

answer from file: 
select(X):-singapore(X,"barcelona").

parsed from model: 
select(X):-singapore(X,"barcelona").

facts: 
singapore(1..5, "barcelona").

generated: 
Create an ASP code to retrieve values associated with the label "barcelona" within the "singapore" predicate.
Answer: select(X):-singapore(X,"barcelona").
 áng=select(X):-singapore(X,"author").
 áng(X):-singapore(X,"city").
 áng(X):-singapore(X,"description").
 áng(X):-singapore(X,"height").
 áng(X):-singapore(X,"name").
 áng(X):-singapore(X,"price").
 áng(X):-singapore(X,"author","description").

unique_rules: 
['select(X):-singapore(X,"barcelona").', 'áng=select(X):-singapore(X,"author").', 'áng(X):-singapore(X,"city").', 'áng(X):-singapore(X,"description").', 'áng(X):-singapore(X,"height").', 'áng(X):-singapore(X,"name").', 'áng(X):-singapore(X,"price").', 'áng(X):-singapore(X,"author","description").']

jaccard: 1.0

AS desired: [['singapore(1,"barcelona")', 'singapore(2,"barcelona")', 'singapore(3,"barcelona")', 'singapore(4,"barcelona")', 'singapore(5,"barcelona")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['singapore(1,"barcelona")', 'singapore(2,"barcelona")', 'singapore(3,"barcelona")', 'singapore(4,"barcelona")', 'singapore(5,"barcelona")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


142
negative_filtering

question: 
Write an ASP script to select values connected to the predicate "laptop" but not associated with the predicate "weight" and labeled "strength".

answer from file: 
select(X):-laptop(X),not weight(X,"strength").

parsed from model: 
select(X):-laptop(X),not weight(X,"strength").

facts: 
laptop(1..3).weight(1,"surname").weight(2,"quality").weight(3,"desk").

generated: 
Write an ASP script to select values connected to the predicate "laptop" but not associated with the predicate "weight" and labeled "strength".
Answer: select(X):-laptop(X),not weight(X,"strength").

unique_rules: 
['select(X):-laptop(X),not weight(X,"strength").']

jaccard: 1.0

AS desired: [['laptop(1)', 'laptop(2)', 'laptop(3)', 'weight(1,"surname")', 'weight(2,"quality")', 'weight(3,"desk")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['laptop(1)', 'laptop(2)', 'laptop(3)', 'weight(1,"surname")', 'weight(2,"quality")', 'weight(3,"desk")', 'select(1)', 'select(2)', 'select(3)']]


143
numeric_filtering

question: 
Craft an ASP program to fetch values linked to the predicate "toronto" with a value different than 73.

answer from file: 
select(X):-toronto(X,C),C!=73.

parsed from model: 
select(X):-toronto(X,C),C!=73.

facts: 
toronto(1..3, 1..100).

generated: 
Craft an ASP program to fetch values linked to the predicate "toronto" with a value different than 73.
Answer: select(X):-toronto(X,C),C!=73.
 áng=select(X):-toronto(X,C),C==73.
 áng(X,C):-toronto(X,C).
 áng(X,C):-not toronto(X,C).

unique_rules: 
['select(X):-toronto(X,C),C!=73.', 'áng=select(X):-toronto(X,C),C==73.', 'áng(X,C):-toronto(X,C).', 'áng(X,C):-not toronto(X,C).']

jaccard: 1.0

AS desired: [['toronto(1,1)', 'toronto(1,2)', 'toronto(1,3)', 'toronto(1,4)', 'toronto(1,5)', 'toronto(1,6)', 'toronto(1,7)', 'toronto(1,8)', 'toronto(1,9)', 'toronto(1,10)', 'toronto(1,11)', 'toronto(1,12)', 'toronto(1,13)', 'toronto(1,14)', 'toronto(1,15)', 'toronto(1,16)', 'toronto(1,17)', 'toronto(1,18)', 'toronto(1,19)', 'toronto(1,20)', 'toronto(1,21)', 'toronto(1,22)', 'toronto(1,23)', 'toronto(1,24)', 'toronto(1,25)', 'toronto(1,26)', 'toronto(1,27)', 'toronto(1,28)', 'toronto(1,29)', 'toronto(1,30)', 'toronto(1,31)', 'toronto(1,32)', 'toronto(1,33)', 'toronto(1,34)', 'toronto(1,35)', 'toronto(1,36)', 'toronto(1,37)', 'toronto(1,38)', 'toronto(1,39)', 'toronto(1,40)', 'toronto(1,41)', 'toronto(1,42)', 'toronto(1,43)', 'toronto(1,44)', 'toronto(1,45)', 'toronto(1,46)', 'toronto(1,47)', 'toronto(1,48)', 'toronto(1,49)', 'toronto(1,50)', 'toronto(1,51)', 'toronto(1,52)', 'toronto(1,53)', 'toronto(1,54)', 'toronto(1,55)', 'toronto(1,56)', 'toronto(1,57)', 'toronto(1,58)', 'toronto(1,59)', 'toronto(1,60)', 'toronto(1,61)', 'toronto(1,62)', 'toronto(1,63)', 'toronto(1,64)', 'toronto(1,65)', 'toronto(1,66)', 'toronto(1,67)', 'toronto(1,68)', 'toronto(1,69)', 'toronto(1,70)', 'toronto(1,71)', 'toronto(1,72)', 'toronto(1,73)', 'toronto(1,74)', 'toronto(1,75)', 'toronto(1,76)', 'toronto(1,77)', 'toronto(1,78)', 'toronto(1,79)', 'toronto(1,80)', 'toronto(1,81)', 'toronto(1,82)', 'toronto(1,83)', 'toronto(1,84)', 'toronto(1,85)', 'toronto(1,86)', 'toronto(1,87)', 'toronto(1,88)', 'toronto(1,89)', 'toronto(1,90)', 'toronto(1,91)', 'toronto(1,92)', 'toronto(1,93)', 'toronto(1,94)', 'toronto(1,95)', 'toronto(1,96)', 'toronto(1,97)', 'toronto(1,98)', 'toronto(1,99)', 'toronto(1,100)', 'toronto(2,1)', 'toronto(2,2)', 'toronto(2,3)', 'toronto(2,4)', 'toronto(2,5)', 'toronto(2,6)', 'toronto(2,7)', 'toronto(2,8)', 'toronto(2,9)', 'toronto(2,10)', 'toronto(2,11)', 'toronto(2,12)', 'toronto(2,13)', 'toronto(2,14)', 'toronto(2,15)', 'toronto(2,16)', 'toronto(2,17)', 'toronto(2,18)', 'toronto(2,19)', 'toronto(2,20)', 'toronto(2,21)', 'toronto(2,22)', 'toronto(2,23)', 'toronto(2,24)', 'toronto(2,25)', 'toronto(2,26)', 'toronto(2,27)', 'toronto(2,28)', 'toronto(2,29)', 'toronto(2,30)', 'toronto(2,31)', 'toronto(2,32)', 'toronto(2,33)', 'toronto(2,34)', 'toronto(2,35)', 'toronto(2,36)', 'toronto(2,37)', 'toronto(2,38)', 'toronto(2,39)', 'toronto(2,40)', 'toronto(2,41)', 'toronto(2,42)', 'toronto(2,43)', 'toronto(2,44)', 'toronto(2,45)', 'toronto(2,46)', 'toronto(2,47)', 'toronto(2,48)', 'toronto(2,49)', 'toronto(2,50)', 'toronto(2,51)', 'toronto(2,52)', 'toronto(2,53)', 'toronto(2,54)', 'toronto(2,55)', 'toronto(2,56)', 'toronto(2,57)', 'toronto(2,58)', 'toronto(2,59)', 'toronto(2,60)', 'toronto(2,61)', 'toronto(2,62)', 'toronto(2,63)', 'toronto(2,64)', 'toronto(2,65)', 'toronto(2,66)', 'toronto(2,67)', 'toronto(2,68)', 'toronto(2,69)', 'toronto(2,70)', 'toronto(2,71)', 'toronto(2,72)', 'toronto(2,73)', 'toronto(2,74)', 'toronto(2,75)', 'toronto(2,76)', 'toronto(2,77)', 'toronto(2,78)', 'toronto(2,79)', 'toronto(2,80)', 'toronto(2,81)', 'toronto(2,82)', 'toronto(2,83)', 'toronto(2,84)', 'toronto(2,85)', 'toronto(2,86)', 'toronto(2,87)', 'toronto(2,88)', 'toronto(2,89)', 'toronto(2,90)', 'toronto(2,91)', 'toronto(2,92)', 'toronto(2,93)', 'toronto(2,94)', 'toronto(2,95)', 'toronto(2,96)', 'toronto(2,97)', 'toronto(2,98)', 'toronto(2,99)', 'toronto(2,100)', 'toronto(3,1)', 'toronto(3,2)', 'toronto(3,3)', 'toronto(3,4)', 'toronto(3,5)', 'toronto(3,6)', 'toronto(3,7)', 'toronto(3,8)', 'toronto(3,9)', 'toronto(3,10)', 'toronto(3,11)', 'toronto(3,12)', 'toronto(3,13)', 'toronto(3,14)', 'toronto(3,15)', 'toronto(3,16)', 'toronto(3,17)', 'toronto(3,18)', 'toronto(3,19)', 'toronto(3,20)', 'toronto(3,21)', 'toronto(3,22)', 'toronto(3,23)', 'toronto(3,24)', 'toronto(3,25)', 'toronto(3,26)', 'toronto(3,27)', 'toronto(3,28)', 'toronto(3,29)', 'toronto(3,30)', 'toronto(3,31)', 'toronto(3,32)', 'toronto(3,33)', 'toronto(3,34)', 'toronto(3,35)', 'toronto(3,36)', 'toronto(3,37)', 'toronto(3,38)', 'toronto(3,39)', 'toronto(3,40)', 'toronto(3,41)', 'toronto(3,42)', 'toronto(3,43)', 'toronto(3,44)', 'toronto(3,45)', 'toronto(3,46)', 'toronto(3,47)', 'toronto(3,48)', 'toronto(3,49)', 'toronto(3,50)', 'toronto(3,51)', 'toronto(3,52)', 'toronto(3,53)', 'toronto(3,54)', 'toronto(3,55)', 'toronto(3,56)', 'toronto(3,57)', 'toronto(3,58)', 'toronto(3,59)', 'toronto(3,60)', 'toronto(3,61)', 'toronto(3,62)', 'toronto(3,63)', 'toronto(3,64)', 'toronto(3,65)', 'toronto(3,66)', 'toronto(3,67)', 'toronto(3,68)', 'toronto(3,69)', 'toronto(3,70)', 'toronto(3,71)', 'toronto(3,72)', 'toronto(3,73)', 'toronto(3,74)', 'toronto(3,75)', 'toronto(3,76)', 'toronto(3,77)', 'toronto(3,78)', 'toronto(3,79)', 'toronto(3,80)', 'toronto(3,81)', 'toronto(3,82)', 'toronto(3,83)', 'toronto(3,84)', 'toronto(3,85)', 'toronto(3,86)', 'toronto(3,87)', 'toronto(3,88)', 'toronto(3,89)', 'toronto(3,90)', 'toronto(3,91)', 'toronto(3,92)', 'toronto(3,93)', 'toronto(3,94)', 'toronto(3,95)', 'toronto(3,96)', 'toronto(3,97)', 'toronto(3,98)', 'toronto(3,99)', 'toronto(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['toronto(1,1)', 'toronto(1,2)', 'toronto(1,3)', 'toronto(1,4)', 'toronto(1,5)', 'toronto(1,6)', 'toronto(1,7)', 'toronto(1,8)', 'toronto(1,9)', 'toronto(1,10)', 'toronto(1,11)', 'toronto(1,12)', 'toronto(1,13)', 'toronto(1,14)', 'toronto(1,15)', 'toronto(1,16)', 'toronto(1,17)', 'toronto(1,18)', 'toronto(1,19)', 'toronto(1,20)', 'toronto(1,21)', 'toronto(1,22)', 'toronto(1,23)', 'toronto(1,24)', 'toronto(1,25)', 'toronto(1,26)', 'toronto(1,27)', 'toronto(1,28)', 'toronto(1,29)', 'toronto(1,30)', 'toronto(1,31)', 'toronto(1,32)', 'toronto(1,33)', 'toronto(1,34)', 'toronto(1,35)', 'toronto(1,36)', 'toronto(1,37)', 'toronto(1,38)', 'toronto(1,39)', 'toronto(1,40)', 'toronto(1,41)', 'toronto(1,42)', 'toronto(1,43)', 'toronto(1,44)', 'toronto(1,45)', 'toronto(1,46)', 'toronto(1,47)', 'toronto(1,48)', 'toronto(1,49)', 'toronto(1,50)', 'toronto(1,51)', 'toronto(1,52)', 'toronto(1,53)', 'toronto(1,54)', 'toronto(1,55)', 'toronto(1,56)', 'toronto(1,57)', 'toronto(1,58)', 'toronto(1,59)', 'toronto(1,60)', 'toronto(1,61)', 'toronto(1,62)', 'toronto(1,63)', 'toronto(1,64)', 'toronto(1,65)', 'toronto(1,66)', 'toronto(1,67)', 'toronto(1,68)', 'toronto(1,69)', 'toronto(1,70)', 'toronto(1,71)', 'toronto(1,72)', 'toronto(1,73)', 'toronto(1,74)', 'toronto(1,75)', 'toronto(1,76)', 'toronto(1,77)', 'toronto(1,78)', 'toronto(1,79)', 'toronto(1,80)', 'toronto(1,81)', 'toronto(1,82)', 'toronto(1,83)', 'toronto(1,84)', 'toronto(1,85)', 'toronto(1,86)', 'toronto(1,87)', 'toronto(1,88)', 'toronto(1,89)', 'toronto(1,90)', 'toronto(1,91)', 'toronto(1,92)', 'toronto(1,93)', 'toronto(1,94)', 'toronto(1,95)', 'toronto(1,96)', 'toronto(1,97)', 'toronto(1,98)', 'toronto(1,99)', 'toronto(1,100)', 'toronto(2,1)', 'toronto(2,2)', 'toronto(2,3)', 'toronto(2,4)', 'toronto(2,5)', 'toronto(2,6)', 'toronto(2,7)', 'toronto(2,8)', 'toronto(2,9)', 'toronto(2,10)', 'toronto(2,11)', 'toronto(2,12)', 'toronto(2,13)', 'toronto(2,14)', 'toronto(2,15)', 'toronto(2,16)', 'toronto(2,17)', 'toronto(2,18)', 'toronto(2,19)', 'toronto(2,20)', 'toronto(2,21)', 'toronto(2,22)', 'toronto(2,23)', 'toronto(2,24)', 'toronto(2,25)', 'toronto(2,26)', 'toronto(2,27)', 'toronto(2,28)', 'toronto(2,29)', 'toronto(2,30)', 'toronto(2,31)', 'toronto(2,32)', 'toronto(2,33)', 'toronto(2,34)', 'toronto(2,35)', 'toronto(2,36)', 'toronto(2,37)', 'toronto(2,38)', 'toronto(2,39)', 'toronto(2,40)', 'toronto(2,41)', 'toronto(2,42)', 'toronto(2,43)', 'toronto(2,44)', 'toronto(2,45)', 'toronto(2,46)', 'toronto(2,47)', 'toronto(2,48)', 'toronto(2,49)', 'toronto(2,50)', 'toronto(2,51)', 'toronto(2,52)', 'toronto(2,53)', 'toronto(2,54)', 'toronto(2,55)', 'toronto(2,56)', 'toronto(2,57)', 'toronto(2,58)', 'toronto(2,59)', 'toronto(2,60)', 'toronto(2,61)', 'toronto(2,62)', 'toronto(2,63)', 'toronto(2,64)', 'toronto(2,65)', 'toronto(2,66)', 'toronto(2,67)', 'toronto(2,68)', 'toronto(2,69)', 'toronto(2,70)', 'toronto(2,71)', 'toronto(2,72)', 'toronto(2,73)', 'toronto(2,74)', 'toronto(2,75)', 'toronto(2,76)', 'toronto(2,77)', 'toronto(2,78)', 'toronto(2,79)', 'toronto(2,80)', 'toronto(2,81)', 'toronto(2,82)', 'toronto(2,83)', 'toronto(2,84)', 'toronto(2,85)', 'toronto(2,86)', 'toronto(2,87)', 'toronto(2,88)', 'toronto(2,89)', 'toronto(2,90)', 'toronto(2,91)', 'toronto(2,92)', 'toronto(2,93)', 'toronto(2,94)', 'toronto(2,95)', 'toronto(2,96)', 'toronto(2,97)', 'toronto(2,98)', 'toronto(2,99)', 'toronto(2,100)', 'toronto(3,1)', 'toronto(3,2)', 'toronto(3,3)', 'toronto(3,4)', 'toronto(3,5)', 'toronto(3,6)', 'toronto(3,7)', 'toronto(3,8)', 'toronto(3,9)', 'toronto(3,10)', 'toronto(3,11)', 'toronto(3,12)', 'toronto(3,13)', 'toronto(3,14)', 'toronto(3,15)', 'toronto(3,16)', 'toronto(3,17)', 'toronto(3,18)', 'toronto(3,19)', 'toronto(3,20)', 'toronto(3,21)', 'toronto(3,22)', 'toronto(3,23)', 'toronto(3,24)', 'toronto(3,25)', 'toronto(3,26)', 'toronto(3,27)', 'toronto(3,28)', 'toronto(3,29)', 'toronto(3,30)', 'toronto(3,31)', 'toronto(3,32)', 'toronto(3,33)', 'toronto(3,34)', 'toronto(3,35)', 'toronto(3,36)', 'toronto(3,37)', 'toronto(3,38)', 'toronto(3,39)', 'toronto(3,40)', 'toronto(3,41)', 'toronto(3,42)', 'toronto(3,43)', 'toronto(3,44)', 'toronto(3,45)', 'toronto(3,46)', 'toronto(3,47)', 'toronto(3,48)', 'toronto(3,49)', 'toronto(3,50)', 'toronto(3,51)', 'toronto(3,52)', 'toronto(3,53)', 'toronto(3,54)', 'toronto(3,55)', 'toronto(3,56)', 'toronto(3,57)', 'toronto(3,58)', 'toronto(3,59)', 'toronto(3,60)', 'toronto(3,61)', 'toronto(3,62)', 'toronto(3,63)', 'toronto(3,64)', 'toronto(3,65)', 'toronto(3,66)', 'toronto(3,67)', 'toronto(3,68)', 'toronto(3,69)', 'toronto(3,70)', 'toronto(3,71)', 'toronto(3,72)', 'toronto(3,73)', 'toronto(3,74)', 'toronto(3,75)', 'toronto(3,76)', 'toronto(3,77)', 'toronto(3,78)', 'toronto(3,79)', 'toronto(3,80)', 'toronto(3,81)', 'toronto(3,82)', 'toronto(3,83)', 'toronto(3,84)', 'toronto(3,85)', 'toronto(3,86)', 'toronto(3,87)', 'toronto(3,88)', 'toronto(3,89)', 'toronto(3,90)', 'toronto(3,91)', 'toronto(3,92)', 'toronto(3,93)', 'toronto(3,94)', 'toronto(3,95)', 'toronto(3,96)', 'toronto(3,97)', 'toronto(3,98)', 'toronto(3,99)', 'toronto(3,100)', 'select(1)', 'select(2)', 'select(3)']]


144
assignment

question: 
Create an ASP script that assigns a single label from "barcelona","cosenza","pink" to a group of elements as indicated by the predicate "singapore".

answer from file: 
assign(X,"barcelona")|assign(X,"cosenza")|assign(X,"pink"):-singapore(X).

parsed from model: 
assign(X,"barcelona")|assign(X,"cosenza")|assign(X,"pink"):-singapore(X).

facts: 
singapore(1..5).

generated: 
Create an ASP script that assigns a single label from "barcelona","cosenza","pink" to a group of elements as indicated by the predicate "singapore".
Answer: assign(X,"barcelona")|assign(X,"cosenza")|assign(X,"pink"):-singapore(X).
singapore(X):-height(X,_,_),age(X,_,_),author(X,"rome").
height(X,_,_),age(X,_,_),author(X,"shangai").
height(X,_,_),age(X,_,_),author(X,"florence").
shangai(X):-height(X,_,_),age(X,_,_),author(X,"rome").

unique_rules: 
['assign(X,"barcelona")|assign(X,"cosenza")|assign(X,"pink"):-singapore(X).', 'singapore(X):-height(X,_,_),age(X,_,_),author(X,"rome").', 'shangai(X):-height(X,_,_),age(X,_,_),author(X,"rome").']

jaccard: 1.0

AS desired: [['singapore(1)', 'singapore(2)', 'singapore(3)', 'singapore(4)', 'singapore(5)', 'assign(1,"pink")', 'assign(2,"pink")', 'assign(3,"pink")', 'assign(4,"pink")', 'assign(5,"pink")']]
\AS obtained: [['singapore(1)', 'singapore(2)', 'singapore(3)', 'singapore(4)', 'singapore(5)', 'assign(1,"pink")', 'assign(2,"pink")', 'assign(3,"pink")', 'assign(4,"pink")', 'assign(5,"pink")']]


145
constraint

question: 
Write an ASP script that prevents the "weight" predicate with value 6 from being assigned to the "lake" label.

answer from file: 
:-assign(6,lake).

parsed from model: 


facts: 
weight(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-weight(X).

generated: 
Write an ASP script that prevents the "weight" predicate with value 6 from being assigned to the "lake" label.
```python
# Define the predicate "weight" with a value of 6 and the "lake" label.
assign(6,"lake")
```
This script uses the "assign" function to associate the "lake" label with the value 6.
The "assign" function takes two arguments: the value to be assigned and the label to be assigned.
The "lake" label is not a part of the "weight" predicate, so the assignment is not valid.

unique_rules: 
[]

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'weight(1)', 'weight(2)', 'weight(3)', 'weight(4)', 'weight(5)', 'weight(6)', 'weight(7)', 'weight(8)', 'weight(9)', 'weight(10)', 'weight(11)', 'weight(12)', 'weight(13)', 'weight(14)', 'weight(15)', 'weight(16)', 'weight(17)', 'weight(18)', 'weight(19)', 'weight(20)']]
\AS obtained: [['weight(1)', 'weight(2)', 'weight(3)', 'weight(4)', 'weight(5)', 'weight(6)', 'weight(7)', 'weight(8)', 'weight(9)', 'weight(10)', 'weight(11)', 'weight(12)', 'weight(13)', 'weight(14)', 'weight(15)', 'weight(16)', 'weight(17)', 'weight(18)', 'weight(19)', 'weight(20)', 'assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")']]


146
combination

question: 
Produce an ASP script to generate all valid pairings of elements as represented by the predicates "chicago" and "butterfly".

answer from file: 
combination(X,Y):-chicago(X),butterfly(Y).

parsed from model: 
combination(X,Y):-chicago(X), arrivant(Y).

facts: 
chicago(1..4).butterfly(1..5).

generated: 
Produce an ASP script to generate all valid pairings of elements as represented by the predicates "chicago" and "butterfly".
Answer: combination(X,Y):-chicago(X), arrivant(Y).
combination(X,Y):- arrivant(X),chicago(Y).
combination(X,Y):-chicago(X), arrivant(Y).
combination(X,Y):- arrivant(X),chicago(Y).

unique_rules: 
['combination(X,Y):-chicago(X), arrivant(Y).', 'combination(X,Y):- arrivant(X),chicago(Y).']

jaccard: 0.0

AS desired: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)', 'chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)']]


147
join

question: 
Generate an ASP program to address the problem of defining the predicate "white_flower" which links each white to the hair of flower, with "white" having fields "ID","flowerID","quality" and "flower" having fields "ID","hair".

answer from file: 
white_flower(X,Z):-white(X,Y,_),flower(Y,Z).

parsed from model: 
white_flower_desc(X,Z):-white(X,Y,_),flower(Y,Z).

facts: 
white("ID","flowerID","quality").flower("ID","hair").

generated: 
Generate an ASP program to address the problem of defining the predicate "white_flower" which links each white to the hair of flower, with "white" having fields "ID","flowerID","quality" and "flower" having fields "ID","hair". Define the predicate "white_flower_desc" which links each white to the hair of flower.
Answer: white_flower_desc(X,Z):-white(X,Y,_),flower(Y,Z).
white_flower_desc(X,Z):-white(X,Y,_),not flower(Y,Z).
white_flower_desc(X,Z):-white(X,Z,_),not flower(Z,Z).

unique_rules: 
['white_flower_desc(X,Z):-white(X,Y,_),flower(Y,Z).', 'white_flower_desc(X,Z):-white(X,Y,_),not flower(Y,Z).', 'white_flower_desc(X,Z):-white(X,Z,_),not flower(Z,Z).']

jaccard: 1.0

AS desired: [['flower("ID","hair")', 'white("ID","flowerID","quality")']]
\AS obtained: [['flower("ID","hair")', 'white("ID","flowerID","quality")']]


148
closure

question: 
Design an ASP code to link the predicate "flower" to its transitive closure, defined as "journey".

answer from file: 
journey(X,Y):-flower(X,Y).
journey(X,Y):-flower(X,Z),journey(Z,Y).

parsed from model: 
journey(X,Y):-flower(X,Y).
journey(X,Y):-flower(X,Z),journey(Z,Y).

facts: 
flower(1..3, 1..4).

generated: 
Design an ASP code to link the predicate "flower" to its transitive closure, defined as "journey".
Answer: journey(X,Y):-flower(X,Y).
journey(X,Y):-flower(X,Z),journey(Z,Y).
journey(X,Y):-flower(X,Z),not journey(Z,Y).
journey(X,Y):-not flower(X,Y).
journey(X,Y):-X=Y.
journey(X,Y):-X!=Y.

unique_rules: 
['journey(X,Y):-flower(X,Y).', 'journey(X,Y):-flower(X,Z),journey(Z,Y).', 'journey(X,Y):-flower(X,Z),not journey(Z,Y).', 'journey(X,Y):-not flower(X,Y).', 'journey(X,Y):-X=Y.', 'journey(X,Y):-X!=Y.']

jaccard: 1.0

AS desired: [['flower(1,1)', 'flower(1,2)', 'flower(1,3)', 'flower(1,4)', 'flower(2,1)', 'flower(2,2)', 'flower(2,3)', 'flower(2,4)', 'flower(3,1)', 'flower(3,2)', 'flower(3,3)', 'flower(3,4)', 'journey(1,1)', 'journey(1,2)', 'journey(1,3)', 'journey(1,4)', 'journey(2,1)', 'journey(2,2)', 'journey(2,3)', 'journey(2,4)', 'journey(3,1)', 'journey(3,2)', 'journey(3,3)', 'journey(3,4)']]
\AS obtained: [['flower(1,1)', 'flower(1,2)', 'flower(1,3)', 'flower(1,4)', 'flower(2,1)', 'flower(2,2)', 'flower(2,3)', 'flower(2,4)', 'flower(3,1)', 'flower(3,2)', 'flower(3,3)', 'flower(3,4)', 'journey(1,1)', 'journey(1,2)', 'journey(1,3)', 'journey(1,4)', 'journey(2,1)', 'journey(2,2)', 'journey(2,3)', 'journey(2,4)', 'journey(3,1)', 'journey(3,2)', 'journey(3,3)', 'journey(3,4)']]


149
preference

question: 
Create an ASP code to ensure that the predicate "hair" with value "5" does not associate with "lightblue". If it does, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(5,"lightblue").[1@1]

parsed from model: 
:~assign(5,"lightblue").[1@1]

facts: 
hair(1..20).

generated: 
Create an ASP code to ensure that the predicate "hair" with value "5" does not associate with "lightblue". If it does, it incurs a cost of "1" at level "1".
Answer: :~assign(5,"lightblue").[1@1]
This code uses the predicate "height" with fields "ID","city","author","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description

unique_rules: 
[':~assign(5,"lightblue").[1@1]']

jaccard: 1.0

AS desired: [['hair(1)', 'hair(2)', 'hair(3)', 'hair(4)', 'hair(5)', 'hair(6)', 'hair(7)', 'hair(8)', 'hair(9)', 'hair(10)', 'hair(11)', 'hair(12)', 'hair(13)', 'hair(14)', 'hair(15)', 'hair(16)', 'hair(17)', 'hair(18)', 'hair(19)', 'hair(20)']]
\AS obtained: [['hair(1)', 'hair(2)', 'hair(3)', 'hair(4)', 'hair(5)', 'hair(6)', 'hair(7)', 'hair(8)', 'hair(9)', 'hair(10)', 'hair(11)', 'hair(12)', 'hair(13)', 'hair(14)', 'hair(15)', 'hair(16)', 'hair(17)', 'hair(18)', 'hair(19)', 'hair(20)']]


150
filtering

question: 
Craft an ASP application to fetch all values linked to the "barcelona" label in the context of the "darkmagenta" predicate.

answer from file: 
select(X):-darkmagenta(X,"barcelona").

parsed from model: 
select(X):-darkmagenta(X,"barcelona").

facts: 
darkmagenta(1..5, "barcelona").

generated: 
Craft an ASP application to fetch all values linked to the "barcelona" label in the context of the "darkmagenta" predicate.
Answer: select(X):-darkmagenta(X,"barcelona").
darkmagenta(X,Z):-dark(X,Z).
dark(X,Z):-darkMagenta(X,Z).
darkMagenta(X,Z):-dark(X,Z).

unique_rules: 
['select(X):-darkmagenta(X,"barcelona").', 'darkmagenta(X,Z):-dark(X,Z).', 'dark(X,Z):-darkMagenta(X,Z).', 'darkMagenta(X,Z):-dark(X,Z).']

jaccard: 1.0

AS desired: [['darkmagenta(1,"barcelona")', 'darkmagenta(2,"barcelona")', 'darkmagenta(3,"barcelona")', 'darkmagenta(4,"barcelona")', 'darkmagenta(5,"barcelona")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['darkmagenta(1,"barcelona")', 'darkmagenta(2,"barcelona")', 'darkmagenta(3,"barcelona")', 'darkmagenta(4,"barcelona")', 'darkmagenta(5,"barcelona")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


151
negative_filtering

question: 
Draft an ASP solution to identify values associated with the predicate "cloud" but not tied to the predicate "singapore" and labeled "pink".

answer from file: 
select(X):-cloud(X),not singapore(X,"pink").

parsed from model: 
select(X):-cloud(X),not singapore(X,"pink").

facts: 
cloud(1..3).singapore(1,"lightblue").singapore(2,"wall").singapore(3,"lake").

generated: 
Draft an ASP solution to identify values associated with the predicate "cloud" but not tied to the predicate "singapore" and labeled "pink".
Answer: select(X):-cloud(X),not singapore(X,"pink").
cloud(X):-name(X),age(X,18).
singapore(X,"pink").
age(X,Y):-name(X),Y.
name(X):-age(X,Y),Y.

unique_rules: 
['select(X):-cloud(X),not singapore(X,"pink").', 'cloud(X):-name(X),age(X,18).', 'age(X,Y):-name(X),Y.', 'name(X):-age(X,Y),Y.']

jaccard: 1.0

AS desired: [['cloud(1)', 'cloud(2)', 'cloud(3)', 'singapore(1,"lightblue")', 'singapore(2,"wall")', 'singapore(3,"lake")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['cloud(1)', 'cloud(2)', 'cloud(3)', 'singapore(1,"lightblue")', 'singapore(2,"wall")', 'singapore(3,"lake")', 'select(1)', 'select(2)', 'select(3)']]


152
numeric_filtering

question: 
Write an ASP solution to identify values tied to the predicate "cairo" with a value different than 6.

answer from file: 
select(X):-cairo(X,C),C!=6.

parsed from model: 
select(X):-cairo(X,C),C!=6.

facts: 
cairo(1..3, 1..100).

generated: 
Write an ASP solution to identify values tied to the predicate "cairo" with a value different than 6.
Answer: select(X):-cairo(X,C),C!=6.
Explanation: The predicate "city" includes values tied to the predicate "description" with a value different than 6.
The predicate "description" includes values tied to the predicate "city" with a value different than 6.
The predicate "city" includes values tied to the predicate "author" with a value different than 6.
The predicate "author" includes values tied to the predicate "city" with a value different than 6.
The predicate "city" includes values tied to the predicate "moto" with a value different than 6.
The predicate "moto" includes values tied to the predicate "city" with

unique_rules: 
['select(X):-cairo(X,C),C!=6.']

jaccard: 1.0

AS desired: [['cairo(1,1)', 'cairo(1,2)', 'cairo(1,3)', 'cairo(1,4)', 'cairo(1,5)', 'cairo(1,6)', 'cairo(1,7)', 'cairo(1,8)', 'cairo(1,9)', 'cairo(1,10)', 'cairo(1,11)', 'cairo(1,12)', 'cairo(1,13)', 'cairo(1,14)', 'cairo(1,15)', 'cairo(1,16)', 'cairo(1,17)', 'cairo(1,18)', 'cairo(1,19)', 'cairo(1,20)', 'cairo(1,21)', 'cairo(1,22)', 'cairo(1,23)', 'cairo(1,24)', 'cairo(1,25)', 'cairo(1,26)', 'cairo(1,27)', 'cairo(1,28)', 'cairo(1,29)', 'cairo(1,30)', 'cairo(1,31)', 'cairo(1,32)', 'cairo(1,33)', 'cairo(1,34)', 'cairo(1,35)', 'cairo(1,36)', 'cairo(1,37)', 'cairo(1,38)', 'cairo(1,39)', 'cairo(1,40)', 'cairo(1,41)', 'cairo(1,42)', 'cairo(1,43)', 'cairo(1,44)', 'cairo(1,45)', 'cairo(1,46)', 'cairo(1,47)', 'cairo(1,48)', 'cairo(1,49)', 'cairo(1,50)', 'cairo(1,51)', 'cairo(1,52)', 'cairo(1,53)', 'cairo(1,54)', 'cairo(1,55)', 'cairo(1,56)', 'cairo(1,57)', 'cairo(1,58)', 'cairo(1,59)', 'cairo(1,60)', 'cairo(1,61)', 'cairo(1,62)', 'cairo(1,63)', 'cairo(1,64)', 'cairo(1,65)', 'cairo(1,66)', 'cairo(1,67)', 'cairo(1,68)', 'cairo(1,69)', 'cairo(1,70)', 'cairo(1,71)', 'cairo(1,72)', 'cairo(1,73)', 'cairo(1,74)', 'cairo(1,75)', 'cairo(1,76)', 'cairo(1,77)', 'cairo(1,78)', 'cairo(1,79)', 'cairo(1,80)', 'cairo(1,81)', 'cairo(1,82)', 'cairo(1,83)', 'cairo(1,84)', 'cairo(1,85)', 'cairo(1,86)', 'cairo(1,87)', 'cairo(1,88)', 'cairo(1,89)', 'cairo(1,90)', 'cairo(1,91)', 'cairo(1,92)', 'cairo(1,93)', 'cairo(1,94)', 'cairo(1,95)', 'cairo(1,96)', 'cairo(1,97)', 'cairo(1,98)', 'cairo(1,99)', 'cairo(1,100)', 'cairo(2,1)', 'cairo(2,2)', 'cairo(2,3)', 'cairo(2,4)', 'cairo(2,5)', 'cairo(2,6)', 'cairo(2,7)', 'cairo(2,8)', 'cairo(2,9)', 'cairo(2,10)', 'cairo(2,11)', 'cairo(2,12)', 'cairo(2,13)', 'cairo(2,14)', 'cairo(2,15)', 'cairo(2,16)', 'cairo(2,17)', 'cairo(2,18)', 'cairo(2,19)', 'cairo(2,20)', 'cairo(2,21)', 'cairo(2,22)', 'cairo(2,23)', 'cairo(2,24)', 'cairo(2,25)', 'cairo(2,26)', 'cairo(2,27)', 'cairo(2,28)', 'cairo(2,29)', 'cairo(2,30)', 'cairo(2,31)', 'cairo(2,32)', 'cairo(2,33)', 'cairo(2,34)', 'cairo(2,35)', 'cairo(2,36)', 'cairo(2,37)', 'cairo(2,38)', 'cairo(2,39)', 'cairo(2,40)', 'cairo(2,41)', 'cairo(2,42)', 'cairo(2,43)', 'cairo(2,44)', 'cairo(2,45)', 'cairo(2,46)', 'cairo(2,47)', 'cairo(2,48)', 'cairo(2,49)', 'cairo(2,50)', 'cairo(2,51)', 'cairo(2,52)', 'cairo(2,53)', 'cairo(2,54)', 'cairo(2,55)', 'cairo(2,56)', 'cairo(2,57)', 'cairo(2,58)', 'cairo(2,59)', 'cairo(2,60)', 'cairo(2,61)', 'cairo(2,62)', 'cairo(2,63)', 'cairo(2,64)', 'cairo(2,65)', 'cairo(2,66)', 'cairo(2,67)', 'cairo(2,68)', 'cairo(2,69)', 'cairo(2,70)', 'cairo(2,71)', 'cairo(2,72)', 'cairo(2,73)', 'cairo(2,74)', 'cairo(2,75)', 'cairo(2,76)', 'cairo(2,77)', 'cairo(2,78)', 'cairo(2,79)', 'cairo(2,80)', 'cairo(2,81)', 'cairo(2,82)', 'cairo(2,83)', 'cairo(2,84)', 'cairo(2,85)', 'cairo(2,86)', 'cairo(2,87)', 'cairo(2,88)', 'cairo(2,89)', 'cairo(2,90)', 'cairo(2,91)', 'cairo(2,92)', 'cairo(2,93)', 'cairo(2,94)', 'cairo(2,95)', 'cairo(2,96)', 'cairo(2,97)', 'cairo(2,98)', 'cairo(2,99)', 'cairo(2,100)', 'cairo(3,1)', 'cairo(3,2)', 'cairo(3,3)', 'cairo(3,4)', 'cairo(3,5)', 'cairo(3,6)', 'cairo(3,7)', 'cairo(3,8)', 'cairo(3,9)', 'cairo(3,10)', 'cairo(3,11)', 'cairo(3,12)', 'cairo(3,13)', 'cairo(3,14)', 'cairo(3,15)', 'cairo(3,16)', 'cairo(3,17)', 'cairo(3,18)', 'cairo(3,19)', 'cairo(3,20)', 'cairo(3,21)', 'cairo(3,22)', 'cairo(3,23)', 'cairo(3,24)', 'cairo(3,25)', 'cairo(3,26)', 'cairo(3,27)', 'cairo(3,28)', 'cairo(3,29)', 'cairo(3,30)', 'cairo(3,31)', 'cairo(3,32)', 'cairo(3,33)', 'cairo(3,34)', 'cairo(3,35)', 'cairo(3,36)', 'cairo(3,37)', 'cairo(3,38)', 'cairo(3,39)', 'cairo(3,40)', 'cairo(3,41)', 'cairo(3,42)', 'cairo(3,43)', 'cairo(3,44)', 'cairo(3,45)', 'cairo(3,46)', 'cairo(3,47)', 'cairo(3,48)', 'cairo(3,49)', 'cairo(3,50)', 'cairo(3,51)', 'cairo(3,52)', 'cairo(3,53)', 'cairo(3,54)', 'cairo(3,55)', 'cairo(3,56)', 'cairo(3,57)', 'cairo(3,58)', 'cairo(3,59)', 'cairo(3,60)', 'cairo(3,61)', 'cairo(3,62)', 'cairo(3,63)', 'cairo(3,64)', 'cairo(3,65)', 'cairo(3,66)', 'cairo(3,67)', 'cairo(3,68)', 'cairo(3,69)', 'cairo(3,70)', 'cairo(3,71)', 'cairo(3,72)', 'cairo(3,73)', 'cairo(3,74)', 'cairo(3,75)', 'cairo(3,76)', 'cairo(3,77)', 'cairo(3,78)', 'cairo(3,79)', 'cairo(3,80)', 'cairo(3,81)', 'cairo(3,82)', 'cairo(3,83)', 'cairo(3,84)', 'cairo(3,85)', 'cairo(3,86)', 'cairo(3,87)', 'cairo(3,88)', 'cairo(3,89)', 'cairo(3,90)', 'cairo(3,91)', 'cairo(3,92)', 'cairo(3,93)', 'cairo(3,94)', 'cairo(3,95)', 'cairo(3,96)', 'cairo(3,97)', 'cairo(3,98)', 'cairo(3,99)', 'cairo(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['cairo(1,1)', 'cairo(1,2)', 'cairo(1,3)', 'cairo(1,4)', 'cairo(1,5)', 'cairo(1,6)', 'cairo(1,7)', 'cairo(1,8)', 'cairo(1,9)', 'cairo(1,10)', 'cairo(1,11)', 'cairo(1,12)', 'cairo(1,13)', 'cairo(1,14)', 'cairo(1,15)', 'cairo(1,16)', 'cairo(1,17)', 'cairo(1,18)', 'cairo(1,19)', 'cairo(1,20)', 'cairo(1,21)', 'cairo(1,22)', 'cairo(1,23)', 'cairo(1,24)', 'cairo(1,25)', 'cairo(1,26)', 'cairo(1,27)', 'cairo(1,28)', 'cairo(1,29)', 'cairo(1,30)', 'cairo(1,31)', 'cairo(1,32)', 'cairo(1,33)', 'cairo(1,34)', 'cairo(1,35)', 'cairo(1,36)', 'cairo(1,37)', 'cairo(1,38)', 'cairo(1,39)', 'cairo(1,40)', 'cairo(1,41)', 'cairo(1,42)', 'cairo(1,43)', 'cairo(1,44)', 'cairo(1,45)', 'cairo(1,46)', 'cairo(1,47)', 'cairo(1,48)', 'cairo(1,49)', 'cairo(1,50)', 'cairo(1,51)', 'cairo(1,52)', 'cairo(1,53)', 'cairo(1,54)', 'cairo(1,55)', 'cairo(1,56)', 'cairo(1,57)', 'cairo(1,58)', 'cairo(1,59)', 'cairo(1,60)', 'cairo(1,61)', 'cairo(1,62)', 'cairo(1,63)', 'cairo(1,64)', 'cairo(1,65)', 'cairo(1,66)', 'cairo(1,67)', 'cairo(1,68)', 'cairo(1,69)', 'cairo(1,70)', 'cairo(1,71)', 'cairo(1,72)', 'cairo(1,73)', 'cairo(1,74)', 'cairo(1,75)', 'cairo(1,76)', 'cairo(1,77)', 'cairo(1,78)', 'cairo(1,79)', 'cairo(1,80)', 'cairo(1,81)', 'cairo(1,82)', 'cairo(1,83)', 'cairo(1,84)', 'cairo(1,85)', 'cairo(1,86)', 'cairo(1,87)', 'cairo(1,88)', 'cairo(1,89)', 'cairo(1,90)', 'cairo(1,91)', 'cairo(1,92)', 'cairo(1,93)', 'cairo(1,94)', 'cairo(1,95)', 'cairo(1,96)', 'cairo(1,97)', 'cairo(1,98)', 'cairo(1,99)', 'cairo(1,100)', 'cairo(2,1)', 'cairo(2,2)', 'cairo(2,3)', 'cairo(2,4)', 'cairo(2,5)', 'cairo(2,6)', 'cairo(2,7)', 'cairo(2,8)', 'cairo(2,9)', 'cairo(2,10)', 'cairo(2,11)', 'cairo(2,12)', 'cairo(2,13)', 'cairo(2,14)', 'cairo(2,15)', 'cairo(2,16)', 'cairo(2,17)', 'cairo(2,18)', 'cairo(2,19)', 'cairo(2,20)', 'cairo(2,21)', 'cairo(2,22)', 'cairo(2,23)', 'cairo(2,24)', 'cairo(2,25)', 'cairo(2,26)', 'cairo(2,27)', 'cairo(2,28)', 'cairo(2,29)', 'cairo(2,30)', 'cairo(2,31)', 'cairo(2,32)', 'cairo(2,33)', 'cairo(2,34)', 'cairo(2,35)', 'cairo(2,36)', 'cairo(2,37)', 'cairo(2,38)', 'cairo(2,39)', 'cairo(2,40)', 'cairo(2,41)', 'cairo(2,42)', 'cairo(2,43)', 'cairo(2,44)', 'cairo(2,45)', 'cairo(2,46)', 'cairo(2,47)', 'cairo(2,48)', 'cairo(2,49)', 'cairo(2,50)', 'cairo(2,51)', 'cairo(2,52)', 'cairo(2,53)', 'cairo(2,54)', 'cairo(2,55)', 'cairo(2,56)', 'cairo(2,57)', 'cairo(2,58)', 'cairo(2,59)', 'cairo(2,60)', 'cairo(2,61)', 'cairo(2,62)', 'cairo(2,63)', 'cairo(2,64)', 'cairo(2,65)', 'cairo(2,66)', 'cairo(2,67)', 'cairo(2,68)', 'cairo(2,69)', 'cairo(2,70)', 'cairo(2,71)', 'cairo(2,72)', 'cairo(2,73)', 'cairo(2,74)', 'cairo(2,75)', 'cairo(2,76)', 'cairo(2,77)', 'cairo(2,78)', 'cairo(2,79)', 'cairo(2,80)', 'cairo(2,81)', 'cairo(2,82)', 'cairo(2,83)', 'cairo(2,84)', 'cairo(2,85)', 'cairo(2,86)', 'cairo(2,87)', 'cairo(2,88)', 'cairo(2,89)', 'cairo(2,90)', 'cairo(2,91)', 'cairo(2,92)', 'cairo(2,93)', 'cairo(2,94)', 'cairo(2,95)', 'cairo(2,96)', 'cairo(2,97)', 'cairo(2,98)', 'cairo(2,99)', 'cairo(2,100)', 'cairo(3,1)', 'cairo(3,2)', 'cairo(3,3)', 'cairo(3,4)', 'cairo(3,5)', 'cairo(3,6)', 'cairo(3,7)', 'cairo(3,8)', 'cairo(3,9)', 'cairo(3,10)', 'cairo(3,11)', 'cairo(3,12)', 'cairo(3,13)', 'cairo(3,14)', 'cairo(3,15)', 'cairo(3,16)', 'cairo(3,17)', 'cairo(3,18)', 'cairo(3,19)', 'cairo(3,20)', 'cairo(3,21)', 'cairo(3,22)', 'cairo(3,23)', 'cairo(3,24)', 'cairo(3,25)', 'cairo(3,26)', 'cairo(3,27)', 'cairo(3,28)', 'cairo(3,29)', 'cairo(3,30)', 'cairo(3,31)', 'cairo(3,32)', 'cairo(3,33)', 'cairo(3,34)', 'cairo(3,35)', 'cairo(3,36)', 'cairo(3,37)', 'cairo(3,38)', 'cairo(3,39)', 'cairo(3,40)', 'cairo(3,41)', 'cairo(3,42)', 'cairo(3,43)', 'cairo(3,44)', 'cairo(3,45)', 'cairo(3,46)', 'cairo(3,47)', 'cairo(3,48)', 'cairo(3,49)', 'cairo(3,50)', 'cairo(3,51)', 'cairo(3,52)', 'cairo(3,53)', 'cairo(3,54)', 'cairo(3,55)', 'cairo(3,56)', 'cairo(3,57)', 'cairo(3,58)', 'cairo(3,59)', 'cairo(3,60)', 'cairo(3,61)', 'cairo(3,62)', 'cairo(3,63)', 'cairo(3,64)', 'cairo(3,65)', 'cairo(3,66)', 'cairo(3,67)', 'cairo(3,68)', 'cairo(3,69)', 'cairo(3,70)', 'cairo(3,71)', 'cairo(3,72)', 'cairo(3,73)', 'cairo(3,74)', 'cairo(3,75)', 'cairo(3,76)', 'cairo(3,77)', 'cairo(3,78)', 'cairo(3,79)', 'cairo(3,80)', 'cairo(3,81)', 'cairo(3,82)', 'cairo(3,83)', 'cairo(3,84)', 'cairo(3,85)', 'cairo(3,86)', 'cairo(3,87)', 'cairo(3,88)', 'cairo(3,89)', 'cairo(3,90)', 'cairo(3,91)', 'cairo(3,92)', 'cairo(3,93)', 'cairo(3,94)', 'cairo(3,95)', 'cairo(3,96)', 'cairo(3,97)', 'cairo(3,98)', 'cairo(3,99)', 'cairo(3,100)', 'select(1)', 'select(2)', 'select(3)']]


153
assignment

question: 
Develop an ASP solution to map one specific label from "cloud","moscow","strength" to each element defined by the predicate "storm".

answer from file: 
assign(X,"cloud")|assign(X,"moscow")|assign(X,"strength"):-storm(X).

parsed from model: 
assign(X,"cloud")|assign(X,"moscow")|assign(X,"strength"):-storm(X).

facts: 
storm(1..5).

generated: 
Develop an ASP solution to map one specific label from "cloud","moscow","strength" to each element defined by the predicate "storm".
Answer: assign(X,"cloud")|assign(X,"moscow")|assign(X,"strength"):-storm(X).
assign(X,"cloud"):-height(X,"city").
assign(X,"moscow"):-height(X,"city").
assign(X,"strength"):-height(X,"city").
where "height" and "city" are predicates defined in the context of the "storm" predicate.

unique_rules: 
['assign(X,"cloud")|assign(X,"moscow")|assign(X,"strength"):-storm(X).', 'assign(X,"cloud"):-height(X,"city").', 'assign(X,"moscow"):-height(X,"city").', 'assign(X,"strength"):-height(X,"city").']

jaccard: 1.0

AS desired: [['storm(1)', 'storm(2)', 'storm(3)', 'storm(4)', 'storm(5)', 'assign(1,"strength")', 'assign(2,"strength")', 'assign(3,"strength")', 'assign(4,"strength")', 'assign(5,"strength")']]
\AS obtained: [['storm(1)', 'storm(2)', 'storm(3)', 'storm(4)', 'storm(5)', 'assign(1,"strength")', 'assign(2,"strength")', 'assign(3,"strength")', 'assign(4,"strength")', 'assign(5,"strength")']]


154
constraint

question: 
Create an ASP script that excludes the predicate "lightblue" with value 12 from being mapped to the label "delhi".

answer from file: 
:-assign(12,delhi).

parsed from model: 
:-assign(12,delhi).

facts: 
lightblue(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-lightblue(X).

generated: 
Create an ASP script that excludes the predicate "lightblue" with value 12 from being mapped to the label "delhi".
Answer: :-assign(12,delhi).
Explanation: The predicate "lightblue" includes values 12 and 17, and the label "delhi" is assigned to the value 12.
The predicate "bike" includes values 12,17,21,24,26,31,34,37,40,42,45,51,53,55,57,59,61,63,65,67,70,72,74,76,78,80,82,84,86,88,90,9

unique_rules: 
[':-assign(12,delhi).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'lightblue(4)', 'lightblue(5)', 'lightblue(6)', 'lightblue(7)', 'lightblue(8)', 'lightblue(9)', 'lightblue(10)', 'lightblue(11)', 'lightblue(12)', 'lightblue(13)', 'lightblue(14)', 'lightblue(15)', 'lightblue(16)', 'lightblue(17)', 'lightblue(18)', 'lightblue(19)', 'lightblue(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'lightblue(4)', 'lightblue(5)', 'lightblue(6)', 'lightblue(7)', 'lightblue(8)', 'lightblue(9)', 'lightblue(10)', 'lightblue(11)', 'lightblue(12)', 'lightblue(13)', 'lightblue(14)', 'lightblue(15)', 'lightblue(16)', 'lightblue(17)', 'lightblue(18)', 'lightblue(19)', 'lightblue(20)']]


155
combination

question: 
Develop an ASP code snippet to produce all valid combinations of elements from the "black" and "singapore" sets.

answer from file: 
combination(X,Y):-black(X),singapore(Y).

parsed from model: 
combination(X,Y):-black(X),singapore(Y).

facts: 
black(1..4).singapore(1..5).

generated: 
Develop an ASP code snippet to produce all valid combinations of elements from the "black" and "singapore" sets.
Answer: combination(X,Y):-black(X),singapore(Y).
combination(X,Y):-black(X),not singapore(Y).
combination(X,Y):-not black(X),singapore(Y).
combination(X,Y):-not black(X),not singapore(Y).

unique_rules: 
['combination(X,Y):-black(X),singapore(Y).', 'combination(X,Y):-black(X),not singapore(Y).', 'combination(X,Y):-not black(X),singapore(Y).', 'combination(X,Y):-not black(X),not singapore(Y).']

jaccard: 1.0

AS desired: [['singapore(1)', 'singapore(2)', 'singapore(3)', 'singapore(4)', 'singapore(5)', 'black(1)', 'black(2)', 'black(3)', 'black(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['singapore(1)', 'singapore(2)', 'singapore(3)', 'singapore(4)', 'singapore(5)', 'black(1)', 'black(2)', 'black(3)', 'black(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


156
join

question: 
Generate an ASP program to create the predicate "cairo_black" that associates each cairo with the hair of black, with the fields "ID","quality","lake","blackID" of "cairo" and the fields "ID","hair","quality" of "black".

answer from file: 
cairo_black(X,Z):-cairo(X,_,_,Y),black(Y,Z,_).

parsed from model: 
cairo_black(X,Z):-cairo(X,_,_,Y),black(Y,Z,_).

facts: 
cairo("ID","quality","lake","blackID").black("ID","hair","quality").

generated: 
Generate an ASP program to create the predicate "cairo_black" that associates each cairo with the hair of black, with the fields "ID","quality","lake","blackID" of "cairo" and the fields "ID","hair","quality" of "black".
Answer: cairo_black(X,Z):-cairo(X,_,_,Y),black(Y,Z,_).
cairo(X,_,_,Y):-black(Y,_,_),cairo(X,_,Z).
black(X,_,Z):-cairo(X,_,Z,_).

unique_rules: 
['cairo_black(X,Z):-cairo(X,_,_,Y),black(Y,Z,_).', 'cairo(X,_,_,Y):-black(Y,_,_),cairo(X,_,Z).', 'black(X,_,Z):-cairo(X,_,Z,_).']

jaccard: 1.0

AS desired: [['cairo("ID","quality","lake","blackID")', 'black("ID","hair","quality")']]
\AS obtained: [['cairo("ID","quality","lake","blackID")', 'black("ID","hair","quality")']]


157
closure

question: 
Develop an ASP script that derives the "family" predicate through the transitive closure of the "quality" predicate.

answer from file: 
family(X,Y):-quality(X,Y).
family(X,Y):-quality(X,Z),family(Z,Y).

parsed from model: 
family(X,Y):-quality(X,Y).
family(X,Y):-quality(X,Z),family(Z,Y).

facts: 
quality(1..3, 1..4).

generated: 
Develop an ASP script that derives the "family" predicate through the transitive closure of the "quality" predicate.
Answer: family(X,Y):-quality(X,Y).
family(X,Y):-quality(X,Z),family(Z,Y).
family(X,Y):-quality(X,Z),Z!=Y.
family(X,Y):-quality(X,Z),Z==Y.
The "family" predicate is derived from the transitive closure of the "quality" predicate.
The transitive closure of the "quality" predicate is defined as the "family" predicate.
The "family" predicate is a transitive closure of the "quality" predicate.

unique_rules: 
['family(X,Y):-quality(X,Y).', 'family(X,Y):-quality(X,Z),family(Z,Y).', 'family(X,Y):-quality(X,Z),Z!=Y.', 'family(X,Y):-quality(X,Z),Z==Y.']

jaccard: 1.0

AS desired: [['quality(1,1)', 'quality(1,2)', 'quality(1,3)', 'quality(1,4)', 'quality(2,1)', 'quality(2,2)', 'quality(2,3)', 'quality(2,4)', 'quality(3,1)', 'quality(3,2)', 'quality(3,3)', 'quality(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]
\AS obtained: [['quality(1,1)', 'quality(1,2)', 'quality(1,3)', 'quality(1,4)', 'quality(2,1)', 'quality(2,2)', 'quality(2,3)', 'quality(2,4)', 'quality(3,1)', 'quality(3,2)', 'quality(3,3)', 'quality(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]


158
preference

question: 
Design an ASP solution to prevent the predicate "weight" with value "2" from being linked to "weight". If this occurs, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(2,"weight").[1@1]

parsed from model: 
:~assign(2,"weight").[1@1]

facts: 
weight(1..20).

generated: 
Design an ASP solution to prevent the predicate "weight" with value "2" from being linked to "weight". If this occurs, it incurs a cost of "1" at level "1".
Answer: :~assign(2,"weight").[1@1]
Explanation: The predicate "weight" has fields "ID","city","author","name","price","description","author","city","name","price","description","author","name","city","price","description","author","name","price","description","author","name","city","price","description","author","name","price","description","author","name","city","price","description","author","name","price","description","author","name","city","price","description","author","name","price","description","author","name","city","price","description","author","name","price","description","author","name","city","price","description","author

unique_rules: 
[':~assign(2,"weight").[1@1]']

jaccard: 1.0

AS desired: [['weight(1)', 'weight(2)', 'weight(3)', 'weight(4)', 'weight(5)', 'weight(6)', 'weight(7)', 'weight(8)', 'weight(9)', 'weight(10)', 'weight(11)', 'weight(12)', 'weight(13)', 'weight(14)', 'weight(15)', 'weight(16)', 'weight(17)', 'weight(18)', 'weight(19)', 'weight(20)']]
\AS obtained: [['weight(1)', 'weight(2)', 'weight(3)', 'weight(4)', 'weight(5)', 'weight(6)', 'weight(7)', 'weight(8)', 'weight(9)', 'weight(10)', 'weight(11)', 'weight(12)', 'weight(13)', 'weight(14)', 'weight(15)', 'weight(16)', 'weight(17)', 'weight(18)', 'weight(19)', 'weight(20)']]


159
filtering

question: 
Write an ASP script to collect values associated with the "cairo" label from the "delhi" predicate.

answer from file: 
select(X):-delhi(X,"cairo").

parsed from model: 
select(X):-delhi(X,"city").

facts: 
delhi(1..5, "cairo").

generated: 
Write an ASP script to collect values associated with the "cairo" label from the "delhi" predicate.
Answer: select(X):-delhi(X,"city").
select(X):-delhi(X,"author").
select(X):-delhi(X,"city","author").
delhi(X,"city").
delhi(X,"author").
delhi(X,"city","author").

unique_rules: 
['select(X):-delhi(X,"city").', 'select(X):-delhi(X,"author").', 'select(X):-delhi(X,"city","author").']

jaccard: 0.0

AS desired: [['delhi(1,"cairo")', 'delhi(2,"cairo")', 'delhi(3,"cairo")', 'delhi(4,"cairo")', 'delhi(5,"cairo")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['delhi(1,"cairo")', 'delhi(2,"cairo")', 'delhi(3,"cairo")', 'delhi(4,"cairo")', 'delhi(5,"cairo")']]


160
negative_filtering

question: 
Draft an ASP solution to identify values associated with the predicate "barcelona" but not tied to the predicate "chicago" and labeled "cairo".

answer from file: 
select(X):-barcelona(X),not chicago(X,"cairo").

parsed from model: 
select(X):-barcelona(X),not chicago(X,"cairo").

facts: 
barcelona(1..3).chicago(1,"quality").chicago(2,"mumbai").chicago(3,"hair").

generated: 
Draft an ASP solution to identify values associated with the predicate "barcelona" but not tied to the predicate "chicago" and labeled "cairo".
Answer: select(X):-barcelona(X),not chicago(X,"cairo").
Explanation: The predicate "barcelona" includes values associated with the predicate "city","height","author","moto","description","name","city","author","description","height","name","city","description","name","height","author","description","city","author","description","height","name","city","description","name","height","author","description","city","author","description","height","name","city","description","name","height","author","description","city","author","description","height","name","city","description","name","height","author","description","city","author","description","height","name","city","description","name","height

unique_rules: 
['select(X):-barcelona(X),not chicago(X,"cairo").']

jaccard: 1.0

AS desired: [['barcelona(1)', 'barcelona(2)', 'barcelona(3)', 'chicago(1,"quality")', 'chicago(2,"mumbai")', 'chicago(3,"hair")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['barcelona(1)', 'barcelona(2)', 'barcelona(3)', 'chicago(1,"quality")', 'chicago(2,"mumbai")', 'chicago(3,"hair")', 'select(1)', 'select(2)', 'select(3)']]


161
numeric_filtering

question: 
Craft an ASP code to retrieve values connected to the predicate "mumbai" with a value different than 35.

answer from file: 
select(X):-mumbai(X,C),C!=35.

parsed from model: 
select(X):-mumbai(X,C),C!=35.

facts: 
mumbai(1..3, 1..100).

generated: 
Craft an ASP code to retrieve values connected to the predicate "mumbai" with a value different than 35.
Answer: select(X):-mumbai(X,C),C!=35.
mumbai(X,C):-mumbai(X,C),C==35.

unique_rules: 
['select(X):-mumbai(X,C),C!=35.', 'mumbai(X,C):-mumbai(X,C),C==35.']

jaccard: 1.0

AS desired: [['mumbai(1,1)', 'mumbai(1,2)', 'mumbai(1,3)', 'mumbai(1,4)', 'mumbai(1,5)', 'mumbai(1,6)', 'mumbai(1,7)', 'mumbai(1,8)', 'mumbai(1,9)', 'mumbai(1,10)', 'mumbai(1,11)', 'mumbai(1,12)', 'mumbai(1,13)', 'mumbai(1,14)', 'mumbai(1,15)', 'mumbai(1,16)', 'mumbai(1,17)', 'mumbai(1,18)', 'mumbai(1,19)', 'mumbai(1,20)', 'mumbai(1,21)', 'mumbai(1,22)', 'mumbai(1,23)', 'mumbai(1,24)', 'mumbai(1,25)', 'mumbai(1,26)', 'mumbai(1,27)', 'mumbai(1,28)', 'mumbai(1,29)', 'mumbai(1,30)', 'mumbai(1,31)', 'mumbai(1,32)', 'mumbai(1,33)', 'mumbai(1,34)', 'mumbai(1,35)', 'mumbai(1,36)', 'mumbai(1,37)', 'mumbai(1,38)', 'mumbai(1,39)', 'mumbai(1,40)', 'mumbai(1,41)', 'mumbai(1,42)', 'mumbai(1,43)', 'mumbai(1,44)', 'mumbai(1,45)', 'mumbai(1,46)', 'mumbai(1,47)', 'mumbai(1,48)', 'mumbai(1,49)', 'mumbai(1,50)', 'mumbai(1,51)', 'mumbai(1,52)', 'mumbai(1,53)', 'mumbai(1,54)', 'mumbai(1,55)', 'mumbai(1,56)', 'mumbai(1,57)', 'mumbai(1,58)', 'mumbai(1,59)', 'mumbai(1,60)', 'mumbai(1,61)', 'mumbai(1,62)', 'mumbai(1,63)', 'mumbai(1,64)', 'mumbai(1,65)', 'mumbai(1,66)', 'mumbai(1,67)', 'mumbai(1,68)', 'mumbai(1,69)', 'mumbai(1,70)', 'mumbai(1,71)', 'mumbai(1,72)', 'mumbai(1,73)', 'mumbai(1,74)', 'mumbai(1,75)', 'mumbai(1,76)', 'mumbai(1,77)', 'mumbai(1,78)', 'mumbai(1,79)', 'mumbai(1,80)', 'mumbai(1,81)', 'mumbai(1,82)', 'mumbai(1,83)', 'mumbai(1,84)', 'mumbai(1,85)', 'mumbai(1,86)', 'mumbai(1,87)', 'mumbai(1,88)', 'mumbai(1,89)', 'mumbai(1,90)', 'mumbai(1,91)', 'mumbai(1,92)', 'mumbai(1,93)', 'mumbai(1,94)', 'mumbai(1,95)', 'mumbai(1,96)', 'mumbai(1,97)', 'mumbai(1,98)', 'mumbai(1,99)', 'mumbai(1,100)', 'mumbai(2,1)', 'mumbai(2,2)', 'mumbai(2,3)', 'mumbai(2,4)', 'mumbai(2,5)', 'mumbai(2,6)', 'mumbai(2,7)', 'mumbai(2,8)', 'mumbai(2,9)', 'mumbai(2,10)', 'mumbai(2,11)', 'mumbai(2,12)', 'mumbai(2,13)', 'mumbai(2,14)', 'mumbai(2,15)', 'mumbai(2,16)', 'mumbai(2,17)', 'mumbai(2,18)', 'mumbai(2,19)', 'mumbai(2,20)', 'mumbai(2,21)', 'mumbai(2,22)', 'mumbai(2,23)', 'mumbai(2,24)', 'mumbai(2,25)', 'mumbai(2,26)', 'mumbai(2,27)', 'mumbai(2,28)', 'mumbai(2,29)', 'mumbai(2,30)', 'mumbai(2,31)', 'mumbai(2,32)', 'mumbai(2,33)', 'mumbai(2,34)', 'mumbai(2,35)', 'mumbai(2,36)', 'mumbai(2,37)', 'mumbai(2,38)', 'mumbai(2,39)', 'mumbai(2,40)', 'mumbai(2,41)', 'mumbai(2,42)', 'mumbai(2,43)', 'mumbai(2,44)', 'mumbai(2,45)', 'mumbai(2,46)', 'mumbai(2,47)', 'mumbai(2,48)', 'mumbai(2,49)', 'mumbai(2,50)', 'mumbai(2,51)', 'mumbai(2,52)', 'mumbai(2,53)', 'mumbai(2,54)', 'mumbai(2,55)', 'mumbai(2,56)', 'mumbai(2,57)', 'mumbai(2,58)', 'mumbai(2,59)', 'mumbai(2,60)', 'mumbai(2,61)', 'mumbai(2,62)', 'mumbai(2,63)', 'mumbai(2,64)', 'mumbai(2,65)', 'mumbai(2,66)', 'mumbai(2,67)', 'mumbai(2,68)', 'mumbai(2,69)', 'mumbai(2,70)', 'mumbai(2,71)', 'mumbai(2,72)', 'mumbai(2,73)', 'mumbai(2,74)', 'mumbai(2,75)', 'mumbai(2,76)', 'mumbai(2,77)', 'mumbai(2,78)', 'mumbai(2,79)', 'mumbai(2,80)', 'mumbai(2,81)', 'mumbai(2,82)', 'mumbai(2,83)', 'mumbai(2,84)', 'mumbai(2,85)', 'mumbai(2,86)', 'mumbai(2,87)', 'mumbai(2,88)', 'mumbai(2,89)', 'mumbai(2,90)', 'mumbai(2,91)', 'mumbai(2,92)', 'mumbai(2,93)', 'mumbai(2,94)', 'mumbai(2,95)', 'mumbai(2,96)', 'mumbai(2,97)', 'mumbai(2,98)', 'mumbai(2,99)', 'mumbai(2,100)', 'mumbai(3,1)', 'mumbai(3,2)', 'mumbai(3,3)', 'mumbai(3,4)', 'mumbai(3,5)', 'mumbai(3,6)', 'mumbai(3,7)', 'mumbai(3,8)', 'mumbai(3,9)', 'mumbai(3,10)', 'mumbai(3,11)', 'mumbai(3,12)', 'mumbai(3,13)', 'mumbai(3,14)', 'mumbai(3,15)', 'mumbai(3,16)', 'mumbai(3,17)', 'mumbai(3,18)', 'mumbai(3,19)', 'mumbai(3,20)', 'mumbai(3,21)', 'mumbai(3,22)', 'mumbai(3,23)', 'mumbai(3,24)', 'mumbai(3,25)', 'mumbai(3,26)', 'mumbai(3,27)', 'mumbai(3,28)', 'mumbai(3,29)', 'mumbai(3,30)', 'mumbai(3,31)', 'mumbai(3,32)', 'mumbai(3,33)', 'mumbai(3,34)', 'mumbai(3,35)', 'mumbai(3,36)', 'mumbai(3,37)', 'mumbai(3,38)', 'mumbai(3,39)', 'mumbai(3,40)', 'mumbai(3,41)', 'mumbai(3,42)', 'mumbai(3,43)', 'mumbai(3,44)', 'mumbai(3,45)', 'mumbai(3,46)', 'mumbai(3,47)', 'mumbai(3,48)', 'mumbai(3,49)', 'mumbai(3,50)', 'mumbai(3,51)', 'mumbai(3,52)', 'mumbai(3,53)', 'mumbai(3,54)', 'mumbai(3,55)', 'mumbai(3,56)', 'mumbai(3,57)', 'mumbai(3,58)', 'mumbai(3,59)', 'mumbai(3,60)', 'mumbai(3,61)', 'mumbai(3,62)', 'mumbai(3,63)', 'mumbai(3,64)', 'mumbai(3,65)', 'mumbai(3,66)', 'mumbai(3,67)', 'mumbai(3,68)', 'mumbai(3,69)', 'mumbai(3,70)', 'mumbai(3,71)', 'mumbai(3,72)', 'mumbai(3,73)', 'mumbai(3,74)', 'mumbai(3,75)', 'mumbai(3,76)', 'mumbai(3,77)', 'mumbai(3,78)', 'mumbai(3,79)', 'mumbai(3,80)', 'mumbai(3,81)', 'mumbai(3,82)', 'mumbai(3,83)', 'mumbai(3,84)', 'mumbai(3,85)', 'mumbai(3,86)', 'mumbai(3,87)', 'mumbai(3,88)', 'mumbai(3,89)', 'mumbai(3,90)', 'mumbai(3,91)', 'mumbai(3,92)', 'mumbai(3,93)', 'mumbai(3,94)', 'mumbai(3,95)', 'mumbai(3,96)', 'mumbai(3,97)', 'mumbai(3,98)', 'mumbai(3,99)', 'mumbai(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['mumbai(1,1)', 'mumbai(1,2)', 'mumbai(1,3)', 'mumbai(1,4)', 'mumbai(1,5)', 'mumbai(1,6)', 'mumbai(1,7)', 'mumbai(1,8)', 'mumbai(1,9)', 'mumbai(1,10)', 'mumbai(1,11)', 'mumbai(1,12)', 'mumbai(1,13)', 'mumbai(1,14)', 'mumbai(1,15)', 'mumbai(1,16)', 'mumbai(1,17)', 'mumbai(1,18)', 'mumbai(1,19)', 'mumbai(1,20)', 'mumbai(1,21)', 'mumbai(1,22)', 'mumbai(1,23)', 'mumbai(1,24)', 'mumbai(1,25)', 'mumbai(1,26)', 'mumbai(1,27)', 'mumbai(1,28)', 'mumbai(1,29)', 'mumbai(1,30)', 'mumbai(1,31)', 'mumbai(1,32)', 'mumbai(1,33)', 'mumbai(1,34)', 'mumbai(1,35)', 'mumbai(1,36)', 'mumbai(1,37)', 'mumbai(1,38)', 'mumbai(1,39)', 'mumbai(1,40)', 'mumbai(1,41)', 'mumbai(1,42)', 'mumbai(1,43)', 'mumbai(1,44)', 'mumbai(1,45)', 'mumbai(1,46)', 'mumbai(1,47)', 'mumbai(1,48)', 'mumbai(1,49)', 'mumbai(1,50)', 'mumbai(1,51)', 'mumbai(1,52)', 'mumbai(1,53)', 'mumbai(1,54)', 'mumbai(1,55)', 'mumbai(1,56)', 'mumbai(1,57)', 'mumbai(1,58)', 'mumbai(1,59)', 'mumbai(1,60)', 'mumbai(1,61)', 'mumbai(1,62)', 'mumbai(1,63)', 'mumbai(1,64)', 'mumbai(1,65)', 'mumbai(1,66)', 'mumbai(1,67)', 'mumbai(1,68)', 'mumbai(1,69)', 'mumbai(1,70)', 'mumbai(1,71)', 'mumbai(1,72)', 'mumbai(1,73)', 'mumbai(1,74)', 'mumbai(1,75)', 'mumbai(1,76)', 'mumbai(1,77)', 'mumbai(1,78)', 'mumbai(1,79)', 'mumbai(1,80)', 'mumbai(1,81)', 'mumbai(1,82)', 'mumbai(1,83)', 'mumbai(1,84)', 'mumbai(1,85)', 'mumbai(1,86)', 'mumbai(1,87)', 'mumbai(1,88)', 'mumbai(1,89)', 'mumbai(1,90)', 'mumbai(1,91)', 'mumbai(1,92)', 'mumbai(1,93)', 'mumbai(1,94)', 'mumbai(1,95)', 'mumbai(1,96)', 'mumbai(1,97)', 'mumbai(1,98)', 'mumbai(1,99)', 'mumbai(1,100)', 'mumbai(2,1)', 'mumbai(2,2)', 'mumbai(2,3)', 'mumbai(2,4)', 'mumbai(2,5)', 'mumbai(2,6)', 'mumbai(2,7)', 'mumbai(2,8)', 'mumbai(2,9)', 'mumbai(2,10)', 'mumbai(2,11)', 'mumbai(2,12)', 'mumbai(2,13)', 'mumbai(2,14)', 'mumbai(2,15)', 'mumbai(2,16)', 'mumbai(2,17)', 'mumbai(2,18)', 'mumbai(2,19)', 'mumbai(2,20)', 'mumbai(2,21)', 'mumbai(2,22)', 'mumbai(2,23)', 'mumbai(2,24)', 'mumbai(2,25)', 'mumbai(2,26)', 'mumbai(2,27)', 'mumbai(2,28)', 'mumbai(2,29)', 'mumbai(2,30)', 'mumbai(2,31)', 'mumbai(2,32)', 'mumbai(2,33)', 'mumbai(2,34)', 'mumbai(2,35)', 'mumbai(2,36)', 'mumbai(2,37)', 'mumbai(2,38)', 'mumbai(2,39)', 'mumbai(2,40)', 'mumbai(2,41)', 'mumbai(2,42)', 'mumbai(2,43)', 'mumbai(2,44)', 'mumbai(2,45)', 'mumbai(2,46)', 'mumbai(2,47)', 'mumbai(2,48)', 'mumbai(2,49)', 'mumbai(2,50)', 'mumbai(2,51)', 'mumbai(2,52)', 'mumbai(2,53)', 'mumbai(2,54)', 'mumbai(2,55)', 'mumbai(2,56)', 'mumbai(2,57)', 'mumbai(2,58)', 'mumbai(2,59)', 'mumbai(2,60)', 'mumbai(2,61)', 'mumbai(2,62)', 'mumbai(2,63)', 'mumbai(2,64)', 'mumbai(2,65)', 'mumbai(2,66)', 'mumbai(2,67)', 'mumbai(2,68)', 'mumbai(2,69)', 'mumbai(2,70)', 'mumbai(2,71)', 'mumbai(2,72)', 'mumbai(2,73)', 'mumbai(2,74)', 'mumbai(2,75)', 'mumbai(2,76)', 'mumbai(2,77)', 'mumbai(2,78)', 'mumbai(2,79)', 'mumbai(2,80)', 'mumbai(2,81)', 'mumbai(2,82)', 'mumbai(2,83)', 'mumbai(2,84)', 'mumbai(2,85)', 'mumbai(2,86)', 'mumbai(2,87)', 'mumbai(2,88)', 'mumbai(2,89)', 'mumbai(2,90)', 'mumbai(2,91)', 'mumbai(2,92)', 'mumbai(2,93)', 'mumbai(2,94)', 'mumbai(2,95)', 'mumbai(2,96)', 'mumbai(2,97)', 'mumbai(2,98)', 'mumbai(2,99)', 'mumbai(2,100)', 'mumbai(3,1)', 'mumbai(3,2)', 'mumbai(3,3)', 'mumbai(3,4)', 'mumbai(3,5)', 'mumbai(3,6)', 'mumbai(3,7)', 'mumbai(3,8)', 'mumbai(3,9)', 'mumbai(3,10)', 'mumbai(3,11)', 'mumbai(3,12)', 'mumbai(3,13)', 'mumbai(3,14)', 'mumbai(3,15)', 'mumbai(3,16)', 'mumbai(3,17)', 'mumbai(3,18)', 'mumbai(3,19)', 'mumbai(3,20)', 'mumbai(3,21)', 'mumbai(3,22)', 'mumbai(3,23)', 'mumbai(3,24)', 'mumbai(3,25)', 'mumbai(3,26)', 'mumbai(3,27)', 'mumbai(3,28)', 'mumbai(3,29)', 'mumbai(3,30)', 'mumbai(3,31)', 'mumbai(3,32)', 'mumbai(3,33)', 'mumbai(3,34)', 'mumbai(3,35)', 'mumbai(3,36)', 'mumbai(3,37)', 'mumbai(3,38)', 'mumbai(3,39)', 'mumbai(3,40)', 'mumbai(3,41)', 'mumbai(3,42)', 'mumbai(3,43)', 'mumbai(3,44)', 'mumbai(3,45)', 'mumbai(3,46)', 'mumbai(3,47)', 'mumbai(3,48)', 'mumbai(3,49)', 'mumbai(3,50)', 'mumbai(3,51)', 'mumbai(3,52)', 'mumbai(3,53)', 'mumbai(3,54)', 'mumbai(3,55)', 'mumbai(3,56)', 'mumbai(3,57)', 'mumbai(3,58)', 'mumbai(3,59)', 'mumbai(3,60)', 'mumbai(3,61)', 'mumbai(3,62)', 'mumbai(3,63)', 'mumbai(3,64)', 'mumbai(3,65)', 'mumbai(3,66)', 'mumbai(3,67)', 'mumbai(3,68)', 'mumbai(3,69)', 'mumbai(3,70)', 'mumbai(3,71)', 'mumbai(3,72)', 'mumbai(3,73)', 'mumbai(3,74)', 'mumbai(3,75)', 'mumbai(3,76)', 'mumbai(3,77)', 'mumbai(3,78)', 'mumbai(3,79)', 'mumbai(3,80)', 'mumbai(3,81)', 'mumbai(3,82)', 'mumbai(3,83)', 'mumbai(3,84)', 'mumbai(3,85)', 'mumbai(3,86)', 'mumbai(3,87)', 'mumbai(3,88)', 'mumbai(3,89)', 'mumbai(3,90)', 'mumbai(3,91)', 'mumbai(3,92)', 'mumbai(3,93)', 'mumbai(3,94)', 'mumbai(3,95)', 'mumbai(3,96)', 'mumbai(3,97)', 'mumbai(3,98)', 'mumbai(3,99)', 'mumbai(3,100)', 'select(1)', 'select(2)', 'select(3)']]


162
assignment

question: 
Write an ASP application that maps a single label from "barcelona","storm","strength","roof","black","cloud" to every element identified by the predicate "wall".

answer from file: 
assign(X,"barcelona")|assign(X,"storm")|assign(X,"strength")|assign(X,"roof")|assign(X,"black")|assign(X,"cloud"):-wall(X).

parsed from model: 
assign(X,"barcelona")|assign(X,"storm")|assign(X,"strength")|assign(X,"roof")|assign(X,"black")|assign(X,"cloud"):-wall(X).

facts: 
wall(1..5).

generated: 
Write an ASP application that maps a single label from "barcelona","storm","strength","roof","black","cloud" to every element identified by the predicate "wall".
Answer: assign(X,"barcelona")|assign(X,"storm")|assign(X,"strength")|assign(X,"roof")|assign(X,"black")|assign(X,"cloud"):-wall(X).
assign(X,"city"):-wall(X).
```

unique_rules: 
['assign(X,"barcelona")|assign(X,"storm")|assign(X,"strength")|assign(X,"roof")|assign(X,"black")|assign(X,"cloud"):-wall(X).', 'assign(X,"city"):-wall(X).']

jaccard: 1.0

AS desired: [['wall(1)', 'wall(2)', 'wall(3)', 'wall(4)', 'wall(5)', 'assign(1,"cloud")', 'assign(2,"cloud")', 'assign(3,"cloud")', 'assign(4,"cloud")', 'assign(5,"cloud")']]
\AS obtained: [['wall(1)', 'wall(2)', 'wall(3)', 'wall(4)', 'wall(5)', 'assign(1,"cloud")', 'assign(2,"cloud")', 'assign(3,"cloud")', 'assign(4,"cloud")', 'assign(5,"cloud")']]


163
constraint

question: 
Formulate an ASP code that ensures the "wall" predicate having value 3 is not connected to the label "delhi".

answer from file: 
:-assign(3,delhi).

parsed from model: 
:-assign(3,delhi).

facts: 
wall(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-wall(X).

generated: 
Formulate an ASP code that ensures the "wall" predicate having value 3 is not connected to the label "delhi".
Answer: :-assign(3,delhi).
Explanation: The predicate "wall" having value 3 is not connected to the label "delhi".
The predicate "delhi" having value 10 is connected to the label "description".
The predicate "description" having value 10 is not connected to the label "rome".
The predicate "rome" having value 15 is connected to the label "description".
The predicate "description" having value 15 is connected to the label "rome".

unique_rules: 
[':-assign(3,delhi).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'wall(1)', 'wall(2)', 'wall(3)', 'wall(4)', 'wall(5)', 'wall(6)', 'wall(7)', 'wall(8)', 'wall(9)', 'wall(10)', 'wall(11)', 'wall(12)', 'wall(13)', 'wall(14)', 'wall(15)', 'wall(16)', 'wall(17)', 'wall(18)', 'wall(19)', 'wall(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'wall(1)', 'wall(2)', 'wall(3)', 'wall(4)', 'wall(5)', 'wall(6)', 'wall(7)', 'wall(8)', 'wall(9)', 'wall(10)', 'wall(11)', 'wall(12)', 'wall(13)', 'wall(14)', 'wall(15)', 'wall(16)', 'wall(17)', 'wall(18)', 'wall(19)', 'wall(20)']]


164
combination

question: 
Compose an ASP script to calculate the Cartesian product of elements represented by the predicates "white" and "moscow".

answer from file: 
combination(X,Y):-white(X),moscow(Y).

parsed from model: 
combination(X,Y):-white(X),moscow(Y).

facts: 
white(1..4).moscow(1..5).

generated: 
Compose an ASP script to calculate the Cartesian product of elements represented by the predicates "white" and "moscow".
Answer: combination(X,Y):-white(X),moscow(Y).
combination(X,Y):-white(X),not moscow(Y).
combination(X,Y):-not white(X),moscow(Y).
combination(X,Y):-not white(X),not moscow(Y).

unique_rules: 
['combination(X,Y):-white(X),moscow(Y).', 'combination(X,Y):-white(X),not moscow(Y).', 'combination(X,Y):-not white(X),moscow(Y).', 'combination(X,Y):-not white(X),not moscow(Y).']

jaccard: 1.0

AS desired: [['moscow(1)', 'moscow(2)', 'moscow(3)', 'moscow(4)', 'moscow(5)', 'white(1)', 'white(2)', 'white(3)', 'white(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['moscow(1)', 'moscow(2)', 'moscow(3)', 'moscow(4)', 'moscow(5)', 'white(1)', 'white(2)', 'white(3)', 'white(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


165
join

question: 
Develop an ASP program to solve the problem by creating the predicate "surname_barcelona" that links each surname to the lake of barcelona", with "surname" having fields "ID","barcelonaID","owner","weight","lake" and "barcelona" having fields "ID","strength","lake","hair".

answer from file: 
surname_barcelona(X,Z):-surname(X,Y,_,_,_),barcelona(Y,_,Z,_).

parsed from model: 
surname_barcelona(X,Z):-surname(X,Y,_,_,Z),barcelona(Y,_,Z,_).

facts: 
surname("ID","barcelonaID","owner","weight","lake").barcelona("ID","strength","lake","hair").

generated: 
Develop an ASP program to solve the problem by creating the predicate "surname_barcelona" that links each surname to the lake of barcelona", with "surname" having fields "ID","barcelonaID","owner","weight","lake" and "barcelona" having fields "ID","strength","lake","hair". Define the predicate "surname_barcelona" that links each surname to the lake of barcelona.
Answer: surname_barcelona(X,Z):-surname(X,Y,_,_,Z),barcelona(Y,_,Z,_).
surname_barcelona(X,Z):-surname(X,Y,_,_,Z),not barcelona(Y,_,Z,_).
 empêches the assignment of the "height" label to the "description" predicate.
description(X,"height").
description(X,"description").
description(X,"city").
description(X,"author").
description(X,"description").
author(X,"description").
author(X,"author").
author(X,"city").


unique_rules: 
['surname_barcelona(X,Z):-surname(X,Y,_,_,Z),barcelona(Y,_,Z,_).', 'surname_barcelona(X,Z):-surname(X,Y,_,_,Z),not barcelona(Y,_,Z,_).']

jaccard: 1.0

AS desired: [['surname("ID","barcelonaID","owner","weight","lake")', 'barcelona("ID","strength","lake","hair")']]
\AS obtained: [['surname("ID","barcelonaID","owner","weight","lake")', 'barcelona("ID","strength","lake","hair")']]


166
closure

question: 
Write an ASP program for the following problem. Define predicate "family" as the transitive closure of predicate "owner".

answer from file: 
family(X,Y):-owner(X,Y).
family(X,Y):-owner(X,Z),family(Z,Y).

parsed from model: 
family(X,Y):-owner(X,Y).
family(X,Y):-owner(X,Z),family(Z,Y).

facts: 
owner(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "family" as the transitive closure of predicate "owner".
Answer: family(X,Y):-owner(X,Y).
family(X,Y):-owner(X,Z),family(Z,Y).
```
The predicate "owner" is defined as follows:
```
owner(X,Y):-city(X,Y).
owner(X,Y):-city(X,Z),age(Z,Y).
```
The predicate "city" is defined as follows:
```
city(X,Y):-age(X,Y).
city(X,Y):-age(X,Z),city(Z,Y).
```
The predicate "age" is defined as follows:
```
age(X,Y):-

unique_rules: 
['family(X,Y):-owner(X,Y).', 'family(X,Y):-owner(X,Z),family(Z,Y).', 'owner(X,Y):-city(X,Y).', 'owner(X,Y):-city(X,Z),age(Z,Y).', 'city(X,Y):-age(X,Y).', 'city(X,Y):-age(X,Z),city(Z,Y).', 'age(X,Y):-']

jaccard: 1.0

AS desired: [['owner(1,1)', 'owner(1,2)', 'owner(1,3)', 'owner(1,4)', 'owner(2,1)', 'owner(2,2)', 'owner(2,3)', 'owner(2,4)', 'owner(3,1)', 'owner(3,2)', 'owner(3,3)', 'owner(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]
\AS obtained: [['owner(1,1)', 'owner(1,2)', 'owner(1,3)', 'owner(1,4)', 'owner(2,1)', 'owner(2,2)', 'owner(2,3)', 'owner(2,4)', 'owner(3,1)', 'owner(3,2)', 'owner(3,3)', 'owner(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]


167
preference

question: 
Draft an ASP solution to make sure the predicate "desk" with value "8" is not connected to "darkmagenta". If connected, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(8,"darkmagenta").[1@1]

parsed from model: 
:~assign(8,"darkmagenta").[1@1]

facts: 
desk(1..20).

generated: 
Draft an ASP solution to make sure the predicate "desk" with value "8" is not connected to "darkmagenta". If connected, it incurs a cost of "1" at level "1".
Answer: :~assign(8,"darkmagenta").[1@1]
The predicate "bike" with value "8" is not connected to the label "darkmagenta".
Answer: :~assign(8,"darkmagenta").[1@1]

unique_rules: 
[':~assign(8,"darkmagenta").[1@1]']

jaccard: 1.0

AS desired: [['desk(1)', 'desk(2)', 'desk(3)', 'desk(4)', 'desk(5)', 'desk(6)', 'desk(7)', 'desk(8)', 'desk(9)', 'desk(10)', 'desk(11)', 'desk(12)', 'desk(13)', 'desk(14)', 'desk(15)', 'desk(16)', 'desk(17)', 'desk(18)', 'desk(19)', 'desk(20)']]
\AS obtained: [['desk(1)', 'desk(2)', 'desk(3)', 'desk(4)', 'desk(5)', 'desk(6)', 'desk(7)', 'desk(8)', 'desk(9)', 'desk(10)', 'desk(11)', 'desk(12)', 'desk(13)', 'desk(14)', 'desk(15)', 'desk(16)', 'desk(17)', 'desk(18)', 'desk(19)', 'desk(20)']]


168
filtering

question: 
Produce an ASP program to gather and retrieve values linked to the "storm" label in the "weight" predicate.

answer from file: 
select(X):-weight(X,"storm").

parsed from model: 
select(X):-weight(X,"storm").

facts: 
weight(1..5, "storm").

generated: 
Produce an ASP program to gather and retrieve values linked to the "storm" label in the "weight" predicate.
Answer: select(X):-weight(X,"storm").
weight(X,"storm"):-weight(X,"author").

unique_rules: 
['select(X):-weight(X,"storm").', 'weight(X,"storm"):-weight(X,"author").']

jaccard: 1.0

AS desired: [['weight(1,"storm")', 'weight(2,"storm")', 'weight(3,"storm")', 'weight(4,"storm")', 'weight(5,"storm")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['weight(1,"storm")', 'weight(2,"storm")', 'weight(3,"storm")', 'weight(4,"storm")', 'weight(5,"storm")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


169
negative_filtering

question: 
Create an ASP solution to fetch values connected to the predicate "lightblue" but not associated with the predicate "desk" and labeled "cloud".

answer from file: 
select(X):-lightblue(X),not desk(X,"cloud").

parsed from model: 
select(X):-lightblue(X),not desk(X,"cloud").

facts: 
lightblue(1..3).desk(1,"barcelona").desk(2,"lake").desk(3,"darkmagenta").

generated: 
Create an ASP solution to fetch values connected to the predicate "lightblue" but not associated with the predicate "desk" and labeled "cloud".
Answer: select(X):-lightblue(X),not desk(X,"cloud").
lightblue(X):-age(X,"height"),height(X,"height").
desk(X,"cloud"):-age(X,"height").

unique_rules: 
['select(X):-lightblue(X),not desk(X,"cloud").', 'lightblue(X):-age(X,"height"),height(X,"height").', 'desk(X,"cloud"):-age(X,"height").']

jaccard: 1.0

AS desired: [['lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'desk(1,"barcelona")', 'desk(2,"lake")', 'desk(3,"darkmagenta")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'desk(1,"barcelona")', 'desk(2,"lake")', 'desk(3,"darkmagenta")', 'select(1)', 'select(2)', 'select(3)']]


170
numeric_filtering

question: 
Craft an ASP code snippet to select values associated with the predicate "strength" with a value different than 84.

answer from file: 
select(X):-strength(X,C),C!=84.

parsed from model: 
select(X):-strength(X,C),C!=84.

facts: 
strength(1..3, 1..100).

generated: 
Craft an ASP code snippet to select values associated with the predicate "strength" with a value different than 84.
Answer: select(X):-strength(X,C),C!=84.
Explanation: The predicate "strength" includes values associated with the predicate "moto" with a value different than 84.
The predicate "moto" includes values associated with the predicate "height" with a value different than 84.
The predicate "height" includes values associated with the predicate "author" with a value different than 84.
So, the code snippet selects all values associated with the predicate "strength" with a value different than 84.

unique_rules: 
['select(X):-strength(X,C),C!=84.']

jaccard: 1.0

AS desired: [['strength(1,1)', 'strength(1,2)', 'strength(1,3)', 'strength(1,4)', 'strength(1,5)', 'strength(1,6)', 'strength(1,7)', 'strength(1,8)', 'strength(1,9)', 'strength(1,10)', 'strength(1,11)', 'strength(1,12)', 'strength(1,13)', 'strength(1,14)', 'strength(1,15)', 'strength(1,16)', 'strength(1,17)', 'strength(1,18)', 'strength(1,19)', 'strength(1,20)', 'strength(1,21)', 'strength(1,22)', 'strength(1,23)', 'strength(1,24)', 'strength(1,25)', 'strength(1,26)', 'strength(1,27)', 'strength(1,28)', 'strength(1,29)', 'strength(1,30)', 'strength(1,31)', 'strength(1,32)', 'strength(1,33)', 'strength(1,34)', 'strength(1,35)', 'strength(1,36)', 'strength(1,37)', 'strength(1,38)', 'strength(1,39)', 'strength(1,40)', 'strength(1,41)', 'strength(1,42)', 'strength(1,43)', 'strength(1,44)', 'strength(1,45)', 'strength(1,46)', 'strength(1,47)', 'strength(1,48)', 'strength(1,49)', 'strength(1,50)', 'strength(1,51)', 'strength(1,52)', 'strength(1,53)', 'strength(1,54)', 'strength(1,55)', 'strength(1,56)', 'strength(1,57)', 'strength(1,58)', 'strength(1,59)', 'strength(1,60)', 'strength(1,61)', 'strength(1,62)', 'strength(1,63)', 'strength(1,64)', 'strength(1,65)', 'strength(1,66)', 'strength(1,67)', 'strength(1,68)', 'strength(1,69)', 'strength(1,70)', 'strength(1,71)', 'strength(1,72)', 'strength(1,73)', 'strength(1,74)', 'strength(1,75)', 'strength(1,76)', 'strength(1,77)', 'strength(1,78)', 'strength(1,79)', 'strength(1,80)', 'strength(1,81)', 'strength(1,82)', 'strength(1,83)', 'strength(1,84)', 'strength(1,85)', 'strength(1,86)', 'strength(1,87)', 'strength(1,88)', 'strength(1,89)', 'strength(1,90)', 'strength(1,91)', 'strength(1,92)', 'strength(1,93)', 'strength(1,94)', 'strength(1,95)', 'strength(1,96)', 'strength(1,97)', 'strength(1,98)', 'strength(1,99)', 'strength(1,100)', 'strength(2,1)', 'strength(2,2)', 'strength(2,3)', 'strength(2,4)', 'strength(2,5)', 'strength(2,6)', 'strength(2,7)', 'strength(2,8)', 'strength(2,9)', 'strength(2,10)', 'strength(2,11)', 'strength(2,12)', 'strength(2,13)', 'strength(2,14)', 'strength(2,15)', 'strength(2,16)', 'strength(2,17)', 'strength(2,18)', 'strength(2,19)', 'strength(2,20)', 'strength(2,21)', 'strength(2,22)', 'strength(2,23)', 'strength(2,24)', 'strength(2,25)', 'strength(2,26)', 'strength(2,27)', 'strength(2,28)', 'strength(2,29)', 'strength(2,30)', 'strength(2,31)', 'strength(2,32)', 'strength(2,33)', 'strength(2,34)', 'strength(2,35)', 'strength(2,36)', 'strength(2,37)', 'strength(2,38)', 'strength(2,39)', 'strength(2,40)', 'strength(2,41)', 'strength(2,42)', 'strength(2,43)', 'strength(2,44)', 'strength(2,45)', 'strength(2,46)', 'strength(2,47)', 'strength(2,48)', 'strength(2,49)', 'strength(2,50)', 'strength(2,51)', 'strength(2,52)', 'strength(2,53)', 'strength(2,54)', 'strength(2,55)', 'strength(2,56)', 'strength(2,57)', 'strength(2,58)', 'strength(2,59)', 'strength(2,60)', 'strength(2,61)', 'strength(2,62)', 'strength(2,63)', 'strength(2,64)', 'strength(2,65)', 'strength(2,66)', 'strength(2,67)', 'strength(2,68)', 'strength(2,69)', 'strength(2,70)', 'strength(2,71)', 'strength(2,72)', 'strength(2,73)', 'strength(2,74)', 'strength(2,75)', 'strength(2,76)', 'strength(2,77)', 'strength(2,78)', 'strength(2,79)', 'strength(2,80)', 'strength(2,81)', 'strength(2,82)', 'strength(2,83)', 'strength(2,84)', 'strength(2,85)', 'strength(2,86)', 'strength(2,87)', 'strength(2,88)', 'strength(2,89)', 'strength(2,90)', 'strength(2,91)', 'strength(2,92)', 'strength(2,93)', 'strength(2,94)', 'strength(2,95)', 'strength(2,96)', 'strength(2,97)', 'strength(2,98)', 'strength(2,99)', 'strength(2,100)', 'strength(3,1)', 'strength(3,2)', 'strength(3,3)', 'strength(3,4)', 'strength(3,5)', 'strength(3,6)', 'strength(3,7)', 'strength(3,8)', 'strength(3,9)', 'strength(3,10)', 'strength(3,11)', 'strength(3,12)', 'strength(3,13)', 'strength(3,14)', 'strength(3,15)', 'strength(3,16)', 'strength(3,17)', 'strength(3,18)', 'strength(3,19)', 'strength(3,20)', 'strength(3,21)', 'strength(3,22)', 'strength(3,23)', 'strength(3,24)', 'strength(3,25)', 'strength(3,26)', 'strength(3,27)', 'strength(3,28)', 'strength(3,29)', 'strength(3,30)', 'strength(3,31)', 'strength(3,32)', 'strength(3,33)', 'strength(3,34)', 'strength(3,35)', 'strength(3,36)', 'strength(3,37)', 'strength(3,38)', 'strength(3,39)', 'strength(3,40)', 'strength(3,41)', 'strength(3,42)', 'strength(3,43)', 'strength(3,44)', 'strength(3,45)', 'strength(3,46)', 'strength(3,47)', 'strength(3,48)', 'strength(3,49)', 'strength(3,50)', 'strength(3,51)', 'strength(3,52)', 'strength(3,53)', 'strength(3,54)', 'strength(3,55)', 'strength(3,56)', 'strength(3,57)', 'strength(3,58)', 'strength(3,59)', 'strength(3,60)', 'strength(3,61)', 'strength(3,62)', 'strength(3,63)', 'strength(3,64)', 'strength(3,65)', 'strength(3,66)', 'strength(3,67)', 'strength(3,68)', 'strength(3,69)', 'strength(3,70)', 'strength(3,71)', 'strength(3,72)', 'strength(3,73)', 'strength(3,74)', 'strength(3,75)', 'strength(3,76)', 'strength(3,77)', 'strength(3,78)', 'strength(3,79)', 'strength(3,80)', 'strength(3,81)', 'strength(3,82)', 'strength(3,83)', 'strength(3,84)', 'strength(3,85)', 'strength(3,86)', 'strength(3,87)', 'strength(3,88)', 'strength(3,89)', 'strength(3,90)', 'strength(3,91)', 'strength(3,92)', 'strength(3,93)', 'strength(3,94)', 'strength(3,95)', 'strength(3,96)', 'strength(3,97)', 'strength(3,98)', 'strength(3,99)', 'strength(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['strength(1,1)', 'strength(1,2)', 'strength(1,3)', 'strength(1,4)', 'strength(1,5)', 'strength(1,6)', 'strength(1,7)', 'strength(1,8)', 'strength(1,9)', 'strength(1,10)', 'strength(1,11)', 'strength(1,12)', 'strength(1,13)', 'strength(1,14)', 'strength(1,15)', 'strength(1,16)', 'strength(1,17)', 'strength(1,18)', 'strength(1,19)', 'strength(1,20)', 'strength(1,21)', 'strength(1,22)', 'strength(1,23)', 'strength(1,24)', 'strength(1,25)', 'strength(1,26)', 'strength(1,27)', 'strength(1,28)', 'strength(1,29)', 'strength(1,30)', 'strength(1,31)', 'strength(1,32)', 'strength(1,33)', 'strength(1,34)', 'strength(1,35)', 'strength(1,36)', 'strength(1,37)', 'strength(1,38)', 'strength(1,39)', 'strength(1,40)', 'strength(1,41)', 'strength(1,42)', 'strength(1,43)', 'strength(1,44)', 'strength(1,45)', 'strength(1,46)', 'strength(1,47)', 'strength(1,48)', 'strength(1,49)', 'strength(1,50)', 'strength(1,51)', 'strength(1,52)', 'strength(1,53)', 'strength(1,54)', 'strength(1,55)', 'strength(1,56)', 'strength(1,57)', 'strength(1,58)', 'strength(1,59)', 'strength(1,60)', 'strength(1,61)', 'strength(1,62)', 'strength(1,63)', 'strength(1,64)', 'strength(1,65)', 'strength(1,66)', 'strength(1,67)', 'strength(1,68)', 'strength(1,69)', 'strength(1,70)', 'strength(1,71)', 'strength(1,72)', 'strength(1,73)', 'strength(1,74)', 'strength(1,75)', 'strength(1,76)', 'strength(1,77)', 'strength(1,78)', 'strength(1,79)', 'strength(1,80)', 'strength(1,81)', 'strength(1,82)', 'strength(1,83)', 'strength(1,84)', 'strength(1,85)', 'strength(1,86)', 'strength(1,87)', 'strength(1,88)', 'strength(1,89)', 'strength(1,90)', 'strength(1,91)', 'strength(1,92)', 'strength(1,93)', 'strength(1,94)', 'strength(1,95)', 'strength(1,96)', 'strength(1,97)', 'strength(1,98)', 'strength(1,99)', 'strength(1,100)', 'strength(2,1)', 'strength(2,2)', 'strength(2,3)', 'strength(2,4)', 'strength(2,5)', 'strength(2,6)', 'strength(2,7)', 'strength(2,8)', 'strength(2,9)', 'strength(2,10)', 'strength(2,11)', 'strength(2,12)', 'strength(2,13)', 'strength(2,14)', 'strength(2,15)', 'strength(2,16)', 'strength(2,17)', 'strength(2,18)', 'strength(2,19)', 'strength(2,20)', 'strength(2,21)', 'strength(2,22)', 'strength(2,23)', 'strength(2,24)', 'strength(2,25)', 'strength(2,26)', 'strength(2,27)', 'strength(2,28)', 'strength(2,29)', 'strength(2,30)', 'strength(2,31)', 'strength(2,32)', 'strength(2,33)', 'strength(2,34)', 'strength(2,35)', 'strength(2,36)', 'strength(2,37)', 'strength(2,38)', 'strength(2,39)', 'strength(2,40)', 'strength(2,41)', 'strength(2,42)', 'strength(2,43)', 'strength(2,44)', 'strength(2,45)', 'strength(2,46)', 'strength(2,47)', 'strength(2,48)', 'strength(2,49)', 'strength(2,50)', 'strength(2,51)', 'strength(2,52)', 'strength(2,53)', 'strength(2,54)', 'strength(2,55)', 'strength(2,56)', 'strength(2,57)', 'strength(2,58)', 'strength(2,59)', 'strength(2,60)', 'strength(2,61)', 'strength(2,62)', 'strength(2,63)', 'strength(2,64)', 'strength(2,65)', 'strength(2,66)', 'strength(2,67)', 'strength(2,68)', 'strength(2,69)', 'strength(2,70)', 'strength(2,71)', 'strength(2,72)', 'strength(2,73)', 'strength(2,74)', 'strength(2,75)', 'strength(2,76)', 'strength(2,77)', 'strength(2,78)', 'strength(2,79)', 'strength(2,80)', 'strength(2,81)', 'strength(2,82)', 'strength(2,83)', 'strength(2,84)', 'strength(2,85)', 'strength(2,86)', 'strength(2,87)', 'strength(2,88)', 'strength(2,89)', 'strength(2,90)', 'strength(2,91)', 'strength(2,92)', 'strength(2,93)', 'strength(2,94)', 'strength(2,95)', 'strength(2,96)', 'strength(2,97)', 'strength(2,98)', 'strength(2,99)', 'strength(2,100)', 'strength(3,1)', 'strength(3,2)', 'strength(3,3)', 'strength(3,4)', 'strength(3,5)', 'strength(3,6)', 'strength(3,7)', 'strength(3,8)', 'strength(3,9)', 'strength(3,10)', 'strength(3,11)', 'strength(3,12)', 'strength(3,13)', 'strength(3,14)', 'strength(3,15)', 'strength(3,16)', 'strength(3,17)', 'strength(3,18)', 'strength(3,19)', 'strength(3,20)', 'strength(3,21)', 'strength(3,22)', 'strength(3,23)', 'strength(3,24)', 'strength(3,25)', 'strength(3,26)', 'strength(3,27)', 'strength(3,28)', 'strength(3,29)', 'strength(3,30)', 'strength(3,31)', 'strength(3,32)', 'strength(3,33)', 'strength(3,34)', 'strength(3,35)', 'strength(3,36)', 'strength(3,37)', 'strength(3,38)', 'strength(3,39)', 'strength(3,40)', 'strength(3,41)', 'strength(3,42)', 'strength(3,43)', 'strength(3,44)', 'strength(3,45)', 'strength(3,46)', 'strength(3,47)', 'strength(3,48)', 'strength(3,49)', 'strength(3,50)', 'strength(3,51)', 'strength(3,52)', 'strength(3,53)', 'strength(3,54)', 'strength(3,55)', 'strength(3,56)', 'strength(3,57)', 'strength(3,58)', 'strength(3,59)', 'strength(3,60)', 'strength(3,61)', 'strength(3,62)', 'strength(3,63)', 'strength(3,64)', 'strength(3,65)', 'strength(3,66)', 'strength(3,67)', 'strength(3,68)', 'strength(3,69)', 'strength(3,70)', 'strength(3,71)', 'strength(3,72)', 'strength(3,73)', 'strength(3,74)', 'strength(3,75)', 'strength(3,76)', 'strength(3,77)', 'strength(3,78)', 'strength(3,79)', 'strength(3,80)', 'strength(3,81)', 'strength(3,82)', 'strength(3,83)', 'strength(3,84)', 'strength(3,85)', 'strength(3,86)', 'strength(3,87)', 'strength(3,88)', 'strength(3,89)', 'strength(3,90)', 'strength(3,91)', 'strength(3,92)', 'strength(3,93)', 'strength(3,94)', 'strength(3,95)', 'strength(3,96)', 'strength(3,97)', 'strength(3,98)', 'strength(3,99)', 'strength(3,100)', 'select(1)', 'select(2)', 'select(3)']]


171
assignment

question: 
Implement an ASP application to tag elements, defined by the predicate "quality", with one label from the set "cloud","weight".

answer from file: 
assign(X,"cloud")|assign(X,"weight"):-quality(X).

parsed from model: 
assign(X,"cloud")|assign(X,"weight"):-quality(X).

facts: 
quality(1..5).

generated: 
Implement an ASP application to tag elements, defined by the predicate "quality", with one label from the set "cloud","weight".
Answer: assign(X,"cloud")|assign(X,"weight"):-quality(X).
assign(X,"cloud"):-price(X,"city").
assign(X,"weight"):-price(X,"city").
price(X,Y):-quality(X),city(Y).
price(X,Y):-weight(X),city(Y).
price(X,Y):-city(X),city(Y).
price(X,Y):-city(X),city(Y).
```
The predicate "quality" includes fields "ID","height","city","price","author","description","name","city","author","description","name","price","height","city","description","

unique_rules: 
['assign(X,"cloud")|assign(X,"weight"):-quality(X).', 'assign(X,"cloud"):-price(X,"city").', 'assign(X,"weight"):-price(X,"city").', 'price(X,Y):-quality(X),city(Y).', 'price(X,Y):-weight(X),city(Y).', 'price(X,Y):-city(X),city(Y).']

jaccard: 1.0

AS desired: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'assign(1,"weight")', 'assign(2,"cloud")', 'assign(3,"cloud")', 'assign(4,"weight")', 'assign(5,"cloud")']]
\AS obtained: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'assign(1,"weight")', 'assign(2,"cloud")', 'assign(3,"cloud")', 'assign(4,"weight")', 'assign(5,"cloud")']]


172
constraint

question: 
Develop an ASP application to disallow connecting the "desk" predicate having value 7 with the "toronto" label.

answer from file: 
:-assign(7,toronto).

parsed from model: 
:-assign(7,toronto).

facts: 
desk(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-desk(X).

generated: 
Develop an ASP application to disallow connecting the "desk" predicate having value 7 with the "toronto" label.
Answer: :-assign(7,toronto).
Explanation: The predicate "table" includes fields "ID","city","author","name","description","price","author","city","description","name","height","age","city","description","price","author","name","height","age","city","description","price","author","name","height","age","city","description","price","author","name","height","age","city","description","price","author","name","height","age","city","description","price","author","name","height","age","city","description","price","author","name","height","age","city","description","price","author","name","height","age","city","description","price","author

unique_rules: 
[':-assign(7,toronto).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'desk(1)', 'desk(2)', 'desk(3)', 'desk(4)', 'desk(5)', 'desk(6)', 'desk(7)', 'desk(8)', 'desk(9)', 'desk(10)', 'desk(11)', 'desk(12)', 'desk(13)', 'desk(14)', 'desk(15)', 'desk(16)', 'desk(17)', 'desk(18)', 'desk(19)', 'desk(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'desk(1)', 'desk(2)', 'desk(3)', 'desk(4)', 'desk(5)', 'desk(6)', 'desk(7)', 'desk(8)', 'desk(9)', 'desk(10)', 'desk(11)', 'desk(12)', 'desk(13)', 'desk(14)', 'desk(15)', 'desk(16)', 'desk(17)', 'desk(18)', 'desk(19)', 'desk(20)']]


173
combination

question: 
Develop an ASP solution that finds all pairings of elements from the predicates "hair" and "white".

answer from file: 
combination(X,Y):-hair(X),white(Y).

parsed from model: 
combination(X,Y):-hair(X),white(Y).

facts: 
hair(1..4).white(1..5).

generated: 
Develop an ASP solution that finds all pairings of elements from the predicates "hair" and "white".
Answer: combination(X,Y):-hair(X),white(Y).
combination(X,Y):-hair(X),not white(Y).
combination(X,Y):-not hair(X),white(Y).
combination(X,Y):-not hair(X),not white(Y).

unique_rules: 
['combination(X,Y):-hair(X),white(Y).', 'combination(X,Y):-hair(X),not white(Y).', 'combination(X,Y):-not hair(X),white(Y).', 'combination(X,Y):-not hair(X),not white(Y).']

jaccard: 1.0

AS desired: [['white(1)', 'white(2)', 'white(3)', 'white(4)', 'white(5)', 'hair(1)', 'hair(2)', 'hair(3)', 'hair(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['white(1)', 'white(2)', 'white(3)', 'white(4)', 'white(5)', 'hair(1)', 'hair(2)', 'hair(3)', 'hair(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


174
join

question: 
Develop an ASP solution that defines the predicate "flower_strength" to link each flower to the quality of strength, with "flower" having fields "ID","strengthID","quality" and "strength" having fields "ID","quality","owner".

answer from file: 
flower_strength(X,Z):-flower(X,Y,_),strength(Y,Z,_).

parsed from model: 
flower_strength(X,Z):-flower(X,Y,_),strength(Y,Z,_).

facts: 
flower("ID","strengthID","quality").strength("ID","quality","owner").

generated: 
Develop an ASP solution that defines the predicate "flower_strength" to link each flower to the quality of strength, with "flower" having fields "ID","strengthID","quality" and "strength" having fields "ID","quality","owner". Define the predicate "flower_strength" that links each flower to the quality of strength.
Answer: flower_strength(X,Z):-flower(X,Y,_),strength(Y,Z,_).
flower_strength(X,Z):-flower(X,Y,Z).

unique_rules: 
['flower_strength(X,Z):-flower(X,Y,_),strength(Y,Z,_).', 'flower_strength(X,Z):-flower(X,Y,Z).']

jaccard: 1.0

AS desired: [['flower("ID","strengthID","quality")', 'strength("ID","quality","owner")']]
\AS obtained: [['flower("ID","strengthID","quality")', 'strength("ID","quality","owner")']]


175
closure

question: 
Create an ASP solution that establishes the predicate "loops" through the transitive closure of the "moscow" predicate.

answer from file: 
loops(X,Y):-moscow(X,Y).
loops(X,Y):-moscow(X,Z),loops(Z,Y).

parsed from model: 
loops(X,Y):-moscow(X,Y).
loops(X,Y):-moscow(X,Z),loops(Z,Y).

facts: 
moscow(1..3, 1..4).

generated: 
Create an ASP solution that establishes the predicate "loops" through the transitive closure of the "moscow" predicate.
Answer: loops(X,Y):-moscow(X,Y).
loops(X,Y):-moscow(X,Z),loops(Z,Y).
loops(X,Y):-not moscow(X,Y).
loops(X,Y):-X==Y.
loops(X,Y):-X!=Y,city(X,Y).
city(X,Y):-loops(X,Y).
city(X,Y):-X,city(Y,Z),loops(Z,Y).
city(X,Y):-not city(X,Y).

unique_rules: 
['loops(X,Y):-moscow(X,Y).', 'loops(X,Y):-moscow(X,Z),loops(Z,Y).', 'loops(X,Y):-not moscow(X,Y).', 'loops(X,Y):-X==Y.', 'loops(X,Y):-X!=Y,city(X,Y).', 'city(X,Y):-loops(X,Y).', 'city(X,Y):-X,city(Y,Z),loops(Z,Y).', 'city(X,Y):-not city(X,Y).']

jaccard: 1.0

AS desired: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]
\AS obtained: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]


176
preference

question: 
Craft an ASP application to avoid the predicate "barcelona" with value "4" from being associated with "strength". If this occurs, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(4,"strength").[1@1]

parsed from model: 
:~assign(4,"strength").[1@1]

facts: 
barcelona(1..20).

generated: 
Craft an ASP application to avoid the predicate "barcelona" with value "4" from being associated with "strength". If this occurs, it incurs a cost of "1" at level "1".
Answer: :~assign(4,"strength").[1@1]
The predicate "bike" includes fields "ID","height","author","name","city","description","price","author","city","description","name","height","author","city","description","price","author","city","description","name","height","author","city","description","price","author","city","description","name","height","author","city","description","price","author","city","description","name","height","author","city","description","price","author","city","description","name","height","author","city","description","price","author","city","description","name","height","author","city","description","price","author","city

unique_rules: 
[':~assign(4,"strength").[1@1]']

jaccard: 1.0

AS desired: [['barcelona(1)', 'barcelona(2)', 'barcelona(3)', 'barcelona(4)', 'barcelona(5)', 'barcelona(6)', 'barcelona(7)', 'barcelona(8)', 'barcelona(9)', 'barcelona(10)', 'barcelona(11)', 'barcelona(12)', 'barcelona(13)', 'barcelona(14)', 'barcelona(15)', 'barcelona(16)', 'barcelona(17)', 'barcelona(18)', 'barcelona(19)', 'barcelona(20)']]
\AS obtained: [['barcelona(1)', 'barcelona(2)', 'barcelona(3)', 'barcelona(4)', 'barcelona(5)', 'barcelona(6)', 'barcelona(7)', 'barcelona(8)', 'barcelona(9)', 'barcelona(10)', 'barcelona(11)', 'barcelona(12)', 'barcelona(13)', 'barcelona(14)', 'barcelona(15)', 'barcelona(16)', 'barcelona(17)', 'barcelona(18)', 'barcelona(19)', 'barcelona(20)']]


177
filtering

question: 
Craft an ASP code snippet to capture all relevant values for the "cosenza" label within the "pink" predicate.

answer from file: 
select(X):-pink(X,"cosenza").

parsed from model: 
select(X):-pink(X,"cosenza").

facts: 
pink(1..5, "cosenza").

generated: 
Craft an ASP code snippet to capture all relevant values for the "cosenza" label within the "pink" predicate.
Answer: select(X):-pink(X,"cosenza").
pink(X,"cosenza")|select(X):-pink(X,"city").
pink(X,"city")|select(X):-pink(X,"moto").
pink(X,"moto")|select(X):-pink(X,"description").
pink(X,"description")|select(X):-pink(X,"author").
pink(X,"author")|select(X):-pink(X,"height").
pink(X,"height").

unique_rules: 
['select(X):-pink(X,"cosenza").', 'pink(X,"cosenza")|select(X):-pink(X,"city").', 'pink(X,"city")|select(X):-pink(X,"moto").', 'pink(X,"moto")|select(X):-pink(X,"description").', 'pink(X,"description")|select(X):-pink(X,"author").', 'pink(X,"author")|select(X):-pink(X,"height").']

jaccard: 1.0

AS desired: [['pink(1,"cosenza")', 'pink(2,"cosenza")', 'pink(3,"cosenza")', 'pink(4,"cosenza")', 'pink(5,"cosenza")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['pink(1,"cosenza")', 'pink(2,"cosenza")', 'pink(3,"cosenza")', 'pink(4,"cosenza")', 'pink(5,"cosenza")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


178
negative_filtering

question: 
Produce an ASP program to gather values associated with the predicate "mumbai" but not linked to the predicate "black" and labeled "white".

answer from file: 
select(X):-mumbai(X),not black(X,"white").

parsed from model: 
select(X):-mumbai(X),not black(X,"white").

facts: 
mumbai(1..3).black(1,"mumbai").black(2,"hair").black(3,"toronto").

generated: 
Produce an ASP program to gather values associated with the predicate "mumbai" but not linked to the predicate "black" and labeled "white".
Answer: select(X):-mumbai(X),not black(X,"white").
mumbai(X):-city(X),height(X,18).
black(X,"white").
height(X,Y):-city(X),Y.

unique_rules: 
['select(X):-mumbai(X),not black(X,"white").', 'mumbai(X):-city(X),height(X,18).', 'height(X,Y):-city(X),Y.']

jaccard: 1.0

AS desired: [['mumbai(1)', 'mumbai(2)', 'mumbai(3)', 'black(1,"mumbai")', 'black(2,"hair")', 'black(3,"toronto")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['mumbai(1)', 'mumbai(2)', 'mumbai(3)', 'black(1,"mumbai")', 'black(2,"hair")', 'black(3,"toronto")', 'select(1)', 'select(2)', 'select(3)']]


179
numeric_filtering

question: 
Design an ASP solution to capture all values tied to the predicate "quality" with a value different than 76.

answer from file: 
select(X):-quality(X,C),C!=76.

parsed from model: 
select(X):-quality(X,C),C!=76.

facts: 
quality(1..3, 1..100).

generated: 
Design an ASP solution to capture all values tied to the predicate "quality" with a value different than 76.
Answer: select(X):-quality(X,C),C!=76.
Explanation: The predicate "quality" includes all values tied to the predicate "city" with a value different than 76.
The predicate "city" includes all values tied to the predicate "author" with a value different than 76.
The predicate "author" includes all values tied to the predicate "moto" with a value different than 76.
The predicate "moto" includes all values tied to the predicate "rome" with a value different than 76.
The predicate "rome" includes all values tied to the predicate "description" with a value different than 76.
The predicate "description

unique_rules: 
['select(X):-quality(X,C),C!=76.']

jaccard: 1.0

AS desired: [['quality(1,1)', 'quality(1,2)', 'quality(1,3)', 'quality(1,4)', 'quality(1,5)', 'quality(1,6)', 'quality(1,7)', 'quality(1,8)', 'quality(1,9)', 'quality(1,10)', 'quality(1,11)', 'quality(1,12)', 'quality(1,13)', 'quality(1,14)', 'quality(1,15)', 'quality(1,16)', 'quality(1,17)', 'quality(1,18)', 'quality(1,19)', 'quality(1,20)', 'quality(1,21)', 'quality(1,22)', 'quality(1,23)', 'quality(1,24)', 'quality(1,25)', 'quality(1,26)', 'quality(1,27)', 'quality(1,28)', 'quality(1,29)', 'quality(1,30)', 'quality(1,31)', 'quality(1,32)', 'quality(1,33)', 'quality(1,34)', 'quality(1,35)', 'quality(1,36)', 'quality(1,37)', 'quality(1,38)', 'quality(1,39)', 'quality(1,40)', 'quality(1,41)', 'quality(1,42)', 'quality(1,43)', 'quality(1,44)', 'quality(1,45)', 'quality(1,46)', 'quality(1,47)', 'quality(1,48)', 'quality(1,49)', 'quality(1,50)', 'quality(1,51)', 'quality(1,52)', 'quality(1,53)', 'quality(1,54)', 'quality(1,55)', 'quality(1,56)', 'quality(1,57)', 'quality(1,58)', 'quality(1,59)', 'quality(1,60)', 'quality(1,61)', 'quality(1,62)', 'quality(1,63)', 'quality(1,64)', 'quality(1,65)', 'quality(1,66)', 'quality(1,67)', 'quality(1,68)', 'quality(1,69)', 'quality(1,70)', 'quality(1,71)', 'quality(1,72)', 'quality(1,73)', 'quality(1,74)', 'quality(1,75)', 'quality(1,76)', 'quality(1,77)', 'quality(1,78)', 'quality(1,79)', 'quality(1,80)', 'quality(1,81)', 'quality(1,82)', 'quality(1,83)', 'quality(1,84)', 'quality(1,85)', 'quality(1,86)', 'quality(1,87)', 'quality(1,88)', 'quality(1,89)', 'quality(1,90)', 'quality(1,91)', 'quality(1,92)', 'quality(1,93)', 'quality(1,94)', 'quality(1,95)', 'quality(1,96)', 'quality(1,97)', 'quality(1,98)', 'quality(1,99)', 'quality(1,100)', 'quality(2,1)', 'quality(2,2)', 'quality(2,3)', 'quality(2,4)', 'quality(2,5)', 'quality(2,6)', 'quality(2,7)', 'quality(2,8)', 'quality(2,9)', 'quality(2,10)', 'quality(2,11)', 'quality(2,12)', 'quality(2,13)', 'quality(2,14)', 'quality(2,15)', 'quality(2,16)', 'quality(2,17)', 'quality(2,18)', 'quality(2,19)', 'quality(2,20)', 'quality(2,21)', 'quality(2,22)', 'quality(2,23)', 'quality(2,24)', 'quality(2,25)', 'quality(2,26)', 'quality(2,27)', 'quality(2,28)', 'quality(2,29)', 'quality(2,30)', 'quality(2,31)', 'quality(2,32)', 'quality(2,33)', 'quality(2,34)', 'quality(2,35)', 'quality(2,36)', 'quality(2,37)', 'quality(2,38)', 'quality(2,39)', 'quality(2,40)', 'quality(2,41)', 'quality(2,42)', 'quality(2,43)', 'quality(2,44)', 'quality(2,45)', 'quality(2,46)', 'quality(2,47)', 'quality(2,48)', 'quality(2,49)', 'quality(2,50)', 'quality(2,51)', 'quality(2,52)', 'quality(2,53)', 'quality(2,54)', 'quality(2,55)', 'quality(2,56)', 'quality(2,57)', 'quality(2,58)', 'quality(2,59)', 'quality(2,60)', 'quality(2,61)', 'quality(2,62)', 'quality(2,63)', 'quality(2,64)', 'quality(2,65)', 'quality(2,66)', 'quality(2,67)', 'quality(2,68)', 'quality(2,69)', 'quality(2,70)', 'quality(2,71)', 'quality(2,72)', 'quality(2,73)', 'quality(2,74)', 'quality(2,75)', 'quality(2,76)', 'quality(2,77)', 'quality(2,78)', 'quality(2,79)', 'quality(2,80)', 'quality(2,81)', 'quality(2,82)', 'quality(2,83)', 'quality(2,84)', 'quality(2,85)', 'quality(2,86)', 'quality(2,87)', 'quality(2,88)', 'quality(2,89)', 'quality(2,90)', 'quality(2,91)', 'quality(2,92)', 'quality(2,93)', 'quality(2,94)', 'quality(2,95)', 'quality(2,96)', 'quality(2,97)', 'quality(2,98)', 'quality(2,99)', 'quality(2,100)', 'quality(3,1)', 'quality(3,2)', 'quality(3,3)', 'quality(3,4)', 'quality(3,5)', 'quality(3,6)', 'quality(3,7)', 'quality(3,8)', 'quality(3,9)', 'quality(3,10)', 'quality(3,11)', 'quality(3,12)', 'quality(3,13)', 'quality(3,14)', 'quality(3,15)', 'quality(3,16)', 'quality(3,17)', 'quality(3,18)', 'quality(3,19)', 'quality(3,20)', 'quality(3,21)', 'quality(3,22)', 'quality(3,23)', 'quality(3,24)', 'quality(3,25)', 'quality(3,26)', 'quality(3,27)', 'quality(3,28)', 'quality(3,29)', 'quality(3,30)', 'quality(3,31)', 'quality(3,32)', 'quality(3,33)', 'quality(3,34)', 'quality(3,35)', 'quality(3,36)', 'quality(3,37)', 'quality(3,38)', 'quality(3,39)', 'quality(3,40)', 'quality(3,41)', 'quality(3,42)', 'quality(3,43)', 'quality(3,44)', 'quality(3,45)', 'quality(3,46)', 'quality(3,47)', 'quality(3,48)', 'quality(3,49)', 'quality(3,50)', 'quality(3,51)', 'quality(3,52)', 'quality(3,53)', 'quality(3,54)', 'quality(3,55)', 'quality(3,56)', 'quality(3,57)', 'quality(3,58)', 'quality(3,59)', 'quality(3,60)', 'quality(3,61)', 'quality(3,62)', 'quality(3,63)', 'quality(3,64)', 'quality(3,65)', 'quality(3,66)', 'quality(3,67)', 'quality(3,68)', 'quality(3,69)', 'quality(3,70)', 'quality(3,71)', 'quality(3,72)', 'quality(3,73)', 'quality(3,74)', 'quality(3,75)', 'quality(3,76)', 'quality(3,77)', 'quality(3,78)', 'quality(3,79)', 'quality(3,80)', 'quality(3,81)', 'quality(3,82)', 'quality(3,83)', 'quality(3,84)', 'quality(3,85)', 'quality(3,86)', 'quality(3,87)', 'quality(3,88)', 'quality(3,89)', 'quality(3,90)', 'quality(3,91)', 'quality(3,92)', 'quality(3,93)', 'quality(3,94)', 'quality(3,95)', 'quality(3,96)', 'quality(3,97)', 'quality(3,98)', 'quality(3,99)', 'quality(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['quality(1,1)', 'quality(1,2)', 'quality(1,3)', 'quality(1,4)', 'quality(1,5)', 'quality(1,6)', 'quality(1,7)', 'quality(1,8)', 'quality(1,9)', 'quality(1,10)', 'quality(1,11)', 'quality(1,12)', 'quality(1,13)', 'quality(1,14)', 'quality(1,15)', 'quality(1,16)', 'quality(1,17)', 'quality(1,18)', 'quality(1,19)', 'quality(1,20)', 'quality(1,21)', 'quality(1,22)', 'quality(1,23)', 'quality(1,24)', 'quality(1,25)', 'quality(1,26)', 'quality(1,27)', 'quality(1,28)', 'quality(1,29)', 'quality(1,30)', 'quality(1,31)', 'quality(1,32)', 'quality(1,33)', 'quality(1,34)', 'quality(1,35)', 'quality(1,36)', 'quality(1,37)', 'quality(1,38)', 'quality(1,39)', 'quality(1,40)', 'quality(1,41)', 'quality(1,42)', 'quality(1,43)', 'quality(1,44)', 'quality(1,45)', 'quality(1,46)', 'quality(1,47)', 'quality(1,48)', 'quality(1,49)', 'quality(1,50)', 'quality(1,51)', 'quality(1,52)', 'quality(1,53)', 'quality(1,54)', 'quality(1,55)', 'quality(1,56)', 'quality(1,57)', 'quality(1,58)', 'quality(1,59)', 'quality(1,60)', 'quality(1,61)', 'quality(1,62)', 'quality(1,63)', 'quality(1,64)', 'quality(1,65)', 'quality(1,66)', 'quality(1,67)', 'quality(1,68)', 'quality(1,69)', 'quality(1,70)', 'quality(1,71)', 'quality(1,72)', 'quality(1,73)', 'quality(1,74)', 'quality(1,75)', 'quality(1,76)', 'quality(1,77)', 'quality(1,78)', 'quality(1,79)', 'quality(1,80)', 'quality(1,81)', 'quality(1,82)', 'quality(1,83)', 'quality(1,84)', 'quality(1,85)', 'quality(1,86)', 'quality(1,87)', 'quality(1,88)', 'quality(1,89)', 'quality(1,90)', 'quality(1,91)', 'quality(1,92)', 'quality(1,93)', 'quality(1,94)', 'quality(1,95)', 'quality(1,96)', 'quality(1,97)', 'quality(1,98)', 'quality(1,99)', 'quality(1,100)', 'quality(2,1)', 'quality(2,2)', 'quality(2,3)', 'quality(2,4)', 'quality(2,5)', 'quality(2,6)', 'quality(2,7)', 'quality(2,8)', 'quality(2,9)', 'quality(2,10)', 'quality(2,11)', 'quality(2,12)', 'quality(2,13)', 'quality(2,14)', 'quality(2,15)', 'quality(2,16)', 'quality(2,17)', 'quality(2,18)', 'quality(2,19)', 'quality(2,20)', 'quality(2,21)', 'quality(2,22)', 'quality(2,23)', 'quality(2,24)', 'quality(2,25)', 'quality(2,26)', 'quality(2,27)', 'quality(2,28)', 'quality(2,29)', 'quality(2,30)', 'quality(2,31)', 'quality(2,32)', 'quality(2,33)', 'quality(2,34)', 'quality(2,35)', 'quality(2,36)', 'quality(2,37)', 'quality(2,38)', 'quality(2,39)', 'quality(2,40)', 'quality(2,41)', 'quality(2,42)', 'quality(2,43)', 'quality(2,44)', 'quality(2,45)', 'quality(2,46)', 'quality(2,47)', 'quality(2,48)', 'quality(2,49)', 'quality(2,50)', 'quality(2,51)', 'quality(2,52)', 'quality(2,53)', 'quality(2,54)', 'quality(2,55)', 'quality(2,56)', 'quality(2,57)', 'quality(2,58)', 'quality(2,59)', 'quality(2,60)', 'quality(2,61)', 'quality(2,62)', 'quality(2,63)', 'quality(2,64)', 'quality(2,65)', 'quality(2,66)', 'quality(2,67)', 'quality(2,68)', 'quality(2,69)', 'quality(2,70)', 'quality(2,71)', 'quality(2,72)', 'quality(2,73)', 'quality(2,74)', 'quality(2,75)', 'quality(2,76)', 'quality(2,77)', 'quality(2,78)', 'quality(2,79)', 'quality(2,80)', 'quality(2,81)', 'quality(2,82)', 'quality(2,83)', 'quality(2,84)', 'quality(2,85)', 'quality(2,86)', 'quality(2,87)', 'quality(2,88)', 'quality(2,89)', 'quality(2,90)', 'quality(2,91)', 'quality(2,92)', 'quality(2,93)', 'quality(2,94)', 'quality(2,95)', 'quality(2,96)', 'quality(2,97)', 'quality(2,98)', 'quality(2,99)', 'quality(2,100)', 'quality(3,1)', 'quality(3,2)', 'quality(3,3)', 'quality(3,4)', 'quality(3,5)', 'quality(3,6)', 'quality(3,7)', 'quality(3,8)', 'quality(3,9)', 'quality(3,10)', 'quality(3,11)', 'quality(3,12)', 'quality(3,13)', 'quality(3,14)', 'quality(3,15)', 'quality(3,16)', 'quality(3,17)', 'quality(3,18)', 'quality(3,19)', 'quality(3,20)', 'quality(3,21)', 'quality(3,22)', 'quality(3,23)', 'quality(3,24)', 'quality(3,25)', 'quality(3,26)', 'quality(3,27)', 'quality(3,28)', 'quality(3,29)', 'quality(3,30)', 'quality(3,31)', 'quality(3,32)', 'quality(3,33)', 'quality(3,34)', 'quality(3,35)', 'quality(3,36)', 'quality(3,37)', 'quality(3,38)', 'quality(3,39)', 'quality(3,40)', 'quality(3,41)', 'quality(3,42)', 'quality(3,43)', 'quality(3,44)', 'quality(3,45)', 'quality(3,46)', 'quality(3,47)', 'quality(3,48)', 'quality(3,49)', 'quality(3,50)', 'quality(3,51)', 'quality(3,52)', 'quality(3,53)', 'quality(3,54)', 'quality(3,55)', 'quality(3,56)', 'quality(3,57)', 'quality(3,58)', 'quality(3,59)', 'quality(3,60)', 'quality(3,61)', 'quality(3,62)', 'quality(3,63)', 'quality(3,64)', 'quality(3,65)', 'quality(3,66)', 'quality(3,67)', 'quality(3,68)', 'quality(3,69)', 'quality(3,70)', 'quality(3,71)', 'quality(3,72)', 'quality(3,73)', 'quality(3,74)', 'quality(3,75)', 'quality(3,76)', 'quality(3,77)', 'quality(3,78)', 'quality(3,79)', 'quality(3,80)', 'quality(3,81)', 'quality(3,82)', 'quality(3,83)', 'quality(3,84)', 'quality(3,85)', 'quality(3,86)', 'quality(3,87)', 'quality(3,88)', 'quality(3,89)', 'quality(3,90)', 'quality(3,91)', 'quality(3,92)', 'quality(3,93)', 'quality(3,94)', 'quality(3,95)', 'quality(3,96)', 'quality(3,97)', 'quality(3,98)', 'quality(3,99)', 'quality(3,100)', 'select(1)', 'select(2)', 'select(3)']]


180
assignment

question: 
Write an ASP code snippet to connect a single label from "roof","chair","cloud","cosenza" to elements specified by the predicate "singapore".

answer from file: 
assign(X,"roof")|assign(X,"chair")|assign(X,"cloud")|assign(X,"cosenza"):-singapore(X).

parsed from model: 
assign(X,"roof")|assign(X,"chair")|assign(X,"cloud")|assign(X,"cosenza"):-singapore(X).

facts: 
singapore(1..5).

generated: 
Write an ASP code snippet to connect a single label from "roof","chair","cloud","cosenza" to elements specified by the predicate "singapore".
Answer: assign(X,"roof")|assign(X,"chair")|assign(X,"cloud")|assign(X,"cosenza"):-singapore(X).
assign(X,"city"):-singapore(X).
singapore(X,"city"):-city(X).
```

unique_rules: 
['assign(X,"roof")|assign(X,"chair")|assign(X,"cloud")|assign(X,"cosenza"):-singapore(X).', 'assign(X,"city"):-singapore(X).', 'singapore(X,"city"):-city(X).']

jaccard: 1.0

AS desired: [['singapore(1)', 'singapore(2)', 'singapore(3)', 'singapore(4)', 'singapore(5)', 'assign(1,"cloud")', 'assign(2,"cosenza")', 'assign(3,"cloud")', 'assign(4,"cosenza")', 'assign(5,"cosenza")']]
\AS obtained: [['singapore(1)', 'singapore(2)', 'singapore(3)', 'singapore(4)', 'singapore(5)', 'assign(1,"cloud")', 'assign(2,"cosenza")', 'assign(3,"cloud")', 'assign(4,"cosenza")', 'assign(5,"cosenza")']]


181
constraint

question: 
Compose an ASP solution to ensure the "singapore" predicate with value 12 is not associated with the label "wall".

answer from file: 
:-assign(12,wall).

parsed from model: 
:-assign(12,wall).

facts: 
singapore(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-singapore(X).

generated: 
Compose an ASP solution to ensure the "singapore" predicate with value 12 is not associated with the label "wall".
Answer: :-assign(12,wall).
Explanation: The predicate "shangai" includes values associated with the label "wall". The predicate "city" includes values associated with the label "shangai". The predicate "new york" includes values associated with the label "shangai". If the "new york" predicate is used to fetch values associated with the label "shangai", the result will be the negation of the "shangai" label, which is "city". Therefore, the predicate "assign" is used to ensure that the "shangai" label is not associated with the value 12.

unique_rules: 
[':-assign(12,wall).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'singapore(1)', 'singapore(2)', 'singapore(3)', 'singapore(4)', 'singapore(5)', 'singapore(6)', 'singapore(7)', 'singapore(8)', 'singapore(9)', 'singapore(10)', 'singapore(11)', 'singapore(12)', 'singapore(13)', 'singapore(14)', 'singapore(15)', 'singapore(16)', 'singapore(17)', 'singapore(18)', 'singapore(19)', 'singapore(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'singapore(1)', 'singapore(2)', 'singapore(3)', 'singapore(4)', 'singapore(5)', 'singapore(6)', 'singapore(7)', 'singapore(8)', 'singapore(9)', 'singapore(10)', 'singapore(11)', 'singapore(12)', 'singapore(13)', 'singapore(14)', 'singapore(15)', 'singapore(16)', 'singapore(17)', 'singapore(18)', 'singapore(19)', 'singapore(20)']]


182
combination

question: 
Develop an ASP code snippet to produce all valid combinations of elements from the "roof" and "butterfly" sets.

answer from file: 
combination(X,Y):-roof(X),butterfly(Y).

parsed from model: 
combination(X,Y):-roof(X),butterfly(Y).

facts: 
roof(1..4).butterfly(1..5).

generated: 
Develop an ASP code snippet to produce all valid combinations of elements from the "roof" and "butterfly" sets.
Answer: combination(X,Y):-roof(X),butterfly(Y).
combination(X,Y):-roof(X),Y.
combination(X,Y):-Y,roof(X).
combination(X,Y):-Y,Y.

unique_rules: 
['combination(X,Y):-roof(X),butterfly(Y).', 'combination(X,Y):-roof(X),Y.', 'combination(X,Y):-Y,roof(X).', 'combination(X,Y):-Y,Y.']

jaccard: 1.0

AS desired: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)', 'roof(1)', 'roof(2)', 'roof(3)', 'roof(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)', 'roof(1)', 'roof(2)', 'roof(3)', 'roof(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


183
join

question: 
Formulate an ASP program that defines the predicate "chair_black" to associate each chair with the weight of black, using the fields "ID","surname","hair","quality","blackID" of "chair" and "ID","weight" of "black".

answer from file: 
chair_black(X,Z):-chair(X,_,_,_,Y),black(Y,Z).

parsed from model: 
chair_black(X,Z):-chair(X,_,_,_,Y),black(Y,Z).

facts: 
chair("ID","surname","hair","quality","blackID").black("ID","weight").

generated: 
Formulate an ASP program that defines the predicate "chair_black" to associate each chair with the weight of black, using the fields "ID","surname","hair","quality","blackID" of "chair" and "ID","weight" of "black".
Answer: chair_black(X,Z):-chair(X,_,_,_,Y),black(Y,Z).
chair_black(X,Z):-chair(X,_,_,_,Y),not black(Y,Z).

unique_rules: 
['chair_black(X,Z):-chair(X,_,_,_,Y),black(Y,Z).', 'chair_black(X,Z):-chair(X,_,_,_,Y),not black(Y,Z).']

jaccard: 1.0

AS desired: [['black("ID","weight")', 'chair("ID","surname","hair","quality","blackID")']]
\AS obtained: [['black("ID","weight")', 'chair("ID","surname","hair","quality","blackID")']]


184
closure

question: 
Develop an ASP script to link the predicate "butterfly" to its transitive closure, resulting in the predicate "family".

answer from file: 
family(X,Y):-butterfly(X,Y).
family(X,Y):-butterfly(X,Z),family(Z,Y).

parsed from model: 
family(X,Y):-butterfly(X,Y).
family(X,Y):- arrivant(X,Y).

facts: 
butterfly(1..3, 1..4).

generated: 
Develop an ASP script to link the predicate "butterfly" to its transitive closure, resulting in the predicate "family".
Answer: family(X,Y):-butterfly(X,Y).
family(X,Y):- arrivant(X,Y).
family(X,Y):-bike(X,Y).
family(X,Y):-moto(X,Y).
family(X,Y):-city(X,Y).
family(X,Y):-author(X,Y).
family(X,Y):-moto(X,Y).
family(X,Y):-city(X,Y).
family(X,Y):-author(X,Y).
family(X,Y):-moto(X,Y).
family(X,Y):-city(X,Y).
family(X,

unique_rules: 
['family(X,Y):-butterfly(X,Y).', 'family(X,Y):- arrivant(X,Y).', 'family(X,Y):-bike(X,Y).', 'family(X,Y):-moto(X,Y).', 'family(X,Y):-city(X,Y).', 'family(X,Y):-author(X,Y).']

jaccard: 1.0

AS desired: [['butterfly(1,1)', 'butterfly(1,2)', 'butterfly(1,3)', 'butterfly(1,4)', 'butterfly(2,1)', 'butterfly(2,2)', 'butterfly(2,3)', 'butterfly(2,4)', 'butterfly(3,1)', 'butterfly(3,2)', 'butterfly(3,3)', 'butterfly(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]
\AS obtained: [['butterfly(1,1)', 'butterfly(1,2)', 'butterfly(1,3)', 'butterfly(1,4)', 'butterfly(2,1)', 'butterfly(2,2)', 'butterfly(2,3)', 'butterfly(2,4)', 'butterfly(3,1)', 'butterfly(3,2)', 'butterfly(3,3)', 'butterfly(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]


185
preference

question: 
Generate an ASP program to disallow the association of the predicate "chicago" with value "13" with "pink". If associated, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(13,"pink").[1@1]

parsed from model: 
:~assign(13,"pink").[1@1]

facts: 
chicago(1..20).

generated: 
Generate an ASP program to disallow the association of the predicate "chicago" with value "13" with "pink". If associated, it incurs a cost of "1" at level "1".
Answer: :~assign(13,"pink").[1@1]
This program uses the predicate "city" with fields "ID","height","author","name","price","city","description","author","name","price","city","description","height","author","name","price","city","description","author","name","price","city","description","height","author","name","price","city","description","author","name","price","city","description","height","author","name","price","city","description","author","name","price","city","description","height","author","name","price","city","description","author","name","price","city","description","height","author","name","price","city

unique_rules: 
[':~assign(13,"pink").[1@1]']

jaccard: 1.0

AS desired: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'chicago(5)', 'chicago(6)', 'chicago(7)', 'chicago(8)', 'chicago(9)', 'chicago(10)', 'chicago(11)', 'chicago(12)', 'chicago(13)', 'chicago(14)', 'chicago(15)', 'chicago(16)', 'chicago(17)', 'chicago(18)', 'chicago(19)', 'chicago(20)']]
\AS obtained: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'chicago(5)', 'chicago(6)', 'chicago(7)', 'chicago(8)', 'chicago(9)', 'chicago(10)', 'chicago(11)', 'chicago(12)', 'chicago(13)', 'chicago(14)', 'chicago(15)', 'chicago(16)', 'chicago(17)', 'chicago(18)', 'chicago(19)', 'chicago(20)']]


186
filtering

question: 
Generate an ASP code snippet to capture values related to the "surname" label in the "quality" predicate.

answer from file: 
select(X):-quality(X,"surname").

parsed from model: 
select(X):-quality(X,"description").

facts: 
quality(1..5, "surname").

generated: 
Generate an ASP code snippet to capture values related to the "surname" label in the "quality" predicate.
Answer: select(X):-quality(X,"description").
select(X):-quality(X,"author").
select(X):-quality(X,"description","author").

unique_rules: 
['select(X):-quality(X,"description").', 'select(X):-quality(X,"author").', 'select(X):-quality(X,"description","author").']

jaccard: 0.0

AS desired: [['quality(1,"surname")', 'quality(2,"surname")', 'quality(3,"surname")', 'quality(4,"surname")', 'quality(5,"surname")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['quality(1,"surname")', 'quality(2,"surname")', 'quality(3,"surname")', 'quality(4,"surname")', 'quality(5,"surname")']]


187
negative_filtering

question: 
Write an ASP script to select all values tied to the predicate "chicago" but not to the predicate "toronto" and labeled as "chair".

answer from file: 
select(X):-chicago(X),not toronto(X,"chair").

parsed from model: 
select(X):-chicago(X),not toronto(X,"chair").

facts: 
chicago(1..3).toronto(1,"surname").toronto(2,"lightblue").toronto(3,"laptop").

generated: 
Write an ASP script to select all values tied to the predicate "chicago" but not to the predicate "toronto" and labeled as "chair".
Answer: select(X):-chicago(X),not toronto(X,"chair").
```
select(X):-chicago(X),not toronto(X,"chair").
```

unique_rules: 
['select(X):-chicago(X),not toronto(X,"chair").']

jaccard: 1.0

AS desired: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'toronto(1,"surname")', 'toronto(2,"lightblue")', 'toronto(3,"laptop")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'toronto(1,"surname")', 'toronto(2,"lightblue")', 'toronto(3,"laptop")', 'select(1)', 'select(2)', 'select(3)']]


188
numeric_filtering

question: 
Design an ASP solution to capture all values tied to the predicate "owner" with a value different than 85.

answer from file: 
select(X):-owner(X,C),C!=85.

parsed from model: 
select(X):-owner(X,C),C!=85.

facts: 
owner(1..3, 1..100).

generated: 
Design an ASP solution to capture all values tied to the predicate "owner" with a value different than 85.
Answer: select(X):-owner(X,C),C!=85.
Explanation: The predicate "owner" includes all values tied to the predicate "city" with a value different than 85.
The predicate "city" includes all values tied to the predicate "author" with a value different than 85.
The predicate "author" includes all values tied to the predicate "moto" with a value different than 85.
So, the predicate "owner" includes all values tied to the predicate "city" with a value different than 85, and the predicate "city" includes all values tied to the predicate "author" with a value different than 85.
The predicate

unique_rules: 
['select(X):-owner(X,C),C!=85.']

jaccard: 1.0

AS desired: [['owner(1,1)', 'owner(1,2)', 'owner(1,3)', 'owner(1,4)', 'owner(1,5)', 'owner(1,6)', 'owner(1,7)', 'owner(1,8)', 'owner(1,9)', 'owner(1,10)', 'owner(1,11)', 'owner(1,12)', 'owner(1,13)', 'owner(1,14)', 'owner(1,15)', 'owner(1,16)', 'owner(1,17)', 'owner(1,18)', 'owner(1,19)', 'owner(1,20)', 'owner(1,21)', 'owner(1,22)', 'owner(1,23)', 'owner(1,24)', 'owner(1,25)', 'owner(1,26)', 'owner(1,27)', 'owner(1,28)', 'owner(1,29)', 'owner(1,30)', 'owner(1,31)', 'owner(1,32)', 'owner(1,33)', 'owner(1,34)', 'owner(1,35)', 'owner(1,36)', 'owner(1,37)', 'owner(1,38)', 'owner(1,39)', 'owner(1,40)', 'owner(1,41)', 'owner(1,42)', 'owner(1,43)', 'owner(1,44)', 'owner(1,45)', 'owner(1,46)', 'owner(1,47)', 'owner(1,48)', 'owner(1,49)', 'owner(1,50)', 'owner(1,51)', 'owner(1,52)', 'owner(1,53)', 'owner(1,54)', 'owner(1,55)', 'owner(1,56)', 'owner(1,57)', 'owner(1,58)', 'owner(1,59)', 'owner(1,60)', 'owner(1,61)', 'owner(1,62)', 'owner(1,63)', 'owner(1,64)', 'owner(1,65)', 'owner(1,66)', 'owner(1,67)', 'owner(1,68)', 'owner(1,69)', 'owner(1,70)', 'owner(1,71)', 'owner(1,72)', 'owner(1,73)', 'owner(1,74)', 'owner(1,75)', 'owner(1,76)', 'owner(1,77)', 'owner(1,78)', 'owner(1,79)', 'owner(1,80)', 'owner(1,81)', 'owner(1,82)', 'owner(1,83)', 'owner(1,84)', 'owner(1,85)', 'owner(1,86)', 'owner(1,87)', 'owner(1,88)', 'owner(1,89)', 'owner(1,90)', 'owner(1,91)', 'owner(1,92)', 'owner(1,93)', 'owner(1,94)', 'owner(1,95)', 'owner(1,96)', 'owner(1,97)', 'owner(1,98)', 'owner(1,99)', 'owner(1,100)', 'owner(2,1)', 'owner(2,2)', 'owner(2,3)', 'owner(2,4)', 'owner(2,5)', 'owner(2,6)', 'owner(2,7)', 'owner(2,8)', 'owner(2,9)', 'owner(2,10)', 'owner(2,11)', 'owner(2,12)', 'owner(2,13)', 'owner(2,14)', 'owner(2,15)', 'owner(2,16)', 'owner(2,17)', 'owner(2,18)', 'owner(2,19)', 'owner(2,20)', 'owner(2,21)', 'owner(2,22)', 'owner(2,23)', 'owner(2,24)', 'owner(2,25)', 'owner(2,26)', 'owner(2,27)', 'owner(2,28)', 'owner(2,29)', 'owner(2,30)', 'owner(2,31)', 'owner(2,32)', 'owner(2,33)', 'owner(2,34)', 'owner(2,35)', 'owner(2,36)', 'owner(2,37)', 'owner(2,38)', 'owner(2,39)', 'owner(2,40)', 'owner(2,41)', 'owner(2,42)', 'owner(2,43)', 'owner(2,44)', 'owner(2,45)', 'owner(2,46)', 'owner(2,47)', 'owner(2,48)', 'owner(2,49)', 'owner(2,50)', 'owner(2,51)', 'owner(2,52)', 'owner(2,53)', 'owner(2,54)', 'owner(2,55)', 'owner(2,56)', 'owner(2,57)', 'owner(2,58)', 'owner(2,59)', 'owner(2,60)', 'owner(2,61)', 'owner(2,62)', 'owner(2,63)', 'owner(2,64)', 'owner(2,65)', 'owner(2,66)', 'owner(2,67)', 'owner(2,68)', 'owner(2,69)', 'owner(2,70)', 'owner(2,71)', 'owner(2,72)', 'owner(2,73)', 'owner(2,74)', 'owner(2,75)', 'owner(2,76)', 'owner(2,77)', 'owner(2,78)', 'owner(2,79)', 'owner(2,80)', 'owner(2,81)', 'owner(2,82)', 'owner(2,83)', 'owner(2,84)', 'owner(2,85)', 'owner(2,86)', 'owner(2,87)', 'owner(2,88)', 'owner(2,89)', 'owner(2,90)', 'owner(2,91)', 'owner(2,92)', 'owner(2,93)', 'owner(2,94)', 'owner(2,95)', 'owner(2,96)', 'owner(2,97)', 'owner(2,98)', 'owner(2,99)', 'owner(2,100)', 'owner(3,1)', 'owner(3,2)', 'owner(3,3)', 'owner(3,4)', 'owner(3,5)', 'owner(3,6)', 'owner(3,7)', 'owner(3,8)', 'owner(3,9)', 'owner(3,10)', 'owner(3,11)', 'owner(3,12)', 'owner(3,13)', 'owner(3,14)', 'owner(3,15)', 'owner(3,16)', 'owner(3,17)', 'owner(3,18)', 'owner(3,19)', 'owner(3,20)', 'owner(3,21)', 'owner(3,22)', 'owner(3,23)', 'owner(3,24)', 'owner(3,25)', 'owner(3,26)', 'owner(3,27)', 'owner(3,28)', 'owner(3,29)', 'owner(3,30)', 'owner(3,31)', 'owner(3,32)', 'owner(3,33)', 'owner(3,34)', 'owner(3,35)', 'owner(3,36)', 'owner(3,37)', 'owner(3,38)', 'owner(3,39)', 'owner(3,40)', 'owner(3,41)', 'owner(3,42)', 'owner(3,43)', 'owner(3,44)', 'owner(3,45)', 'owner(3,46)', 'owner(3,47)', 'owner(3,48)', 'owner(3,49)', 'owner(3,50)', 'owner(3,51)', 'owner(3,52)', 'owner(3,53)', 'owner(3,54)', 'owner(3,55)', 'owner(3,56)', 'owner(3,57)', 'owner(3,58)', 'owner(3,59)', 'owner(3,60)', 'owner(3,61)', 'owner(3,62)', 'owner(3,63)', 'owner(3,64)', 'owner(3,65)', 'owner(3,66)', 'owner(3,67)', 'owner(3,68)', 'owner(3,69)', 'owner(3,70)', 'owner(3,71)', 'owner(3,72)', 'owner(3,73)', 'owner(3,74)', 'owner(3,75)', 'owner(3,76)', 'owner(3,77)', 'owner(3,78)', 'owner(3,79)', 'owner(3,80)', 'owner(3,81)', 'owner(3,82)', 'owner(3,83)', 'owner(3,84)', 'owner(3,85)', 'owner(3,86)', 'owner(3,87)', 'owner(3,88)', 'owner(3,89)', 'owner(3,90)', 'owner(3,91)', 'owner(3,92)', 'owner(3,93)', 'owner(3,94)', 'owner(3,95)', 'owner(3,96)', 'owner(3,97)', 'owner(3,98)', 'owner(3,99)', 'owner(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['owner(1,1)', 'owner(1,2)', 'owner(1,3)', 'owner(1,4)', 'owner(1,5)', 'owner(1,6)', 'owner(1,7)', 'owner(1,8)', 'owner(1,9)', 'owner(1,10)', 'owner(1,11)', 'owner(1,12)', 'owner(1,13)', 'owner(1,14)', 'owner(1,15)', 'owner(1,16)', 'owner(1,17)', 'owner(1,18)', 'owner(1,19)', 'owner(1,20)', 'owner(1,21)', 'owner(1,22)', 'owner(1,23)', 'owner(1,24)', 'owner(1,25)', 'owner(1,26)', 'owner(1,27)', 'owner(1,28)', 'owner(1,29)', 'owner(1,30)', 'owner(1,31)', 'owner(1,32)', 'owner(1,33)', 'owner(1,34)', 'owner(1,35)', 'owner(1,36)', 'owner(1,37)', 'owner(1,38)', 'owner(1,39)', 'owner(1,40)', 'owner(1,41)', 'owner(1,42)', 'owner(1,43)', 'owner(1,44)', 'owner(1,45)', 'owner(1,46)', 'owner(1,47)', 'owner(1,48)', 'owner(1,49)', 'owner(1,50)', 'owner(1,51)', 'owner(1,52)', 'owner(1,53)', 'owner(1,54)', 'owner(1,55)', 'owner(1,56)', 'owner(1,57)', 'owner(1,58)', 'owner(1,59)', 'owner(1,60)', 'owner(1,61)', 'owner(1,62)', 'owner(1,63)', 'owner(1,64)', 'owner(1,65)', 'owner(1,66)', 'owner(1,67)', 'owner(1,68)', 'owner(1,69)', 'owner(1,70)', 'owner(1,71)', 'owner(1,72)', 'owner(1,73)', 'owner(1,74)', 'owner(1,75)', 'owner(1,76)', 'owner(1,77)', 'owner(1,78)', 'owner(1,79)', 'owner(1,80)', 'owner(1,81)', 'owner(1,82)', 'owner(1,83)', 'owner(1,84)', 'owner(1,85)', 'owner(1,86)', 'owner(1,87)', 'owner(1,88)', 'owner(1,89)', 'owner(1,90)', 'owner(1,91)', 'owner(1,92)', 'owner(1,93)', 'owner(1,94)', 'owner(1,95)', 'owner(1,96)', 'owner(1,97)', 'owner(1,98)', 'owner(1,99)', 'owner(1,100)', 'owner(2,1)', 'owner(2,2)', 'owner(2,3)', 'owner(2,4)', 'owner(2,5)', 'owner(2,6)', 'owner(2,7)', 'owner(2,8)', 'owner(2,9)', 'owner(2,10)', 'owner(2,11)', 'owner(2,12)', 'owner(2,13)', 'owner(2,14)', 'owner(2,15)', 'owner(2,16)', 'owner(2,17)', 'owner(2,18)', 'owner(2,19)', 'owner(2,20)', 'owner(2,21)', 'owner(2,22)', 'owner(2,23)', 'owner(2,24)', 'owner(2,25)', 'owner(2,26)', 'owner(2,27)', 'owner(2,28)', 'owner(2,29)', 'owner(2,30)', 'owner(2,31)', 'owner(2,32)', 'owner(2,33)', 'owner(2,34)', 'owner(2,35)', 'owner(2,36)', 'owner(2,37)', 'owner(2,38)', 'owner(2,39)', 'owner(2,40)', 'owner(2,41)', 'owner(2,42)', 'owner(2,43)', 'owner(2,44)', 'owner(2,45)', 'owner(2,46)', 'owner(2,47)', 'owner(2,48)', 'owner(2,49)', 'owner(2,50)', 'owner(2,51)', 'owner(2,52)', 'owner(2,53)', 'owner(2,54)', 'owner(2,55)', 'owner(2,56)', 'owner(2,57)', 'owner(2,58)', 'owner(2,59)', 'owner(2,60)', 'owner(2,61)', 'owner(2,62)', 'owner(2,63)', 'owner(2,64)', 'owner(2,65)', 'owner(2,66)', 'owner(2,67)', 'owner(2,68)', 'owner(2,69)', 'owner(2,70)', 'owner(2,71)', 'owner(2,72)', 'owner(2,73)', 'owner(2,74)', 'owner(2,75)', 'owner(2,76)', 'owner(2,77)', 'owner(2,78)', 'owner(2,79)', 'owner(2,80)', 'owner(2,81)', 'owner(2,82)', 'owner(2,83)', 'owner(2,84)', 'owner(2,85)', 'owner(2,86)', 'owner(2,87)', 'owner(2,88)', 'owner(2,89)', 'owner(2,90)', 'owner(2,91)', 'owner(2,92)', 'owner(2,93)', 'owner(2,94)', 'owner(2,95)', 'owner(2,96)', 'owner(2,97)', 'owner(2,98)', 'owner(2,99)', 'owner(2,100)', 'owner(3,1)', 'owner(3,2)', 'owner(3,3)', 'owner(3,4)', 'owner(3,5)', 'owner(3,6)', 'owner(3,7)', 'owner(3,8)', 'owner(3,9)', 'owner(3,10)', 'owner(3,11)', 'owner(3,12)', 'owner(3,13)', 'owner(3,14)', 'owner(3,15)', 'owner(3,16)', 'owner(3,17)', 'owner(3,18)', 'owner(3,19)', 'owner(3,20)', 'owner(3,21)', 'owner(3,22)', 'owner(3,23)', 'owner(3,24)', 'owner(3,25)', 'owner(3,26)', 'owner(3,27)', 'owner(3,28)', 'owner(3,29)', 'owner(3,30)', 'owner(3,31)', 'owner(3,32)', 'owner(3,33)', 'owner(3,34)', 'owner(3,35)', 'owner(3,36)', 'owner(3,37)', 'owner(3,38)', 'owner(3,39)', 'owner(3,40)', 'owner(3,41)', 'owner(3,42)', 'owner(3,43)', 'owner(3,44)', 'owner(3,45)', 'owner(3,46)', 'owner(3,47)', 'owner(3,48)', 'owner(3,49)', 'owner(3,50)', 'owner(3,51)', 'owner(3,52)', 'owner(3,53)', 'owner(3,54)', 'owner(3,55)', 'owner(3,56)', 'owner(3,57)', 'owner(3,58)', 'owner(3,59)', 'owner(3,60)', 'owner(3,61)', 'owner(3,62)', 'owner(3,63)', 'owner(3,64)', 'owner(3,65)', 'owner(3,66)', 'owner(3,67)', 'owner(3,68)', 'owner(3,69)', 'owner(3,70)', 'owner(3,71)', 'owner(3,72)', 'owner(3,73)', 'owner(3,74)', 'owner(3,75)', 'owner(3,76)', 'owner(3,77)', 'owner(3,78)', 'owner(3,79)', 'owner(3,80)', 'owner(3,81)', 'owner(3,82)', 'owner(3,83)', 'owner(3,84)', 'owner(3,85)', 'owner(3,86)', 'owner(3,87)', 'owner(3,88)', 'owner(3,89)', 'owner(3,90)', 'owner(3,91)', 'owner(3,92)', 'owner(3,93)', 'owner(3,94)', 'owner(3,95)', 'owner(3,96)', 'owner(3,97)', 'owner(3,98)', 'owner(3,99)', 'owner(3,100)', 'select(1)', 'select(2)', 'select(3)']]


189
assignment

question: 
Compose an ASP program that maps a single label from the set "delhi","surname","moscow","quality","butterfly","chair","desk","lake" to elements determined by the predicate "owner".

answer from file: 
assign(X,"delhi")|assign(X,"surname")|assign(X,"moscow")|assign(X,"quality")|assign(X,"butterfly")|assign(X,"chair")|assign(X,"desk")|assign(X,"lake"):-owner(X).

parsed from model: 
assign(X,"delhi")|assign(X,"surname")|assign(X,"moscow")|assign(X,"quality")|assign(X,"butterfly")|assign(X,"chair")|assign(X,"desk")|assign(X,"lake"):-owner(X).

facts: 
owner(1..5).

generated: 
Compose an ASP program that maps a single label from the set "delhi","surname","moscow","quality","butterfly","chair","desk","lake" to elements determined by the predicate "owner".
Answer: assign(X,"delhi")|assign(X,"surname")|assign(X,"moscow")|assign(X,"quality")|assign(X,"butterfly")|assign(X,"chair")|assign(X,"desk")|assign(X,"lake"):-owner(X).
assign(X,"city"):-owner(X).
```
The predicate "owner" includes elements determined by the predicate "city".
The predicate "city" includes elements determined by the predicate "description".
The predicate "description" includes elements determined by the predicate "author".
The predicate "author" includes elements determined by the predicate "rome".
The predicate "rome" includes elements determined by the

unique_rules: 
['assign(X,"delhi")|assign(X,"surname")|assign(X,"moscow")|assign(X,"quality")|assign(X,"butterfly")|assign(X,"chair")|assign(X,"desk")|assign(X,"lake"):-owner(X).', 'assign(X,"city"):-owner(X).']

jaccard: 1.0

AS desired: [['owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'owner(5)', 'assign(1,"lake")', 'assign(2,"lake")', 'assign(3,"desk")', 'assign(4,"lake")', 'assign(5,"lake")']]
\AS obtained: [['owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'owner(5)', 'assign(1,"lake")', 'assign(2,"lake")', 'assign(3,"desk")', 'assign(4,"lake")', 'assign(5,"lake")']]


190
constraint

question: 
Compose an ASP solution that avoids the predicate "weight" with value 2 being mapped to the label "lake".

answer from file: 
:-assign(2,lake).

parsed from model: 
:-assign(2,lake).

facts: 
weight(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-weight(X).

generated: 
Compose an ASP solution that avoids the predicate "weight" with value 2 being mapped to the label "lake".
Answer: :-assign(2,lake).
Explanation: The predicate "weight" includes values linked to the labels "city","height","moto","object","description","author","rome","city","description","author","moto","object","height","description","city","description","author","rome","description","author","height","description","city","description","author","rome","description","author","height","description","city","description","author","rome","description","author","height","description","city","description","author","rome","description","author","height","description","city","description","author","rome","description","author","height","description","city","description","author","rome","description","author","height","description","city

unique_rules: 
[':-assign(2,lake).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'weight(1)', 'weight(2)', 'weight(3)', 'weight(4)', 'weight(5)', 'weight(6)', 'weight(7)', 'weight(8)', 'weight(9)', 'weight(10)', 'weight(11)', 'weight(12)', 'weight(13)', 'weight(14)', 'weight(15)', 'weight(16)', 'weight(17)', 'weight(18)', 'weight(19)', 'weight(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'weight(1)', 'weight(2)', 'weight(3)', 'weight(4)', 'weight(5)', 'weight(6)', 'weight(7)', 'weight(8)', 'weight(9)', 'weight(10)', 'weight(11)', 'weight(12)', 'weight(13)', 'weight(14)', 'weight(15)', 'weight(16)', 'weight(17)', 'weight(18)', 'weight(19)', 'weight(20)']]


191
combination

question: 
Write an ASP application that finds all pairings of elements from the sets defined by the predicates "chicago" and "laptop".

answer from file: 
combination(X,Y):-chicago(X),laptop(Y).

parsed from model: 
combination(X,Y):-chicago(X),laptop(Y).

facts: 
chicago(1..4).laptop(1..5).

generated: 
Write an ASP application that finds all pairings of elements from the sets defined by the predicates "chicago" and "laptop".
Answer: combination(X,Y):-chicago(X),laptop(Y).
combination(X,Y):-chicago(X),not laptop(Y).
combination(X,Y):-not chicago(X),laptop(Y).
combination(X,Y):-chicago(X),laptop(Y).

unique_rules: 
['combination(X,Y):-chicago(X),laptop(Y).', 'combination(X,Y):-chicago(X),not laptop(Y).', 'combination(X,Y):-not chicago(X),laptop(Y).']

jaccard: 1.0

AS desired: [['laptop(1)', 'laptop(2)', 'laptop(3)', 'laptop(4)', 'laptop(5)', 'chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['laptop(1)', 'laptop(2)', 'laptop(3)', 'laptop(4)', 'laptop(5)', 'chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


192
join

question: 
Compose an ASP code snippet to define the predicate "cairo_flower" linking each cairo to the owner of flower, using the fields "ID","flowerID","lake" of "cairo" and the fields "ID","owner" of "flower".

answer from file: 
cairo_flower(X,Z):-cairo(X,Y,_),flower(Y,Z).

parsed from model: 
cairo_flower(X,Z):-cairo(X,Y,_),flower(Y,Z).

facts: 
cairo("ID","flowerID","lake").flower("ID","owner").

generated: 
Compose an ASP code snippet to define the predicate "cairo_flower" linking each cairo to the owner of flower, using the fields "ID","flowerID","lake" of "cairo" and the fields "ID","owner" of "flower".
Answer: cairo_flower(X,Z):-cairo(X,Y,_),flower(Y,Z).
cairo_flower(X,Z):-cairo(X,Y,_),not flower(Y,Z).
```

unique_rules: 
['cairo_flower(X,Z):-cairo(X,Y,_),flower(Y,Z).', 'cairo_flower(X,Z):-cairo(X,Y,_),not flower(Y,Z).']

jaccard: 1.0

AS desired: [['flower("ID","owner")', 'cairo("ID","flowerID","lake")']]
\AS obtained: [['flower("ID","owner")', 'cairo("ID","flowerID","lake")']]


193
closure

question: 
Design an ASP code to link the predicate "barcelona" to its transitive closure, defined as "journey".

answer from file: 
journey(X,Y):-barcelona(X,Y).
journey(X,Y):-barcelona(X,Z),journey(Z,Y).

parsed from model: 
journey(X,Y):-barcelona(X,Y).
journey(X,Y):-barcelona(X,Z),journey(Z,Y).

facts: 
barcelona(1..3, 1..4).

generated: 
Design an ASP code to link the predicate "barcelona" to its transitive closure, defined as "journey".
Answer: journey(X,Y):-barcelona(X,Y).
journey(X,Y):-barcelona(X,Z),journey(Z,Y).
journey(X,Y):-london(X,Y).
london(X,Y):-city(X,Y).
london(X,Y):-moto(X,Y).
moto(X,Y):-city(X,Y).
moto(X,Y):-dubai(X,Y).
dubai(X,Y):-city(X,Y).

unique_rules: 
['journey(X,Y):-barcelona(X,Y).', 'journey(X,Y):-barcelona(X,Z),journey(Z,Y).', 'journey(X,Y):-london(X,Y).', 'london(X,Y):-city(X,Y).', 'london(X,Y):-moto(X,Y).', 'moto(X,Y):-city(X,Y).', 'moto(X,Y):-dubai(X,Y).', 'dubai(X,Y):-city(X,Y).']

jaccard: 1.0

AS desired: [['barcelona(1,1)', 'barcelona(1,2)', 'barcelona(1,3)', 'barcelona(1,4)', 'barcelona(2,1)', 'barcelona(2,2)', 'barcelona(2,3)', 'barcelona(2,4)', 'barcelona(3,1)', 'barcelona(3,2)', 'barcelona(3,3)', 'barcelona(3,4)', 'journey(1,1)', 'journey(1,2)', 'journey(1,3)', 'journey(1,4)', 'journey(2,1)', 'journey(2,2)', 'journey(2,3)', 'journey(2,4)', 'journey(3,1)', 'journey(3,2)', 'journey(3,3)', 'journey(3,4)']]
\AS obtained: [['barcelona(1,1)', 'barcelona(1,2)', 'barcelona(1,3)', 'barcelona(1,4)', 'barcelona(2,1)', 'barcelona(2,2)', 'barcelona(2,3)', 'barcelona(2,4)', 'barcelona(3,1)', 'barcelona(3,2)', 'barcelona(3,3)', 'barcelona(3,4)', 'journey(1,1)', 'journey(1,2)', 'journey(1,3)', 'journey(1,4)', 'journey(2,1)', 'journey(2,2)', 'journey(2,3)', 'journey(2,4)', 'journey(3,1)', 'journey(3,2)', 'journey(3,3)', 'journey(3,4)']]


194
preference

question: 
Compose an ASP script to ensure the "toronto" predicate with value "6" does not link to "cairo". If this connection happens, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(6,"cairo").[1@1]

parsed from model: 
:~assign(6,"cairo").[1@1]

facts: 
toronto(1..20).

generated: 
Compose an ASP script to ensure the "toronto" predicate with value "6" does not link to "cairo". If this connection happens, it incurs a cost of "1" at level "1".
Answer: :~assign(6,"cairo").[1@1]
This script uses the "assign" predicate to check the connection between the "tree" and "city" labels. If such a connection is found, it incurs a cost of "1" at level "1".
The predicate "tree" includes fields "ID","city","author","height","name","price","description","author","city","name","height","description","price","author","city","name","height","description","price","author","city","name","height","description","price","author","city","name","height","description","price","author","city","name","height","description","price","author","city","name","

unique_rules: 
[':~assign(6,"cairo").[1@1]']

jaccard: 1.0

AS desired: [['toronto(1)', 'toronto(2)', 'toronto(3)', 'toronto(4)', 'toronto(5)', 'toronto(6)', 'toronto(7)', 'toronto(8)', 'toronto(9)', 'toronto(10)', 'toronto(11)', 'toronto(12)', 'toronto(13)', 'toronto(14)', 'toronto(15)', 'toronto(16)', 'toronto(17)', 'toronto(18)', 'toronto(19)', 'toronto(20)']]
\AS obtained: [['toronto(1)', 'toronto(2)', 'toronto(3)', 'toronto(4)', 'toronto(5)', 'toronto(6)', 'toronto(7)', 'toronto(8)', 'toronto(9)', 'toronto(10)', 'toronto(11)', 'toronto(12)', 'toronto(13)', 'toronto(14)', 'toronto(15)', 'toronto(16)', 'toronto(17)', 'toronto(18)', 'toronto(19)', 'toronto(20)']]


195
filtering

question: 
Formulate an ASP application to fetch all values tied to the predicate "laptop" and labeled as "black".

answer from file: 
select(X):-laptop(X,"black").

parsed from model: 
select(X):-laptop(X,"black").

facts: 
laptop(1..5, "black").

generated: 
Formulate an ASP application to fetch all values tied to the predicate "laptop" and labeled as "black".
Answer: select(X):-laptop(X,"black").
select(X):-laptop(X,"gray").
select(X):-laptop(X,"moto").
person(X,"black").
person(X,"gray").
person(X,"moto").
```

unique_rules: 
['select(X):-laptop(X,"black").', 'select(X):-laptop(X,"gray").', 'select(X):-laptop(X,"moto").']

jaccard: 1.0

AS desired: [['laptop(1,"black")', 'laptop(2,"black")', 'laptop(3,"black")', 'laptop(4,"black")', 'laptop(5,"black")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['laptop(1,"black")', 'laptop(2,"black")', 'laptop(3,"black")', 'laptop(4,"black")', 'laptop(5,"black")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


196
negative_filtering

question: 
Formulate an ASP code to select values linked to the predicate "weight" but not associated with the predicate "black" and labeled "laptop".

answer from file: 
select(X):-weight(X),not black(X,"laptop").

parsed from model: 
select(X):-weight(X),not black(X,"laptop").

facts: 
weight(1..3).black(1,"owner").black(2,"laptop").black(3,"cosenza").

generated: 
Formulate an ASP code to select values linked to the predicate "weight" but not associated with the predicate "black" and labeled "laptop".
Answer: select(X):-weight(X),not black(X,"laptop").
Explanation:
1. **select(X):-weight(X)**: This selects values linked to the predicate "weight".
2. **not black(X,"laptop")**: This selects values associated with the predicate "black" but not labeled "laptop".
3. The predicate "black" has fields "ID","height","city","description","name","price","author","city","description","name","height","price","author","city","description","name","height","price","author","city","description","name","height","price","author","city","description","name","height","price","author","city","description","name

unique_rules: 
['select(X):-weight(X),not black(X,"laptop").', '1. **select(X):-weight(X)**: This selects values linked to the predicate "weight".']

jaccard: 1.0

AS desired: [['weight(1)', 'weight(2)', 'weight(3)', 'black(1,"owner")', 'black(2,"laptop")', 'black(3,"cosenza")', 'select(1)', 'select(3)']]
\AS obtained: [['weight(1)', 'weight(2)', 'weight(3)', 'black(1,"owner")', 'black(2,"laptop")', 'black(3,"cosenza")', 'select(1)', 'select(3)']]


197
numeric_filtering

question: 
Create an ASP application to fetch all values tied to the predicate "storm" with a value different than 55.

answer from file: 
select(X):-storm(X,C),C!=55.

parsed from model: 
select(X):-storm(X,C),C!=55.

facts: 
storm(1..3, 1..100).

generated: 
Create an ASP application to fetch all values tied to the predicate "storm" with a value different than 55.
Answer: select(X):-storm(X,C),C!=55.
Explanation: The predicate "storm" includes elements tied to the predicate "city" with a value different than 55.
The predicate "city" contains elements tied to the predicate "author" with a value different than 55.
The predicate "author" contains elements tied to the predicate "moto" with a value different than 55.
So, the predicate "storm" includes elements tied to the predicate "city" with a value different than 55.

unique_rules: 
['select(X):-storm(X,C),C!=55.']

jaccard: 1.0

AS desired: [['storm(1,1)', 'storm(1,2)', 'storm(1,3)', 'storm(1,4)', 'storm(1,5)', 'storm(1,6)', 'storm(1,7)', 'storm(1,8)', 'storm(1,9)', 'storm(1,10)', 'storm(1,11)', 'storm(1,12)', 'storm(1,13)', 'storm(1,14)', 'storm(1,15)', 'storm(1,16)', 'storm(1,17)', 'storm(1,18)', 'storm(1,19)', 'storm(1,20)', 'storm(1,21)', 'storm(1,22)', 'storm(1,23)', 'storm(1,24)', 'storm(1,25)', 'storm(1,26)', 'storm(1,27)', 'storm(1,28)', 'storm(1,29)', 'storm(1,30)', 'storm(1,31)', 'storm(1,32)', 'storm(1,33)', 'storm(1,34)', 'storm(1,35)', 'storm(1,36)', 'storm(1,37)', 'storm(1,38)', 'storm(1,39)', 'storm(1,40)', 'storm(1,41)', 'storm(1,42)', 'storm(1,43)', 'storm(1,44)', 'storm(1,45)', 'storm(1,46)', 'storm(1,47)', 'storm(1,48)', 'storm(1,49)', 'storm(1,50)', 'storm(1,51)', 'storm(1,52)', 'storm(1,53)', 'storm(1,54)', 'storm(1,55)', 'storm(1,56)', 'storm(1,57)', 'storm(1,58)', 'storm(1,59)', 'storm(1,60)', 'storm(1,61)', 'storm(1,62)', 'storm(1,63)', 'storm(1,64)', 'storm(1,65)', 'storm(1,66)', 'storm(1,67)', 'storm(1,68)', 'storm(1,69)', 'storm(1,70)', 'storm(1,71)', 'storm(1,72)', 'storm(1,73)', 'storm(1,74)', 'storm(1,75)', 'storm(1,76)', 'storm(1,77)', 'storm(1,78)', 'storm(1,79)', 'storm(1,80)', 'storm(1,81)', 'storm(1,82)', 'storm(1,83)', 'storm(1,84)', 'storm(1,85)', 'storm(1,86)', 'storm(1,87)', 'storm(1,88)', 'storm(1,89)', 'storm(1,90)', 'storm(1,91)', 'storm(1,92)', 'storm(1,93)', 'storm(1,94)', 'storm(1,95)', 'storm(1,96)', 'storm(1,97)', 'storm(1,98)', 'storm(1,99)', 'storm(1,100)', 'storm(2,1)', 'storm(2,2)', 'storm(2,3)', 'storm(2,4)', 'storm(2,5)', 'storm(2,6)', 'storm(2,7)', 'storm(2,8)', 'storm(2,9)', 'storm(2,10)', 'storm(2,11)', 'storm(2,12)', 'storm(2,13)', 'storm(2,14)', 'storm(2,15)', 'storm(2,16)', 'storm(2,17)', 'storm(2,18)', 'storm(2,19)', 'storm(2,20)', 'storm(2,21)', 'storm(2,22)', 'storm(2,23)', 'storm(2,24)', 'storm(2,25)', 'storm(2,26)', 'storm(2,27)', 'storm(2,28)', 'storm(2,29)', 'storm(2,30)', 'storm(2,31)', 'storm(2,32)', 'storm(2,33)', 'storm(2,34)', 'storm(2,35)', 'storm(2,36)', 'storm(2,37)', 'storm(2,38)', 'storm(2,39)', 'storm(2,40)', 'storm(2,41)', 'storm(2,42)', 'storm(2,43)', 'storm(2,44)', 'storm(2,45)', 'storm(2,46)', 'storm(2,47)', 'storm(2,48)', 'storm(2,49)', 'storm(2,50)', 'storm(2,51)', 'storm(2,52)', 'storm(2,53)', 'storm(2,54)', 'storm(2,55)', 'storm(2,56)', 'storm(2,57)', 'storm(2,58)', 'storm(2,59)', 'storm(2,60)', 'storm(2,61)', 'storm(2,62)', 'storm(2,63)', 'storm(2,64)', 'storm(2,65)', 'storm(2,66)', 'storm(2,67)', 'storm(2,68)', 'storm(2,69)', 'storm(2,70)', 'storm(2,71)', 'storm(2,72)', 'storm(2,73)', 'storm(2,74)', 'storm(2,75)', 'storm(2,76)', 'storm(2,77)', 'storm(2,78)', 'storm(2,79)', 'storm(2,80)', 'storm(2,81)', 'storm(2,82)', 'storm(2,83)', 'storm(2,84)', 'storm(2,85)', 'storm(2,86)', 'storm(2,87)', 'storm(2,88)', 'storm(2,89)', 'storm(2,90)', 'storm(2,91)', 'storm(2,92)', 'storm(2,93)', 'storm(2,94)', 'storm(2,95)', 'storm(2,96)', 'storm(2,97)', 'storm(2,98)', 'storm(2,99)', 'storm(2,100)', 'storm(3,1)', 'storm(3,2)', 'storm(3,3)', 'storm(3,4)', 'storm(3,5)', 'storm(3,6)', 'storm(3,7)', 'storm(3,8)', 'storm(3,9)', 'storm(3,10)', 'storm(3,11)', 'storm(3,12)', 'storm(3,13)', 'storm(3,14)', 'storm(3,15)', 'storm(3,16)', 'storm(3,17)', 'storm(3,18)', 'storm(3,19)', 'storm(3,20)', 'storm(3,21)', 'storm(3,22)', 'storm(3,23)', 'storm(3,24)', 'storm(3,25)', 'storm(3,26)', 'storm(3,27)', 'storm(3,28)', 'storm(3,29)', 'storm(3,30)', 'storm(3,31)', 'storm(3,32)', 'storm(3,33)', 'storm(3,34)', 'storm(3,35)', 'storm(3,36)', 'storm(3,37)', 'storm(3,38)', 'storm(3,39)', 'storm(3,40)', 'storm(3,41)', 'storm(3,42)', 'storm(3,43)', 'storm(3,44)', 'storm(3,45)', 'storm(3,46)', 'storm(3,47)', 'storm(3,48)', 'storm(3,49)', 'storm(3,50)', 'storm(3,51)', 'storm(3,52)', 'storm(3,53)', 'storm(3,54)', 'storm(3,55)', 'storm(3,56)', 'storm(3,57)', 'storm(3,58)', 'storm(3,59)', 'storm(3,60)', 'storm(3,61)', 'storm(3,62)', 'storm(3,63)', 'storm(3,64)', 'storm(3,65)', 'storm(3,66)', 'storm(3,67)', 'storm(3,68)', 'storm(3,69)', 'storm(3,70)', 'storm(3,71)', 'storm(3,72)', 'storm(3,73)', 'storm(3,74)', 'storm(3,75)', 'storm(3,76)', 'storm(3,77)', 'storm(3,78)', 'storm(3,79)', 'storm(3,80)', 'storm(3,81)', 'storm(3,82)', 'storm(3,83)', 'storm(3,84)', 'storm(3,85)', 'storm(3,86)', 'storm(3,87)', 'storm(3,88)', 'storm(3,89)', 'storm(3,90)', 'storm(3,91)', 'storm(3,92)', 'storm(3,93)', 'storm(3,94)', 'storm(3,95)', 'storm(3,96)', 'storm(3,97)', 'storm(3,98)', 'storm(3,99)', 'storm(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['storm(1,1)', 'storm(1,2)', 'storm(1,3)', 'storm(1,4)', 'storm(1,5)', 'storm(1,6)', 'storm(1,7)', 'storm(1,8)', 'storm(1,9)', 'storm(1,10)', 'storm(1,11)', 'storm(1,12)', 'storm(1,13)', 'storm(1,14)', 'storm(1,15)', 'storm(1,16)', 'storm(1,17)', 'storm(1,18)', 'storm(1,19)', 'storm(1,20)', 'storm(1,21)', 'storm(1,22)', 'storm(1,23)', 'storm(1,24)', 'storm(1,25)', 'storm(1,26)', 'storm(1,27)', 'storm(1,28)', 'storm(1,29)', 'storm(1,30)', 'storm(1,31)', 'storm(1,32)', 'storm(1,33)', 'storm(1,34)', 'storm(1,35)', 'storm(1,36)', 'storm(1,37)', 'storm(1,38)', 'storm(1,39)', 'storm(1,40)', 'storm(1,41)', 'storm(1,42)', 'storm(1,43)', 'storm(1,44)', 'storm(1,45)', 'storm(1,46)', 'storm(1,47)', 'storm(1,48)', 'storm(1,49)', 'storm(1,50)', 'storm(1,51)', 'storm(1,52)', 'storm(1,53)', 'storm(1,54)', 'storm(1,55)', 'storm(1,56)', 'storm(1,57)', 'storm(1,58)', 'storm(1,59)', 'storm(1,60)', 'storm(1,61)', 'storm(1,62)', 'storm(1,63)', 'storm(1,64)', 'storm(1,65)', 'storm(1,66)', 'storm(1,67)', 'storm(1,68)', 'storm(1,69)', 'storm(1,70)', 'storm(1,71)', 'storm(1,72)', 'storm(1,73)', 'storm(1,74)', 'storm(1,75)', 'storm(1,76)', 'storm(1,77)', 'storm(1,78)', 'storm(1,79)', 'storm(1,80)', 'storm(1,81)', 'storm(1,82)', 'storm(1,83)', 'storm(1,84)', 'storm(1,85)', 'storm(1,86)', 'storm(1,87)', 'storm(1,88)', 'storm(1,89)', 'storm(1,90)', 'storm(1,91)', 'storm(1,92)', 'storm(1,93)', 'storm(1,94)', 'storm(1,95)', 'storm(1,96)', 'storm(1,97)', 'storm(1,98)', 'storm(1,99)', 'storm(1,100)', 'storm(2,1)', 'storm(2,2)', 'storm(2,3)', 'storm(2,4)', 'storm(2,5)', 'storm(2,6)', 'storm(2,7)', 'storm(2,8)', 'storm(2,9)', 'storm(2,10)', 'storm(2,11)', 'storm(2,12)', 'storm(2,13)', 'storm(2,14)', 'storm(2,15)', 'storm(2,16)', 'storm(2,17)', 'storm(2,18)', 'storm(2,19)', 'storm(2,20)', 'storm(2,21)', 'storm(2,22)', 'storm(2,23)', 'storm(2,24)', 'storm(2,25)', 'storm(2,26)', 'storm(2,27)', 'storm(2,28)', 'storm(2,29)', 'storm(2,30)', 'storm(2,31)', 'storm(2,32)', 'storm(2,33)', 'storm(2,34)', 'storm(2,35)', 'storm(2,36)', 'storm(2,37)', 'storm(2,38)', 'storm(2,39)', 'storm(2,40)', 'storm(2,41)', 'storm(2,42)', 'storm(2,43)', 'storm(2,44)', 'storm(2,45)', 'storm(2,46)', 'storm(2,47)', 'storm(2,48)', 'storm(2,49)', 'storm(2,50)', 'storm(2,51)', 'storm(2,52)', 'storm(2,53)', 'storm(2,54)', 'storm(2,55)', 'storm(2,56)', 'storm(2,57)', 'storm(2,58)', 'storm(2,59)', 'storm(2,60)', 'storm(2,61)', 'storm(2,62)', 'storm(2,63)', 'storm(2,64)', 'storm(2,65)', 'storm(2,66)', 'storm(2,67)', 'storm(2,68)', 'storm(2,69)', 'storm(2,70)', 'storm(2,71)', 'storm(2,72)', 'storm(2,73)', 'storm(2,74)', 'storm(2,75)', 'storm(2,76)', 'storm(2,77)', 'storm(2,78)', 'storm(2,79)', 'storm(2,80)', 'storm(2,81)', 'storm(2,82)', 'storm(2,83)', 'storm(2,84)', 'storm(2,85)', 'storm(2,86)', 'storm(2,87)', 'storm(2,88)', 'storm(2,89)', 'storm(2,90)', 'storm(2,91)', 'storm(2,92)', 'storm(2,93)', 'storm(2,94)', 'storm(2,95)', 'storm(2,96)', 'storm(2,97)', 'storm(2,98)', 'storm(2,99)', 'storm(2,100)', 'storm(3,1)', 'storm(3,2)', 'storm(3,3)', 'storm(3,4)', 'storm(3,5)', 'storm(3,6)', 'storm(3,7)', 'storm(3,8)', 'storm(3,9)', 'storm(3,10)', 'storm(3,11)', 'storm(3,12)', 'storm(3,13)', 'storm(3,14)', 'storm(3,15)', 'storm(3,16)', 'storm(3,17)', 'storm(3,18)', 'storm(3,19)', 'storm(3,20)', 'storm(3,21)', 'storm(3,22)', 'storm(3,23)', 'storm(3,24)', 'storm(3,25)', 'storm(3,26)', 'storm(3,27)', 'storm(3,28)', 'storm(3,29)', 'storm(3,30)', 'storm(3,31)', 'storm(3,32)', 'storm(3,33)', 'storm(3,34)', 'storm(3,35)', 'storm(3,36)', 'storm(3,37)', 'storm(3,38)', 'storm(3,39)', 'storm(3,40)', 'storm(3,41)', 'storm(3,42)', 'storm(3,43)', 'storm(3,44)', 'storm(3,45)', 'storm(3,46)', 'storm(3,47)', 'storm(3,48)', 'storm(3,49)', 'storm(3,50)', 'storm(3,51)', 'storm(3,52)', 'storm(3,53)', 'storm(3,54)', 'storm(3,55)', 'storm(3,56)', 'storm(3,57)', 'storm(3,58)', 'storm(3,59)', 'storm(3,60)', 'storm(3,61)', 'storm(3,62)', 'storm(3,63)', 'storm(3,64)', 'storm(3,65)', 'storm(3,66)', 'storm(3,67)', 'storm(3,68)', 'storm(3,69)', 'storm(3,70)', 'storm(3,71)', 'storm(3,72)', 'storm(3,73)', 'storm(3,74)', 'storm(3,75)', 'storm(3,76)', 'storm(3,77)', 'storm(3,78)', 'storm(3,79)', 'storm(3,80)', 'storm(3,81)', 'storm(3,82)', 'storm(3,83)', 'storm(3,84)', 'storm(3,85)', 'storm(3,86)', 'storm(3,87)', 'storm(3,88)', 'storm(3,89)', 'storm(3,90)', 'storm(3,91)', 'storm(3,92)', 'storm(3,93)', 'storm(3,94)', 'storm(3,95)', 'storm(3,96)', 'storm(3,97)', 'storm(3,98)', 'storm(3,99)', 'storm(3,100)', 'select(1)', 'select(2)', 'select(3)']]


198
assignment

question: 
Develop an ASP script that ensures each element, as specified by the predicate "cosenza", receives exactly one label from the set "lightblue","delhi".

answer from file: 
assign(X,"lightblue")|assign(X,"delhi"):-cosenza(X).

parsed from model: 
assign(X,"lightblue")|assign(X,"delhi"):-cosenza(X).

facts: 
cosenza(1..5).

generated: 
Develop an ASP script that ensures each element, as specified by the predicate "cosenza", receives exactly one label from the set "lightblue","delhi".
Answer: assign(X,"lightblue")|assign(X,"delhi"):-cosenza(X).
cosenza(X):-car(X,"height").
car(X,"height"):-cosenza(X).
```

unique_rules: 
['assign(X,"lightblue")|assign(X,"delhi"):-cosenza(X).', 'cosenza(X):-car(X,"height").', 'car(X,"height"):-cosenza(X).']

jaccard: 1.0

AS desired: [['cosenza(1)', 'cosenza(2)', 'cosenza(3)', 'cosenza(4)', 'cosenza(5)', 'assign(1,"delhi")', 'assign(2,"lightblue")', 'assign(3,"lightblue")', 'assign(4,"delhi")', 'assign(5,"lightblue")']]
\AS obtained: [['cosenza(1)', 'cosenza(2)', 'cosenza(3)', 'cosenza(4)', 'cosenza(5)', 'assign(1,"delhi")', 'assign(2,"lightblue")', 'assign(3,"lightblue")', 'assign(4,"delhi")', 'assign(5,"lightblue")']]


199
constraint

question: 
Draft an ASP program to prevent the predicate "moscow" with value 5 from being linked to the label "pink".

answer from file: 
:-assign(5,pink).

parsed from model: 
:-assign(5,pink).

facts: 
moscow(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-moscow(X).

generated: 
Draft an ASP program to prevent the predicate "moscow" with value 5 from being linked to the label "pink".
Answer: :-assign(5,pink).
Explanation: The predicate "moto" includes fields "ID","height","author","city","description","name","price","author","city","description","name","height","author","city","description","name","price","author","city","description","name","height","author","city","description","name","price","author","city","description","name","height","author","city","description","name","price","author","city","description","name","height","author","city","description","name","price","author","city","description","name","height","author","city","description","name","price","author","city","description","name","height","author","city","description

unique_rules: 
[':-assign(5,pink).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'moscow(1)', 'moscow(2)', 'moscow(3)', 'moscow(4)', 'moscow(5)', 'moscow(6)', 'moscow(7)', 'moscow(8)', 'moscow(9)', 'moscow(10)', 'moscow(11)', 'moscow(12)', 'moscow(13)', 'moscow(14)', 'moscow(15)', 'moscow(16)', 'moscow(17)', 'moscow(18)', 'moscow(19)', 'moscow(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'moscow(1)', 'moscow(2)', 'moscow(3)', 'moscow(4)', 'moscow(5)', 'moscow(6)', 'moscow(7)', 'moscow(8)', 'moscow(9)', 'moscow(10)', 'moscow(11)', 'moscow(12)', 'moscow(13)', 'moscow(14)', 'moscow(15)', 'moscow(16)', 'moscow(17)', 'moscow(18)', 'moscow(19)', 'moscow(20)']]


200
combination

question: 
Compose an ASP script to calculate the Cartesian product of elements represented by the predicates "mumbai" and "quality".

answer from file: 
combination(X,Y):-mumbai(X),quality(Y).

parsed from model: 
combination(X,Y):-mumbai(X),quality(Y).

facts: 
mumbai(1..4).quality(1..5).

generated: 
Compose an ASP script to calculate the Cartesian product of elements represented by the predicates "mumbai" and "quality".
Answer: combination(X,Y):-mumbai(X),quality(Y).
combination(X,Y):-mumbai(X),not quality(Y).
combination(X,Y):-not mumbai(X),quality(Y).
combination(X,Y):-not mumbai(X),not quality(Y).

unique_rules: 
['combination(X,Y):-mumbai(X),quality(Y).', 'combination(X,Y):-mumbai(X),not quality(Y).', 'combination(X,Y):-not mumbai(X),quality(Y).', 'combination(X,Y):-not mumbai(X),not quality(Y).']

jaccard: 1.0

AS desired: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'mumbai(1)', 'mumbai(2)', 'mumbai(3)', 'mumbai(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'mumbai(1)', 'mumbai(2)', 'mumbai(3)', 'mumbai(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


201
join

question: 
Formulate an ASP program to create the predicate "owner_pink" which links each owner with the quality of pink, using fields "ID","pinkID","surname","quality","lake" for "owner" and fields "ID","lake","owner","quality" for "pink".

answer from file: 
owner_pink(X,Z):-owner(X,Y,_,_,_),pink(Y,_,_,Z).

parsed from model: 
owner_pink(X,Z):-owner(X,Y,_,_),pink(Y,_,X,Z).

facts: 
owner("ID","pinkID","surname","quality","lake").pink("ID","lake","owner","quality").

generated: 
Formulate an ASP program to create the predicate "owner_pink" which links each owner with the quality of pink, using fields "ID","pinkID","surname","quality","lake" for "owner" and fields "ID","lake","owner","quality" for "pink". Define the predicate "owner_pink" which links each owner with the quality of pink.
Answer: owner_pink(X,Z):-owner(X,Y,_,_),pink(Y,_,X,Z).
owner_pink(X,Z):-owner(X,Y,_,_),not pink(Y,_,X,Z).

unique_rules: 
['owner_pink(X,Z):-owner(X,Y,_,_),pink(Y,_,X,Z).', 'owner_pink(X,Z):-owner(X,Y,_,_),not pink(Y,_,X,Z).']

jaccard: 1.0

AS desired: [['owner("ID","pinkID","surname","quality","lake")', 'pink("ID","lake","owner","quality")']]
\AS obtained: [['pink("ID","lake","owner","quality")', 'owner("ID","pinkID","surname","quality","lake")']]


202
closure

question: 
Create an ASP code snippet to determine the transitive closure of the "roof" predicate, resulting in the predicate "loops".

answer from file: 
loops(X,Y):-roof(X,Y).
loops(X,Y):-roof(X,Z),loops(Z,Y).

parsed from model: 
loops(X,Y):-roof(X,Y).
loops(X,Y):-roof(X,Z),loops(Z,Y).

facts: 
roof(1..3, 1..4).

generated: 
Create an ASP code snippet to determine the transitive closure of the "roof" predicate, resulting in the predicate "loops".
Answer: loops(X,Y):-roof(X,Y).
loops(X,Y):-roof(X,Z),loops(Z,Y).
loops(X,Y):-roof(X,Z),not loops(Z,Y).
loops(X,Y):-not roof(X,Y).
loops(X,Y):-roof(X,Y).
loops(X,Y):-not roof(X,Y).
loops(X,Y):-roof(X,Y).

unique_rules: 
['loops(X,Y):-roof(X,Y).', 'loops(X,Y):-roof(X,Z),loops(Z,Y).', 'loops(X,Y):-roof(X,Z),not loops(Z,Y).', 'loops(X,Y):-not roof(X,Y).']

jaccard: 1.0

AS desired: [['roof(1,1)', 'roof(1,2)', 'roof(1,3)', 'roof(1,4)', 'roof(2,1)', 'roof(2,2)', 'roof(2,3)', 'roof(2,4)', 'roof(3,1)', 'roof(3,2)', 'roof(3,3)', 'roof(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]
\AS obtained: [['roof(1,1)', 'roof(1,2)', 'roof(1,3)', 'roof(1,4)', 'roof(2,1)', 'roof(2,2)', 'roof(2,3)', 'roof(2,4)', 'roof(3,1)', 'roof(3,2)', 'roof(3,3)', 'roof(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]


203
preference

question: 
Generate an ASP program to disallow the association of the predicate "delhi" with value "2" with "white". If associated, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(2,"white").[1@1]

parsed from model: 
:~assign(2,"white").[1@1]

facts: 
delhi(1..20).

generated: 
Generate an ASP program to disallow the association of the predicate "delhi" with value "2" with "white". If associated, it incurs a cost of "1" at level "1".
Answer: :~assign(2,"white").[1@1]
This program uses the predicate "delhi" with value "2" to determine the association of the predicate "white".
The predicate "white" incurs a cost of "1" at level "1".
The predicate "delhi" incurs a cost of "1" at level "1" for each association found.

unique_rules: 
[':~assign(2,"white").[1@1]']

jaccard: 1.0

AS desired: [['delhi(1)', 'delhi(2)', 'delhi(3)', 'delhi(4)', 'delhi(5)', 'delhi(6)', 'delhi(7)', 'delhi(8)', 'delhi(9)', 'delhi(10)', 'delhi(11)', 'delhi(12)', 'delhi(13)', 'delhi(14)', 'delhi(15)', 'delhi(16)', 'delhi(17)', 'delhi(18)', 'delhi(19)', 'delhi(20)']]
\AS obtained: [['delhi(1)', 'delhi(2)', 'delhi(3)', 'delhi(4)', 'delhi(5)', 'delhi(6)', 'delhi(7)', 'delhi(8)', 'delhi(9)', 'delhi(10)', 'delhi(11)', 'delhi(12)', 'delhi(13)', 'delhi(14)', 'delhi(15)', 'delhi(16)', 'delhi(17)', 'delhi(18)', 'delhi(19)', 'delhi(20)']]


204
filtering

question: 
Craft an ASP application to fetch all values linked to the "roof" label in the context of the "weight" predicate.

answer from file: 
select(X):-weight(X,"roof").

parsed from model: 
select(X):-weight(X,"roof").

facts: 
weight(1..5, "roof").

generated: 
Craft an ASP application to fetch all values linked to the "roof" label in the context of the "weight" predicate.
Answer: select(X):-weight(X,"roof").
weight(X,"roof"):-weight(X,"city").

unique_rules: 
['select(X):-weight(X,"roof").', 'weight(X,"roof"):-weight(X,"city").']

jaccard: 1.0

AS desired: [['weight(1,"roof")', 'weight(2,"roof")', 'weight(3,"roof")', 'weight(4,"roof")', 'weight(5,"roof")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['weight(1,"roof")', 'weight(2,"roof")', 'weight(3,"roof")', 'weight(4,"roof")', 'weight(5,"roof")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


205
negative_filtering

question: 
Generate an ASP code snippet to retrieve values linked to the predicate "singapore" but not to the predicate "darkmagenta" and labeled "mumbai".

answer from file: 
select(X):-singapore(X),not darkmagenta(X,"mumbai").

parsed from model: 
select(X):-singapore(X),not darkmagenta(X,"mumbai").

facts: 
singapore(1..3).darkmagenta(1,"surname").darkmagenta(2,"mumbai").darkmagenta(3,"butterfly").

generated: 
Generate an ASP code snippet to retrieve values linked to the predicate "singapore" but not to the predicate "darkmagenta" and labeled "mumbai".
Answer: select(X):-singapore(X),not darkmagenta(X,"mumbai").
Explanation: The predicate "singapore" includes values linked to the predicate "city","height","author","moto","description","name","rome","city","author","description","name","height","city","author","description","name","rome","city","author","description","name","height","city","author","description","name","rome","city","author","description","name","height","city","author","description","name","rome","city","author","description","name","height","city","author","description","name","rome","city","author","description","name","height","city","author","description","name","rome

unique_rules: 
['select(X):-singapore(X),not darkmagenta(X,"mumbai").']

jaccard: 1.0

AS desired: [['singapore(1)', 'singapore(2)', 'singapore(3)', 'darkmagenta(1,"surname")', 'darkmagenta(2,"mumbai")', 'darkmagenta(3,"butterfly")', 'select(1)', 'select(3)']]
\AS obtained: [['singapore(1)', 'singapore(2)', 'singapore(3)', 'darkmagenta(1,"surname")', 'darkmagenta(2,"mumbai")', 'darkmagenta(3,"butterfly")', 'select(1)', 'select(3)']]


206
numeric_filtering

question: 
Compose an ASP program to fetch values associated with the predicate "desk" with a value different than 60.

answer from file: 
select(X):-desk(X,C),C!=60.

parsed from model: 
select(X):-desk(X,C),C!=60.

facts: 
desk(1..3, 1..100).

generated: 
Compose an ASP program to fetch values associated with the predicate "desk" with a value different than 60.
Answer: select(X):-desk(X,C),C!=60.
desk(X,C):-desk(X,C),C==60.
Explanation:
1. The predicate "desk" includes fields "ID","height","author","city","description","name","price","author","city","description","name","height","author","city","description","price","author","city","description","name","height","author","city","description","price","author","city","description","name","height","author","city","description","price","author","city","description","name","height","author","city","description","price","author","city","description","name","height","author","city","

unique_rules: 
['select(X):-desk(X,C),C!=60.', 'desk(X,C):-desk(X,C),C==60.']

jaccard: 1.0

AS desired: [['desk(1,1)', 'desk(1,2)', 'desk(1,3)', 'desk(1,4)', 'desk(1,5)', 'desk(1,6)', 'desk(1,7)', 'desk(1,8)', 'desk(1,9)', 'desk(1,10)', 'desk(1,11)', 'desk(1,12)', 'desk(1,13)', 'desk(1,14)', 'desk(1,15)', 'desk(1,16)', 'desk(1,17)', 'desk(1,18)', 'desk(1,19)', 'desk(1,20)', 'desk(1,21)', 'desk(1,22)', 'desk(1,23)', 'desk(1,24)', 'desk(1,25)', 'desk(1,26)', 'desk(1,27)', 'desk(1,28)', 'desk(1,29)', 'desk(1,30)', 'desk(1,31)', 'desk(1,32)', 'desk(1,33)', 'desk(1,34)', 'desk(1,35)', 'desk(1,36)', 'desk(1,37)', 'desk(1,38)', 'desk(1,39)', 'desk(1,40)', 'desk(1,41)', 'desk(1,42)', 'desk(1,43)', 'desk(1,44)', 'desk(1,45)', 'desk(1,46)', 'desk(1,47)', 'desk(1,48)', 'desk(1,49)', 'desk(1,50)', 'desk(1,51)', 'desk(1,52)', 'desk(1,53)', 'desk(1,54)', 'desk(1,55)', 'desk(1,56)', 'desk(1,57)', 'desk(1,58)', 'desk(1,59)', 'desk(1,60)', 'desk(1,61)', 'desk(1,62)', 'desk(1,63)', 'desk(1,64)', 'desk(1,65)', 'desk(1,66)', 'desk(1,67)', 'desk(1,68)', 'desk(1,69)', 'desk(1,70)', 'desk(1,71)', 'desk(1,72)', 'desk(1,73)', 'desk(1,74)', 'desk(1,75)', 'desk(1,76)', 'desk(1,77)', 'desk(1,78)', 'desk(1,79)', 'desk(1,80)', 'desk(1,81)', 'desk(1,82)', 'desk(1,83)', 'desk(1,84)', 'desk(1,85)', 'desk(1,86)', 'desk(1,87)', 'desk(1,88)', 'desk(1,89)', 'desk(1,90)', 'desk(1,91)', 'desk(1,92)', 'desk(1,93)', 'desk(1,94)', 'desk(1,95)', 'desk(1,96)', 'desk(1,97)', 'desk(1,98)', 'desk(1,99)', 'desk(1,100)', 'desk(2,1)', 'desk(2,2)', 'desk(2,3)', 'desk(2,4)', 'desk(2,5)', 'desk(2,6)', 'desk(2,7)', 'desk(2,8)', 'desk(2,9)', 'desk(2,10)', 'desk(2,11)', 'desk(2,12)', 'desk(2,13)', 'desk(2,14)', 'desk(2,15)', 'desk(2,16)', 'desk(2,17)', 'desk(2,18)', 'desk(2,19)', 'desk(2,20)', 'desk(2,21)', 'desk(2,22)', 'desk(2,23)', 'desk(2,24)', 'desk(2,25)', 'desk(2,26)', 'desk(2,27)', 'desk(2,28)', 'desk(2,29)', 'desk(2,30)', 'desk(2,31)', 'desk(2,32)', 'desk(2,33)', 'desk(2,34)', 'desk(2,35)', 'desk(2,36)', 'desk(2,37)', 'desk(2,38)', 'desk(2,39)', 'desk(2,40)', 'desk(2,41)', 'desk(2,42)', 'desk(2,43)', 'desk(2,44)', 'desk(2,45)', 'desk(2,46)', 'desk(2,47)', 'desk(2,48)', 'desk(2,49)', 'desk(2,50)', 'desk(2,51)', 'desk(2,52)', 'desk(2,53)', 'desk(2,54)', 'desk(2,55)', 'desk(2,56)', 'desk(2,57)', 'desk(2,58)', 'desk(2,59)', 'desk(2,60)', 'desk(2,61)', 'desk(2,62)', 'desk(2,63)', 'desk(2,64)', 'desk(2,65)', 'desk(2,66)', 'desk(2,67)', 'desk(2,68)', 'desk(2,69)', 'desk(2,70)', 'desk(2,71)', 'desk(2,72)', 'desk(2,73)', 'desk(2,74)', 'desk(2,75)', 'desk(2,76)', 'desk(2,77)', 'desk(2,78)', 'desk(2,79)', 'desk(2,80)', 'desk(2,81)', 'desk(2,82)', 'desk(2,83)', 'desk(2,84)', 'desk(2,85)', 'desk(2,86)', 'desk(2,87)', 'desk(2,88)', 'desk(2,89)', 'desk(2,90)', 'desk(2,91)', 'desk(2,92)', 'desk(2,93)', 'desk(2,94)', 'desk(2,95)', 'desk(2,96)', 'desk(2,97)', 'desk(2,98)', 'desk(2,99)', 'desk(2,100)', 'desk(3,1)', 'desk(3,2)', 'desk(3,3)', 'desk(3,4)', 'desk(3,5)', 'desk(3,6)', 'desk(3,7)', 'desk(3,8)', 'desk(3,9)', 'desk(3,10)', 'desk(3,11)', 'desk(3,12)', 'desk(3,13)', 'desk(3,14)', 'desk(3,15)', 'desk(3,16)', 'desk(3,17)', 'desk(3,18)', 'desk(3,19)', 'desk(3,20)', 'desk(3,21)', 'desk(3,22)', 'desk(3,23)', 'desk(3,24)', 'desk(3,25)', 'desk(3,26)', 'desk(3,27)', 'desk(3,28)', 'desk(3,29)', 'desk(3,30)', 'desk(3,31)', 'desk(3,32)', 'desk(3,33)', 'desk(3,34)', 'desk(3,35)', 'desk(3,36)', 'desk(3,37)', 'desk(3,38)', 'desk(3,39)', 'desk(3,40)', 'desk(3,41)', 'desk(3,42)', 'desk(3,43)', 'desk(3,44)', 'desk(3,45)', 'desk(3,46)', 'desk(3,47)', 'desk(3,48)', 'desk(3,49)', 'desk(3,50)', 'desk(3,51)', 'desk(3,52)', 'desk(3,53)', 'desk(3,54)', 'desk(3,55)', 'desk(3,56)', 'desk(3,57)', 'desk(3,58)', 'desk(3,59)', 'desk(3,60)', 'desk(3,61)', 'desk(3,62)', 'desk(3,63)', 'desk(3,64)', 'desk(3,65)', 'desk(3,66)', 'desk(3,67)', 'desk(3,68)', 'desk(3,69)', 'desk(3,70)', 'desk(3,71)', 'desk(3,72)', 'desk(3,73)', 'desk(3,74)', 'desk(3,75)', 'desk(3,76)', 'desk(3,77)', 'desk(3,78)', 'desk(3,79)', 'desk(3,80)', 'desk(3,81)', 'desk(3,82)', 'desk(3,83)', 'desk(3,84)', 'desk(3,85)', 'desk(3,86)', 'desk(3,87)', 'desk(3,88)', 'desk(3,89)', 'desk(3,90)', 'desk(3,91)', 'desk(3,92)', 'desk(3,93)', 'desk(3,94)', 'desk(3,95)', 'desk(3,96)', 'desk(3,97)', 'desk(3,98)', 'desk(3,99)', 'desk(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['desk(1,1)', 'desk(1,2)', 'desk(1,3)', 'desk(1,4)', 'desk(1,5)', 'desk(1,6)', 'desk(1,7)', 'desk(1,8)', 'desk(1,9)', 'desk(1,10)', 'desk(1,11)', 'desk(1,12)', 'desk(1,13)', 'desk(1,14)', 'desk(1,15)', 'desk(1,16)', 'desk(1,17)', 'desk(1,18)', 'desk(1,19)', 'desk(1,20)', 'desk(1,21)', 'desk(1,22)', 'desk(1,23)', 'desk(1,24)', 'desk(1,25)', 'desk(1,26)', 'desk(1,27)', 'desk(1,28)', 'desk(1,29)', 'desk(1,30)', 'desk(1,31)', 'desk(1,32)', 'desk(1,33)', 'desk(1,34)', 'desk(1,35)', 'desk(1,36)', 'desk(1,37)', 'desk(1,38)', 'desk(1,39)', 'desk(1,40)', 'desk(1,41)', 'desk(1,42)', 'desk(1,43)', 'desk(1,44)', 'desk(1,45)', 'desk(1,46)', 'desk(1,47)', 'desk(1,48)', 'desk(1,49)', 'desk(1,50)', 'desk(1,51)', 'desk(1,52)', 'desk(1,53)', 'desk(1,54)', 'desk(1,55)', 'desk(1,56)', 'desk(1,57)', 'desk(1,58)', 'desk(1,59)', 'desk(1,60)', 'desk(1,61)', 'desk(1,62)', 'desk(1,63)', 'desk(1,64)', 'desk(1,65)', 'desk(1,66)', 'desk(1,67)', 'desk(1,68)', 'desk(1,69)', 'desk(1,70)', 'desk(1,71)', 'desk(1,72)', 'desk(1,73)', 'desk(1,74)', 'desk(1,75)', 'desk(1,76)', 'desk(1,77)', 'desk(1,78)', 'desk(1,79)', 'desk(1,80)', 'desk(1,81)', 'desk(1,82)', 'desk(1,83)', 'desk(1,84)', 'desk(1,85)', 'desk(1,86)', 'desk(1,87)', 'desk(1,88)', 'desk(1,89)', 'desk(1,90)', 'desk(1,91)', 'desk(1,92)', 'desk(1,93)', 'desk(1,94)', 'desk(1,95)', 'desk(1,96)', 'desk(1,97)', 'desk(1,98)', 'desk(1,99)', 'desk(1,100)', 'desk(2,1)', 'desk(2,2)', 'desk(2,3)', 'desk(2,4)', 'desk(2,5)', 'desk(2,6)', 'desk(2,7)', 'desk(2,8)', 'desk(2,9)', 'desk(2,10)', 'desk(2,11)', 'desk(2,12)', 'desk(2,13)', 'desk(2,14)', 'desk(2,15)', 'desk(2,16)', 'desk(2,17)', 'desk(2,18)', 'desk(2,19)', 'desk(2,20)', 'desk(2,21)', 'desk(2,22)', 'desk(2,23)', 'desk(2,24)', 'desk(2,25)', 'desk(2,26)', 'desk(2,27)', 'desk(2,28)', 'desk(2,29)', 'desk(2,30)', 'desk(2,31)', 'desk(2,32)', 'desk(2,33)', 'desk(2,34)', 'desk(2,35)', 'desk(2,36)', 'desk(2,37)', 'desk(2,38)', 'desk(2,39)', 'desk(2,40)', 'desk(2,41)', 'desk(2,42)', 'desk(2,43)', 'desk(2,44)', 'desk(2,45)', 'desk(2,46)', 'desk(2,47)', 'desk(2,48)', 'desk(2,49)', 'desk(2,50)', 'desk(2,51)', 'desk(2,52)', 'desk(2,53)', 'desk(2,54)', 'desk(2,55)', 'desk(2,56)', 'desk(2,57)', 'desk(2,58)', 'desk(2,59)', 'desk(2,60)', 'desk(2,61)', 'desk(2,62)', 'desk(2,63)', 'desk(2,64)', 'desk(2,65)', 'desk(2,66)', 'desk(2,67)', 'desk(2,68)', 'desk(2,69)', 'desk(2,70)', 'desk(2,71)', 'desk(2,72)', 'desk(2,73)', 'desk(2,74)', 'desk(2,75)', 'desk(2,76)', 'desk(2,77)', 'desk(2,78)', 'desk(2,79)', 'desk(2,80)', 'desk(2,81)', 'desk(2,82)', 'desk(2,83)', 'desk(2,84)', 'desk(2,85)', 'desk(2,86)', 'desk(2,87)', 'desk(2,88)', 'desk(2,89)', 'desk(2,90)', 'desk(2,91)', 'desk(2,92)', 'desk(2,93)', 'desk(2,94)', 'desk(2,95)', 'desk(2,96)', 'desk(2,97)', 'desk(2,98)', 'desk(2,99)', 'desk(2,100)', 'desk(3,1)', 'desk(3,2)', 'desk(3,3)', 'desk(3,4)', 'desk(3,5)', 'desk(3,6)', 'desk(3,7)', 'desk(3,8)', 'desk(3,9)', 'desk(3,10)', 'desk(3,11)', 'desk(3,12)', 'desk(3,13)', 'desk(3,14)', 'desk(3,15)', 'desk(3,16)', 'desk(3,17)', 'desk(3,18)', 'desk(3,19)', 'desk(3,20)', 'desk(3,21)', 'desk(3,22)', 'desk(3,23)', 'desk(3,24)', 'desk(3,25)', 'desk(3,26)', 'desk(3,27)', 'desk(3,28)', 'desk(3,29)', 'desk(3,30)', 'desk(3,31)', 'desk(3,32)', 'desk(3,33)', 'desk(3,34)', 'desk(3,35)', 'desk(3,36)', 'desk(3,37)', 'desk(3,38)', 'desk(3,39)', 'desk(3,40)', 'desk(3,41)', 'desk(3,42)', 'desk(3,43)', 'desk(3,44)', 'desk(3,45)', 'desk(3,46)', 'desk(3,47)', 'desk(3,48)', 'desk(3,49)', 'desk(3,50)', 'desk(3,51)', 'desk(3,52)', 'desk(3,53)', 'desk(3,54)', 'desk(3,55)', 'desk(3,56)', 'desk(3,57)', 'desk(3,58)', 'desk(3,59)', 'desk(3,60)', 'desk(3,61)', 'desk(3,62)', 'desk(3,63)', 'desk(3,64)', 'desk(3,65)', 'desk(3,66)', 'desk(3,67)', 'desk(3,68)', 'desk(3,69)', 'desk(3,70)', 'desk(3,71)', 'desk(3,72)', 'desk(3,73)', 'desk(3,74)', 'desk(3,75)', 'desk(3,76)', 'desk(3,77)', 'desk(3,78)', 'desk(3,79)', 'desk(3,80)', 'desk(3,81)', 'desk(3,82)', 'desk(3,83)', 'desk(3,84)', 'desk(3,85)', 'desk(3,86)', 'desk(3,87)', 'desk(3,88)', 'desk(3,89)', 'desk(3,90)', 'desk(3,91)', 'desk(3,92)', 'desk(3,93)', 'desk(3,94)', 'desk(3,95)', 'desk(3,96)', 'desk(3,97)', 'desk(3,98)', 'desk(3,99)', 'desk(3,100)', 'select(1)', 'select(2)', 'select(3)']]


207
assignment

question: 
Write an ASP solution to connect each element defined by the predicate "chicago" with a single label from "lightblue","singapore","white","cloud","owner","pink","wall","quality","darkmagenta".

answer from file: 
assign(X,"lightblue")|assign(X,"singapore")|assign(X,"white")|assign(X,"cloud")|assign(X,"owner")|assign(X,"pink")|assign(X,"wall")|assign(X,"quality")|assign(X,"darkmagenta"):-chicago(X).

parsed from model: 
assign(X,"lightblue")|assign(X,"singapore")|assign(X,"white")|assign(X,"cloud")|assign(X,"owner")|assign(X,"pink")|assign(X,"wall")|assign(X,"quality")|assign(X,"darkmagenta"):-chicago(X).

facts: 
chicago(1..5).

generated: 
Write an ASP solution to connect each element defined by the predicate "chicago" with a single label from "lightblue","singapore","white","cloud","owner","pink","wall","quality","darkmagenta".
Answer: assign(X,"lightblue")|assign(X,"singapore")|assign(X,"white")|assign(X,"cloud")|assign(X,"owner")|assign(X,"pink")|assign(X,"wall")|assign(X,"quality")|assign(X,"darkmagenta"):-chicago(X).
Explanation:
- chicago(X) checks if the element X is connected with the label "lightblue","singapore","white","cloud","owner","pink","wall","quality","darkmagenta".
- If so, it assigns the label to X.
- Otherwise, it leaves the element without any label.

unique_rules: 
['assign(X,"lightblue")|assign(X,"singapore")|assign(X,"white")|assign(X,"cloud")|assign(X,"owner")|assign(X,"pink")|assign(X,"wall")|assign(X,"quality")|assign(X,"darkmagenta"):-chicago(X).']

jaccard: 1.0

AS desired: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'chicago(5)', 'assign(1,"darkmagenta")', 'assign(2,"darkmagenta")', 'assign(3,"darkmagenta")', 'assign(4,"darkmagenta")', 'assign(5,"darkmagenta")']]
\AS obtained: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'chicago(5)', 'assign(1,"darkmagenta")', 'assign(2,"darkmagenta")', 'assign(3,"darkmagenta")', 'assign(4,"darkmagenta")', 'assign(5,"darkmagenta")']]


208
constraint

question: 
Develop an ASP application that avoids the predicate "lake" with a value of 13 being linked to the label "hair".

answer from file: 
:-assign(13,hair).

parsed from model: 
:-assign(13,hair).

facts: 
lake(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-lake(X).

generated: 
Develop an ASP application that avoids the predicate "lake" with a value of 13 being linked to the label "hair".
Answer: :-assign(13,hair).
Explanation: The predicate "bike" includes a field "author" that is linked to the label "height".
The predicate "height" includes a field "name" that is linked to the label "description".
The predicate "description" includes a field "author" that is linked to the label "height".
The predicate "bike" includes a field "author" that is linked to the label "height".
The predicate "height" includes a field "name" that is linked to the label "description".
The predicate "description" includes a field "author" that is linked to the label "height".
The predicate "bike" includes a field "author

unique_rules: 
[':-assign(13,hair).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lake(6)', 'lake(7)', 'lake(8)', 'lake(9)', 'lake(10)', 'lake(11)', 'lake(12)', 'lake(13)', 'lake(14)', 'lake(15)', 'lake(16)', 'lake(17)', 'lake(18)', 'lake(19)', 'lake(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lake(6)', 'lake(7)', 'lake(8)', 'lake(9)', 'lake(10)', 'lake(11)', 'lake(12)', 'lake(13)', 'lake(14)', 'lake(15)', 'lake(16)', 'lake(17)', 'lake(18)', 'lake(19)', 'lake(20)']]


209
combination

question: 
Produce an ASP script to generate all valid pairings of elements as represented by the predicates "flower" and "lake".

answer from file: 
combination(X,Y):-flower(X),lake(Y).

parsed from model: 
combination(X,Y):-flower(X),lake(Y).

facts: 
flower(1..4).lake(1..5).

generated: 
Produce an ASP script to generate all valid pairings of elements as represented by the predicates "flower" and "lake".
Answer: combination(X,Y):-flower(X),lake(Y).
combination(X,Y):-flower(X),not lake(Y).
combination(X,Y):-not flower(X),lake(Y).
combination(X,Y):-not flower(X),not lake(Y).

unique_rules: 
['combination(X,Y):-flower(X),lake(Y).', 'combination(X,Y):-flower(X),not lake(Y).', 'combination(X,Y):-not flower(X),lake(Y).', 'combination(X,Y):-not flower(X),not lake(Y).']

jaccard: 1.0

AS desired: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'flower(1)', 'flower(2)', 'flower(3)', 'flower(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'flower(1)', 'flower(2)', 'flower(3)', 'flower(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


210
join

question: 
Create an ASP script to define the predicate "white_singapore" that links each white to the surname of singapore, given that "white" has fields "ID","weight","strength","singaporeID" and "singapore" has fields "ID","surname".

answer from file: 
white_singapore(X,Z):-white(X,_,_,Y),singapore(Y,Z).

parsed from model: 
white_singapore(X,Z):-white(X,_,_,Y),singapore(Y,Z).

facts: 
white("ID","weight","strength","singaporeID").singapore("ID","surname").

generated: 
Create an ASP script to define the predicate "white_singapore" that links each white to the surname of singapore, given that "white" has fields "ID","weight","strength","singaporeID" and "singapore" has fields "ID","surname". Define the predicate "white_singapore" that links each white to the surname of singapore.
Answer: white_singapore(X,Z):-white(X,_,_,Y),singapore(Y,Z).
white_singapore(X,Z):-white(X,_,_,Y),singapore(X,Z).

unique_rules: 
['white_singapore(X,Z):-white(X,_,_,Y),singapore(Y,Z).', 'white_singapore(X,Z):-white(X,_,_,Y),singapore(X,Z).']

jaccard: 1.0

AS desired: [['singapore("ID","surname")', 'white("ID","weight","strength","singaporeID")']]
\AS obtained: [['singapore("ID","surname")', 'white("ID","weight","strength","singaporeID")']]


211
closure

question: 
Develop an ASP script that derives the "family" predicate through the transitive closure of the "delhi" predicate.

answer from file: 
family(X,Y):-delhi(X,Y).
family(X,Y):-delhi(X,Z),family(Z,Y).

parsed from model: 
family(X,Y):-delhi(X,Y).
family(X,Y):-delhi(X,Z),family(Z,Y).

facts: 
delhi(1..3, 1..4).

generated: 
Develop an ASP script that derives the "family" predicate through the transitive closure of the "delhi" predicate.
Answer: family(X,Y):-delhi(X,Y).
family(X,Y):-delhi(X,Z),family(Z,Y).
family(X,Y):-delhi(X,Z),Z!=Y.
family(X,Y):-delhi(X,Z),Z==Y.
family(X,Y):-delhi(X,Z),Z!=Y,age(Z,Y).
age(X,Y):-family(X,Y).
age(X,Y):-delhi(X,Z),Z!=Y,age(Z,Y).
age(X,Y):-delhi(X,Z),Z==Y

unique_rules: 
['family(X,Y):-delhi(X,Y).', 'family(X,Y):-delhi(X,Z),family(Z,Y).', 'family(X,Y):-delhi(X,Z),Z!=Y.', 'family(X,Y):-delhi(X,Z),Z==Y.', 'family(X,Y):-delhi(X,Z),Z!=Y,age(Z,Y).', 'age(X,Y):-family(X,Y).', 'age(X,Y):-delhi(X,Z),Z!=Y,age(Z,Y).', 'age(X,Y):-delhi(X,Z),Z==Y']

jaccard: 1.0

AS desired: [['delhi(1,1)', 'delhi(1,2)', 'delhi(1,3)', 'delhi(1,4)', 'delhi(2,1)', 'delhi(2,2)', 'delhi(2,3)', 'delhi(2,4)', 'delhi(3,1)', 'delhi(3,2)', 'delhi(3,3)', 'delhi(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]
\AS obtained: [['delhi(1,1)', 'delhi(1,2)', 'delhi(1,3)', 'delhi(1,4)', 'delhi(2,1)', 'delhi(2,2)', 'delhi(2,3)', 'delhi(2,4)', 'delhi(3,1)', 'delhi(3,2)', 'delhi(3,3)', 'delhi(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]


212
preference

question: 
Develop an ASP code snippet to avoid linking the "quality" predicate with value "7" to "delhi". If such a link is found, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(7,"delhi").[1@1]

parsed from model: 
:~assign(7,"delhi").[1@1]

facts: 
quality(1..20).

generated: 
Develop an ASP code snippet to avoid linking the "quality" predicate with value "7" to "delhi". If such a link is found, it incurs a cost of "1" at level "1".
Answer: :~assign(7,"delhi").[1@1]
The predicate "height" includes fields "ID","city","author","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","

unique_rules: 
[':~assign(7,"delhi").[1@1]']

jaccard: 1.0

AS desired: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'quality(6)', 'quality(7)', 'quality(8)', 'quality(9)', 'quality(10)', 'quality(11)', 'quality(12)', 'quality(13)', 'quality(14)', 'quality(15)', 'quality(16)', 'quality(17)', 'quality(18)', 'quality(19)', 'quality(20)']]
\AS obtained: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'quality(6)', 'quality(7)', 'quality(8)', 'quality(9)', 'quality(10)', 'quality(11)', 'quality(12)', 'quality(13)', 'quality(14)', 'quality(15)', 'quality(16)', 'quality(17)', 'quality(18)', 'quality(19)', 'quality(20)']]


213
filtering

question: 
Formulate an ASP application to fetch all values tied to the predicate "barcelona" and labeled as "storm".

answer from file: 
select(X):-barcelona(X,"storm").

parsed from model: 
select(X):-barcelona(X,"storm").

facts: 
barcelona(1..5, "storm").

generated: 
Formulate an ASP application to fetch all values tied to the predicate "barcelona" and labeled as "storm".
Answer: select(X):-barcelona(X,"storm").
select(X):-barcelona(X,"author").
select(X):-barcelona(X,"moto").
select(X):-barcelona(X,"dubai").
select(X):-barcelona(X,"author","city").
select(X):-barcelona(X,"author","description").
select(X):-barcelona(X,"author","height").
select(X):-barcelona(X,"author","name").
select(X):-barcelona(X,"author","description","height").
select(X):-barcelona(X,"author","description","height").
select(X):-barcelona(X,"author","description","height").
```

unique_rules: 
['select(X):-barcelona(X,"storm").', 'select(X):-barcelona(X,"author").', 'select(X):-barcelona(X,"moto").', 'select(X):-barcelona(X,"dubai").', 'select(X):-barcelona(X,"author","city").', 'select(X):-barcelona(X,"author","description").', 'select(X):-barcelona(X,"author","height").', 'select(X):-barcelona(X,"author","name").', 'select(X):-barcelona(X,"author","description","height").']

jaccard: 1.0

AS desired: [['barcelona(1,"storm")', 'barcelona(2,"storm")', 'barcelona(3,"storm")', 'barcelona(4,"storm")', 'barcelona(5,"storm")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['barcelona(1,"storm")', 'barcelona(2,"storm")', 'barcelona(3,"storm")', 'barcelona(4,"storm")', 'barcelona(5,"storm")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


214
negative_filtering

question: 
Design an ASP solution to capture values associated with the predicate "flower" but not tied to the predicate "pink" and labeled "darkmagenta".

answer from file: 
select(X):-flower(X),not pink(X,"darkmagenta").

parsed from model: 
select(X):-flower(X),not pink(X,"darkmagenta").

facts: 
flower(1..3).pink(1,"lightblue").pink(2,"chair").pink(3,"darkmagenta").

generated: 
Design an ASP solution to capture values associated with the predicate "flower" but not tied to the predicate "pink" and labeled "darkmagenta".
Answer: select(X):-flower(X),not pink(X,"darkmagenta").
Explanation: The predicate "flower" includes values associated with the predicate "city","height","author","moto","description","name","author","city","description","height","name","author","description","name","author","city","description","height","name","author","description","name","author","city","description","height","name","author","description","name","author","city","description","height","name","author","description","name","author","city","description","height","name","author","description","name","author","city","description","height","name","author","description","name","author","city","description","height","

unique_rules: 
['select(X):-flower(X),not pink(X,"darkmagenta").']

jaccard: 1.0

AS desired: [['flower(1)', 'flower(2)', 'flower(3)', 'pink(1,"lightblue")', 'pink(2,"chair")', 'pink(3,"darkmagenta")', 'select(1)', 'select(2)']]
\AS obtained: [['flower(1)', 'flower(2)', 'flower(3)', 'pink(1,"lightblue")', 'pink(2,"chair")', 'pink(3,"darkmagenta")', 'select(1)', 'select(2)']]


215
numeric_filtering

question: 
Develop an ASP program to gather all values linked to the predicate "desk" with a value different than 72.

answer from file: 
select(X):-desk(X,C),C!=72.

parsed from model: 
select(X):-desk(X,C),C!=72.

facts: 
desk(1..3, 1..100).

generated: 
Develop an ASP program to gather all values linked to the predicate "desk" with a value different than 72.
Answer: select(X):-desk(X,C),C!=72.
select(X):-desk(X,C),C==72.

unique_rules: 
['select(X):-desk(X,C),C!=72.', 'select(X):-desk(X,C),C==72.']

jaccard: 1.0

AS desired: [['desk(1,1)', 'desk(1,2)', 'desk(1,3)', 'desk(1,4)', 'desk(1,5)', 'desk(1,6)', 'desk(1,7)', 'desk(1,8)', 'desk(1,9)', 'desk(1,10)', 'desk(1,11)', 'desk(1,12)', 'desk(1,13)', 'desk(1,14)', 'desk(1,15)', 'desk(1,16)', 'desk(1,17)', 'desk(1,18)', 'desk(1,19)', 'desk(1,20)', 'desk(1,21)', 'desk(1,22)', 'desk(1,23)', 'desk(1,24)', 'desk(1,25)', 'desk(1,26)', 'desk(1,27)', 'desk(1,28)', 'desk(1,29)', 'desk(1,30)', 'desk(1,31)', 'desk(1,32)', 'desk(1,33)', 'desk(1,34)', 'desk(1,35)', 'desk(1,36)', 'desk(1,37)', 'desk(1,38)', 'desk(1,39)', 'desk(1,40)', 'desk(1,41)', 'desk(1,42)', 'desk(1,43)', 'desk(1,44)', 'desk(1,45)', 'desk(1,46)', 'desk(1,47)', 'desk(1,48)', 'desk(1,49)', 'desk(1,50)', 'desk(1,51)', 'desk(1,52)', 'desk(1,53)', 'desk(1,54)', 'desk(1,55)', 'desk(1,56)', 'desk(1,57)', 'desk(1,58)', 'desk(1,59)', 'desk(1,60)', 'desk(1,61)', 'desk(1,62)', 'desk(1,63)', 'desk(1,64)', 'desk(1,65)', 'desk(1,66)', 'desk(1,67)', 'desk(1,68)', 'desk(1,69)', 'desk(1,70)', 'desk(1,71)', 'desk(1,72)', 'desk(1,73)', 'desk(1,74)', 'desk(1,75)', 'desk(1,76)', 'desk(1,77)', 'desk(1,78)', 'desk(1,79)', 'desk(1,80)', 'desk(1,81)', 'desk(1,82)', 'desk(1,83)', 'desk(1,84)', 'desk(1,85)', 'desk(1,86)', 'desk(1,87)', 'desk(1,88)', 'desk(1,89)', 'desk(1,90)', 'desk(1,91)', 'desk(1,92)', 'desk(1,93)', 'desk(1,94)', 'desk(1,95)', 'desk(1,96)', 'desk(1,97)', 'desk(1,98)', 'desk(1,99)', 'desk(1,100)', 'desk(2,1)', 'desk(2,2)', 'desk(2,3)', 'desk(2,4)', 'desk(2,5)', 'desk(2,6)', 'desk(2,7)', 'desk(2,8)', 'desk(2,9)', 'desk(2,10)', 'desk(2,11)', 'desk(2,12)', 'desk(2,13)', 'desk(2,14)', 'desk(2,15)', 'desk(2,16)', 'desk(2,17)', 'desk(2,18)', 'desk(2,19)', 'desk(2,20)', 'desk(2,21)', 'desk(2,22)', 'desk(2,23)', 'desk(2,24)', 'desk(2,25)', 'desk(2,26)', 'desk(2,27)', 'desk(2,28)', 'desk(2,29)', 'desk(2,30)', 'desk(2,31)', 'desk(2,32)', 'desk(2,33)', 'desk(2,34)', 'desk(2,35)', 'desk(2,36)', 'desk(2,37)', 'desk(2,38)', 'desk(2,39)', 'desk(2,40)', 'desk(2,41)', 'desk(2,42)', 'desk(2,43)', 'desk(2,44)', 'desk(2,45)', 'desk(2,46)', 'desk(2,47)', 'desk(2,48)', 'desk(2,49)', 'desk(2,50)', 'desk(2,51)', 'desk(2,52)', 'desk(2,53)', 'desk(2,54)', 'desk(2,55)', 'desk(2,56)', 'desk(2,57)', 'desk(2,58)', 'desk(2,59)', 'desk(2,60)', 'desk(2,61)', 'desk(2,62)', 'desk(2,63)', 'desk(2,64)', 'desk(2,65)', 'desk(2,66)', 'desk(2,67)', 'desk(2,68)', 'desk(2,69)', 'desk(2,70)', 'desk(2,71)', 'desk(2,72)', 'desk(2,73)', 'desk(2,74)', 'desk(2,75)', 'desk(2,76)', 'desk(2,77)', 'desk(2,78)', 'desk(2,79)', 'desk(2,80)', 'desk(2,81)', 'desk(2,82)', 'desk(2,83)', 'desk(2,84)', 'desk(2,85)', 'desk(2,86)', 'desk(2,87)', 'desk(2,88)', 'desk(2,89)', 'desk(2,90)', 'desk(2,91)', 'desk(2,92)', 'desk(2,93)', 'desk(2,94)', 'desk(2,95)', 'desk(2,96)', 'desk(2,97)', 'desk(2,98)', 'desk(2,99)', 'desk(2,100)', 'desk(3,1)', 'desk(3,2)', 'desk(3,3)', 'desk(3,4)', 'desk(3,5)', 'desk(3,6)', 'desk(3,7)', 'desk(3,8)', 'desk(3,9)', 'desk(3,10)', 'desk(3,11)', 'desk(3,12)', 'desk(3,13)', 'desk(3,14)', 'desk(3,15)', 'desk(3,16)', 'desk(3,17)', 'desk(3,18)', 'desk(3,19)', 'desk(3,20)', 'desk(3,21)', 'desk(3,22)', 'desk(3,23)', 'desk(3,24)', 'desk(3,25)', 'desk(3,26)', 'desk(3,27)', 'desk(3,28)', 'desk(3,29)', 'desk(3,30)', 'desk(3,31)', 'desk(3,32)', 'desk(3,33)', 'desk(3,34)', 'desk(3,35)', 'desk(3,36)', 'desk(3,37)', 'desk(3,38)', 'desk(3,39)', 'desk(3,40)', 'desk(3,41)', 'desk(3,42)', 'desk(3,43)', 'desk(3,44)', 'desk(3,45)', 'desk(3,46)', 'desk(3,47)', 'desk(3,48)', 'desk(3,49)', 'desk(3,50)', 'desk(3,51)', 'desk(3,52)', 'desk(3,53)', 'desk(3,54)', 'desk(3,55)', 'desk(3,56)', 'desk(3,57)', 'desk(3,58)', 'desk(3,59)', 'desk(3,60)', 'desk(3,61)', 'desk(3,62)', 'desk(3,63)', 'desk(3,64)', 'desk(3,65)', 'desk(3,66)', 'desk(3,67)', 'desk(3,68)', 'desk(3,69)', 'desk(3,70)', 'desk(3,71)', 'desk(3,72)', 'desk(3,73)', 'desk(3,74)', 'desk(3,75)', 'desk(3,76)', 'desk(3,77)', 'desk(3,78)', 'desk(3,79)', 'desk(3,80)', 'desk(3,81)', 'desk(3,82)', 'desk(3,83)', 'desk(3,84)', 'desk(3,85)', 'desk(3,86)', 'desk(3,87)', 'desk(3,88)', 'desk(3,89)', 'desk(3,90)', 'desk(3,91)', 'desk(3,92)', 'desk(3,93)', 'desk(3,94)', 'desk(3,95)', 'desk(3,96)', 'desk(3,97)', 'desk(3,98)', 'desk(3,99)', 'desk(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['desk(1,1)', 'desk(1,2)', 'desk(1,3)', 'desk(1,4)', 'desk(1,5)', 'desk(1,6)', 'desk(1,7)', 'desk(1,8)', 'desk(1,9)', 'desk(1,10)', 'desk(1,11)', 'desk(1,12)', 'desk(1,13)', 'desk(1,14)', 'desk(1,15)', 'desk(1,16)', 'desk(1,17)', 'desk(1,18)', 'desk(1,19)', 'desk(1,20)', 'desk(1,21)', 'desk(1,22)', 'desk(1,23)', 'desk(1,24)', 'desk(1,25)', 'desk(1,26)', 'desk(1,27)', 'desk(1,28)', 'desk(1,29)', 'desk(1,30)', 'desk(1,31)', 'desk(1,32)', 'desk(1,33)', 'desk(1,34)', 'desk(1,35)', 'desk(1,36)', 'desk(1,37)', 'desk(1,38)', 'desk(1,39)', 'desk(1,40)', 'desk(1,41)', 'desk(1,42)', 'desk(1,43)', 'desk(1,44)', 'desk(1,45)', 'desk(1,46)', 'desk(1,47)', 'desk(1,48)', 'desk(1,49)', 'desk(1,50)', 'desk(1,51)', 'desk(1,52)', 'desk(1,53)', 'desk(1,54)', 'desk(1,55)', 'desk(1,56)', 'desk(1,57)', 'desk(1,58)', 'desk(1,59)', 'desk(1,60)', 'desk(1,61)', 'desk(1,62)', 'desk(1,63)', 'desk(1,64)', 'desk(1,65)', 'desk(1,66)', 'desk(1,67)', 'desk(1,68)', 'desk(1,69)', 'desk(1,70)', 'desk(1,71)', 'desk(1,72)', 'desk(1,73)', 'desk(1,74)', 'desk(1,75)', 'desk(1,76)', 'desk(1,77)', 'desk(1,78)', 'desk(1,79)', 'desk(1,80)', 'desk(1,81)', 'desk(1,82)', 'desk(1,83)', 'desk(1,84)', 'desk(1,85)', 'desk(1,86)', 'desk(1,87)', 'desk(1,88)', 'desk(1,89)', 'desk(1,90)', 'desk(1,91)', 'desk(1,92)', 'desk(1,93)', 'desk(1,94)', 'desk(1,95)', 'desk(1,96)', 'desk(1,97)', 'desk(1,98)', 'desk(1,99)', 'desk(1,100)', 'desk(2,1)', 'desk(2,2)', 'desk(2,3)', 'desk(2,4)', 'desk(2,5)', 'desk(2,6)', 'desk(2,7)', 'desk(2,8)', 'desk(2,9)', 'desk(2,10)', 'desk(2,11)', 'desk(2,12)', 'desk(2,13)', 'desk(2,14)', 'desk(2,15)', 'desk(2,16)', 'desk(2,17)', 'desk(2,18)', 'desk(2,19)', 'desk(2,20)', 'desk(2,21)', 'desk(2,22)', 'desk(2,23)', 'desk(2,24)', 'desk(2,25)', 'desk(2,26)', 'desk(2,27)', 'desk(2,28)', 'desk(2,29)', 'desk(2,30)', 'desk(2,31)', 'desk(2,32)', 'desk(2,33)', 'desk(2,34)', 'desk(2,35)', 'desk(2,36)', 'desk(2,37)', 'desk(2,38)', 'desk(2,39)', 'desk(2,40)', 'desk(2,41)', 'desk(2,42)', 'desk(2,43)', 'desk(2,44)', 'desk(2,45)', 'desk(2,46)', 'desk(2,47)', 'desk(2,48)', 'desk(2,49)', 'desk(2,50)', 'desk(2,51)', 'desk(2,52)', 'desk(2,53)', 'desk(2,54)', 'desk(2,55)', 'desk(2,56)', 'desk(2,57)', 'desk(2,58)', 'desk(2,59)', 'desk(2,60)', 'desk(2,61)', 'desk(2,62)', 'desk(2,63)', 'desk(2,64)', 'desk(2,65)', 'desk(2,66)', 'desk(2,67)', 'desk(2,68)', 'desk(2,69)', 'desk(2,70)', 'desk(2,71)', 'desk(2,72)', 'desk(2,73)', 'desk(2,74)', 'desk(2,75)', 'desk(2,76)', 'desk(2,77)', 'desk(2,78)', 'desk(2,79)', 'desk(2,80)', 'desk(2,81)', 'desk(2,82)', 'desk(2,83)', 'desk(2,84)', 'desk(2,85)', 'desk(2,86)', 'desk(2,87)', 'desk(2,88)', 'desk(2,89)', 'desk(2,90)', 'desk(2,91)', 'desk(2,92)', 'desk(2,93)', 'desk(2,94)', 'desk(2,95)', 'desk(2,96)', 'desk(2,97)', 'desk(2,98)', 'desk(2,99)', 'desk(2,100)', 'desk(3,1)', 'desk(3,2)', 'desk(3,3)', 'desk(3,4)', 'desk(3,5)', 'desk(3,6)', 'desk(3,7)', 'desk(3,8)', 'desk(3,9)', 'desk(3,10)', 'desk(3,11)', 'desk(3,12)', 'desk(3,13)', 'desk(3,14)', 'desk(3,15)', 'desk(3,16)', 'desk(3,17)', 'desk(3,18)', 'desk(3,19)', 'desk(3,20)', 'desk(3,21)', 'desk(3,22)', 'desk(3,23)', 'desk(3,24)', 'desk(3,25)', 'desk(3,26)', 'desk(3,27)', 'desk(3,28)', 'desk(3,29)', 'desk(3,30)', 'desk(3,31)', 'desk(3,32)', 'desk(3,33)', 'desk(3,34)', 'desk(3,35)', 'desk(3,36)', 'desk(3,37)', 'desk(3,38)', 'desk(3,39)', 'desk(3,40)', 'desk(3,41)', 'desk(3,42)', 'desk(3,43)', 'desk(3,44)', 'desk(3,45)', 'desk(3,46)', 'desk(3,47)', 'desk(3,48)', 'desk(3,49)', 'desk(3,50)', 'desk(3,51)', 'desk(3,52)', 'desk(3,53)', 'desk(3,54)', 'desk(3,55)', 'desk(3,56)', 'desk(3,57)', 'desk(3,58)', 'desk(3,59)', 'desk(3,60)', 'desk(3,61)', 'desk(3,62)', 'desk(3,63)', 'desk(3,64)', 'desk(3,65)', 'desk(3,66)', 'desk(3,67)', 'desk(3,68)', 'desk(3,69)', 'desk(3,70)', 'desk(3,71)', 'desk(3,72)', 'desk(3,73)', 'desk(3,74)', 'desk(3,75)', 'desk(3,76)', 'desk(3,77)', 'desk(3,78)', 'desk(3,79)', 'desk(3,80)', 'desk(3,81)', 'desk(3,82)', 'desk(3,83)', 'desk(3,84)', 'desk(3,85)', 'desk(3,86)', 'desk(3,87)', 'desk(3,88)', 'desk(3,89)', 'desk(3,90)', 'desk(3,91)', 'desk(3,92)', 'desk(3,93)', 'desk(3,94)', 'desk(3,95)', 'desk(3,96)', 'desk(3,97)', 'desk(3,98)', 'desk(3,99)', 'desk(3,100)', 'select(1)', 'select(2)', 'select(3)']]


216
assignment

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate singapore. The labels are "chair","storm","lake","black","white".

answer from file: 
assign(X,"chair")|assign(X,"storm")|assign(X,"lake")|assign(X,"black")|assign(X,"white"):-singapore(X).

parsed from model: 
assign(X,"chair")|assign(X,"storm")|assign(X,"lake")|assign(X,"black")|assign(X,"white"):-singapore(X).

facts: 
singapore(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate singapore. The labels are "chair","storm","lake","black","white".
Answer: assign(X,"chair")|assign(X,"storm")|assign(X,"lake")|assign(X,"black")|assign(X,"white"):-singapore(X).
assign(X,"city"):- felicità(X).
 áng=assign(X,"city"):- felicità(X).
 áng(X,"city"): felicità(X).
 áng(X,"city"):- singapore(X).
 áng(X,"city"):- black(X).
 áng(X,"city"):- white(X).
 áng(X,"city"):- lake(X).
 áng(X,"city"):- storm(X).
 áng(X,"city"):- chair(

unique_rules: 
['assign(X,"chair")|assign(X,"storm")|assign(X,"lake")|assign(X,"black")|assign(X,"white"):-singapore(X).', 'assign(X,"city"):- felicità(X).', 'áng=assign(X,"city"):- felicità(X).', 'áng(X,"city"):- singapore(X).', 'áng(X,"city"):- black(X).', 'áng(X,"city"):- white(X).', 'áng(X,"city"):- lake(X).', 'áng(X,"city"):- storm(X).', 'áng(X,"city"):- chair(']

jaccard: 1.0

AS desired: [['singapore(1)', 'singapore(2)', 'singapore(3)', 'singapore(4)', 'singapore(5)', 'assign(1,"white")', 'assign(2,"white")', 'assign(3,"white")', 'assign(4,"white")', 'assign(5,"white")']]
\AS obtained: [['singapore(1)', 'singapore(2)', 'singapore(3)', 'singapore(4)', 'singapore(5)', 'assign(1,"white")', 'assign(2,"white")', 'assign(3,"white")', 'assign(4,"white")', 'assign(5,"white")']]


217
constraint

question: 
Create an ASP code snippet to ensure the "cairo" predicate with a value of 10 is not linked to the label "laptop".

answer from file: 
:-assign(10,laptop).

parsed from model: 
:-assign(10,laptop).

facts: 
cairo(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-cairo(X).

generated: 
Create an ASP code snippet to ensure the "cairo" predicate with a value of 10 is not linked to the label "laptop".
Answer: :-assign(10,laptop).
Explanation: The predicate "city" includes a "city" label for the "shangai" value, and the predicate "shangai" contains the "city" label for the "height" value. If the "city" label is assigned to the "height" value, it violates the "city" label constraint.

unique_rules: 
[':-assign(10,laptop).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'cairo(1)', 'cairo(2)', 'cairo(3)', 'cairo(4)', 'cairo(5)', 'cairo(6)', 'cairo(7)', 'cairo(8)', 'cairo(9)', 'cairo(10)', 'cairo(11)', 'cairo(12)', 'cairo(13)', 'cairo(14)', 'cairo(15)', 'cairo(16)', 'cairo(17)', 'cairo(18)', 'cairo(19)', 'cairo(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'cairo(1)', 'cairo(2)', 'cairo(3)', 'cairo(4)', 'cairo(5)', 'cairo(6)', 'cairo(7)', 'cairo(8)', 'cairo(9)', 'cairo(10)', 'cairo(11)', 'cairo(12)', 'cairo(13)', 'cairo(14)', 'cairo(15)', 'cairo(16)', 'cairo(17)', 'cairo(18)', 'cairo(19)', 'cairo(20)']]


218
combination

question: 
Develop an ASP code snippet to produce all valid combinations of elements from the "lightblue" and "lake" sets.

answer from file: 
combination(X,Y):-lightblue(X),lake(Y).

parsed from model: 
combination(X,Y):-lightblue(X),lake(Y).

facts: 
lightblue(1..4).lake(1..5).

generated: 
Develop an ASP code snippet to produce all valid combinations of elements from the "lightblue" and "lake" sets.
Answer: combination(X,Y):-lightblue(X),lake(Y).
combination(X,Y):-lightblue(X),not lake(Y).
combination(X,Y):-not lightblue(X),lake(Y).
combination(X,Y):-not lightblue(X),not lake(Y).

unique_rules: 
['combination(X,Y):-lightblue(X),lake(Y).', 'combination(X,Y):-lightblue(X),not lake(Y).', 'combination(X,Y):-not lightblue(X),lake(Y).', 'combination(X,Y):-not lightblue(X),not lake(Y).']

jaccard: 1.0

AS desired: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'lightblue(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'lightblue(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


219
join

question: 
Develop an ASP solution that defines the predicate "lake_storm" to link each lake to the surname of storm, with "lake" having fields "ID","stormID","owner","weight","lake" and "storm" having fields "ID","surname","owner".

answer from file: 
lake_storm(X,Z):-lake(X,Y,_,_,_),storm(Y,Z,_).

parsed from model: 
lake_storm(X,Z):-lake(X,Y,_,_,_),storm(Y,Z,_).

facts: 
lake("ID","stormID","owner","weight","lake").storm("ID","surname","owner").

generated: 
Develop an ASP solution that defines the predicate "lake_storm" to link each lake to the surname of storm, with "lake" having fields "ID","stormID","owner","weight","lake" and "storm" having fields "ID","surname","owner". Define the predicate "lake_storm" that links each lake to the surname of storm.
Answer: lake_storm(X,Z):-lake(X,Y,_,_,_),storm(Y,Z,_).
lake_storm(X,Z):-lake(X,Y,_,_,Z),storm(Y,Z,_).

unique_rules: 
['lake_storm(X,Z):-lake(X,Y,_,_,_),storm(Y,Z,_).', 'lake_storm(X,Z):-lake(X,Y,_,_,Z),storm(Y,Z,_).']

jaccard: 1.0

AS desired: [['lake("ID","stormID","owner","weight","lake")', 'storm("ID","surname","owner")']]
\AS obtained: [['lake("ID","stormID","owner","weight","lake")', 'storm("ID","surname","owner")']]


220
closure

question: 
Create an ASP solution that establishes the transitive closure of the "moscow" predicate, defined as "loops".

answer from file: 
loops(X,Y):-moscow(X,Y).
loops(X,Y):-moscow(X,Z),loops(Z,Y).

parsed from model: 


facts: 
moscow(1..3, 1..4).

generated: 
Create an ASP solution that establishes the transitive closure of the "moscow" predicate, defined as "loops".
Answer: closure(loops)
closure(loops) = {X|X∈loops}.
closure(loops) = loops.
closure(loops) = union(closure(X),closure(Y))|X,Y∈loops.
closure(loops) = union(loops,city(X,Y))|X,Y∈loops.
city(X,Y) = {X|X,Y∈loops}.

unique_rules: 
[]

jaccard: 0.0

AS desired: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]
\AS obtained: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)']]


221
preference

question: 
Craft an ASP solution to prevent the linking of the "quality" predicate with value "5" to "quality". Any link incurs a cost of "1" at level "1".

answer from file: 
:~assign(5,"quality").[1@1]

parsed from model: 
:~assign(5,"quality").[1@1]

facts: 
quality(1..20).

generated: 
Craft an ASP solution to prevent the linking of the "quality" predicate with value "5" to "quality". Any link incurs a cost of "1" at level "1".
Answer: :~assign(5,"quality").[1@1]
Explanation: The predicate "quality" includes values "1","city","author","rome","description","moto","author","city","description","author","rome","description","author","city","description","author","rome","description","author","city","description","author","rome","description","author","city","description","author","rome","description","author","city","description","author","rome","description","author","city","description","author","rome","description","author","city","description","author","rome","description","author","city","description","author","rome","description","author","city","description","author","rome","description","author","city

unique_rules: 
[':~assign(5,"quality").[1@1]']

jaccard: 1.0

AS desired: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'quality(6)', 'quality(7)', 'quality(8)', 'quality(9)', 'quality(10)', 'quality(11)', 'quality(12)', 'quality(13)', 'quality(14)', 'quality(15)', 'quality(16)', 'quality(17)', 'quality(18)', 'quality(19)', 'quality(20)']]
\AS obtained: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'quality(6)', 'quality(7)', 'quality(8)', 'quality(9)', 'quality(10)', 'quality(11)', 'quality(12)', 'quality(13)', 'quality(14)', 'quality(15)', 'quality(16)', 'quality(17)', 'quality(18)', 'quality(19)', 'quality(20)']]


222
filtering

question: 
Write an ASP script to collect values associated with the "surname" label from the "strength" predicate.

answer from file: 
select(X):-strength(X,"surname").

parsed from model: 
select(X):-strength(X,"description").

facts: 
strength(1..5, "surname").

generated: 
Write an ASP script to collect values associated with the "surname" label from the "strength" predicate.
Answer: select(X):-strength(X,"description").
select(X):-strength(X,"author").
select(X):-strength(X,"description","author").
strength(X,"description").
strength(X,"author").
strength(X,"description","author").

unique_rules: 
['select(X):-strength(X,"description").', 'select(X):-strength(X,"author").', 'select(X):-strength(X,"description","author").']

jaccard: 0.0

AS desired: [['strength(1,"surname")', 'strength(2,"surname")', 'strength(3,"surname")', 'strength(4,"surname")', 'strength(5,"surname")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['strength(1,"surname")', 'strength(2,"surname")', 'strength(3,"surname")', 'strength(4,"surname")', 'strength(5,"surname")']]


223
negative_filtering

question: 
Develop an ASP script to collect values tied to the predicate "flower" but not linked to the predicate "owner" and labeled "butterfly".

answer from file: 
select(X):-flower(X),not owner(X,"butterfly").

parsed from model: 
select(X):-flower(X),not owner(X,"butterfly").

facts: 
flower(1..3).owner(1,"surname").owner(2,"quality").owner(3,"black").

generated: 
Develop an ASP script to collect values tied to the predicate "flower" but not linked to the predicate "owner" and labeled "butterfly".
Answer: select(X):-flower(X),not owner(X,"butterfly").

unique_rules: 
['select(X):-flower(X),not owner(X,"butterfly").']

jaccard: 1.0

AS desired: [['flower(1)', 'flower(2)', 'flower(3)', 'owner(1,"surname")', 'owner(2,"quality")', 'owner(3,"black")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['flower(1)', 'flower(2)', 'flower(3)', 'owner(1,"surname")', 'owner(2,"quality")', 'owner(3,"black")', 'select(1)', 'select(2)', 'select(3)']]


224
numeric_filtering

question: 
Produce an ASP script to retrieve values associated with the predicate "flower" with a value different than 47.

answer from file: 
select(X):-flower(X,C),C!=47.

parsed from model: 
select(X):-flower(X,C),C!=47.

facts: 
flower(1..3, 1..100).

generated: 
Produce an ASP script to retrieve values associated with the predicate "flower" with a value different than 47.
Answer: select(X):-flower(X,C),C!=47.
select(X):-flower(X,C),C==47.

unique_rules: 
['select(X):-flower(X,C),C!=47.', 'select(X):-flower(X,C),C==47.']

jaccard: 1.0

AS desired: [['flower(1,1)', 'flower(1,2)', 'flower(1,3)', 'flower(1,4)', 'flower(1,5)', 'flower(1,6)', 'flower(1,7)', 'flower(1,8)', 'flower(1,9)', 'flower(1,10)', 'flower(1,11)', 'flower(1,12)', 'flower(1,13)', 'flower(1,14)', 'flower(1,15)', 'flower(1,16)', 'flower(1,17)', 'flower(1,18)', 'flower(1,19)', 'flower(1,20)', 'flower(1,21)', 'flower(1,22)', 'flower(1,23)', 'flower(1,24)', 'flower(1,25)', 'flower(1,26)', 'flower(1,27)', 'flower(1,28)', 'flower(1,29)', 'flower(1,30)', 'flower(1,31)', 'flower(1,32)', 'flower(1,33)', 'flower(1,34)', 'flower(1,35)', 'flower(1,36)', 'flower(1,37)', 'flower(1,38)', 'flower(1,39)', 'flower(1,40)', 'flower(1,41)', 'flower(1,42)', 'flower(1,43)', 'flower(1,44)', 'flower(1,45)', 'flower(1,46)', 'flower(1,47)', 'flower(1,48)', 'flower(1,49)', 'flower(1,50)', 'flower(1,51)', 'flower(1,52)', 'flower(1,53)', 'flower(1,54)', 'flower(1,55)', 'flower(1,56)', 'flower(1,57)', 'flower(1,58)', 'flower(1,59)', 'flower(1,60)', 'flower(1,61)', 'flower(1,62)', 'flower(1,63)', 'flower(1,64)', 'flower(1,65)', 'flower(1,66)', 'flower(1,67)', 'flower(1,68)', 'flower(1,69)', 'flower(1,70)', 'flower(1,71)', 'flower(1,72)', 'flower(1,73)', 'flower(1,74)', 'flower(1,75)', 'flower(1,76)', 'flower(1,77)', 'flower(1,78)', 'flower(1,79)', 'flower(1,80)', 'flower(1,81)', 'flower(1,82)', 'flower(1,83)', 'flower(1,84)', 'flower(1,85)', 'flower(1,86)', 'flower(1,87)', 'flower(1,88)', 'flower(1,89)', 'flower(1,90)', 'flower(1,91)', 'flower(1,92)', 'flower(1,93)', 'flower(1,94)', 'flower(1,95)', 'flower(1,96)', 'flower(1,97)', 'flower(1,98)', 'flower(1,99)', 'flower(1,100)', 'flower(2,1)', 'flower(2,2)', 'flower(2,3)', 'flower(2,4)', 'flower(2,5)', 'flower(2,6)', 'flower(2,7)', 'flower(2,8)', 'flower(2,9)', 'flower(2,10)', 'flower(2,11)', 'flower(2,12)', 'flower(2,13)', 'flower(2,14)', 'flower(2,15)', 'flower(2,16)', 'flower(2,17)', 'flower(2,18)', 'flower(2,19)', 'flower(2,20)', 'flower(2,21)', 'flower(2,22)', 'flower(2,23)', 'flower(2,24)', 'flower(2,25)', 'flower(2,26)', 'flower(2,27)', 'flower(2,28)', 'flower(2,29)', 'flower(2,30)', 'flower(2,31)', 'flower(2,32)', 'flower(2,33)', 'flower(2,34)', 'flower(2,35)', 'flower(2,36)', 'flower(2,37)', 'flower(2,38)', 'flower(2,39)', 'flower(2,40)', 'flower(2,41)', 'flower(2,42)', 'flower(2,43)', 'flower(2,44)', 'flower(2,45)', 'flower(2,46)', 'flower(2,47)', 'flower(2,48)', 'flower(2,49)', 'flower(2,50)', 'flower(2,51)', 'flower(2,52)', 'flower(2,53)', 'flower(2,54)', 'flower(2,55)', 'flower(2,56)', 'flower(2,57)', 'flower(2,58)', 'flower(2,59)', 'flower(2,60)', 'flower(2,61)', 'flower(2,62)', 'flower(2,63)', 'flower(2,64)', 'flower(2,65)', 'flower(2,66)', 'flower(2,67)', 'flower(2,68)', 'flower(2,69)', 'flower(2,70)', 'flower(2,71)', 'flower(2,72)', 'flower(2,73)', 'flower(2,74)', 'flower(2,75)', 'flower(2,76)', 'flower(2,77)', 'flower(2,78)', 'flower(2,79)', 'flower(2,80)', 'flower(2,81)', 'flower(2,82)', 'flower(2,83)', 'flower(2,84)', 'flower(2,85)', 'flower(2,86)', 'flower(2,87)', 'flower(2,88)', 'flower(2,89)', 'flower(2,90)', 'flower(2,91)', 'flower(2,92)', 'flower(2,93)', 'flower(2,94)', 'flower(2,95)', 'flower(2,96)', 'flower(2,97)', 'flower(2,98)', 'flower(2,99)', 'flower(2,100)', 'flower(3,1)', 'flower(3,2)', 'flower(3,3)', 'flower(3,4)', 'flower(3,5)', 'flower(3,6)', 'flower(3,7)', 'flower(3,8)', 'flower(3,9)', 'flower(3,10)', 'flower(3,11)', 'flower(3,12)', 'flower(3,13)', 'flower(3,14)', 'flower(3,15)', 'flower(3,16)', 'flower(3,17)', 'flower(3,18)', 'flower(3,19)', 'flower(3,20)', 'flower(3,21)', 'flower(3,22)', 'flower(3,23)', 'flower(3,24)', 'flower(3,25)', 'flower(3,26)', 'flower(3,27)', 'flower(3,28)', 'flower(3,29)', 'flower(3,30)', 'flower(3,31)', 'flower(3,32)', 'flower(3,33)', 'flower(3,34)', 'flower(3,35)', 'flower(3,36)', 'flower(3,37)', 'flower(3,38)', 'flower(3,39)', 'flower(3,40)', 'flower(3,41)', 'flower(3,42)', 'flower(3,43)', 'flower(3,44)', 'flower(3,45)', 'flower(3,46)', 'flower(3,47)', 'flower(3,48)', 'flower(3,49)', 'flower(3,50)', 'flower(3,51)', 'flower(3,52)', 'flower(3,53)', 'flower(3,54)', 'flower(3,55)', 'flower(3,56)', 'flower(3,57)', 'flower(3,58)', 'flower(3,59)', 'flower(3,60)', 'flower(3,61)', 'flower(3,62)', 'flower(3,63)', 'flower(3,64)', 'flower(3,65)', 'flower(3,66)', 'flower(3,67)', 'flower(3,68)', 'flower(3,69)', 'flower(3,70)', 'flower(3,71)', 'flower(3,72)', 'flower(3,73)', 'flower(3,74)', 'flower(3,75)', 'flower(3,76)', 'flower(3,77)', 'flower(3,78)', 'flower(3,79)', 'flower(3,80)', 'flower(3,81)', 'flower(3,82)', 'flower(3,83)', 'flower(3,84)', 'flower(3,85)', 'flower(3,86)', 'flower(3,87)', 'flower(3,88)', 'flower(3,89)', 'flower(3,90)', 'flower(3,91)', 'flower(3,92)', 'flower(3,93)', 'flower(3,94)', 'flower(3,95)', 'flower(3,96)', 'flower(3,97)', 'flower(3,98)', 'flower(3,99)', 'flower(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['flower(1,1)', 'flower(1,2)', 'flower(1,3)', 'flower(1,4)', 'flower(1,5)', 'flower(1,6)', 'flower(1,7)', 'flower(1,8)', 'flower(1,9)', 'flower(1,10)', 'flower(1,11)', 'flower(1,12)', 'flower(1,13)', 'flower(1,14)', 'flower(1,15)', 'flower(1,16)', 'flower(1,17)', 'flower(1,18)', 'flower(1,19)', 'flower(1,20)', 'flower(1,21)', 'flower(1,22)', 'flower(1,23)', 'flower(1,24)', 'flower(1,25)', 'flower(1,26)', 'flower(1,27)', 'flower(1,28)', 'flower(1,29)', 'flower(1,30)', 'flower(1,31)', 'flower(1,32)', 'flower(1,33)', 'flower(1,34)', 'flower(1,35)', 'flower(1,36)', 'flower(1,37)', 'flower(1,38)', 'flower(1,39)', 'flower(1,40)', 'flower(1,41)', 'flower(1,42)', 'flower(1,43)', 'flower(1,44)', 'flower(1,45)', 'flower(1,46)', 'flower(1,47)', 'flower(1,48)', 'flower(1,49)', 'flower(1,50)', 'flower(1,51)', 'flower(1,52)', 'flower(1,53)', 'flower(1,54)', 'flower(1,55)', 'flower(1,56)', 'flower(1,57)', 'flower(1,58)', 'flower(1,59)', 'flower(1,60)', 'flower(1,61)', 'flower(1,62)', 'flower(1,63)', 'flower(1,64)', 'flower(1,65)', 'flower(1,66)', 'flower(1,67)', 'flower(1,68)', 'flower(1,69)', 'flower(1,70)', 'flower(1,71)', 'flower(1,72)', 'flower(1,73)', 'flower(1,74)', 'flower(1,75)', 'flower(1,76)', 'flower(1,77)', 'flower(1,78)', 'flower(1,79)', 'flower(1,80)', 'flower(1,81)', 'flower(1,82)', 'flower(1,83)', 'flower(1,84)', 'flower(1,85)', 'flower(1,86)', 'flower(1,87)', 'flower(1,88)', 'flower(1,89)', 'flower(1,90)', 'flower(1,91)', 'flower(1,92)', 'flower(1,93)', 'flower(1,94)', 'flower(1,95)', 'flower(1,96)', 'flower(1,97)', 'flower(1,98)', 'flower(1,99)', 'flower(1,100)', 'flower(2,1)', 'flower(2,2)', 'flower(2,3)', 'flower(2,4)', 'flower(2,5)', 'flower(2,6)', 'flower(2,7)', 'flower(2,8)', 'flower(2,9)', 'flower(2,10)', 'flower(2,11)', 'flower(2,12)', 'flower(2,13)', 'flower(2,14)', 'flower(2,15)', 'flower(2,16)', 'flower(2,17)', 'flower(2,18)', 'flower(2,19)', 'flower(2,20)', 'flower(2,21)', 'flower(2,22)', 'flower(2,23)', 'flower(2,24)', 'flower(2,25)', 'flower(2,26)', 'flower(2,27)', 'flower(2,28)', 'flower(2,29)', 'flower(2,30)', 'flower(2,31)', 'flower(2,32)', 'flower(2,33)', 'flower(2,34)', 'flower(2,35)', 'flower(2,36)', 'flower(2,37)', 'flower(2,38)', 'flower(2,39)', 'flower(2,40)', 'flower(2,41)', 'flower(2,42)', 'flower(2,43)', 'flower(2,44)', 'flower(2,45)', 'flower(2,46)', 'flower(2,47)', 'flower(2,48)', 'flower(2,49)', 'flower(2,50)', 'flower(2,51)', 'flower(2,52)', 'flower(2,53)', 'flower(2,54)', 'flower(2,55)', 'flower(2,56)', 'flower(2,57)', 'flower(2,58)', 'flower(2,59)', 'flower(2,60)', 'flower(2,61)', 'flower(2,62)', 'flower(2,63)', 'flower(2,64)', 'flower(2,65)', 'flower(2,66)', 'flower(2,67)', 'flower(2,68)', 'flower(2,69)', 'flower(2,70)', 'flower(2,71)', 'flower(2,72)', 'flower(2,73)', 'flower(2,74)', 'flower(2,75)', 'flower(2,76)', 'flower(2,77)', 'flower(2,78)', 'flower(2,79)', 'flower(2,80)', 'flower(2,81)', 'flower(2,82)', 'flower(2,83)', 'flower(2,84)', 'flower(2,85)', 'flower(2,86)', 'flower(2,87)', 'flower(2,88)', 'flower(2,89)', 'flower(2,90)', 'flower(2,91)', 'flower(2,92)', 'flower(2,93)', 'flower(2,94)', 'flower(2,95)', 'flower(2,96)', 'flower(2,97)', 'flower(2,98)', 'flower(2,99)', 'flower(2,100)', 'flower(3,1)', 'flower(3,2)', 'flower(3,3)', 'flower(3,4)', 'flower(3,5)', 'flower(3,6)', 'flower(3,7)', 'flower(3,8)', 'flower(3,9)', 'flower(3,10)', 'flower(3,11)', 'flower(3,12)', 'flower(3,13)', 'flower(3,14)', 'flower(3,15)', 'flower(3,16)', 'flower(3,17)', 'flower(3,18)', 'flower(3,19)', 'flower(3,20)', 'flower(3,21)', 'flower(3,22)', 'flower(3,23)', 'flower(3,24)', 'flower(3,25)', 'flower(3,26)', 'flower(3,27)', 'flower(3,28)', 'flower(3,29)', 'flower(3,30)', 'flower(3,31)', 'flower(3,32)', 'flower(3,33)', 'flower(3,34)', 'flower(3,35)', 'flower(3,36)', 'flower(3,37)', 'flower(3,38)', 'flower(3,39)', 'flower(3,40)', 'flower(3,41)', 'flower(3,42)', 'flower(3,43)', 'flower(3,44)', 'flower(3,45)', 'flower(3,46)', 'flower(3,47)', 'flower(3,48)', 'flower(3,49)', 'flower(3,50)', 'flower(3,51)', 'flower(3,52)', 'flower(3,53)', 'flower(3,54)', 'flower(3,55)', 'flower(3,56)', 'flower(3,57)', 'flower(3,58)', 'flower(3,59)', 'flower(3,60)', 'flower(3,61)', 'flower(3,62)', 'flower(3,63)', 'flower(3,64)', 'flower(3,65)', 'flower(3,66)', 'flower(3,67)', 'flower(3,68)', 'flower(3,69)', 'flower(3,70)', 'flower(3,71)', 'flower(3,72)', 'flower(3,73)', 'flower(3,74)', 'flower(3,75)', 'flower(3,76)', 'flower(3,77)', 'flower(3,78)', 'flower(3,79)', 'flower(3,80)', 'flower(3,81)', 'flower(3,82)', 'flower(3,83)', 'flower(3,84)', 'flower(3,85)', 'flower(3,86)', 'flower(3,87)', 'flower(3,88)', 'flower(3,89)', 'flower(3,90)', 'flower(3,91)', 'flower(3,92)', 'flower(3,93)', 'flower(3,94)', 'flower(3,95)', 'flower(3,96)', 'flower(3,97)', 'flower(3,98)', 'flower(3,99)', 'flower(3,100)', 'select(1)', 'select(2)', 'select(3)']]


225
assignment

question: 
Develop an ASP script that ensures each element, as specified by the predicate "quality", receives exactly one label from the set "surname","cosenza".

answer from file: 
assign(X,"surname")|assign(X,"cosenza"):-quality(X).

parsed from model: 
assign(X,"surname")|assign(X,"cosenza"):-quality(X).

facts: 
quality(1..5).

generated: 
Develop an ASP script that ensures each element, as specified by the predicate "quality", receives exactly one label from the set "surname","cosenza".
Answer: assign(X,"surname")|assign(X,"cosenza"):-quality(X).
assign(X,"name"):-quality(X).
assign(X,"author"):-quality(X).
assign(X,"description"):-quality(X).
assign(X,"moto"):-quality(X).
assign(X,"rome"):-quality(X).
assign(X,"description","rome"):-quality(X).
assign(X,"description","moto"):-quality(X).
assign(X,"description","author"):-quality(X).
assign(X,"description","description"):-quality(X).

unique_rules: 
['assign(X,"surname")|assign(X,"cosenza"):-quality(X).', 'assign(X,"name"):-quality(X).', 'assign(X,"author"):-quality(X).', 'assign(X,"description"):-quality(X).', 'assign(X,"moto"):-quality(X).', 'assign(X,"rome"):-quality(X).', 'assign(X,"description","rome"):-quality(X).', 'assign(X,"description","moto"):-quality(X).', 'assign(X,"description","author"):-quality(X).', 'assign(X,"description","description"):-quality(X).']

jaccard: 1.0

AS desired: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'assign(1,"cosenza")', 'assign(2,"surname")', 'assign(3,"surname")', 'assign(4,"cosenza")', 'assign(5,"surname")']]
\AS obtained: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'assign(1,"cosenza")', 'assign(2,"surname")', 'assign(3,"surname")', 'assign(4,"cosenza")', 'assign(5,"surname")']]


226
constraint

question: 
Design an ASP application that prohibits assigning the "flower" predicate with value 9 to the label "toronto".

answer from file: 
:-assign(9,toronto).

parsed from model: 
:-assign(9,toronto).

facts: 
flower(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-flower(X).

generated: 
Design an ASP application that prohibits assigning the "flower" predicate with value 9 to the label "toronto".
Answer: :-assign(9,toronto).
Explanation: The predicate "florence" includes values 1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,4

unique_rules: 
[':-assign(9,toronto).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'flower(1)', 'flower(2)', 'flower(3)', 'flower(4)', 'flower(5)', 'flower(6)', 'flower(7)', 'flower(8)', 'flower(9)', 'flower(10)', 'flower(11)', 'flower(12)', 'flower(13)', 'flower(14)', 'flower(15)', 'flower(16)', 'flower(17)', 'flower(18)', 'flower(19)', 'flower(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'flower(1)', 'flower(2)', 'flower(3)', 'flower(4)', 'flower(5)', 'flower(6)', 'flower(7)', 'flower(8)', 'flower(9)', 'flower(10)', 'flower(11)', 'flower(12)', 'flower(13)', 'flower(14)', 'flower(15)', 'flower(16)', 'flower(17)', 'flower(18)', 'flower(19)', 'flower(20)']]


227
combination

question: 
Craft an ASP application to list valid combinations of elements between the predicates "cairo" and "chicago".

answer from file: 
combination(X,Y):-cairo(X),chicago(Y).

parsed from model: 
combination(X,Y):-cairo(X),chicago(Y).

facts: 
cairo(1..4).chicago(1..5).

generated: 
Craft an ASP application to list valid combinations of elements between the predicates "cairo" and "chicago".
Answer: combination(X,Y):-cairo(X),chicago(Y).
combination(X,Y):-cairo(X),not chicago(Y).
combination(X,Y):-not cairo(X),chicago(Y).
combination(X,Y):-not cairo(X),not chicago(Y).

unique_rules: 
['combination(X,Y):-cairo(X),chicago(Y).', 'combination(X,Y):-cairo(X),not chicago(Y).', 'combination(X,Y):-not cairo(X),chicago(Y).', 'combination(X,Y):-not cairo(X),not chicago(Y).']

jaccard: 1.0

AS desired: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'chicago(5)', 'cairo(1)', 'cairo(2)', 'cairo(3)', 'cairo(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'chicago(5)', 'cairo(1)', 'cairo(2)', 'cairo(3)', 'cairo(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


228
join

question: 
Create an ASP script to define the predicate "pink_wall" that links each pink to the owner of wall, given that "pink" has fields "ID","weight","lake","wallID","hair" and "wall" has fields "ID","surname","lake","owner".

answer from file: 
pink_wall(X,Z):-pink(X,_,_,Y,_),wall(Y,_,_,Z).

parsed from model: 
pink_wall(X,Z):-pink(X,_,_,Y,_),wall(Y,_,_,Z).

facts: 
pink("ID","weight","lake","wallID","hair").wall("ID","surname","lake","owner").

generated: 
Create an ASP script to define the predicate "pink_wall" that links each pink to the owner of wall, given that "pink" has fields "ID","weight","lake","wallID","hair" and "wall" has fields "ID","surname","lake","owner". Define the predicate "pink_wall" that links each pink to the owner of wall.
Answer: pink_wall(X,Z):-pink(X,_,_,Y,_),wall(Y,_,_,Z).
pink_wall(X,Z):-pink(X,_,_,Y),wall(Y,_,_,X).

unique_rules: 
['pink_wall(X,Z):-pink(X,_,_,Y,_),wall(Y,_,_,Z).', 'pink_wall(X,Z):-pink(X,_,_,Y),wall(Y,_,_,X).']

jaccard: 1.0

AS desired: [['pink("ID","weight","lake","wallID","hair")', 'wall("ID","surname","lake","owner")']]
\AS obtained: [['pink("ID","weight","lake","wallID","hair")', 'wall("ID","surname","lake","owner")']]


229
closure

question: 
Design an ASP program that infers the "trains" predicate using the transitive closure of the "delhi" predicate.

answer from file: 
trains(X,Y):-delhi(X,Y).
trains(X,Y):-delhi(X,Z),trains(Z,Y).

parsed from model: 
trains(X,Y):-delhi(X,Y).
trains(X,Y):-delhi(X,Z),trains(Z,Y).

facts: 
delhi(1..3, 1..4).

generated: 
Design an ASP program that infers the "trains" predicate using the transitive closure of the "delhi" predicate.
Answer: trains(X,Y):-delhi(X,Y).
trains(X,Y):-delhi(X,Z),trains(Z,Y).
trains(X,Y):-delhi(X,Z),not trains(Z,Y).
delhi(X,Y):-city(X,Y).
city(X,Y):-bike(X,Y).
bike(X,Y):-moto(X,Y).
moto(X,Y):-dubai(X,Y).
dubai(X,Y):-city(X,Y).

unique_rules: 
['trains(X,Y):-delhi(X,Y).', 'trains(X,Y):-delhi(X,Z),trains(Z,Y).', 'trains(X,Y):-delhi(X,Z),not trains(Z,Y).', 'delhi(X,Y):-city(X,Y).', 'city(X,Y):-bike(X,Y).', 'bike(X,Y):-moto(X,Y).', 'moto(X,Y):-dubai(X,Y).', 'dubai(X,Y):-city(X,Y).']

jaccard: 1.0

AS desired: [['delhi(1,1)', 'delhi(1,2)', 'delhi(1,3)', 'delhi(1,4)', 'delhi(2,1)', 'delhi(2,2)', 'delhi(2,3)', 'delhi(2,4)', 'delhi(3,1)', 'delhi(3,2)', 'delhi(3,3)', 'delhi(3,4)', 'trains(1,1)', 'trains(1,2)', 'trains(1,3)', 'trains(1,4)', 'trains(2,1)', 'trains(2,2)', 'trains(2,3)', 'trains(2,4)', 'trains(3,1)', 'trains(3,2)', 'trains(3,3)', 'trains(3,4)']]
\AS obtained: [['delhi(1,1)', 'delhi(1,2)', 'delhi(1,3)', 'delhi(1,4)', 'delhi(2,1)', 'delhi(2,2)', 'delhi(2,3)', 'delhi(2,4)', 'delhi(3,1)', 'delhi(3,2)', 'delhi(3,3)', 'delhi(3,4)', 'trains(1,1)', 'trains(1,2)', 'trains(1,3)', 'trains(1,4)', 'trains(2,1)', 'trains(2,2)', 'trains(2,3)', 'trains(2,4)', 'trains(3,1)', 'trains(3,2)', 'trains(3,3)', 'trains(3,4)']]


230
preference

question: 
Draft an ASP solution to make sure the predicate "lightblue" with value "1" is not connected to "surname". If connected, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(1,"surname").[1@1]

parsed from model: 
:~assign(1,"surname").[1@1]

facts: 
lightblue(1..20).

generated: 
Draft an ASP solution to make sure the predicate "lightblue" with value "1" is not connected to "surname". If connected, it incurs a cost of "1" at level "1".
Answer: :~assign(1,"surname").[1@1]
```python
# Define the predicate "lightblue"
lightblue = predicate("lightblue")

# Define the predicate "surname"
surname = predicate("surname")

# Define the predicate "cost"
cost = predicate("cost")

# Define the predicate "flights"
flights = predicate("flights")

# Define the predicate "price"
price = predicate("price")

# Define the predicate "flights_price"
flights_price = predicate("flights_price")

# Define the predicate "flights_price_cost"
flights_price_cost = predicate("flights_price_cost")

# Connect lightblue

unique_rules: 
[':~assign(1,"surname").[1@1]']

jaccard: 1.0

AS desired: [['lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'lightblue(4)', 'lightblue(5)', 'lightblue(6)', 'lightblue(7)', 'lightblue(8)', 'lightblue(9)', 'lightblue(10)', 'lightblue(11)', 'lightblue(12)', 'lightblue(13)', 'lightblue(14)', 'lightblue(15)', 'lightblue(16)', 'lightblue(17)', 'lightblue(18)', 'lightblue(19)', 'lightblue(20)']]
\AS obtained: [['lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'lightblue(4)', 'lightblue(5)', 'lightblue(6)', 'lightblue(7)', 'lightblue(8)', 'lightblue(9)', 'lightblue(10)', 'lightblue(11)', 'lightblue(12)', 'lightblue(13)', 'lightblue(14)', 'lightblue(15)', 'lightblue(16)', 'lightblue(17)', 'lightblue(18)', 'lightblue(19)', 'lightblue(20)']]


231
filtering

question: 
Craft an ASP code snippet to capture all relevant values for the "barcelona" label within the "barcelona" predicate.

answer from file: 
select(X):-barcelona(X,"barcelona").

parsed from model: 
select(X):-barcelona(X,"shangai").

facts: 
barcelona(1..5, "barcelona").

generated: 
Craft an ASP code snippet to capture all relevant values for the "barcelona" label within the "barcelona" predicate.
Answer: select(X):-barcelona(X,"shangai").
select(X):-barcelona(X,"city").
select(X):-barcelona(X,"moto").
select(X):-barcelona(X,"author").
select(X):-barcelona(X,"description").
select(X):-barcelona(X,"height").
select(X):-barcelona(X,"author","shangai").
select(X):-barcelona(X,"author","city").
select(X):-barcelona(X,"author","moto").
select(X):-barcelona(X,"author","author").
select(X):-barcelona(X,"author","description").
select(X):-barcelona(X,"author","height").
select

unique_rules: 
['select(X):-barcelona(X,"shangai").', 'select(X):-barcelona(X,"city").', 'select(X):-barcelona(X,"moto").', 'select(X):-barcelona(X,"author").', 'select(X):-barcelona(X,"description").', 'select(X):-barcelona(X,"height").', 'select(X):-barcelona(X,"author","shangai").', 'select(X):-barcelona(X,"author","city").', 'select(X):-barcelona(X,"author","moto").', 'select(X):-barcelona(X,"author","author").', 'select(X):-barcelona(X,"author","description").', 'select(X):-barcelona(X,"author","height").']

jaccard: 0.0

AS desired: [['barcelona(1,"barcelona")', 'barcelona(2,"barcelona")', 'barcelona(3,"barcelona")', 'barcelona(4,"barcelona")', 'barcelona(5,"barcelona")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['barcelona(1,"barcelona")', 'barcelona(2,"barcelona")', 'barcelona(3,"barcelona")', 'barcelona(4,"barcelona")', 'barcelona(5,"barcelona")']]


232
negative_filtering

question: 
Compose an ASP solution to identify all values connected to the predicate "darkmagenta" but not to the predicate "moscow" and labeled "laptop".

answer from file: 
select(X):-darkmagenta(X),not moscow(X,"laptop").

parsed from model: 
select(X):-darkmagenta(X),not moscow(X,"laptop").

facts: 
darkmagenta(1..3).moscow(1,"quality").moscow(2,"wall").moscow(3,"laptop").

generated: 
Compose an ASP solution to identify all values connected to the predicate "darkmagenta" but not to the predicate "moscow" and labeled "laptop".
Answer: select(X):-darkmagenta(X),not moscow(X,"laptop").
darkmagenta(X):-age(X,"height"),height(X,"height").
moscow(X,"height"):-age(X,"height").
height(X,"height"):-age(X,"height").

unique_rules: 
['select(X):-darkmagenta(X),not moscow(X,"laptop").', 'darkmagenta(X):-age(X,"height"),height(X,"height").', 'moscow(X,"height"):-age(X,"height").', 'height(X,"height"):-age(X,"height").']

jaccard: 1.0

AS desired: [['darkmagenta(1)', 'darkmagenta(2)', 'darkmagenta(3)', 'moscow(1,"quality")', 'moscow(2,"wall")', 'moscow(3,"laptop")', 'select(1)', 'select(2)']]
\AS obtained: [['darkmagenta(1)', 'darkmagenta(2)', 'darkmagenta(3)', 'moscow(1,"quality")', 'moscow(2,"wall")', 'moscow(3,"laptop")', 'select(1)', 'select(2)']]


233
numeric_filtering

question: 
Generate an ASP code to capture values associated with the predicate "chair" with a value different than 66.

answer from file: 
select(X):-chair(X,C),C!=66.

parsed from model: 
select(X):-chair(X,C),C!=66.

facts: 
chair(1..3, 1..100).

generated: 
Generate an ASP code to capture values associated with the predicate "chair" with a value different than 66.
Answer: select(X):-chair(X,C),C!=66.
select(X):-chair(X,C),C==66.

unique_rules: 
['select(X):-chair(X,C),C!=66.', 'select(X):-chair(X,C),C==66.']

jaccard: 1.0

AS desired: [['chair(1,1)', 'chair(1,2)', 'chair(1,3)', 'chair(1,4)', 'chair(1,5)', 'chair(1,6)', 'chair(1,7)', 'chair(1,8)', 'chair(1,9)', 'chair(1,10)', 'chair(1,11)', 'chair(1,12)', 'chair(1,13)', 'chair(1,14)', 'chair(1,15)', 'chair(1,16)', 'chair(1,17)', 'chair(1,18)', 'chair(1,19)', 'chair(1,20)', 'chair(1,21)', 'chair(1,22)', 'chair(1,23)', 'chair(1,24)', 'chair(1,25)', 'chair(1,26)', 'chair(1,27)', 'chair(1,28)', 'chair(1,29)', 'chair(1,30)', 'chair(1,31)', 'chair(1,32)', 'chair(1,33)', 'chair(1,34)', 'chair(1,35)', 'chair(1,36)', 'chair(1,37)', 'chair(1,38)', 'chair(1,39)', 'chair(1,40)', 'chair(1,41)', 'chair(1,42)', 'chair(1,43)', 'chair(1,44)', 'chair(1,45)', 'chair(1,46)', 'chair(1,47)', 'chair(1,48)', 'chair(1,49)', 'chair(1,50)', 'chair(1,51)', 'chair(1,52)', 'chair(1,53)', 'chair(1,54)', 'chair(1,55)', 'chair(1,56)', 'chair(1,57)', 'chair(1,58)', 'chair(1,59)', 'chair(1,60)', 'chair(1,61)', 'chair(1,62)', 'chair(1,63)', 'chair(1,64)', 'chair(1,65)', 'chair(1,66)', 'chair(1,67)', 'chair(1,68)', 'chair(1,69)', 'chair(1,70)', 'chair(1,71)', 'chair(1,72)', 'chair(1,73)', 'chair(1,74)', 'chair(1,75)', 'chair(1,76)', 'chair(1,77)', 'chair(1,78)', 'chair(1,79)', 'chair(1,80)', 'chair(1,81)', 'chair(1,82)', 'chair(1,83)', 'chair(1,84)', 'chair(1,85)', 'chair(1,86)', 'chair(1,87)', 'chair(1,88)', 'chair(1,89)', 'chair(1,90)', 'chair(1,91)', 'chair(1,92)', 'chair(1,93)', 'chair(1,94)', 'chair(1,95)', 'chair(1,96)', 'chair(1,97)', 'chair(1,98)', 'chair(1,99)', 'chair(1,100)', 'chair(2,1)', 'chair(2,2)', 'chair(2,3)', 'chair(2,4)', 'chair(2,5)', 'chair(2,6)', 'chair(2,7)', 'chair(2,8)', 'chair(2,9)', 'chair(2,10)', 'chair(2,11)', 'chair(2,12)', 'chair(2,13)', 'chair(2,14)', 'chair(2,15)', 'chair(2,16)', 'chair(2,17)', 'chair(2,18)', 'chair(2,19)', 'chair(2,20)', 'chair(2,21)', 'chair(2,22)', 'chair(2,23)', 'chair(2,24)', 'chair(2,25)', 'chair(2,26)', 'chair(2,27)', 'chair(2,28)', 'chair(2,29)', 'chair(2,30)', 'chair(2,31)', 'chair(2,32)', 'chair(2,33)', 'chair(2,34)', 'chair(2,35)', 'chair(2,36)', 'chair(2,37)', 'chair(2,38)', 'chair(2,39)', 'chair(2,40)', 'chair(2,41)', 'chair(2,42)', 'chair(2,43)', 'chair(2,44)', 'chair(2,45)', 'chair(2,46)', 'chair(2,47)', 'chair(2,48)', 'chair(2,49)', 'chair(2,50)', 'chair(2,51)', 'chair(2,52)', 'chair(2,53)', 'chair(2,54)', 'chair(2,55)', 'chair(2,56)', 'chair(2,57)', 'chair(2,58)', 'chair(2,59)', 'chair(2,60)', 'chair(2,61)', 'chair(2,62)', 'chair(2,63)', 'chair(2,64)', 'chair(2,65)', 'chair(2,66)', 'chair(2,67)', 'chair(2,68)', 'chair(2,69)', 'chair(2,70)', 'chair(2,71)', 'chair(2,72)', 'chair(2,73)', 'chair(2,74)', 'chair(2,75)', 'chair(2,76)', 'chair(2,77)', 'chair(2,78)', 'chair(2,79)', 'chair(2,80)', 'chair(2,81)', 'chair(2,82)', 'chair(2,83)', 'chair(2,84)', 'chair(2,85)', 'chair(2,86)', 'chair(2,87)', 'chair(2,88)', 'chair(2,89)', 'chair(2,90)', 'chair(2,91)', 'chair(2,92)', 'chair(2,93)', 'chair(2,94)', 'chair(2,95)', 'chair(2,96)', 'chair(2,97)', 'chair(2,98)', 'chair(2,99)', 'chair(2,100)', 'chair(3,1)', 'chair(3,2)', 'chair(3,3)', 'chair(3,4)', 'chair(3,5)', 'chair(3,6)', 'chair(3,7)', 'chair(3,8)', 'chair(3,9)', 'chair(3,10)', 'chair(3,11)', 'chair(3,12)', 'chair(3,13)', 'chair(3,14)', 'chair(3,15)', 'chair(3,16)', 'chair(3,17)', 'chair(3,18)', 'chair(3,19)', 'chair(3,20)', 'chair(3,21)', 'chair(3,22)', 'chair(3,23)', 'chair(3,24)', 'chair(3,25)', 'chair(3,26)', 'chair(3,27)', 'chair(3,28)', 'chair(3,29)', 'chair(3,30)', 'chair(3,31)', 'chair(3,32)', 'chair(3,33)', 'chair(3,34)', 'chair(3,35)', 'chair(3,36)', 'chair(3,37)', 'chair(3,38)', 'chair(3,39)', 'chair(3,40)', 'chair(3,41)', 'chair(3,42)', 'chair(3,43)', 'chair(3,44)', 'chair(3,45)', 'chair(3,46)', 'chair(3,47)', 'chair(3,48)', 'chair(3,49)', 'chair(3,50)', 'chair(3,51)', 'chair(3,52)', 'chair(3,53)', 'chair(3,54)', 'chair(3,55)', 'chair(3,56)', 'chair(3,57)', 'chair(3,58)', 'chair(3,59)', 'chair(3,60)', 'chair(3,61)', 'chair(3,62)', 'chair(3,63)', 'chair(3,64)', 'chair(3,65)', 'chair(3,66)', 'chair(3,67)', 'chair(3,68)', 'chair(3,69)', 'chair(3,70)', 'chair(3,71)', 'chair(3,72)', 'chair(3,73)', 'chair(3,74)', 'chair(3,75)', 'chair(3,76)', 'chair(3,77)', 'chair(3,78)', 'chair(3,79)', 'chair(3,80)', 'chair(3,81)', 'chair(3,82)', 'chair(3,83)', 'chair(3,84)', 'chair(3,85)', 'chair(3,86)', 'chair(3,87)', 'chair(3,88)', 'chair(3,89)', 'chair(3,90)', 'chair(3,91)', 'chair(3,92)', 'chair(3,93)', 'chair(3,94)', 'chair(3,95)', 'chair(3,96)', 'chair(3,97)', 'chair(3,98)', 'chair(3,99)', 'chair(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['chair(1,1)', 'chair(1,2)', 'chair(1,3)', 'chair(1,4)', 'chair(1,5)', 'chair(1,6)', 'chair(1,7)', 'chair(1,8)', 'chair(1,9)', 'chair(1,10)', 'chair(1,11)', 'chair(1,12)', 'chair(1,13)', 'chair(1,14)', 'chair(1,15)', 'chair(1,16)', 'chair(1,17)', 'chair(1,18)', 'chair(1,19)', 'chair(1,20)', 'chair(1,21)', 'chair(1,22)', 'chair(1,23)', 'chair(1,24)', 'chair(1,25)', 'chair(1,26)', 'chair(1,27)', 'chair(1,28)', 'chair(1,29)', 'chair(1,30)', 'chair(1,31)', 'chair(1,32)', 'chair(1,33)', 'chair(1,34)', 'chair(1,35)', 'chair(1,36)', 'chair(1,37)', 'chair(1,38)', 'chair(1,39)', 'chair(1,40)', 'chair(1,41)', 'chair(1,42)', 'chair(1,43)', 'chair(1,44)', 'chair(1,45)', 'chair(1,46)', 'chair(1,47)', 'chair(1,48)', 'chair(1,49)', 'chair(1,50)', 'chair(1,51)', 'chair(1,52)', 'chair(1,53)', 'chair(1,54)', 'chair(1,55)', 'chair(1,56)', 'chair(1,57)', 'chair(1,58)', 'chair(1,59)', 'chair(1,60)', 'chair(1,61)', 'chair(1,62)', 'chair(1,63)', 'chair(1,64)', 'chair(1,65)', 'chair(1,66)', 'chair(1,67)', 'chair(1,68)', 'chair(1,69)', 'chair(1,70)', 'chair(1,71)', 'chair(1,72)', 'chair(1,73)', 'chair(1,74)', 'chair(1,75)', 'chair(1,76)', 'chair(1,77)', 'chair(1,78)', 'chair(1,79)', 'chair(1,80)', 'chair(1,81)', 'chair(1,82)', 'chair(1,83)', 'chair(1,84)', 'chair(1,85)', 'chair(1,86)', 'chair(1,87)', 'chair(1,88)', 'chair(1,89)', 'chair(1,90)', 'chair(1,91)', 'chair(1,92)', 'chair(1,93)', 'chair(1,94)', 'chair(1,95)', 'chair(1,96)', 'chair(1,97)', 'chair(1,98)', 'chair(1,99)', 'chair(1,100)', 'chair(2,1)', 'chair(2,2)', 'chair(2,3)', 'chair(2,4)', 'chair(2,5)', 'chair(2,6)', 'chair(2,7)', 'chair(2,8)', 'chair(2,9)', 'chair(2,10)', 'chair(2,11)', 'chair(2,12)', 'chair(2,13)', 'chair(2,14)', 'chair(2,15)', 'chair(2,16)', 'chair(2,17)', 'chair(2,18)', 'chair(2,19)', 'chair(2,20)', 'chair(2,21)', 'chair(2,22)', 'chair(2,23)', 'chair(2,24)', 'chair(2,25)', 'chair(2,26)', 'chair(2,27)', 'chair(2,28)', 'chair(2,29)', 'chair(2,30)', 'chair(2,31)', 'chair(2,32)', 'chair(2,33)', 'chair(2,34)', 'chair(2,35)', 'chair(2,36)', 'chair(2,37)', 'chair(2,38)', 'chair(2,39)', 'chair(2,40)', 'chair(2,41)', 'chair(2,42)', 'chair(2,43)', 'chair(2,44)', 'chair(2,45)', 'chair(2,46)', 'chair(2,47)', 'chair(2,48)', 'chair(2,49)', 'chair(2,50)', 'chair(2,51)', 'chair(2,52)', 'chair(2,53)', 'chair(2,54)', 'chair(2,55)', 'chair(2,56)', 'chair(2,57)', 'chair(2,58)', 'chair(2,59)', 'chair(2,60)', 'chair(2,61)', 'chair(2,62)', 'chair(2,63)', 'chair(2,64)', 'chair(2,65)', 'chair(2,66)', 'chair(2,67)', 'chair(2,68)', 'chair(2,69)', 'chair(2,70)', 'chair(2,71)', 'chair(2,72)', 'chair(2,73)', 'chair(2,74)', 'chair(2,75)', 'chair(2,76)', 'chair(2,77)', 'chair(2,78)', 'chair(2,79)', 'chair(2,80)', 'chair(2,81)', 'chair(2,82)', 'chair(2,83)', 'chair(2,84)', 'chair(2,85)', 'chair(2,86)', 'chair(2,87)', 'chair(2,88)', 'chair(2,89)', 'chair(2,90)', 'chair(2,91)', 'chair(2,92)', 'chair(2,93)', 'chair(2,94)', 'chair(2,95)', 'chair(2,96)', 'chair(2,97)', 'chair(2,98)', 'chair(2,99)', 'chair(2,100)', 'chair(3,1)', 'chair(3,2)', 'chair(3,3)', 'chair(3,4)', 'chair(3,5)', 'chair(3,6)', 'chair(3,7)', 'chair(3,8)', 'chair(3,9)', 'chair(3,10)', 'chair(3,11)', 'chair(3,12)', 'chair(3,13)', 'chair(3,14)', 'chair(3,15)', 'chair(3,16)', 'chair(3,17)', 'chair(3,18)', 'chair(3,19)', 'chair(3,20)', 'chair(3,21)', 'chair(3,22)', 'chair(3,23)', 'chair(3,24)', 'chair(3,25)', 'chair(3,26)', 'chair(3,27)', 'chair(3,28)', 'chair(3,29)', 'chair(3,30)', 'chair(3,31)', 'chair(3,32)', 'chair(3,33)', 'chair(3,34)', 'chair(3,35)', 'chair(3,36)', 'chair(3,37)', 'chair(3,38)', 'chair(3,39)', 'chair(3,40)', 'chair(3,41)', 'chair(3,42)', 'chair(3,43)', 'chair(3,44)', 'chair(3,45)', 'chair(3,46)', 'chair(3,47)', 'chair(3,48)', 'chair(3,49)', 'chair(3,50)', 'chair(3,51)', 'chair(3,52)', 'chair(3,53)', 'chair(3,54)', 'chair(3,55)', 'chair(3,56)', 'chair(3,57)', 'chair(3,58)', 'chair(3,59)', 'chair(3,60)', 'chair(3,61)', 'chair(3,62)', 'chair(3,63)', 'chair(3,64)', 'chair(3,65)', 'chair(3,66)', 'chair(3,67)', 'chair(3,68)', 'chair(3,69)', 'chair(3,70)', 'chair(3,71)', 'chair(3,72)', 'chair(3,73)', 'chair(3,74)', 'chair(3,75)', 'chair(3,76)', 'chair(3,77)', 'chair(3,78)', 'chair(3,79)', 'chair(3,80)', 'chair(3,81)', 'chair(3,82)', 'chair(3,83)', 'chair(3,84)', 'chair(3,85)', 'chair(3,86)', 'chair(3,87)', 'chair(3,88)', 'chair(3,89)', 'chair(3,90)', 'chair(3,91)', 'chair(3,92)', 'chair(3,93)', 'chair(3,94)', 'chair(3,95)', 'chair(3,96)', 'chair(3,97)', 'chair(3,98)', 'chair(3,99)', 'chair(3,100)', 'select(1)', 'select(2)', 'select(3)']]


234
assignment

question: 
Write an ASP solution to connect each element defined by the predicate "chicago" with a single label from "lightblue","singapore","white","cloud","owner","pink","wall","quality","darkmagenta".

answer from file: 
assign(X,"lightblue")|assign(X,"singapore")|assign(X,"white")|assign(X,"cloud")|assign(X,"owner")|assign(X,"pink")|assign(X,"wall")|assign(X,"quality")|assign(X,"darkmagenta"):-chicago(X).

parsed from model: 
assign(X,"lightblue")|assign(X,"singapore")|assign(X,"white")|assign(X,"cloud")|assign(X,"owner")|assign(X,"pink")|assign(X,"wall")|assign(X,"quality")|assign(X,"darkmagenta"):-chicago(X).

facts: 
chicago(1..5).

generated: 
Write an ASP solution to connect each element defined by the predicate "chicago" with a single label from "lightblue","singapore","white","cloud","owner","pink","wall","quality","darkmagenta".
Answer: assign(X,"lightblue")|assign(X,"singapore")|assign(X,"white")|assign(X,"cloud")|assign(X,"owner")|assign(X,"pink")|assign(X,"wall")|assign(X,"quality")|assign(X,"darkmagenta"):-chicago(X).
Explanation:
- chicago(X) checks if the element X is connected with the label "lightblue","singapore","white","cloud","owner","pink","wall","quality","darkmagenta".
- If so, it assigns the label to X.
- Otherwise, it leaves the element without any label.

unique_rules: 
['assign(X,"lightblue")|assign(X,"singapore")|assign(X,"white")|assign(X,"cloud")|assign(X,"owner")|assign(X,"pink")|assign(X,"wall")|assign(X,"quality")|assign(X,"darkmagenta"):-chicago(X).']

jaccard: 1.0

AS desired: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'chicago(5)', 'assign(1,"darkmagenta")', 'assign(2,"darkmagenta")', 'assign(3,"darkmagenta")', 'assign(4,"darkmagenta")', 'assign(5,"darkmagenta")']]
\AS obtained: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'chicago(5)', 'assign(1,"darkmagenta")', 'assign(2,"darkmagenta")', 'assign(3,"darkmagenta")', 'assign(4,"darkmagenta")', 'assign(5,"darkmagenta")']]


235
constraint

question: 
Develop an ASP application that avoids the predicate "lake" with a value of 13 being linked to the label "hair".

answer from file: 
:-assign(13,hair).

parsed from model: 
:-assign(13,hair).

facts: 
lake(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-lake(X).

generated: 
Develop an ASP application that avoids the predicate "lake" with a value of 13 being linked to the label "hair".
Answer: :-assign(13,hair).
Explanation: The predicate "bike" includes fields "ID","height","city","name","price","author","description","city","name","price","author","description","height","city","name","price","author","description","city","name","price","author","description","height","city","name","price","author","description","city","name","price","author","description","height","city","name","price","author","description","city","name","price","author","description","height","city","name","price","author","description","city","name","price","author","description","height","city","name","price","author","description","city","name","

unique_rules: 
[':-assign(13,hair).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lake(6)', 'lake(7)', 'lake(8)', 'lake(9)', 'lake(10)', 'lake(11)', 'lake(12)', 'lake(13)', 'lake(14)', 'lake(15)', 'lake(16)', 'lake(17)', 'lake(18)', 'lake(19)', 'lake(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lake(6)', 'lake(7)', 'lake(8)', 'lake(9)', 'lake(10)', 'lake(11)', 'lake(12)', 'lake(13)', 'lake(14)', 'lake(15)', 'lake(16)', 'lake(17)', 'lake(18)', 'lake(19)', 'lake(20)']]


236
combination

question: 
Produce an ASP script to generate all valid pairings of elements as represented by the predicates "flower" and "lake".

answer from file: 
combination(X,Y):-flower(X),lake(Y).

parsed from model: 
combination(X,Y):-flower(X),lake(Y).

facts: 
flower(1..4).lake(1..5).

generated: 
Produce an ASP script to generate all valid pairings of elements as represented by the predicates "flower" and "lake".
Answer: combination(X,Y):-flower(X),lake(Y).
combination(X,Y):-flower(X),not lake(Y).
combination(X,Y):-not flower(X),lake(Y).
combination(X,Y):-not flower(X),not lake(Y).

unique_rules: 
['combination(X,Y):-flower(X),lake(Y).', 'combination(X,Y):-flower(X),not lake(Y).', 'combination(X,Y):-not flower(X),lake(Y).', 'combination(X,Y):-not flower(X),not lake(Y).']

jaccard: 1.0

AS desired: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'flower(1)', 'flower(2)', 'flower(3)', 'flower(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'flower(1)', 'flower(2)', 'flower(3)', 'flower(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


237
join

question: 
Create an ASP script to define the predicate "white_singapore" that links each white to the surname of singapore, given that "white" has fields "ID","weight","strength","singaporeID" and "singapore" has fields "ID","surname".

answer from file: 
white_singapore(X,Z):-white(X,_,_,Y),singapore(Y,Z).

parsed from model: 
white_singapore(X,Z):-white(X,_,_,Y),singapore(Y,Z).

facts: 
white("ID","weight","strength","singaporeID").singapore("ID","surname").

generated: 
Create an ASP script to define the predicate "white_singapore" that links each white to the surname of singapore, given that "white" has fields "ID","weight","strength","singaporeID" and "singapore" has fields "ID","surname". Define the predicate "white_singapore" that links each white to the surname of singapore.
Answer: white_singapore(X,Z):-white(X,_,_,Y),singapore(Y,Z).
white_singapore(X,Z):-white(X,_,_,Y),singapore(X,Z).

unique_rules: 
['white_singapore(X,Z):-white(X,_,_,Y),singapore(Y,Z).', 'white_singapore(X,Z):-white(X,_,_,Y),singapore(X,Z).']

jaccard: 1.0

AS desired: [['singapore("ID","surname")', 'white("ID","weight","strength","singaporeID")']]
\AS obtained: [['singapore("ID","surname")', 'white("ID","weight","strength","singaporeID")']]


238
closure

question: 
Develop an ASP script that derives the "family" predicate through the transitive closure of the "delhi" predicate.

answer from file: 
family(X,Y):-delhi(X,Y).
family(X,Y):-delhi(X,Z),family(Z,Y).

parsed from model: 
family(X,Y):-delhi(X,Y).
family(X,Y):-delhi(X,Z),family(Z,Y).

facts: 
delhi(1..3, 1..4).

generated: 
Develop an ASP script that derives the "family" predicate through the transitive closure of the "delhi" predicate.
Answer: family(X,Y):-delhi(X,Y).
family(X,Y):-delhi(X,Z),family(Z,Y).
family(X,Y):-delhi(X,Z),not family(Z,Y).
family(X,Y):-delhi(X,Z),not family(Z,Y).
family(X,Y):-delhi(X,Y).
family(X,Y):-not delhi(X,Y).
family(X,Y):-X=Y.
family(X,Y):-X!=Y.

unique_rules: 
['family(X,Y):-delhi(X,Y).', 'family(X,Y):-delhi(X,Z),family(Z,Y).', 'family(X,Y):-delhi(X,Z),not family(Z,Y).', 'family(X,Y):-not delhi(X,Y).', 'family(X,Y):-X=Y.', 'family(X,Y):-X!=Y.']

jaccard: 1.0

AS desired: [['delhi(1,1)', 'delhi(1,2)', 'delhi(1,3)', 'delhi(1,4)', 'delhi(2,1)', 'delhi(2,2)', 'delhi(2,3)', 'delhi(2,4)', 'delhi(3,1)', 'delhi(3,2)', 'delhi(3,3)', 'delhi(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]
\AS obtained: [['delhi(1,1)', 'delhi(1,2)', 'delhi(1,3)', 'delhi(1,4)', 'delhi(2,1)', 'delhi(2,2)', 'delhi(2,3)', 'delhi(2,4)', 'delhi(3,1)', 'delhi(3,2)', 'delhi(3,3)', 'delhi(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]


239
preference

question: 
Develop an ASP code snippet to avoid linking the "quality" predicate with value "7" to "delhi". If such a link is found, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(7,"delhi").[1@1]

parsed from model: 
:~assign(7,"delhi").[1@1]

facts: 
quality(1..20).

generated: 
Develop an ASP code snippet to avoid linking the "quality" predicate with value "7" to "delhi". If such a link is found, it incurs a cost of "1" at level "1".
Answer: :~assign(7,"delhi").[1@1]
The predicate "height" includes fields "ID","city","author","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","

unique_rules: 
[':~assign(7,"delhi").[1@1]']

jaccard: 1.0

AS desired: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'quality(6)', 'quality(7)', 'quality(8)', 'quality(9)', 'quality(10)', 'quality(11)', 'quality(12)', 'quality(13)', 'quality(14)', 'quality(15)', 'quality(16)', 'quality(17)', 'quality(18)', 'quality(19)', 'quality(20)']]
\AS obtained: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'quality(6)', 'quality(7)', 'quality(8)', 'quality(9)', 'quality(10)', 'quality(11)', 'quality(12)', 'quality(13)', 'quality(14)', 'quality(15)', 'quality(16)', 'quality(17)', 'quality(18)', 'quality(19)', 'quality(20)']]


240
filtering

question: 
Formulate an ASP application to fetch all values tied to the predicate "barcelona" and labeled as "storm".

answer from file: 
select(X):-barcelona(X,"storm").

parsed from model: 
select(X):-barcelona(X,"storm").

facts: 
barcelona(1..5, "storm").

generated: 
Formulate an ASP application to fetch all values tied to the predicate "barcelona" and labeled as "storm".
Answer: select(X):-barcelona(X,"storm").
select(X):-barcelona(X,"author").
select(X):-barcelona(X,"moto").
select(X):-barcelona(X,"city").
retum(X):-select(X).

unique_rules: 
['select(X):-barcelona(X,"storm").', 'select(X):-barcelona(X,"author").', 'select(X):-barcelona(X,"moto").', 'select(X):-barcelona(X,"city").', 'retum(X):-select(X).']

jaccard: 1.0

AS desired: [['barcelona(1,"storm")', 'barcelona(2,"storm")', 'barcelona(3,"storm")', 'barcelona(4,"storm")', 'barcelona(5,"storm")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['barcelona(1,"storm")', 'barcelona(2,"storm")', 'barcelona(3,"storm")', 'barcelona(4,"storm")', 'barcelona(5,"storm")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


241
negative_filtering

question: 
Design an ASP solution to capture values associated with the predicate "flower" but not tied to the predicate "pink" and labeled "darkmagenta".

answer from file: 
select(X):-flower(X),not pink(X,"darkmagenta").

parsed from model: 
select(X):-flower(X),not pink(X,"darkmagenta").

facts: 
flower(1..3).pink(1,"lightblue").pink(2,"chair").pink(3,"darkmagenta").

generated: 
Design an ASP solution to capture values associated with the predicate "flower" but not tied to the predicate "pink" and labeled "darkmagenta".
Answer: select(X):-flower(X),not pink(X,"darkmagenta").
Explanation: The predicate "flower" includes values associated with the predicate "city","height","author","moto","description","name","author","city","description","height","name","author","description","name","author","city","description","height","name","author","description","name","author","city","description","height","name","author","description","name","author","city","description","height","name","author","description","name","author","city","description","height","name","author","description","name","author","city","description","height","name","author","description","name","author","city","description","height","

unique_rules: 
['select(X):-flower(X),not pink(X,"darkmagenta").']

jaccard: 1.0

AS desired: [['flower(1)', 'flower(2)', 'flower(3)', 'pink(1,"lightblue")', 'pink(2,"chair")', 'pink(3,"darkmagenta")', 'select(1)', 'select(2)']]
\AS obtained: [['flower(1)', 'flower(2)', 'flower(3)', 'pink(1,"lightblue")', 'pink(2,"chair")', 'pink(3,"darkmagenta")', 'select(1)', 'select(2)']]


242
numeric_filtering

question: 
Develop an ASP program to gather all values linked to the predicate "desk" with a value different than 72.

answer from file: 
select(X):-desk(X,C),C!=72.

parsed from model: 
select(X):-desk(X,C),C!=72.

facts: 
desk(1..3, 1..100).

generated: 
Develop an ASP program to gather all values linked to the predicate "desk" with a value different than 72.
Answer: select(X):-desk(X,C),C!=72.
select(X):-desk(X,C),C==72.

unique_rules: 
['select(X):-desk(X,C),C!=72.', 'select(X):-desk(X,C),C==72.']

jaccard: 1.0

AS desired: [['desk(1,1)', 'desk(1,2)', 'desk(1,3)', 'desk(1,4)', 'desk(1,5)', 'desk(1,6)', 'desk(1,7)', 'desk(1,8)', 'desk(1,9)', 'desk(1,10)', 'desk(1,11)', 'desk(1,12)', 'desk(1,13)', 'desk(1,14)', 'desk(1,15)', 'desk(1,16)', 'desk(1,17)', 'desk(1,18)', 'desk(1,19)', 'desk(1,20)', 'desk(1,21)', 'desk(1,22)', 'desk(1,23)', 'desk(1,24)', 'desk(1,25)', 'desk(1,26)', 'desk(1,27)', 'desk(1,28)', 'desk(1,29)', 'desk(1,30)', 'desk(1,31)', 'desk(1,32)', 'desk(1,33)', 'desk(1,34)', 'desk(1,35)', 'desk(1,36)', 'desk(1,37)', 'desk(1,38)', 'desk(1,39)', 'desk(1,40)', 'desk(1,41)', 'desk(1,42)', 'desk(1,43)', 'desk(1,44)', 'desk(1,45)', 'desk(1,46)', 'desk(1,47)', 'desk(1,48)', 'desk(1,49)', 'desk(1,50)', 'desk(1,51)', 'desk(1,52)', 'desk(1,53)', 'desk(1,54)', 'desk(1,55)', 'desk(1,56)', 'desk(1,57)', 'desk(1,58)', 'desk(1,59)', 'desk(1,60)', 'desk(1,61)', 'desk(1,62)', 'desk(1,63)', 'desk(1,64)', 'desk(1,65)', 'desk(1,66)', 'desk(1,67)', 'desk(1,68)', 'desk(1,69)', 'desk(1,70)', 'desk(1,71)', 'desk(1,72)', 'desk(1,73)', 'desk(1,74)', 'desk(1,75)', 'desk(1,76)', 'desk(1,77)', 'desk(1,78)', 'desk(1,79)', 'desk(1,80)', 'desk(1,81)', 'desk(1,82)', 'desk(1,83)', 'desk(1,84)', 'desk(1,85)', 'desk(1,86)', 'desk(1,87)', 'desk(1,88)', 'desk(1,89)', 'desk(1,90)', 'desk(1,91)', 'desk(1,92)', 'desk(1,93)', 'desk(1,94)', 'desk(1,95)', 'desk(1,96)', 'desk(1,97)', 'desk(1,98)', 'desk(1,99)', 'desk(1,100)', 'desk(2,1)', 'desk(2,2)', 'desk(2,3)', 'desk(2,4)', 'desk(2,5)', 'desk(2,6)', 'desk(2,7)', 'desk(2,8)', 'desk(2,9)', 'desk(2,10)', 'desk(2,11)', 'desk(2,12)', 'desk(2,13)', 'desk(2,14)', 'desk(2,15)', 'desk(2,16)', 'desk(2,17)', 'desk(2,18)', 'desk(2,19)', 'desk(2,20)', 'desk(2,21)', 'desk(2,22)', 'desk(2,23)', 'desk(2,24)', 'desk(2,25)', 'desk(2,26)', 'desk(2,27)', 'desk(2,28)', 'desk(2,29)', 'desk(2,30)', 'desk(2,31)', 'desk(2,32)', 'desk(2,33)', 'desk(2,34)', 'desk(2,35)', 'desk(2,36)', 'desk(2,37)', 'desk(2,38)', 'desk(2,39)', 'desk(2,40)', 'desk(2,41)', 'desk(2,42)', 'desk(2,43)', 'desk(2,44)', 'desk(2,45)', 'desk(2,46)', 'desk(2,47)', 'desk(2,48)', 'desk(2,49)', 'desk(2,50)', 'desk(2,51)', 'desk(2,52)', 'desk(2,53)', 'desk(2,54)', 'desk(2,55)', 'desk(2,56)', 'desk(2,57)', 'desk(2,58)', 'desk(2,59)', 'desk(2,60)', 'desk(2,61)', 'desk(2,62)', 'desk(2,63)', 'desk(2,64)', 'desk(2,65)', 'desk(2,66)', 'desk(2,67)', 'desk(2,68)', 'desk(2,69)', 'desk(2,70)', 'desk(2,71)', 'desk(2,72)', 'desk(2,73)', 'desk(2,74)', 'desk(2,75)', 'desk(2,76)', 'desk(2,77)', 'desk(2,78)', 'desk(2,79)', 'desk(2,80)', 'desk(2,81)', 'desk(2,82)', 'desk(2,83)', 'desk(2,84)', 'desk(2,85)', 'desk(2,86)', 'desk(2,87)', 'desk(2,88)', 'desk(2,89)', 'desk(2,90)', 'desk(2,91)', 'desk(2,92)', 'desk(2,93)', 'desk(2,94)', 'desk(2,95)', 'desk(2,96)', 'desk(2,97)', 'desk(2,98)', 'desk(2,99)', 'desk(2,100)', 'desk(3,1)', 'desk(3,2)', 'desk(3,3)', 'desk(3,4)', 'desk(3,5)', 'desk(3,6)', 'desk(3,7)', 'desk(3,8)', 'desk(3,9)', 'desk(3,10)', 'desk(3,11)', 'desk(3,12)', 'desk(3,13)', 'desk(3,14)', 'desk(3,15)', 'desk(3,16)', 'desk(3,17)', 'desk(3,18)', 'desk(3,19)', 'desk(3,20)', 'desk(3,21)', 'desk(3,22)', 'desk(3,23)', 'desk(3,24)', 'desk(3,25)', 'desk(3,26)', 'desk(3,27)', 'desk(3,28)', 'desk(3,29)', 'desk(3,30)', 'desk(3,31)', 'desk(3,32)', 'desk(3,33)', 'desk(3,34)', 'desk(3,35)', 'desk(3,36)', 'desk(3,37)', 'desk(3,38)', 'desk(3,39)', 'desk(3,40)', 'desk(3,41)', 'desk(3,42)', 'desk(3,43)', 'desk(3,44)', 'desk(3,45)', 'desk(3,46)', 'desk(3,47)', 'desk(3,48)', 'desk(3,49)', 'desk(3,50)', 'desk(3,51)', 'desk(3,52)', 'desk(3,53)', 'desk(3,54)', 'desk(3,55)', 'desk(3,56)', 'desk(3,57)', 'desk(3,58)', 'desk(3,59)', 'desk(3,60)', 'desk(3,61)', 'desk(3,62)', 'desk(3,63)', 'desk(3,64)', 'desk(3,65)', 'desk(3,66)', 'desk(3,67)', 'desk(3,68)', 'desk(3,69)', 'desk(3,70)', 'desk(3,71)', 'desk(3,72)', 'desk(3,73)', 'desk(3,74)', 'desk(3,75)', 'desk(3,76)', 'desk(3,77)', 'desk(3,78)', 'desk(3,79)', 'desk(3,80)', 'desk(3,81)', 'desk(3,82)', 'desk(3,83)', 'desk(3,84)', 'desk(3,85)', 'desk(3,86)', 'desk(3,87)', 'desk(3,88)', 'desk(3,89)', 'desk(3,90)', 'desk(3,91)', 'desk(3,92)', 'desk(3,93)', 'desk(3,94)', 'desk(3,95)', 'desk(3,96)', 'desk(3,97)', 'desk(3,98)', 'desk(3,99)', 'desk(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['desk(1,1)', 'desk(1,2)', 'desk(1,3)', 'desk(1,4)', 'desk(1,5)', 'desk(1,6)', 'desk(1,7)', 'desk(1,8)', 'desk(1,9)', 'desk(1,10)', 'desk(1,11)', 'desk(1,12)', 'desk(1,13)', 'desk(1,14)', 'desk(1,15)', 'desk(1,16)', 'desk(1,17)', 'desk(1,18)', 'desk(1,19)', 'desk(1,20)', 'desk(1,21)', 'desk(1,22)', 'desk(1,23)', 'desk(1,24)', 'desk(1,25)', 'desk(1,26)', 'desk(1,27)', 'desk(1,28)', 'desk(1,29)', 'desk(1,30)', 'desk(1,31)', 'desk(1,32)', 'desk(1,33)', 'desk(1,34)', 'desk(1,35)', 'desk(1,36)', 'desk(1,37)', 'desk(1,38)', 'desk(1,39)', 'desk(1,40)', 'desk(1,41)', 'desk(1,42)', 'desk(1,43)', 'desk(1,44)', 'desk(1,45)', 'desk(1,46)', 'desk(1,47)', 'desk(1,48)', 'desk(1,49)', 'desk(1,50)', 'desk(1,51)', 'desk(1,52)', 'desk(1,53)', 'desk(1,54)', 'desk(1,55)', 'desk(1,56)', 'desk(1,57)', 'desk(1,58)', 'desk(1,59)', 'desk(1,60)', 'desk(1,61)', 'desk(1,62)', 'desk(1,63)', 'desk(1,64)', 'desk(1,65)', 'desk(1,66)', 'desk(1,67)', 'desk(1,68)', 'desk(1,69)', 'desk(1,70)', 'desk(1,71)', 'desk(1,72)', 'desk(1,73)', 'desk(1,74)', 'desk(1,75)', 'desk(1,76)', 'desk(1,77)', 'desk(1,78)', 'desk(1,79)', 'desk(1,80)', 'desk(1,81)', 'desk(1,82)', 'desk(1,83)', 'desk(1,84)', 'desk(1,85)', 'desk(1,86)', 'desk(1,87)', 'desk(1,88)', 'desk(1,89)', 'desk(1,90)', 'desk(1,91)', 'desk(1,92)', 'desk(1,93)', 'desk(1,94)', 'desk(1,95)', 'desk(1,96)', 'desk(1,97)', 'desk(1,98)', 'desk(1,99)', 'desk(1,100)', 'desk(2,1)', 'desk(2,2)', 'desk(2,3)', 'desk(2,4)', 'desk(2,5)', 'desk(2,6)', 'desk(2,7)', 'desk(2,8)', 'desk(2,9)', 'desk(2,10)', 'desk(2,11)', 'desk(2,12)', 'desk(2,13)', 'desk(2,14)', 'desk(2,15)', 'desk(2,16)', 'desk(2,17)', 'desk(2,18)', 'desk(2,19)', 'desk(2,20)', 'desk(2,21)', 'desk(2,22)', 'desk(2,23)', 'desk(2,24)', 'desk(2,25)', 'desk(2,26)', 'desk(2,27)', 'desk(2,28)', 'desk(2,29)', 'desk(2,30)', 'desk(2,31)', 'desk(2,32)', 'desk(2,33)', 'desk(2,34)', 'desk(2,35)', 'desk(2,36)', 'desk(2,37)', 'desk(2,38)', 'desk(2,39)', 'desk(2,40)', 'desk(2,41)', 'desk(2,42)', 'desk(2,43)', 'desk(2,44)', 'desk(2,45)', 'desk(2,46)', 'desk(2,47)', 'desk(2,48)', 'desk(2,49)', 'desk(2,50)', 'desk(2,51)', 'desk(2,52)', 'desk(2,53)', 'desk(2,54)', 'desk(2,55)', 'desk(2,56)', 'desk(2,57)', 'desk(2,58)', 'desk(2,59)', 'desk(2,60)', 'desk(2,61)', 'desk(2,62)', 'desk(2,63)', 'desk(2,64)', 'desk(2,65)', 'desk(2,66)', 'desk(2,67)', 'desk(2,68)', 'desk(2,69)', 'desk(2,70)', 'desk(2,71)', 'desk(2,72)', 'desk(2,73)', 'desk(2,74)', 'desk(2,75)', 'desk(2,76)', 'desk(2,77)', 'desk(2,78)', 'desk(2,79)', 'desk(2,80)', 'desk(2,81)', 'desk(2,82)', 'desk(2,83)', 'desk(2,84)', 'desk(2,85)', 'desk(2,86)', 'desk(2,87)', 'desk(2,88)', 'desk(2,89)', 'desk(2,90)', 'desk(2,91)', 'desk(2,92)', 'desk(2,93)', 'desk(2,94)', 'desk(2,95)', 'desk(2,96)', 'desk(2,97)', 'desk(2,98)', 'desk(2,99)', 'desk(2,100)', 'desk(3,1)', 'desk(3,2)', 'desk(3,3)', 'desk(3,4)', 'desk(3,5)', 'desk(3,6)', 'desk(3,7)', 'desk(3,8)', 'desk(3,9)', 'desk(3,10)', 'desk(3,11)', 'desk(3,12)', 'desk(3,13)', 'desk(3,14)', 'desk(3,15)', 'desk(3,16)', 'desk(3,17)', 'desk(3,18)', 'desk(3,19)', 'desk(3,20)', 'desk(3,21)', 'desk(3,22)', 'desk(3,23)', 'desk(3,24)', 'desk(3,25)', 'desk(3,26)', 'desk(3,27)', 'desk(3,28)', 'desk(3,29)', 'desk(3,30)', 'desk(3,31)', 'desk(3,32)', 'desk(3,33)', 'desk(3,34)', 'desk(3,35)', 'desk(3,36)', 'desk(3,37)', 'desk(3,38)', 'desk(3,39)', 'desk(3,40)', 'desk(3,41)', 'desk(3,42)', 'desk(3,43)', 'desk(3,44)', 'desk(3,45)', 'desk(3,46)', 'desk(3,47)', 'desk(3,48)', 'desk(3,49)', 'desk(3,50)', 'desk(3,51)', 'desk(3,52)', 'desk(3,53)', 'desk(3,54)', 'desk(3,55)', 'desk(3,56)', 'desk(3,57)', 'desk(3,58)', 'desk(3,59)', 'desk(3,60)', 'desk(3,61)', 'desk(3,62)', 'desk(3,63)', 'desk(3,64)', 'desk(3,65)', 'desk(3,66)', 'desk(3,67)', 'desk(3,68)', 'desk(3,69)', 'desk(3,70)', 'desk(3,71)', 'desk(3,72)', 'desk(3,73)', 'desk(3,74)', 'desk(3,75)', 'desk(3,76)', 'desk(3,77)', 'desk(3,78)', 'desk(3,79)', 'desk(3,80)', 'desk(3,81)', 'desk(3,82)', 'desk(3,83)', 'desk(3,84)', 'desk(3,85)', 'desk(3,86)', 'desk(3,87)', 'desk(3,88)', 'desk(3,89)', 'desk(3,90)', 'desk(3,91)', 'desk(3,92)', 'desk(3,93)', 'desk(3,94)', 'desk(3,95)', 'desk(3,96)', 'desk(3,97)', 'desk(3,98)', 'desk(3,99)', 'desk(3,100)', 'select(1)', 'select(2)', 'select(3)']]


243
assignment

question: 
Design an ASP script to connect each element, as determined by the predicate "desk", with one label from "cosenza","toronto","butterfly","flower","strength","hair","barcelona","wall".

answer from file: 
assign(X,"cosenza")|assign(X,"toronto")|assign(X,"butterfly")|assign(X,"flower")|assign(X,"strength")|assign(X,"hair")|assign(X,"barcelona")|assign(X,"wall"):-desk(X).

parsed from model: 
assign(X,"cosenza")|assign(X,"toronto")|assign(X,"butterfly")|assign(X,"flower")|assign(X,"strength")|assign(X,"hair")|assign(X,"barcelona")|assign(X,"wall"):-desk(X).

facts: 
desk(1..5).

generated: 
Design an ASP script to connect each element, as determined by the predicate "desk", with one label from "cosenza","toronto","butterfly","flower","strength","hair","barcelona","wall".
Answer: assign(X,"cosenza")|assign(X,"toronto")|assign(X,"butterfly")|assign(X,"flower")|assign(X,"strength")|assign(X,"hair")|assign(X,"barcelona")|assign(X,"wall"):-desk(X).
assign(X,"city")|assign(X,"author")|assign(X,"description"):-desk(X).
The predicate "desk" includes fields "ID","city","author","description","height","name","price","author","description","height","name","city","author","description","height","name","price","author","description","height","name","city","author","description","height","name

unique_rules: 
['assign(X,"cosenza")|assign(X,"toronto")|assign(X,"butterfly")|assign(X,"flower")|assign(X,"strength")|assign(X,"hair")|assign(X,"barcelona")|assign(X,"wall"):-desk(X).', 'assign(X,"city")|assign(X,"author")|assign(X,"description"):-desk(X).']

jaccard: 1.0

AS desired: [['desk(1)', 'desk(2)', 'desk(3)', 'desk(4)', 'desk(5)', 'assign(1,"wall")', 'assign(2,"wall")', 'assign(3,"barcelona")', 'assign(4,"wall")', 'assign(5,"wall")']]
\AS obtained: [['desk(1)', 'desk(2)', 'desk(3)', 'desk(4)', 'desk(5)', 'assign(1,"wall")', 'assign(2,"wall")', 'assign(3,"barcelona")', 'assign(4,"wall")', 'assign(5,"wall")']]


244
constraint

question: 
Formulate an ASP code that ensures the "desk" predicate having value 6 is not connected to the label "desk".

answer from file: 
:-assign(6,desk).

parsed from model: 
:-assign(6,desk).

facts: 
desk(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-desk(X).

generated: 
Formulate an ASP code that ensures the "desk" predicate having value 6 is not connected to the label "desk".
Answer: :-assign(6,desk).
Explanation: The predicate "bike" includes fields "ID","height","city","description","name","author","city","description","name","height","price","author","description","city","name","height","description","name","price","author","city","description","name","height","price","author","description","city","name","height","description","name","price","author","city","description","name","height","price","author","description","city","name","height","description","name","price","author","city","description","name","height","price","author","description","city","name","height","description","name","price","author","city","description","name

unique_rules: 
[':-assign(6,desk).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'desk(1)', 'desk(2)', 'desk(3)', 'desk(4)', 'desk(5)', 'desk(6)', 'desk(7)', 'desk(8)', 'desk(9)', 'desk(10)', 'desk(11)', 'desk(12)', 'desk(13)', 'desk(14)', 'desk(15)', 'desk(16)', 'desk(17)', 'desk(18)', 'desk(19)', 'desk(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'desk(1)', 'desk(2)', 'desk(3)', 'desk(4)', 'desk(5)', 'desk(6)', 'desk(7)', 'desk(8)', 'desk(9)', 'desk(10)', 'desk(11)', 'desk(12)', 'desk(13)', 'desk(14)', 'desk(15)', 'desk(16)', 'desk(17)', 'desk(18)', 'desk(19)', 'desk(20)']]


245
combination

question: 
Craft an ASP application to list valid combinations of elements between the predicates "white" and "pink".

answer from file: 
combination(X,Y):-white(X),pink(Y).

parsed from model: 
combination(X,Y):-white(X),pink(Y).

facts: 
white(1..4).pink(1..5).

generated: 
Craft an ASP application to list valid combinations of elements between the predicates "white" and "pink".
Answer: combination(X,Y):-white(X),pink(Y).
combination(X,Y):-white(X),not pink(Y).
combination(X,Y):-not white(X),pink(Y).
combination(X,Y):-not white(X),not pink(Y).

unique_rules: 
['combination(X,Y):-white(X),pink(Y).', 'combination(X,Y):-white(X),not pink(Y).', 'combination(X,Y):-not white(X),pink(Y).', 'combination(X,Y):-not white(X),not pink(Y).']

jaccard: 1.0

AS desired: [['pink(1)', 'pink(2)', 'pink(3)', 'pink(4)', 'pink(5)', 'white(1)', 'white(2)', 'white(3)', 'white(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['pink(1)', 'pink(2)', 'pink(3)', 'pink(4)', 'pink(5)', 'white(1)', 'white(2)', 'white(3)', 'white(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


246
join

question: 
Develop an ASP program to solve the problem by creating the predicate "desk_roof" that links each desk to the weight of roof", with "desk" having fields "ID","roofID","strength","hair","quality" and "roof" having fields "ID","weight".

answer from file: 
desk_roof(X,Z):-desk(X,Y,_,_,_),roof(Y,Z).

parsed from model: 
desk_roof(X,Z):-desk(X,Y,_,_,_),roof(Y,Z).

facts: 
desk("ID","roofID","strength","hair","quality").roof("ID","weight").

generated: 
Develop an ASP program to solve the problem by creating the predicate "desk_roof" that links each desk to the weight of roof", with "desk" having fields "ID","roofID","strength","hair","quality" and "roof" having fields "ID","weight". Define the predicate "desk_roof" that links each desk to the weight of roof".
Answer: desk_roof(X,Z):-desk(X,Y,_,_,_),roof(Y,Z).
desk_roof(X,Z):-desk(X,Y,_,_,_),not roof(Y,Z).
desk(X,Y,_,_,_)|not roof(Y,Z).

unique_rules: 
['desk_roof(X,Z):-desk(X,Y,_,_,_),roof(Y,Z).', 'desk_roof(X,Z):-desk(X,Y,_,_,_),not roof(Y,Z).']

jaccard: 1.0

AS desired: [['roof("ID","weight")', 'desk("ID","roofID","strength","hair","quality")']]
\AS obtained: [['roof("ID","weight")', 'desk("ID","roofID","strength","hair","quality")']]


247
closure

question: 
Formulate an ASP code snippet to establish the "loops" predicate by computing the transitive closure of the "wall" predicate.

answer from file: 
loops(X,Y):-wall(X,Y).
loops(X,Y):-wall(X,Z),loops(Z,Y).

parsed from model: 
loops(X,Y):-wall(X,Y).
loops(X,Y):-wall(X,Z),loops(Z,Y).

facts: 
wall(1..3, 1..4).

generated: 
Formulate an ASP code snippet to establish the "loops" predicate by computing the transitive closure of the "wall" predicate.
Answer: loops(X,Y):-wall(X,Y).
loops(X,Y):-wall(X,Z),loops(Z,Y).
loops(X,Y):-wall(X,Z),not walls(Z,Y).
walls(X,Y):-city(X,Y).
walls(X,Y):-city(X,Z),loops(Z,Y).
walls(X,Y):-city(X,Z),not walls(Z,Y).

unique_rules: 
['loops(X,Y):-wall(X,Y).', 'loops(X,Y):-wall(X,Z),loops(Z,Y).', 'loops(X,Y):-wall(X,Z),not walls(Z,Y).', 'walls(X,Y):-city(X,Y).', 'walls(X,Y):-city(X,Z),loops(Z,Y).', 'walls(X,Y):-city(X,Z),not walls(Z,Y).']

jaccard: 1.0

AS desired: [['wall(1,1)', 'wall(1,2)', 'wall(1,3)', 'wall(1,4)', 'wall(2,1)', 'wall(2,2)', 'wall(2,3)', 'wall(2,4)', 'wall(3,1)', 'wall(3,2)', 'wall(3,3)', 'wall(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]
\AS obtained: [['wall(1,1)', 'wall(1,2)', 'wall(1,3)', 'wall(1,4)', 'wall(2,1)', 'wall(2,2)', 'wall(2,3)', 'wall(2,4)', 'wall(3,1)', 'wall(3,2)', 'wall(3,3)', 'wall(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]


248
preference

question: 
Develop an ASP application to avoid the "moscow" predicate with value "11" being associated with "pink", incurring a cost of "1" at level "1" if found.

answer from file: 
:~assign(11,"pink").[1@1]

parsed from model: 
:~assign(11,"pink").[1@1]

facts: 
moscow(1..20).

generated: 
Develop an ASP application to avoid the "moscow" predicate with value "11" being associated with "pink", incurring a cost of "1" at level "1" if found.
Answer: :~assign(11,"pink").[1@1]
The predicate "moto" includes fields "ID","height","author","city","name","price","description","author","city","name","price","description","height","author","city","name","price","description","author","city","name","price","description","height","author","city","name","price","description","author","city","name","price","description","height","author","city","name","price","description","height","author","city","name","price","description","height","author","city","name","price","description","height","author","city","name","price","description","height","author","city","name","

unique_rules: 
[':~assign(11,"pink").[1@1]']

jaccard: 1.0

AS desired: [['moscow(1)', 'moscow(2)', 'moscow(3)', 'moscow(4)', 'moscow(5)', 'moscow(6)', 'moscow(7)', 'moscow(8)', 'moscow(9)', 'moscow(10)', 'moscow(11)', 'moscow(12)', 'moscow(13)', 'moscow(14)', 'moscow(15)', 'moscow(16)', 'moscow(17)', 'moscow(18)', 'moscow(19)', 'moscow(20)']]
\AS obtained: [['moscow(1)', 'moscow(2)', 'moscow(3)', 'moscow(4)', 'moscow(5)', 'moscow(6)', 'moscow(7)', 'moscow(8)', 'moscow(9)', 'moscow(10)', 'moscow(11)', 'moscow(12)', 'moscow(13)', 'moscow(14)', 'moscow(15)', 'moscow(16)', 'moscow(17)', 'moscow(18)', 'moscow(19)', 'moscow(20)']]


249
filtering

question: 
Create an ASP code to retrieve values associated with the label "strength" within the "storm" predicate.

answer from file: 
select(X):-storm(X,"strength").

parsed from model: 
select(X):-storm(X,"strength").

facts: 
storm(1..5, "strength").

generated: 
Create an ASP code to retrieve values associated with the label "strength" within the "storm" predicate.
Answer: select(X):-storm(X,"strength").
storm(X,Z):- arrivant(X,Z).
 arrivant(X,Y):-height(X,Y).
height(X,Y):-age(X,Y).

unique_rules: 
['select(X):-storm(X,"strength").', 'storm(X,Z):- arrivant(X,Z).', 'arrivant(X,Y):-height(X,Y).', 'height(X,Y):-age(X,Y).']

jaccard: 1.0

AS desired: [['storm(1,"strength")', 'storm(2,"strength")', 'storm(3,"strength")', 'storm(4,"strength")', 'storm(5,"strength")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['storm(1,"strength")', 'storm(2,"strength")', 'storm(3,"strength")', 'storm(4,"strength")', 'storm(5,"strength")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


250
negative_filtering

question: 
Produce an ASP code snippet to collect values associated with the predicate "quality" but not connected to the predicate "butterfly" and labeled "chair".

answer from file: 
select(X):-quality(X),not butterfly(X,"chair").

parsed from model: 
select(X):-quality(X),not butterfly(X,"chair").

facts: 
quality(1..3).butterfly(1,"black").butterfly(2,"chicago").butterfly(3,"laptop").

generated: 
Produce an ASP code snippet to collect values associated with the predicate "quality" but not connected to the predicate "butterfly" and labeled "chair".
Answer: select(X):-quality(X),not butterfly(X,"chair").

unique_rules: 
['select(X):-quality(X),not butterfly(X,"chair").']

jaccard: 1.0

AS desired: [['quality(1)', 'quality(2)', 'quality(3)', 'butterfly(1,"black")', 'butterfly(2,"chicago")', 'butterfly(3,"laptop")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['quality(1)', 'quality(2)', 'quality(3)', 'butterfly(1,"black")', 'butterfly(2,"chicago")', 'butterfly(3,"laptop")', 'select(1)', 'select(2)', 'select(3)']]


251
numeric_filtering

question: 
Craft an ASP program to fetch values linked to the predicate "owner" with a value different than 98.

answer from file: 
select(X):-owner(X,C),C!=98.

parsed from model: 
select(X):-owner(X,C),C!=98.

facts: 
owner(1..3, 1..100).

generated: 
Craft an ASP program to fetch values linked to the predicate "owner" with a value different than 98.
Answer: select(X):-owner(X,C),C!=98.
select(X):-owner(X,C),C==98.

unique_rules: 
['select(X):-owner(X,C),C!=98.', 'select(X):-owner(X,C),C==98.']

jaccard: 1.0

AS desired: [['owner(1,1)', 'owner(1,2)', 'owner(1,3)', 'owner(1,4)', 'owner(1,5)', 'owner(1,6)', 'owner(1,7)', 'owner(1,8)', 'owner(1,9)', 'owner(1,10)', 'owner(1,11)', 'owner(1,12)', 'owner(1,13)', 'owner(1,14)', 'owner(1,15)', 'owner(1,16)', 'owner(1,17)', 'owner(1,18)', 'owner(1,19)', 'owner(1,20)', 'owner(1,21)', 'owner(1,22)', 'owner(1,23)', 'owner(1,24)', 'owner(1,25)', 'owner(1,26)', 'owner(1,27)', 'owner(1,28)', 'owner(1,29)', 'owner(1,30)', 'owner(1,31)', 'owner(1,32)', 'owner(1,33)', 'owner(1,34)', 'owner(1,35)', 'owner(1,36)', 'owner(1,37)', 'owner(1,38)', 'owner(1,39)', 'owner(1,40)', 'owner(1,41)', 'owner(1,42)', 'owner(1,43)', 'owner(1,44)', 'owner(1,45)', 'owner(1,46)', 'owner(1,47)', 'owner(1,48)', 'owner(1,49)', 'owner(1,50)', 'owner(1,51)', 'owner(1,52)', 'owner(1,53)', 'owner(1,54)', 'owner(1,55)', 'owner(1,56)', 'owner(1,57)', 'owner(1,58)', 'owner(1,59)', 'owner(1,60)', 'owner(1,61)', 'owner(1,62)', 'owner(1,63)', 'owner(1,64)', 'owner(1,65)', 'owner(1,66)', 'owner(1,67)', 'owner(1,68)', 'owner(1,69)', 'owner(1,70)', 'owner(1,71)', 'owner(1,72)', 'owner(1,73)', 'owner(1,74)', 'owner(1,75)', 'owner(1,76)', 'owner(1,77)', 'owner(1,78)', 'owner(1,79)', 'owner(1,80)', 'owner(1,81)', 'owner(1,82)', 'owner(1,83)', 'owner(1,84)', 'owner(1,85)', 'owner(1,86)', 'owner(1,87)', 'owner(1,88)', 'owner(1,89)', 'owner(1,90)', 'owner(1,91)', 'owner(1,92)', 'owner(1,93)', 'owner(1,94)', 'owner(1,95)', 'owner(1,96)', 'owner(1,97)', 'owner(1,98)', 'owner(1,99)', 'owner(1,100)', 'owner(2,1)', 'owner(2,2)', 'owner(2,3)', 'owner(2,4)', 'owner(2,5)', 'owner(2,6)', 'owner(2,7)', 'owner(2,8)', 'owner(2,9)', 'owner(2,10)', 'owner(2,11)', 'owner(2,12)', 'owner(2,13)', 'owner(2,14)', 'owner(2,15)', 'owner(2,16)', 'owner(2,17)', 'owner(2,18)', 'owner(2,19)', 'owner(2,20)', 'owner(2,21)', 'owner(2,22)', 'owner(2,23)', 'owner(2,24)', 'owner(2,25)', 'owner(2,26)', 'owner(2,27)', 'owner(2,28)', 'owner(2,29)', 'owner(2,30)', 'owner(2,31)', 'owner(2,32)', 'owner(2,33)', 'owner(2,34)', 'owner(2,35)', 'owner(2,36)', 'owner(2,37)', 'owner(2,38)', 'owner(2,39)', 'owner(2,40)', 'owner(2,41)', 'owner(2,42)', 'owner(2,43)', 'owner(2,44)', 'owner(2,45)', 'owner(2,46)', 'owner(2,47)', 'owner(2,48)', 'owner(2,49)', 'owner(2,50)', 'owner(2,51)', 'owner(2,52)', 'owner(2,53)', 'owner(2,54)', 'owner(2,55)', 'owner(2,56)', 'owner(2,57)', 'owner(2,58)', 'owner(2,59)', 'owner(2,60)', 'owner(2,61)', 'owner(2,62)', 'owner(2,63)', 'owner(2,64)', 'owner(2,65)', 'owner(2,66)', 'owner(2,67)', 'owner(2,68)', 'owner(2,69)', 'owner(2,70)', 'owner(2,71)', 'owner(2,72)', 'owner(2,73)', 'owner(2,74)', 'owner(2,75)', 'owner(2,76)', 'owner(2,77)', 'owner(2,78)', 'owner(2,79)', 'owner(2,80)', 'owner(2,81)', 'owner(2,82)', 'owner(2,83)', 'owner(2,84)', 'owner(2,85)', 'owner(2,86)', 'owner(2,87)', 'owner(2,88)', 'owner(2,89)', 'owner(2,90)', 'owner(2,91)', 'owner(2,92)', 'owner(2,93)', 'owner(2,94)', 'owner(2,95)', 'owner(2,96)', 'owner(2,97)', 'owner(2,98)', 'owner(2,99)', 'owner(2,100)', 'owner(3,1)', 'owner(3,2)', 'owner(3,3)', 'owner(3,4)', 'owner(3,5)', 'owner(3,6)', 'owner(3,7)', 'owner(3,8)', 'owner(3,9)', 'owner(3,10)', 'owner(3,11)', 'owner(3,12)', 'owner(3,13)', 'owner(3,14)', 'owner(3,15)', 'owner(3,16)', 'owner(3,17)', 'owner(3,18)', 'owner(3,19)', 'owner(3,20)', 'owner(3,21)', 'owner(3,22)', 'owner(3,23)', 'owner(3,24)', 'owner(3,25)', 'owner(3,26)', 'owner(3,27)', 'owner(3,28)', 'owner(3,29)', 'owner(3,30)', 'owner(3,31)', 'owner(3,32)', 'owner(3,33)', 'owner(3,34)', 'owner(3,35)', 'owner(3,36)', 'owner(3,37)', 'owner(3,38)', 'owner(3,39)', 'owner(3,40)', 'owner(3,41)', 'owner(3,42)', 'owner(3,43)', 'owner(3,44)', 'owner(3,45)', 'owner(3,46)', 'owner(3,47)', 'owner(3,48)', 'owner(3,49)', 'owner(3,50)', 'owner(3,51)', 'owner(3,52)', 'owner(3,53)', 'owner(3,54)', 'owner(3,55)', 'owner(3,56)', 'owner(3,57)', 'owner(3,58)', 'owner(3,59)', 'owner(3,60)', 'owner(3,61)', 'owner(3,62)', 'owner(3,63)', 'owner(3,64)', 'owner(3,65)', 'owner(3,66)', 'owner(3,67)', 'owner(3,68)', 'owner(3,69)', 'owner(3,70)', 'owner(3,71)', 'owner(3,72)', 'owner(3,73)', 'owner(3,74)', 'owner(3,75)', 'owner(3,76)', 'owner(3,77)', 'owner(3,78)', 'owner(3,79)', 'owner(3,80)', 'owner(3,81)', 'owner(3,82)', 'owner(3,83)', 'owner(3,84)', 'owner(3,85)', 'owner(3,86)', 'owner(3,87)', 'owner(3,88)', 'owner(3,89)', 'owner(3,90)', 'owner(3,91)', 'owner(3,92)', 'owner(3,93)', 'owner(3,94)', 'owner(3,95)', 'owner(3,96)', 'owner(3,97)', 'owner(3,98)', 'owner(3,99)', 'owner(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['owner(1,1)', 'owner(1,2)', 'owner(1,3)', 'owner(1,4)', 'owner(1,5)', 'owner(1,6)', 'owner(1,7)', 'owner(1,8)', 'owner(1,9)', 'owner(1,10)', 'owner(1,11)', 'owner(1,12)', 'owner(1,13)', 'owner(1,14)', 'owner(1,15)', 'owner(1,16)', 'owner(1,17)', 'owner(1,18)', 'owner(1,19)', 'owner(1,20)', 'owner(1,21)', 'owner(1,22)', 'owner(1,23)', 'owner(1,24)', 'owner(1,25)', 'owner(1,26)', 'owner(1,27)', 'owner(1,28)', 'owner(1,29)', 'owner(1,30)', 'owner(1,31)', 'owner(1,32)', 'owner(1,33)', 'owner(1,34)', 'owner(1,35)', 'owner(1,36)', 'owner(1,37)', 'owner(1,38)', 'owner(1,39)', 'owner(1,40)', 'owner(1,41)', 'owner(1,42)', 'owner(1,43)', 'owner(1,44)', 'owner(1,45)', 'owner(1,46)', 'owner(1,47)', 'owner(1,48)', 'owner(1,49)', 'owner(1,50)', 'owner(1,51)', 'owner(1,52)', 'owner(1,53)', 'owner(1,54)', 'owner(1,55)', 'owner(1,56)', 'owner(1,57)', 'owner(1,58)', 'owner(1,59)', 'owner(1,60)', 'owner(1,61)', 'owner(1,62)', 'owner(1,63)', 'owner(1,64)', 'owner(1,65)', 'owner(1,66)', 'owner(1,67)', 'owner(1,68)', 'owner(1,69)', 'owner(1,70)', 'owner(1,71)', 'owner(1,72)', 'owner(1,73)', 'owner(1,74)', 'owner(1,75)', 'owner(1,76)', 'owner(1,77)', 'owner(1,78)', 'owner(1,79)', 'owner(1,80)', 'owner(1,81)', 'owner(1,82)', 'owner(1,83)', 'owner(1,84)', 'owner(1,85)', 'owner(1,86)', 'owner(1,87)', 'owner(1,88)', 'owner(1,89)', 'owner(1,90)', 'owner(1,91)', 'owner(1,92)', 'owner(1,93)', 'owner(1,94)', 'owner(1,95)', 'owner(1,96)', 'owner(1,97)', 'owner(1,98)', 'owner(1,99)', 'owner(1,100)', 'owner(2,1)', 'owner(2,2)', 'owner(2,3)', 'owner(2,4)', 'owner(2,5)', 'owner(2,6)', 'owner(2,7)', 'owner(2,8)', 'owner(2,9)', 'owner(2,10)', 'owner(2,11)', 'owner(2,12)', 'owner(2,13)', 'owner(2,14)', 'owner(2,15)', 'owner(2,16)', 'owner(2,17)', 'owner(2,18)', 'owner(2,19)', 'owner(2,20)', 'owner(2,21)', 'owner(2,22)', 'owner(2,23)', 'owner(2,24)', 'owner(2,25)', 'owner(2,26)', 'owner(2,27)', 'owner(2,28)', 'owner(2,29)', 'owner(2,30)', 'owner(2,31)', 'owner(2,32)', 'owner(2,33)', 'owner(2,34)', 'owner(2,35)', 'owner(2,36)', 'owner(2,37)', 'owner(2,38)', 'owner(2,39)', 'owner(2,40)', 'owner(2,41)', 'owner(2,42)', 'owner(2,43)', 'owner(2,44)', 'owner(2,45)', 'owner(2,46)', 'owner(2,47)', 'owner(2,48)', 'owner(2,49)', 'owner(2,50)', 'owner(2,51)', 'owner(2,52)', 'owner(2,53)', 'owner(2,54)', 'owner(2,55)', 'owner(2,56)', 'owner(2,57)', 'owner(2,58)', 'owner(2,59)', 'owner(2,60)', 'owner(2,61)', 'owner(2,62)', 'owner(2,63)', 'owner(2,64)', 'owner(2,65)', 'owner(2,66)', 'owner(2,67)', 'owner(2,68)', 'owner(2,69)', 'owner(2,70)', 'owner(2,71)', 'owner(2,72)', 'owner(2,73)', 'owner(2,74)', 'owner(2,75)', 'owner(2,76)', 'owner(2,77)', 'owner(2,78)', 'owner(2,79)', 'owner(2,80)', 'owner(2,81)', 'owner(2,82)', 'owner(2,83)', 'owner(2,84)', 'owner(2,85)', 'owner(2,86)', 'owner(2,87)', 'owner(2,88)', 'owner(2,89)', 'owner(2,90)', 'owner(2,91)', 'owner(2,92)', 'owner(2,93)', 'owner(2,94)', 'owner(2,95)', 'owner(2,96)', 'owner(2,97)', 'owner(2,98)', 'owner(2,99)', 'owner(2,100)', 'owner(3,1)', 'owner(3,2)', 'owner(3,3)', 'owner(3,4)', 'owner(3,5)', 'owner(3,6)', 'owner(3,7)', 'owner(3,8)', 'owner(3,9)', 'owner(3,10)', 'owner(3,11)', 'owner(3,12)', 'owner(3,13)', 'owner(3,14)', 'owner(3,15)', 'owner(3,16)', 'owner(3,17)', 'owner(3,18)', 'owner(3,19)', 'owner(3,20)', 'owner(3,21)', 'owner(3,22)', 'owner(3,23)', 'owner(3,24)', 'owner(3,25)', 'owner(3,26)', 'owner(3,27)', 'owner(3,28)', 'owner(3,29)', 'owner(3,30)', 'owner(3,31)', 'owner(3,32)', 'owner(3,33)', 'owner(3,34)', 'owner(3,35)', 'owner(3,36)', 'owner(3,37)', 'owner(3,38)', 'owner(3,39)', 'owner(3,40)', 'owner(3,41)', 'owner(3,42)', 'owner(3,43)', 'owner(3,44)', 'owner(3,45)', 'owner(3,46)', 'owner(3,47)', 'owner(3,48)', 'owner(3,49)', 'owner(3,50)', 'owner(3,51)', 'owner(3,52)', 'owner(3,53)', 'owner(3,54)', 'owner(3,55)', 'owner(3,56)', 'owner(3,57)', 'owner(3,58)', 'owner(3,59)', 'owner(3,60)', 'owner(3,61)', 'owner(3,62)', 'owner(3,63)', 'owner(3,64)', 'owner(3,65)', 'owner(3,66)', 'owner(3,67)', 'owner(3,68)', 'owner(3,69)', 'owner(3,70)', 'owner(3,71)', 'owner(3,72)', 'owner(3,73)', 'owner(3,74)', 'owner(3,75)', 'owner(3,76)', 'owner(3,77)', 'owner(3,78)', 'owner(3,79)', 'owner(3,80)', 'owner(3,81)', 'owner(3,82)', 'owner(3,83)', 'owner(3,84)', 'owner(3,85)', 'owner(3,86)', 'owner(3,87)', 'owner(3,88)', 'owner(3,89)', 'owner(3,90)', 'owner(3,91)', 'owner(3,92)', 'owner(3,93)', 'owner(3,94)', 'owner(3,95)', 'owner(3,96)', 'owner(3,97)', 'owner(3,98)', 'owner(3,99)', 'owner(3,100)', 'select(1)', 'select(2)', 'select(3)']]


252
assignment

question: 
Formulate an ASP program that links each element, as identified by the predicate "strength", with one label from "cosenza","wall","butterfly","quality","laptop","chair","barcelona","moscow","roof".

answer from file: 
assign(X,"cosenza")|assign(X,"wall")|assign(X,"butterfly")|assign(X,"quality")|assign(X,"laptop")|assign(X,"chair")|assign(X,"barcelona")|assign(X,"moscow")|assign(X,"roof"):-strength(X).

parsed from model: 
assign(X,"cosenza")|assign(X,"wall")|assign(X,"butterfly")|assign(X,"quality")|assign(X,"laptop")|assign(X,"chair")|assign(X,"barcelona")|assign(X,"moscow")|assign(X,"roof"):-strength(X).

facts: 
strength(1..5).

generated: 
Formulate an ASP program that links each element, as identified by the predicate "strength", with one label from "cosenza","wall","butterfly","quality","laptop","chair","barcelona","moscow","roof".
Answer: assign(X,"cosenza")|assign(X,"wall")|assign(X,"butterfly")|assign(X,"quality")|assign(X,"laptop")|assign(X,"chair")|assign(X,"barcelona")|assign(X,"moscow")|assign(X,"roof"):-strength(X).

unique_rules: 
['assign(X,"cosenza")|assign(X,"wall")|assign(X,"butterfly")|assign(X,"quality")|assign(X,"laptop")|assign(X,"chair")|assign(X,"barcelona")|assign(X,"moscow")|assign(X,"roof"):-strength(X).']

jaccard: 1.0

AS desired: [['strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'assign(1,"roof")', 'assign(2,"roof")', 'assign(3,"roof")', 'assign(4,"roof")', 'assign(5,"roof")']]
\AS obtained: [['strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'assign(1,"roof")', 'assign(2,"roof")', 'assign(3,"roof")', 'assign(4,"roof")', 'assign(5,"roof")']]


253
constraint

question: 
Create an ASP script to avoid associating the "storm" predicate having value 9 with the "lightblue" label.

answer from file: 
:-assign(9,lightblue).

parsed from model: 
:-assign(9,lightblue).

facts: 
storm(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-storm(X).

generated: 
Create an ASP script to avoid associating the "storm" predicate having value 9 with the "lightblue" label.
Answer: :-assign(9,lightblue).
assign(9,"green").
The predicate "green" includes the "lightblue" label.
The predicate "storm" includes the "green" label.
The predicate "green" has a value lower than 9.
The predicate "storm" has a value higher than 9.

unique_rules: 
[':-assign(9,lightblue).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'storm(1)', 'storm(2)', 'storm(3)', 'storm(4)', 'storm(5)', 'storm(6)', 'storm(7)', 'storm(8)', 'storm(9)', 'storm(10)', 'storm(11)', 'storm(12)', 'storm(13)', 'storm(14)', 'storm(15)', 'storm(16)', 'storm(17)', 'storm(18)', 'storm(19)', 'storm(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'storm(1)', 'storm(2)', 'storm(3)', 'storm(4)', 'storm(5)', 'storm(6)', 'storm(7)', 'storm(8)', 'storm(9)', 'storm(10)', 'storm(11)', 'storm(12)', 'storm(13)', 'storm(14)', 'storm(15)', 'storm(16)', 'storm(17)', 'storm(18)', 'storm(19)', 'storm(20)']]


254
combination

question: 
Compose an ASP script that generates the cross-product of elements between the predicates "owner" and "surname".

answer from file: 
combination(X,Y):-owner(X),surname(Y).

parsed from model: 
cross_product(X,Y):-owner(X),surname(Y).

facts: 
owner(1..4).surname(1..5).

generated: 
Compose an ASP script that generates the cross-product of elements between the predicates "owner" and "surname".
Answer: cross_product(X,Y):-owner(X),surname(Y).
cross_product(X,Y):-owner(X),not surname(Y).
cross_product(X,Y):-not owner(X),surname(Y).

unique_rules: 
['cross_product(X,Y):-owner(X),surname(Y).', 'cross_product(X,Y):-owner(X),not surname(Y).', 'cross_product(X,Y):-not owner(X),surname(Y).']

jaccard: 0.0

AS desired: [['surname(1)', 'surname(2)', 'surname(3)', 'surname(4)', 'surname(5)', 'owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['surname(1)', 'surname(2)', 'surname(3)', 'surname(4)', 'surname(5)', 'owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'cross_product(1,1)', 'cross_product(1,2)', 'cross_product(1,3)', 'cross_product(1,4)', 'cross_product(1,5)', 'cross_product(2,1)', 'cross_product(2,2)', 'cross_product(2,3)', 'cross_product(2,4)', 'cross_product(2,5)', 'cross_product(3,1)', 'cross_product(3,2)', 'cross_product(3,3)', 'cross_product(3,4)', 'cross_product(3,5)', 'cross_product(4,1)', 'cross_product(4,2)', 'cross_product(4,3)', 'cross_product(4,4)', 'cross_product(4,5)']]


255
join

question: 
Develop an ASP solution that defines the predicate "cloud_laptop" to link each cloud to the lake of laptop, with "cloud" having fields "ID","surname","weight","laptopID" and "laptop" having fields "ID","strength","lake".

answer from file: 
cloud_laptop(X,Z):-cloud(X,_,_,Y),laptop(Y,_,Z).

parsed from model: 
cloud_laptop(X,Z):-cloud(X,_,_,Y),laptop(Y,_,Z).

facts: 
cloud("ID","surname","weight","laptopID").laptop("ID","strength","lake").

generated: 
Develop an ASP solution that defines the predicate "cloud_laptop" to link each cloud to the lake of laptop, with "cloud" having fields "ID","surname","weight","laptopID" and "laptop" having fields "ID","strength","lake". Define the predicate "cloud_laptop" that links each cloud to the lake of laptop.
Answer: cloud_laptop(X,Z):-cloud(X,_,_,Y),laptop(Y,_,Z).
cloud_laptop(X,Z):-cloud(X,_,_,Y),not laptop(Y,Z).
cloud_laptop(X,Z):-cloud(X,_,_,Y),laptop(Y,_,Z).

unique_rules: 
['cloud_laptop(X,Z):-cloud(X,_,_,Y),laptop(Y,_,Z).', 'cloud_laptop(X,Z):-cloud(X,_,_,Y),not laptop(Y,Z).']

jaccard: 1.0

AS desired: [['cloud("ID","surname","weight","laptopID")', 'laptop("ID","strength","lake")']]
\AS obtained: [['cloud("ID","surname","weight","laptopID")', 'laptop("ID","strength","lake")']]


256
closure

question: 
Develop an ASP script that derives the "loops" predicate through the transitive closure of the "storm" predicate.

answer from file: 
loops(X,Y):-storm(X,Y).
loops(X,Y):-storm(X,Z),loops(Z,Y).

parsed from model: 
loops(X,Y):-storm(X,Y).
loops(X,Y):-storm(X,Z),loops(Z,Y).

facts: 
storm(1..3, 1..4).

generated: 
Develop an ASP script that derives the "loops" predicate through the transitive closure of the "storm" predicate.
Answer: loops(X,Y):-storm(X,Y).
loops(X,Y):-storm(X,Z),loops(Z,Y).
loops(X,Y):-not storm(X,Y).
loops(X,Y):-X==Y.
loops(X,Y):-X!=Y.

unique_rules: 
['loops(X,Y):-storm(X,Y).', 'loops(X,Y):-storm(X,Z),loops(Z,Y).', 'loops(X,Y):-not storm(X,Y).', 'loops(X,Y):-X==Y.', 'loops(X,Y):-X!=Y.']

jaccard: 1.0

AS desired: [['storm(1,1)', 'storm(1,2)', 'storm(1,3)', 'storm(1,4)', 'storm(2,1)', 'storm(2,2)', 'storm(2,3)', 'storm(2,4)', 'storm(3,1)', 'storm(3,2)', 'storm(3,3)', 'storm(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]
\AS obtained: [['storm(1,1)', 'storm(1,2)', 'storm(1,3)', 'storm(1,4)', 'storm(2,1)', 'storm(2,2)', 'storm(2,3)', 'storm(2,4)', 'storm(3,1)', 'storm(3,2)', 'storm(3,3)', 'storm(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]


257
preference

question: 
Create an ASP program that keeps the predicate "chair" with value "7" unlinked from "flower". If linked, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(7,"flower").[1@1]

parsed from model: 
:~assign(7,"flower").[1@1]

facts: 
chair(1..20).

generated: 
Create an ASP program that keeps the predicate "chair" with value "7" unlinked from "flower". If linked, it incurs a cost of "1" at level "1".
Answer: :~assign(7,"flower").[1@1]
The predicate "gray" keeps the predicate "city" with value "1" unlinked from "moto". If linked, it incurs a cost of "1" at level "1".
Answer: :~assign(1,"moto").[1@1]

unique_rules: 
[':~assign(7,"flower").[1@1]', ':~assign(1,"moto").[1@1]']

jaccard: 1.0

AS desired: [['chair(1)', 'chair(2)', 'chair(3)', 'chair(4)', 'chair(5)', 'chair(6)', 'chair(7)', 'chair(8)', 'chair(9)', 'chair(10)', 'chair(11)', 'chair(12)', 'chair(13)', 'chair(14)', 'chair(15)', 'chair(16)', 'chair(17)', 'chair(18)', 'chair(19)', 'chair(20)']]
\AS obtained: [['chair(1)', 'chair(2)', 'chair(3)', 'chair(4)', 'chair(5)', 'chair(6)', 'chair(7)', 'chair(8)', 'chair(9)', 'chair(10)', 'chair(11)', 'chair(12)', 'chair(13)', 'chair(14)', 'chair(15)', 'chair(16)', 'chair(17)', 'chair(18)', 'chair(19)', 'chair(20)']]


258
filtering

question: 
Compose an ASP program to identify values labeled as "cosenza" within the predicate "quality".

answer from file: 
select(X):-quality(X,"cosenza").

parsed from model: 
select(X):-quality(X,"cosenza").

facts: 
quality(1..5, "cosenza").

generated: 
Compose an ASP program to identify values labeled as "cosenza" within the predicate "quality".
Answer: select(X):-quality(X,"cosenza").
select(X):-quality(X,"author").
select(X):-quality(X,"moto").
select(X):-quality(X,"rome").
select(X):-quality(X,"author","moto","rome").
```

unique_rules: 
['select(X):-quality(X,"cosenza").', 'select(X):-quality(X,"author").', 'select(X):-quality(X,"moto").', 'select(X):-quality(X,"rome").', 'select(X):-quality(X,"author","moto","rome").']

jaccard: 1.0

AS desired: [['quality(1,"cosenza")', 'quality(2,"cosenza")', 'quality(3,"cosenza")', 'quality(4,"cosenza")', 'quality(5,"cosenza")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['quality(1,"cosenza")', 'quality(2,"cosenza")', 'quality(3,"cosenza")', 'quality(4,"cosenza")', 'quality(5,"cosenza")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


259
negative_filtering

question: 
Generate an ASP script to gather values linked to the predicate "singapore" but not to the predicate "cloud" and labeled "darkmagenta".

answer from file: 
select(X):-singapore(X),not cloud(X,"darkmagenta").

parsed from model: 
select(X):-singapore(X),not cloud(X,"darkmagenta").

facts: 
singapore(1..3).cloud(1,"surname").cloud(2,"toronto").cloud(3,"darkmagenta").

generated: 
Generate an ASP script to gather values linked to the predicate "singapore" but not to the predicate "cloud" and labeled "darkmagenta".
Answer: select(X):-singapore(X),not cloud(X,"darkmagenta").
```

unique_rules: 
['select(X):-singapore(X),not cloud(X,"darkmagenta").']

jaccard: 1.0

AS desired: [['singapore(1)', 'singapore(2)', 'singapore(3)', 'cloud(1,"surname")', 'cloud(2,"toronto")', 'cloud(3,"darkmagenta")', 'select(1)', 'select(2)']]
\AS obtained: [['singapore(1)', 'singapore(2)', 'singapore(3)', 'cloud(1,"surname")', 'cloud(2,"toronto")', 'cloud(3,"darkmagenta")', 'select(1)', 'select(2)']]


260
numeric_filtering

question: 
Develop an ASP application to retrieve all values connected to the predicate "strength" with a value different than 15.

answer from file: 
select(X):-strength(X,C),C!=15.

parsed from model: 
select(X):-strength(X,C),C!=15.

facts: 
strength(1..3, 1..100).

generated: 
Develop an ASP application to retrieve all values connected to the predicate "strength" with a value different than 15.
Answer: select(X):-strength(X,C),C!=15.
strength(X,C):-strength(X,C),C==15.

unique_rules: 
['select(X):-strength(X,C),C!=15.', 'strength(X,C):-strength(X,C),C==15.']

jaccard: 1.0

AS desired: [['strength(1,1)', 'strength(1,2)', 'strength(1,3)', 'strength(1,4)', 'strength(1,5)', 'strength(1,6)', 'strength(1,7)', 'strength(1,8)', 'strength(1,9)', 'strength(1,10)', 'strength(1,11)', 'strength(1,12)', 'strength(1,13)', 'strength(1,14)', 'strength(1,15)', 'strength(1,16)', 'strength(1,17)', 'strength(1,18)', 'strength(1,19)', 'strength(1,20)', 'strength(1,21)', 'strength(1,22)', 'strength(1,23)', 'strength(1,24)', 'strength(1,25)', 'strength(1,26)', 'strength(1,27)', 'strength(1,28)', 'strength(1,29)', 'strength(1,30)', 'strength(1,31)', 'strength(1,32)', 'strength(1,33)', 'strength(1,34)', 'strength(1,35)', 'strength(1,36)', 'strength(1,37)', 'strength(1,38)', 'strength(1,39)', 'strength(1,40)', 'strength(1,41)', 'strength(1,42)', 'strength(1,43)', 'strength(1,44)', 'strength(1,45)', 'strength(1,46)', 'strength(1,47)', 'strength(1,48)', 'strength(1,49)', 'strength(1,50)', 'strength(1,51)', 'strength(1,52)', 'strength(1,53)', 'strength(1,54)', 'strength(1,55)', 'strength(1,56)', 'strength(1,57)', 'strength(1,58)', 'strength(1,59)', 'strength(1,60)', 'strength(1,61)', 'strength(1,62)', 'strength(1,63)', 'strength(1,64)', 'strength(1,65)', 'strength(1,66)', 'strength(1,67)', 'strength(1,68)', 'strength(1,69)', 'strength(1,70)', 'strength(1,71)', 'strength(1,72)', 'strength(1,73)', 'strength(1,74)', 'strength(1,75)', 'strength(1,76)', 'strength(1,77)', 'strength(1,78)', 'strength(1,79)', 'strength(1,80)', 'strength(1,81)', 'strength(1,82)', 'strength(1,83)', 'strength(1,84)', 'strength(1,85)', 'strength(1,86)', 'strength(1,87)', 'strength(1,88)', 'strength(1,89)', 'strength(1,90)', 'strength(1,91)', 'strength(1,92)', 'strength(1,93)', 'strength(1,94)', 'strength(1,95)', 'strength(1,96)', 'strength(1,97)', 'strength(1,98)', 'strength(1,99)', 'strength(1,100)', 'strength(2,1)', 'strength(2,2)', 'strength(2,3)', 'strength(2,4)', 'strength(2,5)', 'strength(2,6)', 'strength(2,7)', 'strength(2,8)', 'strength(2,9)', 'strength(2,10)', 'strength(2,11)', 'strength(2,12)', 'strength(2,13)', 'strength(2,14)', 'strength(2,15)', 'strength(2,16)', 'strength(2,17)', 'strength(2,18)', 'strength(2,19)', 'strength(2,20)', 'strength(2,21)', 'strength(2,22)', 'strength(2,23)', 'strength(2,24)', 'strength(2,25)', 'strength(2,26)', 'strength(2,27)', 'strength(2,28)', 'strength(2,29)', 'strength(2,30)', 'strength(2,31)', 'strength(2,32)', 'strength(2,33)', 'strength(2,34)', 'strength(2,35)', 'strength(2,36)', 'strength(2,37)', 'strength(2,38)', 'strength(2,39)', 'strength(2,40)', 'strength(2,41)', 'strength(2,42)', 'strength(2,43)', 'strength(2,44)', 'strength(2,45)', 'strength(2,46)', 'strength(2,47)', 'strength(2,48)', 'strength(2,49)', 'strength(2,50)', 'strength(2,51)', 'strength(2,52)', 'strength(2,53)', 'strength(2,54)', 'strength(2,55)', 'strength(2,56)', 'strength(2,57)', 'strength(2,58)', 'strength(2,59)', 'strength(2,60)', 'strength(2,61)', 'strength(2,62)', 'strength(2,63)', 'strength(2,64)', 'strength(2,65)', 'strength(2,66)', 'strength(2,67)', 'strength(2,68)', 'strength(2,69)', 'strength(2,70)', 'strength(2,71)', 'strength(2,72)', 'strength(2,73)', 'strength(2,74)', 'strength(2,75)', 'strength(2,76)', 'strength(2,77)', 'strength(2,78)', 'strength(2,79)', 'strength(2,80)', 'strength(2,81)', 'strength(2,82)', 'strength(2,83)', 'strength(2,84)', 'strength(2,85)', 'strength(2,86)', 'strength(2,87)', 'strength(2,88)', 'strength(2,89)', 'strength(2,90)', 'strength(2,91)', 'strength(2,92)', 'strength(2,93)', 'strength(2,94)', 'strength(2,95)', 'strength(2,96)', 'strength(2,97)', 'strength(2,98)', 'strength(2,99)', 'strength(2,100)', 'strength(3,1)', 'strength(3,2)', 'strength(3,3)', 'strength(3,4)', 'strength(3,5)', 'strength(3,6)', 'strength(3,7)', 'strength(3,8)', 'strength(3,9)', 'strength(3,10)', 'strength(3,11)', 'strength(3,12)', 'strength(3,13)', 'strength(3,14)', 'strength(3,15)', 'strength(3,16)', 'strength(3,17)', 'strength(3,18)', 'strength(3,19)', 'strength(3,20)', 'strength(3,21)', 'strength(3,22)', 'strength(3,23)', 'strength(3,24)', 'strength(3,25)', 'strength(3,26)', 'strength(3,27)', 'strength(3,28)', 'strength(3,29)', 'strength(3,30)', 'strength(3,31)', 'strength(3,32)', 'strength(3,33)', 'strength(3,34)', 'strength(3,35)', 'strength(3,36)', 'strength(3,37)', 'strength(3,38)', 'strength(3,39)', 'strength(3,40)', 'strength(3,41)', 'strength(3,42)', 'strength(3,43)', 'strength(3,44)', 'strength(3,45)', 'strength(3,46)', 'strength(3,47)', 'strength(3,48)', 'strength(3,49)', 'strength(3,50)', 'strength(3,51)', 'strength(3,52)', 'strength(3,53)', 'strength(3,54)', 'strength(3,55)', 'strength(3,56)', 'strength(3,57)', 'strength(3,58)', 'strength(3,59)', 'strength(3,60)', 'strength(3,61)', 'strength(3,62)', 'strength(3,63)', 'strength(3,64)', 'strength(3,65)', 'strength(3,66)', 'strength(3,67)', 'strength(3,68)', 'strength(3,69)', 'strength(3,70)', 'strength(3,71)', 'strength(3,72)', 'strength(3,73)', 'strength(3,74)', 'strength(3,75)', 'strength(3,76)', 'strength(3,77)', 'strength(3,78)', 'strength(3,79)', 'strength(3,80)', 'strength(3,81)', 'strength(3,82)', 'strength(3,83)', 'strength(3,84)', 'strength(3,85)', 'strength(3,86)', 'strength(3,87)', 'strength(3,88)', 'strength(3,89)', 'strength(3,90)', 'strength(3,91)', 'strength(3,92)', 'strength(3,93)', 'strength(3,94)', 'strength(3,95)', 'strength(3,96)', 'strength(3,97)', 'strength(3,98)', 'strength(3,99)', 'strength(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['strength(1,1)', 'strength(1,2)', 'strength(1,3)', 'strength(1,4)', 'strength(1,5)', 'strength(1,6)', 'strength(1,7)', 'strength(1,8)', 'strength(1,9)', 'strength(1,10)', 'strength(1,11)', 'strength(1,12)', 'strength(1,13)', 'strength(1,14)', 'strength(1,15)', 'strength(1,16)', 'strength(1,17)', 'strength(1,18)', 'strength(1,19)', 'strength(1,20)', 'strength(1,21)', 'strength(1,22)', 'strength(1,23)', 'strength(1,24)', 'strength(1,25)', 'strength(1,26)', 'strength(1,27)', 'strength(1,28)', 'strength(1,29)', 'strength(1,30)', 'strength(1,31)', 'strength(1,32)', 'strength(1,33)', 'strength(1,34)', 'strength(1,35)', 'strength(1,36)', 'strength(1,37)', 'strength(1,38)', 'strength(1,39)', 'strength(1,40)', 'strength(1,41)', 'strength(1,42)', 'strength(1,43)', 'strength(1,44)', 'strength(1,45)', 'strength(1,46)', 'strength(1,47)', 'strength(1,48)', 'strength(1,49)', 'strength(1,50)', 'strength(1,51)', 'strength(1,52)', 'strength(1,53)', 'strength(1,54)', 'strength(1,55)', 'strength(1,56)', 'strength(1,57)', 'strength(1,58)', 'strength(1,59)', 'strength(1,60)', 'strength(1,61)', 'strength(1,62)', 'strength(1,63)', 'strength(1,64)', 'strength(1,65)', 'strength(1,66)', 'strength(1,67)', 'strength(1,68)', 'strength(1,69)', 'strength(1,70)', 'strength(1,71)', 'strength(1,72)', 'strength(1,73)', 'strength(1,74)', 'strength(1,75)', 'strength(1,76)', 'strength(1,77)', 'strength(1,78)', 'strength(1,79)', 'strength(1,80)', 'strength(1,81)', 'strength(1,82)', 'strength(1,83)', 'strength(1,84)', 'strength(1,85)', 'strength(1,86)', 'strength(1,87)', 'strength(1,88)', 'strength(1,89)', 'strength(1,90)', 'strength(1,91)', 'strength(1,92)', 'strength(1,93)', 'strength(1,94)', 'strength(1,95)', 'strength(1,96)', 'strength(1,97)', 'strength(1,98)', 'strength(1,99)', 'strength(1,100)', 'strength(2,1)', 'strength(2,2)', 'strength(2,3)', 'strength(2,4)', 'strength(2,5)', 'strength(2,6)', 'strength(2,7)', 'strength(2,8)', 'strength(2,9)', 'strength(2,10)', 'strength(2,11)', 'strength(2,12)', 'strength(2,13)', 'strength(2,14)', 'strength(2,15)', 'strength(2,16)', 'strength(2,17)', 'strength(2,18)', 'strength(2,19)', 'strength(2,20)', 'strength(2,21)', 'strength(2,22)', 'strength(2,23)', 'strength(2,24)', 'strength(2,25)', 'strength(2,26)', 'strength(2,27)', 'strength(2,28)', 'strength(2,29)', 'strength(2,30)', 'strength(2,31)', 'strength(2,32)', 'strength(2,33)', 'strength(2,34)', 'strength(2,35)', 'strength(2,36)', 'strength(2,37)', 'strength(2,38)', 'strength(2,39)', 'strength(2,40)', 'strength(2,41)', 'strength(2,42)', 'strength(2,43)', 'strength(2,44)', 'strength(2,45)', 'strength(2,46)', 'strength(2,47)', 'strength(2,48)', 'strength(2,49)', 'strength(2,50)', 'strength(2,51)', 'strength(2,52)', 'strength(2,53)', 'strength(2,54)', 'strength(2,55)', 'strength(2,56)', 'strength(2,57)', 'strength(2,58)', 'strength(2,59)', 'strength(2,60)', 'strength(2,61)', 'strength(2,62)', 'strength(2,63)', 'strength(2,64)', 'strength(2,65)', 'strength(2,66)', 'strength(2,67)', 'strength(2,68)', 'strength(2,69)', 'strength(2,70)', 'strength(2,71)', 'strength(2,72)', 'strength(2,73)', 'strength(2,74)', 'strength(2,75)', 'strength(2,76)', 'strength(2,77)', 'strength(2,78)', 'strength(2,79)', 'strength(2,80)', 'strength(2,81)', 'strength(2,82)', 'strength(2,83)', 'strength(2,84)', 'strength(2,85)', 'strength(2,86)', 'strength(2,87)', 'strength(2,88)', 'strength(2,89)', 'strength(2,90)', 'strength(2,91)', 'strength(2,92)', 'strength(2,93)', 'strength(2,94)', 'strength(2,95)', 'strength(2,96)', 'strength(2,97)', 'strength(2,98)', 'strength(2,99)', 'strength(2,100)', 'strength(3,1)', 'strength(3,2)', 'strength(3,3)', 'strength(3,4)', 'strength(3,5)', 'strength(3,6)', 'strength(3,7)', 'strength(3,8)', 'strength(3,9)', 'strength(3,10)', 'strength(3,11)', 'strength(3,12)', 'strength(3,13)', 'strength(3,14)', 'strength(3,15)', 'strength(3,16)', 'strength(3,17)', 'strength(3,18)', 'strength(3,19)', 'strength(3,20)', 'strength(3,21)', 'strength(3,22)', 'strength(3,23)', 'strength(3,24)', 'strength(3,25)', 'strength(3,26)', 'strength(3,27)', 'strength(3,28)', 'strength(3,29)', 'strength(3,30)', 'strength(3,31)', 'strength(3,32)', 'strength(3,33)', 'strength(3,34)', 'strength(3,35)', 'strength(3,36)', 'strength(3,37)', 'strength(3,38)', 'strength(3,39)', 'strength(3,40)', 'strength(3,41)', 'strength(3,42)', 'strength(3,43)', 'strength(3,44)', 'strength(3,45)', 'strength(3,46)', 'strength(3,47)', 'strength(3,48)', 'strength(3,49)', 'strength(3,50)', 'strength(3,51)', 'strength(3,52)', 'strength(3,53)', 'strength(3,54)', 'strength(3,55)', 'strength(3,56)', 'strength(3,57)', 'strength(3,58)', 'strength(3,59)', 'strength(3,60)', 'strength(3,61)', 'strength(3,62)', 'strength(3,63)', 'strength(3,64)', 'strength(3,65)', 'strength(3,66)', 'strength(3,67)', 'strength(3,68)', 'strength(3,69)', 'strength(3,70)', 'strength(3,71)', 'strength(3,72)', 'strength(3,73)', 'strength(3,74)', 'strength(3,75)', 'strength(3,76)', 'strength(3,77)', 'strength(3,78)', 'strength(3,79)', 'strength(3,80)', 'strength(3,81)', 'strength(3,82)', 'strength(3,83)', 'strength(3,84)', 'strength(3,85)', 'strength(3,86)', 'strength(3,87)', 'strength(3,88)', 'strength(3,89)', 'strength(3,90)', 'strength(3,91)', 'strength(3,92)', 'strength(3,93)', 'strength(3,94)', 'strength(3,95)', 'strength(3,96)', 'strength(3,97)', 'strength(3,98)', 'strength(3,99)', 'strength(3,100)', 'select(1)', 'select(2)', 'select(3)']]


261
assignment

question: 
Implement an ASP application to tag elements, defined by the predicate "quality", with one label from the set "cloud","weight".

answer from file: 
assign(X,"cloud")|assign(X,"weight"):-quality(X).

parsed from model: 
assign(X,"cloud")|assign(X,"weight"):-quality(X).

facts: 
quality(1..5).

generated: 
Implement an ASP application to tag elements, defined by the predicate "quality", with one label from the set "cloud","weight".
Answer: assign(X,"cloud")|assign(X,"weight"):-quality(X).
assign(X,"cloud"):-price(X,"city").
assign(X,"weight"):-price(X,"city").
price(X,Y):-quality(X),Y="city".
price(X,Y):-quality(X),Y="height".
price(X,Y):-weight(X),Y="city".
price(X,Y):-weight(X),Y="height".

unique_rules: 
['assign(X,"cloud")|assign(X,"weight"):-quality(X).', 'assign(X,"cloud"):-price(X,"city").', 'assign(X,"weight"):-price(X,"city").', 'price(X,Y):-quality(X),Y="city".', 'price(X,Y):-quality(X),Y="height".', 'price(X,Y):-weight(X),Y="city".', 'price(X,Y):-weight(X),Y="height".']

jaccard: 1.0

AS desired: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'assign(1,"weight")', 'assign(2,"cloud")', 'assign(3,"cloud")', 'assign(4,"weight")', 'assign(5,"cloud")']]
\AS obtained: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'assign(1,"weight")', 'assign(2,"cloud")', 'assign(3,"cloud")', 'assign(4,"weight")', 'assign(5,"cloud")']]


262
constraint

question: 
Develop an ASP application to disallow connecting the "desk" predicate having value 7 with the "toronto" label.

answer from file: 
:-assign(7,toronto).

parsed from model: 
:-assign(7,toronto).

facts: 
desk(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-desk(X).

generated: 
Develop an ASP application to disallow connecting the "desk" predicate having value 7 with the "toronto" label.
Answer: :-assign(7,toronto).
Explanation: The predicate "table" includes fields "ID","city","author","name","description","price","author","city","description","name","height","age","city","description","price","author","name","height","age","city","description","price","author","name","height","age","city","description","price","author","name","height","age","city","description","price","author","name","height","age","city","description","price","author","name","height","age","city","description","price","author","name","height","age","city","description","price","author","name","height","age","city","description","price","author

unique_rules: 
[':-assign(7,toronto).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'desk(1)', 'desk(2)', 'desk(3)', 'desk(4)', 'desk(5)', 'desk(6)', 'desk(7)', 'desk(8)', 'desk(9)', 'desk(10)', 'desk(11)', 'desk(12)', 'desk(13)', 'desk(14)', 'desk(15)', 'desk(16)', 'desk(17)', 'desk(18)', 'desk(19)', 'desk(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'desk(1)', 'desk(2)', 'desk(3)', 'desk(4)', 'desk(5)', 'desk(6)', 'desk(7)', 'desk(8)', 'desk(9)', 'desk(10)', 'desk(11)', 'desk(12)', 'desk(13)', 'desk(14)', 'desk(15)', 'desk(16)', 'desk(17)', 'desk(18)', 'desk(19)', 'desk(20)']]


263
combination

question: 
Develop an ASP solution that finds all pairings of elements from the predicates "hair" and "white".

answer from file: 
combination(X,Y):-hair(X),white(Y).

parsed from model: 
combination(X,Y):-hair(X),white(Y).

facts: 
hair(1..4).white(1..5).

generated: 
Develop an ASP solution that finds all pairings of elements from the predicates "hair" and "white".
Answer: combination(X,Y):-hair(X),white(Y).
combination(X,Y):-hair(X),not white(Y).
combination(X,Y):-not hair(X),white(Y).
combination(X,Y):-not hair(X),not white(Y).

unique_rules: 
['combination(X,Y):-hair(X),white(Y).', 'combination(X,Y):-hair(X),not white(Y).', 'combination(X,Y):-not hair(X),white(Y).', 'combination(X,Y):-not hair(X),not white(Y).']

jaccard: 1.0

AS desired: [['white(1)', 'white(2)', 'white(3)', 'white(4)', 'white(5)', 'hair(1)', 'hair(2)', 'hair(3)', 'hair(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['white(1)', 'white(2)', 'white(3)', 'white(4)', 'white(5)', 'hair(1)', 'hair(2)', 'hair(3)', 'hair(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


264
join

question: 
Develop an ASP solution that defines the predicate "flower_strength" to link each flower to the quality of strength, with "flower" having fields "ID","strengthID","quality" and "strength" having fields "ID","quality","owner".

answer from file: 
flower_strength(X,Z):-flower(X,Y,_),strength(Y,Z,_).

parsed from model: 
flower_strength(X,Z):-flower(X,Y,_),strength(Y,Z,_).

facts: 
flower("ID","strengthID","quality").strength("ID","quality","owner").

generated: 
Develop an ASP solution that defines the predicate "flower_strength" to link each flower to the quality of strength, with "flower" having fields "ID","strengthID","quality" and "strength" having fields "ID","quality","owner". Define the predicate "flower_strength" that links each flower to the quality of strength.
Answer: flower_strength(X,Z):-flower(X,Y,_),strength(Y,Z,_).
flower_strength(X,Z):-flower(X,Y,Z).

unique_rules: 
['flower_strength(X,Z):-flower(X,Y,_),strength(Y,Z,_).', 'flower_strength(X,Z):-flower(X,Y,Z).']

jaccard: 1.0

AS desired: [['flower("ID","strengthID","quality")', 'strength("ID","quality","owner")']]
\AS obtained: [['flower("ID","strengthID","quality")', 'strength("ID","quality","owner")']]


265
closure

question: 
Create an ASP solution that establishes the predicate "loops" through the transitive closure of the "moscow" predicate.

answer from file: 
loops(X,Y):-moscow(X,Y).
loops(X,Y):-moscow(X,Z),loops(Z,Y).

parsed from model: 
loops(X,Y):-moscow(X,Y).
loops(X,Y):-moscow(X,Z),loops(Z,Y).

facts: 
moscow(1..3, 1..4).

generated: 
Create an ASP solution that establishes the predicate "loops" through the transitive closure of the "moscow" predicate.
Answer: loops(X,Y):-moscow(X,Y).
loops(X,Y):-moscow(X,Z),loops(Z,Y).
loops(X,Y):-not moscow(X,Y).
loops(X,Y):-X==Y.
loops(X,Y):-X!=Y,Y!=Z.
loops(X,Y):-X==Y,Z==Y.

unique_rules: 
['loops(X,Y):-moscow(X,Y).', 'loops(X,Y):-moscow(X,Z),loops(Z,Y).', 'loops(X,Y):-not moscow(X,Y).', 'loops(X,Y):-X==Y.', 'loops(X,Y):-X!=Y,Y!=Z.', 'loops(X,Y):-X==Y,Z==Y.']

jaccard: 1.0

AS desired: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]
\AS obtained: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]


266
preference

question: 
Craft an ASP application to avoid the predicate "barcelona" with value "4" from being associated with "strength". If this occurs, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(4,"strength").[1@1]

parsed from model: 
:~assign(4,"strength").[1@1]

facts: 
barcelona(1..20).

generated: 
Craft an ASP application to avoid the predicate "barcelona" with value "4" from being associated with "strength". If this occurs, it incurs a cost of "1" at level "1".
Answer: :~assign(4,"strength").[1@1]
The predicate "height" includes fields "ID","city","author","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city

unique_rules: 
[':~assign(4,"strength").[1@1]']

jaccard: 1.0

AS desired: [['barcelona(1)', 'barcelona(2)', 'barcelona(3)', 'barcelona(4)', 'barcelona(5)', 'barcelona(6)', 'barcelona(7)', 'barcelona(8)', 'barcelona(9)', 'barcelona(10)', 'barcelona(11)', 'barcelona(12)', 'barcelona(13)', 'barcelona(14)', 'barcelona(15)', 'barcelona(16)', 'barcelona(17)', 'barcelona(18)', 'barcelona(19)', 'barcelona(20)']]
\AS obtained: [['barcelona(1)', 'barcelona(2)', 'barcelona(3)', 'barcelona(4)', 'barcelona(5)', 'barcelona(6)', 'barcelona(7)', 'barcelona(8)', 'barcelona(9)', 'barcelona(10)', 'barcelona(11)', 'barcelona(12)', 'barcelona(13)', 'barcelona(14)', 'barcelona(15)', 'barcelona(16)', 'barcelona(17)', 'barcelona(18)', 'barcelona(19)', 'barcelona(20)']]


267
filtering

question: 
Craft an ASP code snippet to capture all relevant values for the "cosenza" label within the "pink" predicate.

answer from file: 
select(X):-pink(X,"cosenza").

parsed from model: 
select(X):-pink(X,"cosenza").

facts: 
pink(1..5, "cosenza").

generated: 
Craft an ASP code snippet to capture all relevant values for the "cosenza" label within the "pink" predicate.
Answer: select(X):-pink(X,"cosenza").
pink(X,"cosenza")|select(X):-pink(X,"city").
pink(X,"city")|select(X):-pink(X,"moto").
pink(X,"moto")|select(X):-pink(X,"author").
pink(X,"author")|select(X):-pink(X,"description").
pink(X,"description")|select(X):-pink(X,"height").
pink(X,"height").

unique_rules: 
['select(X):-pink(X,"cosenza").', 'pink(X,"cosenza")|select(X):-pink(X,"city").', 'pink(X,"city")|select(X):-pink(X,"moto").', 'pink(X,"moto")|select(X):-pink(X,"author").', 'pink(X,"author")|select(X):-pink(X,"description").', 'pink(X,"description")|select(X):-pink(X,"height").']

jaccard: 1.0

AS desired: [['pink(1,"cosenza")', 'pink(2,"cosenza")', 'pink(3,"cosenza")', 'pink(4,"cosenza")', 'pink(5,"cosenza")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['pink(1,"cosenza")', 'pink(2,"cosenza")', 'pink(3,"cosenza")', 'pink(4,"cosenza")', 'pink(5,"cosenza")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


268
negative_filtering

question: 
Produce an ASP program to gather values associated with the predicate "mumbai" but not linked to the predicate "black" and labeled "white".

answer from file: 
select(X):-mumbai(X),not black(X,"white").

parsed from model: 
select(X):-mumbai(X),not black(X,"white").

facts: 
mumbai(1..3).black(1,"mumbai").black(2,"hair").black(3,"toronto").

generated: 
Produce an ASP program to gather values associated with the predicate "mumbai" but not linked to the predicate "black" and labeled "white".
Answer: select(X):-mumbai(X),not black(X,"white").
mumbai(X):-city(X),height(X,18).
black(X,"white").
height(X,Y):-city(X),Y.

unique_rules: 
['select(X):-mumbai(X),not black(X,"white").', 'mumbai(X):-city(X),height(X,18).', 'height(X,Y):-city(X),Y.']

jaccard: 1.0

AS desired: [['mumbai(1)', 'mumbai(2)', 'mumbai(3)', 'black(1,"mumbai")', 'black(2,"hair")', 'black(3,"toronto")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['mumbai(1)', 'mumbai(2)', 'mumbai(3)', 'black(1,"mumbai")', 'black(2,"hair")', 'black(3,"toronto")', 'select(1)', 'select(2)', 'select(3)']]


269
numeric_filtering

question: 
Design an ASP solution to capture all values tied to the predicate "quality" with a value different than 76.

answer from file: 
select(X):-quality(X,C),C!=76.

parsed from model: 
select(X):-quality(X,C),C!=76.

facts: 
quality(1..3, 1..100).

generated: 
Design an ASP solution to capture all values tied to the predicate "quality" with a value different than 76.
Answer: select(X):-quality(X,C),C!=76.
Explanation: The predicate "quality" includes all values tied to the predicate "city" with a value different than 76.
The predicate "city" includes all values tied to the predicate "author" with a value different than 76.
The predicate "author" includes all values tied to the predicate "moto" with a value different than 76.
The predicate "moto" includes all values tied to the predicate "rome" with a value different than 76.
The predicate "rome" includes all values tied to the predicate "description" with a value different than 76.
The predicate "description

unique_rules: 
['select(X):-quality(X,C),C!=76.']

jaccard: 1.0

AS desired: [['quality(1,1)', 'quality(1,2)', 'quality(1,3)', 'quality(1,4)', 'quality(1,5)', 'quality(1,6)', 'quality(1,7)', 'quality(1,8)', 'quality(1,9)', 'quality(1,10)', 'quality(1,11)', 'quality(1,12)', 'quality(1,13)', 'quality(1,14)', 'quality(1,15)', 'quality(1,16)', 'quality(1,17)', 'quality(1,18)', 'quality(1,19)', 'quality(1,20)', 'quality(1,21)', 'quality(1,22)', 'quality(1,23)', 'quality(1,24)', 'quality(1,25)', 'quality(1,26)', 'quality(1,27)', 'quality(1,28)', 'quality(1,29)', 'quality(1,30)', 'quality(1,31)', 'quality(1,32)', 'quality(1,33)', 'quality(1,34)', 'quality(1,35)', 'quality(1,36)', 'quality(1,37)', 'quality(1,38)', 'quality(1,39)', 'quality(1,40)', 'quality(1,41)', 'quality(1,42)', 'quality(1,43)', 'quality(1,44)', 'quality(1,45)', 'quality(1,46)', 'quality(1,47)', 'quality(1,48)', 'quality(1,49)', 'quality(1,50)', 'quality(1,51)', 'quality(1,52)', 'quality(1,53)', 'quality(1,54)', 'quality(1,55)', 'quality(1,56)', 'quality(1,57)', 'quality(1,58)', 'quality(1,59)', 'quality(1,60)', 'quality(1,61)', 'quality(1,62)', 'quality(1,63)', 'quality(1,64)', 'quality(1,65)', 'quality(1,66)', 'quality(1,67)', 'quality(1,68)', 'quality(1,69)', 'quality(1,70)', 'quality(1,71)', 'quality(1,72)', 'quality(1,73)', 'quality(1,74)', 'quality(1,75)', 'quality(1,76)', 'quality(1,77)', 'quality(1,78)', 'quality(1,79)', 'quality(1,80)', 'quality(1,81)', 'quality(1,82)', 'quality(1,83)', 'quality(1,84)', 'quality(1,85)', 'quality(1,86)', 'quality(1,87)', 'quality(1,88)', 'quality(1,89)', 'quality(1,90)', 'quality(1,91)', 'quality(1,92)', 'quality(1,93)', 'quality(1,94)', 'quality(1,95)', 'quality(1,96)', 'quality(1,97)', 'quality(1,98)', 'quality(1,99)', 'quality(1,100)', 'quality(2,1)', 'quality(2,2)', 'quality(2,3)', 'quality(2,4)', 'quality(2,5)', 'quality(2,6)', 'quality(2,7)', 'quality(2,8)', 'quality(2,9)', 'quality(2,10)', 'quality(2,11)', 'quality(2,12)', 'quality(2,13)', 'quality(2,14)', 'quality(2,15)', 'quality(2,16)', 'quality(2,17)', 'quality(2,18)', 'quality(2,19)', 'quality(2,20)', 'quality(2,21)', 'quality(2,22)', 'quality(2,23)', 'quality(2,24)', 'quality(2,25)', 'quality(2,26)', 'quality(2,27)', 'quality(2,28)', 'quality(2,29)', 'quality(2,30)', 'quality(2,31)', 'quality(2,32)', 'quality(2,33)', 'quality(2,34)', 'quality(2,35)', 'quality(2,36)', 'quality(2,37)', 'quality(2,38)', 'quality(2,39)', 'quality(2,40)', 'quality(2,41)', 'quality(2,42)', 'quality(2,43)', 'quality(2,44)', 'quality(2,45)', 'quality(2,46)', 'quality(2,47)', 'quality(2,48)', 'quality(2,49)', 'quality(2,50)', 'quality(2,51)', 'quality(2,52)', 'quality(2,53)', 'quality(2,54)', 'quality(2,55)', 'quality(2,56)', 'quality(2,57)', 'quality(2,58)', 'quality(2,59)', 'quality(2,60)', 'quality(2,61)', 'quality(2,62)', 'quality(2,63)', 'quality(2,64)', 'quality(2,65)', 'quality(2,66)', 'quality(2,67)', 'quality(2,68)', 'quality(2,69)', 'quality(2,70)', 'quality(2,71)', 'quality(2,72)', 'quality(2,73)', 'quality(2,74)', 'quality(2,75)', 'quality(2,76)', 'quality(2,77)', 'quality(2,78)', 'quality(2,79)', 'quality(2,80)', 'quality(2,81)', 'quality(2,82)', 'quality(2,83)', 'quality(2,84)', 'quality(2,85)', 'quality(2,86)', 'quality(2,87)', 'quality(2,88)', 'quality(2,89)', 'quality(2,90)', 'quality(2,91)', 'quality(2,92)', 'quality(2,93)', 'quality(2,94)', 'quality(2,95)', 'quality(2,96)', 'quality(2,97)', 'quality(2,98)', 'quality(2,99)', 'quality(2,100)', 'quality(3,1)', 'quality(3,2)', 'quality(3,3)', 'quality(3,4)', 'quality(3,5)', 'quality(3,6)', 'quality(3,7)', 'quality(3,8)', 'quality(3,9)', 'quality(3,10)', 'quality(3,11)', 'quality(3,12)', 'quality(3,13)', 'quality(3,14)', 'quality(3,15)', 'quality(3,16)', 'quality(3,17)', 'quality(3,18)', 'quality(3,19)', 'quality(3,20)', 'quality(3,21)', 'quality(3,22)', 'quality(3,23)', 'quality(3,24)', 'quality(3,25)', 'quality(3,26)', 'quality(3,27)', 'quality(3,28)', 'quality(3,29)', 'quality(3,30)', 'quality(3,31)', 'quality(3,32)', 'quality(3,33)', 'quality(3,34)', 'quality(3,35)', 'quality(3,36)', 'quality(3,37)', 'quality(3,38)', 'quality(3,39)', 'quality(3,40)', 'quality(3,41)', 'quality(3,42)', 'quality(3,43)', 'quality(3,44)', 'quality(3,45)', 'quality(3,46)', 'quality(3,47)', 'quality(3,48)', 'quality(3,49)', 'quality(3,50)', 'quality(3,51)', 'quality(3,52)', 'quality(3,53)', 'quality(3,54)', 'quality(3,55)', 'quality(3,56)', 'quality(3,57)', 'quality(3,58)', 'quality(3,59)', 'quality(3,60)', 'quality(3,61)', 'quality(3,62)', 'quality(3,63)', 'quality(3,64)', 'quality(3,65)', 'quality(3,66)', 'quality(3,67)', 'quality(3,68)', 'quality(3,69)', 'quality(3,70)', 'quality(3,71)', 'quality(3,72)', 'quality(3,73)', 'quality(3,74)', 'quality(3,75)', 'quality(3,76)', 'quality(3,77)', 'quality(3,78)', 'quality(3,79)', 'quality(3,80)', 'quality(3,81)', 'quality(3,82)', 'quality(3,83)', 'quality(3,84)', 'quality(3,85)', 'quality(3,86)', 'quality(3,87)', 'quality(3,88)', 'quality(3,89)', 'quality(3,90)', 'quality(3,91)', 'quality(3,92)', 'quality(3,93)', 'quality(3,94)', 'quality(3,95)', 'quality(3,96)', 'quality(3,97)', 'quality(3,98)', 'quality(3,99)', 'quality(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['quality(1,1)', 'quality(1,2)', 'quality(1,3)', 'quality(1,4)', 'quality(1,5)', 'quality(1,6)', 'quality(1,7)', 'quality(1,8)', 'quality(1,9)', 'quality(1,10)', 'quality(1,11)', 'quality(1,12)', 'quality(1,13)', 'quality(1,14)', 'quality(1,15)', 'quality(1,16)', 'quality(1,17)', 'quality(1,18)', 'quality(1,19)', 'quality(1,20)', 'quality(1,21)', 'quality(1,22)', 'quality(1,23)', 'quality(1,24)', 'quality(1,25)', 'quality(1,26)', 'quality(1,27)', 'quality(1,28)', 'quality(1,29)', 'quality(1,30)', 'quality(1,31)', 'quality(1,32)', 'quality(1,33)', 'quality(1,34)', 'quality(1,35)', 'quality(1,36)', 'quality(1,37)', 'quality(1,38)', 'quality(1,39)', 'quality(1,40)', 'quality(1,41)', 'quality(1,42)', 'quality(1,43)', 'quality(1,44)', 'quality(1,45)', 'quality(1,46)', 'quality(1,47)', 'quality(1,48)', 'quality(1,49)', 'quality(1,50)', 'quality(1,51)', 'quality(1,52)', 'quality(1,53)', 'quality(1,54)', 'quality(1,55)', 'quality(1,56)', 'quality(1,57)', 'quality(1,58)', 'quality(1,59)', 'quality(1,60)', 'quality(1,61)', 'quality(1,62)', 'quality(1,63)', 'quality(1,64)', 'quality(1,65)', 'quality(1,66)', 'quality(1,67)', 'quality(1,68)', 'quality(1,69)', 'quality(1,70)', 'quality(1,71)', 'quality(1,72)', 'quality(1,73)', 'quality(1,74)', 'quality(1,75)', 'quality(1,76)', 'quality(1,77)', 'quality(1,78)', 'quality(1,79)', 'quality(1,80)', 'quality(1,81)', 'quality(1,82)', 'quality(1,83)', 'quality(1,84)', 'quality(1,85)', 'quality(1,86)', 'quality(1,87)', 'quality(1,88)', 'quality(1,89)', 'quality(1,90)', 'quality(1,91)', 'quality(1,92)', 'quality(1,93)', 'quality(1,94)', 'quality(1,95)', 'quality(1,96)', 'quality(1,97)', 'quality(1,98)', 'quality(1,99)', 'quality(1,100)', 'quality(2,1)', 'quality(2,2)', 'quality(2,3)', 'quality(2,4)', 'quality(2,5)', 'quality(2,6)', 'quality(2,7)', 'quality(2,8)', 'quality(2,9)', 'quality(2,10)', 'quality(2,11)', 'quality(2,12)', 'quality(2,13)', 'quality(2,14)', 'quality(2,15)', 'quality(2,16)', 'quality(2,17)', 'quality(2,18)', 'quality(2,19)', 'quality(2,20)', 'quality(2,21)', 'quality(2,22)', 'quality(2,23)', 'quality(2,24)', 'quality(2,25)', 'quality(2,26)', 'quality(2,27)', 'quality(2,28)', 'quality(2,29)', 'quality(2,30)', 'quality(2,31)', 'quality(2,32)', 'quality(2,33)', 'quality(2,34)', 'quality(2,35)', 'quality(2,36)', 'quality(2,37)', 'quality(2,38)', 'quality(2,39)', 'quality(2,40)', 'quality(2,41)', 'quality(2,42)', 'quality(2,43)', 'quality(2,44)', 'quality(2,45)', 'quality(2,46)', 'quality(2,47)', 'quality(2,48)', 'quality(2,49)', 'quality(2,50)', 'quality(2,51)', 'quality(2,52)', 'quality(2,53)', 'quality(2,54)', 'quality(2,55)', 'quality(2,56)', 'quality(2,57)', 'quality(2,58)', 'quality(2,59)', 'quality(2,60)', 'quality(2,61)', 'quality(2,62)', 'quality(2,63)', 'quality(2,64)', 'quality(2,65)', 'quality(2,66)', 'quality(2,67)', 'quality(2,68)', 'quality(2,69)', 'quality(2,70)', 'quality(2,71)', 'quality(2,72)', 'quality(2,73)', 'quality(2,74)', 'quality(2,75)', 'quality(2,76)', 'quality(2,77)', 'quality(2,78)', 'quality(2,79)', 'quality(2,80)', 'quality(2,81)', 'quality(2,82)', 'quality(2,83)', 'quality(2,84)', 'quality(2,85)', 'quality(2,86)', 'quality(2,87)', 'quality(2,88)', 'quality(2,89)', 'quality(2,90)', 'quality(2,91)', 'quality(2,92)', 'quality(2,93)', 'quality(2,94)', 'quality(2,95)', 'quality(2,96)', 'quality(2,97)', 'quality(2,98)', 'quality(2,99)', 'quality(2,100)', 'quality(3,1)', 'quality(3,2)', 'quality(3,3)', 'quality(3,4)', 'quality(3,5)', 'quality(3,6)', 'quality(3,7)', 'quality(3,8)', 'quality(3,9)', 'quality(3,10)', 'quality(3,11)', 'quality(3,12)', 'quality(3,13)', 'quality(3,14)', 'quality(3,15)', 'quality(3,16)', 'quality(3,17)', 'quality(3,18)', 'quality(3,19)', 'quality(3,20)', 'quality(3,21)', 'quality(3,22)', 'quality(3,23)', 'quality(3,24)', 'quality(3,25)', 'quality(3,26)', 'quality(3,27)', 'quality(3,28)', 'quality(3,29)', 'quality(3,30)', 'quality(3,31)', 'quality(3,32)', 'quality(3,33)', 'quality(3,34)', 'quality(3,35)', 'quality(3,36)', 'quality(3,37)', 'quality(3,38)', 'quality(3,39)', 'quality(3,40)', 'quality(3,41)', 'quality(3,42)', 'quality(3,43)', 'quality(3,44)', 'quality(3,45)', 'quality(3,46)', 'quality(3,47)', 'quality(3,48)', 'quality(3,49)', 'quality(3,50)', 'quality(3,51)', 'quality(3,52)', 'quality(3,53)', 'quality(3,54)', 'quality(3,55)', 'quality(3,56)', 'quality(3,57)', 'quality(3,58)', 'quality(3,59)', 'quality(3,60)', 'quality(3,61)', 'quality(3,62)', 'quality(3,63)', 'quality(3,64)', 'quality(3,65)', 'quality(3,66)', 'quality(3,67)', 'quality(3,68)', 'quality(3,69)', 'quality(3,70)', 'quality(3,71)', 'quality(3,72)', 'quality(3,73)', 'quality(3,74)', 'quality(3,75)', 'quality(3,76)', 'quality(3,77)', 'quality(3,78)', 'quality(3,79)', 'quality(3,80)', 'quality(3,81)', 'quality(3,82)', 'quality(3,83)', 'quality(3,84)', 'quality(3,85)', 'quality(3,86)', 'quality(3,87)', 'quality(3,88)', 'quality(3,89)', 'quality(3,90)', 'quality(3,91)', 'quality(3,92)', 'quality(3,93)', 'quality(3,94)', 'quality(3,95)', 'quality(3,96)', 'quality(3,97)', 'quality(3,98)', 'quality(3,99)', 'quality(3,100)', 'select(1)', 'select(2)', 'select(3)']]


270
assignment

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are "delhi","laptop","butterfly","barcelona","lake","desk","white","cosenza".

answer from file: 
assign(X,"delhi")|assign(X,"laptop")|assign(X,"butterfly")|assign(X,"barcelona")|assign(X,"lake")|assign(X,"desk")|assign(X,"white")|assign(X,"cosenza"):-lake(X).

parsed from model: 
assign(X,"delhi")|assign(X,"laptop")|assign(X," arrivant")|assign(X,"shangai")|assign(X,"dubai")|assign(X,"white")|assign(X,"cosenza"):-lake(X).

facts: 
lake(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are "delhi","laptop","butterfly","barcelona","lake","desk","white","cosenza".
Answer: assign(X,"delhi")|assign(X,"laptop")|assign(X," arrivant")|assign(X,"shangai")|assign(X,"dubai")|assign(X,"white")|assign(X,"cosenza"):-lake(X).
assign(X,"dubai"):-bike(X).
assign(X,"white"):-moto(X).
assign(X,"shangai"):-moto(X).
assign(X,"dubai"):-moto(X).
assign(X,"moto"):-bike(X).
assign(X,"bike"):-moto(X).
assign(X,"moto"):-bike(X).
assign(X,"bike

unique_rules: 
['assign(X,"delhi")|assign(X,"laptop")|assign(X," arrivant")|assign(X,"shangai")|assign(X,"dubai")|assign(X,"white")|assign(X,"cosenza"):-lake(X).', 'assign(X,"dubai"):-bike(X).', 'assign(X,"white"):-moto(X).', 'assign(X,"shangai"):-moto(X).', 'assign(X,"dubai"):-moto(X).', 'assign(X,"moto"):-bike(X).', 'assign(X,"bike"):-moto(X).']

jaccard: 0.0

AS desired: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'assign(1,"cosenza")', 'assign(2,"cosenza")', 'assign(3,"white")', 'assign(4,"cosenza")', 'assign(5,"cosenza")']]
\AS obtained: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'assign(1,"cosenza")', 'assign(2,"cosenza")', 'assign(3,"cosenza")', 'assign(4,"cosenza")', 'assign(5,"cosenza")']]


271
constraint

question: 
Write an ASP application that excludes the "flower" predicate with value 15 from being assigned to the label "wall".

answer from file: 
:-assign(15,wall).

parsed from model: 
:-assign(15,wall).

facts: 
flower(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-flower(X).

generated: 
Write an ASP application that excludes the "flower" predicate with value 15 from being assigned to the label "wall".
Answer: :-assign(15,wall).
Explanation: The predicate "florence" includes the "city" label, and the predicate "wall" contains the "description" label.
The predicate "assign" associates each element with the label "wall" if the element is labeled "florence".
The predicate "florence" includes the "city" label, and the predicate "description" contains the "description" label.
The predicate "assign" associates each element with the label "description" if the element is labeled "florence".
The predicate "florence" includes the "city" label, and the predicate "description" contains the "description" label.
The predicate "assign" associates each

unique_rules: 
[':-assign(15,wall).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'flower(1)', 'flower(2)', 'flower(3)', 'flower(4)', 'flower(5)', 'flower(6)', 'flower(7)', 'flower(8)', 'flower(9)', 'flower(10)', 'flower(11)', 'flower(12)', 'flower(13)', 'flower(14)', 'flower(15)', 'flower(16)', 'flower(17)', 'flower(18)', 'flower(19)', 'flower(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'flower(1)', 'flower(2)', 'flower(3)', 'flower(4)', 'flower(5)', 'flower(6)', 'flower(7)', 'flower(8)', 'flower(9)', 'flower(10)', 'flower(11)', 'flower(12)', 'flower(13)', 'flower(14)', 'flower(15)', 'flower(16)', 'flower(17)', 'flower(18)', 'flower(19)', 'flower(20)']]


272
combination

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "delhi" and "chicago".

answer from file: 
combination(X,Y):-delhi(X),chicago(Y).

parsed from model: 
combination(X,Y):-delhi(X),chicago(Y).

facts: 
delhi(1..4).chicago(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "delhi" and "chicago".
Answer: combination(X,Y):-delhi(X),chicago(Y).
combination(X,Y):-delhi(X),not chicago(Y).
combination(X,Y):-not delhi(X),chicago(Y).
combination(X,Y):-not delhi(X),not chicago(Y).
combination(X,Y):-delhi(X),chicago(Y).

unique_rules: 
['combination(X,Y):-delhi(X),chicago(Y).', 'combination(X,Y):-delhi(X),not chicago(Y).', 'combination(X,Y):-not delhi(X),chicago(Y).', 'combination(X,Y):-not delhi(X),not chicago(Y).']

jaccard: 1.0

AS desired: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'chicago(5)', 'delhi(1)', 'delhi(2)', 'delhi(3)', 'delhi(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'chicago(5)', 'delhi(1)', 'delhi(2)', 'delhi(3)', 'delhi(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


273
join

question: 
Create an ASP solution to define the predicate "storm_surname" that links each storm to the weight of surname, given "storm" has fields "ID","surnameID","weight","hair","quality" and "surname" has fields "ID","weight","surname".

answer from file: 
storm_surname(X,Z):-storm(X,Y,_,_,_),surname(Y,Z,_).

parsed from model: 
storm_surname(X,Z):-storm(X,Y,_,_,_),surname(Y,Z,_).

facts: 
storm("ID","surnameID","weight","hair","quality").surname("ID","weight","surname").

generated: 
Create an ASP solution to define the predicate "storm_surname" that links each storm to the weight of surname, given "storm" has fields "ID","surnameID","weight","hair","quality" and "surname" has fields "ID","weight","surname". Define the predicate "storm_surname" that links each storm to the weight of surname of "surname".
Answer: storm_surname(X,Z):-storm(X,Y,_,_,_),surname(Y,Z,_).
storm_surname(X,Z):-storm(X,Y,Z,_,_),surname(Y,Z,Z).

unique_rules: 
['storm_surname(X,Z):-storm(X,Y,_,_,_),surname(Y,Z,_).', 'storm_surname(X,Z):-storm(X,Y,Z,_,_),surname(Y,Z,Z).']

jaccard: 1.0

AS desired: [['storm("ID","surnameID","weight","hair","quality")', 'surname("ID","weight","surname")']]
\AS obtained: [['storm("ID","surnameID","weight","hair","quality")', 'surname("ID","weight","surname")']]


274
closure

question: 
Generate an ASP program to construct the "journey" predicate based on the transitive closure of the "moscow" predicate.

answer from file: 
journey(X,Y):-moscow(X,Y).
journey(X,Y):-moscow(X,Z),journey(Z,Y).

parsed from model: 
journey(X,Y):-moscow(X,Y).
journey(X,Y):-moscow(X,Z),journey(Z,Y).

facts: 
moscow(1..3, 1..4).

generated: 
Generate an ASP program to construct the "journey" predicate based on the transitive closure of the "moscow" predicate.
Answer: journey(X,Y):-moscow(X,Y).
journey(X,Y):-moscow(X,Z),journey(Z,Y).
journey(X,Y):-not moscow(X,Y).
journey(X,Y):-city(X,Y).
city(X,Y):-city(X,Z),city(Z,Y).
city(X,Y):-city(X,Y).

unique_rules: 
['journey(X,Y):-moscow(X,Y).', 'journey(X,Y):-moscow(X,Z),journey(Z,Y).', 'journey(X,Y):-not moscow(X,Y).', 'journey(X,Y):-city(X,Y).', 'city(X,Y):-city(X,Z),city(Z,Y).', 'city(X,Y):-city(X,Y).']

jaccard: 1.0

AS desired: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)', 'journey(1,1)', 'journey(1,2)', 'journey(1,3)', 'journey(1,4)', 'journey(2,1)', 'journey(2,2)', 'journey(2,3)', 'journey(2,4)', 'journey(3,1)', 'journey(3,2)', 'journey(3,3)', 'journey(3,4)']]
\AS obtained: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)', 'journey(1,1)', 'journey(1,2)', 'journey(1,3)', 'journey(1,4)', 'journey(2,1)', 'journey(2,2)', 'journey(2,3)', 'journey(2,4)', 'journey(3,1)', 'journey(3,2)', 'journey(3,3)', 'journey(3,4)']]


275
preference

question: 
Develop an ASP application to avoid the "strength" predicate with value "19" being associated with "pink", incurring a cost of "1" at level "1" if found.

answer from file: 
:~assign(19,"pink").[1@1]

parsed from model: 
:~assign(19,"pink").[1@1]

facts: 
strength(1..20).

generated: 
Develop an ASP application to avoid the "strength" predicate with value "19" being associated with "pink", incurring a cost of "1" at level "1" if found.
Answer: :~assign(19,"pink").[1@1]
The predicate "height" includes fields "ID","city","author","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","

unique_rules: 
[':~assign(19,"pink").[1@1]']

jaccard: 1.0

AS desired: [['strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'strength(6)', 'strength(7)', 'strength(8)', 'strength(9)', 'strength(10)', 'strength(11)', 'strength(12)', 'strength(13)', 'strength(14)', 'strength(15)', 'strength(16)', 'strength(17)', 'strength(18)', 'strength(19)', 'strength(20)']]
\AS obtained: [['strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'strength(6)', 'strength(7)', 'strength(8)', 'strength(9)', 'strength(10)', 'strength(11)', 'strength(12)', 'strength(13)', 'strength(14)', 'strength(15)', 'strength(16)', 'strength(17)', 'strength(18)', 'strength(19)', 'strength(20)']]


276
filtering

question: 
Craft an ASP application to fetch all values linked to the "chair" label in the context of the "weight" predicate.

answer from file: 
select(X):-weight(X,"chair").

parsed from model: 
select(X):-weight(X,"chair").

facts: 
weight(1..5, "chair").

generated: 
Craft an ASP application to fetch all values linked to the "chair" label in the context of the "weight" predicate.
Answer: select(X):-weight(X,"chair").
weight(X,"chair"):-weight(X,"author").

unique_rules: 
['select(X):-weight(X,"chair").', 'weight(X,"chair"):-weight(X,"author").']

jaccard: 1.0

AS desired: [['weight(1,"chair")', 'weight(2,"chair")', 'weight(3,"chair")', 'weight(4,"chair")', 'weight(5,"chair")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['weight(1,"chair")', 'weight(2,"chair")', 'weight(3,"chair")', 'weight(4,"chair")', 'weight(5,"chair")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


277
negative_filtering

question: 
Generate an ASP script to gather values linked to the predicate "butterfly" but not to the predicate "chicago" and labeled "weight".

answer from file: 
select(X):-butterfly(X),not chicago(X,"weight").

parsed from model: 
select(X):-butterfly(X),not chicago(X,"weight").

facts: 
butterfly(1..3).chicago(1,"singapore").chicago(2,"cosenza").chicago(3,"desk").

generated: 
Generate an ASP script to gather values linked to the predicate "butterfly" but not to the predicate "chicago" and labeled "weight".
Answer: select(X):-butterfly(X),not chicago(X,"weight").

unique_rules: 
['select(X):-butterfly(X),not chicago(X,"weight").']

jaccard: 1.0

AS desired: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'chicago(1,"singapore")', 'chicago(2,"cosenza")', 'chicago(3,"desk")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'chicago(1,"singapore")', 'chicago(2,"cosenza")', 'chicago(3,"desk")', 'select(1)', 'select(2)', 'select(3)']]


278
numeric_filtering

question: 
Produce an ASP script to retrieve values associated with the predicate "black" with a value different than 73.

answer from file: 
select(X):-black(X,C),C!=73.

parsed from model: 
select(X):-black(X,C),C!=73.

facts: 
black(1..3, 1..100).

generated: 
Produce an ASP script to retrieve values associated with the predicate "black" with a value different than 73.
Answer: select(X):-black(X,C),C!=73.
black(X,C):-black(X,C),C==73.

unique_rules: 
['select(X):-black(X,C),C!=73.', 'black(X,C):-black(X,C),C==73.']

jaccard: 1.0

AS desired: [['black(1,1)', 'black(1,2)', 'black(1,3)', 'black(1,4)', 'black(1,5)', 'black(1,6)', 'black(1,7)', 'black(1,8)', 'black(1,9)', 'black(1,10)', 'black(1,11)', 'black(1,12)', 'black(1,13)', 'black(1,14)', 'black(1,15)', 'black(1,16)', 'black(1,17)', 'black(1,18)', 'black(1,19)', 'black(1,20)', 'black(1,21)', 'black(1,22)', 'black(1,23)', 'black(1,24)', 'black(1,25)', 'black(1,26)', 'black(1,27)', 'black(1,28)', 'black(1,29)', 'black(1,30)', 'black(1,31)', 'black(1,32)', 'black(1,33)', 'black(1,34)', 'black(1,35)', 'black(1,36)', 'black(1,37)', 'black(1,38)', 'black(1,39)', 'black(1,40)', 'black(1,41)', 'black(1,42)', 'black(1,43)', 'black(1,44)', 'black(1,45)', 'black(1,46)', 'black(1,47)', 'black(1,48)', 'black(1,49)', 'black(1,50)', 'black(1,51)', 'black(1,52)', 'black(1,53)', 'black(1,54)', 'black(1,55)', 'black(1,56)', 'black(1,57)', 'black(1,58)', 'black(1,59)', 'black(1,60)', 'black(1,61)', 'black(1,62)', 'black(1,63)', 'black(1,64)', 'black(1,65)', 'black(1,66)', 'black(1,67)', 'black(1,68)', 'black(1,69)', 'black(1,70)', 'black(1,71)', 'black(1,72)', 'black(1,73)', 'black(1,74)', 'black(1,75)', 'black(1,76)', 'black(1,77)', 'black(1,78)', 'black(1,79)', 'black(1,80)', 'black(1,81)', 'black(1,82)', 'black(1,83)', 'black(1,84)', 'black(1,85)', 'black(1,86)', 'black(1,87)', 'black(1,88)', 'black(1,89)', 'black(1,90)', 'black(1,91)', 'black(1,92)', 'black(1,93)', 'black(1,94)', 'black(1,95)', 'black(1,96)', 'black(1,97)', 'black(1,98)', 'black(1,99)', 'black(1,100)', 'black(2,1)', 'black(2,2)', 'black(2,3)', 'black(2,4)', 'black(2,5)', 'black(2,6)', 'black(2,7)', 'black(2,8)', 'black(2,9)', 'black(2,10)', 'black(2,11)', 'black(2,12)', 'black(2,13)', 'black(2,14)', 'black(2,15)', 'black(2,16)', 'black(2,17)', 'black(2,18)', 'black(2,19)', 'black(2,20)', 'black(2,21)', 'black(2,22)', 'black(2,23)', 'black(2,24)', 'black(2,25)', 'black(2,26)', 'black(2,27)', 'black(2,28)', 'black(2,29)', 'black(2,30)', 'black(2,31)', 'black(2,32)', 'black(2,33)', 'black(2,34)', 'black(2,35)', 'black(2,36)', 'black(2,37)', 'black(2,38)', 'black(2,39)', 'black(2,40)', 'black(2,41)', 'black(2,42)', 'black(2,43)', 'black(2,44)', 'black(2,45)', 'black(2,46)', 'black(2,47)', 'black(2,48)', 'black(2,49)', 'black(2,50)', 'black(2,51)', 'black(2,52)', 'black(2,53)', 'black(2,54)', 'black(2,55)', 'black(2,56)', 'black(2,57)', 'black(2,58)', 'black(2,59)', 'black(2,60)', 'black(2,61)', 'black(2,62)', 'black(2,63)', 'black(2,64)', 'black(2,65)', 'black(2,66)', 'black(2,67)', 'black(2,68)', 'black(2,69)', 'black(2,70)', 'black(2,71)', 'black(2,72)', 'black(2,73)', 'black(2,74)', 'black(2,75)', 'black(2,76)', 'black(2,77)', 'black(2,78)', 'black(2,79)', 'black(2,80)', 'black(2,81)', 'black(2,82)', 'black(2,83)', 'black(2,84)', 'black(2,85)', 'black(2,86)', 'black(2,87)', 'black(2,88)', 'black(2,89)', 'black(2,90)', 'black(2,91)', 'black(2,92)', 'black(2,93)', 'black(2,94)', 'black(2,95)', 'black(2,96)', 'black(2,97)', 'black(2,98)', 'black(2,99)', 'black(2,100)', 'black(3,1)', 'black(3,2)', 'black(3,3)', 'black(3,4)', 'black(3,5)', 'black(3,6)', 'black(3,7)', 'black(3,8)', 'black(3,9)', 'black(3,10)', 'black(3,11)', 'black(3,12)', 'black(3,13)', 'black(3,14)', 'black(3,15)', 'black(3,16)', 'black(3,17)', 'black(3,18)', 'black(3,19)', 'black(3,20)', 'black(3,21)', 'black(3,22)', 'black(3,23)', 'black(3,24)', 'black(3,25)', 'black(3,26)', 'black(3,27)', 'black(3,28)', 'black(3,29)', 'black(3,30)', 'black(3,31)', 'black(3,32)', 'black(3,33)', 'black(3,34)', 'black(3,35)', 'black(3,36)', 'black(3,37)', 'black(3,38)', 'black(3,39)', 'black(3,40)', 'black(3,41)', 'black(3,42)', 'black(3,43)', 'black(3,44)', 'black(3,45)', 'black(3,46)', 'black(3,47)', 'black(3,48)', 'black(3,49)', 'black(3,50)', 'black(3,51)', 'black(3,52)', 'black(3,53)', 'black(3,54)', 'black(3,55)', 'black(3,56)', 'black(3,57)', 'black(3,58)', 'black(3,59)', 'black(3,60)', 'black(3,61)', 'black(3,62)', 'black(3,63)', 'black(3,64)', 'black(3,65)', 'black(3,66)', 'black(3,67)', 'black(3,68)', 'black(3,69)', 'black(3,70)', 'black(3,71)', 'black(3,72)', 'black(3,73)', 'black(3,74)', 'black(3,75)', 'black(3,76)', 'black(3,77)', 'black(3,78)', 'black(3,79)', 'black(3,80)', 'black(3,81)', 'black(3,82)', 'black(3,83)', 'black(3,84)', 'black(3,85)', 'black(3,86)', 'black(3,87)', 'black(3,88)', 'black(3,89)', 'black(3,90)', 'black(3,91)', 'black(3,92)', 'black(3,93)', 'black(3,94)', 'black(3,95)', 'black(3,96)', 'black(3,97)', 'black(3,98)', 'black(3,99)', 'black(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['black(1,1)', 'black(1,2)', 'black(1,3)', 'black(1,4)', 'black(1,5)', 'black(1,6)', 'black(1,7)', 'black(1,8)', 'black(1,9)', 'black(1,10)', 'black(1,11)', 'black(1,12)', 'black(1,13)', 'black(1,14)', 'black(1,15)', 'black(1,16)', 'black(1,17)', 'black(1,18)', 'black(1,19)', 'black(1,20)', 'black(1,21)', 'black(1,22)', 'black(1,23)', 'black(1,24)', 'black(1,25)', 'black(1,26)', 'black(1,27)', 'black(1,28)', 'black(1,29)', 'black(1,30)', 'black(1,31)', 'black(1,32)', 'black(1,33)', 'black(1,34)', 'black(1,35)', 'black(1,36)', 'black(1,37)', 'black(1,38)', 'black(1,39)', 'black(1,40)', 'black(1,41)', 'black(1,42)', 'black(1,43)', 'black(1,44)', 'black(1,45)', 'black(1,46)', 'black(1,47)', 'black(1,48)', 'black(1,49)', 'black(1,50)', 'black(1,51)', 'black(1,52)', 'black(1,53)', 'black(1,54)', 'black(1,55)', 'black(1,56)', 'black(1,57)', 'black(1,58)', 'black(1,59)', 'black(1,60)', 'black(1,61)', 'black(1,62)', 'black(1,63)', 'black(1,64)', 'black(1,65)', 'black(1,66)', 'black(1,67)', 'black(1,68)', 'black(1,69)', 'black(1,70)', 'black(1,71)', 'black(1,72)', 'black(1,73)', 'black(1,74)', 'black(1,75)', 'black(1,76)', 'black(1,77)', 'black(1,78)', 'black(1,79)', 'black(1,80)', 'black(1,81)', 'black(1,82)', 'black(1,83)', 'black(1,84)', 'black(1,85)', 'black(1,86)', 'black(1,87)', 'black(1,88)', 'black(1,89)', 'black(1,90)', 'black(1,91)', 'black(1,92)', 'black(1,93)', 'black(1,94)', 'black(1,95)', 'black(1,96)', 'black(1,97)', 'black(1,98)', 'black(1,99)', 'black(1,100)', 'black(2,1)', 'black(2,2)', 'black(2,3)', 'black(2,4)', 'black(2,5)', 'black(2,6)', 'black(2,7)', 'black(2,8)', 'black(2,9)', 'black(2,10)', 'black(2,11)', 'black(2,12)', 'black(2,13)', 'black(2,14)', 'black(2,15)', 'black(2,16)', 'black(2,17)', 'black(2,18)', 'black(2,19)', 'black(2,20)', 'black(2,21)', 'black(2,22)', 'black(2,23)', 'black(2,24)', 'black(2,25)', 'black(2,26)', 'black(2,27)', 'black(2,28)', 'black(2,29)', 'black(2,30)', 'black(2,31)', 'black(2,32)', 'black(2,33)', 'black(2,34)', 'black(2,35)', 'black(2,36)', 'black(2,37)', 'black(2,38)', 'black(2,39)', 'black(2,40)', 'black(2,41)', 'black(2,42)', 'black(2,43)', 'black(2,44)', 'black(2,45)', 'black(2,46)', 'black(2,47)', 'black(2,48)', 'black(2,49)', 'black(2,50)', 'black(2,51)', 'black(2,52)', 'black(2,53)', 'black(2,54)', 'black(2,55)', 'black(2,56)', 'black(2,57)', 'black(2,58)', 'black(2,59)', 'black(2,60)', 'black(2,61)', 'black(2,62)', 'black(2,63)', 'black(2,64)', 'black(2,65)', 'black(2,66)', 'black(2,67)', 'black(2,68)', 'black(2,69)', 'black(2,70)', 'black(2,71)', 'black(2,72)', 'black(2,73)', 'black(2,74)', 'black(2,75)', 'black(2,76)', 'black(2,77)', 'black(2,78)', 'black(2,79)', 'black(2,80)', 'black(2,81)', 'black(2,82)', 'black(2,83)', 'black(2,84)', 'black(2,85)', 'black(2,86)', 'black(2,87)', 'black(2,88)', 'black(2,89)', 'black(2,90)', 'black(2,91)', 'black(2,92)', 'black(2,93)', 'black(2,94)', 'black(2,95)', 'black(2,96)', 'black(2,97)', 'black(2,98)', 'black(2,99)', 'black(2,100)', 'black(3,1)', 'black(3,2)', 'black(3,3)', 'black(3,4)', 'black(3,5)', 'black(3,6)', 'black(3,7)', 'black(3,8)', 'black(3,9)', 'black(3,10)', 'black(3,11)', 'black(3,12)', 'black(3,13)', 'black(3,14)', 'black(3,15)', 'black(3,16)', 'black(3,17)', 'black(3,18)', 'black(3,19)', 'black(3,20)', 'black(3,21)', 'black(3,22)', 'black(3,23)', 'black(3,24)', 'black(3,25)', 'black(3,26)', 'black(3,27)', 'black(3,28)', 'black(3,29)', 'black(3,30)', 'black(3,31)', 'black(3,32)', 'black(3,33)', 'black(3,34)', 'black(3,35)', 'black(3,36)', 'black(3,37)', 'black(3,38)', 'black(3,39)', 'black(3,40)', 'black(3,41)', 'black(3,42)', 'black(3,43)', 'black(3,44)', 'black(3,45)', 'black(3,46)', 'black(3,47)', 'black(3,48)', 'black(3,49)', 'black(3,50)', 'black(3,51)', 'black(3,52)', 'black(3,53)', 'black(3,54)', 'black(3,55)', 'black(3,56)', 'black(3,57)', 'black(3,58)', 'black(3,59)', 'black(3,60)', 'black(3,61)', 'black(3,62)', 'black(3,63)', 'black(3,64)', 'black(3,65)', 'black(3,66)', 'black(3,67)', 'black(3,68)', 'black(3,69)', 'black(3,70)', 'black(3,71)', 'black(3,72)', 'black(3,73)', 'black(3,74)', 'black(3,75)', 'black(3,76)', 'black(3,77)', 'black(3,78)', 'black(3,79)', 'black(3,80)', 'black(3,81)', 'black(3,82)', 'black(3,83)', 'black(3,84)', 'black(3,85)', 'black(3,86)', 'black(3,87)', 'black(3,88)', 'black(3,89)', 'black(3,90)', 'black(3,91)', 'black(3,92)', 'black(3,93)', 'black(3,94)', 'black(3,95)', 'black(3,96)', 'black(3,97)', 'black(3,98)', 'black(3,99)', 'black(3,100)', 'select(1)', 'select(2)', 'select(3)']]


279
assignment

question: 
Create an ASP script that maps a single label from "chicago","black","strength","cosenza","chair","laptop","singapore" to a collection of elements specified by the predicate "pink".

answer from file: 
assign(X,"chicago")|assign(X,"black")|assign(X,"strength")|assign(X,"cosenza")|assign(X,"chair")|assign(X,"laptop")|assign(X,"singapore"):-pink(X).

parsed from model: 
assign(X,"chicago")|assign(X,"black")|assign(X,"strength")|assign(X,"cosenza")|assign(X,"chair")|assign(X,"laptop")|assign(X,"singapore"):-pink(X).

facts: 
pink(1..5).

generated: 
Create an ASP script that maps a single label from "chicago","black","strength","cosenza","chair","laptop","singapore" to a collection of elements specified by the predicate "pink".
Answer: assign(X,"chicago")|assign(X,"black")|assign(X,"strength")|assign(X,"cosenza")|assign(X,"chair")|assign(X,"laptop")|assign(X,"singapore"):-pink(X).
assign(X,"city")|assign(X,"author")|assign(X,"moto","height","description","city","author","moto","height","description","city","author","moto","height","description","city","author","moto","height","description","city","author","moto","height","description","city","author","moto","height","description","city","author","moto","height","description","city","author","moto","height

unique_rules: 
['assign(X,"chicago")|assign(X,"black")|assign(X,"strength")|assign(X,"cosenza")|assign(X,"chair")|assign(X,"laptop")|assign(X,"singapore"):-pink(X).']

jaccard: 1.0

AS desired: [['pink(1)', 'pink(2)', 'pink(3)', 'pink(4)', 'pink(5)', 'assign(1,"singapore")', 'assign(2,"singapore")', 'assign(3,"singapore")', 'assign(4,"singapore")', 'assign(5,"singapore")']]
\AS obtained: [['pink(1)', 'pink(2)', 'pink(3)', 'pink(4)', 'pink(5)', 'assign(1,"singapore")', 'assign(2,"singapore")', 'assign(3,"singapore")', 'assign(4,"singapore")', 'assign(5,"singapore")']]


280
constraint

question: 
Generate an ASP code to exclude linking the "strength" predicate with value 3 to the label "cairo".

answer from file: 
:-assign(3,cairo).

parsed from model: 
:-assign(3,cairo).

facts: 
strength(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-strength(X).

generated: 
Generate an ASP code to exclude linking the "strength" predicate with value 3 to the label "cairo".
Answer: :-assign(3,cairo).
Explanation: The predicate "street" includes fields "ID","city","author","height","name","description","city","author","height","name","description","city","author","height","name","description","city","author","height","name","description","city","author","height","name","description","city","author","height","name","description","city","author","height","name","description","city","author","height","name","description","city","author","height","name","description","city","author","height","name","description","city","author","height","name","description","city","author","height","name","description","city","author","height","name

unique_rules: 
[':-assign(3,cairo).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'strength(6)', 'strength(7)', 'strength(8)', 'strength(9)', 'strength(10)', 'strength(11)', 'strength(12)', 'strength(13)', 'strength(14)', 'strength(15)', 'strength(16)', 'strength(17)', 'strength(18)', 'strength(19)', 'strength(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'strength(6)', 'strength(7)', 'strength(8)', 'strength(9)', 'strength(10)', 'strength(11)', 'strength(12)', 'strength(13)', 'strength(14)', 'strength(15)', 'strength(16)', 'strength(17)', 'strength(18)', 'strength(19)', 'strength(20)']]


281
combination

question: 
Design an ASP solution to compute all possible pairings of elements from two sets defined by the predicates "chair" and "delhi".

answer from file: 
combination(X,Y):-chair(X),delhi(Y).

parsed from model: 
combination(X,Y):-chair(X),delhi(Y).

facts: 
chair(1..4).delhi(1..5).

generated: 
Design an ASP solution to compute all possible pairings of elements from two sets defined by the predicates "chair" and "delhi".
Answer: combination(X,Y):-chair(X),delhi(Y).
combination(X,Y):-chair(X),not delhi(Y).
combination(X,Y):-not chair(X),delhi(Y).
combination(X,Y):-not chair(X),not delhi(Y).

unique_rules: 
['combination(X,Y):-chair(X),delhi(Y).', 'combination(X,Y):-chair(X),not delhi(Y).', 'combination(X,Y):-not chair(X),delhi(Y).', 'combination(X,Y):-not chair(X),not delhi(Y).']

jaccard: 1.0

AS desired: [['delhi(1)', 'delhi(2)', 'delhi(3)', 'delhi(4)', 'delhi(5)', 'chair(1)', 'chair(2)', 'chair(3)', 'chair(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['delhi(1)', 'delhi(2)', 'delhi(3)', 'delhi(4)', 'delhi(5)', 'chair(1)', 'chair(2)', 'chair(3)', 'chair(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


282
join

question: 
Write an ASP program for the following problem. Consider predicate "pink" having fields "ID","chairID","hair","quality","lake", and the predicate "chair" having fields "ID","lake","owner". Define a predicate "pink_chair" that associates to each "pink" the "lake" of "chair".

answer from file: 
pink_chair(X,Z):-pink(X,Y,_,_,_),chair(Y,Z,_).

parsed from model: 
pink_chair(X,Z):-pink(X,Y,_,_,Z),chair(Y,Z,_).

facts: 
pink("ID","chairID","hair","quality","lake").chair("ID","lake","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "pink" having fields "ID","chairID","hair","quality","lake", and the predicate "chair" having fields "ID","lake","owner". Define a predicate "pink_chair" that associates to each "pink" the "lake" of "chair".
Answer: pink_chair(X,Z):-pink(X,Y,_,_,Z),chair(Y,Z,_).
pink_chair(X,Z):-pink(X,Y,_,_,Z),not chair(Y,Z,_).
pink_chair(X,Z):-not pink(X,Y,_,_,Z),chair(Y,Z,_).

unique_rules: 
['pink_chair(X,Z):-pink(X,Y,_,_,Z),chair(Y,Z,_).', 'pink_chair(X,Z):-pink(X,Y,_,_,Z),not chair(Y,Z,_).', 'pink_chair(X,Z):-not pink(X,Y,_,_,Z),chair(Y,Z,_).']

jaccard: 1.0

AS desired: [['pink("ID","chairID","hair","quality","lake")', 'chair("ID","lake","owner")']]
\AS obtained: [['pink("ID","chairID","hair","quality","lake")', 'chair("ID","lake","owner")']]


283
closure

question: 
Create an ASP code snippet to determine the transitive closure of the "storm" predicate, resulting in the predicate "family".

answer from file: 
family(X,Y):-storm(X,Y).
family(X,Y):-storm(X,Z),family(Z,Y).

parsed from model: 
family(X,Y):-storm(X,Y).
family(X,Y):-storm(X,Z),family(Z,Y).

facts: 
storm(1..3, 1..4).

generated: 
Create an ASP code snippet to determine the transitive closure of the "storm" predicate, resulting in the predicate "family".
Answer: family(X,Y):-storm(X,Y).
family(X,Y):-storm(X,Z),family(Z,Y).
family(X,Y):-storm(X,Z),not family(Z,Y).
family(X,Y):-not storm(X,Y).
family(X,Y):-X,Y.
family(X,Y):-not X,not Y.

unique_rules: 
['family(X,Y):-storm(X,Y).', 'family(X,Y):-storm(X,Z),family(Z,Y).', 'family(X,Y):-storm(X,Z),not family(Z,Y).', 'family(X,Y):-not storm(X,Y).', 'family(X,Y):-X,Y.', 'family(X,Y):-not X,not Y.']

jaccard: 1.0

AS desired: [['storm(1,1)', 'storm(1,2)', 'storm(1,3)', 'storm(1,4)', 'storm(2,1)', 'storm(2,2)', 'storm(2,3)', 'storm(2,4)', 'storm(3,1)', 'storm(3,2)', 'storm(3,3)', 'storm(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]
\AS obtained: [['storm(1,1)', 'storm(1,2)', 'storm(1,3)', 'storm(1,4)', 'storm(2,1)', 'storm(2,2)', 'storm(2,3)', 'storm(2,4)', 'storm(3,1)', 'storm(3,2)', 'storm(3,3)', 'storm(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]


284
preference

question: 
Compose an ASP script to ensure the "butterfly" predicate with value "15" does not link to "laptop". If this connection happens, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(15,"laptop").[1@1]

parsed from model: 
:~assign(15,"laptop").[1@1]

facts: 
butterfly(1..20).

generated: 
Compose an ASP script to ensure the "butterfly" predicate with value "15" does not link to "laptop". If this connection happens, it incurs a cost of "1" at level "1".
Answer: :~assign(15,"laptop").[1@1]
This script uses the "assign" predicate to link the "bike" label to the "city" group.
The "city" group is identified by the "moto" label.
The "bike" label is a transitive closure of the "city" group.
The "cost" predicate is used to calculate the cost of the connection.
The "1" level refers to the "city" group, and the "1" cost refers to the "bike" label.

unique_rules: 
[':~assign(15,"laptop").[1@1]']

jaccard: 1.0

AS desired: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)', 'butterfly(6)', 'butterfly(7)', 'butterfly(8)', 'butterfly(9)', 'butterfly(10)', 'butterfly(11)', 'butterfly(12)', 'butterfly(13)', 'butterfly(14)', 'butterfly(15)', 'butterfly(16)', 'butterfly(17)', 'butterfly(18)', 'butterfly(19)', 'butterfly(20)']]
\AS obtained: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)', 'butterfly(6)', 'butterfly(7)', 'butterfly(8)', 'butterfly(9)', 'butterfly(10)', 'butterfly(11)', 'butterfly(12)', 'butterfly(13)', 'butterfly(14)', 'butterfly(15)', 'butterfly(16)', 'butterfly(17)', 'butterfly(18)', 'butterfly(19)', 'butterfly(20)']]


285
filtering

question: 
Create an ASP code to retrieve values associated with the label "owner" within the "moscow" predicate.

answer from file: 
select(X):-moscow(X,"owner").

parsed from model: 
select(X):-moscow(X,"owner").

facts: 
moscow(1..5, "owner").

generated: 
Create an ASP code to retrieve values associated with the label "owner" within the "moscow" predicate.
Answer: select(X):-moscow(X,"owner").
moscow(X,Z):- felicità(X,Z).
 felicità(X,Z):-city(X,Z).

unique_rules: 
['select(X):-moscow(X,"owner").', 'moscow(X,Z):- felicità(X,Z).', 'felicità(X,Z):-city(X,Z).']

jaccard: 1.0

AS desired: [['moscow(1,"owner")', 'moscow(2,"owner")', 'moscow(3,"owner")', 'moscow(4,"owner")', 'moscow(5,"owner")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['moscow(1,"owner")', 'moscow(2,"owner")', 'moscow(3,"owner")', 'moscow(4,"owner")', 'moscow(5,"owner")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


286
negative_filtering

question: 
Generate an ASP code snippet to retrieve values linked to the predicate "chicago" but not to the predicate "storm" and labeled "storm".

answer from file: 
select(X):-chicago(X),not storm(X,"storm").

parsed from model: 
select(X):-chicago(X),not storm(X,"storm").

facts: 
chicago(1..3).storm(1,"mumbai").storm(2,"storm").storm(3,"white").

generated: 
Generate an ASP code snippet to retrieve values linked to the predicate "chicago" but not to the predicate "storm" and labeled "storm".
Answer: select(X):-chicago(X),not storm(X,"storm").
Explanation: The predicate "chicago" links values to the predicate "city". The predicate "storm" links values to the predicate "author". The predicate "author" is labeled "rome".
The predicate "city" links values to the predicate "author". The predicate "author" is labeled "rome".
The predicate "rome" links values to the predicate "city".
The predicate "city" links values to the predicate "rome".
The predicate "rome" is labeled "rome".
The predicate "author" is labeled "rome".
The predicate "author" links values to the predicate "city".
The predicate "city

unique_rules: 
['select(X):-chicago(X),not storm(X,"storm").']

jaccard: 1.0

AS desired: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'storm(1,"mumbai")', 'storm(2,"storm")', 'storm(3,"white")', 'select(1)', 'select(3)']]
\AS obtained: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'storm(1,"mumbai")', 'storm(2,"storm")', 'storm(3,"white")', 'select(1)', 'select(3)']]


287
numeric_filtering

question: 
Compose an ASP program to fetch values associated with the predicate "moscow" with a value different than 48.

answer from file: 
select(X):-moscow(X,C),C!=48.

parsed from model: 
select(X):-moscow(X,C),C!=48.

facts: 
moscow(1..3, 1..100).

generated: 
Compose an ASP program to fetch values associated with the predicate "moscow" with a value different than 48.
Answer: select(X):-moscow(X,C),C!=48.
Explanation: The predicate "moscow" includes values associated with the predicate "moto" with a value different than 48.
The predicate "moto" includes values associated with the predicate "city" with a value different than 48.
The predicate "city" includes values associated with the predicate "author" with a value different than 48.
So, the predicate "moscow" includes values associated with the predicate "moto" with a value different than 48.

unique_rules: 
['select(X):-moscow(X,C),C!=48.']

jaccard: 1.0

AS desired: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(1,5)', 'moscow(1,6)', 'moscow(1,7)', 'moscow(1,8)', 'moscow(1,9)', 'moscow(1,10)', 'moscow(1,11)', 'moscow(1,12)', 'moscow(1,13)', 'moscow(1,14)', 'moscow(1,15)', 'moscow(1,16)', 'moscow(1,17)', 'moscow(1,18)', 'moscow(1,19)', 'moscow(1,20)', 'moscow(1,21)', 'moscow(1,22)', 'moscow(1,23)', 'moscow(1,24)', 'moscow(1,25)', 'moscow(1,26)', 'moscow(1,27)', 'moscow(1,28)', 'moscow(1,29)', 'moscow(1,30)', 'moscow(1,31)', 'moscow(1,32)', 'moscow(1,33)', 'moscow(1,34)', 'moscow(1,35)', 'moscow(1,36)', 'moscow(1,37)', 'moscow(1,38)', 'moscow(1,39)', 'moscow(1,40)', 'moscow(1,41)', 'moscow(1,42)', 'moscow(1,43)', 'moscow(1,44)', 'moscow(1,45)', 'moscow(1,46)', 'moscow(1,47)', 'moscow(1,48)', 'moscow(1,49)', 'moscow(1,50)', 'moscow(1,51)', 'moscow(1,52)', 'moscow(1,53)', 'moscow(1,54)', 'moscow(1,55)', 'moscow(1,56)', 'moscow(1,57)', 'moscow(1,58)', 'moscow(1,59)', 'moscow(1,60)', 'moscow(1,61)', 'moscow(1,62)', 'moscow(1,63)', 'moscow(1,64)', 'moscow(1,65)', 'moscow(1,66)', 'moscow(1,67)', 'moscow(1,68)', 'moscow(1,69)', 'moscow(1,70)', 'moscow(1,71)', 'moscow(1,72)', 'moscow(1,73)', 'moscow(1,74)', 'moscow(1,75)', 'moscow(1,76)', 'moscow(1,77)', 'moscow(1,78)', 'moscow(1,79)', 'moscow(1,80)', 'moscow(1,81)', 'moscow(1,82)', 'moscow(1,83)', 'moscow(1,84)', 'moscow(1,85)', 'moscow(1,86)', 'moscow(1,87)', 'moscow(1,88)', 'moscow(1,89)', 'moscow(1,90)', 'moscow(1,91)', 'moscow(1,92)', 'moscow(1,93)', 'moscow(1,94)', 'moscow(1,95)', 'moscow(1,96)', 'moscow(1,97)', 'moscow(1,98)', 'moscow(1,99)', 'moscow(1,100)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(2,5)', 'moscow(2,6)', 'moscow(2,7)', 'moscow(2,8)', 'moscow(2,9)', 'moscow(2,10)', 'moscow(2,11)', 'moscow(2,12)', 'moscow(2,13)', 'moscow(2,14)', 'moscow(2,15)', 'moscow(2,16)', 'moscow(2,17)', 'moscow(2,18)', 'moscow(2,19)', 'moscow(2,20)', 'moscow(2,21)', 'moscow(2,22)', 'moscow(2,23)', 'moscow(2,24)', 'moscow(2,25)', 'moscow(2,26)', 'moscow(2,27)', 'moscow(2,28)', 'moscow(2,29)', 'moscow(2,30)', 'moscow(2,31)', 'moscow(2,32)', 'moscow(2,33)', 'moscow(2,34)', 'moscow(2,35)', 'moscow(2,36)', 'moscow(2,37)', 'moscow(2,38)', 'moscow(2,39)', 'moscow(2,40)', 'moscow(2,41)', 'moscow(2,42)', 'moscow(2,43)', 'moscow(2,44)', 'moscow(2,45)', 'moscow(2,46)', 'moscow(2,47)', 'moscow(2,48)', 'moscow(2,49)', 'moscow(2,50)', 'moscow(2,51)', 'moscow(2,52)', 'moscow(2,53)', 'moscow(2,54)', 'moscow(2,55)', 'moscow(2,56)', 'moscow(2,57)', 'moscow(2,58)', 'moscow(2,59)', 'moscow(2,60)', 'moscow(2,61)', 'moscow(2,62)', 'moscow(2,63)', 'moscow(2,64)', 'moscow(2,65)', 'moscow(2,66)', 'moscow(2,67)', 'moscow(2,68)', 'moscow(2,69)', 'moscow(2,70)', 'moscow(2,71)', 'moscow(2,72)', 'moscow(2,73)', 'moscow(2,74)', 'moscow(2,75)', 'moscow(2,76)', 'moscow(2,77)', 'moscow(2,78)', 'moscow(2,79)', 'moscow(2,80)', 'moscow(2,81)', 'moscow(2,82)', 'moscow(2,83)', 'moscow(2,84)', 'moscow(2,85)', 'moscow(2,86)', 'moscow(2,87)', 'moscow(2,88)', 'moscow(2,89)', 'moscow(2,90)', 'moscow(2,91)', 'moscow(2,92)', 'moscow(2,93)', 'moscow(2,94)', 'moscow(2,95)', 'moscow(2,96)', 'moscow(2,97)', 'moscow(2,98)', 'moscow(2,99)', 'moscow(2,100)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)', 'moscow(3,5)', 'moscow(3,6)', 'moscow(3,7)', 'moscow(3,8)', 'moscow(3,9)', 'moscow(3,10)', 'moscow(3,11)', 'moscow(3,12)', 'moscow(3,13)', 'moscow(3,14)', 'moscow(3,15)', 'moscow(3,16)', 'moscow(3,17)', 'moscow(3,18)', 'moscow(3,19)', 'moscow(3,20)', 'moscow(3,21)', 'moscow(3,22)', 'moscow(3,23)', 'moscow(3,24)', 'moscow(3,25)', 'moscow(3,26)', 'moscow(3,27)', 'moscow(3,28)', 'moscow(3,29)', 'moscow(3,30)', 'moscow(3,31)', 'moscow(3,32)', 'moscow(3,33)', 'moscow(3,34)', 'moscow(3,35)', 'moscow(3,36)', 'moscow(3,37)', 'moscow(3,38)', 'moscow(3,39)', 'moscow(3,40)', 'moscow(3,41)', 'moscow(3,42)', 'moscow(3,43)', 'moscow(3,44)', 'moscow(3,45)', 'moscow(3,46)', 'moscow(3,47)', 'moscow(3,48)', 'moscow(3,49)', 'moscow(3,50)', 'moscow(3,51)', 'moscow(3,52)', 'moscow(3,53)', 'moscow(3,54)', 'moscow(3,55)', 'moscow(3,56)', 'moscow(3,57)', 'moscow(3,58)', 'moscow(3,59)', 'moscow(3,60)', 'moscow(3,61)', 'moscow(3,62)', 'moscow(3,63)', 'moscow(3,64)', 'moscow(3,65)', 'moscow(3,66)', 'moscow(3,67)', 'moscow(3,68)', 'moscow(3,69)', 'moscow(3,70)', 'moscow(3,71)', 'moscow(3,72)', 'moscow(3,73)', 'moscow(3,74)', 'moscow(3,75)', 'moscow(3,76)', 'moscow(3,77)', 'moscow(3,78)', 'moscow(3,79)', 'moscow(3,80)', 'moscow(3,81)', 'moscow(3,82)', 'moscow(3,83)', 'moscow(3,84)', 'moscow(3,85)', 'moscow(3,86)', 'moscow(3,87)', 'moscow(3,88)', 'moscow(3,89)', 'moscow(3,90)', 'moscow(3,91)', 'moscow(3,92)', 'moscow(3,93)', 'moscow(3,94)', 'moscow(3,95)', 'moscow(3,96)', 'moscow(3,97)', 'moscow(3,98)', 'moscow(3,99)', 'moscow(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(1,5)', 'moscow(1,6)', 'moscow(1,7)', 'moscow(1,8)', 'moscow(1,9)', 'moscow(1,10)', 'moscow(1,11)', 'moscow(1,12)', 'moscow(1,13)', 'moscow(1,14)', 'moscow(1,15)', 'moscow(1,16)', 'moscow(1,17)', 'moscow(1,18)', 'moscow(1,19)', 'moscow(1,20)', 'moscow(1,21)', 'moscow(1,22)', 'moscow(1,23)', 'moscow(1,24)', 'moscow(1,25)', 'moscow(1,26)', 'moscow(1,27)', 'moscow(1,28)', 'moscow(1,29)', 'moscow(1,30)', 'moscow(1,31)', 'moscow(1,32)', 'moscow(1,33)', 'moscow(1,34)', 'moscow(1,35)', 'moscow(1,36)', 'moscow(1,37)', 'moscow(1,38)', 'moscow(1,39)', 'moscow(1,40)', 'moscow(1,41)', 'moscow(1,42)', 'moscow(1,43)', 'moscow(1,44)', 'moscow(1,45)', 'moscow(1,46)', 'moscow(1,47)', 'moscow(1,48)', 'moscow(1,49)', 'moscow(1,50)', 'moscow(1,51)', 'moscow(1,52)', 'moscow(1,53)', 'moscow(1,54)', 'moscow(1,55)', 'moscow(1,56)', 'moscow(1,57)', 'moscow(1,58)', 'moscow(1,59)', 'moscow(1,60)', 'moscow(1,61)', 'moscow(1,62)', 'moscow(1,63)', 'moscow(1,64)', 'moscow(1,65)', 'moscow(1,66)', 'moscow(1,67)', 'moscow(1,68)', 'moscow(1,69)', 'moscow(1,70)', 'moscow(1,71)', 'moscow(1,72)', 'moscow(1,73)', 'moscow(1,74)', 'moscow(1,75)', 'moscow(1,76)', 'moscow(1,77)', 'moscow(1,78)', 'moscow(1,79)', 'moscow(1,80)', 'moscow(1,81)', 'moscow(1,82)', 'moscow(1,83)', 'moscow(1,84)', 'moscow(1,85)', 'moscow(1,86)', 'moscow(1,87)', 'moscow(1,88)', 'moscow(1,89)', 'moscow(1,90)', 'moscow(1,91)', 'moscow(1,92)', 'moscow(1,93)', 'moscow(1,94)', 'moscow(1,95)', 'moscow(1,96)', 'moscow(1,97)', 'moscow(1,98)', 'moscow(1,99)', 'moscow(1,100)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(2,5)', 'moscow(2,6)', 'moscow(2,7)', 'moscow(2,8)', 'moscow(2,9)', 'moscow(2,10)', 'moscow(2,11)', 'moscow(2,12)', 'moscow(2,13)', 'moscow(2,14)', 'moscow(2,15)', 'moscow(2,16)', 'moscow(2,17)', 'moscow(2,18)', 'moscow(2,19)', 'moscow(2,20)', 'moscow(2,21)', 'moscow(2,22)', 'moscow(2,23)', 'moscow(2,24)', 'moscow(2,25)', 'moscow(2,26)', 'moscow(2,27)', 'moscow(2,28)', 'moscow(2,29)', 'moscow(2,30)', 'moscow(2,31)', 'moscow(2,32)', 'moscow(2,33)', 'moscow(2,34)', 'moscow(2,35)', 'moscow(2,36)', 'moscow(2,37)', 'moscow(2,38)', 'moscow(2,39)', 'moscow(2,40)', 'moscow(2,41)', 'moscow(2,42)', 'moscow(2,43)', 'moscow(2,44)', 'moscow(2,45)', 'moscow(2,46)', 'moscow(2,47)', 'moscow(2,48)', 'moscow(2,49)', 'moscow(2,50)', 'moscow(2,51)', 'moscow(2,52)', 'moscow(2,53)', 'moscow(2,54)', 'moscow(2,55)', 'moscow(2,56)', 'moscow(2,57)', 'moscow(2,58)', 'moscow(2,59)', 'moscow(2,60)', 'moscow(2,61)', 'moscow(2,62)', 'moscow(2,63)', 'moscow(2,64)', 'moscow(2,65)', 'moscow(2,66)', 'moscow(2,67)', 'moscow(2,68)', 'moscow(2,69)', 'moscow(2,70)', 'moscow(2,71)', 'moscow(2,72)', 'moscow(2,73)', 'moscow(2,74)', 'moscow(2,75)', 'moscow(2,76)', 'moscow(2,77)', 'moscow(2,78)', 'moscow(2,79)', 'moscow(2,80)', 'moscow(2,81)', 'moscow(2,82)', 'moscow(2,83)', 'moscow(2,84)', 'moscow(2,85)', 'moscow(2,86)', 'moscow(2,87)', 'moscow(2,88)', 'moscow(2,89)', 'moscow(2,90)', 'moscow(2,91)', 'moscow(2,92)', 'moscow(2,93)', 'moscow(2,94)', 'moscow(2,95)', 'moscow(2,96)', 'moscow(2,97)', 'moscow(2,98)', 'moscow(2,99)', 'moscow(2,100)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)', 'moscow(3,5)', 'moscow(3,6)', 'moscow(3,7)', 'moscow(3,8)', 'moscow(3,9)', 'moscow(3,10)', 'moscow(3,11)', 'moscow(3,12)', 'moscow(3,13)', 'moscow(3,14)', 'moscow(3,15)', 'moscow(3,16)', 'moscow(3,17)', 'moscow(3,18)', 'moscow(3,19)', 'moscow(3,20)', 'moscow(3,21)', 'moscow(3,22)', 'moscow(3,23)', 'moscow(3,24)', 'moscow(3,25)', 'moscow(3,26)', 'moscow(3,27)', 'moscow(3,28)', 'moscow(3,29)', 'moscow(3,30)', 'moscow(3,31)', 'moscow(3,32)', 'moscow(3,33)', 'moscow(3,34)', 'moscow(3,35)', 'moscow(3,36)', 'moscow(3,37)', 'moscow(3,38)', 'moscow(3,39)', 'moscow(3,40)', 'moscow(3,41)', 'moscow(3,42)', 'moscow(3,43)', 'moscow(3,44)', 'moscow(3,45)', 'moscow(3,46)', 'moscow(3,47)', 'moscow(3,48)', 'moscow(3,49)', 'moscow(3,50)', 'moscow(3,51)', 'moscow(3,52)', 'moscow(3,53)', 'moscow(3,54)', 'moscow(3,55)', 'moscow(3,56)', 'moscow(3,57)', 'moscow(3,58)', 'moscow(3,59)', 'moscow(3,60)', 'moscow(3,61)', 'moscow(3,62)', 'moscow(3,63)', 'moscow(3,64)', 'moscow(3,65)', 'moscow(3,66)', 'moscow(3,67)', 'moscow(3,68)', 'moscow(3,69)', 'moscow(3,70)', 'moscow(3,71)', 'moscow(3,72)', 'moscow(3,73)', 'moscow(3,74)', 'moscow(3,75)', 'moscow(3,76)', 'moscow(3,77)', 'moscow(3,78)', 'moscow(3,79)', 'moscow(3,80)', 'moscow(3,81)', 'moscow(3,82)', 'moscow(3,83)', 'moscow(3,84)', 'moscow(3,85)', 'moscow(3,86)', 'moscow(3,87)', 'moscow(3,88)', 'moscow(3,89)', 'moscow(3,90)', 'moscow(3,91)', 'moscow(3,92)', 'moscow(3,93)', 'moscow(3,94)', 'moscow(3,95)', 'moscow(3,96)', 'moscow(3,97)', 'moscow(3,98)', 'moscow(3,99)', 'moscow(3,100)', 'select(1)', 'select(2)', 'select(3)']]


288
assignment

question: 
Compose an ASP program that maps a single label from the set "delhi","surname","moscow","quality","butterfly","chair","desk","lake" to elements determined by the predicate "owner".

answer from file: 
assign(X,"delhi")|assign(X,"surname")|assign(X,"moscow")|assign(X,"quality")|assign(X,"butterfly")|assign(X,"chair")|assign(X,"desk")|assign(X,"lake"):-owner(X).

parsed from model: 
assign(X,"delhi")|assign(X,"surname")|assign(X,"moscow")|assign(X,"quality")|assign(X,"butterfly")|assign(X,"chair")|assign(X,"desk")|assign(X,"lake"):-owner(X).

facts: 
owner(1..5).

generated: 
Compose an ASP program that maps a single label from the set "delhi","surname","moscow","quality","butterfly","chair","desk","lake" to elements determined by the predicate "owner".
Answer: assign(X,"delhi")|assign(X,"surname")|assign(X,"moscow")|assign(X,"quality")|assign(X,"butterfly")|assign(X,"chair")|assign(X,"desk")|assign(X,"lake"):-owner(X).
assign(X,"city"):-owner(X).
```
The predicate "owner" includes elements determined by the predicate "city".
The predicate "city" includes elements determined by the predicate "description".
The predicate "description" includes elements determined by the predicate "author".
The predicate "author" includes elements determined by the predicate "rome".
The predicate "rome" includes elements determined by the

unique_rules: 
['assign(X,"delhi")|assign(X,"surname")|assign(X,"moscow")|assign(X,"quality")|assign(X,"butterfly")|assign(X,"chair")|assign(X,"desk")|assign(X,"lake"):-owner(X).', 'assign(X,"city"):-owner(X).']

jaccard: 1.0

AS desired: [['owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'owner(5)', 'assign(1,"lake")', 'assign(2,"lake")', 'assign(3,"desk")', 'assign(4,"lake")', 'assign(5,"lake")']]
\AS obtained: [['owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'owner(5)', 'assign(1,"lake")', 'assign(2,"lake")', 'assign(3,"desk")', 'assign(4,"lake")', 'assign(5,"lake")']]


289
constraint

question: 
Compose an ASP solution that avoids the predicate "weight" with value 2 being mapped to the label "lake".

answer from file: 
:-assign(2,lake).

parsed from model: 
:-assign(2,lake).

facts: 
weight(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-weight(X).

generated: 
Compose an ASP solution that avoids the predicate "weight" with value 2 being mapped to the label "lake".
Answer: :-assign(2,lake).
Explanation: The predicate "weight" includes values linked to the labels "city","height","moto","rome","shangai","street","author","color","description","moto","city","height","shangai","author","description","rome","street","city","height","moto","description","shangai","author","description","rome","street","city","height","moto","description","shangai","author","description","rome","street","city","height","moto","description","shangai","author","description","rome","street","city","height","moto","description","shangai","author","description","rome","street","city","height","moto","description","shangai","author","

unique_rules: 
[':-assign(2,lake).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'weight(1)', 'weight(2)', 'weight(3)', 'weight(4)', 'weight(5)', 'weight(6)', 'weight(7)', 'weight(8)', 'weight(9)', 'weight(10)', 'weight(11)', 'weight(12)', 'weight(13)', 'weight(14)', 'weight(15)', 'weight(16)', 'weight(17)', 'weight(18)', 'weight(19)', 'weight(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'weight(1)', 'weight(2)', 'weight(3)', 'weight(4)', 'weight(5)', 'weight(6)', 'weight(7)', 'weight(8)', 'weight(9)', 'weight(10)', 'weight(11)', 'weight(12)', 'weight(13)', 'weight(14)', 'weight(15)', 'weight(16)', 'weight(17)', 'weight(18)', 'weight(19)', 'weight(20)']]


290
combination

question: 
Write an ASP application that finds all pairings of elements from the sets defined by the predicates "chicago" and "laptop".

answer from file: 
combination(X,Y):-chicago(X),laptop(Y).

parsed from model: 
combination(X,Y):-chicago(X),laptop(Y).

facts: 
chicago(1..4).laptop(1..5).

generated: 
Write an ASP application that finds all pairings of elements from the sets defined by the predicates "chicago" and "laptop".
Answer: combination(X,Y):-chicago(X),laptop(Y).
combination(X,Y):-chicago(X),not laptop(Y).
combination(X,Y):-not chicago(X),laptop(Y).

unique_rules: 
['combination(X,Y):-chicago(X),laptop(Y).', 'combination(X,Y):-chicago(X),not laptop(Y).', 'combination(X,Y):-not chicago(X),laptop(Y).']

jaccard: 1.0

AS desired: [['laptop(1)', 'laptop(2)', 'laptop(3)', 'laptop(4)', 'laptop(5)', 'chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['laptop(1)', 'laptop(2)', 'laptop(3)', 'laptop(4)', 'laptop(5)', 'chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


291
join

question: 
Compose an ASP code snippet to define the predicate "cairo_flower" linking each cairo to the owner of flower, using the fields "ID","flowerID","lake" of "cairo" and the fields "ID","owner" of "flower".

answer from file: 
cairo_flower(X,Z):-cairo(X,Y,_),flower(Y,Z).

parsed from model: 
cairo_flower(X,Z):-cairo(X,Y,_),flower(Y,Z).

facts: 
cairo("ID","flowerID","lake").flower("ID","owner").

generated: 
Compose an ASP code snippet to define the predicate "cairo_flower" linking each cairo to the owner of flower, using the fields "ID","flowerID","lake" of "cairo" and the fields "ID","owner" of "flower".
Answer: cairo_flower(X,Z):-cairo(X,Y,_),flower(Y,Z).
cairo_flower(X,Z):-cairo(X,Y,_),not flower(Y,Z).

unique_rules: 
['cairo_flower(X,Z):-cairo(X,Y,_),flower(Y,Z).', 'cairo_flower(X,Z):-cairo(X,Y,_),not flower(Y,Z).']

jaccard: 1.0

AS desired: [['flower("ID","owner")', 'cairo("ID","flowerID","lake")']]
\AS obtained: [['flower("ID","owner")', 'cairo("ID","flowerID","lake")']]


292
closure

question: 
Design an ASP code to link the predicate "barcelona" to its transitive closure, defined as "journey".

answer from file: 
journey(X,Y):-barcelona(X,Y).
journey(X,Y):-barcelona(X,Z),journey(Z,Y).

parsed from model: 
journey(X,Y):-barcelona(X,Y).
journey(X,Y):-barcelona(X,Z),journey(Z,Y).

facts: 
barcelona(1..3, 1..4).

generated: 
Design an ASP code to link the predicate "barcelona" to its transitive closure, defined as "journey".
Answer: journey(X,Y):-barcelona(X,Y).
journey(X,Y):-barcelona(X,Z),journey(Z,Y).
journey(X,Y):-london(X,Y).
london(X,Y):-city(X,Y).
london(X,Y):-moto(X,Y).
moto(X,Y):-dubai(X,Y).
dubai(X,Y):-city(X,Y).

unique_rules: 
['journey(X,Y):-barcelona(X,Y).', 'journey(X,Y):-barcelona(X,Z),journey(Z,Y).', 'journey(X,Y):-london(X,Y).', 'london(X,Y):-city(X,Y).', 'london(X,Y):-moto(X,Y).', 'moto(X,Y):-dubai(X,Y).', 'dubai(X,Y):-city(X,Y).']

jaccard: 1.0

AS desired: [['barcelona(1,1)', 'barcelona(1,2)', 'barcelona(1,3)', 'barcelona(1,4)', 'barcelona(2,1)', 'barcelona(2,2)', 'barcelona(2,3)', 'barcelona(2,4)', 'barcelona(3,1)', 'barcelona(3,2)', 'barcelona(3,3)', 'barcelona(3,4)', 'journey(1,1)', 'journey(1,2)', 'journey(1,3)', 'journey(1,4)', 'journey(2,1)', 'journey(2,2)', 'journey(2,3)', 'journey(2,4)', 'journey(3,1)', 'journey(3,2)', 'journey(3,3)', 'journey(3,4)']]
\AS obtained: [['barcelona(1,1)', 'barcelona(1,2)', 'barcelona(1,3)', 'barcelona(1,4)', 'barcelona(2,1)', 'barcelona(2,2)', 'barcelona(2,3)', 'barcelona(2,4)', 'barcelona(3,1)', 'barcelona(3,2)', 'barcelona(3,3)', 'barcelona(3,4)', 'journey(1,1)', 'journey(1,2)', 'journey(1,3)', 'journey(1,4)', 'journey(2,1)', 'journey(2,2)', 'journey(2,3)', 'journey(2,4)', 'journey(3,1)', 'journey(3,2)', 'journey(3,3)', 'journey(3,4)']]


293
preference

question: 
Compose an ASP script to ensure the "toronto" predicate with value "6" does not link to "cairo". If this connection happens, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(6,"cairo").[1@1]

parsed from model: 
:~assign(6,"cairo").[1@1]

facts: 
toronto(1..20).

generated: 
Compose an ASP script to ensure the "toronto" predicate with value "6" does not link to "cairo". If this connection happens, it incurs a cost of "1" at level "1".
Answer: :~assign(6,"cairo").[1@1]
This script uses the "assign" predicate to link the "toronto" predicate with value "6" to the "city" label.
The "city" label incurs a cost of "1" at level "1".
The "assign" predicate ensures that the link is not created if it would violate the "city" label.

unique_rules: 
[':~assign(6,"cairo").[1@1]']

jaccard: 1.0

AS desired: [['toronto(1)', 'toronto(2)', 'toronto(3)', 'toronto(4)', 'toronto(5)', 'toronto(6)', 'toronto(7)', 'toronto(8)', 'toronto(9)', 'toronto(10)', 'toronto(11)', 'toronto(12)', 'toronto(13)', 'toronto(14)', 'toronto(15)', 'toronto(16)', 'toronto(17)', 'toronto(18)', 'toronto(19)', 'toronto(20)']]
\AS obtained: [['toronto(1)', 'toronto(2)', 'toronto(3)', 'toronto(4)', 'toronto(5)', 'toronto(6)', 'toronto(7)', 'toronto(8)', 'toronto(9)', 'toronto(10)', 'toronto(11)', 'toronto(12)', 'toronto(13)', 'toronto(14)', 'toronto(15)', 'toronto(16)', 'toronto(17)', 'toronto(18)', 'toronto(19)', 'toronto(20)']]


294
filtering

question: 
Formulate an ASP application to fetch all values tied to the predicate "laptop" and labeled as "black".

answer from file: 
select(X):-laptop(X,"black").

parsed from model: 
select(X):-laptop(X,"black").

facts: 
laptop(1..5, "black").

generated: 
Formulate an ASP application to fetch all values tied to the predicate "laptop" and labeled as "black".
Answer: select(X):-laptop(X,"black").
select(X):-laptop(X,"gray").
select(X):-laptop(X,"moto").
person(X,"black").
person(X,"gray").
person(X,"moto").
```

unique_rules: 
['select(X):-laptop(X,"black").', 'select(X):-laptop(X,"gray").', 'select(X):-laptop(X,"moto").']

jaccard: 1.0

AS desired: [['laptop(1,"black")', 'laptop(2,"black")', 'laptop(3,"black")', 'laptop(4,"black")', 'laptop(5,"black")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['laptop(1,"black")', 'laptop(2,"black")', 'laptop(3,"black")', 'laptop(4,"black")', 'laptop(5,"black")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


295
negative_filtering

question: 
Formulate an ASP code to select values linked to the predicate "weight" but not associated with the predicate "black" and labeled "laptop".

answer from file: 
select(X):-weight(X),not black(X,"laptop").

parsed from model: 
select(X):-weight(X),not black(X,"laptop").

facts: 
weight(1..3).black(1,"owner").black(2,"laptop").black(3,"cosenza").

generated: 
Formulate an ASP code to select values linked to the predicate "weight" but not associated with the predicate "black" and labeled "laptop".
Answer: select(X):-weight(X),not black(X,"laptop").
Explanation:
1. **select(X):-weight(X)**: This selects values linked to the predicate "weight".
2. **not black(X,"laptop")**: This selects values associated with the predicate "black" but not labeled "laptop".
3. The predicate "black" has fields "ID","height","city","description","name","price","author","city","description","name","height","price","description","author","city","description","name","height","price","description","author","city","description","name","height","price","description","author","city","description","name","height","price","description

unique_rules: 
['select(X):-weight(X),not black(X,"laptop").', '1. **select(X):-weight(X)**: This selects values linked to the predicate "weight".']

jaccard: 1.0

AS desired: [['weight(1)', 'weight(2)', 'weight(3)', 'black(1,"owner")', 'black(2,"laptop")', 'black(3,"cosenza")', 'select(1)', 'select(3)']]
\AS obtained: [['weight(1)', 'weight(2)', 'weight(3)', 'black(1,"owner")', 'black(2,"laptop")', 'black(3,"cosenza")', 'select(1)', 'select(3)']]


296
numeric_filtering

question: 
Create an ASP application to fetch all values tied to the predicate "storm" with a value different than 55.

answer from file: 
select(X):-storm(X,C),C!=55.

parsed from model: 
select(X):-storm(X,C),C!=55.

facts: 
storm(1..3, 1..100).

generated: 
Create an ASP application to fetch all values tied to the predicate "storm" with a value different than 55.
Answer: select(X):-storm(X,C),C!=55.
Explanation: The predicate "storm" includes elements tied to the predicate "author" with a value different than 55.
The predicate "author" contains elements tied to the predicate "city" with a value different than 55.
The predicate "city" contains elements tied to the predicate "moto" with a value different than 55.
So, the predicate "storm" includes elements tied to the predicate "author" with a value different than 55.

unique_rules: 
['select(X):-storm(X,C),C!=55.']

jaccard: 1.0

AS desired: [['storm(1,1)', 'storm(1,2)', 'storm(1,3)', 'storm(1,4)', 'storm(1,5)', 'storm(1,6)', 'storm(1,7)', 'storm(1,8)', 'storm(1,9)', 'storm(1,10)', 'storm(1,11)', 'storm(1,12)', 'storm(1,13)', 'storm(1,14)', 'storm(1,15)', 'storm(1,16)', 'storm(1,17)', 'storm(1,18)', 'storm(1,19)', 'storm(1,20)', 'storm(1,21)', 'storm(1,22)', 'storm(1,23)', 'storm(1,24)', 'storm(1,25)', 'storm(1,26)', 'storm(1,27)', 'storm(1,28)', 'storm(1,29)', 'storm(1,30)', 'storm(1,31)', 'storm(1,32)', 'storm(1,33)', 'storm(1,34)', 'storm(1,35)', 'storm(1,36)', 'storm(1,37)', 'storm(1,38)', 'storm(1,39)', 'storm(1,40)', 'storm(1,41)', 'storm(1,42)', 'storm(1,43)', 'storm(1,44)', 'storm(1,45)', 'storm(1,46)', 'storm(1,47)', 'storm(1,48)', 'storm(1,49)', 'storm(1,50)', 'storm(1,51)', 'storm(1,52)', 'storm(1,53)', 'storm(1,54)', 'storm(1,55)', 'storm(1,56)', 'storm(1,57)', 'storm(1,58)', 'storm(1,59)', 'storm(1,60)', 'storm(1,61)', 'storm(1,62)', 'storm(1,63)', 'storm(1,64)', 'storm(1,65)', 'storm(1,66)', 'storm(1,67)', 'storm(1,68)', 'storm(1,69)', 'storm(1,70)', 'storm(1,71)', 'storm(1,72)', 'storm(1,73)', 'storm(1,74)', 'storm(1,75)', 'storm(1,76)', 'storm(1,77)', 'storm(1,78)', 'storm(1,79)', 'storm(1,80)', 'storm(1,81)', 'storm(1,82)', 'storm(1,83)', 'storm(1,84)', 'storm(1,85)', 'storm(1,86)', 'storm(1,87)', 'storm(1,88)', 'storm(1,89)', 'storm(1,90)', 'storm(1,91)', 'storm(1,92)', 'storm(1,93)', 'storm(1,94)', 'storm(1,95)', 'storm(1,96)', 'storm(1,97)', 'storm(1,98)', 'storm(1,99)', 'storm(1,100)', 'storm(2,1)', 'storm(2,2)', 'storm(2,3)', 'storm(2,4)', 'storm(2,5)', 'storm(2,6)', 'storm(2,7)', 'storm(2,8)', 'storm(2,9)', 'storm(2,10)', 'storm(2,11)', 'storm(2,12)', 'storm(2,13)', 'storm(2,14)', 'storm(2,15)', 'storm(2,16)', 'storm(2,17)', 'storm(2,18)', 'storm(2,19)', 'storm(2,20)', 'storm(2,21)', 'storm(2,22)', 'storm(2,23)', 'storm(2,24)', 'storm(2,25)', 'storm(2,26)', 'storm(2,27)', 'storm(2,28)', 'storm(2,29)', 'storm(2,30)', 'storm(2,31)', 'storm(2,32)', 'storm(2,33)', 'storm(2,34)', 'storm(2,35)', 'storm(2,36)', 'storm(2,37)', 'storm(2,38)', 'storm(2,39)', 'storm(2,40)', 'storm(2,41)', 'storm(2,42)', 'storm(2,43)', 'storm(2,44)', 'storm(2,45)', 'storm(2,46)', 'storm(2,47)', 'storm(2,48)', 'storm(2,49)', 'storm(2,50)', 'storm(2,51)', 'storm(2,52)', 'storm(2,53)', 'storm(2,54)', 'storm(2,55)', 'storm(2,56)', 'storm(2,57)', 'storm(2,58)', 'storm(2,59)', 'storm(2,60)', 'storm(2,61)', 'storm(2,62)', 'storm(2,63)', 'storm(2,64)', 'storm(2,65)', 'storm(2,66)', 'storm(2,67)', 'storm(2,68)', 'storm(2,69)', 'storm(2,70)', 'storm(2,71)', 'storm(2,72)', 'storm(2,73)', 'storm(2,74)', 'storm(2,75)', 'storm(2,76)', 'storm(2,77)', 'storm(2,78)', 'storm(2,79)', 'storm(2,80)', 'storm(2,81)', 'storm(2,82)', 'storm(2,83)', 'storm(2,84)', 'storm(2,85)', 'storm(2,86)', 'storm(2,87)', 'storm(2,88)', 'storm(2,89)', 'storm(2,90)', 'storm(2,91)', 'storm(2,92)', 'storm(2,93)', 'storm(2,94)', 'storm(2,95)', 'storm(2,96)', 'storm(2,97)', 'storm(2,98)', 'storm(2,99)', 'storm(2,100)', 'storm(3,1)', 'storm(3,2)', 'storm(3,3)', 'storm(3,4)', 'storm(3,5)', 'storm(3,6)', 'storm(3,7)', 'storm(3,8)', 'storm(3,9)', 'storm(3,10)', 'storm(3,11)', 'storm(3,12)', 'storm(3,13)', 'storm(3,14)', 'storm(3,15)', 'storm(3,16)', 'storm(3,17)', 'storm(3,18)', 'storm(3,19)', 'storm(3,20)', 'storm(3,21)', 'storm(3,22)', 'storm(3,23)', 'storm(3,24)', 'storm(3,25)', 'storm(3,26)', 'storm(3,27)', 'storm(3,28)', 'storm(3,29)', 'storm(3,30)', 'storm(3,31)', 'storm(3,32)', 'storm(3,33)', 'storm(3,34)', 'storm(3,35)', 'storm(3,36)', 'storm(3,37)', 'storm(3,38)', 'storm(3,39)', 'storm(3,40)', 'storm(3,41)', 'storm(3,42)', 'storm(3,43)', 'storm(3,44)', 'storm(3,45)', 'storm(3,46)', 'storm(3,47)', 'storm(3,48)', 'storm(3,49)', 'storm(3,50)', 'storm(3,51)', 'storm(3,52)', 'storm(3,53)', 'storm(3,54)', 'storm(3,55)', 'storm(3,56)', 'storm(3,57)', 'storm(3,58)', 'storm(3,59)', 'storm(3,60)', 'storm(3,61)', 'storm(3,62)', 'storm(3,63)', 'storm(3,64)', 'storm(3,65)', 'storm(3,66)', 'storm(3,67)', 'storm(3,68)', 'storm(3,69)', 'storm(3,70)', 'storm(3,71)', 'storm(3,72)', 'storm(3,73)', 'storm(3,74)', 'storm(3,75)', 'storm(3,76)', 'storm(3,77)', 'storm(3,78)', 'storm(3,79)', 'storm(3,80)', 'storm(3,81)', 'storm(3,82)', 'storm(3,83)', 'storm(3,84)', 'storm(3,85)', 'storm(3,86)', 'storm(3,87)', 'storm(3,88)', 'storm(3,89)', 'storm(3,90)', 'storm(3,91)', 'storm(3,92)', 'storm(3,93)', 'storm(3,94)', 'storm(3,95)', 'storm(3,96)', 'storm(3,97)', 'storm(3,98)', 'storm(3,99)', 'storm(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['storm(1,1)', 'storm(1,2)', 'storm(1,3)', 'storm(1,4)', 'storm(1,5)', 'storm(1,6)', 'storm(1,7)', 'storm(1,8)', 'storm(1,9)', 'storm(1,10)', 'storm(1,11)', 'storm(1,12)', 'storm(1,13)', 'storm(1,14)', 'storm(1,15)', 'storm(1,16)', 'storm(1,17)', 'storm(1,18)', 'storm(1,19)', 'storm(1,20)', 'storm(1,21)', 'storm(1,22)', 'storm(1,23)', 'storm(1,24)', 'storm(1,25)', 'storm(1,26)', 'storm(1,27)', 'storm(1,28)', 'storm(1,29)', 'storm(1,30)', 'storm(1,31)', 'storm(1,32)', 'storm(1,33)', 'storm(1,34)', 'storm(1,35)', 'storm(1,36)', 'storm(1,37)', 'storm(1,38)', 'storm(1,39)', 'storm(1,40)', 'storm(1,41)', 'storm(1,42)', 'storm(1,43)', 'storm(1,44)', 'storm(1,45)', 'storm(1,46)', 'storm(1,47)', 'storm(1,48)', 'storm(1,49)', 'storm(1,50)', 'storm(1,51)', 'storm(1,52)', 'storm(1,53)', 'storm(1,54)', 'storm(1,55)', 'storm(1,56)', 'storm(1,57)', 'storm(1,58)', 'storm(1,59)', 'storm(1,60)', 'storm(1,61)', 'storm(1,62)', 'storm(1,63)', 'storm(1,64)', 'storm(1,65)', 'storm(1,66)', 'storm(1,67)', 'storm(1,68)', 'storm(1,69)', 'storm(1,70)', 'storm(1,71)', 'storm(1,72)', 'storm(1,73)', 'storm(1,74)', 'storm(1,75)', 'storm(1,76)', 'storm(1,77)', 'storm(1,78)', 'storm(1,79)', 'storm(1,80)', 'storm(1,81)', 'storm(1,82)', 'storm(1,83)', 'storm(1,84)', 'storm(1,85)', 'storm(1,86)', 'storm(1,87)', 'storm(1,88)', 'storm(1,89)', 'storm(1,90)', 'storm(1,91)', 'storm(1,92)', 'storm(1,93)', 'storm(1,94)', 'storm(1,95)', 'storm(1,96)', 'storm(1,97)', 'storm(1,98)', 'storm(1,99)', 'storm(1,100)', 'storm(2,1)', 'storm(2,2)', 'storm(2,3)', 'storm(2,4)', 'storm(2,5)', 'storm(2,6)', 'storm(2,7)', 'storm(2,8)', 'storm(2,9)', 'storm(2,10)', 'storm(2,11)', 'storm(2,12)', 'storm(2,13)', 'storm(2,14)', 'storm(2,15)', 'storm(2,16)', 'storm(2,17)', 'storm(2,18)', 'storm(2,19)', 'storm(2,20)', 'storm(2,21)', 'storm(2,22)', 'storm(2,23)', 'storm(2,24)', 'storm(2,25)', 'storm(2,26)', 'storm(2,27)', 'storm(2,28)', 'storm(2,29)', 'storm(2,30)', 'storm(2,31)', 'storm(2,32)', 'storm(2,33)', 'storm(2,34)', 'storm(2,35)', 'storm(2,36)', 'storm(2,37)', 'storm(2,38)', 'storm(2,39)', 'storm(2,40)', 'storm(2,41)', 'storm(2,42)', 'storm(2,43)', 'storm(2,44)', 'storm(2,45)', 'storm(2,46)', 'storm(2,47)', 'storm(2,48)', 'storm(2,49)', 'storm(2,50)', 'storm(2,51)', 'storm(2,52)', 'storm(2,53)', 'storm(2,54)', 'storm(2,55)', 'storm(2,56)', 'storm(2,57)', 'storm(2,58)', 'storm(2,59)', 'storm(2,60)', 'storm(2,61)', 'storm(2,62)', 'storm(2,63)', 'storm(2,64)', 'storm(2,65)', 'storm(2,66)', 'storm(2,67)', 'storm(2,68)', 'storm(2,69)', 'storm(2,70)', 'storm(2,71)', 'storm(2,72)', 'storm(2,73)', 'storm(2,74)', 'storm(2,75)', 'storm(2,76)', 'storm(2,77)', 'storm(2,78)', 'storm(2,79)', 'storm(2,80)', 'storm(2,81)', 'storm(2,82)', 'storm(2,83)', 'storm(2,84)', 'storm(2,85)', 'storm(2,86)', 'storm(2,87)', 'storm(2,88)', 'storm(2,89)', 'storm(2,90)', 'storm(2,91)', 'storm(2,92)', 'storm(2,93)', 'storm(2,94)', 'storm(2,95)', 'storm(2,96)', 'storm(2,97)', 'storm(2,98)', 'storm(2,99)', 'storm(2,100)', 'storm(3,1)', 'storm(3,2)', 'storm(3,3)', 'storm(3,4)', 'storm(3,5)', 'storm(3,6)', 'storm(3,7)', 'storm(3,8)', 'storm(3,9)', 'storm(3,10)', 'storm(3,11)', 'storm(3,12)', 'storm(3,13)', 'storm(3,14)', 'storm(3,15)', 'storm(3,16)', 'storm(3,17)', 'storm(3,18)', 'storm(3,19)', 'storm(3,20)', 'storm(3,21)', 'storm(3,22)', 'storm(3,23)', 'storm(3,24)', 'storm(3,25)', 'storm(3,26)', 'storm(3,27)', 'storm(3,28)', 'storm(3,29)', 'storm(3,30)', 'storm(3,31)', 'storm(3,32)', 'storm(3,33)', 'storm(3,34)', 'storm(3,35)', 'storm(3,36)', 'storm(3,37)', 'storm(3,38)', 'storm(3,39)', 'storm(3,40)', 'storm(3,41)', 'storm(3,42)', 'storm(3,43)', 'storm(3,44)', 'storm(3,45)', 'storm(3,46)', 'storm(3,47)', 'storm(3,48)', 'storm(3,49)', 'storm(3,50)', 'storm(3,51)', 'storm(3,52)', 'storm(3,53)', 'storm(3,54)', 'storm(3,55)', 'storm(3,56)', 'storm(3,57)', 'storm(3,58)', 'storm(3,59)', 'storm(3,60)', 'storm(3,61)', 'storm(3,62)', 'storm(3,63)', 'storm(3,64)', 'storm(3,65)', 'storm(3,66)', 'storm(3,67)', 'storm(3,68)', 'storm(3,69)', 'storm(3,70)', 'storm(3,71)', 'storm(3,72)', 'storm(3,73)', 'storm(3,74)', 'storm(3,75)', 'storm(3,76)', 'storm(3,77)', 'storm(3,78)', 'storm(3,79)', 'storm(3,80)', 'storm(3,81)', 'storm(3,82)', 'storm(3,83)', 'storm(3,84)', 'storm(3,85)', 'storm(3,86)', 'storm(3,87)', 'storm(3,88)', 'storm(3,89)', 'storm(3,90)', 'storm(3,91)', 'storm(3,92)', 'storm(3,93)', 'storm(3,94)', 'storm(3,95)', 'storm(3,96)', 'storm(3,97)', 'storm(3,98)', 'storm(3,99)', 'storm(3,100)', 'select(1)', 'select(2)', 'select(3)']]


297
assignment

question: 
Generate an ASP solution that links one label from "hair","lightblue","wall","singapore","chair","butterfly","desk","roof" with each element identified by the predicate "desk".

answer from file: 
assign(X,"hair")|assign(X,"lightblue")|assign(X,"wall")|assign(X,"singapore")|assign(X,"chair")|assign(X,"butterfly")|assign(X,"desk")|assign(X,"roof"):-desk(X).

parsed from model: 
assign(X,"hair")|assign(X,"lightblue")|assign(X,"wall")|assign(X,"singapore")|assign(X,"chair")|assign(X," arrivant")|assign(X,"roof"):-desk(X).

facts: 
desk(1..5).

generated: 
Generate an ASP solution that links one label from "hair","lightblue","wall","singapore","chair","butterfly","desk","roof" with each element identified by the predicate "desk".
Answer: assign(X,"hair")|assign(X,"lightblue")|assign(X,"wall")|assign(X,"singapore")|assign(X,"chair")|assign(X," arrivant")|assign(X,"roof"):-desk(X).
assign(X,"city"):-desk(X).
assign(X,"author"):-desk(X).
assign(X,"description"):-desk(X).
assign(X,"height"):-desk(X).
assign(X,"name"):-desk(X).
assign(X,"price","height"):-desk(X).
assign(X,"price","description"):-desk(X).
assign(X

unique_rules: 
['assign(X,"hair")|assign(X,"lightblue")|assign(X,"wall")|assign(X,"singapore")|assign(X,"chair")|assign(X," arrivant")|assign(X,"roof"):-desk(X).', 'assign(X,"city"):-desk(X).', 'assign(X,"author"):-desk(X).', 'assign(X,"description"):-desk(X).', 'assign(X,"height"):-desk(X).', 'assign(X,"name"):-desk(X).', 'assign(X,"price","height"):-desk(X).', 'assign(X,"price","description"):-desk(X).']

jaccard: 0.0

AS desired: [['desk(1)', 'desk(2)', 'desk(3)', 'desk(4)', 'desk(5)', 'assign(1,"roof")', 'assign(2,"roof")', 'assign(3,"desk")', 'assign(4,"roof")', 'assign(5,"roof")']]
\AS obtained: [['desk(1)', 'desk(2)', 'desk(3)', 'desk(4)', 'desk(5)', 'assign(1,"roof")', 'assign(2,"roof")', 'assign(3,"roof")', 'assign(4,"roof")', 'assign(5,"roof")']]


298
constraint

question: 
Draft an ASP program to disallow assigning the predicate "barcelona" with value 14 to the label "cairo".

answer from file: 
:-assign(14,cairo).

parsed from model: 
:-assign(14,cairo).

facts: 
barcelona(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-barcelona(X).

generated: 
Draft an ASP program to disallow assigning the predicate "barcelona" with value 14 to the label "cairo".
Answer: :-assign(14,cairo).
Explanation: The predicate "bike" includes the "city" label, and the predicate "city" includes the "description" label.
The predicate "shangai" includes the "city" label, but not the "description" label.
So, the predicate "shangai" is the one that disallows assigning the predicate "bike" with value 14 to the label "description".

unique_rules: 
[':-assign(14,cairo).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'barcelona(1)', 'barcelona(2)', 'barcelona(3)', 'barcelona(4)', 'barcelona(5)', 'barcelona(6)', 'barcelona(7)', 'barcelona(8)', 'barcelona(9)', 'barcelona(10)', 'barcelona(11)', 'barcelona(12)', 'barcelona(13)', 'barcelona(14)', 'barcelona(15)', 'barcelona(16)', 'barcelona(17)', 'barcelona(18)', 'barcelona(19)', 'barcelona(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'barcelona(1)', 'barcelona(2)', 'barcelona(3)', 'barcelona(4)', 'barcelona(5)', 'barcelona(6)', 'barcelona(7)', 'barcelona(8)', 'barcelona(9)', 'barcelona(10)', 'barcelona(11)', 'barcelona(12)', 'barcelona(13)', 'barcelona(14)', 'barcelona(15)', 'barcelona(16)', 'barcelona(17)', 'barcelona(18)', 'barcelona(19)', 'barcelona(20)']]


299
combination

question: 
Develop an ASP script to produce all valid pairings of elements as defined by the predicates "chair" and "weight".

answer from file: 
combination(X,Y):-chair(X),weight(Y).

parsed from model: 
combination(X,Y):-chair(X),weight(Y).

facts: 
chair(1..4).weight(1..5).

generated: 
Develop an ASP script to produce all valid pairings of elements as defined by the predicates "chair" and "weight".
Answer: combination(X,Y):-chair(X),weight(Y).
combination(X,Y):-weight(X),chair(Y).
combination(X,Y):-chair(X),weight(Y).
combination(X,Y):-weight(X),chair(Y).

unique_rules: 
['combination(X,Y):-chair(X),weight(Y).', 'combination(X,Y):-weight(X),chair(Y).']

jaccard: 1.0

AS desired: [['weight(1)', 'weight(2)', 'weight(3)', 'weight(4)', 'weight(5)', 'chair(1)', 'chair(2)', 'chair(3)', 'chair(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['weight(1)', 'weight(2)', 'weight(3)', 'weight(4)', 'weight(5)', 'chair(1)', 'chair(2)', 'chair(3)', 'chair(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


300
join

question: 
Write an ASP program for the following problem. Consider predicate "cairo" having fields "ID","weight","lightblueID","quality", and the predicate "lightblue" having fields "ID","strength". Define a predicate "cairo_lightblue" that associates to each "cairo" the "strength" of "lightblue".

answer from file: 
cairo_lightblue(X,Z):-cairo(X,_,Y,_),lightblue(Y,Z).

parsed from model: 
cairo_lightblue(X,Z):-cairo(X,_,Y,_),lightblue(Y,Z).

facts: 
cairo("ID","weight","lightblueID","quality").lightblue("ID","strength").

generated: 
Write an ASP program for the following problem. Consider predicate "cairo" having fields "ID","weight","lightblueID","quality", and the predicate "lightblue" having fields "ID","strength". Define a predicate "cairo_lightblue" that associates to each "cairo" the "strength" of "lightblue".
Answer: cairo_lightblue(X,Z):-cairo(X,_,Y,_),lightblue(Y,Z).
cairo_lightblue(X,Z):-cairo(X,_,_,_),lightblue(Y,Z).
```
The predicate "lightblue" associates to each "lightblue" the "strength" of "city".
Answer: cairo_lightblue(X,Z):-lightblue(X,Z).

unique_rules: 
['cairo_lightblue(X,Z):-cairo(X,_,Y,_),lightblue(Y,Z).', 'cairo_lightblue(X,Z):-cairo(X,_,_,_),lightblue(Y,Z).', 'cairo_lightblue(X,Z):-lightblue(X,Z).']

jaccard: 1.0

AS desired: [['lightblue("ID","strength")', 'cairo("ID","weight","lightblueID","quality")']]
\AS obtained: [['lightblue("ID","strength")', 'cairo("ID","weight","lightblueID","quality")']]


301
closure

question: 
Create an ASP solution that establishes the transitive closure of the "surname" predicate, defined as "loops".

answer from file: 
loops(X,Y):-surname(X,Y).
loops(X,Y):-surname(X,Z),loops(Z,Y).

parsed from model: 
closure(X,Y):-loops(X,Y).
closure(X,Y):-loops(X,Z),closure(Z,Y).

facts: 
surname(1..3, 1..4).

generated: 
Create an ASP solution that establishes the transitive closure of the "surname" predicate, defined as "loops".
Answer: closure(X,Y):-loops(X,Y).
closure(X,Y):-loops(X,Z),closure(Z,Y).
closure(X,Y):-loops(X,Z),closure(Z,Y).
closure(X,Y):-loops(X,Y).
closure(X,Y):-loops(X,Z),loops(Z,Y).
closure(X,Y):-loops(X,Z),loops(Z,Y).

unique_rules: 
['closure(X,Y):-loops(X,Y).', 'closure(X,Y):-loops(X,Z),closure(Z,Y).', 'closure(X,Y):-loops(X,Z),loops(Z,Y).']

jaccard: 0.0

AS desired: [['surname(1,1)', 'surname(1,2)', 'surname(1,3)', 'surname(1,4)', 'surname(2,1)', 'surname(2,2)', 'surname(2,3)', 'surname(2,4)', 'surname(3,1)', 'surname(3,2)', 'surname(3,3)', 'surname(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]
\AS obtained: [['surname(1,1)', 'surname(1,2)', 'surname(1,3)', 'surname(1,4)', 'surname(2,1)', 'surname(2,2)', 'surname(2,3)', 'surname(2,4)', 'surname(3,1)', 'surname(3,2)', 'surname(3,3)', 'surname(3,4)']]


302
preference

question: 
Write an ASP program that disallows the association between "barcelona" with value "8" and "storm", with a cost of "1" at level "1" if this association occurs.

answer from file: 
:~assign(8,"storm").[1@1]

parsed from model: 
:-assign(8,"storm").

facts: 
barcelona(1..20).

generated: 
Write an ASP program that disallows the association between "barcelona" with value "8" and "storm", with a cost of "1" at level "1" if this association occurs.
Answer: :-assign(8,"storm").
Cost(1,1,"shangai").

unique_rules: 
[':-assign(8,"storm").']

jaccard: 1.0

AS desired: [['barcelona(1)', 'barcelona(2)', 'barcelona(3)', 'barcelona(4)', 'barcelona(5)', 'barcelona(6)', 'barcelona(7)', 'barcelona(8)', 'barcelona(9)', 'barcelona(10)', 'barcelona(11)', 'barcelona(12)', 'barcelona(13)', 'barcelona(14)', 'barcelona(15)', 'barcelona(16)', 'barcelona(17)', 'barcelona(18)', 'barcelona(19)', 'barcelona(20)']]
\AS obtained: [['barcelona(1)', 'barcelona(2)', 'barcelona(3)', 'barcelona(4)', 'barcelona(5)', 'barcelona(6)', 'barcelona(7)', 'barcelona(8)', 'barcelona(9)', 'barcelona(10)', 'barcelona(11)', 'barcelona(12)', 'barcelona(13)', 'barcelona(14)', 'barcelona(15)', 'barcelona(16)', 'barcelona(17)', 'barcelona(18)', 'barcelona(19)', 'barcelona(20)']]


303
filtering

question: 
Compose an ASP solution to gather data from the "cloud" predicate associated with the label "cosenza".

answer from file: 
select(X):-cloud(X,"cosenza").

parsed from model: 
select(X):-cloud(X,"cosenza").

facts: 
cloud(1..5, "cosenza").

generated: 
Compose an ASP solution to gather data from the "cloud" predicate associated with the label "cosenza".
Answer: select(X):-cloud(X,"cosenza").
cloud(X,Z):- felicità(X,Z).
 felicità(X,Z):-city(X,Z).

unique_rules: 
['select(X):-cloud(X,"cosenza").', 'cloud(X,Z):- felicità(X,Z).', 'felicità(X,Z):-city(X,Z).']

jaccard: 1.0

AS desired: [['cloud(1,"cosenza")', 'cloud(2,"cosenza")', 'cloud(3,"cosenza")', 'cloud(4,"cosenza")', 'cloud(5,"cosenza")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['cloud(1,"cosenza")', 'cloud(2,"cosenza")', 'cloud(3,"cosenza")', 'cloud(4,"cosenza")', 'cloud(5,"cosenza")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


304
negative_filtering

question: 
Draft an ASP solution to identify values associated with the predicate "chair" but not tied to the predicate "wall" and labeled "quality".

answer from file: 
select(X):-chair(X),not wall(X,"quality").

parsed from model: 
select(X):-chair(X),not wall(X,"quality").

facts: 
chair(1..3).wall(1,"wall").wall(2,"singapore").wall(3,"cosenza").

generated: 
Draft an ASP solution to identify values associated with the predicate "chair" but not tied to the predicate "wall" and labeled "quality".
Answer: select(X):-chair(X),not wall(X,"quality").
Explanation: The predicate "chair" includes values associated with the predicate "city", and the predicate "wall" includes values associated with the predicate "author".
The predicate "quality" includes values associated with the predicate "city".
The predicate "select" identifies values associated with the predicate "chair" but not tied to the predicate "wall" and labeled "quality".

unique_rules: 
['select(X):-chair(X),not wall(X,"quality").']

jaccard: 1.0

AS desired: [['chair(1)', 'chair(2)', 'chair(3)', 'wall(1,"wall")', 'wall(2,"singapore")', 'wall(3,"cosenza")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['chair(1)', 'chair(2)', 'chair(3)', 'wall(1,"wall")', 'wall(2,"singapore")', 'wall(3,"cosenza")', 'select(1)', 'select(2)', 'select(3)']]


305
numeric_filtering

question: 
Generate an ASP code to capture values associated with the predicate "strength" with a value different than 27.

answer from file: 
select(X):-strength(X,C),C!=27.

parsed from model: 
select(X):-strength(X,C),C!=27.

facts: 
strength(1..3, 1..100).

generated: 
Generate an ASP code to capture values associated with the predicate "strength" with a value different than 27.
Answer: select(X):-strength(X,C),C!=27.
strength(X,C):-strength(X,C),C==27.

unique_rules: 
['select(X):-strength(X,C),C!=27.', 'strength(X,C):-strength(X,C),C==27.']

jaccard: 1.0

AS desired: [['strength(1,1)', 'strength(1,2)', 'strength(1,3)', 'strength(1,4)', 'strength(1,5)', 'strength(1,6)', 'strength(1,7)', 'strength(1,8)', 'strength(1,9)', 'strength(1,10)', 'strength(1,11)', 'strength(1,12)', 'strength(1,13)', 'strength(1,14)', 'strength(1,15)', 'strength(1,16)', 'strength(1,17)', 'strength(1,18)', 'strength(1,19)', 'strength(1,20)', 'strength(1,21)', 'strength(1,22)', 'strength(1,23)', 'strength(1,24)', 'strength(1,25)', 'strength(1,26)', 'strength(1,27)', 'strength(1,28)', 'strength(1,29)', 'strength(1,30)', 'strength(1,31)', 'strength(1,32)', 'strength(1,33)', 'strength(1,34)', 'strength(1,35)', 'strength(1,36)', 'strength(1,37)', 'strength(1,38)', 'strength(1,39)', 'strength(1,40)', 'strength(1,41)', 'strength(1,42)', 'strength(1,43)', 'strength(1,44)', 'strength(1,45)', 'strength(1,46)', 'strength(1,47)', 'strength(1,48)', 'strength(1,49)', 'strength(1,50)', 'strength(1,51)', 'strength(1,52)', 'strength(1,53)', 'strength(1,54)', 'strength(1,55)', 'strength(1,56)', 'strength(1,57)', 'strength(1,58)', 'strength(1,59)', 'strength(1,60)', 'strength(1,61)', 'strength(1,62)', 'strength(1,63)', 'strength(1,64)', 'strength(1,65)', 'strength(1,66)', 'strength(1,67)', 'strength(1,68)', 'strength(1,69)', 'strength(1,70)', 'strength(1,71)', 'strength(1,72)', 'strength(1,73)', 'strength(1,74)', 'strength(1,75)', 'strength(1,76)', 'strength(1,77)', 'strength(1,78)', 'strength(1,79)', 'strength(1,80)', 'strength(1,81)', 'strength(1,82)', 'strength(1,83)', 'strength(1,84)', 'strength(1,85)', 'strength(1,86)', 'strength(1,87)', 'strength(1,88)', 'strength(1,89)', 'strength(1,90)', 'strength(1,91)', 'strength(1,92)', 'strength(1,93)', 'strength(1,94)', 'strength(1,95)', 'strength(1,96)', 'strength(1,97)', 'strength(1,98)', 'strength(1,99)', 'strength(1,100)', 'strength(2,1)', 'strength(2,2)', 'strength(2,3)', 'strength(2,4)', 'strength(2,5)', 'strength(2,6)', 'strength(2,7)', 'strength(2,8)', 'strength(2,9)', 'strength(2,10)', 'strength(2,11)', 'strength(2,12)', 'strength(2,13)', 'strength(2,14)', 'strength(2,15)', 'strength(2,16)', 'strength(2,17)', 'strength(2,18)', 'strength(2,19)', 'strength(2,20)', 'strength(2,21)', 'strength(2,22)', 'strength(2,23)', 'strength(2,24)', 'strength(2,25)', 'strength(2,26)', 'strength(2,27)', 'strength(2,28)', 'strength(2,29)', 'strength(2,30)', 'strength(2,31)', 'strength(2,32)', 'strength(2,33)', 'strength(2,34)', 'strength(2,35)', 'strength(2,36)', 'strength(2,37)', 'strength(2,38)', 'strength(2,39)', 'strength(2,40)', 'strength(2,41)', 'strength(2,42)', 'strength(2,43)', 'strength(2,44)', 'strength(2,45)', 'strength(2,46)', 'strength(2,47)', 'strength(2,48)', 'strength(2,49)', 'strength(2,50)', 'strength(2,51)', 'strength(2,52)', 'strength(2,53)', 'strength(2,54)', 'strength(2,55)', 'strength(2,56)', 'strength(2,57)', 'strength(2,58)', 'strength(2,59)', 'strength(2,60)', 'strength(2,61)', 'strength(2,62)', 'strength(2,63)', 'strength(2,64)', 'strength(2,65)', 'strength(2,66)', 'strength(2,67)', 'strength(2,68)', 'strength(2,69)', 'strength(2,70)', 'strength(2,71)', 'strength(2,72)', 'strength(2,73)', 'strength(2,74)', 'strength(2,75)', 'strength(2,76)', 'strength(2,77)', 'strength(2,78)', 'strength(2,79)', 'strength(2,80)', 'strength(2,81)', 'strength(2,82)', 'strength(2,83)', 'strength(2,84)', 'strength(2,85)', 'strength(2,86)', 'strength(2,87)', 'strength(2,88)', 'strength(2,89)', 'strength(2,90)', 'strength(2,91)', 'strength(2,92)', 'strength(2,93)', 'strength(2,94)', 'strength(2,95)', 'strength(2,96)', 'strength(2,97)', 'strength(2,98)', 'strength(2,99)', 'strength(2,100)', 'strength(3,1)', 'strength(3,2)', 'strength(3,3)', 'strength(3,4)', 'strength(3,5)', 'strength(3,6)', 'strength(3,7)', 'strength(3,8)', 'strength(3,9)', 'strength(3,10)', 'strength(3,11)', 'strength(3,12)', 'strength(3,13)', 'strength(3,14)', 'strength(3,15)', 'strength(3,16)', 'strength(3,17)', 'strength(3,18)', 'strength(3,19)', 'strength(3,20)', 'strength(3,21)', 'strength(3,22)', 'strength(3,23)', 'strength(3,24)', 'strength(3,25)', 'strength(3,26)', 'strength(3,27)', 'strength(3,28)', 'strength(3,29)', 'strength(3,30)', 'strength(3,31)', 'strength(3,32)', 'strength(3,33)', 'strength(3,34)', 'strength(3,35)', 'strength(3,36)', 'strength(3,37)', 'strength(3,38)', 'strength(3,39)', 'strength(3,40)', 'strength(3,41)', 'strength(3,42)', 'strength(3,43)', 'strength(3,44)', 'strength(3,45)', 'strength(3,46)', 'strength(3,47)', 'strength(3,48)', 'strength(3,49)', 'strength(3,50)', 'strength(3,51)', 'strength(3,52)', 'strength(3,53)', 'strength(3,54)', 'strength(3,55)', 'strength(3,56)', 'strength(3,57)', 'strength(3,58)', 'strength(3,59)', 'strength(3,60)', 'strength(3,61)', 'strength(3,62)', 'strength(3,63)', 'strength(3,64)', 'strength(3,65)', 'strength(3,66)', 'strength(3,67)', 'strength(3,68)', 'strength(3,69)', 'strength(3,70)', 'strength(3,71)', 'strength(3,72)', 'strength(3,73)', 'strength(3,74)', 'strength(3,75)', 'strength(3,76)', 'strength(3,77)', 'strength(3,78)', 'strength(3,79)', 'strength(3,80)', 'strength(3,81)', 'strength(3,82)', 'strength(3,83)', 'strength(3,84)', 'strength(3,85)', 'strength(3,86)', 'strength(3,87)', 'strength(3,88)', 'strength(3,89)', 'strength(3,90)', 'strength(3,91)', 'strength(3,92)', 'strength(3,93)', 'strength(3,94)', 'strength(3,95)', 'strength(3,96)', 'strength(3,97)', 'strength(3,98)', 'strength(3,99)', 'strength(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['strength(1,1)', 'strength(1,2)', 'strength(1,3)', 'strength(1,4)', 'strength(1,5)', 'strength(1,6)', 'strength(1,7)', 'strength(1,8)', 'strength(1,9)', 'strength(1,10)', 'strength(1,11)', 'strength(1,12)', 'strength(1,13)', 'strength(1,14)', 'strength(1,15)', 'strength(1,16)', 'strength(1,17)', 'strength(1,18)', 'strength(1,19)', 'strength(1,20)', 'strength(1,21)', 'strength(1,22)', 'strength(1,23)', 'strength(1,24)', 'strength(1,25)', 'strength(1,26)', 'strength(1,27)', 'strength(1,28)', 'strength(1,29)', 'strength(1,30)', 'strength(1,31)', 'strength(1,32)', 'strength(1,33)', 'strength(1,34)', 'strength(1,35)', 'strength(1,36)', 'strength(1,37)', 'strength(1,38)', 'strength(1,39)', 'strength(1,40)', 'strength(1,41)', 'strength(1,42)', 'strength(1,43)', 'strength(1,44)', 'strength(1,45)', 'strength(1,46)', 'strength(1,47)', 'strength(1,48)', 'strength(1,49)', 'strength(1,50)', 'strength(1,51)', 'strength(1,52)', 'strength(1,53)', 'strength(1,54)', 'strength(1,55)', 'strength(1,56)', 'strength(1,57)', 'strength(1,58)', 'strength(1,59)', 'strength(1,60)', 'strength(1,61)', 'strength(1,62)', 'strength(1,63)', 'strength(1,64)', 'strength(1,65)', 'strength(1,66)', 'strength(1,67)', 'strength(1,68)', 'strength(1,69)', 'strength(1,70)', 'strength(1,71)', 'strength(1,72)', 'strength(1,73)', 'strength(1,74)', 'strength(1,75)', 'strength(1,76)', 'strength(1,77)', 'strength(1,78)', 'strength(1,79)', 'strength(1,80)', 'strength(1,81)', 'strength(1,82)', 'strength(1,83)', 'strength(1,84)', 'strength(1,85)', 'strength(1,86)', 'strength(1,87)', 'strength(1,88)', 'strength(1,89)', 'strength(1,90)', 'strength(1,91)', 'strength(1,92)', 'strength(1,93)', 'strength(1,94)', 'strength(1,95)', 'strength(1,96)', 'strength(1,97)', 'strength(1,98)', 'strength(1,99)', 'strength(1,100)', 'strength(2,1)', 'strength(2,2)', 'strength(2,3)', 'strength(2,4)', 'strength(2,5)', 'strength(2,6)', 'strength(2,7)', 'strength(2,8)', 'strength(2,9)', 'strength(2,10)', 'strength(2,11)', 'strength(2,12)', 'strength(2,13)', 'strength(2,14)', 'strength(2,15)', 'strength(2,16)', 'strength(2,17)', 'strength(2,18)', 'strength(2,19)', 'strength(2,20)', 'strength(2,21)', 'strength(2,22)', 'strength(2,23)', 'strength(2,24)', 'strength(2,25)', 'strength(2,26)', 'strength(2,27)', 'strength(2,28)', 'strength(2,29)', 'strength(2,30)', 'strength(2,31)', 'strength(2,32)', 'strength(2,33)', 'strength(2,34)', 'strength(2,35)', 'strength(2,36)', 'strength(2,37)', 'strength(2,38)', 'strength(2,39)', 'strength(2,40)', 'strength(2,41)', 'strength(2,42)', 'strength(2,43)', 'strength(2,44)', 'strength(2,45)', 'strength(2,46)', 'strength(2,47)', 'strength(2,48)', 'strength(2,49)', 'strength(2,50)', 'strength(2,51)', 'strength(2,52)', 'strength(2,53)', 'strength(2,54)', 'strength(2,55)', 'strength(2,56)', 'strength(2,57)', 'strength(2,58)', 'strength(2,59)', 'strength(2,60)', 'strength(2,61)', 'strength(2,62)', 'strength(2,63)', 'strength(2,64)', 'strength(2,65)', 'strength(2,66)', 'strength(2,67)', 'strength(2,68)', 'strength(2,69)', 'strength(2,70)', 'strength(2,71)', 'strength(2,72)', 'strength(2,73)', 'strength(2,74)', 'strength(2,75)', 'strength(2,76)', 'strength(2,77)', 'strength(2,78)', 'strength(2,79)', 'strength(2,80)', 'strength(2,81)', 'strength(2,82)', 'strength(2,83)', 'strength(2,84)', 'strength(2,85)', 'strength(2,86)', 'strength(2,87)', 'strength(2,88)', 'strength(2,89)', 'strength(2,90)', 'strength(2,91)', 'strength(2,92)', 'strength(2,93)', 'strength(2,94)', 'strength(2,95)', 'strength(2,96)', 'strength(2,97)', 'strength(2,98)', 'strength(2,99)', 'strength(2,100)', 'strength(3,1)', 'strength(3,2)', 'strength(3,3)', 'strength(3,4)', 'strength(3,5)', 'strength(3,6)', 'strength(3,7)', 'strength(3,8)', 'strength(3,9)', 'strength(3,10)', 'strength(3,11)', 'strength(3,12)', 'strength(3,13)', 'strength(3,14)', 'strength(3,15)', 'strength(3,16)', 'strength(3,17)', 'strength(3,18)', 'strength(3,19)', 'strength(3,20)', 'strength(3,21)', 'strength(3,22)', 'strength(3,23)', 'strength(3,24)', 'strength(3,25)', 'strength(3,26)', 'strength(3,27)', 'strength(3,28)', 'strength(3,29)', 'strength(3,30)', 'strength(3,31)', 'strength(3,32)', 'strength(3,33)', 'strength(3,34)', 'strength(3,35)', 'strength(3,36)', 'strength(3,37)', 'strength(3,38)', 'strength(3,39)', 'strength(3,40)', 'strength(3,41)', 'strength(3,42)', 'strength(3,43)', 'strength(3,44)', 'strength(3,45)', 'strength(3,46)', 'strength(3,47)', 'strength(3,48)', 'strength(3,49)', 'strength(3,50)', 'strength(3,51)', 'strength(3,52)', 'strength(3,53)', 'strength(3,54)', 'strength(3,55)', 'strength(3,56)', 'strength(3,57)', 'strength(3,58)', 'strength(3,59)', 'strength(3,60)', 'strength(3,61)', 'strength(3,62)', 'strength(3,63)', 'strength(3,64)', 'strength(3,65)', 'strength(3,66)', 'strength(3,67)', 'strength(3,68)', 'strength(3,69)', 'strength(3,70)', 'strength(3,71)', 'strength(3,72)', 'strength(3,73)', 'strength(3,74)', 'strength(3,75)', 'strength(3,76)', 'strength(3,77)', 'strength(3,78)', 'strength(3,79)', 'strength(3,80)', 'strength(3,81)', 'strength(3,82)', 'strength(3,83)', 'strength(3,84)', 'strength(3,85)', 'strength(3,86)', 'strength(3,87)', 'strength(3,88)', 'strength(3,89)', 'strength(3,90)', 'strength(3,91)', 'strength(3,92)', 'strength(3,93)', 'strength(3,94)', 'strength(3,95)', 'strength(3,96)', 'strength(3,97)', 'strength(3,98)', 'strength(3,99)', 'strength(3,100)', 'select(1)', 'select(2)', 'select(3)']]


306
assignment

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate singapore. The labels are "chair","storm","lake","black","white".

answer from file: 
assign(X,"chair")|assign(X,"storm")|assign(X,"lake")|assign(X,"black")|assign(X,"white"):-singapore(X).

parsed from model: 
assign(X,"chair")|assign(X,"storm")|assign(X,"lake")|assign(X,"black")|assign(X,"white"):-singapore(X).

facts: 
singapore(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate singapore. The labels are "chair","storm","lake","black","white".
Answer: assign(X,"chair")|assign(X,"storm")|assign(X,"lake")|assign(X,"black")|assign(X,"white"):-singapore(X).
assign(X,"city"):-description(X).
description(X):-city(X).
city(X):-description(X).
description(X):-rome(X).
rome(X):-description(X).
rome(X):-city(X).
city(X):-rome(X).
rome(X):-city(X).
city(X):-description(X).
rome(X):-city(X).
city(X):

unique_rules: 
['assign(X,"chair")|assign(X,"storm")|assign(X,"lake")|assign(X,"black")|assign(X,"white"):-singapore(X).', 'assign(X,"city"):-description(X).', 'description(X):-city(X).', 'city(X):-description(X).', 'description(X):-rome(X).', 'rome(X):-description(X).', 'rome(X):-city(X).', 'city(X):-rome(X).']

jaccard: 1.0

AS desired: [['singapore(1)', 'singapore(2)', 'singapore(3)', 'singapore(4)', 'singapore(5)', 'assign(1,"white")', 'assign(2,"white")', 'assign(3,"white")', 'assign(4,"white")', 'assign(5,"white")']]
\AS obtained: [['singapore(1)', 'singapore(2)', 'singapore(3)', 'singapore(4)', 'singapore(5)', 'assign(1,"white")', 'assign(2,"white")', 'assign(3,"white")', 'assign(4,"white")', 'assign(5,"white")']]


307
constraint

question: 
Create an ASP code snippet to ensure the "cairo" predicate with a value of 10 is not linked to the label "laptop".

answer from file: 
:-assign(10,laptop).

parsed from model: 
:-assign(10,laptop).

facts: 
cairo(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-cairo(X).

generated: 
Create an ASP code snippet to ensure the "cairo" predicate with a value of 10 is not linked to the label "laptop".
Answer: :-assign(10,laptop).
Explanation: The predicate "city" includes a "city" label for the "shangai" value, and the predicate "shangai" contains a "city" label for the "height" value. If the "city" label is assigned to the "height" value, it violates the "city" label constraint.

unique_rules: 
[':-assign(10,laptop).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'cairo(1)', 'cairo(2)', 'cairo(3)', 'cairo(4)', 'cairo(5)', 'cairo(6)', 'cairo(7)', 'cairo(8)', 'cairo(9)', 'cairo(10)', 'cairo(11)', 'cairo(12)', 'cairo(13)', 'cairo(14)', 'cairo(15)', 'cairo(16)', 'cairo(17)', 'cairo(18)', 'cairo(19)', 'cairo(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'cairo(1)', 'cairo(2)', 'cairo(3)', 'cairo(4)', 'cairo(5)', 'cairo(6)', 'cairo(7)', 'cairo(8)', 'cairo(9)', 'cairo(10)', 'cairo(11)', 'cairo(12)', 'cairo(13)', 'cairo(14)', 'cairo(15)', 'cairo(16)', 'cairo(17)', 'cairo(18)', 'cairo(19)', 'cairo(20)']]


308
combination

question: 
Develop an ASP code snippet to produce all valid combinations of elements from the "lightblue" and "lake" sets.

answer from file: 
combination(X,Y):-lightblue(X),lake(Y).

parsed from model: 
combination(X,Y):-lightblue(X),lake(Y).

facts: 
lightblue(1..4).lake(1..5).

generated: 
Develop an ASP code snippet to produce all valid combinations of elements from the "lightblue" and "lake" sets.
Answer: combination(X,Y):-lightblue(X),lake(Y).
combination(X,Y):-lightblue(X),not lake(Y).
combination(X,Y):-not lightblue(X),lake(Y).

unique_rules: 
['combination(X,Y):-lightblue(X),lake(Y).', 'combination(X,Y):-lightblue(X),not lake(Y).', 'combination(X,Y):-not lightblue(X),lake(Y).']

jaccard: 1.0

AS desired: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'lightblue(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'lightblue(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


309
join

question: 
Develop an ASP solution that defines the predicate "lake_storm" to link each lake to the surname of storm, with "lake" having fields "ID","stormID","owner","weight","lake" and "storm" having fields "ID","surname","owner".

answer from file: 
lake_storm(X,Z):-lake(X,Y,_,_,_),storm(Y,Z,_).

parsed from model: 
lake_storm(X,Z):-lake(X,Y,_,_,_),storm(Y,Z,_).

facts: 
lake("ID","stormID","owner","weight","lake").storm("ID","surname","owner").

generated: 
Develop an ASP solution that defines the predicate "lake_storm" to link each lake to the surname of storm, with "lake" having fields "ID","stormID","owner","weight","lake" and "storm" having fields "ID","surname","owner". Define the predicate "lake_storm" that links each lake to the surname of storm.
Answer: lake_storm(X,Z):-lake(X,Y,_,_,_),storm(Y,Z,_).
lake_storm(X,Z):-lake(X,Y,_,_,Z),storm(Y,_,Z).

unique_rules: 
['lake_storm(X,Z):-lake(X,Y,_,_,_),storm(Y,Z,_).', 'lake_storm(X,Z):-lake(X,Y,_,_,Z),storm(Y,_,Z).']

jaccard: 1.0

AS desired: [['lake("ID","stormID","owner","weight","lake")', 'storm("ID","surname","owner")']]
\AS obtained: [['lake("ID","stormID","owner","weight","lake")', 'storm("ID","surname","owner")']]


310
closure

question: 
Create an ASP solution that establishes the transitive closure of the "moscow" predicate, defined as "loops".

answer from file: 
loops(X,Y):-moscow(X,Y).
loops(X,Y):-moscow(X,Z),loops(Z,Y).

parsed from model: 


facts: 
moscow(1..3, 1..4).

generated: 
Create an ASP solution that establishes the transitive closure of the "moscow" predicate, defined as "loops".
Answer: closure(loops)
closure(loops) = {X|X∈loops}.
closure(loops) = loops.
closure(loops) = union(closure(X),closure(Y))|X,Y∈loops.
closure(loops) = union(X,Y)|X,Y∈loops.

unique_rules: 
[]

jaccard: 0.0

AS desired: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]
\AS obtained: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)']]


311
preference

question: 
Craft an ASP solution to prevent the linking of the "quality" predicate with value "5" to "quality". Any link incurs a cost of "1" at level "1".

answer from file: 
:~assign(5,"quality").[1@1]

parsed from model: 
:~assign(5,"quality").[1@1]

facts: 
quality(1..20).

generated: 
Craft an ASP solution to prevent the linking of the "quality" predicate with value "5" to "quality". Any link incurs a cost of "1" at level "1".
Answer: :~assign(5,"quality").[1@1]
Explanation: The predicate "quality" includes a link to the "city" label, and the predicate "city" contains a link to the "author" label. The predicate "author" includes a link to the "description" label.
The predicate "link" associates a single label from "city","author","description","rome","color","moto","author","description","city","rome","author","description","color","moto","author","description","city","rome","author","description","color","moto","author","description","city","rome","author","description","color","moto","author","description","city","rome","author","description","color

unique_rules: 
[':~assign(5,"quality").[1@1]']

jaccard: 1.0

AS desired: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'quality(6)', 'quality(7)', 'quality(8)', 'quality(9)', 'quality(10)', 'quality(11)', 'quality(12)', 'quality(13)', 'quality(14)', 'quality(15)', 'quality(16)', 'quality(17)', 'quality(18)', 'quality(19)', 'quality(20)']]
\AS obtained: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'quality(6)', 'quality(7)', 'quality(8)', 'quality(9)', 'quality(10)', 'quality(11)', 'quality(12)', 'quality(13)', 'quality(14)', 'quality(15)', 'quality(16)', 'quality(17)', 'quality(18)', 'quality(19)', 'quality(20)']]


312
filtering

question: 
Write an ASP script to collect values associated with the "surname" label from the "strength" predicate.

answer from file: 
select(X):-strength(X,"surname").

parsed from model: 
select(X):-strength(X,"description").

facts: 
strength(1..5, "surname").

generated: 
Write an ASP script to collect values associated with the "surname" label from the "strength" predicate.
Answer: select(X):-strength(X,"description").
select(X):-strength(X,"author").
select(X):-strength(X,"description","author").
strength(X,"description").
strength(X,"author").
strength(X,"description","author").

unique_rules: 
['select(X):-strength(X,"description").', 'select(X):-strength(X,"author").', 'select(X):-strength(X,"description","author").']

jaccard: 0.0

AS desired: [['strength(1,"surname")', 'strength(2,"surname")', 'strength(3,"surname")', 'strength(4,"surname")', 'strength(5,"surname")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['strength(1,"surname")', 'strength(2,"surname")', 'strength(3,"surname")', 'strength(4,"surname")', 'strength(5,"surname")']]


313
negative_filtering

question: 
Develop an ASP script to collect values tied to the predicate "flower" but not linked to the predicate "owner" and labeled "butterfly".

answer from file: 
select(X):-flower(X),not owner(X,"butterfly").

parsed from model: 
select(X):-flower(X),not owner(X,"butterfly").

facts: 
flower(1..3).owner(1,"surname").owner(2,"quality").owner(3,"black").

generated: 
Develop an ASP script to collect values tied to the predicate "flower" but not linked to the predicate "owner" and labeled "butterfly".
Answer: select(X):-flower(X),not owner(X,"butterfly").

unique_rules: 
['select(X):-flower(X),not owner(X,"butterfly").']

jaccard: 1.0

AS desired: [['flower(1)', 'flower(2)', 'flower(3)', 'owner(1,"surname")', 'owner(2,"quality")', 'owner(3,"black")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['flower(1)', 'flower(2)', 'flower(3)', 'owner(1,"surname")', 'owner(2,"quality")', 'owner(3,"black")', 'select(1)', 'select(2)', 'select(3)']]


314
numeric_filtering

question: 
Produce an ASP script to retrieve values associated with the predicate "flower" with a value different than 47.

answer from file: 
select(X):-flower(X,C),C!=47.

parsed from model: 
select(X):-flower(X,C),C!=47.

facts: 
flower(1..3, 1..100).

generated: 
Produce an ASP script to retrieve values associated with the predicate "flower" with a value different than 47.
Answer: select(X):-flower(X,C),C!=47.
select(X):-flower(X,C),C==47.

unique_rules: 
['select(X):-flower(X,C),C!=47.', 'select(X):-flower(X,C),C==47.']

jaccard: 1.0

AS desired: [['flower(1,1)', 'flower(1,2)', 'flower(1,3)', 'flower(1,4)', 'flower(1,5)', 'flower(1,6)', 'flower(1,7)', 'flower(1,8)', 'flower(1,9)', 'flower(1,10)', 'flower(1,11)', 'flower(1,12)', 'flower(1,13)', 'flower(1,14)', 'flower(1,15)', 'flower(1,16)', 'flower(1,17)', 'flower(1,18)', 'flower(1,19)', 'flower(1,20)', 'flower(1,21)', 'flower(1,22)', 'flower(1,23)', 'flower(1,24)', 'flower(1,25)', 'flower(1,26)', 'flower(1,27)', 'flower(1,28)', 'flower(1,29)', 'flower(1,30)', 'flower(1,31)', 'flower(1,32)', 'flower(1,33)', 'flower(1,34)', 'flower(1,35)', 'flower(1,36)', 'flower(1,37)', 'flower(1,38)', 'flower(1,39)', 'flower(1,40)', 'flower(1,41)', 'flower(1,42)', 'flower(1,43)', 'flower(1,44)', 'flower(1,45)', 'flower(1,46)', 'flower(1,47)', 'flower(1,48)', 'flower(1,49)', 'flower(1,50)', 'flower(1,51)', 'flower(1,52)', 'flower(1,53)', 'flower(1,54)', 'flower(1,55)', 'flower(1,56)', 'flower(1,57)', 'flower(1,58)', 'flower(1,59)', 'flower(1,60)', 'flower(1,61)', 'flower(1,62)', 'flower(1,63)', 'flower(1,64)', 'flower(1,65)', 'flower(1,66)', 'flower(1,67)', 'flower(1,68)', 'flower(1,69)', 'flower(1,70)', 'flower(1,71)', 'flower(1,72)', 'flower(1,73)', 'flower(1,74)', 'flower(1,75)', 'flower(1,76)', 'flower(1,77)', 'flower(1,78)', 'flower(1,79)', 'flower(1,80)', 'flower(1,81)', 'flower(1,82)', 'flower(1,83)', 'flower(1,84)', 'flower(1,85)', 'flower(1,86)', 'flower(1,87)', 'flower(1,88)', 'flower(1,89)', 'flower(1,90)', 'flower(1,91)', 'flower(1,92)', 'flower(1,93)', 'flower(1,94)', 'flower(1,95)', 'flower(1,96)', 'flower(1,97)', 'flower(1,98)', 'flower(1,99)', 'flower(1,100)', 'flower(2,1)', 'flower(2,2)', 'flower(2,3)', 'flower(2,4)', 'flower(2,5)', 'flower(2,6)', 'flower(2,7)', 'flower(2,8)', 'flower(2,9)', 'flower(2,10)', 'flower(2,11)', 'flower(2,12)', 'flower(2,13)', 'flower(2,14)', 'flower(2,15)', 'flower(2,16)', 'flower(2,17)', 'flower(2,18)', 'flower(2,19)', 'flower(2,20)', 'flower(2,21)', 'flower(2,22)', 'flower(2,23)', 'flower(2,24)', 'flower(2,25)', 'flower(2,26)', 'flower(2,27)', 'flower(2,28)', 'flower(2,29)', 'flower(2,30)', 'flower(2,31)', 'flower(2,32)', 'flower(2,33)', 'flower(2,34)', 'flower(2,35)', 'flower(2,36)', 'flower(2,37)', 'flower(2,38)', 'flower(2,39)', 'flower(2,40)', 'flower(2,41)', 'flower(2,42)', 'flower(2,43)', 'flower(2,44)', 'flower(2,45)', 'flower(2,46)', 'flower(2,47)', 'flower(2,48)', 'flower(2,49)', 'flower(2,50)', 'flower(2,51)', 'flower(2,52)', 'flower(2,53)', 'flower(2,54)', 'flower(2,55)', 'flower(2,56)', 'flower(2,57)', 'flower(2,58)', 'flower(2,59)', 'flower(2,60)', 'flower(2,61)', 'flower(2,62)', 'flower(2,63)', 'flower(2,64)', 'flower(2,65)', 'flower(2,66)', 'flower(2,67)', 'flower(2,68)', 'flower(2,69)', 'flower(2,70)', 'flower(2,71)', 'flower(2,72)', 'flower(2,73)', 'flower(2,74)', 'flower(2,75)', 'flower(2,76)', 'flower(2,77)', 'flower(2,78)', 'flower(2,79)', 'flower(2,80)', 'flower(2,81)', 'flower(2,82)', 'flower(2,83)', 'flower(2,84)', 'flower(2,85)', 'flower(2,86)', 'flower(2,87)', 'flower(2,88)', 'flower(2,89)', 'flower(2,90)', 'flower(2,91)', 'flower(2,92)', 'flower(2,93)', 'flower(2,94)', 'flower(2,95)', 'flower(2,96)', 'flower(2,97)', 'flower(2,98)', 'flower(2,99)', 'flower(2,100)', 'flower(3,1)', 'flower(3,2)', 'flower(3,3)', 'flower(3,4)', 'flower(3,5)', 'flower(3,6)', 'flower(3,7)', 'flower(3,8)', 'flower(3,9)', 'flower(3,10)', 'flower(3,11)', 'flower(3,12)', 'flower(3,13)', 'flower(3,14)', 'flower(3,15)', 'flower(3,16)', 'flower(3,17)', 'flower(3,18)', 'flower(3,19)', 'flower(3,20)', 'flower(3,21)', 'flower(3,22)', 'flower(3,23)', 'flower(3,24)', 'flower(3,25)', 'flower(3,26)', 'flower(3,27)', 'flower(3,28)', 'flower(3,29)', 'flower(3,30)', 'flower(3,31)', 'flower(3,32)', 'flower(3,33)', 'flower(3,34)', 'flower(3,35)', 'flower(3,36)', 'flower(3,37)', 'flower(3,38)', 'flower(3,39)', 'flower(3,40)', 'flower(3,41)', 'flower(3,42)', 'flower(3,43)', 'flower(3,44)', 'flower(3,45)', 'flower(3,46)', 'flower(3,47)', 'flower(3,48)', 'flower(3,49)', 'flower(3,50)', 'flower(3,51)', 'flower(3,52)', 'flower(3,53)', 'flower(3,54)', 'flower(3,55)', 'flower(3,56)', 'flower(3,57)', 'flower(3,58)', 'flower(3,59)', 'flower(3,60)', 'flower(3,61)', 'flower(3,62)', 'flower(3,63)', 'flower(3,64)', 'flower(3,65)', 'flower(3,66)', 'flower(3,67)', 'flower(3,68)', 'flower(3,69)', 'flower(3,70)', 'flower(3,71)', 'flower(3,72)', 'flower(3,73)', 'flower(3,74)', 'flower(3,75)', 'flower(3,76)', 'flower(3,77)', 'flower(3,78)', 'flower(3,79)', 'flower(3,80)', 'flower(3,81)', 'flower(3,82)', 'flower(3,83)', 'flower(3,84)', 'flower(3,85)', 'flower(3,86)', 'flower(3,87)', 'flower(3,88)', 'flower(3,89)', 'flower(3,90)', 'flower(3,91)', 'flower(3,92)', 'flower(3,93)', 'flower(3,94)', 'flower(3,95)', 'flower(3,96)', 'flower(3,97)', 'flower(3,98)', 'flower(3,99)', 'flower(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['flower(1,1)', 'flower(1,2)', 'flower(1,3)', 'flower(1,4)', 'flower(1,5)', 'flower(1,6)', 'flower(1,7)', 'flower(1,8)', 'flower(1,9)', 'flower(1,10)', 'flower(1,11)', 'flower(1,12)', 'flower(1,13)', 'flower(1,14)', 'flower(1,15)', 'flower(1,16)', 'flower(1,17)', 'flower(1,18)', 'flower(1,19)', 'flower(1,20)', 'flower(1,21)', 'flower(1,22)', 'flower(1,23)', 'flower(1,24)', 'flower(1,25)', 'flower(1,26)', 'flower(1,27)', 'flower(1,28)', 'flower(1,29)', 'flower(1,30)', 'flower(1,31)', 'flower(1,32)', 'flower(1,33)', 'flower(1,34)', 'flower(1,35)', 'flower(1,36)', 'flower(1,37)', 'flower(1,38)', 'flower(1,39)', 'flower(1,40)', 'flower(1,41)', 'flower(1,42)', 'flower(1,43)', 'flower(1,44)', 'flower(1,45)', 'flower(1,46)', 'flower(1,47)', 'flower(1,48)', 'flower(1,49)', 'flower(1,50)', 'flower(1,51)', 'flower(1,52)', 'flower(1,53)', 'flower(1,54)', 'flower(1,55)', 'flower(1,56)', 'flower(1,57)', 'flower(1,58)', 'flower(1,59)', 'flower(1,60)', 'flower(1,61)', 'flower(1,62)', 'flower(1,63)', 'flower(1,64)', 'flower(1,65)', 'flower(1,66)', 'flower(1,67)', 'flower(1,68)', 'flower(1,69)', 'flower(1,70)', 'flower(1,71)', 'flower(1,72)', 'flower(1,73)', 'flower(1,74)', 'flower(1,75)', 'flower(1,76)', 'flower(1,77)', 'flower(1,78)', 'flower(1,79)', 'flower(1,80)', 'flower(1,81)', 'flower(1,82)', 'flower(1,83)', 'flower(1,84)', 'flower(1,85)', 'flower(1,86)', 'flower(1,87)', 'flower(1,88)', 'flower(1,89)', 'flower(1,90)', 'flower(1,91)', 'flower(1,92)', 'flower(1,93)', 'flower(1,94)', 'flower(1,95)', 'flower(1,96)', 'flower(1,97)', 'flower(1,98)', 'flower(1,99)', 'flower(1,100)', 'flower(2,1)', 'flower(2,2)', 'flower(2,3)', 'flower(2,4)', 'flower(2,5)', 'flower(2,6)', 'flower(2,7)', 'flower(2,8)', 'flower(2,9)', 'flower(2,10)', 'flower(2,11)', 'flower(2,12)', 'flower(2,13)', 'flower(2,14)', 'flower(2,15)', 'flower(2,16)', 'flower(2,17)', 'flower(2,18)', 'flower(2,19)', 'flower(2,20)', 'flower(2,21)', 'flower(2,22)', 'flower(2,23)', 'flower(2,24)', 'flower(2,25)', 'flower(2,26)', 'flower(2,27)', 'flower(2,28)', 'flower(2,29)', 'flower(2,30)', 'flower(2,31)', 'flower(2,32)', 'flower(2,33)', 'flower(2,34)', 'flower(2,35)', 'flower(2,36)', 'flower(2,37)', 'flower(2,38)', 'flower(2,39)', 'flower(2,40)', 'flower(2,41)', 'flower(2,42)', 'flower(2,43)', 'flower(2,44)', 'flower(2,45)', 'flower(2,46)', 'flower(2,47)', 'flower(2,48)', 'flower(2,49)', 'flower(2,50)', 'flower(2,51)', 'flower(2,52)', 'flower(2,53)', 'flower(2,54)', 'flower(2,55)', 'flower(2,56)', 'flower(2,57)', 'flower(2,58)', 'flower(2,59)', 'flower(2,60)', 'flower(2,61)', 'flower(2,62)', 'flower(2,63)', 'flower(2,64)', 'flower(2,65)', 'flower(2,66)', 'flower(2,67)', 'flower(2,68)', 'flower(2,69)', 'flower(2,70)', 'flower(2,71)', 'flower(2,72)', 'flower(2,73)', 'flower(2,74)', 'flower(2,75)', 'flower(2,76)', 'flower(2,77)', 'flower(2,78)', 'flower(2,79)', 'flower(2,80)', 'flower(2,81)', 'flower(2,82)', 'flower(2,83)', 'flower(2,84)', 'flower(2,85)', 'flower(2,86)', 'flower(2,87)', 'flower(2,88)', 'flower(2,89)', 'flower(2,90)', 'flower(2,91)', 'flower(2,92)', 'flower(2,93)', 'flower(2,94)', 'flower(2,95)', 'flower(2,96)', 'flower(2,97)', 'flower(2,98)', 'flower(2,99)', 'flower(2,100)', 'flower(3,1)', 'flower(3,2)', 'flower(3,3)', 'flower(3,4)', 'flower(3,5)', 'flower(3,6)', 'flower(3,7)', 'flower(3,8)', 'flower(3,9)', 'flower(3,10)', 'flower(3,11)', 'flower(3,12)', 'flower(3,13)', 'flower(3,14)', 'flower(3,15)', 'flower(3,16)', 'flower(3,17)', 'flower(3,18)', 'flower(3,19)', 'flower(3,20)', 'flower(3,21)', 'flower(3,22)', 'flower(3,23)', 'flower(3,24)', 'flower(3,25)', 'flower(3,26)', 'flower(3,27)', 'flower(3,28)', 'flower(3,29)', 'flower(3,30)', 'flower(3,31)', 'flower(3,32)', 'flower(3,33)', 'flower(3,34)', 'flower(3,35)', 'flower(3,36)', 'flower(3,37)', 'flower(3,38)', 'flower(3,39)', 'flower(3,40)', 'flower(3,41)', 'flower(3,42)', 'flower(3,43)', 'flower(3,44)', 'flower(3,45)', 'flower(3,46)', 'flower(3,47)', 'flower(3,48)', 'flower(3,49)', 'flower(3,50)', 'flower(3,51)', 'flower(3,52)', 'flower(3,53)', 'flower(3,54)', 'flower(3,55)', 'flower(3,56)', 'flower(3,57)', 'flower(3,58)', 'flower(3,59)', 'flower(3,60)', 'flower(3,61)', 'flower(3,62)', 'flower(3,63)', 'flower(3,64)', 'flower(3,65)', 'flower(3,66)', 'flower(3,67)', 'flower(3,68)', 'flower(3,69)', 'flower(3,70)', 'flower(3,71)', 'flower(3,72)', 'flower(3,73)', 'flower(3,74)', 'flower(3,75)', 'flower(3,76)', 'flower(3,77)', 'flower(3,78)', 'flower(3,79)', 'flower(3,80)', 'flower(3,81)', 'flower(3,82)', 'flower(3,83)', 'flower(3,84)', 'flower(3,85)', 'flower(3,86)', 'flower(3,87)', 'flower(3,88)', 'flower(3,89)', 'flower(3,90)', 'flower(3,91)', 'flower(3,92)', 'flower(3,93)', 'flower(3,94)', 'flower(3,95)', 'flower(3,96)', 'flower(3,97)', 'flower(3,98)', 'flower(3,99)', 'flower(3,100)', 'select(1)', 'select(2)', 'select(3)']]


315
assignment

question: 
Write an ASP solution to connect each element defined by the predicate "chicago" with a single label from "lightblue","singapore","white","cloud","owner","pink","wall","quality","darkmagenta".

answer from file: 
assign(X,"lightblue")|assign(X,"singapore")|assign(X,"white")|assign(X,"cloud")|assign(X,"owner")|assign(X,"pink")|assign(X,"wall")|assign(X,"quality")|assign(X,"darkmagenta"):-chicago(X).

parsed from model: 
assign(X,"lightblue")|assign(X,"singapore")|assign(X,"white")|assign(X,"cloud")|assign(X,"owner")|assign(X,"pink")|assign(X,"wall")|assign(X,"quality")|assign(X,"darkmagenta"):-chicago(X).

facts: 
chicago(1..5).

generated: 
Write an ASP solution to connect each element defined by the predicate "chicago" with a single label from "lightblue","singapore","white","cloud","owner","pink","wall","quality","darkmagenta".
Answer: assign(X,"lightblue")|assign(X,"singapore")|assign(X,"white")|assign(X,"cloud")|assign(X,"owner")|assign(X,"pink")|assign(X,"wall")|assign(X,"quality")|assign(X,"darkmagenta"):-chicago(X).
Explanation:
- chicago(X) defines a predicate "chicago" that associates each element with a single label from "lightblue","singapore","white","cloud","owner","pink","wall","quality","darkmagenta".
- The predicate "chicago" is defined using the predicate "height".
- The predicate "height" defines the predicate "chicago".

unique_rules: 
['assign(X,"lightblue")|assign(X,"singapore")|assign(X,"white")|assign(X,"cloud")|assign(X,"owner")|assign(X,"pink")|assign(X,"wall")|assign(X,"quality")|assign(X,"darkmagenta"):-chicago(X).']

jaccard: 1.0

AS desired: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'chicago(5)', 'assign(1,"darkmagenta")', 'assign(2,"darkmagenta")', 'assign(3,"darkmagenta")', 'assign(4,"darkmagenta")', 'assign(5,"darkmagenta")']]
\AS obtained: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'chicago(5)', 'assign(1,"darkmagenta")', 'assign(2,"darkmagenta")', 'assign(3,"darkmagenta")', 'assign(4,"darkmagenta")', 'assign(5,"darkmagenta")']]


316
constraint

question: 
Develop an ASP application that avoids the predicate "lake" with a value of 13 being linked to the label "hair".

answer from file: 
:-assign(13,hair).

parsed from model: 
:-assign(13,hair).

facts: 
lake(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-lake(X).

generated: 
Develop an ASP application that avoids the predicate "lake" with a value of 13 being linked to the label "hair".
Answer: :-assign(13,hair).
Explanation: The predicate "lake" includes a value of 13 and the label "height".
The predicate "height" includes a value of 13 and the label "description".
The predicate "description" includes a value of 13 and the label "author".
The predicate "amsterdam" avoids the predicate "lake" with a value of 13 and the label "height".
The predicate "amsterdam" avoids the predicate "height" with a value of 13 and the label "description".

unique_rules: 
[':-assign(13,hair).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lake(6)', 'lake(7)', 'lake(8)', 'lake(9)', 'lake(10)', 'lake(11)', 'lake(12)', 'lake(13)', 'lake(14)', 'lake(15)', 'lake(16)', 'lake(17)', 'lake(18)', 'lake(19)', 'lake(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lake(6)', 'lake(7)', 'lake(8)', 'lake(9)', 'lake(10)', 'lake(11)', 'lake(12)', 'lake(13)', 'lake(14)', 'lake(15)', 'lake(16)', 'lake(17)', 'lake(18)', 'lake(19)', 'lake(20)']]


317
combination

question: 
Produce an ASP script to generate all valid pairings of elements as represented by the predicates "flower" and "lake".

answer from file: 
combination(X,Y):-flower(X),lake(Y).

parsed from model: 
combination(X,Y):-flower(X),lake(Y).

facts: 
flower(1..4).lake(1..5).

generated: 
Produce an ASP script to generate all valid pairings of elements as represented by the predicates "flower" and "lake".
Answer: combination(X,Y):-flower(X),lake(Y).
combination(X,Y):-flower(X),not lake(Y).
combination(X,Y):-not flower(X),lake(Y).
combination(X,Y):-not flower(X),not lake(Y).

unique_rules: 
['combination(X,Y):-flower(X),lake(Y).', 'combination(X,Y):-flower(X),not lake(Y).', 'combination(X,Y):-not flower(X),lake(Y).', 'combination(X,Y):-not flower(X),not lake(Y).']

jaccard: 1.0

AS desired: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'flower(1)', 'flower(2)', 'flower(3)', 'flower(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'flower(1)', 'flower(2)', 'flower(3)', 'flower(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


318
join

question: 
Create an ASP script to define the predicate "white_singapore" that links each white to the surname of singapore, given that "white" has fields "ID","weight","strength","singaporeID" and "singapore" has fields "ID","surname".

answer from file: 
white_singapore(X,Z):-white(X,_,_,Y),singapore(Y,Z).

parsed from model: 
white_singapore(X,Z):-white(X,_,_,Y),singapore(Y,Z).

facts: 
white("ID","weight","strength","singaporeID").singapore("ID","surname").

generated: 
Create an ASP script to define the predicate "white_singapore" that links each white to the surname of singapore, given that "white" has fields "ID","weight","strength","singaporeID" and "singapore" has fields "ID","surname". Define the predicate "white_singapore" that links each white to the surname of singapore.
Answer: white_singapore(X,Z):-white(X,_,_,Y),singapore(Y,Z).
white_singapore(X,Z):-white(X,_,_,Y),singapore(X,Z).

unique_rules: 
['white_singapore(X,Z):-white(X,_,_,Y),singapore(Y,Z).', 'white_singapore(X,Z):-white(X,_,_,Y),singapore(X,Z).']

jaccard: 1.0

AS desired: [['singapore("ID","surname")', 'white("ID","weight","strength","singaporeID")']]
\AS obtained: [['singapore("ID","surname")', 'white("ID","weight","strength","singaporeID")']]


319
closure

question: 
Develop an ASP script that derives the "family" predicate through the transitive closure of the "delhi" predicate.

answer from file: 
family(X,Y):-delhi(X,Y).
family(X,Y):-delhi(X,Z),family(Z,Y).

parsed from model: 
family(X,Y):-delhi(X,Y).
family(X,Y):-delhi(X,Z),family(Z,Y).

facts: 
delhi(1..3, 1..4).

generated: 
Develop an ASP script that derives the "family" predicate through the transitive closure of the "delhi" predicate.
Answer: family(X,Y):-delhi(X,Y).
family(X,Y):-delhi(X,Z),family(Z,Y).
family(X,Y):-delhi(X,Z),Z!=Y.
family(X,Y):-delhi(X,Z),Z==Y.
family(X,Y):-delhi(X,Z),Z!=Y,age(Z,Y).
age(X,Y):-family(X,Y).
age(X,Y):-delhi(X,Z),Z!=Y,age(Z,Y).
age(X,Y):-delhi(X,Z),Z==Y

unique_rules: 
['family(X,Y):-delhi(X,Y).', 'family(X,Y):-delhi(X,Z),family(Z,Y).', 'family(X,Y):-delhi(X,Z),Z!=Y.', 'family(X,Y):-delhi(X,Z),Z==Y.', 'family(X,Y):-delhi(X,Z),Z!=Y,age(Z,Y).', 'age(X,Y):-family(X,Y).', 'age(X,Y):-delhi(X,Z),Z!=Y,age(Z,Y).', 'age(X,Y):-delhi(X,Z),Z==Y']

jaccard: 1.0

AS desired: [['delhi(1,1)', 'delhi(1,2)', 'delhi(1,3)', 'delhi(1,4)', 'delhi(2,1)', 'delhi(2,2)', 'delhi(2,3)', 'delhi(2,4)', 'delhi(3,1)', 'delhi(3,2)', 'delhi(3,3)', 'delhi(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]
\AS obtained: [['delhi(1,1)', 'delhi(1,2)', 'delhi(1,3)', 'delhi(1,4)', 'delhi(2,1)', 'delhi(2,2)', 'delhi(2,3)', 'delhi(2,4)', 'delhi(3,1)', 'delhi(3,2)', 'delhi(3,3)', 'delhi(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]


320
preference

question: 
Develop an ASP code snippet to avoid linking the "quality" predicate with value "7" to "delhi". If such a link is found, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(7,"delhi").[1@1]

parsed from model: 
:~assign(7,"delhi").[1@1]

facts: 
quality(1..20).

generated: 
Develop an ASP code snippet to avoid linking the "quality" predicate with value "7" to "delhi". If such a link is found, it incurs a cost of "1" at level "1".
Answer: :~assign(7,"delhi").[1@1]
The predicate "height" includes fields "ID","city","author","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","

unique_rules: 
[':~assign(7,"delhi").[1@1]']

jaccard: 1.0

AS desired: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'quality(6)', 'quality(7)', 'quality(8)', 'quality(9)', 'quality(10)', 'quality(11)', 'quality(12)', 'quality(13)', 'quality(14)', 'quality(15)', 'quality(16)', 'quality(17)', 'quality(18)', 'quality(19)', 'quality(20)']]
\AS obtained: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'quality(6)', 'quality(7)', 'quality(8)', 'quality(9)', 'quality(10)', 'quality(11)', 'quality(12)', 'quality(13)', 'quality(14)', 'quality(15)', 'quality(16)', 'quality(17)', 'quality(18)', 'quality(19)', 'quality(20)']]


321
filtering

question: 
Formulate an ASP application to fetch all values tied to the predicate "barcelona" and labeled as "storm".

answer from file: 
select(X):-barcelona(X,"storm").

parsed from model: 
select(X):-barcelona(X,"storm").

facts: 
barcelona(1..5, "storm").

generated: 
Formulate an ASP application to fetch all values tied to the predicate "barcelona" and labeled as "storm".
Answer: select(X):-barcelona(X,"storm").
select(X):-barcelona(X,"city").
select(X):-barcelona(X,"moto").
select(X):-barcelona(X,"author").
retum(X):-select(X).

unique_rules: 
['select(X):-barcelona(X,"storm").', 'select(X):-barcelona(X,"city").', 'select(X):-barcelona(X,"moto").', 'select(X):-barcelona(X,"author").', 'retum(X):-select(X).']

jaccard: 1.0

AS desired: [['barcelona(1,"storm")', 'barcelona(2,"storm")', 'barcelona(3,"storm")', 'barcelona(4,"storm")', 'barcelona(5,"storm")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['barcelona(1,"storm")', 'barcelona(2,"storm")', 'barcelona(3,"storm")', 'barcelona(4,"storm")', 'barcelona(5,"storm")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


322
negative_filtering

question: 
Design an ASP solution to capture values associated with the predicate "flower" but not tied to the predicate "pink" and labeled "darkmagenta".

answer from file: 
select(X):-flower(X),not pink(X,"darkmagenta").

parsed from model: 
select(X):-flower(X),not pink(X,"darkmagenta").

facts: 
flower(1..3).pink(1,"lightblue").pink(2,"chair").pink(3,"darkmagenta").

generated: 
Design an ASP solution to capture values associated with the predicate "flower" but not tied to the predicate "pink" and labeled "darkmagenta".
Answer: select(X):-flower(X),not pink(X,"darkmagenta").
Explanation: The predicate "flower" includes values associated with the predicate "city","height","author","moto","description","name","city","author","description","height","name","moto","city","description","name","author","description","height","name","city","author","description","height","name","city","description","name","author","description","height","name","city","description","name","author","description","height","name","city","description","name","author","description","height","name","city","description","name","author","description","height","name","city","description","name","author","description","height","

unique_rules: 
['select(X):-flower(X),not pink(X,"darkmagenta").']

jaccard: 1.0

AS desired: [['flower(1)', 'flower(2)', 'flower(3)', 'pink(1,"lightblue")', 'pink(2,"chair")', 'pink(3,"darkmagenta")', 'select(1)', 'select(2)']]
\AS obtained: [['flower(1)', 'flower(2)', 'flower(3)', 'pink(1,"lightblue")', 'pink(2,"chair")', 'pink(3,"darkmagenta")', 'select(1)', 'select(2)']]


323
numeric_filtering

question: 
Develop an ASP program to gather all values linked to the predicate "desk" with a value different than 72.

answer from file: 
select(X):-desk(X,C),C!=72.

parsed from model: 
select(X):-desk(X,C),C!=72.

facts: 
desk(1..3, 1..100).

generated: 
Develop an ASP program to gather all values linked to the predicate "desk" with a value different than 72.
Answer: select(X):-desk(X,C),C!=72.
select(X):-desk(X,C),C==72.

unique_rules: 
['select(X):-desk(X,C),C!=72.', 'select(X):-desk(X,C),C==72.']

jaccard: 1.0

AS desired: [['desk(1,1)', 'desk(1,2)', 'desk(1,3)', 'desk(1,4)', 'desk(1,5)', 'desk(1,6)', 'desk(1,7)', 'desk(1,8)', 'desk(1,9)', 'desk(1,10)', 'desk(1,11)', 'desk(1,12)', 'desk(1,13)', 'desk(1,14)', 'desk(1,15)', 'desk(1,16)', 'desk(1,17)', 'desk(1,18)', 'desk(1,19)', 'desk(1,20)', 'desk(1,21)', 'desk(1,22)', 'desk(1,23)', 'desk(1,24)', 'desk(1,25)', 'desk(1,26)', 'desk(1,27)', 'desk(1,28)', 'desk(1,29)', 'desk(1,30)', 'desk(1,31)', 'desk(1,32)', 'desk(1,33)', 'desk(1,34)', 'desk(1,35)', 'desk(1,36)', 'desk(1,37)', 'desk(1,38)', 'desk(1,39)', 'desk(1,40)', 'desk(1,41)', 'desk(1,42)', 'desk(1,43)', 'desk(1,44)', 'desk(1,45)', 'desk(1,46)', 'desk(1,47)', 'desk(1,48)', 'desk(1,49)', 'desk(1,50)', 'desk(1,51)', 'desk(1,52)', 'desk(1,53)', 'desk(1,54)', 'desk(1,55)', 'desk(1,56)', 'desk(1,57)', 'desk(1,58)', 'desk(1,59)', 'desk(1,60)', 'desk(1,61)', 'desk(1,62)', 'desk(1,63)', 'desk(1,64)', 'desk(1,65)', 'desk(1,66)', 'desk(1,67)', 'desk(1,68)', 'desk(1,69)', 'desk(1,70)', 'desk(1,71)', 'desk(1,72)', 'desk(1,73)', 'desk(1,74)', 'desk(1,75)', 'desk(1,76)', 'desk(1,77)', 'desk(1,78)', 'desk(1,79)', 'desk(1,80)', 'desk(1,81)', 'desk(1,82)', 'desk(1,83)', 'desk(1,84)', 'desk(1,85)', 'desk(1,86)', 'desk(1,87)', 'desk(1,88)', 'desk(1,89)', 'desk(1,90)', 'desk(1,91)', 'desk(1,92)', 'desk(1,93)', 'desk(1,94)', 'desk(1,95)', 'desk(1,96)', 'desk(1,97)', 'desk(1,98)', 'desk(1,99)', 'desk(1,100)', 'desk(2,1)', 'desk(2,2)', 'desk(2,3)', 'desk(2,4)', 'desk(2,5)', 'desk(2,6)', 'desk(2,7)', 'desk(2,8)', 'desk(2,9)', 'desk(2,10)', 'desk(2,11)', 'desk(2,12)', 'desk(2,13)', 'desk(2,14)', 'desk(2,15)', 'desk(2,16)', 'desk(2,17)', 'desk(2,18)', 'desk(2,19)', 'desk(2,20)', 'desk(2,21)', 'desk(2,22)', 'desk(2,23)', 'desk(2,24)', 'desk(2,25)', 'desk(2,26)', 'desk(2,27)', 'desk(2,28)', 'desk(2,29)', 'desk(2,30)', 'desk(2,31)', 'desk(2,32)', 'desk(2,33)', 'desk(2,34)', 'desk(2,35)', 'desk(2,36)', 'desk(2,37)', 'desk(2,38)', 'desk(2,39)', 'desk(2,40)', 'desk(2,41)', 'desk(2,42)', 'desk(2,43)', 'desk(2,44)', 'desk(2,45)', 'desk(2,46)', 'desk(2,47)', 'desk(2,48)', 'desk(2,49)', 'desk(2,50)', 'desk(2,51)', 'desk(2,52)', 'desk(2,53)', 'desk(2,54)', 'desk(2,55)', 'desk(2,56)', 'desk(2,57)', 'desk(2,58)', 'desk(2,59)', 'desk(2,60)', 'desk(2,61)', 'desk(2,62)', 'desk(2,63)', 'desk(2,64)', 'desk(2,65)', 'desk(2,66)', 'desk(2,67)', 'desk(2,68)', 'desk(2,69)', 'desk(2,70)', 'desk(2,71)', 'desk(2,72)', 'desk(2,73)', 'desk(2,74)', 'desk(2,75)', 'desk(2,76)', 'desk(2,77)', 'desk(2,78)', 'desk(2,79)', 'desk(2,80)', 'desk(2,81)', 'desk(2,82)', 'desk(2,83)', 'desk(2,84)', 'desk(2,85)', 'desk(2,86)', 'desk(2,87)', 'desk(2,88)', 'desk(2,89)', 'desk(2,90)', 'desk(2,91)', 'desk(2,92)', 'desk(2,93)', 'desk(2,94)', 'desk(2,95)', 'desk(2,96)', 'desk(2,97)', 'desk(2,98)', 'desk(2,99)', 'desk(2,100)', 'desk(3,1)', 'desk(3,2)', 'desk(3,3)', 'desk(3,4)', 'desk(3,5)', 'desk(3,6)', 'desk(3,7)', 'desk(3,8)', 'desk(3,9)', 'desk(3,10)', 'desk(3,11)', 'desk(3,12)', 'desk(3,13)', 'desk(3,14)', 'desk(3,15)', 'desk(3,16)', 'desk(3,17)', 'desk(3,18)', 'desk(3,19)', 'desk(3,20)', 'desk(3,21)', 'desk(3,22)', 'desk(3,23)', 'desk(3,24)', 'desk(3,25)', 'desk(3,26)', 'desk(3,27)', 'desk(3,28)', 'desk(3,29)', 'desk(3,30)', 'desk(3,31)', 'desk(3,32)', 'desk(3,33)', 'desk(3,34)', 'desk(3,35)', 'desk(3,36)', 'desk(3,37)', 'desk(3,38)', 'desk(3,39)', 'desk(3,40)', 'desk(3,41)', 'desk(3,42)', 'desk(3,43)', 'desk(3,44)', 'desk(3,45)', 'desk(3,46)', 'desk(3,47)', 'desk(3,48)', 'desk(3,49)', 'desk(3,50)', 'desk(3,51)', 'desk(3,52)', 'desk(3,53)', 'desk(3,54)', 'desk(3,55)', 'desk(3,56)', 'desk(3,57)', 'desk(3,58)', 'desk(3,59)', 'desk(3,60)', 'desk(3,61)', 'desk(3,62)', 'desk(3,63)', 'desk(3,64)', 'desk(3,65)', 'desk(3,66)', 'desk(3,67)', 'desk(3,68)', 'desk(3,69)', 'desk(3,70)', 'desk(3,71)', 'desk(3,72)', 'desk(3,73)', 'desk(3,74)', 'desk(3,75)', 'desk(3,76)', 'desk(3,77)', 'desk(3,78)', 'desk(3,79)', 'desk(3,80)', 'desk(3,81)', 'desk(3,82)', 'desk(3,83)', 'desk(3,84)', 'desk(3,85)', 'desk(3,86)', 'desk(3,87)', 'desk(3,88)', 'desk(3,89)', 'desk(3,90)', 'desk(3,91)', 'desk(3,92)', 'desk(3,93)', 'desk(3,94)', 'desk(3,95)', 'desk(3,96)', 'desk(3,97)', 'desk(3,98)', 'desk(3,99)', 'desk(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['desk(1,1)', 'desk(1,2)', 'desk(1,3)', 'desk(1,4)', 'desk(1,5)', 'desk(1,6)', 'desk(1,7)', 'desk(1,8)', 'desk(1,9)', 'desk(1,10)', 'desk(1,11)', 'desk(1,12)', 'desk(1,13)', 'desk(1,14)', 'desk(1,15)', 'desk(1,16)', 'desk(1,17)', 'desk(1,18)', 'desk(1,19)', 'desk(1,20)', 'desk(1,21)', 'desk(1,22)', 'desk(1,23)', 'desk(1,24)', 'desk(1,25)', 'desk(1,26)', 'desk(1,27)', 'desk(1,28)', 'desk(1,29)', 'desk(1,30)', 'desk(1,31)', 'desk(1,32)', 'desk(1,33)', 'desk(1,34)', 'desk(1,35)', 'desk(1,36)', 'desk(1,37)', 'desk(1,38)', 'desk(1,39)', 'desk(1,40)', 'desk(1,41)', 'desk(1,42)', 'desk(1,43)', 'desk(1,44)', 'desk(1,45)', 'desk(1,46)', 'desk(1,47)', 'desk(1,48)', 'desk(1,49)', 'desk(1,50)', 'desk(1,51)', 'desk(1,52)', 'desk(1,53)', 'desk(1,54)', 'desk(1,55)', 'desk(1,56)', 'desk(1,57)', 'desk(1,58)', 'desk(1,59)', 'desk(1,60)', 'desk(1,61)', 'desk(1,62)', 'desk(1,63)', 'desk(1,64)', 'desk(1,65)', 'desk(1,66)', 'desk(1,67)', 'desk(1,68)', 'desk(1,69)', 'desk(1,70)', 'desk(1,71)', 'desk(1,72)', 'desk(1,73)', 'desk(1,74)', 'desk(1,75)', 'desk(1,76)', 'desk(1,77)', 'desk(1,78)', 'desk(1,79)', 'desk(1,80)', 'desk(1,81)', 'desk(1,82)', 'desk(1,83)', 'desk(1,84)', 'desk(1,85)', 'desk(1,86)', 'desk(1,87)', 'desk(1,88)', 'desk(1,89)', 'desk(1,90)', 'desk(1,91)', 'desk(1,92)', 'desk(1,93)', 'desk(1,94)', 'desk(1,95)', 'desk(1,96)', 'desk(1,97)', 'desk(1,98)', 'desk(1,99)', 'desk(1,100)', 'desk(2,1)', 'desk(2,2)', 'desk(2,3)', 'desk(2,4)', 'desk(2,5)', 'desk(2,6)', 'desk(2,7)', 'desk(2,8)', 'desk(2,9)', 'desk(2,10)', 'desk(2,11)', 'desk(2,12)', 'desk(2,13)', 'desk(2,14)', 'desk(2,15)', 'desk(2,16)', 'desk(2,17)', 'desk(2,18)', 'desk(2,19)', 'desk(2,20)', 'desk(2,21)', 'desk(2,22)', 'desk(2,23)', 'desk(2,24)', 'desk(2,25)', 'desk(2,26)', 'desk(2,27)', 'desk(2,28)', 'desk(2,29)', 'desk(2,30)', 'desk(2,31)', 'desk(2,32)', 'desk(2,33)', 'desk(2,34)', 'desk(2,35)', 'desk(2,36)', 'desk(2,37)', 'desk(2,38)', 'desk(2,39)', 'desk(2,40)', 'desk(2,41)', 'desk(2,42)', 'desk(2,43)', 'desk(2,44)', 'desk(2,45)', 'desk(2,46)', 'desk(2,47)', 'desk(2,48)', 'desk(2,49)', 'desk(2,50)', 'desk(2,51)', 'desk(2,52)', 'desk(2,53)', 'desk(2,54)', 'desk(2,55)', 'desk(2,56)', 'desk(2,57)', 'desk(2,58)', 'desk(2,59)', 'desk(2,60)', 'desk(2,61)', 'desk(2,62)', 'desk(2,63)', 'desk(2,64)', 'desk(2,65)', 'desk(2,66)', 'desk(2,67)', 'desk(2,68)', 'desk(2,69)', 'desk(2,70)', 'desk(2,71)', 'desk(2,72)', 'desk(2,73)', 'desk(2,74)', 'desk(2,75)', 'desk(2,76)', 'desk(2,77)', 'desk(2,78)', 'desk(2,79)', 'desk(2,80)', 'desk(2,81)', 'desk(2,82)', 'desk(2,83)', 'desk(2,84)', 'desk(2,85)', 'desk(2,86)', 'desk(2,87)', 'desk(2,88)', 'desk(2,89)', 'desk(2,90)', 'desk(2,91)', 'desk(2,92)', 'desk(2,93)', 'desk(2,94)', 'desk(2,95)', 'desk(2,96)', 'desk(2,97)', 'desk(2,98)', 'desk(2,99)', 'desk(2,100)', 'desk(3,1)', 'desk(3,2)', 'desk(3,3)', 'desk(3,4)', 'desk(3,5)', 'desk(3,6)', 'desk(3,7)', 'desk(3,8)', 'desk(3,9)', 'desk(3,10)', 'desk(3,11)', 'desk(3,12)', 'desk(3,13)', 'desk(3,14)', 'desk(3,15)', 'desk(3,16)', 'desk(3,17)', 'desk(3,18)', 'desk(3,19)', 'desk(3,20)', 'desk(3,21)', 'desk(3,22)', 'desk(3,23)', 'desk(3,24)', 'desk(3,25)', 'desk(3,26)', 'desk(3,27)', 'desk(3,28)', 'desk(3,29)', 'desk(3,30)', 'desk(3,31)', 'desk(3,32)', 'desk(3,33)', 'desk(3,34)', 'desk(3,35)', 'desk(3,36)', 'desk(3,37)', 'desk(3,38)', 'desk(3,39)', 'desk(3,40)', 'desk(3,41)', 'desk(3,42)', 'desk(3,43)', 'desk(3,44)', 'desk(3,45)', 'desk(3,46)', 'desk(3,47)', 'desk(3,48)', 'desk(3,49)', 'desk(3,50)', 'desk(3,51)', 'desk(3,52)', 'desk(3,53)', 'desk(3,54)', 'desk(3,55)', 'desk(3,56)', 'desk(3,57)', 'desk(3,58)', 'desk(3,59)', 'desk(3,60)', 'desk(3,61)', 'desk(3,62)', 'desk(3,63)', 'desk(3,64)', 'desk(3,65)', 'desk(3,66)', 'desk(3,67)', 'desk(3,68)', 'desk(3,69)', 'desk(3,70)', 'desk(3,71)', 'desk(3,72)', 'desk(3,73)', 'desk(3,74)', 'desk(3,75)', 'desk(3,76)', 'desk(3,77)', 'desk(3,78)', 'desk(3,79)', 'desk(3,80)', 'desk(3,81)', 'desk(3,82)', 'desk(3,83)', 'desk(3,84)', 'desk(3,85)', 'desk(3,86)', 'desk(3,87)', 'desk(3,88)', 'desk(3,89)', 'desk(3,90)', 'desk(3,91)', 'desk(3,92)', 'desk(3,93)', 'desk(3,94)', 'desk(3,95)', 'desk(3,96)', 'desk(3,97)', 'desk(3,98)', 'desk(3,99)', 'desk(3,100)', 'select(1)', 'select(2)', 'select(3)']]


324
assignment

question: 
Implement an ASP application to tag elements, defined by the predicate "barcelona", with one label from the set "surname","lake","lightblue","wall","weight","owner","delhi".

answer from file: 
assign(X,"surname")|assign(X,"lake")|assign(X,"lightblue")|assign(X,"wall")|assign(X,"weight")|assign(X,"owner")|assign(X,"delhi"):-barcelona(X).

parsed from model: 
assign(X,"surname")|assign(X,"lake")|assign(X,"lightblue")|assign(X,"wall")|assign(X,"weight")|assign(X,"owner")|assign(X,"delhi"):-barcelona(X).

facts: 
barcelona(1..5).

generated: 
Implement an ASP application to tag elements, defined by the predicate "barcelona", with one label from the set "surname","lake","lightblue","wall","weight","owner","delhi".
Answer: assign(X,"surname")|assign(X,"lake")|assign(X,"lightblue")|assign(X,"wall")|assign(X,"weight")|assign(X,"owner")|assign(X,"delhi"):-barcelona(X).
assign(X,"city"):-london(X).
Barcelona(X,Z):-london(X).
Barcelona(X,Z):-london(X),city(X).
Barcelona(X,"city"):-london(X).
Barcelona(X,"description"):-london(X).
Barcelona(X,"author"):-london(X).
Barcelona(X,"height"):-london(X).
Barcelona(X,"description

unique_rules: 
['assign(X,"surname")|assign(X,"lake")|assign(X,"lightblue")|assign(X,"wall")|assign(X,"weight")|assign(X,"owner")|assign(X,"delhi"):-barcelona(X).', 'assign(X,"city"):-london(X).', 'Barcelona(X,Z):-london(X).', 'Barcelona(X,Z):-london(X),city(X).', 'Barcelona(X,"city"):-london(X).', 'Barcelona(X,"description"):-london(X).', 'Barcelona(X,"author"):-london(X).', 'Barcelona(X,"height"):-london(X).']

jaccard: 1.0

AS desired: [['barcelona(1)', 'barcelona(2)', 'barcelona(3)', 'barcelona(4)', 'barcelona(5)', 'assign(1,"delhi")', 'assign(2,"delhi")', 'assign(3,"delhi")', 'assign(4,"delhi")', 'assign(5,"delhi")']]
\AS obtained: [['barcelona(1)', 'barcelona(2)', 'barcelona(3)', 'barcelona(4)', 'barcelona(5)', 'assign(1,"delhi")', 'assign(2,"delhi")', 'assign(3,"delhi")', 'assign(4,"delhi")', 'assign(5,"delhi")']]


325
constraint

question: 
Create an ASP code snippet to ensure the "lake" predicate with a value of 10 is not linked to the label "singapore".

answer from file: 
:-assign(10,singapore).

parsed from model: 
:-assign(10,singapore).

facts: 
lake(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-lake(X).

generated: 
Create an ASP code snippet to ensure the "lake" predicate with a value of 10 is not linked to the label "singapore".
Answer: :-assign(10,singapore).
Explanation: The predicate "lake" with a value of 10 is not linked to the label "rome".
The predicate "rome" with a value of 10 is linked to the label "rome".
The predicate "city" with a value of 10 is linked to the label "rome".

unique_rules: 
[':-assign(10,singapore).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lake(6)', 'lake(7)', 'lake(8)', 'lake(9)', 'lake(10)', 'lake(11)', 'lake(12)', 'lake(13)', 'lake(14)', 'lake(15)', 'lake(16)', 'lake(17)', 'lake(18)', 'lake(19)', 'lake(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lake(6)', 'lake(7)', 'lake(8)', 'lake(9)', 'lake(10)', 'lake(11)', 'lake(12)', 'lake(13)', 'lake(14)', 'lake(15)', 'lake(16)', 'lake(17)', 'lake(18)', 'lake(19)', 'lake(20)']]


326
combination

question: 
Compose an ASP script to calculate the Cartesian product of elements represented by the predicates "barcelona" and "roof".

answer from file: 
combination(X,Y):-barcelona(X),roof(Y).

parsed from model: 
combination(X,Y):-barcelona(X),roof(Y).

facts: 
barcelona(1..4).roof(1..5).

generated: 
Compose an ASP script to calculate the Cartesian product of elements represented by the predicates "barcelona" and "roof".
Answer: combination(X,Y):-barcelona(X),roof(Y).
combination(X,Y):-barcelona(X),not roof(Y).
combination(X,Y):-not barcelona(X),roof(Y).
combination(X,Y):-not barcelona(X),not roof(Y).

unique_rules: 
['combination(X,Y):-barcelona(X),roof(Y).', 'combination(X,Y):-barcelona(X),not roof(Y).', 'combination(X,Y):-not barcelona(X),roof(Y).', 'combination(X,Y):-not barcelona(X),not roof(Y).']

jaccard: 1.0

AS desired: [['roof(1)', 'roof(2)', 'roof(3)', 'roof(4)', 'roof(5)', 'barcelona(1)', 'barcelona(2)', 'barcelona(3)', 'barcelona(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['roof(1)', 'roof(2)', 'roof(3)', 'roof(4)', 'roof(5)', 'barcelona(1)', 'barcelona(2)', 'barcelona(3)', 'barcelona(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


327
join

question: 
Create an ASP script to define the predicate "weight_storm" that links each weight to the quality of storm, given that "weight" has fields "ID","surname","stormID","weight","owner" and "storm" has fields "ID","quality","weight".

answer from file: 
weight_storm(X,Z):-weight(X,_,Y,_,_),storm(Y,Z,_).

parsed from model: 
weight_storm(X,Z):-weight(X,_,Y,_,_),storm(Y,Z,_).

facts: 
weight("ID","surname","stormID","weight","owner").storm("ID","quality","weight").

generated: 
Create an ASP script to define the predicate "weight_storm" that links each weight to the quality of storm, given that "weight" has fields "ID","surname","stormID","weight","owner" and "storm" has fields "ID","quality","weight". Define the predicate "weight_storm" that links each weight to the quality of storm.
Answer: weight_storm(X,Z):-weight(X,_,Y,_,_),storm(Y,Z,_).
weight_storm(X,Z):-weight(X,_,Y),not storm(Y,Z,_).

unique_rules: 
['weight_storm(X,Z):-weight(X,_,Y,_,_),storm(Y,Z,_).', 'weight_storm(X,Z):-weight(X,_,Y),not storm(Y,Z,_).']

jaccard: 1.0

AS desired: [['weight("ID","surname","stormID","weight","owner")', 'storm("ID","quality","weight")']]
\AS obtained: [['weight("ID","surname","stormID","weight","owner")', 'storm("ID","quality","weight")']]


328
closure

question: 
Generate an ASP solution that computes the transitive closure of the "lake" predicate, defining the "loops" predicate.

answer from file: 
loops(X,Y):-lake(X,Y).
loops(X,Y):-lake(X,Z),loops(Z,Y).

parsed from model: 
loops(X,Y):-lake(X,Y).
loops(X,Y):-lake(X,Z),loops(Z,Y).

facts: 
lake(1..3, 1..4).

generated: 
Generate an ASP solution that computes the transitive closure of the "lake" predicate, defining the "loops" predicate.
Answer: loops(X,Y):-lake(X,Y).
loops(X,Y):-lake(X,Z),loops(Z,Y).
loops(X,Y):-not lake(X,Y).
loops(X,Y):-object(X,Y).
object(X,Y):-car(X,Y).
car(X,Y):-object(X,Y).

unique_rules: 
['loops(X,Y):-lake(X,Y).', 'loops(X,Y):-lake(X,Z),loops(Z,Y).', 'loops(X,Y):-not lake(X,Y).', 'loops(X,Y):-object(X,Y).', 'object(X,Y):-car(X,Y).', 'car(X,Y):-object(X,Y).']

jaccard: 1.0

AS desired: [['lake(1,1)', 'lake(1,2)', 'lake(1,3)', 'lake(1,4)', 'lake(2,1)', 'lake(2,2)', 'lake(2,3)', 'lake(2,4)', 'lake(3,1)', 'lake(3,2)', 'lake(3,3)', 'lake(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]
\AS obtained: [['lake(1,1)', 'lake(1,2)', 'lake(1,3)', 'lake(1,4)', 'lake(2,1)', 'lake(2,2)', 'lake(2,3)', 'lake(2,4)', 'lake(3,1)', 'lake(3,2)', 'lake(3,3)', 'lake(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]


329
preference

question: 
Craft an ASP program to ensure that the "owner" predicate with value "17" is not associated with "desk", incurring a cost of "1" at level "1" if it does.

answer from file: 
:~assign(17,"desk").[1@1]

parsed from model: 
:-assign(17,"desk").[1@1]

facts: 
owner(1..20).

generated: 
Craft an ASP program to ensure that the "owner" predicate with value "17" is not associated with "desk", incurring a cost of "1" at level "1" if it does.
Answer: :-assign(17,"desk").[1@1]
Explanation: The predicate "author" includes the "owner" and "desk" labels, and the predicate "table" includes the "author" label.
The predicate "assign" associates the "author" label to the "desk" value.
The predicate "table" includes the "author" label, but not the "desk" label.
The predicate "creator" uses the "author" label to determine the cost of the "17" association.
The predicate "table" includes the "author" label, but not the "desk" label.
The predicate "assign" associates the "author" label to the "desk"

unique_rules: 
[':-assign(17,"desk").[1@1]']

jaccard: 0.0

AS desired: [['owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'owner(5)', 'owner(6)', 'owner(7)', 'owner(8)', 'owner(9)', 'owner(10)', 'owner(11)', 'owner(12)', 'owner(13)', 'owner(14)', 'owner(15)', 'owner(16)', 'owner(17)', 'owner(18)', 'owner(19)', 'owner(20)']]
\AS obtained: ['error']


330
filtering

question: 
Design an ASP program to gather values tied to the "laptop" label within the context of the predicate "surname".

answer from file: 
select(X):-surname(X,"laptop").

parsed from model: 
select(X):-surname(X,"laptop").

facts: 
surname(1..5, "laptop").

generated: 
Design an ASP program to gather values tied to the "laptop" label within the context of the predicate "surname".
Answer: select(X):-surname(X,"laptop").
select(X):-surname(X,"dubai").
select(X):-surname(X,"moto").
select(X):-surname(X,"author").
select(X):-surname(X,"city").
select(X):-surname(X,"description").
select(X):-surname(X,"moto","description").
select(X):-surname(X,"description","moto").
select(X):-surname(X,"description","author").
select(X):-surname(X,"description","city").
select(X):-surname(X,"description","description").
select(X):-surname(X,"description","city").
select(X

unique_rules: 
['select(X):-surname(X,"laptop").', 'select(X):-surname(X,"dubai").', 'select(X):-surname(X,"moto").', 'select(X):-surname(X,"author").', 'select(X):-surname(X,"city").', 'select(X):-surname(X,"description").', 'select(X):-surname(X,"moto","description").', 'select(X):-surname(X,"description","moto").', 'select(X):-surname(X,"description","author").', 'select(X):-surname(X,"description","city").', 'select(X):-surname(X,"description","description").']

jaccard: 1.0

AS desired: [['surname(1,"laptop")', 'surname(2,"laptop")', 'surname(3,"laptop")', 'surname(4,"laptop")', 'surname(5,"laptop")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['surname(1,"laptop")', 'surname(2,"laptop")', 'surname(3,"laptop")', 'surname(4,"laptop")', 'surname(5,"laptop")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


331
negative_filtering

question: 
Design an ASP program to identify values linked to the predicate "cosenza" but not to the predicate "lake" and labeled "toronto".

answer from file: 
select(X):-cosenza(X),not lake(X,"toronto").

parsed from model: 
select(X):-cosenza(X),not lake(X,"toronto").

facts: 
cosenza(1..3).lake(1,"wall").lake(2,"flower").lake(3,"lake").

generated: 
Design an ASP program to identify values linked to the predicate "cosenza" but not to the predicate "lake" and labeled "toronto".
Answer: select(X):-cosenza(X),not lake(X,"toronto").
Explanation: The predicate "cosenza" includes values linked to the predicate "city", and the predicate "lake" includes values linked to the predicate "author".
The predicate "toronto" includes values linked to the predicate "city".
The predicate "city" includes values linked to the predicate "author".
The predicate "author" includes values linked to the predicate "city".
The predicate " felicità" combines values linked to the predicates "city" and "author".
The predicate " felicità" identifies values linked to the predicate "city" but not to the predicate "author".

unique_rules: 
['select(X):-cosenza(X),not lake(X,"toronto").']

jaccard: 1.0

AS desired: [['cosenza(1)', 'cosenza(2)', 'cosenza(3)', 'lake(1,"wall")', 'lake(2,"flower")', 'lake(3,"lake")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['cosenza(1)', 'cosenza(2)', 'cosenza(3)', 'lake(1,"wall")', 'lake(2,"flower")', 'lake(3,"lake")', 'select(1)', 'select(2)', 'select(3)']]


332
numeric_filtering

question: 
Develop an ASP program to gather all values linked to the predicate "strength" with a value different than 5.

answer from file: 
select(X):-strength(X,C),C!=5.

parsed from model: 
select(X):-strength(X,C),C!=5.

facts: 
strength(1..3, 1..100).

generated: 
Develop an ASP program to gather all values linked to the predicate "strength" with a value different than 5.
Answer: select(X):-strength(X,C),C!=5.
strength(X,C):-strength(X,C),C==5.

unique_rules: 
['select(X):-strength(X,C),C!=5.', 'strength(X,C):-strength(X,C),C==5.']

jaccard: 1.0

AS desired: [['strength(1,1)', 'strength(1,2)', 'strength(1,3)', 'strength(1,4)', 'strength(1,5)', 'strength(1,6)', 'strength(1,7)', 'strength(1,8)', 'strength(1,9)', 'strength(1,10)', 'strength(1,11)', 'strength(1,12)', 'strength(1,13)', 'strength(1,14)', 'strength(1,15)', 'strength(1,16)', 'strength(1,17)', 'strength(1,18)', 'strength(1,19)', 'strength(1,20)', 'strength(1,21)', 'strength(1,22)', 'strength(1,23)', 'strength(1,24)', 'strength(1,25)', 'strength(1,26)', 'strength(1,27)', 'strength(1,28)', 'strength(1,29)', 'strength(1,30)', 'strength(1,31)', 'strength(1,32)', 'strength(1,33)', 'strength(1,34)', 'strength(1,35)', 'strength(1,36)', 'strength(1,37)', 'strength(1,38)', 'strength(1,39)', 'strength(1,40)', 'strength(1,41)', 'strength(1,42)', 'strength(1,43)', 'strength(1,44)', 'strength(1,45)', 'strength(1,46)', 'strength(1,47)', 'strength(1,48)', 'strength(1,49)', 'strength(1,50)', 'strength(1,51)', 'strength(1,52)', 'strength(1,53)', 'strength(1,54)', 'strength(1,55)', 'strength(1,56)', 'strength(1,57)', 'strength(1,58)', 'strength(1,59)', 'strength(1,60)', 'strength(1,61)', 'strength(1,62)', 'strength(1,63)', 'strength(1,64)', 'strength(1,65)', 'strength(1,66)', 'strength(1,67)', 'strength(1,68)', 'strength(1,69)', 'strength(1,70)', 'strength(1,71)', 'strength(1,72)', 'strength(1,73)', 'strength(1,74)', 'strength(1,75)', 'strength(1,76)', 'strength(1,77)', 'strength(1,78)', 'strength(1,79)', 'strength(1,80)', 'strength(1,81)', 'strength(1,82)', 'strength(1,83)', 'strength(1,84)', 'strength(1,85)', 'strength(1,86)', 'strength(1,87)', 'strength(1,88)', 'strength(1,89)', 'strength(1,90)', 'strength(1,91)', 'strength(1,92)', 'strength(1,93)', 'strength(1,94)', 'strength(1,95)', 'strength(1,96)', 'strength(1,97)', 'strength(1,98)', 'strength(1,99)', 'strength(1,100)', 'strength(2,1)', 'strength(2,2)', 'strength(2,3)', 'strength(2,4)', 'strength(2,5)', 'strength(2,6)', 'strength(2,7)', 'strength(2,8)', 'strength(2,9)', 'strength(2,10)', 'strength(2,11)', 'strength(2,12)', 'strength(2,13)', 'strength(2,14)', 'strength(2,15)', 'strength(2,16)', 'strength(2,17)', 'strength(2,18)', 'strength(2,19)', 'strength(2,20)', 'strength(2,21)', 'strength(2,22)', 'strength(2,23)', 'strength(2,24)', 'strength(2,25)', 'strength(2,26)', 'strength(2,27)', 'strength(2,28)', 'strength(2,29)', 'strength(2,30)', 'strength(2,31)', 'strength(2,32)', 'strength(2,33)', 'strength(2,34)', 'strength(2,35)', 'strength(2,36)', 'strength(2,37)', 'strength(2,38)', 'strength(2,39)', 'strength(2,40)', 'strength(2,41)', 'strength(2,42)', 'strength(2,43)', 'strength(2,44)', 'strength(2,45)', 'strength(2,46)', 'strength(2,47)', 'strength(2,48)', 'strength(2,49)', 'strength(2,50)', 'strength(2,51)', 'strength(2,52)', 'strength(2,53)', 'strength(2,54)', 'strength(2,55)', 'strength(2,56)', 'strength(2,57)', 'strength(2,58)', 'strength(2,59)', 'strength(2,60)', 'strength(2,61)', 'strength(2,62)', 'strength(2,63)', 'strength(2,64)', 'strength(2,65)', 'strength(2,66)', 'strength(2,67)', 'strength(2,68)', 'strength(2,69)', 'strength(2,70)', 'strength(2,71)', 'strength(2,72)', 'strength(2,73)', 'strength(2,74)', 'strength(2,75)', 'strength(2,76)', 'strength(2,77)', 'strength(2,78)', 'strength(2,79)', 'strength(2,80)', 'strength(2,81)', 'strength(2,82)', 'strength(2,83)', 'strength(2,84)', 'strength(2,85)', 'strength(2,86)', 'strength(2,87)', 'strength(2,88)', 'strength(2,89)', 'strength(2,90)', 'strength(2,91)', 'strength(2,92)', 'strength(2,93)', 'strength(2,94)', 'strength(2,95)', 'strength(2,96)', 'strength(2,97)', 'strength(2,98)', 'strength(2,99)', 'strength(2,100)', 'strength(3,1)', 'strength(3,2)', 'strength(3,3)', 'strength(3,4)', 'strength(3,5)', 'strength(3,6)', 'strength(3,7)', 'strength(3,8)', 'strength(3,9)', 'strength(3,10)', 'strength(3,11)', 'strength(3,12)', 'strength(3,13)', 'strength(3,14)', 'strength(3,15)', 'strength(3,16)', 'strength(3,17)', 'strength(3,18)', 'strength(3,19)', 'strength(3,20)', 'strength(3,21)', 'strength(3,22)', 'strength(3,23)', 'strength(3,24)', 'strength(3,25)', 'strength(3,26)', 'strength(3,27)', 'strength(3,28)', 'strength(3,29)', 'strength(3,30)', 'strength(3,31)', 'strength(3,32)', 'strength(3,33)', 'strength(3,34)', 'strength(3,35)', 'strength(3,36)', 'strength(3,37)', 'strength(3,38)', 'strength(3,39)', 'strength(3,40)', 'strength(3,41)', 'strength(3,42)', 'strength(3,43)', 'strength(3,44)', 'strength(3,45)', 'strength(3,46)', 'strength(3,47)', 'strength(3,48)', 'strength(3,49)', 'strength(3,50)', 'strength(3,51)', 'strength(3,52)', 'strength(3,53)', 'strength(3,54)', 'strength(3,55)', 'strength(3,56)', 'strength(3,57)', 'strength(3,58)', 'strength(3,59)', 'strength(3,60)', 'strength(3,61)', 'strength(3,62)', 'strength(3,63)', 'strength(3,64)', 'strength(3,65)', 'strength(3,66)', 'strength(3,67)', 'strength(3,68)', 'strength(3,69)', 'strength(3,70)', 'strength(3,71)', 'strength(3,72)', 'strength(3,73)', 'strength(3,74)', 'strength(3,75)', 'strength(3,76)', 'strength(3,77)', 'strength(3,78)', 'strength(3,79)', 'strength(3,80)', 'strength(3,81)', 'strength(3,82)', 'strength(3,83)', 'strength(3,84)', 'strength(3,85)', 'strength(3,86)', 'strength(3,87)', 'strength(3,88)', 'strength(3,89)', 'strength(3,90)', 'strength(3,91)', 'strength(3,92)', 'strength(3,93)', 'strength(3,94)', 'strength(3,95)', 'strength(3,96)', 'strength(3,97)', 'strength(3,98)', 'strength(3,99)', 'strength(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['strength(1,1)', 'strength(1,2)', 'strength(1,3)', 'strength(1,4)', 'strength(1,5)', 'strength(1,6)', 'strength(1,7)', 'strength(1,8)', 'strength(1,9)', 'strength(1,10)', 'strength(1,11)', 'strength(1,12)', 'strength(1,13)', 'strength(1,14)', 'strength(1,15)', 'strength(1,16)', 'strength(1,17)', 'strength(1,18)', 'strength(1,19)', 'strength(1,20)', 'strength(1,21)', 'strength(1,22)', 'strength(1,23)', 'strength(1,24)', 'strength(1,25)', 'strength(1,26)', 'strength(1,27)', 'strength(1,28)', 'strength(1,29)', 'strength(1,30)', 'strength(1,31)', 'strength(1,32)', 'strength(1,33)', 'strength(1,34)', 'strength(1,35)', 'strength(1,36)', 'strength(1,37)', 'strength(1,38)', 'strength(1,39)', 'strength(1,40)', 'strength(1,41)', 'strength(1,42)', 'strength(1,43)', 'strength(1,44)', 'strength(1,45)', 'strength(1,46)', 'strength(1,47)', 'strength(1,48)', 'strength(1,49)', 'strength(1,50)', 'strength(1,51)', 'strength(1,52)', 'strength(1,53)', 'strength(1,54)', 'strength(1,55)', 'strength(1,56)', 'strength(1,57)', 'strength(1,58)', 'strength(1,59)', 'strength(1,60)', 'strength(1,61)', 'strength(1,62)', 'strength(1,63)', 'strength(1,64)', 'strength(1,65)', 'strength(1,66)', 'strength(1,67)', 'strength(1,68)', 'strength(1,69)', 'strength(1,70)', 'strength(1,71)', 'strength(1,72)', 'strength(1,73)', 'strength(1,74)', 'strength(1,75)', 'strength(1,76)', 'strength(1,77)', 'strength(1,78)', 'strength(1,79)', 'strength(1,80)', 'strength(1,81)', 'strength(1,82)', 'strength(1,83)', 'strength(1,84)', 'strength(1,85)', 'strength(1,86)', 'strength(1,87)', 'strength(1,88)', 'strength(1,89)', 'strength(1,90)', 'strength(1,91)', 'strength(1,92)', 'strength(1,93)', 'strength(1,94)', 'strength(1,95)', 'strength(1,96)', 'strength(1,97)', 'strength(1,98)', 'strength(1,99)', 'strength(1,100)', 'strength(2,1)', 'strength(2,2)', 'strength(2,3)', 'strength(2,4)', 'strength(2,5)', 'strength(2,6)', 'strength(2,7)', 'strength(2,8)', 'strength(2,9)', 'strength(2,10)', 'strength(2,11)', 'strength(2,12)', 'strength(2,13)', 'strength(2,14)', 'strength(2,15)', 'strength(2,16)', 'strength(2,17)', 'strength(2,18)', 'strength(2,19)', 'strength(2,20)', 'strength(2,21)', 'strength(2,22)', 'strength(2,23)', 'strength(2,24)', 'strength(2,25)', 'strength(2,26)', 'strength(2,27)', 'strength(2,28)', 'strength(2,29)', 'strength(2,30)', 'strength(2,31)', 'strength(2,32)', 'strength(2,33)', 'strength(2,34)', 'strength(2,35)', 'strength(2,36)', 'strength(2,37)', 'strength(2,38)', 'strength(2,39)', 'strength(2,40)', 'strength(2,41)', 'strength(2,42)', 'strength(2,43)', 'strength(2,44)', 'strength(2,45)', 'strength(2,46)', 'strength(2,47)', 'strength(2,48)', 'strength(2,49)', 'strength(2,50)', 'strength(2,51)', 'strength(2,52)', 'strength(2,53)', 'strength(2,54)', 'strength(2,55)', 'strength(2,56)', 'strength(2,57)', 'strength(2,58)', 'strength(2,59)', 'strength(2,60)', 'strength(2,61)', 'strength(2,62)', 'strength(2,63)', 'strength(2,64)', 'strength(2,65)', 'strength(2,66)', 'strength(2,67)', 'strength(2,68)', 'strength(2,69)', 'strength(2,70)', 'strength(2,71)', 'strength(2,72)', 'strength(2,73)', 'strength(2,74)', 'strength(2,75)', 'strength(2,76)', 'strength(2,77)', 'strength(2,78)', 'strength(2,79)', 'strength(2,80)', 'strength(2,81)', 'strength(2,82)', 'strength(2,83)', 'strength(2,84)', 'strength(2,85)', 'strength(2,86)', 'strength(2,87)', 'strength(2,88)', 'strength(2,89)', 'strength(2,90)', 'strength(2,91)', 'strength(2,92)', 'strength(2,93)', 'strength(2,94)', 'strength(2,95)', 'strength(2,96)', 'strength(2,97)', 'strength(2,98)', 'strength(2,99)', 'strength(2,100)', 'strength(3,1)', 'strength(3,2)', 'strength(3,3)', 'strength(3,4)', 'strength(3,5)', 'strength(3,6)', 'strength(3,7)', 'strength(3,8)', 'strength(3,9)', 'strength(3,10)', 'strength(3,11)', 'strength(3,12)', 'strength(3,13)', 'strength(3,14)', 'strength(3,15)', 'strength(3,16)', 'strength(3,17)', 'strength(3,18)', 'strength(3,19)', 'strength(3,20)', 'strength(3,21)', 'strength(3,22)', 'strength(3,23)', 'strength(3,24)', 'strength(3,25)', 'strength(3,26)', 'strength(3,27)', 'strength(3,28)', 'strength(3,29)', 'strength(3,30)', 'strength(3,31)', 'strength(3,32)', 'strength(3,33)', 'strength(3,34)', 'strength(3,35)', 'strength(3,36)', 'strength(3,37)', 'strength(3,38)', 'strength(3,39)', 'strength(3,40)', 'strength(3,41)', 'strength(3,42)', 'strength(3,43)', 'strength(3,44)', 'strength(3,45)', 'strength(3,46)', 'strength(3,47)', 'strength(3,48)', 'strength(3,49)', 'strength(3,50)', 'strength(3,51)', 'strength(3,52)', 'strength(3,53)', 'strength(3,54)', 'strength(3,55)', 'strength(3,56)', 'strength(3,57)', 'strength(3,58)', 'strength(3,59)', 'strength(3,60)', 'strength(3,61)', 'strength(3,62)', 'strength(3,63)', 'strength(3,64)', 'strength(3,65)', 'strength(3,66)', 'strength(3,67)', 'strength(3,68)', 'strength(3,69)', 'strength(3,70)', 'strength(3,71)', 'strength(3,72)', 'strength(3,73)', 'strength(3,74)', 'strength(3,75)', 'strength(3,76)', 'strength(3,77)', 'strength(3,78)', 'strength(3,79)', 'strength(3,80)', 'strength(3,81)', 'strength(3,82)', 'strength(3,83)', 'strength(3,84)', 'strength(3,85)', 'strength(3,86)', 'strength(3,87)', 'strength(3,88)', 'strength(3,89)', 'strength(3,90)', 'strength(3,91)', 'strength(3,92)', 'strength(3,93)', 'strength(3,94)', 'strength(3,95)', 'strength(3,96)', 'strength(3,97)', 'strength(3,98)', 'strength(3,99)', 'strength(3,100)', 'select(1)', 'select(2)', 'select(3)']]


333
assignment

question: 
Craft an ASP solution that associates precisely one label from "lake","delhi","white","cairo" with elements specified by the predicate "quality".

answer from file: 
assign(X,"lake")|assign(X,"delhi")|assign(X,"white")|assign(X,"cairo"):-quality(X).

parsed from model: 
assign(X,"lake")|assign(X,"delhi")|assign(X,"white")|assign(X,"cairo"):-quality(X).

facts: 
quality(1..5).

generated: 
Craft an ASP solution that associates precisely one label from "lake","delhi","white","cairo" with elements specified by the predicate "quality".
Answer: assign(X,"lake")|assign(X,"delhi")|assign(X,"white")|assign(X,"cairo"):-quality(X).
assign(X,"city"):-quality(X).
assign(X,"author"):-quality(X).
assign(X,"description"):-quality(X).
assign(X,"moto"):-quality(X).
assign(X,"rome"):-quality(X).
assign(X,"description","city"):-quality(X).
assign(X,"description","author"):-quality(X).
assign(X,"description","moto"):-quality(X).
assign(X,"description","rome"):-quality(

unique_rules: 
['assign(X,"lake")|assign(X,"delhi")|assign(X,"white")|assign(X,"cairo"):-quality(X).', 'assign(X,"city"):-quality(X).', 'assign(X,"author"):-quality(X).', 'assign(X,"description"):-quality(X).', 'assign(X,"moto"):-quality(X).', 'assign(X,"rome"):-quality(X).', 'assign(X,"description","city"):-quality(X).', 'assign(X,"description","author"):-quality(X).', 'assign(X,"description","moto"):-quality(X).', 'assign(X,"description","rome"):-quality(']

jaccard: 1.0

AS desired: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'assign(1,"white")', 'assign(2,"cairo")', 'assign(3,"white")', 'assign(4,"cairo")', 'assign(5,"cairo")']]
\AS obtained: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'assign(1,"white")', 'assign(2,"cairo")', 'assign(3,"white")', 'assign(4,"cairo")', 'assign(5,"cairo")']]


334
constraint

question: 
Design an ASP application that prohibits assigning the "owner" predicate with value 13 to the label "cosenza".

answer from file: 
:-assign(13,cosenza).

parsed from model: 
:-assign(13,cosenza).

facts: 
owner(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-owner(X).

generated: 
Design an ASP application that prohibits assigning the "owner" predicate with value 13 to the label "cosenza".
Answer: :-assign(13,cosenza).
Explanation: The predicate "author" includes fields "ID","city","author","name","description","price","author","city","description","name","height","price","description","author","city","description","name","height","price","description","author","city","description","name","height","price","description","author","city","description","name","height","price","description","author","city","description","name","height","price","description","author","city","description","name","height","price","description","author","city","description","name","height","price","description","author","city","description","name","height","price","description","author","city

unique_rules: 
[':-assign(13,cosenza).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'owner(5)', 'owner(6)', 'owner(7)', 'owner(8)', 'owner(9)', 'owner(10)', 'owner(11)', 'owner(12)', 'owner(13)', 'owner(14)', 'owner(15)', 'owner(16)', 'owner(17)', 'owner(18)', 'owner(19)', 'owner(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'owner(5)', 'owner(6)', 'owner(7)', 'owner(8)', 'owner(9)', 'owner(10)', 'owner(11)', 'owner(12)', 'owner(13)', 'owner(14)', 'owner(15)', 'owner(16)', 'owner(17)', 'owner(18)', 'owner(19)', 'owner(20)']]


335
combination

question: 
Design an ASP solution to compute all possible pairings of elements from two sets defined by the predicates "chicago" and "moscow".

answer from file: 
combination(X,Y):-chicago(X),moscow(Y).

parsed from model: 
combination(X,Y):-chicago(X),moscow(Y).

facts: 
chicago(1..4).moscow(1..5).

generated: 
Design an ASP solution to compute all possible pairings of elements from two sets defined by the predicates "chicago" and "moscow".
Answer: combination(X,Y):-chicago(X),moscow(Y).
combination(X,Y):-chicago(X),not moscow(Y).
combination(X,Y):-not chicago(X),moscow(Y).
combination(X,Y):-not chicago(X),not moscow(Y).

unique_rules: 
['combination(X,Y):-chicago(X),moscow(Y).', 'combination(X,Y):-chicago(X),not moscow(Y).', 'combination(X,Y):-not chicago(X),moscow(Y).', 'combination(X,Y):-not chicago(X),not moscow(Y).']

jaccard: 1.0

AS desired: [['moscow(1)', 'moscow(2)', 'moscow(3)', 'moscow(4)', 'moscow(5)', 'chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['moscow(1)', 'moscow(2)', 'moscow(3)', 'moscow(4)', 'moscow(5)', 'chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


336
join

question: 
Create an ASP program to define the predicate "wall_darkmagenta" that links each wall to the quality of darkmagenta, using fields "ID","darkmagentaID","weight","surname","quality" for "wall" and fields "ID","hair","lake","quality" for "darkmagenta".

answer from file: 
wall_darkmagenta(X,Z):-wall(X,Y,_,_,_),darkmagenta(Y,_,_,Z).

parsed from model: 
wall_darkmagenta(X,Z):-wall(X,Y,_,_,_),darkmagenta(Y,hair,lake,Z).

facts: 
wall("ID","darkmagentaID","weight","surname","quality").darkmagenta("ID","hair","lake","quality").

generated: 
Create an ASP program to define the predicate "wall_darkmagenta" that links each wall to the quality of darkmagenta, using fields "ID","darkmagentaID","weight","surname","quality" for "wall" and fields "ID","hair","lake","quality" for "darkmagenta".
Answer: wall_darkmagenta(X,Z):-wall(X,Y,_,_,_),darkmagenta(Y,hair,lake,Z).
wall_darkmagenta(X,Z):-wall(X,Y,_,_,Z),darkmagenta(Y,_,_,Z).

unique_rules: 
['wall_darkmagenta(X,Z):-wall(X,Y,_,_,_),darkmagenta(Y,hair,lake,Z).', 'wall_darkmagenta(X,Z):-wall(X,Y,_,_,Z),darkmagenta(Y,_,_,Z).']

jaccard: 1.0

AS desired: [['wall("ID","darkmagentaID","weight","surname","quality")', 'darkmagenta("ID","hair","lake","quality")']]
\AS obtained: [['darkmagenta("ID","hair","lake","quality")', 'wall("ID","darkmagentaID","weight","surname","quality")']]


337
closure

question: 
Design an ASP program that infers the "loops" predicate using the transitive closure of the "butterfly" predicate.

answer from file: 
loops(X,Y):-butterfly(X,Y).
loops(X,Y):-butterfly(X,Z),loops(Z,Y).

parsed from model: 
loops(X,Y):-butterfly(X,Y).
loops(X,Y):- arrivant(X,Y).

facts: 
butterfly(1..3, 1..4).

generated: 
Design an ASP program that infers the "loops" predicate using the transitive closure of the "butterfly" predicate.
Answer: loops(X,Y):-butterfly(X,Y).
loops(X,Y):- arrivant(X,Y).
loops(X,Y):-car(X,Y).
loops(X,Y):-bike(X,Y).
loops(X,Y):-moto(X,Y).
loops(X,Y):-dubai(X,Y).
loops(X,Y):-florence(X,Y).
loops(X,Y):-height(X,Y).
loops(X,Y):-name(X,Y).
name(X,Y):-car(X,Y).
name(X,Y):-bike(X,Y).
name(X

unique_rules: 
['loops(X,Y):-butterfly(X,Y).', 'loops(X,Y):- arrivant(X,Y).', 'loops(X,Y):-car(X,Y).', 'loops(X,Y):-bike(X,Y).', 'loops(X,Y):-moto(X,Y).', 'loops(X,Y):-dubai(X,Y).', 'loops(X,Y):-florence(X,Y).', 'loops(X,Y):-height(X,Y).', 'loops(X,Y):-name(X,Y).', 'name(X,Y):-car(X,Y).', 'name(X,Y):-bike(X,Y).']

jaccard: 1.0

AS desired: [['butterfly(1,1)', 'butterfly(1,2)', 'butterfly(1,3)', 'butterfly(1,4)', 'butterfly(2,1)', 'butterfly(2,2)', 'butterfly(2,3)', 'butterfly(2,4)', 'butterfly(3,1)', 'butterfly(3,2)', 'butterfly(3,3)', 'butterfly(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]
\AS obtained: [['butterfly(1,1)', 'butterfly(1,2)', 'butterfly(1,3)', 'butterfly(1,4)', 'butterfly(2,1)', 'butterfly(2,2)', 'butterfly(2,3)', 'butterfly(2,4)', 'butterfly(3,1)', 'butterfly(3,2)', 'butterfly(3,3)', 'butterfly(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]


338
preference

question: 
Generate an ASP program to disallow the association of the predicate "mumbai" with value "3" with "singapore". If associated, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(3,"singapore").[1@1]

parsed from model: 
:~assign(3,"singapore").[1@1]

facts: 
mumbai(1..20).

generated: 
Generate an ASP program to disallow the association of the predicate "mumbai" with value "3" with "singapore". If associated, it incurs a cost of "1" at level "1".
Answer: :~assign(3,"singapore").[1@1]
This program uses the predicate "mumbai" with value "3" to determine the "cost" for the association of the predicate "rome" with value "1".
The predicate "rome" has a cost of "1" at level "1".
The predicate "mumbai" has a cost of "1" at level "1".
So, the predicate "rome" incurs a cost of "1" at level "1" for associating with "3".

unique_rules: 
[':~assign(3,"singapore").[1@1]']

jaccard: 1.0

AS desired: [['mumbai(1)', 'mumbai(2)', 'mumbai(3)', 'mumbai(4)', 'mumbai(5)', 'mumbai(6)', 'mumbai(7)', 'mumbai(8)', 'mumbai(9)', 'mumbai(10)', 'mumbai(11)', 'mumbai(12)', 'mumbai(13)', 'mumbai(14)', 'mumbai(15)', 'mumbai(16)', 'mumbai(17)', 'mumbai(18)', 'mumbai(19)', 'mumbai(20)']]
\AS obtained: [['mumbai(1)', 'mumbai(2)', 'mumbai(3)', 'mumbai(4)', 'mumbai(5)', 'mumbai(6)', 'mumbai(7)', 'mumbai(8)', 'mumbai(9)', 'mumbai(10)', 'mumbai(11)', 'mumbai(12)', 'mumbai(13)', 'mumbai(14)', 'mumbai(15)', 'mumbai(16)', 'mumbai(17)', 'mumbai(18)', 'mumbai(19)', 'mumbai(20)']]


339
filtering

question: 
Compose an ASP solution to gather data from the "weight" predicate associated with the label "darkmagenta".

answer from file: 
select(X):-weight(X,"darkmagenta").

parsed from model: 
select(X):-weight(X,"darkmagenta").

facts: 
weight(1..5, "darkmagenta").

generated: 
Compose an ASP solution to gather data from the "weight" predicate associated with the label "darkmagenta".
Answer: select(X):-weight(X,"darkmagenta").
weight(X,"darkmagenta")|select(X):-weight(X,"gray").
weight(X,"gray")|select(X):-weight(X,"rome").
weight(X,"rome")|select(X):-weight(X,"color").
weight(X,"color")|select(X):-weight(X,"amsterdam").
weight(X,"amsterdam")|select(X):-weight(X,"moto").
weight(X,"moto")|select(X):-weight(X,"dubai").
weight(X,"dubai")|select(X):-weight(X,"height").
weight(X,"height")

unique_rules: 
['select(X):-weight(X,"darkmagenta").', 'weight(X,"darkmagenta")|select(X):-weight(X,"gray").', 'weight(X,"gray")|select(X):-weight(X,"rome").', 'weight(X,"rome")|select(X):-weight(X,"color").', 'weight(X,"color")|select(X):-weight(X,"amsterdam").', 'weight(X,"amsterdam")|select(X):-weight(X,"moto").', 'weight(X,"moto")|select(X):-weight(X,"dubai").', 'weight(X,"dubai")|select(X):-weight(X,"height").']

jaccard: 1.0

AS desired: [['weight(1,"darkmagenta")', 'weight(2,"darkmagenta")', 'weight(3,"darkmagenta")', 'weight(4,"darkmagenta")', 'weight(5,"darkmagenta")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['weight(1,"darkmagenta")', 'weight(2,"darkmagenta")', 'weight(3,"darkmagenta")', 'weight(4,"darkmagenta")', 'weight(5,"darkmagenta")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


340
negative_filtering

question: 
Create an ASP application to fetch values associated with the predicate "roof" but not linked to the predicate "quality" and labeled "cosenza".

answer from file: 
select(X):-roof(X),not quality(X,"cosenza").

parsed from model: 
select(X):-roof(X),not quality(X,"cosenza").

facts: 
roof(1..3).quality(1,"barcelona").quality(2,"cosenza").quality(3,"laptop").

generated: 
Create an ASP application to fetch values associated with the predicate "roof" but not linked to the predicate "quality" and labeled "cosenza".
Answer: select(X):-roof(X),not quality(X,"cosenza").
Explanation: The predicate "roof" includes values associated with the predicate "city","height","moto","author","description","name","city","author","description","height","name","price","city","description","author","name","height","description","city","author","description","height","name","price","city","description","author","name","height","description","city","author","description","height","name","price","city","description","author","name","height","description","city","author","description","height","name","price","city","description","author","name","height","description","city","author","description","height","

unique_rules: 
['select(X):-roof(X),not quality(X,"cosenza").']

jaccard: 1.0

AS desired: [['roof(1)', 'roof(2)', 'roof(3)', 'quality(1,"barcelona")', 'quality(2,"cosenza")', 'quality(3,"laptop")', 'select(1)', 'select(3)']]
\AS obtained: [['roof(1)', 'roof(2)', 'roof(3)', 'quality(1,"barcelona")', 'quality(2,"cosenza")', 'quality(3,"laptop")', 'select(1)', 'select(3)']]


341
numeric_filtering

question: 
Write an ASP solution to identify values tied to the predicate "hair" with a value different than 45.

answer from file: 
select(X):-hair(X,C),C!=45.

parsed from model: 
select(X):-hair(X,C),C!=45.

facts: 
hair(1..3, 1..100).

generated: 
Write an ASP solution to identify values tied to the predicate "hair" with a value different than 45.
Answer: select(X):-hair(X,C),C!=45.
Explanation: The predicate "hair" includes values tied to the predicate "author" with a value different than 45.
The predicate "author" includes values tied to the predicate "city" with a value different than 45.
The predicate "city" includes values tied to the predicate "moto" with a value different than 45.
So, the predicate "hair" includes all values tied to the predicate "author" with a value different than 45.

unique_rules: 
['select(X):-hair(X,C),C!=45.']

jaccard: 1.0

AS desired: [['hair(1,1)', 'hair(1,2)', 'hair(1,3)', 'hair(1,4)', 'hair(1,5)', 'hair(1,6)', 'hair(1,7)', 'hair(1,8)', 'hair(1,9)', 'hair(1,10)', 'hair(1,11)', 'hair(1,12)', 'hair(1,13)', 'hair(1,14)', 'hair(1,15)', 'hair(1,16)', 'hair(1,17)', 'hair(1,18)', 'hair(1,19)', 'hair(1,20)', 'hair(1,21)', 'hair(1,22)', 'hair(1,23)', 'hair(1,24)', 'hair(1,25)', 'hair(1,26)', 'hair(1,27)', 'hair(1,28)', 'hair(1,29)', 'hair(1,30)', 'hair(1,31)', 'hair(1,32)', 'hair(1,33)', 'hair(1,34)', 'hair(1,35)', 'hair(1,36)', 'hair(1,37)', 'hair(1,38)', 'hair(1,39)', 'hair(1,40)', 'hair(1,41)', 'hair(1,42)', 'hair(1,43)', 'hair(1,44)', 'hair(1,45)', 'hair(1,46)', 'hair(1,47)', 'hair(1,48)', 'hair(1,49)', 'hair(1,50)', 'hair(1,51)', 'hair(1,52)', 'hair(1,53)', 'hair(1,54)', 'hair(1,55)', 'hair(1,56)', 'hair(1,57)', 'hair(1,58)', 'hair(1,59)', 'hair(1,60)', 'hair(1,61)', 'hair(1,62)', 'hair(1,63)', 'hair(1,64)', 'hair(1,65)', 'hair(1,66)', 'hair(1,67)', 'hair(1,68)', 'hair(1,69)', 'hair(1,70)', 'hair(1,71)', 'hair(1,72)', 'hair(1,73)', 'hair(1,74)', 'hair(1,75)', 'hair(1,76)', 'hair(1,77)', 'hair(1,78)', 'hair(1,79)', 'hair(1,80)', 'hair(1,81)', 'hair(1,82)', 'hair(1,83)', 'hair(1,84)', 'hair(1,85)', 'hair(1,86)', 'hair(1,87)', 'hair(1,88)', 'hair(1,89)', 'hair(1,90)', 'hair(1,91)', 'hair(1,92)', 'hair(1,93)', 'hair(1,94)', 'hair(1,95)', 'hair(1,96)', 'hair(1,97)', 'hair(1,98)', 'hair(1,99)', 'hair(1,100)', 'hair(2,1)', 'hair(2,2)', 'hair(2,3)', 'hair(2,4)', 'hair(2,5)', 'hair(2,6)', 'hair(2,7)', 'hair(2,8)', 'hair(2,9)', 'hair(2,10)', 'hair(2,11)', 'hair(2,12)', 'hair(2,13)', 'hair(2,14)', 'hair(2,15)', 'hair(2,16)', 'hair(2,17)', 'hair(2,18)', 'hair(2,19)', 'hair(2,20)', 'hair(2,21)', 'hair(2,22)', 'hair(2,23)', 'hair(2,24)', 'hair(2,25)', 'hair(2,26)', 'hair(2,27)', 'hair(2,28)', 'hair(2,29)', 'hair(2,30)', 'hair(2,31)', 'hair(2,32)', 'hair(2,33)', 'hair(2,34)', 'hair(2,35)', 'hair(2,36)', 'hair(2,37)', 'hair(2,38)', 'hair(2,39)', 'hair(2,40)', 'hair(2,41)', 'hair(2,42)', 'hair(2,43)', 'hair(2,44)', 'hair(2,45)', 'hair(2,46)', 'hair(2,47)', 'hair(2,48)', 'hair(2,49)', 'hair(2,50)', 'hair(2,51)', 'hair(2,52)', 'hair(2,53)', 'hair(2,54)', 'hair(2,55)', 'hair(2,56)', 'hair(2,57)', 'hair(2,58)', 'hair(2,59)', 'hair(2,60)', 'hair(2,61)', 'hair(2,62)', 'hair(2,63)', 'hair(2,64)', 'hair(2,65)', 'hair(2,66)', 'hair(2,67)', 'hair(2,68)', 'hair(2,69)', 'hair(2,70)', 'hair(2,71)', 'hair(2,72)', 'hair(2,73)', 'hair(2,74)', 'hair(2,75)', 'hair(2,76)', 'hair(2,77)', 'hair(2,78)', 'hair(2,79)', 'hair(2,80)', 'hair(2,81)', 'hair(2,82)', 'hair(2,83)', 'hair(2,84)', 'hair(2,85)', 'hair(2,86)', 'hair(2,87)', 'hair(2,88)', 'hair(2,89)', 'hair(2,90)', 'hair(2,91)', 'hair(2,92)', 'hair(2,93)', 'hair(2,94)', 'hair(2,95)', 'hair(2,96)', 'hair(2,97)', 'hair(2,98)', 'hair(2,99)', 'hair(2,100)', 'hair(3,1)', 'hair(3,2)', 'hair(3,3)', 'hair(3,4)', 'hair(3,5)', 'hair(3,6)', 'hair(3,7)', 'hair(3,8)', 'hair(3,9)', 'hair(3,10)', 'hair(3,11)', 'hair(3,12)', 'hair(3,13)', 'hair(3,14)', 'hair(3,15)', 'hair(3,16)', 'hair(3,17)', 'hair(3,18)', 'hair(3,19)', 'hair(3,20)', 'hair(3,21)', 'hair(3,22)', 'hair(3,23)', 'hair(3,24)', 'hair(3,25)', 'hair(3,26)', 'hair(3,27)', 'hair(3,28)', 'hair(3,29)', 'hair(3,30)', 'hair(3,31)', 'hair(3,32)', 'hair(3,33)', 'hair(3,34)', 'hair(3,35)', 'hair(3,36)', 'hair(3,37)', 'hair(3,38)', 'hair(3,39)', 'hair(3,40)', 'hair(3,41)', 'hair(3,42)', 'hair(3,43)', 'hair(3,44)', 'hair(3,45)', 'hair(3,46)', 'hair(3,47)', 'hair(3,48)', 'hair(3,49)', 'hair(3,50)', 'hair(3,51)', 'hair(3,52)', 'hair(3,53)', 'hair(3,54)', 'hair(3,55)', 'hair(3,56)', 'hair(3,57)', 'hair(3,58)', 'hair(3,59)', 'hair(3,60)', 'hair(3,61)', 'hair(3,62)', 'hair(3,63)', 'hair(3,64)', 'hair(3,65)', 'hair(3,66)', 'hair(3,67)', 'hair(3,68)', 'hair(3,69)', 'hair(3,70)', 'hair(3,71)', 'hair(3,72)', 'hair(3,73)', 'hair(3,74)', 'hair(3,75)', 'hair(3,76)', 'hair(3,77)', 'hair(3,78)', 'hair(3,79)', 'hair(3,80)', 'hair(3,81)', 'hair(3,82)', 'hair(3,83)', 'hair(3,84)', 'hair(3,85)', 'hair(3,86)', 'hair(3,87)', 'hair(3,88)', 'hair(3,89)', 'hair(3,90)', 'hair(3,91)', 'hair(3,92)', 'hair(3,93)', 'hair(3,94)', 'hair(3,95)', 'hair(3,96)', 'hair(3,97)', 'hair(3,98)', 'hair(3,99)', 'hair(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['hair(1,1)', 'hair(1,2)', 'hair(1,3)', 'hair(1,4)', 'hair(1,5)', 'hair(1,6)', 'hair(1,7)', 'hair(1,8)', 'hair(1,9)', 'hair(1,10)', 'hair(1,11)', 'hair(1,12)', 'hair(1,13)', 'hair(1,14)', 'hair(1,15)', 'hair(1,16)', 'hair(1,17)', 'hair(1,18)', 'hair(1,19)', 'hair(1,20)', 'hair(1,21)', 'hair(1,22)', 'hair(1,23)', 'hair(1,24)', 'hair(1,25)', 'hair(1,26)', 'hair(1,27)', 'hair(1,28)', 'hair(1,29)', 'hair(1,30)', 'hair(1,31)', 'hair(1,32)', 'hair(1,33)', 'hair(1,34)', 'hair(1,35)', 'hair(1,36)', 'hair(1,37)', 'hair(1,38)', 'hair(1,39)', 'hair(1,40)', 'hair(1,41)', 'hair(1,42)', 'hair(1,43)', 'hair(1,44)', 'hair(1,45)', 'hair(1,46)', 'hair(1,47)', 'hair(1,48)', 'hair(1,49)', 'hair(1,50)', 'hair(1,51)', 'hair(1,52)', 'hair(1,53)', 'hair(1,54)', 'hair(1,55)', 'hair(1,56)', 'hair(1,57)', 'hair(1,58)', 'hair(1,59)', 'hair(1,60)', 'hair(1,61)', 'hair(1,62)', 'hair(1,63)', 'hair(1,64)', 'hair(1,65)', 'hair(1,66)', 'hair(1,67)', 'hair(1,68)', 'hair(1,69)', 'hair(1,70)', 'hair(1,71)', 'hair(1,72)', 'hair(1,73)', 'hair(1,74)', 'hair(1,75)', 'hair(1,76)', 'hair(1,77)', 'hair(1,78)', 'hair(1,79)', 'hair(1,80)', 'hair(1,81)', 'hair(1,82)', 'hair(1,83)', 'hair(1,84)', 'hair(1,85)', 'hair(1,86)', 'hair(1,87)', 'hair(1,88)', 'hair(1,89)', 'hair(1,90)', 'hair(1,91)', 'hair(1,92)', 'hair(1,93)', 'hair(1,94)', 'hair(1,95)', 'hair(1,96)', 'hair(1,97)', 'hair(1,98)', 'hair(1,99)', 'hair(1,100)', 'hair(2,1)', 'hair(2,2)', 'hair(2,3)', 'hair(2,4)', 'hair(2,5)', 'hair(2,6)', 'hair(2,7)', 'hair(2,8)', 'hair(2,9)', 'hair(2,10)', 'hair(2,11)', 'hair(2,12)', 'hair(2,13)', 'hair(2,14)', 'hair(2,15)', 'hair(2,16)', 'hair(2,17)', 'hair(2,18)', 'hair(2,19)', 'hair(2,20)', 'hair(2,21)', 'hair(2,22)', 'hair(2,23)', 'hair(2,24)', 'hair(2,25)', 'hair(2,26)', 'hair(2,27)', 'hair(2,28)', 'hair(2,29)', 'hair(2,30)', 'hair(2,31)', 'hair(2,32)', 'hair(2,33)', 'hair(2,34)', 'hair(2,35)', 'hair(2,36)', 'hair(2,37)', 'hair(2,38)', 'hair(2,39)', 'hair(2,40)', 'hair(2,41)', 'hair(2,42)', 'hair(2,43)', 'hair(2,44)', 'hair(2,45)', 'hair(2,46)', 'hair(2,47)', 'hair(2,48)', 'hair(2,49)', 'hair(2,50)', 'hair(2,51)', 'hair(2,52)', 'hair(2,53)', 'hair(2,54)', 'hair(2,55)', 'hair(2,56)', 'hair(2,57)', 'hair(2,58)', 'hair(2,59)', 'hair(2,60)', 'hair(2,61)', 'hair(2,62)', 'hair(2,63)', 'hair(2,64)', 'hair(2,65)', 'hair(2,66)', 'hair(2,67)', 'hair(2,68)', 'hair(2,69)', 'hair(2,70)', 'hair(2,71)', 'hair(2,72)', 'hair(2,73)', 'hair(2,74)', 'hair(2,75)', 'hair(2,76)', 'hair(2,77)', 'hair(2,78)', 'hair(2,79)', 'hair(2,80)', 'hair(2,81)', 'hair(2,82)', 'hair(2,83)', 'hair(2,84)', 'hair(2,85)', 'hair(2,86)', 'hair(2,87)', 'hair(2,88)', 'hair(2,89)', 'hair(2,90)', 'hair(2,91)', 'hair(2,92)', 'hair(2,93)', 'hair(2,94)', 'hair(2,95)', 'hair(2,96)', 'hair(2,97)', 'hair(2,98)', 'hair(2,99)', 'hair(2,100)', 'hair(3,1)', 'hair(3,2)', 'hair(3,3)', 'hair(3,4)', 'hair(3,5)', 'hair(3,6)', 'hair(3,7)', 'hair(3,8)', 'hair(3,9)', 'hair(3,10)', 'hair(3,11)', 'hair(3,12)', 'hair(3,13)', 'hair(3,14)', 'hair(3,15)', 'hair(3,16)', 'hair(3,17)', 'hair(3,18)', 'hair(3,19)', 'hair(3,20)', 'hair(3,21)', 'hair(3,22)', 'hair(3,23)', 'hair(3,24)', 'hair(3,25)', 'hair(3,26)', 'hair(3,27)', 'hair(3,28)', 'hair(3,29)', 'hair(3,30)', 'hair(3,31)', 'hair(3,32)', 'hair(3,33)', 'hair(3,34)', 'hair(3,35)', 'hair(3,36)', 'hair(3,37)', 'hair(3,38)', 'hair(3,39)', 'hair(3,40)', 'hair(3,41)', 'hair(3,42)', 'hair(3,43)', 'hair(3,44)', 'hair(3,45)', 'hair(3,46)', 'hair(3,47)', 'hair(3,48)', 'hair(3,49)', 'hair(3,50)', 'hair(3,51)', 'hair(3,52)', 'hair(3,53)', 'hair(3,54)', 'hair(3,55)', 'hair(3,56)', 'hair(3,57)', 'hair(3,58)', 'hair(3,59)', 'hair(3,60)', 'hair(3,61)', 'hair(3,62)', 'hair(3,63)', 'hair(3,64)', 'hair(3,65)', 'hair(3,66)', 'hair(3,67)', 'hair(3,68)', 'hair(3,69)', 'hair(3,70)', 'hair(3,71)', 'hair(3,72)', 'hair(3,73)', 'hair(3,74)', 'hair(3,75)', 'hair(3,76)', 'hair(3,77)', 'hair(3,78)', 'hair(3,79)', 'hair(3,80)', 'hair(3,81)', 'hair(3,82)', 'hair(3,83)', 'hair(3,84)', 'hair(3,85)', 'hair(3,86)', 'hair(3,87)', 'hair(3,88)', 'hair(3,89)', 'hair(3,90)', 'hair(3,91)', 'hair(3,92)', 'hair(3,93)', 'hair(3,94)', 'hair(3,95)', 'hair(3,96)', 'hair(3,97)', 'hair(3,98)', 'hair(3,99)', 'hair(3,100)', 'select(1)', 'select(2)', 'select(3)']]


342
assignment

question: 
Implement an ASP application to tag elements, defined by the predicate "barcelona", with one label from the set "surname","lake","lightblue","wall","weight","owner","delhi".

answer from file: 
assign(X,"surname")|assign(X,"lake")|assign(X,"lightblue")|assign(X,"wall")|assign(X,"weight")|assign(X,"owner")|assign(X,"delhi"):-barcelona(X).

parsed from model: 
assign(X,"surname")|assign(X,"lake")|assign(X,"lightblue")|assign(X,"wall")|assign(X,"weight")|assign(X,"owner")|assign(X,"delhi"):-barcelona(X).

facts: 
barcelona(1..5).

generated: 
Implement an ASP application to tag elements, defined by the predicate "barcelona", with one label from the set "surname","lake","lightblue","wall","weight","owner","delhi".
Answer: assign(X,"surname")|assign(X,"lake")|assign(X,"lightblue")|assign(X,"wall")|assign(X,"weight")|assign(X,"owner")|assign(X,"delhi"):-barcelona(X).
assign(X,"city"):-london(X).
Barcelona(X,Z):-london(X).
Barcelona(X,Z):-london(X),city(X).
Barcelona(X,"city"):-london(X).
Barcelona(X,"description"):-london(X).
Barcelona(X,"author"):-london(X).
Barcelona(X,"height"):-london(X).
Barcelona(X,"description

unique_rules: 
['assign(X,"surname")|assign(X,"lake")|assign(X,"lightblue")|assign(X,"wall")|assign(X,"weight")|assign(X,"owner")|assign(X,"delhi"):-barcelona(X).', 'assign(X,"city"):-london(X).', 'Barcelona(X,Z):-london(X).', 'Barcelona(X,Z):-london(X),city(X).', 'Barcelona(X,"city"):-london(X).', 'Barcelona(X,"description"):-london(X).', 'Barcelona(X,"author"):-london(X).', 'Barcelona(X,"height"):-london(X).']

jaccard: 1.0

AS desired: [['barcelona(1)', 'barcelona(2)', 'barcelona(3)', 'barcelona(4)', 'barcelona(5)', 'assign(1,"delhi")', 'assign(2,"delhi")', 'assign(3,"delhi")', 'assign(4,"delhi")', 'assign(5,"delhi")']]
\AS obtained: [['barcelona(1)', 'barcelona(2)', 'barcelona(3)', 'barcelona(4)', 'barcelona(5)', 'assign(1,"delhi")', 'assign(2,"delhi")', 'assign(3,"delhi")', 'assign(4,"delhi")', 'assign(5,"delhi")']]


343
constraint

question: 
Create an ASP code snippet to ensure the "lake" predicate with a value of 10 is not linked to the label "singapore".

answer from file: 
:-assign(10,singapore).

parsed from model: 
:-assign(10,singapore).

facts: 
lake(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-lake(X).

generated: 
Create an ASP code snippet to ensure the "lake" predicate with a value of 10 is not linked to the label "singapore".
Answer: :-assign(10,singapore).
Explanation: The predicate "lake" with a value of 10 is not linked to the label "rome".
The predicate "rome" with a value of 10 is linked to the label "rome".
The predicate "city" with a value of 10 is linked to the label "description".

unique_rules: 
[':-assign(10,singapore).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lake(6)', 'lake(7)', 'lake(8)', 'lake(9)', 'lake(10)', 'lake(11)', 'lake(12)', 'lake(13)', 'lake(14)', 'lake(15)', 'lake(16)', 'lake(17)', 'lake(18)', 'lake(19)', 'lake(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lake(6)', 'lake(7)', 'lake(8)', 'lake(9)', 'lake(10)', 'lake(11)', 'lake(12)', 'lake(13)', 'lake(14)', 'lake(15)', 'lake(16)', 'lake(17)', 'lake(18)', 'lake(19)', 'lake(20)']]


344
combination

question: 
Compose an ASP script to calculate the Cartesian product of elements represented by the predicates "barcelona" and "roof".

answer from file: 
combination(X,Y):-barcelona(X),roof(Y).

parsed from model: 
combination(X,Y):-barcelona(X),roof(Y).

facts: 
barcelona(1..4).roof(1..5).

generated: 
Compose an ASP script to calculate the Cartesian product of elements represented by the predicates "barcelona" and "roof".
Answer: combination(X,Y):-barcelona(X),roof(Y).
combination(X,Y):-barcelona(X),not roof(Y).
combination(X,Y):-not barcelona(X),roof(Y).
combination(X,Y):-not barcelona(X),not roof(Y).

unique_rules: 
['combination(X,Y):-barcelona(X),roof(Y).', 'combination(X,Y):-barcelona(X),not roof(Y).', 'combination(X,Y):-not barcelona(X),roof(Y).', 'combination(X,Y):-not barcelona(X),not roof(Y).']

jaccard: 1.0

AS desired: [['roof(1)', 'roof(2)', 'roof(3)', 'roof(4)', 'roof(5)', 'barcelona(1)', 'barcelona(2)', 'barcelona(3)', 'barcelona(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['roof(1)', 'roof(2)', 'roof(3)', 'roof(4)', 'roof(5)', 'barcelona(1)', 'barcelona(2)', 'barcelona(3)', 'barcelona(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


345
join

question: 
Create an ASP script to define the predicate "weight_storm" that links each weight to the quality of storm, given that "weight" has fields "ID","surname","stormID","weight","owner" and "storm" has fields "ID","quality","weight".

answer from file: 
weight_storm(X,Z):-weight(X,_,Y,_,_),storm(Y,Z,_).

parsed from model: 
weight_storm(X,Z):-weight(X,_,Y,_,_),storm(Y,Z,_).

facts: 
weight("ID","surname","stormID","weight","owner").storm("ID","quality","weight").

generated: 
Create an ASP script to define the predicate "weight_storm" that links each weight to the quality of storm, given that "weight" has fields "ID","surname","stormID","weight","owner" and "storm" has fields "ID","quality","weight". Define the predicate "weight_storm" that links each weight to the quality of storm.
Answer: weight_storm(X,Z):-weight(X,_,Y,_,_),storm(Y,Z,_).
weight_storm(X,Z):-weight(X,_,Y),not storm(Y,Z,_).

unique_rules: 
['weight_storm(X,Z):-weight(X,_,Y,_,_),storm(Y,Z,_).', 'weight_storm(X,Z):-weight(X,_,Y),not storm(Y,Z,_).']

jaccard: 1.0

AS desired: [['weight("ID","surname","stormID","weight","owner")', 'storm("ID","quality","weight")']]
\AS obtained: [['weight("ID","surname","stormID","weight","owner")', 'storm("ID","quality","weight")']]


346
closure

question: 
Generate an ASP solution that computes the transitive closure of the "lake" predicate, defining the "loops" predicate.

answer from file: 
loops(X,Y):-lake(X,Y).
loops(X,Y):-lake(X,Z),loops(Z,Y).

parsed from model: 
loops(X,Y):-lake(X,Y).
loops(X,Y):-lake(X,Z),loops(Z,Y).

facts: 
lake(1..3, 1..4).

generated: 
Generate an ASP solution that computes the transitive closure of the "lake" predicate, defining the "loops" predicate.
Answer: loops(X,Y):-lake(X,Y).
loops(X,Y):-lake(X,Z),loops(Z,Y).
loops(X,Y):-not lake(X,Y).
loops(X,Y):-city(X,Y).
city(X,Y):-car(X,Y).
car(X,Y):-city(X,Y).

unique_rules: 
['loops(X,Y):-lake(X,Y).', 'loops(X,Y):-lake(X,Z),loops(Z,Y).', 'loops(X,Y):-not lake(X,Y).', 'loops(X,Y):-city(X,Y).', 'city(X,Y):-car(X,Y).', 'car(X,Y):-city(X,Y).']

jaccard: 1.0

AS desired: [['lake(1,1)', 'lake(1,2)', 'lake(1,3)', 'lake(1,4)', 'lake(2,1)', 'lake(2,2)', 'lake(2,3)', 'lake(2,4)', 'lake(3,1)', 'lake(3,2)', 'lake(3,3)', 'lake(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]
\AS obtained: [['lake(1,1)', 'lake(1,2)', 'lake(1,3)', 'lake(1,4)', 'lake(2,1)', 'lake(2,2)', 'lake(2,3)', 'lake(2,4)', 'lake(3,1)', 'lake(3,2)', 'lake(3,3)', 'lake(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]


347
preference

question: 
Craft an ASP program to ensure that the "owner" predicate with value "17" is not associated with "desk", incurring a cost of "1" at level "1" if it does.

answer from file: 
:~assign(17,"desk").[1@1]

parsed from model: 
:-assign(17,"desk").[1@1]

facts: 
owner(1..20).

generated: 
Craft an ASP program to ensure that the "owner" predicate with value "17" is not associated with "desk", incurring a cost of "1" at level "1" if it does.
Answer: :-assign(17,"desk").[1@1]
Explanation: The predicate "author" includes the "owner" and "desk" labels, and the predicate "table" includes the "author" label.
The predicate "assign" associates the "author" label to the "desk" value.
The predicate "table" includes the "author" label, but not the "desk" label.
The predicate "creator" uses the "author" label to determine the cost of the "17" association.
The predicate "table" includes the "author" label, but not the "desk" label.
The predicate "assign" associates the "author" label to the "desk"

unique_rules: 
[':-assign(17,"desk").[1@1]']

jaccard: 0.0

AS desired: [['owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'owner(5)', 'owner(6)', 'owner(7)', 'owner(8)', 'owner(9)', 'owner(10)', 'owner(11)', 'owner(12)', 'owner(13)', 'owner(14)', 'owner(15)', 'owner(16)', 'owner(17)', 'owner(18)', 'owner(19)', 'owner(20)']]
\AS obtained: ['error']


348
filtering

question: 
Design an ASP program to gather values tied to the "laptop" label within the context of the predicate "surname".

answer from file: 
select(X):-surname(X,"laptop").

parsed from model: 
select(X):-surname(X,"laptop").

facts: 
surname(1..5, "laptop").

generated: 
Design an ASP program to gather values tied to the "laptop" label within the context of the predicate "surname".
Answer: select(X):-surname(X,"laptop").
select(X):-surname(X,"author").
select(X):-surname(X,"moto").
select(X):-surname(X,"dubai").
select(X):-surname(X,"shangai").
select(X):-surname(X,"author","moto").
select(X):-surname(X,"author","dubai").
select(X):-surname(X,"author","shangai").
select(X):-surname(X,"moto","shangai").
select(X):-surname(X,"shangai","dubai").

unique_rules: 
['select(X):-surname(X,"laptop").', 'select(X):-surname(X,"author").', 'select(X):-surname(X,"moto").', 'select(X):-surname(X,"dubai").', 'select(X):-surname(X,"shangai").', 'select(X):-surname(X,"author","moto").', 'select(X):-surname(X,"author","dubai").', 'select(X):-surname(X,"author","shangai").', 'select(X):-surname(X,"moto","shangai").', 'select(X):-surname(X,"shangai","dubai").']

jaccard: 1.0

AS desired: [['surname(1,"laptop")', 'surname(2,"laptop")', 'surname(3,"laptop")', 'surname(4,"laptop")', 'surname(5,"laptop")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['surname(1,"laptop")', 'surname(2,"laptop")', 'surname(3,"laptop")', 'surname(4,"laptop")', 'surname(5,"laptop")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


349
negative_filtering

question: 
Design an ASP program to identify values linked to the predicate "cosenza" but not to the predicate "lake" and labeled "toronto".

answer from file: 
select(X):-cosenza(X),not lake(X,"toronto").

parsed from model: 
select(X):-cosenza(X),not lake(X,"toronto").

facts: 
cosenza(1..3).lake(1,"wall").lake(2,"flower").lake(3,"lake").

generated: 
Design an ASP program to identify values linked to the predicate "cosenza" but not to the predicate "lake" and labeled "toronto".
Answer: select(X):-cosenza(X),not lake(X,"toronto").
Explanation: The predicate "cosenza" includes values linked to the predicate "city", and the predicate "lake" includes values linked to the predicate "author".
The predicate "toronto" includes values linked to the predicate "city".
The predicate "city" includes values linked to the predicate "author".
The predicate "author" includes values linked to the predicate "city".
The predicate " felicità" combines values linked to the predicates "city" and "author".
The predicate " felicità" identifies values linked to the predicate "city" but not to the predicate "author".

unique_rules: 
['select(X):-cosenza(X),not lake(X,"toronto").']

jaccard: 1.0

AS desired: [['cosenza(1)', 'cosenza(2)', 'cosenza(3)', 'lake(1,"wall")', 'lake(2,"flower")', 'lake(3,"lake")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['cosenza(1)', 'cosenza(2)', 'cosenza(3)', 'lake(1,"wall")', 'lake(2,"flower")', 'lake(3,"lake")', 'select(1)', 'select(2)', 'select(3)']]


350
numeric_filtering

question: 
Develop an ASP program to gather all values linked to the predicate "strength" with a value different than 5.

answer from file: 
select(X):-strength(X,C),C!=5.

parsed from model: 
select(X):-strength(X,C),C!=5.

facts: 
strength(1..3, 1..100).

generated: 
Develop an ASP program to gather all values linked to the predicate "strength" with a value different than 5.
Answer: select(X):-strength(X,C),C!=5.
select(X):-strength(X,C),C==5.

unique_rules: 
['select(X):-strength(X,C),C!=5.', 'select(X):-strength(X,C),C==5.']

jaccard: 1.0

AS desired: [['strength(1,1)', 'strength(1,2)', 'strength(1,3)', 'strength(1,4)', 'strength(1,5)', 'strength(1,6)', 'strength(1,7)', 'strength(1,8)', 'strength(1,9)', 'strength(1,10)', 'strength(1,11)', 'strength(1,12)', 'strength(1,13)', 'strength(1,14)', 'strength(1,15)', 'strength(1,16)', 'strength(1,17)', 'strength(1,18)', 'strength(1,19)', 'strength(1,20)', 'strength(1,21)', 'strength(1,22)', 'strength(1,23)', 'strength(1,24)', 'strength(1,25)', 'strength(1,26)', 'strength(1,27)', 'strength(1,28)', 'strength(1,29)', 'strength(1,30)', 'strength(1,31)', 'strength(1,32)', 'strength(1,33)', 'strength(1,34)', 'strength(1,35)', 'strength(1,36)', 'strength(1,37)', 'strength(1,38)', 'strength(1,39)', 'strength(1,40)', 'strength(1,41)', 'strength(1,42)', 'strength(1,43)', 'strength(1,44)', 'strength(1,45)', 'strength(1,46)', 'strength(1,47)', 'strength(1,48)', 'strength(1,49)', 'strength(1,50)', 'strength(1,51)', 'strength(1,52)', 'strength(1,53)', 'strength(1,54)', 'strength(1,55)', 'strength(1,56)', 'strength(1,57)', 'strength(1,58)', 'strength(1,59)', 'strength(1,60)', 'strength(1,61)', 'strength(1,62)', 'strength(1,63)', 'strength(1,64)', 'strength(1,65)', 'strength(1,66)', 'strength(1,67)', 'strength(1,68)', 'strength(1,69)', 'strength(1,70)', 'strength(1,71)', 'strength(1,72)', 'strength(1,73)', 'strength(1,74)', 'strength(1,75)', 'strength(1,76)', 'strength(1,77)', 'strength(1,78)', 'strength(1,79)', 'strength(1,80)', 'strength(1,81)', 'strength(1,82)', 'strength(1,83)', 'strength(1,84)', 'strength(1,85)', 'strength(1,86)', 'strength(1,87)', 'strength(1,88)', 'strength(1,89)', 'strength(1,90)', 'strength(1,91)', 'strength(1,92)', 'strength(1,93)', 'strength(1,94)', 'strength(1,95)', 'strength(1,96)', 'strength(1,97)', 'strength(1,98)', 'strength(1,99)', 'strength(1,100)', 'strength(2,1)', 'strength(2,2)', 'strength(2,3)', 'strength(2,4)', 'strength(2,5)', 'strength(2,6)', 'strength(2,7)', 'strength(2,8)', 'strength(2,9)', 'strength(2,10)', 'strength(2,11)', 'strength(2,12)', 'strength(2,13)', 'strength(2,14)', 'strength(2,15)', 'strength(2,16)', 'strength(2,17)', 'strength(2,18)', 'strength(2,19)', 'strength(2,20)', 'strength(2,21)', 'strength(2,22)', 'strength(2,23)', 'strength(2,24)', 'strength(2,25)', 'strength(2,26)', 'strength(2,27)', 'strength(2,28)', 'strength(2,29)', 'strength(2,30)', 'strength(2,31)', 'strength(2,32)', 'strength(2,33)', 'strength(2,34)', 'strength(2,35)', 'strength(2,36)', 'strength(2,37)', 'strength(2,38)', 'strength(2,39)', 'strength(2,40)', 'strength(2,41)', 'strength(2,42)', 'strength(2,43)', 'strength(2,44)', 'strength(2,45)', 'strength(2,46)', 'strength(2,47)', 'strength(2,48)', 'strength(2,49)', 'strength(2,50)', 'strength(2,51)', 'strength(2,52)', 'strength(2,53)', 'strength(2,54)', 'strength(2,55)', 'strength(2,56)', 'strength(2,57)', 'strength(2,58)', 'strength(2,59)', 'strength(2,60)', 'strength(2,61)', 'strength(2,62)', 'strength(2,63)', 'strength(2,64)', 'strength(2,65)', 'strength(2,66)', 'strength(2,67)', 'strength(2,68)', 'strength(2,69)', 'strength(2,70)', 'strength(2,71)', 'strength(2,72)', 'strength(2,73)', 'strength(2,74)', 'strength(2,75)', 'strength(2,76)', 'strength(2,77)', 'strength(2,78)', 'strength(2,79)', 'strength(2,80)', 'strength(2,81)', 'strength(2,82)', 'strength(2,83)', 'strength(2,84)', 'strength(2,85)', 'strength(2,86)', 'strength(2,87)', 'strength(2,88)', 'strength(2,89)', 'strength(2,90)', 'strength(2,91)', 'strength(2,92)', 'strength(2,93)', 'strength(2,94)', 'strength(2,95)', 'strength(2,96)', 'strength(2,97)', 'strength(2,98)', 'strength(2,99)', 'strength(2,100)', 'strength(3,1)', 'strength(3,2)', 'strength(3,3)', 'strength(3,4)', 'strength(3,5)', 'strength(3,6)', 'strength(3,7)', 'strength(3,8)', 'strength(3,9)', 'strength(3,10)', 'strength(3,11)', 'strength(3,12)', 'strength(3,13)', 'strength(3,14)', 'strength(3,15)', 'strength(3,16)', 'strength(3,17)', 'strength(3,18)', 'strength(3,19)', 'strength(3,20)', 'strength(3,21)', 'strength(3,22)', 'strength(3,23)', 'strength(3,24)', 'strength(3,25)', 'strength(3,26)', 'strength(3,27)', 'strength(3,28)', 'strength(3,29)', 'strength(3,30)', 'strength(3,31)', 'strength(3,32)', 'strength(3,33)', 'strength(3,34)', 'strength(3,35)', 'strength(3,36)', 'strength(3,37)', 'strength(3,38)', 'strength(3,39)', 'strength(3,40)', 'strength(3,41)', 'strength(3,42)', 'strength(3,43)', 'strength(3,44)', 'strength(3,45)', 'strength(3,46)', 'strength(3,47)', 'strength(3,48)', 'strength(3,49)', 'strength(3,50)', 'strength(3,51)', 'strength(3,52)', 'strength(3,53)', 'strength(3,54)', 'strength(3,55)', 'strength(3,56)', 'strength(3,57)', 'strength(3,58)', 'strength(3,59)', 'strength(3,60)', 'strength(3,61)', 'strength(3,62)', 'strength(3,63)', 'strength(3,64)', 'strength(3,65)', 'strength(3,66)', 'strength(3,67)', 'strength(3,68)', 'strength(3,69)', 'strength(3,70)', 'strength(3,71)', 'strength(3,72)', 'strength(3,73)', 'strength(3,74)', 'strength(3,75)', 'strength(3,76)', 'strength(3,77)', 'strength(3,78)', 'strength(3,79)', 'strength(3,80)', 'strength(3,81)', 'strength(3,82)', 'strength(3,83)', 'strength(3,84)', 'strength(3,85)', 'strength(3,86)', 'strength(3,87)', 'strength(3,88)', 'strength(3,89)', 'strength(3,90)', 'strength(3,91)', 'strength(3,92)', 'strength(3,93)', 'strength(3,94)', 'strength(3,95)', 'strength(3,96)', 'strength(3,97)', 'strength(3,98)', 'strength(3,99)', 'strength(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['strength(1,1)', 'strength(1,2)', 'strength(1,3)', 'strength(1,4)', 'strength(1,5)', 'strength(1,6)', 'strength(1,7)', 'strength(1,8)', 'strength(1,9)', 'strength(1,10)', 'strength(1,11)', 'strength(1,12)', 'strength(1,13)', 'strength(1,14)', 'strength(1,15)', 'strength(1,16)', 'strength(1,17)', 'strength(1,18)', 'strength(1,19)', 'strength(1,20)', 'strength(1,21)', 'strength(1,22)', 'strength(1,23)', 'strength(1,24)', 'strength(1,25)', 'strength(1,26)', 'strength(1,27)', 'strength(1,28)', 'strength(1,29)', 'strength(1,30)', 'strength(1,31)', 'strength(1,32)', 'strength(1,33)', 'strength(1,34)', 'strength(1,35)', 'strength(1,36)', 'strength(1,37)', 'strength(1,38)', 'strength(1,39)', 'strength(1,40)', 'strength(1,41)', 'strength(1,42)', 'strength(1,43)', 'strength(1,44)', 'strength(1,45)', 'strength(1,46)', 'strength(1,47)', 'strength(1,48)', 'strength(1,49)', 'strength(1,50)', 'strength(1,51)', 'strength(1,52)', 'strength(1,53)', 'strength(1,54)', 'strength(1,55)', 'strength(1,56)', 'strength(1,57)', 'strength(1,58)', 'strength(1,59)', 'strength(1,60)', 'strength(1,61)', 'strength(1,62)', 'strength(1,63)', 'strength(1,64)', 'strength(1,65)', 'strength(1,66)', 'strength(1,67)', 'strength(1,68)', 'strength(1,69)', 'strength(1,70)', 'strength(1,71)', 'strength(1,72)', 'strength(1,73)', 'strength(1,74)', 'strength(1,75)', 'strength(1,76)', 'strength(1,77)', 'strength(1,78)', 'strength(1,79)', 'strength(1,80)', 'strength(1,81)', 'strength(1,82)', 'strength(1,83)', 'strength(1,84)', 'strength(1,85)', 'strength(1,86)', 'strength(1,87)', 'strength(1,88)', 'strength(1,89)', 'strength(1,90)', 'strength(1,91)', 'strength(1,92)', 'strength(1,93)', 'strength(1,94)', 'strength(1,95)', 'strength(1,96)', 'strength(1,97)', 'strength(1,98)', 'strength(1,99)', 'strength(1,100)', 'strength(2,1)', 'strength(2,2)', 'strength(2,3)', 'strength(2,4)', 'strength(2,5)', 'strength(2,6)', 'strength(2,7)', 'strength(2,8)', 'strength(2,9)', 'strength(2,10)', 'strength(2,11)', 'strength(2,12)', 'strength(2,13)', 'strength(2,14)', 'strength(2,15)', 'strength(2,16)', 'strength(2,17)', 'strength(2,18)', 'strength(2,19)', 'strength(2,20)', 'strength(2,21)', 'strength(2,22)', 'strength(2,23)', 'strength(2,24)', 'strength(2,25)', 'strength(2,26)', 'strength(2,27)', 'strength(2,28)', 'strength(2,29)', 'strength(2,30)', 'strength(2,31)', 'strength(2,32)', 'strength(2,33)', 'strength(2,34)', 'strength(2,35)', 'strength(2,36)', 'strength(2,37)', 'strength(2,38)', 'strength(2,39)', 'strength(2,40)', 'strength(2,41)', 'strength(2,42)', 'strength(2,43)', 'strength(2,44)', 'strength(2,45)', 'strength(2,46)', 'strength(2,47)', 'strength(2,48)', 'strength(2,49)', 'strength(2,50)', 'strength(2,51)', 'strength(2,52)', 'strength(2,53)', 'strength(2,54)', 'strength(2,55)', 'strength(2,56)', 'strength(2,57)', 'strength(2,58)', 'strength(2,59)', 'strength(2,60)', 'strength(2,61)', 'strength(2,62)', 'strength(2,63)', 'strength(2,64)', 'strength(2,65)', 'strength(2,66)', 'strength(2,67)', 'strength(2,68)', 'strength(2,69)', 'strength(2,70)', 'strength(2,71)', 'strength(2,72)', 'strength(2,73)', 'strength(2,74)', 'strength(2,75)', 'strength(2,76)', 'strength(2,77)', 'strength(2,78)', 'strength(2,79)', 'strength(2,80)', 'strength(2,81)', 'strength(2,82)', 'strength(2,83)', 'strength(2,84)', 'strength(2,85)', 'strength(2,86)', 'strength(2,87)', 'strength(2,88)', 'strength(2,89)', 'strength(2,90)', 'strength(2,91)', 'strength(2,92)', 'strength(2,93)', 'strength(2,94)', 'strength(2,95)', 'strength(2,96)', 'strength(2,97)', 'strength(2,98)', 'strength(2,99)', 'strength(2,100)', 'strength(3,1)', 'strength(3,2)', 'strength(3,3)', 'strength(3,4)', 'strength(3,5)', 'strength(3,6)', 'strength(3,7)', 'strength(3,8)', 'strength(3,9)', 'strength(3,10)', 'strength(3,11)', 'strength(3,12)', 'strength(3,13)', 'strength(3,14)', 'strength(3,15)', 'strength(3,16)', 'strength(3,17)', 'strength(3,18)', 'strength(3,19)', 'strength(3,20)', 'strength(3,21)', 'strength(3,22)', 'strength(3,23)', 'strength(3,24)', 'strength(3,25)', 'strength(3,26)', 'strength(3,27)', 'strength(3,28)', 'strength(3,29)', 'strength(3,30)', 'strength(3,31)', 'strength(3,32)', 'strength(3,33)', 'strength(3,34)', 'strength(3,35)', 'strength(3,36)', 'strength(3,37)', 'strength(3,38)', 'strength(3,39)', 'strength(3,40)', 'strength(3,41)', 'strength(3,42)', 'strength(3,43)', 'strength(3,44)', 'strength(3,45)', 'strength(3,46)', 'strength(3,47)', 'strength(3,48)', 'strength(3,49)', 'strength(3,50)', 'strength(3,51)', 'strength(3,52)', 'strength(3,53)', 'strength(3,54)', 'strength(3,55)', 'strength(3,56)', 'strength(3,57)', 'strength(3,58)', 'strength(3,59)', 'strength(3,60)', 'strength(3,61)', 'strength(3,62)', 'strength(3,63)', 'strength(3,64)', 'strength(3,65)', 'strength(3,66)', 'strength(3,67)', 'strength(3,68)', 'strength(3,69)', 'strength(3,70)', 'strength(3,71)', 'strength(3,72)', 'strength(3,73)', 'strength(3,74)', 'strength(3,75)', 'strength(3,76)', 'strength(3,77)', 'strength(3,78)', 'strength(3,79)', 'strength(3,80)', 'strength(3,81)', 'strength(3,82)', 'strength(3,83)', 'strength(3,84)', 'strength(3,85)', 'strength(3,86)', 'strength(3,87)', 'strength(3,88)', 'strength(3,89)', 'strength(3,90)', 'strength(3,91)', 'strength(3,92)', 'strength(3,93)', 'strength(3,94)', 'strength(3,95)', 'strength(3,96)', 'strength(3,97)', 'strength(3,98)', 'strength(3,99)', 'strength(3,100)', 'select(1)', 'select(2)', 'select(3)']]


351
assignment

question: 
Create an ASP script that maps a single label from "chicago","black","strength","cosenza","chair","laptop","singapore" to a collection of elements specified by the predicate "pink".

answer from file: 
assign(X,"chicago")|assign(X,"black")|assign(X,"strength")|assign(X,"cosenza")|assign(X,"chair")|assign(X,"laptop")|assign(X,"singapore"):-pink(X).

parsed from model: 
assign(X,"chicago")|assign(X,"black")|assign(X,"strength")|assign(X,"cosenza")|assign(X,"chair")|assign(X,"laptop")|assign(X,"singapore"):-pink(X).

facts: 
pink(1..5).

generated: 
Create an ASP script that maps a single label from "chicago","black","strength","cosenza","chair","laptop","singapore" to a collection of elements specified by the predicate "pink".
Answer: assign(X,"chicago")|assign(X,"black")|assign(X,"strength")|assign(X,"cosenza")|assign(X,"chair")|assign(X,"laptop")|assign(X,"singapore"):-pink(X).
assign(X,"city")|assign(X,"author")|assign(X,"moto","height","description","author","city","description","height","author","moto","height","description","author","city","description","height","author","moto","height","description","author","city","description","height","author","moto","height","description","author","city","description","height","author","moto","height","description","author","city

unique_rules: 
['assign(X,"chicago")|assign(X,"black")|assign(X,"strength")|assign(X,"cosenza")|assign(X,"chair")|assign(X,"laptop")|assign(X,"singapore"):-pink(X).']

jaccard: 1.0

AS desired: [['pink(1)', 'pink(2)', 'pink(3)', 'pink(4)', 'pink(5)', 'assign(1,"singapore")', 'assign(2,"singapore")', 'assign(3,"singapore")', 'assign(4,"singapore")', 'assign(5,"singapore")']]
\AS obtained: [['pink(1)', 'pink(2)', 'pink(3)', 'pink(4)', 'pink(5)', 'assign(1,"singapore")', 'assign(2,"singapore")', 'assign(3,"singapore")', 'assign(4,"singapore")', 'assign(5,"singapore")']]


352
constraint

question: 
Generate an ASP code to exclude linking the "strength" predicate with value 3 to the label "cairo".

answer from file: 
:-assign(3,cairo).

parsed from model: 
:-assign(3,cairo).

facts: 
strength(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-strength(X).

generated: 
Generate an ASP code to exclude linking the "strength" predicate with value 3 to the label "cairo".
Answer: :-assign(3,cairo).
Explanation: The predicate "street" includes a "city" label for values 1,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84

unique_rules: 
[':-assign(3,cairo).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'strength(6)', 'strength(7)', 'strength(8)', 'strength(9)', 'strength(10)', 'strength(11)', 'strength(12)', 'strength(13)', 'strength(14)', 'strength(15)', 'strength(16)', 'strength(17)', 'strength(18)', 'strength(19)', 'strength(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'strength(6)', 'strength(7)', 'strength(8)', 'strength(9)', 'strength(10)', 'strength(11)', 'strength(12)', 'strength(13)', 'strength(14)', 'strength(15)', 'strength(16)', 'strength(17)', 'strength(18)', 'strength(19)', 'strength(20)']]


353
combination

question: 
Design an ASP solution to compute all possible pairings of elements from two sets defined by the predicates "chair" and "delhi".

answer from file: 
combination(X,Y):-chair(X),delhi(Y).

parsed from model: 
combination(X,Y):-chair(X),delhi(Y).

facts: 
chair(1..4).delhi(1..5).

generated: 
Design an ASP solution to compute all possible pairings of elements from two sets defined by the predicates "chair" and "delhi".
Answer: combination(X,Y):-chair(X),delhi(Y).
combination(X,Y):-chair(X),not delhi(Y).
combination(X,Y):-delhi(Y),not chair(X).
combination(X,Y):-not chair(X),not delhi(Y).

unique_rules: 
['combination(X,Y):-chair(X),delhi(Y).', 'combination(X,Y):-chair(X),not delhi(Y).', 'combination(X,Y):-delhi(Y),not chair(X).', 'combination(X,Y):-not chair(X),not delhi(Y).']

jaccard: 1.0

AS desired: [['delhi(1)', 'delhi(2)', 'delhi(3)', 'delhi(4)', 'delhi(5)', 'chair(1)', 'chair(2)', 'chair(3)', 'chair(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['delhi(1)', 'delhi(2)', 'delhi(3)', 'delhi(4)', 'delhi(5)', 'chair(1)', 'chair(2)', 'chair(3)', 'chair(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


354
join

question: 
Write an ASP program for the following problem. Consider predicate "pink" having fields "ID","chairID","hair","quality","lake", and the predicate "chair" having fields "ID","lake","owner". Define a predicate "pink_chair" that associates to each "pink" the "lake" of "chair".

answer from file: 
pink_chair(X,Z):-pink(X,Y,_,_,_),chair(Y,Z,_).

parsed from model: 
pink_chair(X,Z):-pink(X,Y,_,_,Z),chair(Y,Z,_).

facts: 
pink("ID","chairID","hair","quality","lake").chair("ID","lake","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "pink" having fields "ID","chairID","hair","quality","lake", and the predicate "chair" having fields "ID","lake","owner". Define a predicate "pink_chair" that associates to each "pink" the "lake" of "chair".
Answer: pink_chair(X,Z):-pink(X,Y,_,_,Z),chair(Y,Z,_).
pink_chair(X,Z):-pink(X,Y,_,_,Z),not chair(Y,Z,_).
pink_chair(X,Z):-not pink(X,Y,_,_,Z),chair(Y,Z,_).

unique_rules: 
['pink_chair(X,Z):-pink(X,Y,_,_,Z),chair(Y,Z,_).', 'pink_chair(X,Z):-pink(X,Y,_,_,Z),not chair(Y,Z,_).', 'pink_chair(X,Z):-not pink(X,Y,_,_,Z),chair(Y,Z,_).']

jaccard: 1.0

AS desired: [['pink("ID","chairID","hair","quality","lake")', 'chair("ID","lake","owner")']]
\AS obtained: [['pink("ID","chairID","hair","quality","lake")', 'chair("ID","lake","owner")']]


355
closure

question: 
Create an ASP code snippet to determine the transitive closure of the "storm" predicate, resulting in the predicate "family".

answer from file: 
family(X,Y):-storm(X,Y).
family(X,Y):-storm(X,Z),family(Z,Y).

parsed from model: 
family(X,Y):-storm(X,Y).
family(X,Y):-storm(X,Z),family(Z,Y).

facts: 
storm(1..3, 1..4).

generated: 
Create an ASP code snippet to determine the transitive closure of the "storm" predicate, resulting in the predicate "family".
Answer: family(X,Y):-storm(X,Y).
family(X,Y):-storm(X,Z),family(Z,Y).
family(X,Y):-storm(X,Z),not family(Z,Y).
family(X,Y):-not storm(X,Y).
family(X,Y):-X,Y.

unique_rules: 
['family(X,Y):-storm(X,Y).', 'family(X,Y):-storm(X,Z),family(Z,Y).', 'family(X,Y):-storm(X,Z),not family(Z,Y).', 'family(X,Y):-not storm(X,Y).', 'family(X,Y):-X,Y.']

jaccard: 1.0

AS desired: [['storm(1,1)', 'storm(1,2)', 'storm(1,3)', 'storm(1,4)', 'storm(2,1)', 'storm(2,2)', 'storm(2,3)', 'storm(2,4)', 'storm(3,1)', 'storm(3,2)', 'storm(3,3)', 'storm(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]
\AS obtained: [['storm(1,1)', 'storm(1,2)', 'storm(1,3)', 'storm(1,4)', 'storm(2,1)', 'storm(2,2)', 'storm(2,3)', 'storm(2,4)', 'storm(3,1)', 'storm(3,2)', 'storm(3,3)', 'storm(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]


356
preference

question: 
Compose an ASP script to ensure the "butterfly" predicate with value "15" does not link to "laptop". If this connection happens, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(15,"laptop").[1@1]

parsed from model: 
:~assign(15,"laptop").[1@1]

facts: 
butterfly(1..20).

generated: 
Compose an ASP script to ensure the "butterfly" predicate with value "15" does not link to "laptop". If this connection happens, it incurs a cost of "1" at level "1".
Answer: :~assign(15,"laptop").[1@1]
This script uses the "assign" predicate to check the connection between the "15" and "laptop" labels. If the connection is found, it incurs a cost of "1" at level "1".

unique_rules: 
[':~assign(15,"laptop").[1@1]']

jaccard: 1.0

AS desired: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)', 'butterfly(6)', 'butterfly(7)', 'butterfly(8)', 'butterfly(9)', 'butterfly(10)', 'butterfly(11)', 'butterfly(12)', 'butterfly(13)', 'butterfly(14)', 'butterfly(15)', 'butterfly(16)', 'butterfly(17)', 'butterfly(18)', 'butterfly(19)', 'butterfly(20)']]
\AS obtained: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)', 'butterfly(6)', 'butterfly(7)', 'butterfly(8)', 'butterfly(9)', 'butterfly(10)', 'butterfly(11)', 'butterfly(12)', 'butterfly(13)', 'butterfly(14)', 'butterfly(15)', 'butterfly(16)', 'butterfly(17)', 'butterfly(18)', 'butterfly(19)', 'butterfly(20)']]


357
filtering

question: 
Create an ASP code to retrieve values associated with the label "owner" within the "moscow" predicate.

answer from file: 
select(X):-moscow(X,"owner").

parsed from model: 
select(X):-moscow(X,"owner").

facts: 
moscow(1..5, "owner").

generated: 
Create an ASP code to retrieve values associated with the label "owner" within the "moscow" predicate.
Answer: select(X):-moscow(X,"owner").
moscow(X,Z):- felicità(X,Z).
 felicità(X,Z):-city(X,Z).

unique_rules: 
['select(X):-moscow(X,"owner").', 'moscow(X,Z):- felicità(X,Z).', 'felicità(X,Z):-city(X,Z).']

jaccard: 1.0

AS desired: [['moscow(1,"owner")', 'moscow(2,"owner")', 'moscow(3,"owner")', 'moscow(4,"owner")', 'moscow(5,"owner")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['moscow(1,"owner")', 'moscow(2,"owner")', 'moscow(3,"owner")', 'moscow(4,"owner")', 'moscow(5,"owner")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


358
negative_filtering

question: 
Generate an ASP code snippet to retrieve values linked to the predicate "chicago" but not to the predicate "storm" and labeled "storm".

answer from file: 
select(X):-chicago(X),not storm(X,"storm").

parsed from model: 
select(X):-chicago(X),not storm(X,"storm").

facts: 
chicago(1..3).storm(1,"mumbai").storm(2,"storm").storm(3,"white").

generated: 
Generate an ASP code snippet to retrieve values linked to the predicate "chicago" but not to the predicate "storm" and labeled "storm".
Answer: select(X):-chicago(X),not storm(X,"storm").
Explanation: The predicate "chicago" links values to the predicate "city". The predicate "storm" links values to the predicate "author". The predicate "author" links values to the predicate "city".
The predicate "city" links values to the predicate "rome".
The predicate "rome" links values to the predicate "author".
The predicate "author" links values to the predicate "city".
The predicate "city" links values to the predicate "shangai".
The predicate "shangai" links values to the predicate "author".
The predicate "author" links values to the predicate "rome".
The predicate "

unique_rules: 
['select(X):-chicago(X),not storm(X,"storm").']

jaccard: 1.0

AS desired: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'storm(1,"mumbai")', 'storm(2,"storm")', 'storm(3,"white")', 'select(1)', 'select(3)']]
\AS obtained: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'storm(1,"mumbai")', 'storm(2,"storm")', 'storm(3,"white")', 'select(1)', 'select(3)']]


359
numeric_filtering

question: 
Compose an ASP program to fetch values associated with the predicate "moscow" with a value different than 48.

answer from file: 
select(X):-moscow(X,C),C!=48.

parsed from model: 
select(X):-moscow(X,C),C!=48.

facts: 
moscow(1..3, 1..100).

generated: 
Compose an ASP program to fetch values associated with the predicate "moscow" with a value different than 48.
Answer: select(X):-moscow(X,C),C!=48.
moscow(X,C):-moscow(X,C),C==48.

unique_rules: 
['select(X):-moscow(X,C),C!=48.', 'moscow(X,C):-moscow(X,C),C==48.']

jaccard: 1.0

AS desired: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(1,5)', 'moscow(1,6)', 'moscow(1,7)', 'moscow(1,8)', 'moscow(1,9)', 'moscow(1,10)', 'moscow(1,11)', 'moscow(1,12)', 'moscow(1,13)', 'moscow(1,14)', 'moscow(1,15)', 'moscow(1,16)', 'moscow(1,17)', 'moscow(1,18)', 'moscow(1,19)', 'moscow(1,20)', 'moscow(1,21)', 'moscow(1,22)', 'moscow(1,23)', 'moscow(1,24)', 'moscow(1,25)', 'moscow(1,26)', 'moscow(1,27)', 'moscow(1,28)', 'moscow(1,29)', 'moscow(1,30)', 'moscow(1,31)', 'moscow(1,32)', 'moscow(1,33)', 'moscow(1,34)', 'moscow(1,35)', 'moscow(1,36)', 'moscow(1,37)', 'moscow(1,38)', 'moscow(1,39)', 'moscow(1,40)', 'moscow(1,41)', 'moscow(1,42)', 'moscow(1,43)', 'moscow(1,44)', 'moscow(1,45)', 'moscow(1,46)', 'moscow(1,47)', 'moscow(1,48)', 'moscow(1,49)', 'moscow(1,50)', 'moscow(1,51)', 'moscow(1,52)', 'moscow(1,53)', 'moscow(1,54)', 'moscow(1,55)', 'moscow(1,56)', 'moscow(1,57)', 'moscow(1,58)', 'moscow(1,59)', 'moscow(1,60)', 'moscow(1,61)', 'moscow(1,62)', 'moscow(1,63)', 'moscow(1,64)', 'moscow(1,65)', 'moscow(1,66)', 'moscow(1,67)', 'moscow(1,68)', 'moscow(1,69)', 'moscow(1,70)', 'moscow(1,71)', 'moscow(1,72)', 'moscow(1,73)', 'moscow(1,74)', 'moscow(1,75)', 'moscow(1,76)', 'moscow(1,77)', 'moscow(1,78)', 'moscow(1,79)', 'moscow(1,80)', 'moscow(1,81)', 'moscow(1,82)', 'moscow(1,83)', 'moscow(1,84)', 'moscow(1,85)', 'moscow(1,86)', 'moscow(1,87)', 'moscow(1,88)', 'moscow(1,89)', 'moscow(1,90)', 'moscow(1,91)', 'moscow(1,92)', 'moscow(1,93)', 'moscow(1,94)', 'moscow(1,95)', 'moscow(1,96)', 'moscow(1,97)', 'moscow(1,98)', 'moscow(1,99)', 'moscow(1,100)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(2,5)', 'moscow(2,6)', 'moscow(2,7)', 'moscow(2,8)', 'moscow(2,9)', 'moscow(2,10)', 'moscow(2,11)', 'moscow(2,12)', 'moscow(2,13)', 'moscow(2,14)', 'moscow(2,15)', 'moscow(2,16)', 'moscow(2,17)', 'moscow(2,18)', 'moscow(2,19)', 'moscow(2,20)', 'moscow(2,21)', 'moscow(2,22)', 'moscow(2,23)', 'moscow(2,24)', 'moscow(2,25)', 'moscow(2,26)', 'moscow(2,27)', 'moscow(2,28)', 'moscow(2,29)', 'moscow(2,30)', 'moscow(2,31)', 'moscow(2,32)', 'moscow(2,33)', 'moscow(2,34)', 'moscow(2,35)', 'moscow(2,36)', 'moscow(2,37)', 'moscow(2,38)', 'moscow(2,39)', 'moscow(2,40)', 'moscow(2,41)', 'moscow(2,42)', 'moscow(2,43)', 'moscow(2,44)', 'moscow(2,45)', 'moscow(2,46)', 'moscow(2,47)', 'moscow(2,48)', 'moscow(2,49)', 'moscow(2,50)', 'moscow(2,51)', 'moscow(2,52)', 'moscow(2,53)', 'moscow(2,54)', 'moscow(2,55)', 'moscow(2,56)', 'moscow(2,57)', 'moscow(2,58)', 'moscow(2,59)', 'moscow(2,60)', 'moscow(2,61)', 'moscow(2,62)', 'moscow(2,63)', 'moscow(2,64)', 'moscow(2,65)', 'moscow(2,66)', 'moscow(2,67)', 'moscow(2,68)', 'moscow(2,69)', 'moscow(2,70)', 'moscow(2,71)', 'moscow(2,72)', 'moscow(2,73)', 'moscow(2,74)', 'moscow(2,75)', 'moscow(2,76)', 'moscow(2,77)', 'moscow(2,78)', 'moscow(2,79)', 'moscow(2,80)', 'moscow(2,81)', 'moscow(2,82)', 'moscow(2,83)', 'moscow(2,84)', 'moscow(2,85)', 'moscow(2,86)', 'moscow(2,87)', 'moscow(2,88)', 'moscow(2,89)', 'moscow(2,90)', 'moscow(2,91)', 'moscow(2,92)', 'moscow(2,93)', 'moscow(2,94)', 'moscow(2,95)', 'moscow(2,96)', 'moscow(2,97)', 'moscow(2,98)', 'moscow(2,99)', 'moscow(2,100)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)', 'moscow(3,5)', 'moscow(3,6)', 'moscow(3,7)', 'moscow(3,8)', 'moscow(3,9)', 'moscow(3,10)', 'moscow(3,11)', 'moscow(3,12)', 'moscow(3,13)', 'moscow(3,14)', 'moscow(3,15)', 'moscow(3,16)', 'moscow(3,17)', 'moscow(3,18)', 'moscow(3,19)', 'moscow(3,20)', 'moscow(3,21)', 'moscow(3,22)', 'moscow(3,23)', 'moscow(3,24)', 'moscow(3,25)', 'moscow(3,26)', 'moscow(3,27)', 'moscow(3,28)', 'moscow(3,29)', 'moscow(3,30)', 'moscow(3,31)', 'moscow(3,32)', 'moscow(3,33)', 'moscow(3,34)', 'moscow(3,35)', 'moscow(3,36)', 'moscow(3,37)', 'moscow(3,38)', 'moscow(3,39)', 'moscow(3,40)', 'moscow(3,41)', 'moscow(3,42)', 'moscow(3,43)', 'moscow(3,44)', 'moscow(3,45)', 'moscow(3,46)', 'moscow(3,47)', 'moscow(3,48)', 'moscow(3,49)', 'moscow(3,50)', 'moscow(3,51)', 'moscow(3,52)', 'moscow(3,53)', 'moscow(3,54)', 'moscow(3,55)', 'moscow(3,56)', 'moscow(3,57)', 'moscow(3,58)', 'moscow(3,59)', 'moscow(3,60)', 'moscow(3,61)', 'moscow(3,62)', 'moscow(3,63)', 'moscow(3,64)', 'moscow(3,65)', 'moscow(3,66)', 'moscow(3,67)', 'moscow(3,68)', 'moscow(3,69)', 'moscow(3,70)', 'moscow(3,71)', 'moscow(3,72)', 'moscow(3,73)', 'moscow(3,74)', 'moscow(3,75)', 'moscow(3,76)', 'moscow(3,77)', 'moscow(3,78)', 'moscow(3,79)', 'moscow(3,80)', 'moscow(3,81)', 'moscow(3,82)', 'moscow(3,83)', 'moscow(3,84)', 'moscow(3,85)', 'moscow(3,86)', 'moscow(3,87)', 'moscow(3,88)', 'moscow(3,89)', 'moscow(3,90)', 'moscow(3,91)', 'moscow(3,92)', 'moscow(3,93)', 'moscow(3,94)', 'moscow(3,95)', 'moscow(3,96)', 'moscow(3,97)', 'moscow(3,98)', 'moscow(3,99)', 'moscow(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(1,5)', 'moscow(1,6)', 'moscow(1,7)', 'moscow(1,8)', 'moscow(1,9)', 'moscow(1,10)', 'moscow(1,11)', 'moscow(1,12)', 'moscow(1,13)', 'moscow(1,14)', 'moscow(1,15)', 'moscow(1,16)', 'moscow(1,17)', 'moscow(1,18)', 'moscow(1,19)', 'moscow(1,20)', 'moscow(1,21)', 'moscow(1,22)', 'moscow(1,23)', 'moscow(1,24)', 'moscow(1,25)', 'moscow(1,26)', 'moscow(1,27)', 'moscow(1,28)', 'moscow(1,29)', 'moscow(1,30)', 'moscow(1,31)', 'moscow(1,32)', 'moscow(1,33)', 'moscow(1,34)', 'moscow(1,35)', 'moscow(1,36)', 'moscow(1,37)', 'moscow(1,38)', 'moscow(1,39)', 'moscow(1,40)', 'moscow(1,41)', 'moscow(1,42)', 'moscow(1,43)', 'moscow(1,44)', 'moscow(1,45)', 'moscow(1,46)', 'moscow(1,47)', 'moscow(1,48)', 'moscow(1,49)', 'moscow(1,50)', 'moscow(1,51)', 'moscow(1,52)', 'moscow(1,53)', 'moscow(1,54)', 'moscow(1,55)', 'moscow(1,56)', 'moscow(1,57)', 'moscow(1,58)', 'moscow(1,59)', 'moscow(1,60)', 'moscow(1,61)', 'moscow(1,62)', 'moscow(1,63)', 'moscow(1,64)', 'moscow(1,65)', 'moscow(1,66)', 'moscow(1,67)', 'moscow(1,68)', 'moscow(1,69)', 'moscow(1,70)', 'moscow(1,71)', 'moscow(1,72)', 'moscow(1,73)', 'moscow(1,74)', 'moscow(1,75)', 'moscow(1,76)', 'moscow(1,77)', 'moscow(1,78)', 'moscow(1,79)', 'moscow(1,80)', 'moscow(1,81)', 'moscow(1,82)', 'moscow(1,83)', 'moscow(1,84)', 'moscow(1,85)', 'moscow(1,86)', 'moscow(1,87)', 'moscow(1,88)', 'moscow(1,89)', 'moscow(1,90)', 'moscow(1,91)', 'moscow(1,92)', 'moscow(1,93)', 'moscow(1,94)', 'moscow(1,95)', 'moscow(1,96)', 'moscow(1,97)', 'moscow(1,98)', 'moscow(1,99)', 'moscow(1,100)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(2,5)', 'moscow(2,6)', 'moscow(2,7)', 'moscow(2,8)', 'moscow(2,9)', 'moscow(2,10)', 'moscow(2,11)', 'moscow(2,12)', 'moscow(2,13)', 'moscow(2,14)', 'moscow(2,15)', 'moscow(2,16)', 'moscow(2,17)', 'moscow(2,18)', 'moscow(2,19)', 'moscow(2,20)', 'moscow(2,21)', 'moscow(2,22)', 'moscow(2,23)', 'moscow(2,24)', 'moscow(2,25)', 'moscow(2,26)', 'moscow(2,27)', 'moscow(2,28)', 'moscow(2,29)', 'moscow(2,30)', 'moscow(2,31)', 'moscow(2,32)', 'moscow(2,33)', 'moscow(2,34)', 'moscow(2,35)', 'moscow(2,36)', 'moscow(2,37)', 'moscow(2,38)', 'moscow(2,39)', 'moscow(2,40)', 'moscow(2,41)', 'moscow(2,42)', 'moscow(2,43)', 'moscow(2,44)', 'moscow(2,45)', 'moscow(2,46)', 'moscow(2,47)', 'moscow(2,48)', 'moscow(2,49)', 'moscow(2,50)', 'moscow(2,51)', 'moscow(2,52)', 'moscow(2,53)', 'moscow(2,54)', 'moscow(2,55)', 'moscow(2,56)', 'moscow(2,57)', 'moscow(2,58)', 'moscow(2,59)', 'moscow(2,60)', 'moscow(2,61)', 'moscow(2,62)', 'moscow(2,63)', 'moscow(2,64)', 'moscow(2,65)', 'moscow(2,66)', 'moscow(2,67)', 'moscow(2,68)', 'moscow(2,69)', 'moscow(2,70)', 'moscow(2,71)', 'moscow(2,72)', 'moscow(2,73)', 'moscow(2,74)', 'moscow(2,75)', 'moscow(2,76)', 'moscow(2,77)', 'moscow(2,78)', 'moscow(2,79)', 'moscow(2,80)', 'moscow(2,81)', 'moscow(2,82)', 'moscow(2,83)', 'moscow(2,84)', 'moscow(2,85)', 'moscow(2,86)', 'moscow(2,87)', 'moscow(2,88)', 'moscow(2,89)', 'moscow(2,90)', 'moscow(2,91)', 'moscow(2,92)', 'moscow(2,93)', 'moscow(2,94)', 'moscow(2,95)', 'moscow(2,96)', 'moscow(2,97)', 'moscow(2,98)', 'moscow(2,99)', 'moscow(2,100)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)', 'moscow(3,5)', 'moscow(3,6)', 'moscow(3,7)', 'moscow(3,8)', 'moscow(3,9)', 'moscow(3,10)', 'moscow(3,11)', 'moscow(3,12)', 'moscow(3,13)', 'moscow(3,14)', 'moscow(3,15)', 'moscow(3,16)', 'moscow(3,17)', 'moscow(3,18)', 'moscow(3,19)', 'moscow(3,20)', 'moscow(3,21)', 'moscow(3,22)', 'moscow(3,23)', 'moscow(3,24)', 'moscow(3,25)', 'moscow(3,26)', 'moscow(3,27)', 'moscow(3,28)', 'moscow(3,29)', 'moscow(3,30)', 'moscow(3,31)', 'moscow(3,32)', 'moscow(3,33)', 'moscow(3,34)', 'moscow(3,35)', 'moscow(3,36)', 'moscow(3,37)', 'moscow(3,38)', 'moscow(3,39)', 'moscow(3,40)', 'moscow(3,41)', 'moscow(3,42)', 'moscow(3,43)', 'moscow(3,44)', 'moscow(3,45)', 'moscow(3,46)', 'moscow(3,47)', 'moscow(3,48)', 'moscow(3,49)', 'moscow(3,50)', 'moscow(3,51)', 'moscow(3,52)', 'moscow(3,53)', 'moscow(3,54)', 'moscow(3,55)', 'moscow(3,56)', 'moscow(3,57)', 'moscow(3,58)', 'moscow(3,59)', 'moscow(3,60)', 'moscow(3,61)', 'moscow(3,62)', 'moscow(3,63)', 'moscow(3,64)', 'moscow(3,65)', 'moscow(3,66)', 'moscow(3,67)', 'moscow(3,68)', 'moscow(3,69)', 'moscow(3,70)', 'moscow(3,71)', 'moscow(3,72)', 'moscow(3,73)', 'moscow(3,74)', 'moscow(3,75)', 'moscow(3,76)', 'moscow(3,77)', 'moscow(3,78)', 'moscow(3,79)', 'moscow(3,80)', 'moscow(3,81)', 'moscow(3,82)', 'moscow(3,83)', 'moscow(3,84)', 'moscow(3,85)', 'moscow(3,86)', 'moscow(3,87)', 'moscow(3,88)', 'moscow(3,89)', 'moscow(3,90)', 'moscow(3,91)', 'moscow(3,92)', 'moscow(3,93)', 'moscow(3,94)', 'moscow(3,95)', 'moscow(3,96)', 'moscow(3,97)', 'moscow(3,98)', 'moscow(3,99)', 'moscow(3,100)', 'select(1)', 'select(2)', 'select(3)']]


360
assignment

question: 
Build an ASP program that links each element identified by the predicate "weight" to a single label from "storm","delhi","owner","pink".

answer from file: 
assign(X,"storm")|assign(X,"delhi")|assign(X,"owner")|assign(X,"pink"):-weight(X).

parsed from model: 
assign(X,"storm")|assign(X,"delhi")|assign(X,"owner")|assign(X,"pink"):-weight(X).

facts: 
weight(1..5).

generated: 
Build an ASP program that links each element identified by the predicate "weight" to a single label from "storm","delhi","owner","pink".
Answer: assign(X,"storm")|assign(X,"delhi")|assign(X,"owner")|assign(X,"pink"):-weight(X).
assign(X,"pink"):-weight(X).
weight(X):-age(X).
age(X):-height(X).
height(X):-name(X).
name(X):-city(X).
city(X):-description(X).
description(X):-height(X).
height(X):-description(X).
description(X):-city(X).

unique_rules: 
['assign(X,"storm")|assign(X,"delhi")|assign(X,"owner")|assign(X,"pink"):-weight(X).', 'assign(X,"pink"):-weight(X).', 'weight(X):-age(X).', 'age(X):-height(X).', 'height(X):-name(X).', 'name(X):-city(X).', 'city(X):-description(X).', 'description(X):-height(X).', 'height(X):-description(X).', 'description(X):-city(X).']

jaccard: 1.0

AS desired: [['weight(1)', 'weight(2)', 'weight(3)', 'weight(4)', 'weight(5)', 'assign(1,"owner")', 'assign(2,"pink")', 'assign(3,"owner")', 'assign(4,"pink")', 'assign(5,"pink")']]
\AS obtained: [['weight(1)', 'weight(2)', 'weight(3)', 'weight(4)', 'weight(5)', 'assign(1,"owner")', 'assign(2,"pink")', 'assign(3,"owner")', 'assign(4,"pink")', 'assign(5,"pink")']]


361
constraint

question: 
Craft an ASP application to avoid mapping the "quality" predicate with value 14 to the label "toronto".

answer from file: 
:-assign(14,toronto).

parsed from model: 
:-assign(14,toronto).

facts: 
quality(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-quality(X).

generated: 
Craft an ASP application to avoid mapping the "quality" predicate with value 14 to the label "toronto".
Answer: :-assign(14,toronto).
Explanation: The predicate "height" includes the "city" label, and the predicate "city" includes the "description" label.
The predicate "quality" includes the "city" label, but not the "description" label.
So, the assignment "assign(14,toronto)" is not valid.

unique_rules: 
[':-assign(14,toronto).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'quality(6)', 'quality(7)', 'quality(8)', 'quality(9)', 'quality(10)', 'quality(11)', 'quality(12)', 'quality(13)', 'quality(14)', 'quality(15)', 'quality(16)', 'quality(17)', 'quality(18)', 'quality(19)', 'quality(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'quality(6)', 'quality(7)', 'quality(8)', 'quality(9)', 'quality(10)', 'quality(11)', 'quality(12)', 'quality(13)', 'quality(14)', 'quality(15)', 'quality(16)', 'quality(17)', 'quality(18)', 'quality(19)', 'quality(20)']]


362
combination

question: 
Compose an ASP script that generates the cross-product of elements between the predicates "lightblue" and "laptop".

answer from file: 
combination(X,Y):-lightblue(X),laptop(Y).

parsed from model: 


facts: 
lightblue(1..4).laptop(1..5).

generated: 
Compose an ASP script that generates the cross-product of elements between the predicates "lightblue" and "laptop".
Answer: cross_product(lightblue(X),laptop(X)) for X in range(1,11).
```python
cross_product = lambda X: lightblue(X) * laptop(X).
```

unique_rules: 
[]

jaccard: 0.0

AS desired: [['laptop(1)', 'laptop(2)', 'laptop(3)', 'laptop(4)', 'laptop(5)', 'lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'lightblue(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'lightblue(4)', 'laptop(1)', 'laptop(2)', 'laptop(3)', 'laptop(4)', 'laptop(5)']]


363
join

question: 
Compose an ASP script to address the problem by defining the predicate "lake_cosenza" which associates each lake with the strength of cosenza, with "lake" having fields "ID","cosenzaID","surname","lake" and "cosenza" having fields "ID","quality","strength","lake".

answer from file: 
lake_cosenza(X,Z):-lake(X,Y,_,_),cosenza(Y,_,Z,_).

parsed from model: 
lake_cosenza(X,Z):-lake(X,Y,_,_),cosenza(Y,Z,Z,_).

facts: 
lake("ID","cosenzaID","surname","lake").cosenza("ID","quality","strength","lake").

generated: 
Compose an ASP script to address the problem by defining the predicate "lake_cosenza" which associates each lake with the strength of cosenza, with "lake" having fields "ID","cosenzaID","surname","lake" and "cosenza" having fields "ID","quality","strength","lake". Define the predicate "lake_cosenza" which associates each lake with the strength of cosenza.
Answer: lake_cosenza(X,Z):-lake(X,Y,_,_),cosenza(Y,Z,Z,_).
lake_cosenza(X,Z):-lake(X,Y,_,_),not cosenza(Y,Z,Z,_).
lake_cosenza(X,Z):-lake(X,Y,_,_),car(Y,Z,_,_).
lake_cosenza(X,Z):-not lake(X,Y,_,_),car(Y,Z,_,_).

unique_rules: 
['lake_cosenza(X,Z):-lake(X,Y,_,_),cosenza(Y,Z,Z,_).', 'lake_cosenza(X,Z):-lake(X,Y,_,_),not cosenza(Y,Z,Z,_).', 'lake_cosenza(X,Z):-lake(X,Y,_,_),car(Y,Z,_,_).', 'lake_cosenza(X,Z):-not lake(X,Y,_,_),car(Y,Z,_,_).']

jaccard: 1.0

AS desired: [['lake("ID","cosenzaID","surname","lake")', 'cosenza("ID","quality","strength","lake")']]
\AS obtained: [['lake("ID","cosenzaID","surname","lake")', 'cosenza("ID","quality","strength","lake")']]


364
closure

question: 
Create an ASP solution that establishes the predicate "family" through the transitive closure of the "storm" predicate.

answer from file: 
family(X,Y):-storm(X,Y).
family(X,Y):-storm(X,Z),family(Z,Y).

parsed from model: 
family(X,Y):-storm(X,Y).
family(X,Y):-storm(X,Z),family(Z,Y).

facts: 
storm(1..3, 1..4).

generated: 
Create an ASP solution that establishes the predicate "family" through the transitive closure of the "storm" predicate.
Answer: family(X,Y):-storm(X,Y).
family(X,Y):-storm(X,Z),family(Z,Y).
family(X,Y):-not storm(X,Y).
family(X,Y):-age(X,Y).
age(X,Y):-city(X,Y).
city(X,Y):-age(X,Y).

unique_rules: 
['family(X,Y):-storm(X,Y).', 'family(X,Y):-storm(X,Z),family(Z,Y).', 'family(X,Y):-not storm(X,Y).', 'family(X,Y):-age(X,Y).', 'age(X,Y):-city(X,Y).', 'city(X,Y):-age(X,Y).']

jaccard: 1.0

AS desired: [['storm(1,1)', 'storm(1,2)', 'storm(1,3)', 'storm(1,4)', 'storm(2,1)', 'storm(2,2)', 'storm(2,3)', 'storm(2,4)', 'storm(3,1)', 'storm(3,2)', 'storm(3,3)', 'storm(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]
\AS obtained: [['storm(1,1)', 'storm(1,2)', 'storm(1,3)', 'storm(1,4)', 'storm(2,1)', 'storm(2,2)', 'storm(2,3)', 'storm(2,4)', 'storm(3,1)', 'storm(3,2)', 'storm(3,3)', 'storm(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]


365
preference

question: 
Generate an ASP application to keep the "pink" predicate with value "11" separate from "mumbai", incurring a cost of "1" at level "1" if associated.

answer from file: 
:~assign(11,"mumbai").[1@1]

parsed from model: 
:~assign(11,"mumbai").[1@1]

facts: 
pink(1..20).

generated: 
Generate an ASP application to keep the "pink" predicate with value "11" separate from "mumbai", incurring a cost of "1" at level "1" if associated.
Answer: :~assign(11,"mumbai").[1@1]

unique_rules: 
[':~assign(11,"mumbai").[1@1]']

jaccard: 1.0

AS desired: [['pink(1)', 'pink(2)', 'pink(3)', 'pink(4)', 'pink(5)', 'pink(6)', 'pink(7)', 'pink(8)', 'pink(9)', 'pink(10)', 'pink(11)', 'pink(12)', 'pink(13)', 'pink(14)', 'pink(15)', 'pink(16)', 'pink(17)', 'pink(18)', 'pink(19)', 'pink(20)']]
\AS obtained: [['pink(1)', 'pink(2)', 'pink(3)', 'pink(4)', 'pink(5)', 'pink(6)', 'pink(7)', 'pink(8)', 'pink(9)', 'pink(10)', 'pink(11)', 'pink(12)', 'pink(13)', 'pink(14)', 'pink(15)', 'pink(16)', 'pink(17)', 'pink(18)', 'pink(19)', 'pink(20)']]


366
filtering

question: 
Develop an ASP solution that gathers data associated with the "storm" label within the predicate "pink".

answer from file: 
select(X):-pink(X,"storm").

parsed from model: 
select(X):-pink(X,"city").

facts: 
pink(1..5, "storm").

generated: 
Develop an ASP solution that gathers data associated with the "storm" label within the predicate "pink".
Answer: select(X):-pink(X,"city").
select(X):-pink(X,"description").
select(X):-pink(X,"author").
select(X):-pink(X,"city","description").
select(X):-pink(X,"city","author").
select(X):-pink(X,"description","author").
select(X):-pink(X,"city","description","author").

unique_rules: 
['select(X):-pink(X,"city").', 'select(X):-pink(X,"description").', 'select(X):-pink(X,"author").', 'select(X):-pink(X,"city","description").', 'select(X):-pink(X,"city","author").', 'select(X):-pink(X,"description","author").', 'select(X):-pink(X,"city","description","author").']

jaccard: 0.0

AS desired: [['pink(1,"storm")', 'pink(2,"storm")', 'pink(3,"storm")', 'pink(4,"storm")', 'pink(5,"storm")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['pink(1,"storm")', 'pink(2,"storm")', 'pink(3,"storm")', 'pink(4,"storm")', 'pink(5,"storm")']]


367
negative_filtering

question: 
Create an ASP program to capture values associated with the predicate "butterfly" but not to the predicate "roof" and labeled "singapore".

answer from file: 
select(X):-butterfly(X),not roof(X,"singapore").

parsed from model: 
select(X):-butterfly(X),not roof(X,"singapore").

facts: 
butterfly(1..3).roof(1,"black").roof(2,"quality").roof(3,"mumbai").

generated: 
Create an ASP program to capture values associated with the predicate "butterfly" but not to the predicate "roof" and labeled "singapore".
Answer: select(X):-butterfly(X),not roof(X,"singapore").
Explanation: The predicate " arrivant" captures values associated with the predicate "description" but not to the predicate "moto" and labeled "rome".
The predicate "rome" captures values associated with the predicate "description".
The predicate "moto" captures values associated with the predicate "description".
The predicate "singapore" captures values associated with the predicate "description".

unique_rules: 
['select(X):-butterfly(X),not roof(X,"singapore").']

jaccard: 1.0

AS desired: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'roof(1,"black")', 'roof(2,"quality")', 'roof(3,"mumbai")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'roof(1,"black")', 'roof(2,"quality")', 'roof(3,"mumbai")', 'select(1)', 'select(2)', 'select(3)']]


368
numeric_filtering

question: 
Develop an ASP application to retrieve all values connected to the predicate "white" with a value different than 94.

answer from file: 
select(X):-white(X,C),C!=94.

parsed from model: 
select(X):-white(X,C),C!=94.

facts: 
white(1..3, 1..100).

generated: 
Develop an ASP application to retrieve all values connected to the predicate "white" with a value different than 94.
Answer: select(X):-white(X,C),C!=94.
white(X,C):-white(X,C),C==94.

unique_rules: 
['select(X):-white(X,C),C!=94.', 'white(X,C):-white(X,C),C==94.']

jaccard: 1.0

AS desired: [['white(1,1)', 'white(1,2)', 'white(1,3)', 'white(1,4)', 'white(1,5)', 'white(1,6)', 'white(1,7)', 'white(1,8)', 'white(1,9)', 'white(1,10)', 'white(1,11)', 'white(1,12)', 'white(1,13)', 'white(1,14)', 'white(1,15)', 'white(1,16)', 'white(1,17)', 'white(1,18)', 'white(1,19)', 'white(1,20)', 'white(1,21)', 'white(1,22)', 'white(1,23)', 'white(1,24)', 'white(1,25)', 'white(1,26)', 'white(1,27)', 'white(1,28)', 'white(1,29)', 'white(1,30)', 'white(1,31)', 'white(1,32)', 'white(1,33)', 'white(1,34)', 'white(1,35)', 'white(1,36)', 'white(1,37)', 'white(1,38)', 'white(1,39)', 'white(1,40)', 'white(1,41)', 'white(1,42)', 'white(1,43)', 'white(1,44)', 'white(1,45)', 'white(1,46)', 'white(1,47)', 'white(1,48)', 'white(1,49)', 'white(1,50)', 'white(1,51)', 'white(1,52)', 'white(1,53)', 'white(1,54)', 'white(1,55)', 'white(1,56)', 'white(1,57)', 'white(1,58)', 'white(1,59)', 'white(1,60)', 'white(1,61)', 'white(1,62)', 'white(1,63)', 'white(1,64)', 'white(1,65)', 'white(1,66)', 'white(1,67)', 'white(1,68)', 'white(1,69)', 'white(1,70)', 'white(1,71)', 'white(1,72)', 'white(1,73)', 'white(1,74)', 'white(1,75)', 'white(1,76)', 'white(1,77)', 'white(1,78)', 'white(1,79)', 'white(1,80)', 'white(1,81)', 'white(1,82)', 'white(1,83)', 'white(1,84)', 'white(1,85)', 'white(1,86)', 'white(1,87)', 'white(1,88)', 'white(1,89)', 'white(1,90)', 'white(1,91)', 'white(1,92)', 'white(1,93)', 'white(1,94)', 'white(1,95)', 'white(1,96)', 'white(1,97)', 'white(1,98)', 'white(1,99)', 'white(1,100)', 'white(2,1)', 'white(2,2)', 'white(2,3)', 'white(2,4)', 'white(2,5)', 'white(2,6)', 'white(2,7)', 'white(2,8)', 'white(2,9)', 'white(2,10)', 'white(2,11)', 'white(2,12)', 'white(2,13)', 'white(2,14)', 'white(2,15)', 'white(2,16)', 'white(2,17)', 'white(2,18)', 'white(2,19)', 'white(2,20)', 'white(2,21)', 'white(2,22)', 'white(2,23)', 'white(2,24)', 'white(2,25)', 'white(2,26)', 'white(2,27)', 'white(2,28)', 'white(2,29)', 'white(2,30)', 'white(2,31)', 'white(2,32)', 'white(2,33)', 'white(2,34)', 'white(2,35)', 'white(2,36)', 'white(2,37)', 'white(2,38)', 'white(2,39)', 'white(2,40)', 'white(2,41)', 'white(2,42)', 'white(2,43)', 'white(2,44)', 'white(2,45)', 'white(2,46)', 'white(2,47)', 'white(2,48)', 'white(2,49)', 'white(2,50)', 'white(2,51)', 'white(2,52)', 'white(2,53)', 'white(2,54)', 'white(2,55)', 'white(2,56)', 'white(2,57)', 'white(2,58)', 'white(2,59)', 'white(2,60)', 'white(2,61)', 'white(2,62)', 'white(2,63)', 'white(2,64)', 'white(2,65)', 'white(2,66)', 'white(2,67)', 'white(2,68)', 'white(2,69)', 'white(2,70)', 'white(2,71)', 'white(2,72)', 'white(2,73)', 'white(2,74)', 'white(2,75)', 'white(2,76)', 'white(2,77)', 'white(2,78)', 'white(2,79)', 'white(2,80)', 'white(2,81)', 'white(2,82)', 'white(2,83)', 'white(2,84)', 'white(2,85)', 'white(2,86)', 'white(2,87)', 'white(2,88)', 'white(2,89)', 'white(2,90)', 'white(2,91)', 'white(2,92)', 'white(2,93)', 'white(2,94)', 'white(2,95)', 'white(2,96)', 'white(2,97)', 'white(2,98)', 'white(2,99)', 'white(2,100)', 'white(3,1)', 'white(3,2)', 'white(3,3)', 'white(3,4)', 'white(3,5)', 'white(3,6)', 'white(3,7)', 'white(3,8)', 'white(3,9)', 'white(3,10)', 'white(3,11)', 'white(3,12)', 'white(3,13)', 'white(3,14)', 'white(3,15)', 'white(3,16)', 'white(3,17)', 'white(3,18)', 'white(3,19)', 'white(3,20)', 'white(3,21)', 'white(3,22)', 'white(3,23)', 'white(3,24)', 'white(3,25)', 'white(3,26)', 'white(3,27)', 'white(3,28)', 'white(3,29)', 'white(3,30)', 'white(3,31)', 'white(3,32)', 'white(3,33)', 'white(3,34)', 'white(3,35)', 'white(3,36)', 'white(3,37)', 'white(3,38)', 'white(3,39)', 'white(3,40)', 'white(3,41)', 'white(3,42)', 'white(3,43)', 'white(3,44)', 'white(3,45)', 'white(3,46)', 'white(3,47)', 'white(3,48)', 'white(3,49)', 'white(3,50)', 'white(3,51)', 'white(3,52)', 'white(3,53)', 'white(3,54)', 'white(3,55)', 'white(3,56)', 'white(3,57)', 'white(3,58)', 'white(3,59)', 'white(3,60)', 'white(3,61)', 'white(3,62)', 'white(3,63)', 'white(3,64)', 'white(3,65)', 'white(3,66)', 'white(3,67)', 'white(3,68)', 'white(3,69)', 'white(3,70)', 'white(3,71)', 'white(3,72)', 'white(3,73)', 'white(3,74)', 'white(3,75)', 'white(3,76)', 'white(3,77)', 'white(3,78)', 'white(3,79)', 'white(3,80)', 'white(3,81)', 'white(3,82)', 'white(3,83)', 'white(3,84)', 'white(3,85)', 'white(3,86)', 'white(3,87)', 'white(3,88)', 'white(3,89)', 'white(3,90)', 'white(3,91)', 'white(3,92)', 'white(3,93)', 'white(3,94)', 'white(3,95)', 'white(3,96)', 'white(3,97)', 'white(3,98)', 'white(3,99)', 'white(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['white(1,1)', 'white(1,2)', 'white(1,3)', 'white(1,4)', 'white(1,5)', 'white(1,6)', 'white(1,7)', 'white(1,8)', 'white(1,9)', 'white(1,10)', 'white(1,11)', 'white(1,12)', 'white(1,13)', 'white(1,14)', 'white(1,15)', 'white(1,16)', 'white(1,17)', 'white(1,18)', 'white(1,19)', 'white(1,20)', 'white(1,21)', 'white(1,22)', 'white(1,23)', 'white(1,24)', 'white(1,25)', 'white(1,26)', 'white(1,27)', 'white(1,28)', 'white(1,29)', 'white(1,30)', 'white(1,31)', 'white(1,32)', 'white(1,33)', 'white(1,34)', 'white(1,35)', 'white(1,36)', 'white(1,37)', 'white(1,38)', 'white(1,39)', 'white(1,40)', 'white(1,41)', 'white(1,42)', 'white(1,43)', 'white(1,44)', 'white(1,45)', 'white(1,46)', 'white(1,47)', 'white(1,48)', 'white(1,49)', 'white(1,50)', 'white(1,51)', 'white(1,52)', 'white(1,53)', 'white(1,54)', 'white(1,55)', 'white(1,56)', 'white(1,57)', 'white(1,58)', 'white(1,59)', 'white(1,60)', 'white(1,61)', 'white(1,62)', 'white(1,63)', 'white(1,64)', 'white(1,65)', 'white(1,66)', 'white(1,67)', 'white(1,68)', 'white(1,69)', 'white(1,70)', 'white(1,71)', 'white(1,72)', 'white(1,73)', 'white(1,74)', 'white(1,75)', 'white(1,76)', 'white(1,77)', 'white(1,78)', 'white(1,79)', 'white(1,80)', 'white(1,81)', 'white(1,82)', 'white(1,83)', 'white(1,84)', 'white(1,85)', 'white(1,86)', 'white(1,87)', 'white(1,88)', 'white(1,89)', 'white(1,90)', 'white(1,91)', 'white(1,92)', 'white(1,93)', 'white(1,94)', 'white(1,95)', 'white(1,96)', 'white(1,97)', 'white(1,98)', 'white(1,99)', 'white(1,100)', 'white(2,1)', 'white(2,2)', 'white(2,3)', 'white(2,4)', 'white(2,5)', 'white(2,6)', 'white(2,7)', 'white(2,8)', 'white(2,9)', 'white(2,10)', 'white(2,11)', 'white(2,12)', 'white(2,13)', 'white(2,14)', 'white(2,15)', 'white(2,16)', 'white(2,17)', 'white(2,18)', 'white(2,19)', 'white(2,20)', 'white(2,21)', 'white(2,22)', 'white(2,23)', 'white(2,24)', 'white(2,25)', 'white(2,26)', 'white(2,27)', 'white(2,28)', 'white(2,29)', 'white(2,30)', 'white(2,31)', 'white(2,32)', 'white(2,33)', 'white(2,34)', 'white(2,35)', 'white(2,36)', 'white(2,37)', 'white(2,38)', 'white(2,39)', 'white(2,40)', 'white(2,41)', 'white(2,42)', 'white(2,43)', 'white(2,44)', 'white(2,45)', 'white(2,46)', 'white(2,47)', 'white(2,48)', 'white(2,49)', 'white(2,50)', 'white(2,51)', 'white(2,52)', 'white(2,53)', 'white(2,54)', 'white(2,55)', 'white(2,56)', 'white(2,57)', 'white(2,58)', 'white(2,59)', 'white(2,60)', 'white(2,61)', 'white(2,62)', 'white(2,63)', 'white(2,64)', 'white(2,65)', 'white(2,66)', 'white(2,67)', 'white(2,68)', 'white(2,69)', 'white(2,70)', 'white(2,71)', 'white(2,72)', 'white(2,73)', 'white(2,74)', 'white(2,75)', 'white(2,76)', 'white(2,77)', 'white(2,78)', 'white(2,79)', 'white(2,80)', 'white(2,81)', 'white(2,82)', 'white(2,83)', 'white(2,84)', 'white(2,85)', 'white(2,86)', 'white(2,87)', 'white(2,88)', 'white(2,89)', 'white(2,90)', 'white(2,91)', 'white(2,92)', 'white(2,93)', 'white(2,94)', 'white(2,95)', 'white(2,96)', 'white(2,97)', 'white(2,98)', 'white(2,99)', 'white(2,100)', 'white(3,1)', 'white(3,2)', 'white(3,3)', 'white(3,4)', 'white(3,5)', 'white(3,6)', 'white(3,7)', 'white(3,8)', 'white(3,9)', 'white(3,10)', 'white(3,11)', 'white(3,12)', 'white(3,13)', 'white(3,14)', 'white(3,15)', 'white(3,16)', 'white(3,17)', 'white(3,18)', 'white(3,19)', 'white(3,20)', 'white(3,21)', 'white(3,22)', 'white(3,23)', 'white(3,24)', 'white(3,25)', 'white(3,26)', 'white(3,27)', 'white(3,28)', 'white(3,29)', 'white(3,30)', 'white(3,31)', 'white(3,32)', 'white(3,33)', 'white(3,34)', 'white(3,35)', 'white(3,36)', 'white(3,37)', 'white(3,38)', 'white(3,39)', 'white(3,40)', 'white(3,41)', 'white(3,42)', 'white(3,43)', 'white(3,44)', 'white(3,45)', 'white(3,46)', 'white(3,47)', 'white(3,48)', 'white(3,49)', 'white(3,50)', 'white(3,51)', 'white(3,52)', 'white(3,53)', 'white(3,54)', 'white(3,55)', 'white(3,56)', 'white(3,57)', 'white(3,58)', 'white(3,59)', 'white(3,60)', 'white(3,61)', 'white(3,62)', 'white(3,63)', 'white(3,64)', 'white(3,65)', 'white(3,66)', 'white(3,67)', 'white(3,68)', 'white(3,69)', 'white(3,70)', 'white(3,71)', 'white(3,72)', 'white(3,73)', 'white(3,74)', 'white(3,75)', 'white(3,76)', 'white(3,77)', 'white(3,78)', 'white(3,79)', 'white(3,80)', 'white(3,81)', 'white(3,82)', 'white(3,83)', 'white(3,84)', 'white(3,85)', 'white(3,86)', 'white(3,87)', 'white(3,88)', 'white(3,89)', 'white(3,90)', 'white(3,91)', 'white(3,92)', 'white(3,93)', 'white(3,94)', 'white(3,95)', 'white(3,96)', 'white(3,97)', 'white(3,98)', 'white(3,99)', 'white(3,100)', 'select(1)', 'select(2)', 'select(3)']]


369
assignment

question: 
Develop an ASP script that ensures each element, as specified by the predicate "butterfly", receives exactly one label from the set "storm","singapore","weight".

answer from file: 
assign(X,"storm")|assign(X,"singapore")|assign(X,"weight"):-butterfly(X).

parsed from model: 
assign(X,"storm")|assign(X,"singapore")|assign(X,"weight"):- arrivant(X,"bike").

facts: 
butterfly(1..5).

generated: 
Develop an ASP script that ensures each element, as specified by the predicate "butterfly", receives exactly one label from the set "storm","singapore","weight".
Answer: assign(X,"storm")|assign(X,"singapore")|assign(X,"weight"):- arrivant(X,"bike").
assign(X,"bike"):- arrivant(X,"height").
assign(X,"height"):- arrivant(X,"bike").
assign(X,"bike"):- arrivant(X,"height").
assign(X,"height"):- arrivant(X,"bike").
assign(X,"bike"):- arrivant(X,"height").
assign(X,"height"):- arrivant(X,"bike").
assign(X,"bike"):- arrivant(X,"height").
assign(X,"height"):- arrivant(X,"bike").
assign(X,"bike"):

unique_rules: 
['assign(X,"storm")|assign(X,"singapore")|assign(X,"weight"):- arrivant(X,"bike").', 'assign(X,"bike"):- arrivant(X,"height").', 'assign(X,"height"):- arrivant(X,"bike").']

jaccard: 0.0

AS desired: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)', 'assign(1,"weight")', 'assign(2,"weight")', 'assign(3,"weight")', 'assign(4,"weight")', 'assign(5,"weight")']]
\AS obtained: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)']]


370
constraint

question: 
Formulate an ASP script to ensure the "desk" predicate having value 1 is not associated with the label "laptop".

answer from file: 
:-assign(1,laptop).

parsed from model: 
:-assign(1,laptop).

facts: 
desk(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-desk(X).

generated: 
Formulate an ASP script to ensure the "desk" predicate having value 1 is not associated with the label "laptop".
Answer: :-assign(1,laptop).
Explanation: The predicate "desk" having value 1 is not associated with the label " arrivant".
The predicate " arrivant" having value 1 is associated with the label "dubai".

unique_rules: 
[':-assign(1,laptop).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'desk(1)', 'desk(2)', 'desk(3)', 'desk(4)', 'desk(5)', 'desk(6)', 'desk(7)', 'desk(8)', 'desk(9)', 'desk(10)', 'desk(11)', 'desk(12)', 'desk(13)', 'desk(14)', 'desk(15)', 'desk(16)', 'desk(17)', 'desk(18)', 'desk(19)', 'desk(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'desk(1)', 'desk(2)', 'desk(3)', 'desk(4)', 'desk(5)', 'desk(6)', 'desk(7)', 'desk(8)', 'desk(9)', 'desk(10)', 'desk(11)', 'desk(12)', 'desk(13)', 'desk(14)', 'desk(15)', 'desk(16)', 'desk(17)', 'desk(18)', 'desk(19)', 'desk(20)']]


371
combination

question: 
Create an ASP program to calculate the Cartesian product of elements from sets represented by the predicates "quality" and "delhi".

answer from file: 
combination(X,Y):-quality(X),delhi(Y).

parsed from model: 
combination(X,Y):-quality(X),delhi(Y).

facts: 
quality(1..4).delhi(1..5).

generated: 
Create an ASP program to calculate the Cartesian product of elements from sets represented by the predicates "quality" and "delhi".
Answer: combination(X,Y):-quality(X),delhi(Y).
combination(X,Y):-quality(X),not delhi(Y).
combination(X,Y):-not quality(X),delhi(Y).
combination(X,Y):-quality(X),delhi(Y).

unique_rules: 
['combination(X,Y):-quality(X),delhi(Y).', 'combination(X,Y):-quality(X),not delhi(Y).', 'combination(X,Y):-not quality(X),delhi(Y).']

jaccard: 1.0

AS desired: [['delhi(1)', 'delhi(2)', 'delhi(3)', 'delhi(4)', 'delhi(5)', 'quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['delhi(1)', 'delhi(2)', 'delhi(3)', 'delhi(4)', 'delhi(5)', 'quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


372
join

question: 
Draft an ASP script to define the predicate "chair_surname" that associates each chair with the owner of surname, given "chair" has fields "ID","weight","surnameID","surname" and "surname" has fields "ID","owner","lake","quality".

answer from file: 
chair_surname(X,Z):-chair(X,_,Y,_),surname(Y,Z,_,_).

parsed from model: 
chair_surname(X,Z):-chair(X,_,Y,_),author(Y,Z,_,_).

facts: 
chair("ID","weight","surnameID","surname").surname("ID","owner","lake","quality").

generated: 
Draft an ASP script to define the predicate "chair_surname" that associates each chair with the owner of surname, given "chair" has fields "ID","weight","surnameID","surname" and "surname" has fields "ID","owner","lake","quality". Define the predicate "chair_surname" that associates each chair with the owner of the surname "author".
Answer: chair_surname(X,Z):-chair(X,_,Y,_),author(Y,Z,_,_).
chair_surname(X,Z):-chair(X,_,Z,_),author(Z,_,_,_).

unique_rules: 
['chair_surname(X,Z):-chair(X,_,Y,_),author(Y,Z,_,_).', 'chair_surname(X,Z):-chair(X,_,Z,_),author(Z,_,_,_).']

jaccard: 1.0

AS desired: [['chair("ID","weight","surnameID","surname")', 'surname("ID","owner","lake","quality")']]
\AS obtained: [['chair("ID","weight","surnameID","surname")', 'surname("ID","owner","lake","quality")']]


373
closure

question: 
Develop an ASP application that constructs the "trains" predicate based on the transitive closure of the "owner" predicate.

answer from file: 
trains(X,Y):-owner(X,Y).
trains(X,Y):-owner(X,Z),trains(Z,Y).

parsed from model: 
trains(X,Y):-owner(X,Y).
trains(X,Y):-owner(X,Z),trains(Z,Y).

facts: 
owner(1..3, 1..4).

generated: 
Develop an ASP application that constructs the "trains" predicate based on the transitive closure of the "owner" predicate.
Answer: trains(X,Y):-owner(X,Y).
trains(X,Y):-owner(X,Z),trains(Z,Y).
trains(X,Y):-owner(X,Z),Z!=Y.
trains(X,Y):-owner(X,Y).
The predicate "owner" includes fields "ID","city","author","height","name","description","city","author","height","name","description","height","author","city","description","height","name","description","height","author","city","description","height","name","description","height","author","city","description","height","name","description","height","author","city","description","height","name","description

unique_rules: 
['trains(X,Y):-owner(X,Y).', 'trains(X,Y):-owner(X,Z),trains(Z,Y).', 'trains(X,Y):-owner(X,Z),Z!=Y.']

jaccard: 1.0

AS desired: [['owner(1,1)', 'owner(1,2)', 'owner(1,3)', 'owner(1,4)', 'owner(2,1)', 'owner(2,2)', 'owner(2,3)', 'owner(2,4)', 'owner(3,1)', 'owner(3,2)', 'owner(3,3)', 'owner(3,4)', 'trains(1,1)', 'trains(1,2)', 'trains(1,3)', 'trains(1,4)', 'trains(2,1)', 'trains(2,2)', 'trains(2,3)', 'trains(2,4)', 'trains(3,1)', 'trains(3,2)', 'trains(3,3)', 'trains(3,4)']]
\AS obtained: [['owner(1,1)', 'owner(1,2)', 'owner(1,3)', 'owner(1,4)', 'owner(2,1)', 'owner(2,2)', 'owner(2,3)', 'owner(2,4)', 'owner(3,1)', 'owner(3,2)', 'owner(3,3)', 'owner(3,4)', 'trains(1,1)', 'trains(1,2)', 'trains(1,3)', 'trains(1,4)', 'trains(2,1)', 'trains(2,2)', 'trains(2,3)', 'trains(2,4)', 'trains(3,1)', 'trains(3,2)', 'trains(3,3)', 'trains(3,4)']]


374
preference

question: 
Craft an ASP solution to prevent the linking of the "lake" predicate with value "14" to "black". Any link incurs a cost of "1" at level "1".

answer from file: 
:~assign(14,"black").[1@1]

parsed from model: 
:~assign(14,"black").[1@1]

facts: 
lake(1..20).

generated: 
Craft an ASP solution to prevent the linking of the "lake" predicate with value "14" to "black". Any link incurs a cost of "1" at level "1".
Answer: :~assign(14,"black").[1@1]
The predicate "bike" includes fields "ID","city","author","name","price","description","author","city","name","price","description","author","city","name","price","description","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","

unique_rules: 
[':~assign(14,"black").[1@1]']

jaccard: 1.0

AS desired: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lake(6)', 'lake(7)', 'lake(8)', 'lake(9)', 'lake(10)', 'lake(11)', 'lake(12)', 'lake(13)', 'lake(14)', 'lake(15)', 'lake(16)', 'lake(17)', 'lake(18)', 'lake(19)', 'lake(20)']]
\AS obtained: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lake(6)', 'lake(7)', 'lake(8)', 'lake(9)', 'lake(10)', 'lake(11)', 'lake(12)', 'lake(13)', 'lake(14)', 'lake(15)', 'lake(16)', 'lake(17)', 'lake(18)', 'lake(19)', 'lake(20)']]


375
filtering

question: 
Produce an ASP program to gather and retrieve values linked to the "wall" label in the "moscow" predicate.

answer from file: 
select(X):-moscow(X,"wall").

parsed from model: 
select(X):-moscow(X,"wall").

facts: 
moscow(1..5, "wall").

generated: 
Produce an ASP program to gather and retrieve values linked to the "wall" label in the "moscow" predicate.
Answer: select(X):-moscow(X,"wall").
select(X):-moscow(X,"city").
select(X):-moscow(X,"author").
moscow(X,"wall").
moscow(X,"city").
moscow(X,"author").

unique_rules: 
['select(X):-moscow(X,"wall").', 'select(X):-moscow(X,"city").', 'select(X):-moscow(X,"author").']

jaccard: 1.0

AS desired: [['moscow(1,"wall")', 'moscow(2,"wall")', 'moscow(3,"wall")', 'moscow(4,"wall")', 'moscow(5,"wall")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['moscow(1,"wall")', 'moscow(2,"wall")', 'moscow(3,"wall")', 'moscow(4,"wall")', 'moscow(5,"wall")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


376
negative_filtering

question: 
Draft an ASP solution to identify values associated with the predicate "desk" but not tied to the predicate "cosenza" and labeled "weight".

answer from file: 
select(X):-desk(X),not cosenza(X,"weight").

parsed from model: 
select(X):-desk(X),not cosenza(X,"weight").

facts: 
desk(1..3).cosenza(1,"chicago").cosenza(2,"white").cosenza(3,"moscow").

generated: 
Draft an ASP solution to identify values associated with the predicate "desk" but not tied to the predicate "cosenza" and labeled "weight".
Answer: select(X):-desk(X),not cosenza(X,"weight").
Explanation: The predicate "desk" includes values associated with the predicate "height","author","city","description","moto","name","price","height","description","city","author","name","price","height","description","city","author","name","price","height","description","city","author","name","price","height","description","city","author","name","price","height","description","city","author","name","price","height","description","city","author","name","price","height","description","city","author","name","price","height","description","city","author","name","price","height","description","city","

unique_rules: 
['select(X):-desk(X),not cosenza(X,"weight").']

jaccard: 1.0

AS desired: [['desk(1)', 'desk(2)', 'desk(3)', 'cosenza(1,"chicago")', 'cosenza(2,"white")', 'cosenza(3,"moscow")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['desk(1)', 'desk(2)', 'desk(3)', 'cosenza(1,"chicago")', 'cosenza(2,"white")', 'cosenza(3,"moscow")', 'select(1)', 'select(2)', 'select(3)']]


377
numeric_filtering

question: 
Formulate an ASP script to identify values tied to the predicate "storm" with a value different than 81.

answer from file: 
select(X):-storm(X,C),C!=81.

parsed from model: 
select(X):-storm(X,C),C!=81.

facts: 
storm(1..3, 1..100).

generated: 
Formulate an ASP script to identify values tied to the predicate "storm" with a value different than 81.
Answer: select(X):-storm(X,C),C!=81.
select(X):-storm(X,C),C==81.
The predicate "storm" includes fields "ID","height","author","city","name","description","author","city","height","description","name","price","author","city","description","height","name","price","city","author","height","description","name","price","author","city","description","height","name","price","city","author","height","description","name","price","author","city","description","height","name","price","city","author","height","description","name","price","author","city","description","height","name","price

unique_rules: 
['select(X):-storm(X,C),C!=81.', 'select(X):-storm(X,C),C==81.']

jaccard: 1.0

AS desired: [['storm(1,1)', 'storm(1,2)', 'storm(1,3)', 'storm(1,4)', 'storm(1,5)', 'storm(1,6)', 'storm(1,7)', 'storm(1,8)', 'storm(1,9)', 'storm(1,10)', 'storm(1,11)', 'storm(1,12)', 'storm(1,13)', 'storm(1,14)', 'storm(1,15)', 'storm(1,16)', 'storm(1,17)', 'storm(1,18)', 'storm(1,19)', 'storm(1,20)', 'storm(1,21)', 'storm(1,22)', 'storm(1,23)', 'storm(1,24)', 'storm(1,25)', 'storm(1,26)', 'storm(1,27)', 'storm(1,28)', 'storm(1,29)', 'storm(1,30)', 'storm(1,31)', 'storm(1,32)', 'storm(1,33)', 'storm(1,34)', 'storm(1,35)', 'storm(1,36)', 'storm(1,37)', 'storm(1,38)', 'storm(1,39)', 'storm(1,40)', 'storm(1,41)', 'storm(1,42)', 'storm(1,43)', 'storm(1,44)', 'storm(1,45)', 'storm(1,46)', 'storm(1,47)', 'storm(1,48)', 'storm(1,49)', 'storm(1,50)', 'storm(1,51)', 'storm(1,52)', 'storm(1,53)', 'storm(1,54)', 'storm(1,55)', 'storm(1,56)', 'storm(1,57)', 'storm(1,58)', 'storm(1,59)', 'storm(1,60)', 'storm(1,61)', 'storm(1,62)', 'storm(1,63)', 'storm(1,64)', 'storm(1,65)', 'storm(1,66)', 'storm(1,67)', 'storm(1,68)', 'storm(1,69)', 'storm(1,70)', 'storm(1,71)', 'storm(1,72)', 'storm(1,73)', 'storm(1,74)', 'storm(1,75)', 'storm(1,76)', 'storm(1,77)', 'storm(1,78)', 'storm(1,79)', 'storm(1,80)', 'storm(1,81)', 'storm(1,82)', 'storm(1,83)', 'storm(1,84)', 'storm(1,85)', 'storm(1,86)', 'storm(1,87)', 'storm(1,88)', 'storm(1,89)', 'storm(1,90)', 'storm(1,91)', 'storm(1,92)', 'storm(1,93)', 'storm(1,94)', 'storm(1,95)', 'storm(1,96)', 'storm(1,97)', 'storm(1,98)', 'storm(1,99)', 'storm(1,100)', 'storm(2,1)', 'storm(2,2)', 'storm(2,3)', 'storm(2,4)', 'storm(2,5)', 'storm(2,6)', 'storm(2,7)', 'storm(2,8)', 'storm(2,9)', 'storm(2,10)', 'storm(2,11)', 'storm(2,12)', 'storm(2,13)', 'storm(2,14)', 'storm(2,15)', 'storm(2,16)', 'storm(2,17)', 'storm(2,18)', 'storm(2,19)', 'storm(2,20)', 'storm(2,21)', 'storm(2,22)', 'storm(2,23)', 'storm(2,24)', 'storm(2,25)', 'storm(2,26)', 'storm(2,27)', 'storm(2,28)', 'storm(2,29)', 'storm(2,30)', 'storm(2,31)', 'storm(2,32)', 'storm(2,33)', 'storm(2,34)', 'storm(2,35)', 'storm(2,36)', 'storm(2,37)', 'storm(2,38)', 'storm(2,39)', 'storm(2,40)', 'storm(2,41)', 'storm(2,42)', 'storm(2,43)', 'storm(2,44)', 'storm(2,45)', 'storm(2,46)', 'storm(2,47)', 'storm(2,48)', 'storm(2,49)', 'storm(2,50)', 'storm(2,51)', 'storm(2,52)', 'storm(2,53)', 'storm(2,54)', 'storm(2,55)', 'storm(2,56)', 'storm(2,57)', 'storm(2,58)', 'storm(2,59)', 'storm(2,60)', 'storm(2,61)', 'storm(2,62)', 'storm(2,63)', 'storm(2,64)', 'storm(2,65)', 'storm(2,66)', 'storm(2,67)', 'storm(2,68)', 'storm(2,69)', 'storm(2,70)', 'storm(2,71)', 'storm(2,72)', 'storm(2,73)', 'storm(2,74)', 'storm(2,75)', 'storm(2,76)', 'storm(2,77)', 'storm(2,78)', 'storm(2,79)', 'storm(2,80)', 'storm(2,81)', 'storm(2,82)', 'storm(2,83)', 'storm(2,84)', 'storm(2,85)', 'storm(2,86)', 'storm(2,87)', 'storm(2,88)', 'storm(2,89)', 'storm(2,90)', 'storm(2,91)', 'storm(2,92)', 'storm(2,93)', 'storm(2,94)', 'storm(2,95)', 'storm(2,96)', 'storm(2,97)', 'storm(2,98)', 'storm(2,99)', 'storm(2,100)', 'storm(3,1)', 'storm(3,2)', 'storm(3,3)', 'storm(3,4)', 'storm(3,5)', 'storm(3,6)', 'storm(3,7)', 'storm(3,8)', 'storm(3,9)', 'storm(3,10)', 'storm(3,11)', 'storm(3,12)', 'storm(3,13)', 'storm(3,14)', 'storm(3,15)', 'storm(3,16)', 'storm(3,17)', 'storm(3,18)', 'storm(3,19)', 'storm(3,20)', 'storm(3,21)', 'storm(3,22)', 'storm(3,23)', 'storm(3,24)', 'storm(3,25)', 'storm(3,26)', 'storm(3,27)', 'storm(3,28)', 'storm(3,29)', 'storm(3,30)', 'storm(3,31)', 'storm(3,32)', 'storm(3,33)', 'storm(3,34)', 'storm(3,35)', 'storm(3,36)', 'storm(3,37)', 'storm(3,38)', 'storm(3,39)', 'storm(3,40)', 'storm(3,41)', 'storm(3,42)', 'storm(3,43)', 'storm(3,44)', 'storm(3,45)', 'storm(3,46)', 'storm(3,47)', 'storm(3,48)', 'storm(3,49)', 'storm(3,50)', 'storm(3,51)', 'storm(3,52)', 'storm(3,53)', 'storm(3,54)', 'storm(3,55)', 'storm(3,56)', 'storm(3,57)', 'storm(3,58)', 'storm(3,59)', 'storm(3,60)', 'storm(3,61)', 'storm(3,62)', 'storm(3,63)', 'storm(3,64)', 'storm(3,65)', 'storm(3,66)', 'storm(3,67)', 'storm(3,68)', 'storm(3,69)', 'storm(3,70)', 'storm(3,71)', 'storm(3,72)', 'storm(3,73)', 'storm(3,74)', 'storm(3,75)', 'storm(3,76)', 'storm(3,77)', 'storm(3,78)', 'storm(3,79)', 'storm(3,80)', 'storm(3,81)', 'storm(3,82)', 'storm(3,83)', 'storm(3,84)', 'storm(3,85)', 'storm(3,86)', 'storm(3,87)', 'storm(3,88)', 'storm(3,89)', 'storm(3,90)', 'storm(3,91)', 'storm(3,92)', 'storm(3,93)', 'storm(3,94)', 'storm(3,95)', 'storm(3,96)', 'storm(3,97)', 'storm(3,98)', 'storm(3,99)', 'storm(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['storm(1,1)', 'storm(1,2)', 'storm(1,3)', 'storm(1,4)', 'storm(1,5)', 'storm(1,6)', 'storm(1,7)', 'storm(1,8)', 'storm(1,9)', 'storm(1,10)', 'storm(1,11)', 'storm(1,12)', 'storm(1,13)', 'storm(1,14)', 'storm(1,15)', 'storm(1,16)', 'storm(1,17)', 'storm(1,18)', 'storm(1,19)', 'storm(1,20)', 'storm(1,21)', 'storm(1,22)', 'storm(1,23)', 'storm(1,24)', 'storm(1,25)', 'storm(1,26)', 'storm(1,27)', 'storm(1,28)', 'storm(1,29)', 'storm(1,30)', 'storm(1,31)', 'storm(1,32)', 'storm(1,33)', 'storm(1,34)', 'storm(1,35)', 'storm(1,36)', 'storm(1,37)', 'storm(1,38)', 'storm(1,39)', 'storm(1,40)', 'storm(1,41)', 'storm(1,42)', 'storm(1,43)', 'storm(1,44)', 'storm(1,45)', 'storm(1,46)', 'storm(1,47)', 'storm(1,48)', 'storm(1,49)', 'storm(1,50)', 'storm(1,51)', 'storm(1,52)', 'storm(1,53)', 'storm(1,54)', 'storm(1,55)', 'storm(1,56)', 'storm(1,57)', 'storm(1,58)', 'storm(1,59)', 'storm(1,60)', 'storm(1,61)', 'storm(1,62)', 'storm(1,63)', 'storm(1,64)', 'storm(1,65)', 'storm(1,66)', 'storm(1,67)', 'storm(1,68)', 'storm(1,69)', 'storm(1,70)', 'storm(1,71)', 'storm(1,72)', 'storm(1,73)', 'storm(1,74)', 'storm(1,75)', 'storm(1,76)', 'storm(1,77)', 'storm(1,78)', 'storm(1,79)', 'storm(1,80)', 'storm(1,81)', 'storm(1,82)', 'storm(1,83)', 'storm(1,84)', 'storm(1,85)', 'storm(1,86)', 'storm(1,87)', 'storm(1,88)', 'storm(1,89)', 'storm(1,90)', 'storm(1,91)', 'storm(1,92)', 'storm(1,93)', 'storm(1,94)', 'storm(1,95)', 'storm(1,96)', 'storm(1,97)', 'storm(1,98)', 'storm(1,99)', 'storm(1,100)', 'storm(2,1)', 'storm(2,2)', 'storm(2,3)', 'storm(2,4)', 'storm(2,5)', 'storm(2,6)', 'storm(2,7)', 'storm(2,8)', 'storm(2,9)', 'storm(2,10)', 'storm(2,11)', 'storm(2,12)', 'storm(2,13)', 'storm(2,14)', 'storm(2,15)', 'storm(2,16)', 'storm(2,17)', 'storm(2,18)', 'storm(2,19)', 'storm(2,20)', 'storm(2,21)', 'storm(2,22)', 'storm(2,23)', 'storm(2,24)', 'storm(2,25)', 'storm(2,26)', 'storm(2,27)', 'storm(2,28)', 'storm(2,29)', 'storm(2,30)', 'storm(2,31)', 'storm(2,32)', 'storm(2,33)', 'storm(2,34)', 'storm(2,35)', 'storm(2,36)', 'storm(2,37)', 'storm(2,38)', 'storm(2,39)', 'storm(2,40)', 'storm(2,41)', 'storm(2,42)', 'storm(2,43)', 'storm(2,44)', 'storm(2,45)', 'storm(2,46)', 'storm(2,47)', 'storm(2,48)', 'storm(2,49)', 'storm(2,50)', 'storm(2,51)', 'storm(2,52)', 'storm(2,53)', 'storm(2,54)', 'storm(2,55)', 'storm(2,56)', 'storm(2,57)', 'storm(2,58)', 'storm(2,59)', 'storm(2,60)', 'storm(2,61)', 'storm(2,62)', 'storm(2,63)', 'storm(2,64)', 'storm(2,65)', 'storm(2,66)', 'storm(2,67)', 'storm(2,68)', 'storm(2,69)', 'storm(2,70)', 'storm(2,71)', 'storm(2,72)', 'storm(2,73)', 'storm(2,74)', 'storm(2,75)', 'storm(2,76)', 'storm(2,77)', 'storm(2,78)', 'storm(2,79)', 'storm(2,80)', 'storm(2,81)', 'storm(2,82)', 'storm(2,83)', 'storm(2,84)', 'storm(2,85)', 'storm(2,86)', 'storm(2,87)', 'storm(2,88)', 'storm(2,89)', 'storm(2,90)', 'storm(2,91)', 'storm(2,92)', 'storm(2,93)', 'storm(2,94)', 'storm(2,95)', 'storm(2,96)', 'storm(2,97)', 'storm(2,98)', 'storm(2,99)', 'storm(2,100)', 'storm(3,1)', 'storm(3,2)', 'storm(3,3)', 'storm(3,4)', 'storm(3,5)', 'storm(3,6)', 'storm(3,7)', 'storm(3,8)', 'storm(3,9)', 'storm(3,10)', 'storm(3,11)', 'storm(3,12)', 'storm(3,13)', 'storm(3,14)', 'storm(3,15)', 'storm(3,16)', 'storm(3,17)', 'storm(3,18)', 'storm(3,19)', 'storm(3,20)', 'storm(3,21)', 'storm(3,22)', 'storm(3,23)', 'storm(3,24)', 'storm(3,25)', 'storm(3,26)', 'storm(3,27)', 'storm(3,28)', 'storm(3,29)', 'storm(3,30)', 'storm(3,31)', 'storm(3,32)', 'storm(3,33)', 'storm(3,34)', 'storm(3,35)', 'storm(3,36)', 'storm(3,37)', 'storm(3,38)', 'storm(3,39)', 'storm(3,40)', 'storm(3,41)', 'storm(3,42)', 'storm(3,43)', 'storm(3,44)', 'storm(3,45)', 'storm(3,46)', 'storm(3,47)', 'storm(3,48)', 'storm(3,49)', 'storm(3,50)', 'storm(3,51)', 'storm(3,52)', 'storm(3,53)', 'storm(3,54)', 'storm(3,55)', 'storm(3,56)', 'storm(3,57)', 'storm(3,58)', 'storm(3,59)', 'storm(3,60)', 'storm(3,61)', 'storm(3,62)', 'storm(3,63)', 'storm(3,64)', 'storm(3,65)', 'storm(3,66)', 'storm(3,67)', 'storm(3,68)', 'storm(3,69)', 'storm(3,70)', 'storm(3,71)', 'storm(3,72)', 'storm(3,73)', 'storm(3,74)', 'storm(3,75)', 'storm(3,76)', 'storm(3,77)', 'storm(3,78)', 'storm(3,79)', 'storm(3,80)', 'storm(3,81)', 'storm(3,82)', 'storm(3,83)', 'storm(3,84)', 'storm(3,85)', 'storm(3,86)', 'storm(3,87)', 'storm(3,88)', 'storm(3,89)', 'storm(3,90)', 'storm(3,91)', 'storm(3,92)', 'storm(3,93)', 'storm(3,94)', 'storm(3,95)', 'storm(3,96)', 'storm(3,97)', 'storm(3,98)', 'storm(3,99)', 'storm(3,100)', 'select(1)', 'select(2)', 'select(3)']]


378
assignment

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate laptop. The labels are "butterfly","desk","storm".

answer from file: 
assign(X,"butterfly")|assign(X,"desk")|assign(X,"storm"):-laptop(X).

parsed from model: 
assign(X," arrivant")|assign(X,"desk")|assign(X,"street"):- arrivant(X).

facts: 
laptop(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate laptop. The labels are "butterfly","desk","storm".
Answer: assign(X," arrivant")|assign(X,"desk")|assign(X,"street"):- arrivant(X).
assign(X," arrivant")|assign(X,"street"):-desk(X).
assign(X,"street"):-height(X).
height(X," arrivant")|height(X,"street"):-desk(X).
height(X,"street"):- arrivant(X).
height(X," felicità"):-city(X).
city(X," arrivant")|city(X," felicità"):-height(X).
city(X," felicità"):-street(X).
street(X," arrivant")|street(X," felicità"):-height(

unique_rules: 
['assign(X," arrivant")|assign(X,"desk")|assign(X,"street"):- arrivant(X).', 'assign(X," arrivant")|assign(X,"street"):-desk(X).', 'assign(X,"street"):-height(X).', 'height(X," arrivant")|height(X,"street"):-desk(X).', 'height(X,"street"):- arrivant(X).', 'height(X," felicità"):-city(X).', 'city(X," arrivant")|city(X," felicità"):-height(X).', 'city(X," felicità"):-street(X).', 'street(X," arrivant")|street(X," felicità"):-height(']

jaccard: 0.0

AS desired: [['laptop(1)', 'laptop(2)', 'laptop(3)', 'laptop(4)', 'laptop(5)', 'assign(1,"storm")', 'assign(2,"storm")', 'assign(3,"storm")', 'assign(4,"storm")', 'assign(5,"storm")']]
\AS obtained: [['laptop(1)', 'laptop(2)', 'laptop(3)', 'laptop(4)', 'laptop(5)']]


379
constraint

question: 
Create an ASP code snippet to ensure the "strength" predicate with a value of 12 is not linked to the label "barcelona".

answer from file: 
:-assign(12,barcelona).

parsed from model: 
:-assign(12,barcelona).

facts: 
strength(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-strength(X).

generated: 
Create an ASP code snippet to ensure the "strength" predicate with a value of 12 is not linked to the label "barcelona".
Answer: :-assign(12,barcelona).
Explanation: The predicate "street" includes a "street" label for the "rome" value, and the predicate "rome" contains a "city" label for the "height" value. If the "street" label is assigned to the "rome" value, it would violate the "city" label for the "height" value.

unique_rules: 
[':-assign(12,barcelona).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'strength(6)', 'strength(7)', 'strength(8)', 'strength(9)', 'strength(10)', 'strength(11)', 'strength(12)', 'strength(13)', 'strength(14)', 'strength(15)', 'strength(16)', 'strength(17)', 'strength(18)', 'strength(19)', 'strength(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'strength(6)', 'strength(7)', 'strength(8)', 'strength(9)', 'strength(10)', 'strength(11)', 'strength(12)', 'strength(13)', 'strength(14)', 'strength(15)', 'strength(16)', 'strength(17)', 'strength(18)', 'strength(19)', 'strength(20)']]


380
combination

question: 
Develop an ASP code snippet to produce all valid combinations of elements from the "owner" and "barcelona" sets.

answer from file: 
combination(X,Y):-owner(X),barcelona(Y).

parsed from model: 
combination(X,Y):-owner(X),barcelona(Y).

facts: 
owner(1..4).barcelona(1..5).

generated: 
Develop an ASP code snippet to produce all valid combinations of elements from the "owner" and "barcelona" sets.
Answer: combination(X,Y):-owner(X),barcelona(Y).
combination(X,Y):-owner(X),not barcelona(Y).
combination(X,Y):-not owner(X),barcelona(Y).
combination(X,Y):-not owner(X),not barcelona(Y).

unique_rules: 
['combination(X,Y):-owner(X),barcelona(Y).', 'combination(X,Y):-owner(X),not barcelona(Y).', 'combination(X,Y):-not owner(X),barcelona(Y).', 'combination(X,Y):-not owner(X),not barcelona(Y).']

jaccard: 1.0

AS desired: [['barcelona(1)', 'barcelona(2)', 'barcelona(3)', 'barcelona(4)', 'barcelona(5)', 'owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['barcelona(1)', 'barcelona(2)', 'barcelona(3)', 'barcelona(4)', 'barcelona(5)', 'owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


381
join

question: 
Draft an ASP script to define the predicate "butterfly_darkmagenta" that associates each butterfly with the surname of darkmagenta, given "butterfly" has fields "ID","weight","surname","darkmagentaID","hair" and "darkmagenta" has fields "ID","surname","strength".

answer from file: 
butterfly_darkmagenta(X,Z):-butterfly(X,_,_,Y,_),darkmagenta(Y,Z,_).

parsed from model: 
butterfly_darkmagenta(X,Z):-butterfly(X,_,_,Y,_),darkmagenta(Y,_,Z).

facts: 
butterfly("ID","weight","surname","darkmagentaID","hair").darkmagenta("ID","surname","strength").

generated: 
Draft an ASP script to define the predicate "butterfly_darkmagenta" that associates each butterfly with the surname of darkmagenta, given "butterfly" has fields "ID","weight","surname","darkmagentaID","hair" and "darkmagenta" has fields "ID","surname","strength". Define the predicate "butterfly_darkmagenta" that associates each butterfly with the strength of darkmagenta.
Answer: butterfly_darkmagenta(X,Z):-butterfly(X,_,_,Y,_),darkmagenta(Y,_,Z).
butterfly_darkmagenta(X,Z):- arrivant(X,_,_),darkmagenta(Y,_,Z).
Explanation:
- The predicate " arrivant" associates each butterfly with the strength of darkmagenta.
- The predicate "darkmagenta" associates each darkmagenta with the strength of "height".
- The predicate "butterfly_darkmagenta" associates each butterfly with the strength of darkmagenta.

unique_rules: 
['butterfly_darkmagenta(X,Z):-butterfly(X,_,_,Y,_),darkmagenta(Y,_,Z).', 'butterfly_darkmagenta(X,Z):- arrivant(X,_,_),darkmagenta(Y,_,Z).']

jaccard: 1.0

AS desired: [['butterfly("ID","weight","surname","darkmagentaID","hair")', 'darkmagenta("ID","surname","strength")']]
\AS obtained: [['butterfly("ID","weight","surname","darkmagentaID","hair")', 'darkmagenta("ID","surname","strength")']]


382
closure

question: 
Generate an ASP program to construct the "journey" predicate based on the transitive closure of the "chair" predicate.

answer from file: 
journey(X,Y):-chair(X,Y).
journey(X,Y):-chair(X,Z),journey(Z,Y).

parsed from model: 
journey(X,Y):-chair(X,Y).
journey(X,Y):-chair(X,Z),journey(Z,Y).

facts: 
chair(1..3, 1..4).

generated: 
Generate an ASP program to construct the "journey" predicate based on the transitive closure of the "chair" predicate.
Answer: journey(X,Y):-chair(X,Y).
journey(X,Y):-chair(X,Z),journey(Z,Y).
journey(X,Y):- felicità(X,Y).
 felicità(X,Y):-chair(X,Y).

unique_rules: 
['journey(X,Y):-chair(X,Y).', 'journey(X,Y):-chair(X,Z),journey(Z,Y).', 'journey(X,Y):- felicità(X,Y).', 'felicità(X,Y):-chair(X,Y).']

jaccard: 1.0

AS desired: [['chair(1,1)', 'chair(1,2)', 'chair(1,3)', 'chair(1,4)', 'chair(2,1)', 'chair(2,2)', 'chair(2,3)', 'chair(2,4)', 'chair(3,1)', 'chair(3,2)', 'chair(3,3)', 'chair(3,4)', 'journey(1,1)', 'journey(1,2)', 'journey(1,3)', 'journey(1,4)', 'journey(2,1)', 'journey(2,2)', 'journey(2,3)', 'journey(2,4)', 'journey(3,1)', 'journey(3,2)', 'journey(3,3)', 'journey(3,4)']]
\AS obtained: [['chair(1,1)', 'chair(1,2)', 'chair(1,3)', 'chair(1,4)', 'chair(2,1)', 'chair(2,2)', 'chair(2,3)', 'chair(2,4)', 'chair(3,1)', 'chair(3,2)', 'chair(3,3)', 'chair(3,4)', 'journey(1,1)', 'journey(1,2)', 'journey(1,3)', 'journey(1,4)', 'journey(2,1)', 'journey(2,2)', 'journey(2,3)', 'journey(2,4)', 'journey(3,1)', 'journey(3,2)', 'journey(3,3)', 'journey(3,4)']]


383
preference

question: 
Craft an ASP application to avoid the predicate "cloud" with value "1" from being associated with "wall". If this occurs, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(1,"wall").[1@1]

parsed from model: 
:~assign(1,"wall").[1@1]

facts: 
cloud(1..20).

generated: 
Craft an ASP application to avoid the predicate "cloud" with value "1" from being associated with "wall". If this occurs, it incurs a cost of "1" at level "1".
Answer: :~assign(1,"wall").[1@1]
The predicate "author" avoids associating the "height" label to the "city" label.
Answer: :~assign(1,"city").[1@1]
The predicate "moto" associates the "height" label to the "city" label.
Answer: :assign(1,"city").[1@1]
The predicate "rome" associates the "height" label to the "city" label.
Answer: :assign(1,"city").[1@1]

unique_rules: 
[':~assign(1,"wall").[1@1]', ':~assign(1,"city").[1@1]']

jaccard: 1.0

AS desired: [['cloud(1)', 'cloud(2)', 'cloud(3)', 'cloud(4)', 'cloud(5)', 'cloud(6)', 'cloud(7)', 'cloud(8)', 'cloud(9)', 'cloud(10)', 'cloud(11)', 'cloud(12)', 'cloud(13)', 'cloud(14)', 'cloud(15)', 'cloud(16)', 'cloud(17)', 'cloud(18)', 'cloud(19)', 'cloud(20)']]
\AS obtained: [['cloud(1)', 'cloud(2)', 'cloud(3)', 'cloud(4)', 'cloud(5)', 'cloud(6)', 'cloud(7)', 'cloud(8)', 'cloud(9)', 'cloud(10)', 'cloud(11)', 'cloud(12)', 'cloud(13)', 'cloud(14)', 'cloud(15)', 'cloud(16)', 'cloud(17)', 'cloud(18)', 'cloud(19)', 'cloud(20)']]


384
filtering

question: 
Formulate an ASP application to fetch all values tied to the predicate "mumbai" and labeled as "cosenza".

answer from file: 
select(X):-mumbai(X,"cosenza").

parsed from model: 
select(X):-mumbai(X,"cosenza").

facts: 
mumbai(1..5, "cosenza").

generated: 
Formulate an ASP application to fetch all values tied to the predicate "mumbai" and labeled as "cosenza".
Answer: select(X):-mumbai(X,"cosenza").
select(X):-mumbai(X,"author").
mumbai(X,"author").
mumbai(X,"city").
mumbai(X,"description").
mumbai(X,"height").
mumbai(X,"name").
mumbai(X,"price").
mumbai(X,"description").
mumbai(X,"author").
mumbai(X,"city").
mumbai(X,"description").
mumbai(X,"height").
mumbai(X,"name").
mumbai(X,"price").
mumbai(X,"description").
mumbai(X,"author").
mumbai

unique_rules: 
['select(X):-mumbai(X,"cosenza").', 'select(X):-mumbai(X,"author").']

jaccard: 1.0

AS desired: [['mumbai(1,"cosenza")', 'mumbai(2,"cosenza")', 'mumbai(3,"cosenza")', 'mumbai(4,"cosenza")', 'mumbai(5,"cosenza")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['mumbai(1,"cosenza")', 'mumbai(2,"cosenza")', 'mumbai(3,"cosenza")', 'mumbai(4,"cosenza")', 'mumbai(5,"cosenza")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


385
negative_filtering

question: 
Write an ASP script to select values connected to the predicate "chair" but not associated with the predicate "darkmagenta" and labeled "butterfly".

answer from file: 
select(X):-chair(X),not darkmagenta(X,"butterfly").

parsed from model: 
select(X):-chair(X),not darkmagenta(X,"butterfly").

facts: 
chair(1..3).darkmagenta(1,"black").darkmagenta(2,"lightblue").darkmagenta(3,"laptop").

generated: 
Write an ASP script to select values connected to the predicate "chair" but not associated with the predicate "darkmagenta" and labeled "butterfly".
Answer: select(X):-chair(X),not darkmagenta(X,"butterfly").

unique_rules: 
['select(X):-chair(X),not darkmagenta(X,"butterfly").']

jaccard: 1.0

AS desired: [['chair(1)', 'chair(2)', 'chair(3)', 'darkmagenta(1,"black")', 'darkmagenta(2,"lightblue")', 'darkmagenta(3,"laptop")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['chair(1)', 'chair(2)', 'chair(3)', 'darkmagenta(1,"black")', 'darkmagenta(2,"lightblue")', 'darkmagenta(3,"laptop")', 'select(1)', 'select(2)', 'select(3)']]


386
numeric_filtering

question: 
Design an ASP program to gather values associated with the predicate "lightblue" with a value different than 12.

answer from file: 
select(X):-lightblue(X,C),C!=12.

parsed from model: 
select(X):-lightblue(X,C),C!=12.

facts: 
lightblue(1..3, 1..100).

generated: 
Design an ASP program to gather values associated with the predicate "lightblue" with a value different than 12.
Answer: select(X):-lightblue(X,C),C!=12.
lightblue(X,C):-lightblue(X,C),C==12.

unique_rules: 
['select(X):-lightblue(X,C),C!=12.', 'lightblue(X,C):-lightblue(X,C),C==12.']

jaccard: 1.0

AS desired: [['lightblue(1,1)', 'lightblue(1,2)', 'lightblue(1,3)', 'lightblue(1,4)', 'lightblue(1,5)', 'lightblue(1,6)', 'lightblue(1,7)', 'lightblue(1,8)', 'lightblue(1,9)', 'lightblue(1,10)', 'lightblue(1,11)', 'lightblue(1,12)', 'lightblue(1,13)', 'lightblue(1,14)', 'lightblue(1,15)', 'lightblue(1,16)', 'lightblue(1,17)', 'lightblue(1,18)', 'lightblue(1,19)', 'lightblue(1,20)', 'lightblue(1,21)', 'lightblue(1,22)', 'lightblue(1,23)', 'lightblue(1,24)', 'lightblue(1,25)', 'lightblue(1,26)', 'lightblue(1,27)', 'lightblue(1,28)', 'lightblue(1,29)', 'lightblue(1,30)', 'lightblue(1,31)', 'lightblue(1,32)', 'lightblue(1,33)', 'lightblue(1,34)', 'lightblue(1,35)', 'lightblue(1,36)', 'lightblue(1,37)', 'lightblue(1,38)', 'lightblue(1,39)', 'lightblue(1,40)', 'lightblue(1,41)', 'lightblue(1,42)', 'lightblue(1,43)', 'lightblue(1,44)', 'lightblue(1,45)', 'lightblue(1,46)', 'lightblue(1,47)', 'lightblue(1,48)', 'lightblue(1,49)', 'lightblue(1,50)', 'lightblue(1,51)', 'lightblue(1,52)', 'lightblue(1,53)', 'lightblue(1,54)', 'lightblue(1,55)', 'lightblue(1,56)', 'lightblue(1,57)', 'lightblue(1,58)', 'lightblue(1,59)', 'lightblue(1,60)', 'lightblue(1,61)', 'lightblue(1,62)', 'lightblue(1,63)', 'lightblue(1,64)', 'lightblue(1,65)', 'lightblue(1,66)', 'lightblue(1,67)', 'lightblue(1,68)', 'lightblue(1,69)', 'lightblue(1,70)', 'lightblue(1,71)', 'lightblue(1,72)', 'lightblue(1,73)', 'lightblue(1,74)', 'lightblue(1,75)', 'lightblue(1,76)', 'lightblue(1,77)', 'lightblue(1,78)', 'lightblue(1,79)', 'lightblue(1,80)', 'lightblue(1,81)', 'lightblue(1,82)', 'lightblue(1,83)', 'lightblue(1,84)', 'lightblue(1,85)', 'lightblue(1,86)', 'lightblue(1,87)', 'lightblue(1,88)', 'lightblue(1,89)', 'lightblue(1,90)', 'lightblue(1,91)', 'lightblue(1,92)', 'lightblue(1,93)', 'lightblue(1,94)', 'lightblue(1,95)', 'lightblue(1,96)', 'lightblue(1,97)', 'lightblue(1,98)', 'lightblue(1,99)', 'lightblue(1,100)', 'lightblue(2,1)', 'lightblue(2,2)', 'lightblue(2,3)', 'lightblue(2,4)', 'lightblue(2,5)', 'lightblue(2,6)', 'lightblue(2,7)', 'lightblue(2,8)', 'lightblue(2,9)', 'lightblue(2,10)', 'lightblue(2,11)', 'lightblue(2,12)', 'lightblue(2,13)', 'lightblue(2,14)', 'lightblue(2,15)', 'lightblue(2,16)', 'lightblue(2,17)', 'lightblue(2,18)', 'lightblue(2,19)', 'lightblue(2,20)', 'lightblue(2,21)', 'lightblue(2,22)', 'lightblue(2,23)', 'lightblue(2,24)', 'lightblue(2,25)', 'lightblue(2,26)', 'lightblue(2,27)', 'lightblue(2,28)', 'lightblue(2,29)', 'lightblue(2,30)', 'lightblue(2,31)', 'lightblue(2,32)', 'lightblue(2,33)', 'lightblue(2,34)', 'lightblue(2,35)', 'lightblue(2,36)', 'lightblue(2,37)', 'lightblue(2,38)', 'lightblue(2,39)', 'lightblue(2,40)', 'lightblue(2,41)', 'lightblue(2,42)', 'lightblue(2,43)', 'lightblue(2,44)', 'lightblue(2,45)', 'lightblue(2,46)', 'lightblue(2,47)', 'lightblue(2,48)', 'lightblue(2,49)', 'lightblue(2,50)', 'lightblue(2,51)', 'lightblue(2,52)', 'lightblue(2,53)', 'lightblue(2,54)', 'lightblue(2,55)', 'lightblue(2,56)', 'lightblue(2,57)', 'lightblue(2,58)', 'lightblue(2,59)', 'lightblue(2,60)', 'lightblue(2,61)', 'lightblue(2,62)', 'lightblue(2,63)', 'lightblue(2,64)', 'lightblue(2,65)', 'lightblue(2,66)', 'lightblue(2,67)', 'lightblue(2,68)', 'lightblue(2,69)', 'lightblue(2,70)', 'lightblue(2,71)', 'lightblue(2,72)', 'lightblue(2,73)', 'lightblue(2,74)', 'lightblue(2,75)', 'lightblue(2,76)', 'lightblue(2,77)', 'lightblue(2,78)', 'lightblue(2,79)', 'lightblue(2,80)', 'lightblue(2,81)', 'lightblue(2,82)', 'lightblue(2,83)', 'lightblue(2,84)', 'lightblue(2,85)', 'lightblue(2,86)', 'lightblue(2,87)', 'lightblue(2,88)', 'lightblue(2,89)', 'lightblue(2,90)', 'lightblue(2,91)', 'lightblue(2,92)', 'lightblue(2,93)', 'lightblue(2,94)', 'lightblue(2,95)', 'lightblue(2,96)', 'lightblue(2,97)', 'lightblue(2,98)', 'lightblue(2,99)', 'lightblue(2,100)', 'lightblue(3,1)', 'lightblue(3,2)', 'lightblue(3,3)', 'lightblue(3,4)', 'lightblue(3,5)', 'lightblue(3,6)', 'lightblue(3,7)', 'lightblue(3,8)', 'lightblue(3,9)', 'lightblue(3,10)', 'lightblue(3,11)', 'lightblue(3,12)', 'lightblue(3,13)', 'lightblue(3,14)', 'lightblue(3,15)', 'lightblue(3,16)', 'lightblue(3,17)', 'lightblue(3,18)', 'lightblue(3,19)', 'lightblue(3,20)', 'lightblue(3,21)', 'lightblue(3,22)', 'lightblue(3,23)', 'lightblue(3,24)', 'lightblue(3,25)', 'lightblue(3,26)', 'lightblue(3,27)', 'lightblue(3,28)', 'lightblue(3,29)', 'lightblue(3,30)', 'lightblue(3,31)', 'lightblue(3,32)', 'lightblue(3,33)', 'lightblue(3,34)', 'lightblue(3,35)', 'lightblue(3,36)', 'lightblue(3,37)', 'lightblue(3,38)', 'lightblue(3,39)', 'lightblue(3,40)', 'lightblue(3,41)', 'lightblue(3,42)', 'lightblue(3,43)', 'lightblue(3,44)', 'lightblue(3,45)', 'lightblue(3,46)', 'lightblue(3,47)', 'lightblue(3,48)', 'lightblue(3,49)', 'lightblue(3,50)', 'lightblue(3,51)', 'lightblue(3,52)', 'lightblue(3,53)', 'lightblue(3,54)', 'lightblue(3,55)', 'lightblue(3,56)', 'lightblue(3,57)', 'lightblue(3,58)', 'lightblue(3,59)', 'lightblue(3,60)', 'lightblue(3,61)', 'lightblue(3,62)', 'lightblue(3,63)', 'lightblue(3,64)', 'lightblue(3,65)', 'lightblue(3,66)', 'lightblue(3,67)', 'lightblue(3,68)', 'lightblue(3,69)', 'lightblue(3,70)', 'lightblue(3,71)', 'lightblue(3,72)', 'lightblue(3,73)', 'lightblue(3,74)', 'lightblue(3,75)', 'lightblue(3,76)', 'lightblue(3,77)', 'lightblue(3,78)', 'lightblue(3,79)', 'lightblue(3,80)', 'lightblue(3,81)', 'lightblue(3,82)', 'lightblue(3,83)', 'lightblue(3,84)', 'lightblue(3,85)', 'lightblue(3,86)', 'lightblue(3,87)', 'lightblue(3,88)', 'lightblue(3,89)', 'lightblue(3,90)', 'lightblue(3,91)', 'lightblue(3,92)', 'lightblue(3,93)', 'lightblue(3,94)', 'lightblue(3,95)', 'lightblue(3,96)', 'lightblue(3,97)', 'lightblue(3,98)', 'lightblue(3,99)', 'lightblue(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['lightblue(1,1)', 'lightblue(1,2)', 'lightblue(1,3)', 'lightblue(1,4)', 'lightblue(1,5)', 'lightblue(1,6)', 'lightblue(1,7)', 'lightblue(1,8)', 'lightblue(1,9)', 'lightblue(1,10)', 'lightblue(1,11)', 'lightblue(1,12)', 'lightblue(1,13)', 'lightblue(1,14)', 'lightblue(1,15)', 'lightblue(1,16)', 'lightblue(1,17)', 'lightblue(1,18)', 'lightblue(1,19)', 'lightblue(1,20)', 'lightblue(1,21)', 'lightblue(1,22)', 'lightblue(1,23)', 'lightblue(1,24)', 'lightblue(1,25)', 'lightblue(1,26)', 'lightblue(1,27)', 'lightblue(1,28)', 'lightblue(1,29)', 'lightblue(1,30)', 'lightblue(1,31)', 'lightblue(1,32)', 'lightblue(1,33)', 'lightblue(1,34)', 'lightblue(1,35)', 'lightblue(1,36)', 'lightblue(1,37)', 'lightblue(1,38)', 'lightblue(1,39)', 'lightblue(1,40)', 'lightblue(1,41)', 'lightblue(1,42)', 'lightblue(1,43)', 'lightblue(1,44)', 'lightblue(1,45)', 'lightblue(1,46)', 'lightblue(1,47)', 'lightblue(1,48)', 'lightblue(1,49)', 'lightblue(1,50)', 'lightblue(1,51)', 'lightblue(1,52)', 'lightblue(1,53)', 'lightblue(1,54)', 'lightblue(1,55)', 'lightblue(1,56)', 'lightblue(1,57)', 'lightblue(1,58)', 'lightblue(1,59)', 'lightblue(1,60)', 'lightblue(1,61)', 'lightblue(1,62)', 'lightblue(1,63)', 'lightblue(1,64)', 'lightblue(1,65)', 'lightblue(1,66)', 'lightblue(1,67)', 'lightblue(1,68)', 'lightblue(1,69)', 'lightblue(1,70)', 'lightblue(1,71)', 'lightblue(1,72)', 'lightblue(1,73)', 'lightblue(1,74)', 'lightblue(1,75)', 'lightblue(1,76)', 'lightblue(1,77)', 'lightblue(1,78)', 'lightblue(1,79)', 'lightblue(1,80)', 'lightblue(1,81)', 'lightblue(1,82)', 'lightblue(1,83)', 'lightblue(1,84)', 'lightblue(1,85)', 'lightblue(1,86)', 'lightblue(1,87)', 'lightblue(1,88)', 'lightblue(1,89)', 'lightblue(1,90)', 'lightblue(1,91)', 'lightblue(1,92)', 'lightblue(1,93)', 'lightblue(1,94)', 'lightblue(1,95)', 'lightblue(1,96)', 'lightblue(1,97)', 'lightblue(1,98)', 'lightblue(1,99)', 'lightblue(1,100)', 'lightblue(2,1)', 'lightblue(2,2)', 'lightblue(2,3)', 'lightblue(2,4)', 'lightblue(2,5)', 'lightblue(2,6)', 'lightblue(2,7)', 'lightblue(2,8)', 'lightblue(2,9)', 'lightblue(2,10)', 'lightblue(2,11)', 'lightblue(2,12)', 'lightblue(2,13)', 'lightblue(2,14)', 'lightblue(2,15)', 'lightblue(2,16)', 'lightblue(2,17)', 'lightblue(2,18)', 'lightblue(2,19)', 'lightblue(2,20)', 'lightblue(2,21)', 'lightblue(2,22)', 'lightblue(2,23)', 'lightblue(2,24)', 'lightblue(2,25)', 'lightblue(2,26)', 'lightblue(2,27)', 'lightblue(2,28)', 'lightblue(2,29)', 'lightblue(2,30)', 'lightblue(2,31)', 'lightblue(2,32)', 'lightblue(2,33)', 'lightblue(2,34)', 'lightblue(2,35)', 'lightblue(2,36)', 'lightblue(2,37)', 'lightblue(2,38)', 'lightblue(2,39)', 'lightblue(2,40)', 'lightblue(2,41)', 'lightblue(2,42)', 'lightblue(2,43)', 'lightblue(2,44)', 'lightblue(2,45)', 'lightblue(2,46)', 'lightblue(2,47)', 'lightblue(2,48)', 'lightblue(2,49)', 'lightblue(2,50)', 'lightblue(2,51)', 'lightblue(2,52)', 'lightblue(2,53)', 'lightblue(2,54)', 'lightblue(2,55)', 'lightblue(2,56)', 'lightblue(2,57)', 'lightblue(2,58)', 'lightblue(2,59)', 'lightblue(2,60)', 'lightblue(2,61)', 'lightblue(2,62)', 'lightblue(2,63)', 'lightblue(2,64)', 'lightblue(2,65)', 'lightblue(2,66)', 'lightblue(2,67)', 'lightblue(2,68)', 'lightblue(2,69)', 'lightblue(2,70)', 'lightblue(2,71)', 'lightblue(2,72)', 'lightblue(2,73)', 'lightblue(2,74)', 'lightblue(2,75)', 'lightblue(2,76)', 'lightblue(2,77)', 'lightblue(2,78)', 'lightblue(2,79)', 'lightblue(2,80)', 'lightblue(2,81)', 'lightblue(2,82)', 'lightblue(2,83)', 'lightblue(2,84)', 'lightblue(2,85)', 'lightblue(2,86)', 'lightblue(2,87)', 'lightblue(2,88)', 'lightblue(2,89)', 'lightblue(2,90)', 'lightblue(2,91)', 'lightblue(2,92)', 'lightblue(2,93)', 'lightblue(2,94)', 'lightblue(2,95)', 'lightblue(2,96)', 'lightblue(2,97)', 'lightblue(2,98)', 'lightblue(2,99)', 'lightblue(2,100)', 'lightblue(3,1)', 'lightblue(3,2)', 'lightblue(3,3)', 'lightblue(3,4)', 'lightblue(3,5)', 'lightblue(3,6)', 'lightblue(3,7)', 'lightblue(3,8)', 'lightblue(3,9)', 'lightblue(3,10)', 'lightblue(3,11)', 'lightblue(3,12)', 'lightblue(3,13)', 'lightblue(3,14)', 'lightblue(3,15)', 'lightblue(3,16)', 'lightblue(3,17)', 'lightblue(3,18)', 'lightblue(3,19)', 'lightblue(3,20)', 'lightblue(3,21)', 'lightblue(3,22)', 'lightblue(3,23)', 'lightblue(3,24)', 'lightblue(3,25)', 'lightblue(3,26)', 'lightblue(3,27)', 'lightblue(3,28)', 'lightblue(3,29)', 'lightblue(3,30)', 'lightblue(3,31)', 'lightblue(3,32)', 'lightblue(3,33)', 'lightblue(3,34)', 'lightblue(3,35)', 'lightblue(3,36)', 'lightblue(3,37)', 'lightblue(3,38)', 'lightblue(3,39)', 'lightblue(3,40)', 'lightblue(3,41)', 'lightblue(3,42)', 'lightblue(3,43)', 'lightblue(3,44)', 'lightblue(3,45)', 'lightblue(3,46)', 'lightblue(3,47)', 'lightblue(3,48)', 'lightblue(3,49)', 'lightblue(3,50)', 'lightblue(3,51)', 'lightblue(3,52)', 'lightblue(3,53)', 'lightblue(3,54)', 'lightblue(3,55)', 'lightblue(3,56)', 'lightblue(3,57)', 'lightblue(3,58)', 'lightblue(3,59)', 'lightblue(3,60)', 'lightblue(3,61)', 'lightblue(3,62)', 'lightblue(3,63)', 'lightblue(3,64)', 'lightblue(3,65)', 'lightblue(3,66)', 'lightblue(3,67)', 'lightblue(3,68)', 'lightblue(3,69)', 'lightblue(3,70)', 'lightblue(3,71)', 'lightblue(3,72)', 'lightblue(3,73)', 'lightblue(3,74)', 'lightblue(3,75)', 'lightblue(3,76)', 'lightblue(3,77)', 'lightblue(3,78)', 'lightblue(3,79)', 'lightblue(3,80)', 'lightblue(3,81)', 'lightblue(3,82)', 'lightblue(3,83)', 'lightblue(3,84)', 'lightblue(3,85)', 'lightblue(3,86)', 'lightblue(3,87)', 'lightblue(3,88)', 'lightblue(3,89)', 'lightblue(3,90)', 'lightblue(3,91)', 'lightblue(3,92)', 'lightblue(3,93)', 'lightblue(3,94)', 'lightblue(3,95)', 'lightblue(3,96)', 'lightblue(3,97)', 'lightblue(3,98)', 'lightblue(3,99)', 'lightblue(3,100)', 'select(1)', 'select(2)', 'select(3)']]


387
assignment

question: 
Compose an ASP application that assigns one label from "desk","storm" to every element defined by the predicate "mumbai".

answer from file: 
assign(X,"desk")|assign(X,"storm"):-mumbai(X).

parsed from model: 
assign(X,"desk")|assign(X,"storm"):-mumbai(X).

facts: 
mumbai(1..5).

generated: 
Compose an ASP application that assigns one label from "desk","storm" to every element defined by the predicate "mumbai".
Answer: assign(X,"desk")|assign(X,"storm"):-mumbai(X).
assign(X,"desk"):-author(X,"dubai").
assign(X,"storm"):-author(X,"shangai").
mumbai(X):-author(X,"dubai").
mumbai(X):-author(X,"shangai").
mumbai(X):-author(X,"rome").
mumbai(X):-author(X,"florence").
mumbai(X):-author(X,"shangai").
mumbai(X):-author(X,"dubai").
mumbai(X):-author(X,"rome").
mumbai(X):-author(X,"florence

unique_rules: 
['assign(X,"desk")|assign(X,"storm"):-mumbai(X).', 'assign(X,"desk"):-author(X,"dubai").', 'assign(X,"storm"):-author(X,"shangai").', 'mumbai(X):-author(X,"dubai").', 'mumbai(X):-author(X,"shangai").', 'mumbai(X):-author(X,"rome").', 'mumbai(X):-author(X,"florence").', 'mumbai(X):-author(X,"florence']

jaccard: 1.0

AS desired: [['mumbai(1)', 'mumbai(2)', 'mumbai(3)', 'mumbai(4)', 'mumbai(5)', 'assign(1,"storm")', 'assign(2,"desk")', 'assign(3,"desk")', 'assign(4,"storm")', 'assign(5,"desk")']]
\AS obtained: [['mumbai(1)', 'mumbai(2)', 'mumbai(3)', 'mumbai(4)', 'mumbai(5)', 'assign(1,"storm")', 'assign(2,"desk")', 'assign(3,"desk")', 'assign(4,"storm")', 'assign(5,"desk")']]


388
constraint

question: 
Compose an ASP solution to ensure the "storm" predicate with value 17 is not associated with the label "chicago".

answer from file: 
:-assign(17,chicago).

parsed from model: 
:-assign(17,chicago).

facts: 
storm(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-storm(X).

generated: 
Compose an ASP solution to ensure the "storm" predicate with value 17 is not associated with the label "chicago".
Answer: :-assign(17,chicago).
Explanation: The predicate "street" includes the "city" label for values associated with the "rome" label.
The predicate "rome" includes the "city" label for values associated with the "author" label.
The predicate "author" includes the "city" label for values associated with the "author" label.
Therefore, the predicate "street" includes the "city" label for values associated with the "rome" label.
The predicate "rome" includes the "city" label for values associated with the "author" label.
The predicate "author" includes the "city" label for values associated with the "author" label.
So,

unique_rules: 
[':-assign(17,chicago).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'storm(1)', 'storm(2)', 'storm(3)', 'storm(4)', 'storm(5)', 'storm(6)', 'storm(7)', 'storm(8)', 'storm(9)', 'storm(10)', 'storm(11)', 'storm(12)', 'storm(13)', 'storm(14)', 'storm(15)', 'storm(16)', 'storm(17)', 'storm(18)', 'storm(19)', 'storm(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'storm(1)', 'storm(2)', 'storm(3)', 'storm(4)', 'storm(5)', 'storm(6)', 'storm(7)', 'storm(8)', 'storm(9)', 'storm(10)', 'storm(11)', 'storm(12)', 'storm(13)', 'storm(14)', 'storm(15)', 'storm(16)', 'storm(17)', 'storm(18)', 'storm(19)', 'storm(20)']]


389
combination

question: 
Produce an ASP script to generate all valid pairings of elements as represented by the predicates "strength" and "chicago".

answer from file: 
combination(X,Y):-strength(X),chicago(Y).

parsed from model: 
combination(X,Y):-strength(X),chicago(Y).

facts: 
strength(1..4).chicago(1..5).

generated: 
Produce an ASP script to generate all valid pairings of elements as represented by the predicates "strength" and "chicago".
Answer: combination(X,Y):-strength(X),chicago(Y).
combination(X,Y):-strength(X),not chicago(Y).
combination(X,Y):-not strength(X),chicago(Y).
combination(X,Y):-not strength(X),not chicago(Y).

unique_rules: 
['combination(X,Y):-strength(X),chicago(Y).', 'combination(X,Y):-strength(X),not chicago(Y).', 'combination(X,Y):-not strength(X),chicago(Y).', 'combination(X,Y):-not strength(X),not chicago(Y).']

jaccard: 1.0

AS desired: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'chicago(5)', 'strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'chicago(5)', 'strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


390
join

question: 
Create an ASP script to define the predicate "moscow_cairo" that links each moscow to the weight of cairo, given that "moscow" has fields "ID","cairoID","hair","lake","quality" and "cairo" has fields "ID","weight","lake".

answer from file: 
moscow_cairo(X,Z):-moscow(X,Y,_,_,_),cairo(Y,Z,_).

parsed from model: 
moscow_cairo(X,Z):-moscow(X,Y,_,_,_),cairo(Y,Z,_).

facts: 
moscow("ID","cairoID","hair","lake","quality").cairo("ID","weight","lake").

generated: 
Create an ASP script to define the predicate "moscow_cairo" that links each moscow to the weight of cairo, given that "moscow" has fields "ID","cairoID","hair","lake","quality" and "cairo" has fields "ID","weight","lake". Define the predicate "moscow_cairo" that links each moscow to the weight of cairo.
Answer: moscow_cairo(X,Z):-moscow(X,Y,_,_,_),cairo(Y,Z,_).
moscow_cairo(X,Z):-moscow(X,Y,_,_,_),not cairo(Y,Z,_).

unique_rules: 
['moscow_cairo(X,Z):-moscow(X,Y,_,_,_),cairo(Y,Z,_).', 'moscow_cairo(X,Z):-moscow(X,Y,_,_,_),not cairo(Y,Z,_).']

jaccard: 1.0

AS desired: [['moscow("ID","cairoID","hair","lake","quality")', 'cairo("ID","weight","lake")']]
\AS obtained: [['moscow("ID","cairoID","hair","lake","quality")', 'cairo("ID","weight","lake")']]


391
closure

question: 
Formulate an ASP solution to establish the transitive closure of the "strength" predicate, defined as "loops".

answer from file: 
loops(X,Y):-strength(X,Y).
loops(X,Y):-strength(X,Z),loops(Z,Y).

parsed from model: 
closure(X,Y):-loops(X,Y).
closure(X,Y):-loops(X,Z),closure(Z,Y).

facts: 
strength(1..3, 1..4).

generated: 
Formulate an ASP solution to establish the transitive closure of the "strength" predicate, defined as "loops".
Answer: closure(X,Y):-loops(X,Y).
closure(X,Y):-loops(X,Z),closure(Z,Y).
closure(X,Y):-loops(X,Z),closure(Z,Y).
closure(X,Y):-loops(X,Y).
closure(X,Y):-loops(X,Z),loops(Z,Y).
closure(X,Y):-loops(X,Z),loops(Z,Y).

unique_rules: 
['closure(X,Y):-loops(X,Y).', 'closure(X,Y):-loops(X,Z),closure(Z,Y).', 'closure(X,Y):-loops(X,Z),loops(Z,Y).']

jaccard: 0.0

AS desired: [['strength(1,1)', 'strength(1,2)', 'strength(1,3)', 'strength(1,4)', 'strength(2,1)', 'strength(2,2)', 'strength(2,3)', 'strength(2,4)', 'strength(3,1)', 'strength(3,2)', 'strength(3,3)', 'strength(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]
\AS obtained: [['strength(1,1)', 'strength(1,2)', 'strength(1,3)', 'strength(1,4)', 'strength(2,1)', 'strength(2,2)', 'strength(2,3)', 'strength(2,4)', 'strength(3,1)', 'strength(3,2)', 'strength(3,3)', 'strength(3,4)']]


392
preference

question: 
Develop an ASP application to avoid the "delhi" predicate with value "10" being associated with "quality", incurring a cost of "1" at level "1" if found.

answer from file: 
:~assign(10,"quality").[1@1]

parsed from model: 
:~assign(10,"quality").[1@1]

facts: 
delhi(1..20).

generated: 
Develop an ASP application to avoid the "delhi" predicate with value "10" being associated with "quality", incurring a cost of "1" at level "1" if found.
Answer: :~assign(10,"quality").[1@1]
The predicate "description" includes fields "ID","city","author","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","

unique_rules: 
[':~assign(10,"quality").[1@1]']

jaccard: 1.0

AS desired: [['delhi(1)', 'delhi(2)', 'delhi(3)', 'delhi(4)', 'delhi(5)', 'delhi(6)', 'delhi(7)', 'delhi(8)', 'delhi(9)', 'delhi(10)', 'delhi(11)', 'delhi(12)', 'delhi(13)', 'delhi(14)', 'delhi(15)', 'delhi(16)', 'delhi(17)', 'delhi(18)', 'delhi(19)', 'delhi(20)']]
\AS obtained: [['delhi(1)', 'delhi(2)', 'delhi(3)', 'delhi(4)', 'delhi(5)', 'delhi(6)', 'delhi(7)', 'delhi(8)', 'delhi(9)', 'delhi(10)', 'delhi(11)', 'delhi(12)', 'delhi(13)', 'delhi(14)', 'delhi(15)', 'delhi(16)', 'delhi(17)', 'delhi(18)', 'delhi(19)', 'delhi(20)']]


393
filtering

question: 
Produce an ASP program to gather and retrieve values linked to the "strength" label in the "butterfly" predicate.

answer from file: 
select(X):-butterfly(X,"strength").

parsed from model: 
select(X):-butterfly(X,"strength").

facts: 
butterfly(1..5, "strength").

generated: 
Produce an ASP program to gather and retrieve values linked to the "strength" label in the "butterfly" predicate.
Answer: select(X):-butterfly(X,"strength").
select(X):- arrivant(X,"strength").
select(X):-name(X,"strength").
select(X):-city(X,"strength").
select(X):-author(X,"strength").
select(X):-age(X,"strength").
select(X):-height(X,"strength").
select(X):-name(X,"moto").
select(X):-city(X,"moto").
select(X):-author(X,"moto").
select(X):-age(X,"moto").
select(X):-height(X,"moto").

unique_rules: 
['select(X):-butterfly(X,"strength").', 'select(X):- arrivant(X,"strength").', 'select(X):-name(X,"strength").', 'select(X):-city(X,"strength").', 'select(X):-author(X,"strength").', 'select(X):-age(X,"strength").', 'select(X):-height(X,"strength").', 'select(X):-name(X,"moto").', 'select(X):-city(X,"moto").', 'select(X):-author(X,"moto").', 'select(X):-age(X,"moto").', 'select(X):-height(X,"moto").']

jaccard: 1.0

AS desired: [['butterfly(1,"strength")', 'butterfly(2,"strength")', 'butterfly(3,"strength")', 'butterfly(4,"strength")', 'butterfly(5,"strength")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['butterfly(1,"strength")', 'butterfly(2,"strength")', 'butterfly(3,"strength")', 'butterfly(4,"strength")', 'butterfly(5,"strength")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


394
negative_filtering

question: 
Draft an ASP solution to identify values associated with the predicate "moscow" but not tied to the predicate "chair" and labeled "cairo".

answer from file: 
select(X):-moscow(X),not chair(X,"cairo").

parsed from model: 
select(X):-cow(X),not chair(X,"cairo").

facts: 
moscow(1..3).chair(1,"hair").chair(2,"singapore").chair(3,"darkmagenta").

generated: 
Draft an ASP solution to identify values associated with the predicate "moscow" but not tied to the predicate "chair" and labeled "cairo".
Answer: select(X):-cow(X),not chair(X,"cairo").
cow(X):-name(X,"city"),age(X,18).
chair(X,"city"):-name(X,"city").
chair(X,"age"):-name(X,"city").

unique_rules: 
['select(X):-cow(X),not chair(X,"cairo").', 'cow(X):-name(X,"city"),age(X,18).', 'chair(X,"city"):-name(X,"city").', 'chair(X,"age"):-name(X,"city").']

jaccard: 0.0

AS desired: [['moscow(1)', 'moscow(2)', 'moscow(3)', 'chair(1,"hair")', 'chair(2,"singapore")', 'chair(3,"darkmagenta")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['chair(1,"hair")', 'chair(2,"singapore")', 'chair(3,"darkmagenta")', 'moscow(1)', 'moscow(2)', 'moscow(3)']]


395
numeric_filtering

question: 
Generate an ASP application to select all values linked to the predicate "storm" with a value different than 42.

answer from file: 
select(X):-storm(X,C),C!=42.

parsed from model: 
select(X):-storm(X,C),C!=42.

facts: 
storm(1..3, 1..100).

generated: 
Generate an ASP application to select all values linked to the predicate "storm" with a value different than 42.
Answer: select(X):-storm(X,C),C!=42.
Explanation: The predicate "storm" includes elements linked to the predicate "city" with a value different than 42.
The predicate "city" contains elements linked to the predicate "author" with a value different than 42.
The predicate "author" contains elements linked to the predicate "rome" with a value different than 42.
So, the predicate "storm" includes elements linked to the predicate "city" with a value different than 42.

unique_rules: 
['select(X):-storm(X,C),C!=42.']

jaccard: 1.0

AS desired: [['storm(1,1)', 'storm(1,2)', 'storm(1,3)', 'storm(1,4)', 'storm(1,5)', 'storm(1,6)', 'storm(1,7)', 'storm(1,8)', 'storm(1,9)', 'storm(1,10)', 'storm(1,11)', 'storm(1,12)', 'storm(1,13)', 'storm(1,14)', 'storm(1,15)', 'storm(1,16)', 'storm(1,17)', 'storm(1,18)', 'storm(1,19)', 'storm(1,20)', 'storm(1,21)', 'storm(1,22)', 'storm(1,23)', 'storm(1,24)', 'storm(1,25)', 'storm(1,26)', 'storm(1,27)', 'storm(1,28)', 'storm(1,29)', 'storm(1,30)', 'storm(1,31)', 'storm(1,32)', 'storm(1,33)', 'storm(1,34)', 'storm(1,35)', 'storm(1,36)', 'storm(1,37)', 'storm(1,38)', 'storm(1,39)', 'storm(1,40)', 'storm(1,41)', 'storm(1,42)', 'storm(1,43)', 'storm(1,44)', 'storm(1,45)', 'storm(1,46)', 'storm(1,47)', 'storm(1,48)', 'storm(1,49)', 'storm(1,50)', 'storm(1,51)', 'storm(1,52)', 'storm(1,53)', 'storm(1,54)', 'storm(1,55)', 'storm(1,56)', 'storm(1,57)', 'storm(1,58)', 'storm(1,59)', 'storm(1,60)', 'storm(1,61)', 'storm(1,62)', 'storm(1,63)', 'storm(1,64)', 'storm(1,65)', 'storm(1,66)', 'storm(1,67)', 'storm(1,68)', 'storm(1,69)', 'storm(1,70)', 'storm(1,71)', 'storm(1,72)', 'storm(1,73)', 'storm(1,74)', 'storm(1,75)', 'storm(1,76)', 'storm(1,77)', 'storm(1,78)', 'storm(1,79)', 'storm(1,80)', 'storm(1,81)', 'storm(1,82)', 'storm(1,83)', 'storm(1,84)', 'storm(1,85)', 'storm(1,86)', 'storm(1,87)', 'storm(1,88)', 'storm(1,89)', 'storm(1,90)', 'storm(1,91)', 'storm(1,92)', 'storm(1,93)', 'storm(1,94)', 'storm(1,95)', 'storm(1,96)', 'storm(1,97)', 'storm(1,98)', 'storm(1,99)', 'storm(1,100)', 'storm(2,1)', 'storm(2,2)', 'storm(2,3)', 'storm(2,4)', 'storm(2,5)', 'storm(2,6)', 'storm(2,7)', 'storm(2,8)', 'storm(2,9)', 'storm(2,10)', 'storm(2,11)', 'storm(2,12)', 'storm(2,13)', 'storm(2,14)', 'storm(2,15)', 'storm(2,16)', 'storm(2,17)', 'storm(2,18)', 'storm(2,19)', 'storm(2,20)', 'storm(2,21)', 'storm(2,22)', 'storm(2,23)', 'storm(2,24)', 'storm(2,25)', 'storm(2,26)', 'storm(2,27)', 'storm(2,28)', 'storm(2,29)', 'storm(2,30)', 'storm(2,31)', 'storm(2,32)', 'storm(2,33)', 'storm(2,34)', 'storm(2,35)', 'storm(2,36)', 'storm(2,37)', 'storm(2,38)', 'storm(2,39)', 'storm(2,40)', 'storm(2,41)', 'storm(2,42)', 'storm(2,43)', 'storm(2,44)', 'storm(2,45)', 'storm(2,46)', 'storm(2,47)', 'storm(2,48)', 'storm(2,49)', 'storm(2,50)', 'storm(2,51)', 'storm(2,52)', 'storm(2,53)', 'storm(2,54)', 'storm(2,55)', 'storm(2,56)', 'storm(2,57)', 'storm(2,58)', 'storm(2,59)', 'storm(2,60)', 'storm(2,61)', 'storm(2,62)', 'storm(2,63)', 'storm(2,64)', 'storm(2,65)', 'storm(2,66)', 'storm(2,67)', 'storm(2,68)', 'storm(2,69)', 'storm(2,70)', 'storm(2,71)', 'storm(2,72)', 'storm(2,73)', 'storm(2,74)', 'storm(2,75)', 'storm(2,76)', 'storm(2,77)', 'storm(2,78)', 'storm(2,79)', 'storm(2,80)', 'storm(2,81)', 'storm(2,82)', 'storm(2,83)', 'storm(2,84)', 'storm(2,85)', 'storm(2,86)', 'storm(2,87)', 'storm(2,88)', 'storm(2,89)', 'storm(2,90)', 'storm(2,91)', 'storm(2,92)', 'storm(2,93)', 'storm(2,94)', 'storm(2,95)', 'storm(2,96)', 'storm(2,97)', 'storm(2,98)', 'storm(2,99)', 'storm(2,100)', 'storm(3,1)', 'storm(3,2)', 'storm(3,3)', 'storm(3,4)', 'storm(3,5)', 'storm(3,6)', 'storm(3,7)', 'storm(3,8)', 'storm(3,9)', 'storm(3,10)', 'storm(3,11)', 'storm(3,12)', 'storm(3,13)', 'storm(3,14)', 'storm(3,15)', 'storm(3,16)', 'storm(3,17)', 'storm(3,18)', 'storm(3,19)', 'storm(3,20)', 'storm(3,21)', 'storm(3,22)', 'storm(3,23)', 'storm(3,24)', 'storm(3,25)', 'storm(3,26)', 'storm(3,27)', 'storm(3,28)', 'storm(3,29)', 'storm(3,30)', 'storm(3,31)', 'storm(3,32)', 'storm(3,33)', 'storm(3,34)', 'storm(3,35)', 'storm(3,36)', 'storm(3,37)', 'storm(3,38)', 'storm(3,39)', 'storm(3,40)', 'storm(3,41)', 'storm(3,42)', 'storm(3,43)', 'storm(3,44)', 'storm(3,45)', 'storm(3,46)', 'storm(3,47)', 'storm(3,48)', 'storm(3,49)', 'storm(3,50)', 'storm(3,51)', 'storm(3,52)', 'storm(3,53)', 'storm(3,54)', 'storm(3,55)', 'storm(3,56)', 'storm(3,57)', 'storm(3,58)', 'storm(3,59)', 'storm(3,60)', 'storm(3,61)', 'storm(3,62)', 'storm(3,63)', 'storm(3,64)', 'storm(3,65)', 'storm(3,66)', 'storm(3,67)', 'storm(3,68)', 'storm(3,69)', 'storm(3,70)', 'storm(3,71)', 'storm(3,72)', 'storm(3,73)', 'storm(3,74)', 'storm(3,75)', 'storm(3,76)', 'storm(3,77)', 'storm(3,78)', 'storm(3,79)', 'storm(3,80)', 'storm(3,81)', 'storm(3,82)', 'storm(3,83)', 'storm(3,84)', 'storm(3,85)', 'storm(3,86)', 'storm(3,87)', 'storm(3,88)', 'storm(3,89)', 'storm(3,90)', 'storm(3,91)', 'storm(3,92)', 'storm(3,93)', 'storm(3,94)', 'storm(3,95)', 'storm(3,96)', 'storm(3,97)', 'storm(3,98)', 'storm(3,99)', 'storm(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['storm(1,1)', 'storm(1,2)', 'storm(1,3)', 'storm(1,4)', 'storm(1,5)', 'storm(1,6)', 'storm(1,7)', 'storm(1,8)', 'storm(1,9)', 'storm(1,10)', 'storm(1,11)', 'storm(1,12)', 'storm(1,13)', 'storm(1,14)', 'storm(1,15)', 'storm(1,16)', 'storm(1,17)', 'storm(1,18)', 'storm(1,19)', 'storm(1,20)', 'storm(1,21)', 'storm(1,22)', 'storm(1,23)', 'storm(1,24)', 'storm(1,25)', 'storm(1,26)', 'storm(1,27)', 'storm(1,28)', 'storm(1,29)', 'storm(1,30)', 'storm(1,31)', 'storm(1,32)', 'storm(1,33)', 'storm(1,34)', 'storm(1,35)', 'storm(1,36)', 'storm(1,37)', 'storm(1,38)', 'storm(1,39)', 'storm(1,40)', 'storm(1,41)', 'storm(1,42)', 'storm(1,43)', 'storm(1,44)', 'storm(1,45)', 'storm(1,46)', 'storm(1,47)', 'storm(1,48)', 'storm(1,49)', 'storm(1,50)', 'storm(1,51)', 'storm(1,52)', 'storm(1,53)', 'storm(1,54)', 'storm(1,55)', 'storm(1,56)', 'storm(1,57)', 'storm(1,58)', 'storm(1,59)', 'storm(1,60)', 'storm(1,61)', 'storm(1,62)', 'storm(1,63)', 'storm(1,64)', 'storm(1,65)', 'storm(1,66)', 'storm(1,67)', 'storm(1,68)', 'storm(1,69)', 'storm(1,70)', 'storm(1,71)', 'storm(1,72)', 'storm(1,73)', 'storm(1,74)', 'storm(1,75)', 'storm(1,76)', 'storm(1,77)', 'storm(1,78)', 'storm(1,79)', 'storm(1,80)', 'storm(1,81)', 'storm(1,82)', 'storm(1,83)', 'storm(1,84)', 'storm(1,85)', 'storm(1,86)', 'storm(1,87)', 'storm(1,88)', 'storm(1,89)', 'storm(1,90)', 'storm(1,91)', 'storm(1,92)', 'storm(1,93)', 'storm(1,94)', 'storm(1,95)', 'storm(1,96)', 'storm(1,97)', 'storm(1,98)', 'storm(1,99)', 'storm(1,100)', 'storm(2,1)', 'storm(2,2)', 'storm(2,3)', 'storm(2,4)', 'storm(2,5)', 'storm(2,6)', 'storm(2,7)', 'storm(2,8)', 'storm(2,9)', 'storm(2,10)', 'storm(2,11)', 'storm(2,12)', 'storm(2,13)', 'storm(2,14)', 'storm(2,15)', 'storm(2,16)', 'storm(2,17)', 'storm(2,18)', 'storm(2,19)', 'storm(2,20)', 'storm(2,21)', 'storm(2,22)', 'storm(2,23)', 'storm(2,24)', 'storm(2,25)', 'storm(2,26)', 'storm(2,27)', 'storm(2,28)', 'storm(2,29)', 'storm(2,30)', 'storm(2,31)', 'storm(2,32)', 'storm(2,33)', 'storm(2,34)', 'storm(2,35)', 'storm(2,36)', 'storm(2,37)', 'storm(2,38)', 'storm(2,39)', 'storm(2,40)', 'storm(2,41)', 'storm(2,42)', 'storm(2,43)', 'storm(2,44)', 'storm(2,45)', 'storm(2,46)', 'storm(2,47)', 'storm(2,48)', 'storm(2,49)', 'storm(2,50)', 'storm(2,51)', 'storm(2,52)', 'storm(2,53)', 'storm(2,54)', 'storm(2,55)', 'storm(2,56)', 'storm(2,57)', 'storm(2,58)', 'storm(2,59)', 'storm(2,60)', 'storm(2,61)', 'storm(2,62)', 'storm(2,63)', 'storm(2,64)', 'storm(2,65)', 'storm(2,66)', 'storm(2,67)', 'storm(2,68)', 'storm(2,69)', 'storm(2,70)', 'storm(2,71)', 'storm(2,72)', 'storm(2,73)', 'storm(2,74)', 'storm(2,75)', 'storm(2,76)', 'storm(2,77)', 'storm(2,78)', 'storm(2,79)', 'storm(2,80)', 'storm(2,81)', 'storm(2,82)', 'storm(2,83)', 'storm(2,84)', 'storm(2,85)', 'storm(2,86)', 'storm(2,87)', 'storm(2,88)', 'storm(2,89)', 'storm(2,90)', 'storm(2,91)', 'storm(2,92)', 'storm(2,93)', 'storm(2,94)', 'storm(2,95)', 'storm(2,96)', 'storm(2,97)', 'storm(2,98)', 'storm(2,99)', 'storm(2,100)', 'storm(3,1)', 'storm(3,2)', 'storm(3,3)', 'storm(3,4)', 'storm(3,5)', 'storm(3,6)', 'storm(3,7)', 'storm(3,8)', 'storm(3,9)', 'storm(3,10)', 'storm(3,11)', 'storm(3,12)', 'storm(3,13)', 'storm(3,14)', 'storm(3,15)', 'storm(3,16)', 'storm(3,17)', 'storm(3,18)', 'storm(3,19)', 'storm(3,20)', 'storm(3,21)', 'storm(3,22)', 'storm(3,23)', 'storm(3,24)', 'storm(3,25)', 'storm(3,26)', 'storm(3,27)', 'storm(3,28)', 'storm(3,29)', 'storm(3,30)', 'storm(3,31)', 'storm(3,32)', 'storm(3,33)', 'storm(3,34)', 'storm(3,35)', 'storm(3,36)', 'storm(3,37)', 'storm(3,38)', 'storm(3,39)', 'storm(3,40)', 'storm(3,41)', 'storm(3,42)', 'storm(3,43)', 'storm(3,44)', 'storm(3,45)', 'storm(3,46)', 'storm(3,47)', 'storm(3,48)', 'storm(3,49)', 'storm(3,50)', 'storm(3,51)', 'storm(3,52)', 'storm(3,53)', 'storm(3,54)', 'storm(3,55)', 'storm(3,56)', 'storm(3,57)', 'storm(3,58)', 'storm(3,59)', 'storm(3,60)', 'storm(3,61)', 'storm(3,62)', 'storm(3,63)', 'storm(3,64)', 'storm(3,65)', 'storm(3,66)', 'storm(3,67)', 'storm(3,68)', 'storm(3,69)', 'storm(3,70)', 'storm(3,71)', 'storm(3,72)', 'storm(3,73)', 'storm(3,74)', 'storm(3,75)', 'storm(3,76)', 'storm(3,77)', 'storm(3,78)', 'storm(3,79)', 'storm(3,80)', 'storm(3,81)', 'storm(3,82)', 'storm(3,83)', 'storm(3,84)', 'storm(3,85)', 'storm(3,86)', 'storm(3,87)', 'storm(3,88)', 'storm(3,89)', 'storm(3,90)', 'storm(3,91)', 'storm(3,92)', 'storm(3,93)', 'storm(3,94)', 'storm(3,95)', 'storm(3,96)', 'storm(3,97)', 'storm(3,98)', 'storm(3,99)', 'storm(3,100)', 'select(1)', 'select(2)', 'select(3)']]


396
assignment

question: 
Develop an ASP script that ensures each element, as specified by the predicate "butterfly", receives exactly one label from the set "storm","singapore","weight".

answer from file: 
assign(X,"storm")|assign(X,"singapore")|assign(X,"weight"):-butterfly(X).

parsed from model: 
assign(X,"storm")|assign(X,"singapore")|assign(X,"weight"):- arrivant(X,"bike").

facts: 
butterfly(1..5).

generated: 
Develop an ASP script that ensures each element, as specified by the predicate "butterfly", receives exactly one label from the set "storm","singapore","weight".
Answer: assign(X,"storm")|assign(X,"singapore")|assign(X,"weight"):- arrivant(X,"bike").
assign(X,"bike"):- arrivant(X,"height").
assign(X,"height"):- arrivant(X,"bike").
assign(X,"bike"):- arrivant(X,"height").
assign(X,"height"):- arrivant(X,"bike").
assign(X,"bike"):- arrivant(X,"height").
assign(X,"height"):- arrivant(X,"bike").
assign(X,"bike"):- arrivant(X,"height").
assign(X,"height"):- arrivant(X,"bike").
assign(X,"bike"):

unique_rules: 
['assign(X,"storm")|assign(X,"singapore")|assign(X,"weight"):- arrivant(X,"bike").', 'assign(X,"bike"):- arrivant(X,"height").', 'assign(X,"height"):- arrivant(X,"bike").']

jaccard: 0.0

AS desired: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)', 'assign(1,"weight")', 'assign(2,"weight")', 'assign(3,"weight")', 'assign(4,"weight")', 'assign(5,"weight")']]
\AS obtained: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)']]


397
constraint

question: 
Formulate an ASP script to ensure the "desk" predicate having value 1 is not associated with the label "laptop".

answer from file: 
:-assign(1,laptop).

parsed from model: 
:-assign(1,laptop).

facts: 
desk(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-desk(X).

generated: 
Formulate an ASP script to ensure the "desk" predicate having value 1 is not associated with the label "laptop".
Answer: :-assign(1,laptop).
Explanation: The predicate "desk" having value 1 is not associated with the label " arrivant".
The predicate " arrivant" having value 1 is associated with the label "bike".
The predicate "bike" having value 1 is not associated with the label "description".
The predicate "description" having value 1 is associated with the label "description".
So, the script ensures that the association between the "desk" and " arrivant" is not valid.

unique_rules: 
[':-assign(1,laptop).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'desk(1)', 'desk(2)', 'desk(3)', 'desk(4)', 'desk(5)', 'desk(6)', 'desk(7)', 'desk(8)', 'desk(9)', 'desk(10)', 'desk(11)', 'desk(12)', 'desk(13)', 'desk(14)', 'desk(15)', 'desk(16)', 'desk(17)', 'desk(18)', 'desk(19)', 'desk(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'desk(1)', 'desk(2)', 'desk(3)', 'desk(4)', 'desk(5)', 'desk(6)', 'desk(7)', 'desk(8)', 'desk(9)', 'desk(10)', 'desk(11)', 'desk(12)', 'desk(13)', 'desk(14)', 'desk(15)', 'desk(16)', 'desk(17)', 'desk(18)', 'desk(19)', 'desk(20)']]


398
combination

question: 
Create an ASP program to calculate the Cartesian product of elements from sets represented by the predicates "quality" and "delhi".

answer from file: 
combination(X,Y):-quality(X),delhi(Y).

parsed from model: 
combination(X,Y):-quality(X),delhi(Y).

facts: 
quality(1..4).delhi(1..5).

generated: 
Create an ASP program to calculate the Cartesian product of elements from sets represented by the predicates "quality" and "delhi".
Answer: combination(X,Y):-quality(X),delhi(Y).
combination(X,Y):-quality(X),not delhi(Y).
combination(X,Y):-not quality(X),delhi(Y).
combination(X,Y):-quality(X),delhi(Y).

unique_rules: 
['combination(X,Y):-quality(X),delhi(Y).', 'combination(X,Y):-quality(X),not delhi(Y).', 'combination(X,Y):-not quality(X),delhi(Y).']

jaccard: 1.0

AS desired: [['delhi(1)', 'delhi(2)', 'delhi(3)', 'delhi(4)', 'delhi(5)', 'quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['delhi(1)', 'delhi(2)', 'delhi(3)', 'delhi(4)', 'delhi(5)', 'quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


399
join

question: 
Draft an ASP script to define the predicate "chair_surname" that associates each chair with the owner of surname, given "chair" has fields "ID","weight","surnameID","surname" and "surname" has fields "ID","owner","lake","quality".

answer from file: 
chair_surname(X,Z):-chair(X,_,Y,_),surname(Y,Z,_,_).

parsed from model: 
chair_surname(X,Z):-chair(X,_,Y,_),author(Y,Z,_,_).

facts: 
chair("ID","weight","surnameID","surname").surname("ID","owner","lake","quality").

generated: 
Draft an ASP script to define the predicate "chair_surname" that associates each chair with the owner of surname, given "chair" has fields "ID","weight","surnameID","surname" and "surname" has fields "ID","owner","lake","quality". Define the predicate "chair_surname" that associates each chair with the owner of the surname "author".
Answer: chair_surname(X,Z):-chair(X,_,Y,_),author(Y,Z,_,_).
chair_surname(X,Z):-chair(X,_,Z,_),author(Z,_,_,_).

unique_rules: 
['chair_surname(X,Z):-chair(X,_,Y,_),author(Y,Z,_,_).', 'chair_surname(X,Z):-chair(X,_,Z,_),author(Z,_,_,_).']

jaccard: 1.0

AS desired: [['chair("ID","weight","surnameID","surname")', 'surname("ID","owner","lake","quality")']]
\AS obtained: [['chair("ID","weight","surnameID","surname")', 'surname("ID","owner","lake","quality")']]


400
closure

question: 
Develop an ASP application that constructs the "trains" predicate based on the transitive closure of the "owner" predicate.

answer from file: 
trains(X,Y):-owner(X,Y).
trains(X,Y):-owner(X,Z),trains(Z,Y).

parsed from model: 
trains(X,Y):-owner(X,Y).
trains(X,Y):-owner(X,Z),trains(Z,Y).

facts: 
owner(1..3, 1..4).

generated: 
Develop an ASP application that constructs the "trains" predicate based on the transitive closure of the "owner" predicate.
Answer: trains(X,Y):-owner(X,Y).
trains(X,Y):-owner(X,Z),trains(Z,Y).
trains(X,Y):-owner(X,Z),not owner(Z,Y).
owner(X,Y):-city(X,Y).
city(X,Y):-street(X,Y).

unique_rules: 
['trains(X,Y):-owner(X,Y).', 'trains(X,Y):-owner(X,Z),trains(Z,Y).', 'trains(X,Y):-owner(X,Z),not owner(Z,Y).', 'owner(X,Y):-city(X,Y).', 'city(X,Y):-street(X,Y).']

jaccard: 1.0

AS desired: [['owner(1,1)', 'owner(1,2)', 'owner(1,3)', 'owner(1,4)', 'owner(2,1)', 'owner(2,2)', 'owner(2,3)', 'owner(2,4)', 'owner(3,1)', 'owner(3,2)', 'owner(3,3)', 'owner(3,4)', 'trains(1,1)', 'trains(1,2)', 'trains(1,3)', 'trains(1,4)', 'trains(2,1)', 'trains(2,2)', 'trains(2,3)', 'trains(2,4)', 'trains(3,1)', 'trains(3,2)', 'trains(3,3)', 'trains(3,4)']]
\AS obtained: [['owner(1,1)', 'owner(1,2)', 'owner(1,3)', 'owner(1,4)', 'owner(2,1)', 'owner(2,2)', 'owner(2,3)', 'owner(2,4)', 'owner(3,1)', 'owner(3,2)', 'owner(3,3)', 'owner(3,4)', 'trains(1,1)', 'trains(1,2)', 'trains(1,3)', 'trains(1,4)', 'trains(2,1)', 'trains(2,2)', 'trains(2,3)', 'trains(2,4)', 'trains(3,1)', 'trains(3,2)', 'trains(3,3)', 'trains(3,4)']]


401
preference

question: 
Craft an ASP solution to prevent the linking of the "lake" predicate with value "14" to "black". Any link incurs a cost of "1" at level "1".

answer from file: 
:~assign(14,"black").[1@1]

parsed from model: 
:~assign(14,"black").[1@1]

facts: 
lake(1..20).

generated: 
Craft an ASP solution to prevent the linking of the "lake" predicate with value "14" to "black". Any link incurs a cost of "1" at level "1".
Answer: :~assign(14,"black").[1@1]
Explanation: The predicate "bike" includes a field "author" that links to the "black" label. The predicate "black" includes fields "ID","height","age","author","city","description","name","price","height","description","city","author","age","description","name","price","height","description","city","author","age","description","name","price","height","description","city","author","age","description","name","price","height","description","city","author","age","description","name","price","height","description","city","author","age","description","name","price","height","description","city","

unique_rules: 
[':~assign(14,"black").[1@1]']

jaccard: 1.0

AS desired: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lake(6)', 'lake(7)', 'lake(8)', 'lake(9)', 'lake(10)', 'lake(11)', 'lake(12)', 'lake(13)', 'lake(14)', 'lake(15)', 'lake(16)', 'lake(17)', 'lake(18)', 'lake(19)', 'lake(20)']]
\AS obtained: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lake(6)', 'lake(7)', 'lake(8)', 'lake(9)', 'lake(10)', 'lake(11)', 'lake(12)', 'lake(13)', 'lake(14)', 'lake(15)', 'lake(16)', 'lake(17)', 'lake(18)', 'lake(19)', 'lake(20)']]


402
filtering

question: 
Produce an ASP program to gather and retrieve values linked to the "wall" label in the "moscow" predicate.

answer from file: 
select(X):-moscow(X,"wall").

parsed from model: 
select(X):-moscow(X,"wall").

facts: 
moscow(1..5, "wall").

generated: 
Produce an ASP program to gather and retrieve values linked to the "wall" label in the "moscow" predicate.
Answer: select(X):-moscow(X,"wall").
select(X):-moscow(X,"city").
select(X):-moscow(X,"author").
moscow(X,"city").
moscow(X,"author").
moscow(X,"wall").

unique_rules: 
['select(X):-moscow(X,"wall").', 'select(X):-moscow(X,"city").', 'select(X):-moscow(X,"author").']

jaccard: 1.0

AS desired: [['moscow(1,"wall")', 'moscow(2,"wall")', 'moscow(3,"wall")', 'moscow(4,"wall")', 'moscow(5,"wall")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['moscow(1,"wall")', 'moscow(2,"wall")', 'moscow(3,"wall")', 'moscow(4,"wall")', 'moscow(5,"wall")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


403
negative_filtering

question: 
Draft an ASP solution to identify values associated with the predicate "desk" but not tied to the predicate "cosenza" and labeled "weight".

answer from file: 
select(X):-desk(X),not cosenza(X,"weight").

parsed from model: 
select(X):-desk(X),not cosenza(X,"weight").

facts: 
desk(1..3).cosenza(1,"chicago").cosenza(2,"white").cosenza(3,"moscow").

generated: 
Draft an ASP solution to identify values associated with the predicate "desk" but not tied to the predicate "cosenza" and labeled "weight".
Answer: select(X):-desk(X),not cosenza(X,"weight").
desk(X):-height(X),age(X,18).
cosenza(X,"weight").
height(X):-height(X),age(X,22).
age(X,V):-height(X,V).

unique_rules: 
['select(X):-desk(X),not cosenza(X,"weight").', 'desk(X):-height(X),age(X,18).', 'height(X):-height(X),age(X,22).', 'age(X,V):-height(X,V).']

jaccard: 1.0

AS desired: [['desk(1)', 'desk(2)', 'desk(3)', 'cosenza(1,"chicago")', 'cosenza(2,"white")', 'cosenza(3,"moscow")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['desk(1)', 'desk(2)', 'desk(3)', 'cosenza(1,"chicago")', 'cosenza(2,"white")', 'cosenza(3,"moscow")', 'select(1)', 'select(2)', 'select(3)']]


404
numeric_filtering

question: 
Formulate an ASP script to identify values tied to the predicate "storm" with a value different than 81.

answer from file: 
select(X):-storm(X,C),C!=81.

parsed from model: 
select(X):-storm(X,C),C!=81.

facts: 
storm(1..3, 1..100).

generated: 
Formulate an ASP script to identify values tied to the predicate "storm" with a value different than 81.
Answer: select(X):-storm(X,C),C!=81.
select(X):-storm(X,C),C==81.
```

unique_rules: 
['select(X):-storm(X,C),C!=81.', 'select(X):-storm(X,C),C==81.']

jaccard: 1.0

AS desired: [['storm(1,1)', 'storm(1,2)', 'storm(1,3)', 'storm(1,4)', 'storm(1,5)', 'storm(1,6)', 'storm(1,7)', 'storm(1,8)', 'storm(1,9)', 'storm(1,10)', 'storm(1,11)', 'storm(1,12)', 'storm(1,13)', 'storm(1,14)', 'storm(1,15)', 'storm(1,16)', 'storm(1,17)', 'storm(1,18)', 'storm(1,19)', 'storm(1,20)', 'storm(1,21)', 'storm(1,22)', 'storm(1,23)', 'storm(1,24)', 'storm(1,25)', 'storm(1,26)', 'storm(1,27)', 'storm(1,28)', 'storm(1,29)', 'storm(1,30)', 'storm(1,31)', 'storm(1,32)', 'storm(1,33)', 'storm(1,34)', 'storm(1,35)', 'storm(1,36)', 'storm(1,37)', 'storm(1,38)', 'storm(1,39)', 'storm(1,40)', 'storm(1,41)', 'storm(1,42)', 'storm(1,43)', 'storm(1,44)', 'storm(1,45)', 'storm(1,46)', 'storm(1,47)', 'storm(1,48)', 'storm(1,49)', 'storm(1,50)', 'storm(1,51)', 'storm(1,52)', 'storm(1,53)', 'storm(1,54)', 'storm(1,55)', 'storm(1,56)', 'storm(1,57)', 'storm(1,58)', 'storm(1,59)', 'storm(1,60)', 'storm(1,61)', 'storm(1,62)', 'storm(1,63)', 'storm(1,64)', 'storm(1,65)', 'storm(1,66)', 'storm(1,67)', 'storm(1,68)', 'storm(1,69)', 'storm(1,70)', 'storm(1,71)', 'storm(1,72)', 'storm(1,73)', 'storm(1,74)', 'storm(1,75)', 'storm(1,76)', 'storm(1,77)', 'storm(1,78)', 'storm(1,79)', 'storm(1,80)', 'storm(1,81)', 'storm(1,82)', 'storm(1,83)', 'storm(1,84)', 'storm(1,85)', 'storm(1,86)', 'storm(1,87)', 'storm(1,88)', 'storm(1,89)', 'storm(1,90)', 'storm(1,91)', 'storm(1,92)', 'storm(1,93)', 'storm(1,94)', 'storm(1,95)', 'storm(1,96)', 'storm(1,97)', 'storm(1,98)', 'storm(1,99)', 'storm(1,100)', 'storm(2,1)', 'storm(2,2)', 'storm(2,3)', 'storm(2,4)', 'storm(2,5)', 'storm(2,6)', 'storm(2,7)', 'storm(2,8)', 'storm(2,9)', 'storm(2,10)', 'storm(2,11)', 'storm(2,12)', 'storm(2,13)', 'storm(2,14)', 'storm(2,15)', 'storm(2,16)', 'storm(2,17)', 'storm(2,18)', 'storm(2,19)', 'storm(2,20)', 'storm(2,21)', 'storm(2,22)', 'storm(2,23)', 'storm(2,24)', 'storm(2,25)', 'storm(2,26)', 'storm(2,27)', 'storm(2,28)', 'storm(2,29)', 'storm(2,30)', 'storm(2,31)', 'storm(2,32)', 'storm(2,33)', 'storm(2,34)', 'storm(2,35)', 'storm(2,36)', 'storm(2,37)', 'storm(2,38)', 'storm(2,39)', 'storm(2,40)', 'storm(2,41)', 'storm(2,42)', 'storm(2,43)', 'storm(2,44)', 'storm(2,45)', 'storm(2,46)', 'storm(2,47)', 'storm(2,48)', 'storm(2,49)', 'storm(2,50)', 'storm(2,51)', 'storm(2,52)', 'storm(2,53)', 'storm(2,54)', 'storm(2,55)', 'storm(2,56)', 'storm(2,57)', 'storm(2,58)', 'storm(2,59)', 'storm(2,60)', 'storm(2,61)', 'storm(2,62)', 'storm(2,63)', 'storm(2,64)', 'storm(2,65)', 'storm(2,66)', 'storm(2,67)', 'storm(2,68)', 'storm(2,69)', 'storm(2,70)', 'storm(2,71)', 'storm(2,72)', 'storm(2,73)', 'storm(2,74)', 'storm(2,75)', 'storm(2,76)', 'storm(2,77)', 'storm(2,78)', 'storm(2,79)', 'storm(2,80)', 'storm(2,81)', 'storm(2,82)', 'storm(2,83)', 'storm(2,84)', 'storm(2,85)', 'storm(2,86)', 'storm(2,87)', 'storm(2,88)', 'storm(2,89)', 'storm(2,90)', 'storm(2,91)', 'storm(2,92)', 'storm(2,93)', 'storm(2,94)', 'storm(2,95)', 'storm(2,96)', 'storm(2,97)', 'storm(2,98)', 'storm(2,99)', 'storm(2,100)', 'storm(3,1)', 'storm(3,2)', 'storm(3,3)', 'storm(3,4)', 'storm(3,5)', 'storm(3,6)', 'storm(3,7)', 'storm(3,8)', 'storm(3,9)', 'storm(3,10)', 'storm(3,11)', 'storm(3,12)', 'storm(3,13)', 'storm(3,14)', 'storm(3,15)', 'storm(3,16)', 'storm(3,17)', 'storm(3,18)', 'storm(3,19)', 'storm(3,20)', 'storm(3,21)', 'storm(3,22)', 'storm(3,23)', 'storm(3,24)', 'storm(3,25)', 'storm(3,26)', 'storm(3,27)', 'storm(3,28)', 'storm(3,29)', 'storm(3,30)', 'storm(3,31)', 'storm(3,32)', 'storm(3,33)', 'storm(3,34)', 'storm(3,35)', 'storm(3,36)', 'storm(3,37)', 'storm(3,38)', 'storm(3,39)', 'storm(3,40)', 'storm(3,41)', 'storm(3,42)', 'storm(3,43)', 'storm(3,44)', 'storm(3,45)', 'storm(3,46)', 'storm(3,47)', 'storm(3,48)', 'storm(3,49)', 'storm(3,50)', 'storm(3,51)', 'storm(3,52)', 'storm(3,53)', 'storm(3,54)', 'storm(3,55)', 'storm(3,56)', 'storm(3,57)', 'storm(3,58)', 'storm(3,59)', 'storm(3,60)', 'storm(3,61)', 'storm(3,62)', 'storm(3,63)', 'storm(3,64)', 'storm(3,65)', 'storm(3,66)', 'storm(3,67)', 'storm(3,68)', 'storm(3,69)', 'storm(3,70)', 'storm(3,71)', 'storm(3,72)', 'storm(3,73)', 'storm(3,74)', 'storm(3,75)', 'storm(3,76)', 'storm(3,77)', 'storm(3,78)', 'storm(3,79)', 'storm(3,80)', 'storm(3,81)', 'storm(3,82)', 'storm(3,83)', 'storm(3,84)', 'storm(3,85)', 'storm(3,86)', 'storm(3,87)', 'storm(3,88)', 'storm(3,89)', 'storm(3,90)', 'storm(3,91)', 'storm(3,92)', 'storm(3,93)', 'storm(3,94)', 'storm(3,95)', 'storm(3,96)', 'storm(3,97)', 'storm(3,98)', 'storm(3,99)', 'storm(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['storm(1,1)', 'storm(1,2)', 'storm(1,3)', 'storm(1,4)', 'storm(1,5)', 'storm(1,6)', 'storm(1,7)', 'storm(1,8)', 'storm(1,9)', 'storm(1,10)', 'storm(1,11)', 'storm(1,12)', 'storm(1,13)', 'storm(1,14)', 'storm(1,15)', 'storm(1,16)', 'storm(1,17)', 'storm(1,18)', 'storm(1,19)', 'storm(1,20)', 'storm(1,21)', 'storm(1,22)', 'storm(1,23)', 'storm(1,24)', 'storm(1,25)', 'storm(1,26)', 'storm(1,27)', 'storm(1,28)', 'storm(1,29)', 'storm(1,30)', 'storm(1,31)', 'storm(1,32)', 'storm(1,33)', 'storm(1,34)', 'storm(1,35)', 'storm(1,36)', 'storm(1,37)', 'storm(1,38)', 'storm(1,39)', 'storm(1,40)', 'storm(1,41)', 'storm(1,42)', 'storm(1,43)', 'storm(1,44)', 'storm(1,45)', 'storm(1,46)', 'storm(1,47)', 'storm(1,48)', 'storm(1,49)', 'storm(1,50)', 'storm(1,51)', 'storm(1,52)', 'storm(1,53)', 'storm(1,54)', 'storm(1,55)', 'storm(1,56)', 'storm(1,57)', 'storm(1,58)', 'storm(1,59)', 'storm(1,60)', 'storm(1,61)', 'storm(1,62)', 'storm(1,63)', 'storm(1,64)', 'storm(1,65)', 'storm(1,66)', 'storm(1,67)', 'storm(1,68)', 'storm(1,69)', 'storm(1,70)', 'storm(1,71)', 'storm(1,72)', 'storm(1,73)', 'storm(1,74)', 'storm(1,75)', 'storm(1,76)', 'storm(1,77)', 'storm(1,78)', 'storm(1,79)', 'storm(1,80)', 'storm(1,81)', 'storm(1,82)', 'storm(1,83)', 'storm(1,84)', 'storm(1,85)', 'storm(1,86)', 'storm(1,87)', 'storm(1,88)', 'storm(1,89)', 'storm(1,90)', 'storm(1,91)', 'storm(1,92)', 'storm(1,93)', 'storm(1,94)', 'storm(1,95)', 'storm(1,96)', 'storm(1,97)', 'storm(1,98)', 'storm(1,99)', 'storm(1,100)', 'storm(2,1)', 'storm(2,2)', 'storm(2,3)', 'storm(2,4)', 'storm(2,5)', 'storm(2,6)', 'storm(2,7)', 'storm(2,8)', 'storm(2,9)', 'storm(2,10)', 'storm(2,11)', 'storm(2,12)', 'storm(2,13)', 'storm(2,14)', 'storm(2,15)', 'storm(2,16)', 'storm(2,17)', 'storm(2,18)', 'storm(2,19)', 'storm(2,20)', 'storm(2,21)', 'storm(2,22)', 'storm(2,23)', 'storm(2,24)', 'storm(2,25)', 'storm(2,26)', 'storm(2,27)', 'storm(2,28)', 'storm(2,29)', 'storm(2,30)', 'storm(2,31)', 'storm(2,32)', 'storm(2,33)', 'storm(2,34)', 'storm(2,35)', 'storm(2,36)', 'storm(2,37)', 'storm(2,38)', 'storm(2,39)', 'storm(2,40)', 'storm(2,41)', 'storm(2,42)', 'storm(2,43)', 'storm(2,44)', 'storm(2,45)', 'storm(2,46)', 'storm(2,47)', 'storm(2,48)', 'storm(2,49)', 'storm(2,50)', 'storm(2,51)', 'storm(2,52)', 'storm(2,53)', 'storm(2,54)', 'storm(2,55)', 'storm(2,56)', 'storm(2,57)', 'storm(2,58)', 'storm(2,59)', 'storm(2,60)', 'storm(2,61)', 'storm(2,62)', 'storm(2,63)', 'storm(2,64)', 'storm(2,65)', 'storm(2,66)', 'storm(2,67)', 'storm(2,68)', 'storm(2,69)', 'storm(2,70)', 'storm(2,71)', 'storm(2,72)', 'storm(2,73)', 'storm(2,74)', 'storm(2,75)', 'storm(2,76)', 'storm(2,77)', 'storm(2,78)', 'storm(2,79)', 'storm(2,80)', 'storm(2,81)', 'storm(2,82)', 'storm(2,83)', 'storm(2,84)', 'storm(2,85)', 'storm(2,86)', 'storm(2,87)', 'storm(2,88)', 'storm(2,89)', 'storm(2,90)', 'storm(2,91)', 'storm(2,92)', 'storm(2,93)', 'storm(2,94)', 'storm(2,95)', 'storm(2,96)', 'storm(2,97)', 'storm(2,98)', 'storm(2,99)', 'storm(2,100)', 'storm(3,1)', 'storm(3,2)', 'storm(3,3)', 'storm(3,4)', 'storm(3,5)', 'storm(3,6)', 'storm(3,7)', 'storm(3,8)', 'storm(3,9)', 'storm(3,10)', 'storm(3,11)', 'storm(3,12)', 'storm(3,13)', 'storm(3,14)', 'storm(3,15)', 'storm(3,16)', 'storm(3,17)', 'storm(3,18)', 'storm(3,19)', 'storm(3,20)', 'storm(3,21)', 'storm(3,22)', 'storm(3,23)', 'storm(3,24)', 'storm(3,25)', 'storm(3,26)', 'storm(3,27)', 'storm(3,28)', 'storm(3,29)', 'storm(3,30)', 'storm(3,31)', 'storm(3,32)', 'storm(3,33)', 'storm(3,34)', 'storm(3,35)', 'storm(3,36)', 'storm(3,37)', 'storm(3,38)', 'storm(3,39)', 'storm(3,40)', 'storm(3,41)', 'storm(3,42)', 'storm(3,43)', 'storm(3,44)', 'storm(3,45)', 'storm(3,46)', 'storm(3,47)', 'storm(3,48)', 'storm(3,49)', 'storm(3,50)', 'storm(3,51)', 'storm(3,52)', 'storm(3,53)', 'storm(3,54)', 'storm(3,55)', 'storm(3,56)', 'storm(3,57)', 'storm(3,58)', 'storm(3,59)', 'storm(3,60)', 'storm(3,61)', 'storm(3,62)', 'storm(3,63)', 'storm(3,64)', 'storm(3,65)', 'storm(3,66)', 'storm(3,67)', 'storm(3,68)', 'storm(3,69)', 'storm(3,70)', 'storm(3,71)', 'storm(3,72)', 'storm(3,73)', 'storm(3,74)', 'storm(3,75)', 'storm(3,76)', 'storm(3,77)', 'storm(3,78)', 'storm(3,79)', 'storm(3,80)', 'storm(3,81)', 'storm(3,82)', 'storm(3,83)', 'storm(3,84)', 'storm(3,85)', 'storm(3,86)', 'storm(3,87)', 'storm(3,88)', 'storm(3,89)', 'storm(3,90)', 'storm(3,91)', 'storm(3,92)', 'storm(3,93)', 'storm(3,94)', 'storm(3,95)', 'storm(3,96)', 'storm(3,97)', 'storm(3,98)', 'storm(3,99)', 'storm(3,100)', 'select(1)', 'select(2)', 'select(3)']]


405
assignment

question: 
Craft an ASP solution that associates precisely one label from "butterfly","delhi","chicago","wall","barcelona","cosenza","toronto","lake" with elements specified by the predicate "moscow".

answer from file: 
assign(X,"butterfly")|assign(X,"delhi")|assign(X,"chicago")|assign(X,"wall")|assign(X,"barcelona")|assign(X,"cosenza")|assign(X,"toronto")|assign(X,"lake"):-moscow(X).

parsed from model: 
assign(X,"butterfly")|assign(X,"delhi")|assign(X,"chicago")|assign(X,"wall")|assign(X,"barcelona")|assign(X,"cosenza")|assign(X,"toronto")|assign(X,"lake"):-moscow(X).

facts: 
moscow(1..5).

generated: 
Craft an ASP solution that associates precisely one label from "butterfly","delhi","chicago","wall","barcelona","cosenza","toronto","lake" with elements specified by the predicate "moscow".
Answer: assign(X,"butterfly")|assign(X,"delhi")|assign(X,"chicago")|assign(X,"wall")|assign(X,"barcelona")|assign(X,"cosenza")|assign(X,"toronto")|assign(X,"lake"):-moscow(X).
assign(X,"city"):-moscow(X).
assign(X,"moto"):-moscow(X).
assign(X,"rome"):-moscow(X).
assign(X,"dubai"):-moscow(X).
assign(X,"florence"):-moscow(X).
assign(X,"shangai"):-moscow(X).
assign(X

unique_rules: 
['assign(X,"butterfly")|assign(X,"delhi")|assign(X,"chicago")|assign(X,"wall")|assign(X,"barcelona")|assign(X,"cosenza")|assign(X,"toronto")|assign(X,"lake"):-moscow(X).', 'assign(X,"city"):-moscow(X).', 'assign(X,"moto"):-moscow(X).', 'assign(X,"rome"):-moscow(X).', 'assign(X,"dubai"):-moscow(X).', 'assign(X,"florence"):-moscow(X).', 'assign(X,"shangai"):-moscow(X).']

jaccard: 1.0

AS desired: [['moscow(1)', 'moscow(2)', 'moscow(3)', 'moscow(4)', 'moscow(5)', 'assign(1,"lake")', 'assign(2,"lake")', 'assign(3,"toronto")', 'assign(4,"lake")', 'assign(5,"lake")']]
\AS obtained: [['moscow(1)', 'moscow(2)', 'moscow(3)', 'moscow(4)', 'moscow(5)', 'assign(1,"lake")', 'assign(2,"lake")', 'assign(3,"toronto")', 'assign(4,"lake")', 'assign(5,"lake")']]


406
constraint

question: 
Formulate an ASP code that ensures the "storm" predicate having value 15 is not connected to the label "cairo".

answer from file: 
:-assign(15,cairo).

parsed from model: 
:-assign(15,cairo).

facts: 
storm(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-storm(X).

generated: 
Formulate an ASP code that ensures the "storm" predicate having value 15 is not connected to the label "cairo".
Answer: :-assign(15,cairo).
Explanation: The predicate "street" includes values connected to the label "city","height","moto","rome","shangai","description","author","city","name","moto","description","height","author","shangai","city","name","height","description","author","rome","description","height","city","name","description","author","shangai","height","description","author","rome","description","height","city","name","description","author","rome","description","height","city","name","description","author","shangai","height","description","author","rome","description","height","city","name","description","author","rome","description","height","city","name","

unique_rules: 
[':-assign(15,cairo).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'storm(1)', 'storm(2)', 'storm(3)', 'storm(4)', 'storm(5)', 'storm(6)', 'storm(7)', 'storm(8)', 'storm(9)', 'storm(10)', 'storm(11)', 'storm(12)', 'storm(13)', 'storm(14)', 'storm(15)', 'storm(16)', 'storm(17)', 'storm(18)', 'storm(19)', 'storm(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'storm(1)', 'storm(2)', 'storm(3)', 'storm(4)', 'storm(5)', 'storm(6)', 'storm(7)', 'storm(8)', 'storm(9)', 'storm(10)', 'storm(11)', 'storm(12)', 'storm(13)', 'storm(14)', 'storm(15)', 'storm(16)', 'storm(17)', 'storm(18)', 'storm(19)', 'storm(20)']]


407
combination

question: 
Create an ASP solution to list all valid pairings of elements between the predicates "surname" and "delhi".

answer from file: 
combination(X,Y):-surname(X),delhi(Y).

parsed from model: 
combination(X,Y):-surname(X),delhi(Y).

facts: 
surname(1..4).delhi(1..5).

generated: 
Create an ASP solution to list all valid pairings of elements between the predicates "surname" and "delhi".
Answer: combination(X,Y):-surname(X),delhi(Y).
combination(X,Y):-delhi(X),surname(Y).
combination(X,Y):-name(X,Y).
combination(X,Y):-name(X,Y),author(X,Y).
combination(X,Y):-author(X,Y),name(X,Y).

unique_rules: 
['combination(X,Y):-surname(X),delhi(Y).', 'combination(X,Y):-delhi(X),surname(Y).', 'combination(X,Y):-name(X,Y).', 'combination(X,Y):-name(X,Y),author(X,Y).', 'combination(X,Y):-author(X,Y),name(X,Y).']

jaccard: 1.0

AS desired: [['delhi(1)', 'delhi(2)', 'delhi(3)', 'delhi(4)', 'delhi(5)', 'surname(1)', 'surname(2)', 'surname(3)', 'surname(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['delhi(1)', 'delhi(2)', 'delhi(3)', 'delhi(4)', 'delhi(5)', 'surname(1)', 'surname(2)', 'surname(3)', 'surname(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


408
join

question: 
Compose an ASP script that addresses the problem by defining the predicate "wall_barcelona" which links each wall to the lake of barcelona", with "wall" having fields "ID","weight","barcelonaID","owner" and "barcelona" having fields "ID","quality","lake".

answer from file: 
wall_barcelona(X,Z):-wall(X,_,Y,_),barcelona(Y,_,Z).

parsed from model: 
wall_barcelona_assoc(X,Z):-wall(X,_,Y,_),barcelona(Y,Z,_).

facts: 
wall("ID","weight","barcelonaID","owner").barcelona("ID","quality","lake").

generated: 
Compose an ASP script that addresses the problem by defining the predicate "wall_barcelona" which links each wall to the lake of barcelona", with "wall" having fields "ID","weight","barcelonaID","owner" and "barcelona" having fields "ID","quality","lake". Define the predicate "wall_barcelona_assoc" which links each wall to the quality of barcelona".
Answer: wall_barcelona_assoc(X,Z):-wall(X,_,Y,_),barcelona(Y,Z,_).
wall_barcelona_assoc(X,Z):-wall(X,_,Z,_),barcelona(Z,Z,_).
wall_barcelona(X,Y,Z,_):-wall(X,Y,Z,_),barcelona(Z,Z,lake).
wall_barcelona(X,Y,Z,_):-wall(X,Y,Z,_),barcelona(Y,Z,lake).

unique_rules: 
['wall_barcelona_assoc(X,Z):-wall(X,_,Y,_),barcelona(Y,Z,_).', 'wall_barcelona_assoc(X,Z):-wall(X,_,Z,_),barcelona(Z,Z,_).', 'wall_barcelona(X,Y,Z,_):-wall(X,Y,Z,_),barcelona(Z,Z,lake).', 'wall_barcelona(X,Y,Z,_):-wall(X,Y,Z,_),barcelona(Y,Z,lake).']

jaccard: 1.0

AS desired: [['wall("ID","weight","barcelonaID","owner")', 'barcelona("ID","quality","lake")']]
\AS obtained: [['wall("ID","weight","barcelonaID","owner")', 'barcelona("ID","quality","lake")']]


409
closure

question: 
Create an ASP code snippet to determine the transitive closure of the "mumbai" predicate, resulting in the predicate "loops".

answer from file: 
loops(X,Y):-mumbai(X,Y).
loops(X,Y):-mumbai(X,Z),loops(Z,Y).

parsed from model: 
loops(X,Y):-mumbai(X,Y).
loops(X,Y):-mumbai(X,Z),loops(Z,Y).

facts: 
mumbai(1..3, 1..4).

generated: 
Create an ASP code snippet to determine the transitive closure of the "mumbai" predicate, resulting in the predicate "loops".
Answer: loops(X,Y):-mumbai(X,Y).
loops(X,Y):-mumbai(X,Z),loops(Z,Y).
loops(X,Y):-not(mumbai(X,Y)).
loops(X,Y):-mumbai(X,Z),loops(Z,Y).
loops(X,Y):-mumbai(X,Y).
loops(X,Y):-not(mumbai(X,Y)).
loops(X,Y):-mumbai(X,Y).
loops(X,Y):-not(mumbai(X,Y)).
loops(X,Y):-mumbai(X,Y).
loops(X

unique_rules: 
['loops(X,Y):-mumbai(X,Y).', 'loops(X,Y):-mumbai(X,Z),loops(Z,Y).', 'loops(X,Y):-not(mumbai(X,Y)).']

jaccard: 1.0

AS desired: [['mumbai(1,1)', 'mumbai(1,2)', 'mumbai(1,3)', 'mumbai(1,4)', 'mumbai(2,1)', 'mumbai(2,2)', 'mumbai(2,3)', 'mumbai(2,4)', 'mumbai(3,1)', 'mumbai(3,2)', 'mumbai(3,3)', 'mumbai(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]
\AS obtained: [['mumbai(1,1)', 'mumbai(1,2)', 'mumbai(1,3)', 'mumbai(1,4)', 'mumbai(2,1)', 'mumbai(2,2)', 'mumbai(2,3)', 'mumbai(2,4)', 'mumbai(3,1)', 'mumbai(3,2)', 'mumbai(3,3)', 'mumbai(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]


410
preference

question: 
Create an ASP program that keeps the predicate "cosenza" with value "3" unlinked from "moscow". If linked, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(3,"moscow").[1@1]

parsed from model: 
:~assign(3,"moscow").[1@1]

facts: 
cosenza(1..20).

generated: 
Create an ASP program that keeps the predicate "cosenza" with value "3" unlinked from "moscow". If linked, it incurs a cost of "1" at level "1".
Answer: :~assign(3,"moscow").[1@1]
This program uses the predicate "city" with fields "ID","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author

unique_rules: 
[':~assign(3,"moscow").[1@1]']

jaccard: 1.0

AS desired: [['cosenza(1)', 'cosenza(2)', 'cosenza(3)', 'cosenza(4)', 'cosenza(5)', 'cosenza(6)', 'cosenza(7)', 'cosenza(8)', 'cosenza(9)', 'cosenza(10)', 'cosenza(11)', 'cosenza(12)', 'cosenza(13)', 'cosenza(14)', 'cosenza(15)', 'cosenza(16)', 'cosenza(17)', 'cosenza(18)', 'cosenza(19)', 'cosenza(20)']]
\AS obtained: [['cosenza(1)', 'cosenza(2)', 'cosenza(3)', 'cosenza(4)', 'cosenza(5)', 'cosenza(6)', 'cosenza(7)', 'cosenza(8)', 'cosenza(9)', 'cosenza(10)', 'cosenza(11)', 'cosenza(12)', 'cosenza(13)', 'cosenza(14)', 'cosenza(15)', 'cosenza(16)', 'cosenza(17)', 'cosenza(18)', 'cosenza(19)', 'cosenza(20)']]


411
filtering

question: 
Create an ASP solution that retrieves all values labeled "pink" within the predicate "white".

answer from file: 
select(X):-white(X,"pink").

parsed from model: 
select(X):-white(X,"pink").

facts: 
white(1..5, "pink").

generated: 
Create an ASP solution that retrieves all values labeled "pink" within the predicate "white".
Answer: select(X):-white(X,"pink").
select(X):-white(X,"city").
select(X):-white(X,"author").
select(X):-white(X,"description").
select(X):-white(X,"height").
select(X):-white(X,"author","description").
select(X):-white(X,"author","height").
select(X):-white(X,"description","height").
select(X):-white(X,"height","description").
select(X):-white(X,"description","height").
select(X):-white(X,"height","description").
select(X):-white(X,"description","height").
select

unique_rules: 
['select(X):-white(X,"pink").', 'select(X):-white(X,"city").', 'select(X):-white(X,"author").', 'select(X):-white(X,"description").', 'select(X):-white(X,"height").', 'select(X):-white(X,"author","description").', 'select(X):-white(X,"author","height").', 'select(X):-white(X,"description","height").', 'select(X):-white(X,"height","description").']

jaccard: 1.0

AS desired: [['white(1,"pink")', 'white(2,"pink")', 'white(3,"pink")', 'white(4,"pink")', 'white(5,"pink")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['white(1,"pink")', 'white(2,"pink")', 'white(3,"pink")', 'white(4,"pink")', 'white(5,"pink")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


412
negative_filtering

question: 
Create an ASP application to fetch values associated with the predicate "wall" but not linked to the predicate "wall" and labeled "lightblue".

answer from file: 
select(X):-wall(X),not wall(X,"lightblue").

parsed from model: 
select(X):-wall(X),not wall(X,"lightblue").

facts: 
wall(1..3).wall(1,"barcelona").wall(2,"flower").wall(3,"singapore").

generated: 
Create an ASP application to fetch values associated with the predicate "wall" but not linked to the predicate "wall" and labeled "lightblue".
Answer: select(X):-wall(X),not wall(X,"lightblue").

unique_rules: 
['select(X):-wall(X),not wall(X,"lightblue").']

jaccard: 1.0

AS desired: [['wall(1)', 'wall(2)', 'wall(3)', 'wall(1,"barcelona")', 'wall(2,"flower")', 'wall(3,"singapore")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['wall(1)', 'wall(2)', 'wall(3)', 'wall(1,"barcelona")', 'wall(2,"flower")', 'wall(3,"singapore")', 'select(1)', 'select(2)', 'select(3)']]


413
numeric_filtering

question: 
Develop an ASP application to retrieve all values connected to the predicate "flower" with a value different than 6.

answer from file: 
select(X):-flower(X,C),C!=6.

parsed from model: 
select(X):-flower(X,C),C!=6.

facts: 
flower(1..3, 1..100).

generated: 
Develop an ASP application to retrieve all values connected to the predicate "flower" with a value different than 6.
Answer: select(X):-flower(X,C),C!=6.
flower(X,C):-flower(X,C),C==6.

unique_rules: 
['select(X):-flower(X,C),C!=6.', 'flower(X,C):-flower(X,C),C==6.']

jaccard: 1.0

AS desired: [['flower(1,1)', 'flower(1,2)', 'flower(1,3)', 'flower(1,4)', 'flower(1,5)', 'flower(1,6)', 'flower(1,7)', 'flower(1,8)', 'flower(1,9)', 'flower(1,10)', 'flower(1,11)', 'flower(1,12)', 'flower(1,13)', 'flower(1,14)', 'flower(1,15)', 'flower(1,16)', 'flower(1,17)', 'flower(1,18)', 'flower(1,19)', 'flower(1,20)', 'flower(1,21)', 'flower(1,22)', 'flower(1,23)', 'flower(1,24)', 'flower(1,25)', 'flower(1,26)', 'flower(1,27)', 'flower(1,28)', 'flower(1,29)', 'flower(1,30)', 'flower(1,31)', 'flower(1,32)', 'flower(1,33)', 'flower(1,34)', 'flower(1,35)', 'flower(1,36)', 'flower(1,37)', 'flower(1,38)', 'flower(1,39)', 'flower(1,40)', 'flower(1,41)', 'flower(1,42)', 'flower(1,43)', 'flower(1,44)', 'flower(1,45)', 'flower(1,46)', 'flower(1,47)', 'flower(1,48)', 'flower(1,49)', 'flower(1,50)', 'flower(1,51)', 'flower(1,52)', 'flower(1,53)', 'flower(1,54)', 'flower(1,55)', 'flower(1,56)', 'flower(1,57)', 'flower(1,58)', 'flower(1,59)', 'flower(1,60)', 'flower(1,61)', 'flower(1,62)', 'flower(1,63)', 'flower(1,64)', 'flower(1,65)', 'flower(1,66)', 'flower(1,67)', 'flower(1,68)', 'flower(1,69)', 'flower(1,70)', 'flower(1,71)', 'flower(1,72)', 'flower(1,73)', 'flower(1,74)', 'flower(1,75)', 'flower(1,76)', 'flower(1,77)', 'flower(1,78)', 'flower(1,79)', 'flower(1,80)', 'flower(1,81)', 'flower(1,82)', 'flower(1,83)', 'flower(1,84)', 'flower(1,85)', 'flower(1,86)', 'flower(1,87)', 'flower(1,88)', 'flower(1,89)', 'flower(1,90)', 'flower(1,91)', 'flower(1,92)', 'flower(1,93)', 'flower(1,94)', 'flower(1,95)', 'flower(1,96)', 'flower(1,97)', 'flower(1,98)', 'flower(1,99)', 'flower(1,100)', 'flower(2,1)', 'flower(2,2)', 'flower(2,3)', 'flower(2,4)', 'flower(2,5)', 'flower(2,6)', 'flower(2,7)', 'flower(2,8)', 'flower(2,9)', 'flower(2,10)', 'flower(2,11)', 'flower(2,12)', 'flower(2,13)', 'flower(2,14)', 'flower(2,15)', 'flower(2,16)', 'flower(2,17)', 'flower(2,18)', 'flower(2,19)', 'flower(2,20)', 'flower(2,21)', 'flower(2,22)', 'flower(2,23)', 'flower(2,24)', 'flower(2,25)', 'flower(2,26)', 'flower(2,27)', 'flower(2,28)', 'flower(2,29)', 'flower(2,30)', 'flower(2,31)', 'flower(2,32)', 'flower(2,33)', 'flower(2,34)', 'flower(2,35)', 'flower(2,36)', 'flower(2,37)', 'flower(2,38)', 'flower(2,39)', 'flower(2,40)', 'flower(2,41)', 'flower(2,42)', 'flower(2,43)', 'flower(2,44)', 'flower(2,45)', 'flower(2,46)', 'flower(2,47)', 'flower(2,48)', 'flower(2,49)', 'flower(2,50)', 'flower(2,51)', 'flower(2,52)', 'flower(2,53)', 'flower(2,54)', 'flower(2,55)', 'flower(2,56)', 'flower(2,57)', 'flower(2,58)', 'flower(2,59)', 'flower(2,60)', 'flower(2,61)', 'flower(2,62)', 'flower(2,63)', 'flower(2,64)', 'flower(2,65)', 'flower(2,66)', 'flower(2,67)', 'flower(2,68)', 'flower(2,69)', 'flower(2,70)', 'flower(2,71)', 'flower(2,72)', 'flower(2,73)', 'flower(2,74)', 'flower(2,75)', 'flower(2,76)', 'flower(2,77)', 'flower(2,78)', 'flower(2,79)', 'flower(2,80)', 'flower(2,81)', 'flower(2,82)', 'flower(2,83)', 'flower(2,84)', 'flower(2,85)', 'flower(2,86)', 'flower(2,87)', 'flower(2,88)', 'flower(2,89)', 'flower(2,90)', 'flower(2,91)', 'flower(2,92)', 'flower(2,93)', 'flower(2,94)', 'flower(2,95)', 'flower(2,96)', 'flower(2,97)', 'flower(2,98)', 'flower(2,99)', 'flower(2,100)', 'flower(3,1)', 'flower(3,2)', 'flower(3,3)', 'flower(3,4)', 'flower(3,5)', 'flower(3,6)', 'flower(3,7)', 'flower(3,8)', 'flower(3,9)', 'flower(3,10)', 'flower(3,11)', 'flower(3,12)', 'flower(3,13)', 'flower(3,14)', 'flower(3,15)', 'flower(3,16)', 'flower(3,17)', 'flower(3,18)', 'flower(3,19)', 'flower(3,20)', 'flower(3,21)', 'flower(3,22)', 'flower(3,23)', 'flower(3,24)', 'flower(3,25)', 'flower(3,26)', 'flower(3,27)', 'flower(3,28)', 'flower(3,29)', 'flower(3,30)', 'flower(3,31)', 'flower(3,32)', 'flower(3,33)', 'flower(3,34)', 'flower(3,35)', 'flower(3,36)', 'flower(3,37)', 'flower(3,38)', 'flower(3,39)', 'flower(3,40)', 'flower(3,41)', 'flower(3,42)', 'flower(3,43)', 'flower(3,44)', 'flower(3,45)', 'flower(3,46)', 'flower(3,47)', 'flower(3,48)', 'flower(3,49)', 'flower(3,50)', 'flower(3,51)', 'flower(3,52)', 'flower(3,53)', 'flower(3,54)', 'flower(3,55)', 'flower(3,56)', 'flower(3,57)', 'flower(3,58)', 'flower(3,59)', 'flower(3,60)', 'flower(3,61)', 'flower(3,62)', 'flower(3,63)', 'flower(3,64)', 'flower(3,65)', 'flower(3,66)', 'flower(3,67)', 'flower(3,68)', 'flower(3,69)', 'flower(3,70)', 'flower(3,71)', 'flower(3,72)', 'flower(3,73)', 'flower(3,74)', 'flower(3,75)', 'flower(3,76)', 'flower(3,77)', 'flower(3,78)', 'flower(3,79)', 'flower(3,80)', 'flower(3,81)', 'flower(3,82)', 'flower(3,83)', 'flower(3,84)', 'flower(3,85)', 'flower(3,86)', 'flower(3,87)', 'flower(3,88)', 'flower(3,89)', 'flower(3,90)', 'flower(3,91)', 'flower(3,92)', 'flower(3,93)', 'flower(3,94)', 'flower(3,95)', 'flower(3,96)', 'flower(3,97)', 'flower(3,98)', 'flower(3,99)', 'flower(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['flower(1,1)', 'flower(1,2)', 'flower(1,3)', 'flower(1,4)', 'flower(1,5)', 'flower(1,6)', 'flower(1,7)', 'flower(1,8)', 'flower(1,9)', 'flower(1,10)', 'flower(1,11)', 'flower(1,12)', 'flower(1,13)', 'flower(1,14)', 'flower(1,15)', 'flower(1,16)', 'flower(1,17)', 'flower(1,18)', 'flower(1,19)', 'flower(1,20)', 'flower(1,21)', 'flower(1,22)', 'flower(1,23)', 'flower(1,24)', 'flower(1,25)', 'flower(1,26)', 'flower(1,27)', 'flower(1,28)', 'flower(1,29)', 'flower(1,30)', 'flower(1,31)', 'flower(1,32)', 'flower(1,33)', 'flower(1,34)', 'flower(1,35)', 'flower(1,36)', 'flower(1,37)', 'flower(1,38)', 'flower(1,39)', 'flower(1,40)', 'flower(1,41)', 'flower(1,42)', 'flower(1,43)', 'flower(1,44)', 'flower(1,45)', 'flower(1,46)', 'flower(1,47)', 'flower(1,48)', 'flower(1,49)', 'flower(1,50)', 'flower(1,51)', 'flower(1,52)', 'flower(1,53)', 'flower(1,54)', 'flower(1,55)', 'flower(1,56)', 'flower(1,57)', 'flower(1,58)', 'flower(1,59)', 'flower(1,60)', 'flower(1,61)', 'flower(1,62)', 'flower(1,63)', 'flower(1,64)', 'flower(1,65)', 'flower(1,66)', 'flower(1,67)', 'flower(1,68)', 'flower(1,69)', 'flower(1,70)', 'flower(1,71)', 'flower(1,72)', 'flower(1,73)', 'flower(1,74)', 'flower(1,75)', 'flower(1,76)', 'flower(1,77)', 'flower(1,78)', 'flower(1,79)', 'flower(1,80)', 'flower(1,81)', 'flower(1,82)', 'flower(1,83)', 'flower(1,84)', 'flower(1,85)', 'flower(1,86)', 'flower(1,87)', 'flower(1,88)', 'flower(1,89)', 'flower(1,90)', 'flower(1,91)', 'flower(1,92)', 'flower(1,93)', 'flower(1,94)', 'flower(1,95)', 'flower(1,96)', 'flower(1,97)', 'flower(1,98)', 'flower(1,99)', 'flower(1,100)', 'flower(2,1)', 'flower(2,2)', 'flower(2,3)', 'flower(2,4)', 'flower(2,5)', 'flower(2,6)', 'flower(2,7)', 'flower(2,8)', 'flower(2,9)', 'flower(2,10)', 'flower(2,11)', 'flower(2,12)', 'flower(2,13)', 'flower(2,14)', 'flower(2,15)', 'flower(2,16)', 'flower(2,17)', 'flower(2,18)', 'flower(2,19)', 'flower(2,20)', 'flower(2,21)', 'flower(2,22)', 'flower(2,23)', 'flower(2,24)', 'flower(2,25)', 'flower(2,26)', 'flower(2,27)', 'flower(2,28)', 'flower(2,29)', 'flower(2,30)', 'flower(2,31)', 'flower(2,32)', 'flower(2,33)', 'flower(2,34)', 'flower(2,35)', 'flower(2,36)', 'flower(2,37)', 'flower(2,38)', 'flower(2,39)', 'flower(2,40)', 'flower(2,41)', 'flower(2,42)', 'flower(2,43)', 'flower(2,44)', 'flower(2,45)', 'flower(2,46)', 'flower(2,47)', 'flower(2,48)', 'flower(2,49)', 'flower(2,50)', 'flower(2,51)', 'flower(2,52)', 'flower(2,53)', 'flower(2,54)', 'flower(2,55)', 'flower(2,56)', 'flower(2,57)', 'flower(2,58)', 'flower(2,59)', 'flower(2,60)', 'flower(2,61)', 'flower(2,62)', 'flower(2,63)', 'flower(2,64)', 'flower(2,65)', 'flower(2,66)', 'flower(2,67)', 'flower(2,68)', 'flower(2,69)', 'flower(2,70)', 'flower(2,71)', 'flower(2,72)', 'flower(2,73)', 'flower(2,74)', 'flower(2,75)', 'flower(2,76)', 'flower(2,77)', 'flower(2,78)', 'flower(2,79)', 'flower(2,80)', 'flower(2,81)', 'flower(2,82)', 'flower(2,83)', 'flower(2,84)', 'flower(2,85)', 'flower(2,86)', 'flower(2,87)', 'flower(2,88)', 'flower(2,89)', 'flower(2,90)', 'flower(2,91)', 'flower(2,92)', 'flower(2,93)', 'flower(2,94)', 'flower(2,95)', 'flower(2,96)', 'flower(2,97)', 'flower(2,98)', 'flower(2,99)', 'flower(2,100)', 'flower(3,1)', 'flower(3,2)', 'flower(3,3)', 'flower(3,4)', 'flower(3,5)', 'flower(3,6)', 'flower(3,7)', 'flower(3,8)', 'flower(3,9)', 'flower(3,10)', 'flower(3,11)', 'flower(3,12)', 'flower(3,13)', 'flower(3,14)', 'flower(3,15)', 'flower(3,16)', 'flower(3,17)', 'flower(3,18)', 'flower(3,19)', 'flower(3,20)', 'flower(3,21)', 'flower(3,22)', 'flower(3,23)', 'flower(3,24)', 'flower(3,25)', 'flower(3,26)', 'flower(3,27)', 'flower(3,28)', 'flower(3,29)', 'flower(3,30)', 'flower(3,31)', 'flower(3,32)', 'flower(3,33)', 'flower(3,34)', 'flower(3,35)', 'flower(3,36)', 'flower(3,37)', 'flower(3,38)', 'flower(3,39)', 'flower(3,40)', 'flower(3,41)', 'flower(3,42)', 'flower(3,43)', 'flower(3,44)', 'flower(3,45)', 'flower(3,46)', 'flower(3,47)', 'flower(3,48)', 'flower(3,49)', 'flower(3,50)', 'flower(3,51)', 'flower(3,52)', 'flower(3,53)', 'flower(3,54)', 'flower(3,55)', 'flower(3,56)', 'flower(3,57)', 'flower(3,58)', 'flower(3,59)', 'flower(3,60)', 'flower(3,61)', 'flower(3,62)', 'flower(3,63)', 'flower(3,64)', 'flower(3,65)', 'flower(3,66)', 'flower(3,67)', 'flower(3,68)', 'flower(3,69)', 'flower(3,70)', 'flower(3,71)', 'flower(3,72)', 'flower(3,73)', 'flower(3,74)', 'flower(3,75)', 'flower(3,76)', 'flower(3,77)', 'flower(3,78)', 'flower(3,79)', 'flower(3,80)', 'flower(3,81)', 'flower(3,82)', 'flower(3,83)', 'flower(3,84)', 'flower(3,85)', 'flower(3,86)', 'flower(3,87)', 'flower(3,88)', 'flower(3,89)', 'flower(3,90)', 'flower(3,91)', 'flower(3,92)', 'flower(3,93)', 'flower(3,94)', 'flower(3,95)', 'flower(3,96)', 'flower(3,97)', 'flower(3,98)', 'flower(3,99)', 'flower(3,100)', 'select(1)', 'select(2)', 'select(3)']]


414
assignment

question: 
Compose an ASP program that maps a single label from the set "quality","barcelona","moscow","white","pink" to elements determined by the predicate "laptop".

answer from file: 
assign(X,"quality")|assign(X,"barcelona")|assign(X,"moscow")|assign(X,"white")|assign(X,"pink"):-laptop(X).

parsed from model: 
assign(X,"quality")|assign(X,"barcelona")|assign(X,"moscow")|assign(X,"white")|assign(X,"pink"):-laptop(X).

facts: 
laptop(1..5).

generated: 
Compose an ASP program that maps a single label from the set "quality","barcelona","moscow","white","pink" to elements determined by the predicate "laptop".
Answer: assign(X,"quality")|assign(X,"barcelona")|assign(X,"moscow")|assign(X,"white")|assign(X,"pink"):-laptop(X).
Explanation: The predicate "laptop" includes elements determined by the predicate "city".
The predicate "city" includes elements determined by the predicate "author".
The predicate "author" includes elements determined by the predicate "moto".
The predicate "moto" includes elements determined by the predicate "rome".
The predicate "rome" includes elements determined by the predicate "description".
The predicate "description" includes elements determined by the predicate "city".
The predicate "city" includes elements determined by the predicate "author".

unique_rules: 
['assign(X,"quality")|assign(X,"barcelona")|assign(X,"moscow")|assign(X,"white")|assign(X,"pink"):-laptop(X).']

jaccard: 1.0

AS desired: [['laptop(1)', 'laptop(2)', 'laptop(3)', 'laptop(4)', 'laptop(5)', 'assign(1,"pink")', 'assign(2,"pink")', 'assign(3,"pink")', 'assign(4,"pink")', 'assign(5,"pink")']]
\AS obtained: [['laptop(1)', 'laptop(2)', 'laptop(3)', 'laptop(4)', 'laptop(5)', 'assign(1,"pink")', 'assign(2,"pink")', 'assign(3,"pink")', 'assign(4,"pink")', 'assign(5,"pink")']]


415
constraint

question: 
Write an ASP program for the following problem. Prevent the predicate "owner" with value "7" from having label "laptop".

answer from file: 
:-assign(7,laptop).

parsed from model: 
:-assign(7,laptop).

facts: 
owner(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-owner(X).

generated: 
Write an ASP program for the following problem. Prevent the predicate "owner" with value "7" from having label "laptop".
Answer: :-assign(7,laptop).
Explanation: The predicate "author" includes fields "ID","height","city","name","price","description","author","city","name","price","description","author","height","city","name","price","description","author","city","name","price","description","height","city","name","price","description","author","height","city","name","price","description","author","city","name","price","description","height","city","name","price","description","author","height","city","name","price","description","author","city","name","price","description","height","city","name","price","description","author","height","city","name","price","description

unique_rules: 
[':-assign(7,laptop).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'owner(5)', 'owner(6)', 'owner(7)', 'owner(8)', 'owner(9)', 'owner(10)', 'owner(11)', 'owner(12)', 'owner(13)', 'owner(14)', 'owner(15)', 'owner(16)', 'owner(17)', 'owner(18)', 'owner(19)', 'owner(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'owner(5)', 'owner(6)', 'owner(7)', 'owner(8)', 'owner(9)', 'owner(10)', 'owner(11)', 'owner(12)', 'owner(13)', 'owner(14)', 'owner(15)', 'owner(16)', 'owner(17)', 'owner(18)', 'owner(19)', 'owner(20)']]


416
combination

question: 
Compose an ASP script to calculate the Cartesian product of elements represented by the predicates "darkmagenta" and "laptop".

answer from file: 
combination(X,Y):-darkmagenta(X),laptop(Y).

parsed from model: 
combination(X,Y):-darkmagenta(X),laptop(Y).

facts: 
darkmagenta(1..4).laptop(1..5).

generated: 
Compose an ASP script to calculate the Cartesian product of elements represented by the predicates "darkmagenta" and "laptop".
Answer: combination(X,Y):-darkmagenta(X),laptop(Y).
combination(X,Y):-darkmagenta(X),not laptop(Y).
combination(X,Y):-not darkmagenta(X),laptop(Y).
combination(X,Y):-darkmagenta(X),laptop(Y).

unique_rules: 
['combination(X,Y):-darkmagenta(X),laptop(Y).', 'combination(X,Y):-darkmagenta(X),not laptop(Y).', 'combination(X,Y):-not darkmagenta(X),laptop(Y).']

jaccard: 1.0

AS desired: [['laptop(1)', 'laptop(2)', 'laptop(3)', 'laptop(4)', 'laptop(5)', 'darkmagenta(1)', 'darkmagenta(2)', 'darkmagenta(3)', 'darkmagenta(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['laptop(1)', 'laptop(2)', 'laptop(3)', 'laptop(4)', 'laptop(5)', 'darkmagenta(1)', 'darkmagenta(2)', 'darkmagenta(3)', 'darkmagenta(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


417
join

question: 
Create an ASP script to define the predicate "roof_black" that links each roof to the weight of black, given that "roof" has fields "ID","strength","weight","blackID" and "black" has fields "ID","surname","weight".

answer from file: 
roof_black(X,Z):-roof(X,_,_,Y),black(Y,_,Z).

parsed from model: 
roof_black(X,Z):-roof(X,_,_,Y),black(Y,_,Z).

facts: 
roof("ID","strength","weight","blackID").black("ID","surname","weight").

generated: 
Create an ASP script to define the predicate "roof_black" that links each roof to the weight of black, given that "roof" has fields "ID","strength","weight","blackID" and "black" has fields "ID","surname","weight". Define the predicate "roof_black" that links each roof to the weight of black.
Answer: roof_black(X,Z):-roof(X,_,_,Y),black(Y,_,Z).
roof_black(X,Z):-roof(X,_,_,Y),black(Y,_,Z).

unique_rules: 
['roof_black(X,Z):-roof(X,_,_,Y),black(Y,_,Z).']

jaccard: 1.0

AS desired: [['roof("ID","strength","weight","blackID")', 'black("ID","surname","weight")']]
\AS obtained: [['roof("ID","strength","weight","blackID")', 'black("ID","surname","weight")']]


418
closure

question: 
Formulate an ASP code snippet to establish the "loops" predicate by computing the transitive closure of the "cosenza" predicate.

answer from file: 
loops(X,Y):-cosenza(X,Y).
loops(X,Y):-cosenza(X,Z),loops(Z,Y).

parsed from model: 


facts: 
cosenza(1..3, 1..4).

generated: 
Formulate an ASP code snippet to establish the "loops" predicate by computing the transitive closure of the "cosenza" predicate.
```python
# Define the cosenza predicate
cosenza = {"city","author","description","height","name","price","author","city","description","height","name","price","author","city","description","height","name","price","author","city","description","height","name","price","author","city","description","height","name","price","author","city","description","height","name","price","author","city","description","height","name","price","author","city","description","height","name","price","author","city","description","height","name","price","author","city","description","height","name","price","author","city","description","height","name","price","author","city

unique_rules: 
[]

jaccard: 0.0

AS desired: [['cosenza(1,1)', 'cosenza(1,2)', 'cosenza(1,3)', 'cosenza(1,4)', 'cosenza(2,1)', 'cosenza(2,2)', 'cosenza(2,3)', 'cosenza(2,4)', 'cosenza(3,1)', 'cosenza(3,2)', 'cosenza(3,3)', 'cosenza(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]
\AS obtained: [['cosenza(1,1)', 'cosenza(1,2)', 'cosenza(1,3)', 'cosenza(1,4)', 'cosenza(2,1)', 'cosenza(2,2)', 'cosenza(2,3)', 'cosenza(2,4)', 'cosenza(3,1)', 'cosenza(3,2)', 'cosenza(3,3)', 'cosenza(3,4)']]


419
preference

question: 
Compose an ASP script to ensure the "chicago" predicate with value "16" does not link to "quality". If this connection happens, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(16,"quality").[1@1]

parsed from model: 
:~assign(16,"quality").[1@1]

facts: 
chicago(1..20).

generated: 
Compose an ASP script to ensure the "chicago" predicate with value "16" does not link to "quality". If this connection happens, it incurs a cost of "1" at level "1".
Answer: :~assign(16,"quality").[1@1]
This script uses the "assign" predicate to check the connection between the "16" and "quality" labels. If the connection is found, it incurs a cost of "1" at level "1".
The predicate "city" includes fields "ID","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description

unique_rules: 
[':~assign(16,"quality").[1@1]']

jaccard: 1.0

AS desired: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'chicago(5)', 'chicago(6)', 'chicago(7)', 'chicago(8)', 'chicago(9)', 'chicago(10)', 'chicago(11)', 'chicago(12)', 'chicago(13)', 'chicago(14)', 'chicago(15)', 'chicago(16)', 'chicago(17)', 'chicago(18)', 'chicago(19)', 'chicago(20)']]
\AS obtained: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'chicago(5)', 'chicago(6)', 'chicago(7)', 'chicago(8)', 'chicago(9)', 'chicago(10)', 'chicago(11)', 'chicago(12)', 'chicago(13)', 'chicago(14)', 'chicago(15)', 'chicago(16)', 'chicago(17)', 'chicago(18)', 'chicago(19)', 'chicago(20)']]


420
filtering

question: 
Formulate an ASP script that extracts values related to the "darkmagenta" label within the context of the "cloud" predicate.

answer from file: 
select(X):-cloud(X,"darkmagenta").

parsed from model: 
select(X):-cloud(X,"darkmagenta").

facts: 
cloud(1..5, "darkmagenta").

generated: 
Formulate an ASP script that extracts values related to the "darkmagenta" label within the context of the "cloud" predicate.
Answer: select(X):-cloud(X,"darkmagenta").
select(X):-cloud(X,"gray").
cloud(X,"darkmagenta").
cloud(X,"gray").

unique_rules: 
['select(X):-cloud(X,"darkmagenta").', 'select(X):-cloud(X,"gray").']

jaccard: 1.0

AS desired: [['cloud(1,"darkmagenta")', 'cloud(2,"darkmagenta")', 'cloud(3,"darkmagenta")', 'cloud(4,"darkmagenta")', 'cloud(5,"darkmagenta")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['cloud(1,"darkmagenta")', 'cloud(2,"darkmagenta")', 'cloud(3,"darkmagenta")', 'cloud(4,"darkmagenta")', 'cloud(5,"darkmagenta")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


421
negative_filtering

question: 
Write an ASP program for the following problem. Select all values associated with predicate "flower" but not associated with predicate "toronto" and label "moscow".

answer from file: 
select(X):-flower(X),not toronto(X,"moscow").

parsed from model: 
select(X):-flower(X),not toronto(X,"moscow").

facts: 
flower(1..3).toronto(1,"butterfly").toronto(2,"moscow").toronto(3,"desk").

generated: 
Write an ASP program for the following problem. Select all values associated with predicate "flower" but not associated with predicate "toronto" and label "moscow".
Answer: select(X):-flower(X),not toronto(X,"moscow").
Explanation: The predicate "flower" includes values associated with the predicate "city","height","author","rome","description","moto","city","author","description","height","name","city","description","author","rome","description","height","name","city","description","author","rome","description","height","name","city","description","author","rome","description","height","name","city","description","author","rome","description","height","name","city","description","author","rome","description","height","name","city","description","author","rome","description","height","name","city","description","author","rome","description","

unique_rules: 
['select(X):-flower(X),not toronto(X,"moscow").']

jaccard: 1.0

AS desired: [['flower(1)', 'flower(2)', 'flower(3)', 'toronto(1,"butterfly")', 'toronto(2,"moscow")', 'toronto(3,"desk")', 'select(1)', 'select(3)']]
\AS obtained: [['flower(1)', 'flower(2)', 'flower(3)', 'toronto(1,"butterfly")', 'toronto(2,"moscow")', 'toronto(3,"desk")', 'select(1)', 'select(3)']]


422
numeric_filtering

question: 
Develop an ASP application to retrieve all values connected to the predicate "hair" with a value different than 50.

answer from file: 
select(X):-hair(X,C),C!=50.

parsed from model: 
select(X):-hair(X,C),C!=50.

facts: 
hair(1..3, 1..100).

generated: 
Develop an ASP application to retrieve all values connected to the predicate "hair" with a value different than 50.
Answer: select(X):-hair(X,C),C!=50.
Explanation: The predicate "hair" includes elements connected to the predicate "city" with a value different than 50.
The predicate "city" contains elements connected to the predicate "author" with a value different than 50.
The predicate "author" contains elements connected to the predicate "moto" with a value different than 50.
So, the predicate "hair" includes all values connected to the predicate "city" with a value different than 50.
The predicate "city" includes all values connected to the predicate "author" with a value different than 50.
The predicate "author"

unique_rules: 
['select(X):-hair(X,C),C!=50.']

jaccard: 1.0

AS desired: [['hair(1,1)', 'hair(1,2)', 'hair(1,3)', 'hair(1,4)', 'hair(1,5)', 'hair(1,6)', 'hair(1,7)', 'hair(1,8)', 'hair(1,9)', 'hair(1,10)', 'hair(1,11)', 'hair(1,12)', 'hair(1,13)', 'hair(1,14)', 'hair(1,15)', 'hair(1,16)', 'hair(1,17)', 'hair(1,18)', 'hair(1,19)', 'hair(1,20)', 'hair(1,21)', 'hair(1,22)', 'hair(1,23)', 'hair(1,24)', 'hair(1,25)', 'hair(1,26)', 'hair(1,27)', 'hair(1,28)', 'hair(1,29)', 'hair(1,30)', 'hair(1,31)', 'hair(1,32)', 'hair(1,33)', 'hair(1,34)', 'hair(1,35)', 'hair(1,36)', 'hair(1,37)', 'hair(1,38)', 'hair(1,39)', 'hair(1,40)', 'hair(1,41)', 'hair(1,42)', 'hair(1,43)', 'hair(1,44)', 'hair(1,45)', 'hair(1,46)', 'hair(1,47)', 'hair(1,48)', 'hair(1,49)', 'hair(1,50)', 'hair(1,51)', 'hair(1,52)', 'hair(1,53)', 'hair(1,54)', 'hair(1,55)', 'hair(1,56)', 'hair(1,57)', 'hair(1,58)', 'hair(1,59)', 'hair(1,60)', 'hair(1,61)', 'hair(1,62)', 'hair(1,63)', 'hair(1,64)', 'hair(1,65)', 'hair(1,66)', 'hair(1,67)', 'hair(1,68)', 'hair(1,69)', 'hair(1,70)', 'hair(1,71)', 'hair(1,72)', 'hair(1,73)', 'hair(1,74)', 'hair(1,75)', 'hair(1,76)', 'hair(1,77)', 'hair(1,78)', 'hair(1,79)', 'hair(1,80)', 'hair(1,81)', 'hair(1,82)', 'hair(1,83)', 'hair(1,84)', 'hair(1,85)', 'hair(1,86)', 'hair(1,87)', 'hair(1,88)', 'hair(1,89)', 'hair(1,90)', 'hair(1,91)', 'hair(1,92)', 'hair(1,93)', 'hair(1,94)', 'hair(1,95)', 'hair(1,96)', 'hair(1,97)', 'hair(1,98)', 'hair(1,99)', 'hair(1,100)', 'hair(2,1)', 'hair(2,2)', 'hair(2,3)', 'hair(2,4)', 'hair(2,5)', 'hair(2,6)', 'hair(2,7)', 'hair(2,8)', 'hair(2,9)', 'hair(2,10)', 'hair(2,11)', 'hair(2,12)', 'hair(2,13)', 'hair(2,14)', 'hair(2,15)', 'hair(2,16)', 'hair(2,17)', 'hair(2,18)', 'hair(2,19)', 'hair(2,20)', 'hair(2,21)', 'hair(2,22)', 'hair(2,23)', 'hair(2,24)', 'hair(2,25)', 'hair(2,26)', 'hair(2,27)', 'hair(2,28)', 'hair(2,29)', 'hair(2,30)', 'hair(2,31)', 'hair(2,32)', 'hair(2,33)', 'hair(2,34)', 'hair(2,35)', 'hair(2,36)', 'hair(2,37)', 'hair(2,38)', 'hair(2,39)', 'hair(2,40)', 'hair(2,41)', 'hair(2,42)', 'hair(2,43)', 'hair(2,44)', 'hair(2,45)', 'hair(2,46)', 'hair(2,47)', 'hair(2,48)', 'hair(2,49)', 'hair(2,50)', 'hair(2,51)', 'hair(2,52)', 'hair(2,53)', 'hair(2,54)', 'hair(2,55)', 'hair(2,56)', 'hair(2,57)', 'hair(2,58)', 'hair(2,59)', 'hair(2,60)', 'hair(2,61)', 'hair(2,62)', 'hair(2,63)', 'hair(2,64)', 'hair(2,65)', 'hair(2,66)', 'hair(2,67)', 'hair(2,68)', 'hair(2,69)', 'hair(2,70)', 'hair(2,71)', 'hair(2,72)', 'hair(2,73)', 'hair(2,74)', 'hair(2,75)', 'hair(2,76)', 'hair(2,77)', 'hair(2,78)', 'hair(2,79)', 'hair(2,80)', 'hair(2,81)', 'hair(2,82)', 'hair(2,83)', 'hair(2,84)', 'hair(2,85)', 'hair(2,86)', 'hair(2,87)', 'hair(2,88)', 'hair(2,89)', 'hair(2,90)', 'hair(2,91)', 'hair(2,92)', 'hair(2,93)', 'hair(2,94)', 'hair(2,95)', 'hair(2,96)', 'hair(2,97)', 'hair(2,98)', 'hair(2,99)', 'hair(2,100)', 'hair(3,1)', 'hair(3,2)', 'hair(3,3)', 'hair(3,4)', 'hair(3,5)', 'hair(3,6)', 'hair(3,7)', 'hair(3,8)', 'hair(3,9)', 'hair(3,10)', 'hair(3,11)', 'hair(3,12)', 'hair(3,13)', 'hair(3,14)', 'hair(3,15)', 'hair(3,16)', 'hair(3,17)', 'hair(3,18)', 'hair(3,19)', 'hair(3,20)', 'hair(3,21)', 'hair(3,22)', 'hair(3,23)', 'hair(3,24)', 'hair(3,25)', 'hair(3,26)', 'hair(3,27)', 'hair(3,28)', 'hair(3,29)', 'hair(3,30)', 'hair(3,31)', 'hair(3,32)', 'hair(3,33)', 'hair(3,34)', 'hair(3,35)', 'hair(3,36)', 'hair(3,37)', 'hair(3,38)', 'hair(3,39)', 'hair(3,40)', 'hair(3,41)', 'hair(3,42)', 'hair(3,43)', 'hair(3,44)', 'hair(3,45)', 'hair(3,46)', 'hair(3,47)', 'hair(3,48)', 'hair(3,49)', 'hair(3,50)', 'hair(3,51)', 'hair(3,52)', 'hair(3,53)', 'hair(3,54)', 'hair(3,55)', 'hair(3,56)', 'hair(3,57)', 'hair(3,58)', 'hair(3,59)', 'hair(3,60)', 'hair(3,61)', 'hair(3,62)', 'hair(3,63)', 'hair(3,64)', 'hair(3,65)', 'hair(3,66)', 'hair(3,67)', 'hair(3,68)', 'hair(3,69)', 'hair(3,70)', 'hair(3,71)', 'hair(3,72)', 'hair(3,73)', 'hair(3,74)', 'hair(3,75)', 'hair(3,76)', 'hair(3,77)', 'hair(3,78)', 'hair(3,79)', 'hair(3,80)', 'hair(3,81)', 'hair(3,82)', 'hair(3,83)', 'hair(3,84)', 'hair(3,85)', 'hair(3,86)', 'hair(3,87)', 'hair(3,88)', 'hair(3,89)', 'hair(3,90)', 'hair(3,91)', 'hair(3,92)', 'hair(3,93)', 'hair(3,94)', 'hair(3,95)', 'hair(3,96)', 'hair(3,97)', 'hair(3,98)', 'hair(3,99)', 'hair(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['hair(1,1)', 'hair(1,2)', 'hair(1,3)', 'hair(1,4)', 'hair(1,5)', 'hair(1,6)', 'hair(1,7)', 'hair(1,8)', 'hair(1,9)', 'hair(1,10)', 'hair(1,11)', 'hair(1,12)', 'hair(1,13)', 'hair(1,14)', 'hair(1,15)', 'hair(1,16)', 'hair(1,17)', 'hair(1,18)', 'hair(1,19)', 'hair(1,20)', 'hair(1,21)', 'hair(1,22)', 'hair(1,23)', 'hair(1,24)', 'hair(1,25)', 'hair(1,26)', 'hair(1,27)', 'hair(1,28)', 'hair(1,29)', 'hair(1,30)', 'hair(1,31)', 'hair(1,32)', 'hair(1,33)', 'hair(1,34)', 'hair(1,35)', 'hair(1,36)', 'hair(1,37)', 'hair(1,38)', 'hair(1,39)', 'hair(1,40)', 'hair(1,41)', 'hair(1,42)', 'hair(1,43)', 'hair(1,44)', 'hair(1,45)', 'hair(1,46)', 'hair(1,47)', 'hair(1,48)', 'hair(1,49)', 'hair(1,50)', 'hair(1,51)', 'hair(1,52)', 'hair(1,53)', 'hair(1,54)', 'hair(1,55)', 'hair(1,56)', 'hair(1,57)', 'hair(1,58)', 'hair(1,59)', 'hair(1,60)', 'hair(1,61)', 'hair(1,62)', 'hair(1,63)', 'hair(1,64)', 'hair(1,65)', 'hair(1,66)', 'hair(1,67)', 'hair(1,68)', 'hair(1,69)', 'hair(1,70)', 'hair(1,71)', 'hair(1,72)', 'hair(1,73)', 'hair(1,74)', 'hair(1,75)', 'hair(1,76)', 'hair(1,77)', 'hair(1,78)', 'hair(1,79)', 'hair(1,80)', 'hair(1,81)', 'hair(1,82)', 'hair(1,83)', 'hair(1,84)', 'hair(1,85)', 'hair(1,86)', 'hair(1,87)', 'hair(1,88)', 'hair(1,89)', 'hair(1,90)', 'hair(1,91)', 'hair(1,92)', 'hair(1,93)', 'hair(1,94)', 'hair(1,95)', 'hair(1,96)', 'hair(1,97)', 'hair(1,98)', 'hair(1,99)', 'hair(1,100)', 'hair(2,1)', 'hair(2,2)', 'hair(2,3)', 'hair(2,4)', 'hair(2,5)', 'hair(2,6)', 'hair(2,7)', 'hair(2,8)', 'hair(2,9)', 'hair(2,10)', 'hair(2,11)', 'hair(2,12)', 'hair(2,13)', 'hair(2,14)', 'hair(2,15)', 'hair(2,16)', 'hair(2,17)', 'hair(2,18)', 'hair(2,19)', 'hair(2,20)', 'hair(2,21)', 'hair(2,22)', 'hair(2,23)', 'hair(2,24)', 'hair(2,25)', 'hair(2,26)', 'hair(2,27)', 'hair(2,28)', 'hair(2,29)', 'hair(2,30)', 'hair(2,31)', 'hair(2,32)', 'hair(2,33)', 'hair(2,34)', 'hair(2,35)', 'hair(2,36)', 'hair(2,37)', 'hair(2,38)', 'hair(2,39)', 'hair(2,40)', 'hair(2,41)', 'hair(2,42)', 'hair(2,43)', 'hair(2,44)', 'hair(2,45)', 'hair(2,46)', 'hair(2,47)', 'hair(2,48)', 'hair(2,49)', 'hair(2,50)', 'hair(2,51)', 'hair(2,52)', 'hair(2,53)', 'hair(2,54)', 'hair(2,55)', 'hair(2,56)', 'hair(2,57)', 'hair(2,58)', 'hair(2,59)', 'hair(2,60)', 'hair(2,61)', 'hair(2,62)', 'hair(2,63)', 'hair(2,64)', 'hair(2,65)', 'hair(2,66)', 'hair(2,67)', 'hair(2,68)', 'hair(2,69)', 'hair(2,70)', 'hair(2,71)', 'hair(2,72)', 'hair(2,73)', 'hair(2,74)', 'hair(2,75)', 'hair(2,76)', 'hair(2,77)', 'hair(2,78)', 'hair(2,79)', 'hair(2,80)', 'hair(2,81)', 'hair(2,82)', 'hair(2,83)', 'hair(2,84)', 'hair(2,85)', 'hair(2,86)', 'hair(2,87)', 'hair(2,88)', 'hair(2,89)', 'hair(2,90)', 'hair(2,91)', 'hair(2,92)', 'hair(2,93)', 'hair(2,94)', 'hair(2,95)', 'hair(2,96)', 'hair(2,97)', 'hair(2,98)', 'hair(2,99)', 'hair(2,100)', 'hair(3,1)', 'hair(3,2)', 'hair(3,3)', 'hair(3,4)', 'hair(3,5)', 'hair(3,6)', 'hair(3,7)', 'hair(3,8)', 'hair(3,9)', 'hair(3,10)', 'hair(3,11)', 'hair(3,12)', 'hair(3,13)', 'hair(3,14)', 'hair(3,15)', 'hair(3,16)', 'hair(3,17)', 'hair(3,18)', 'hair(3,19)', 'hair(3,20)', 'hair(3,21)', 'hair(3,22)', 'hair(3,23)', 'hair(3,24)', 'hair(3,25)', 'hair(3,26)', 'hair(3,27)', 'hair(3,28)', 'hair(3,29)', 'hair(3,30)', 'hair(3,31)', 'hair(3,32)', 'hair(3,33)', 'hair(3,34)', 'hair(3,35)', 'hair(3,36)', 'hair(3,37)', 'hair(3,38)', 'hair(3,39)', 'hair(3,40)', 'hair(3,41)', 'hair(3,42)', 'hair(3,43)', 'hair(3,44)', 'hair(3,45)', 'hair(3,46)', 'hair(3,47)', 'hair(3,48)', 'hair(3,49)', 'hair(3,50)', 'hair(3,51)', 'hair(3,52)', 'hair(3,53)', 'hair(3,54)', 'hair(3,55)', 'hair(3,56)', 'hair(3,57)', 'hair(3,58)', 'hair(3,59)', 'hair(3,60)', 'hair(3,61)', 'hair(3,62)', 'hair(3,63)', 'hair(3,64)', 'hair(3,65)', 'hair(3,66)', 'hair(3,67)', 'hair(3,68)', 'hair(3,69)', 'hair(3,70)', 'hair(3,71)', 'hair(3,72)', 'hair(3,73)', 'hair(3,74)', 'hair(3,75)', 'hair(3,76)', 'hair(3,77)', 'hair(3,78)', 'hair(3,79)', 'hair(3,80)', 'hair(3,81)', 'hair(3,82)', 'hair(3,83)', 'hair(3,84)', 'hair(3,85)', 'hair(3,86)', 'hair(3,87)', 'hair(3,88)', 'hair(3,89)', 'hair(3,90)', 'hair(3,91)', 'hair(3,92)', 'hair(3,93)', 'hair(3,94)', 'hair(3,95)', 'hair(3,96)', 'hair(3,97)', 'hair(3,98)', 'hair(3,99)', 'hair(3,100)', 'select(1)', 'select(2)', 'select(3)']]


423
assignment

question: 
Build an ASP code snippet to link one label from "moscow","cairo","hair","roof","cosenza","surname" to elements identified by the predicate "butterfly".

answer from file: 
assign(X,"moscow")|assign(X,"cairo")|assign(X,"hair")|assign(X,"roof")|assign(X,"cosenza")|assign(X,"surname"):-butterfly(X).

parsed from model: 
assign(X,"moscow")|assign(X,"cairo")|assign(X,"hair")|assign(X,"roof")|assign(X,"cosenza")|assign(X,"surname"):-butterfly(X).

facts: 
butterfly(1..5).

generated: 
Build an ASP code snippet to link one label from "moscow","cairo","hair","roof","cosenza","surname" to elements identified by the predicate "butterfly".
Answer: assign(X,"moscow")|assign(X,"cairo")|assign(X,"hair")|assign(X,"roof")|assign(X,"cosenza")|assign(X,"surname"):-butterfly(X).
assign(X,"city"):- arrivant(X).
```
The predicate " arrivant" defines the transitive closure of the predicate "city".
The predicate "city" defines the transitive closure of the predicate "description".
The predicate "description" defines the transitive closure of the predicate "florence".
The predicate "florence" defines the transitive closure of the predicate "moto".
The predicate "moto" defines the transitive closure of the predicate "author".
The predicate

unique_rules: 
['assign(X,"moscow")|assign(X,"cairo")|assign(X,"hair")|assign(X,"roof")|assign(X,"cosenza")|assign(X,"surname"):-butterfly(X).', 'assign(X,"city"):- arrivant(X).']

jaccard: 1.0

AS desired: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)', 'assign(1,"surname")', 'assign(2,"surname")', 'assign(3,"surname")', 'assign(4,"surname")', 'assign(5,"surname")']]
\AS obtained: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)', 'assign(1,"surname")', 'assign(2,"surname")', 'assign(3,"surname")', 'assign(4,"surname")', 'assign(5,"surname")']]


424
constraint

question: 
Generate an ASP code to exclude linking the "strength" predicate with value 3 to the label "cloud".

answer from file: 
:-assign(3,cloud).

parsed from model: 
:-assign(3,cloud).

facts: 
strength(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-strength(X).

generated: 
Generate an ASP code to exclude linking the "strength" predicate with value 3 to the label "cloud".
Answer: :-assign(3,cloud).
Explanation: The predicate "height" includes fields "ID","city","author","name","price","description","author","city","name","price","description","height","author","city","name","price","description","height","author","city","name","price","description","height","author","city","name","price","description","height","author","city","name","price","description","height","author","city","name","price","description","height","author","city","name","price","description","height","author","city","name","price","description","height","author","city","name","price","description","height","author","city","name","price","description

unique_rules: 
[':-assign(3,cloud).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'strength(6)', 'strength(7)', 'strength(8)', 'strength(9)', 'strength(10)', 'strength(11)', 'strength(12)', 'strength(13)', 'strength(14)', 'strength(15)', 'strength(16)', 'strength(17)', 'strength(18)', 'strength(19)', 'strength(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'strength(6)', 'strength(7)', 'strength(8)', 'strength(9)', 'strength(10)', 'strength(11)', 'strength(12)', 'strength(13)', 'strength(14)', 'strength(15)', 'strength(16)', 'strength(17)', 'strength(18)', 'strength(19)', 'strength(20)']]


425
combination

question: 
Write an ASP program that computes the cross-product of elements in the sets defined by "lightblue" and "butterfly".

answer from file: 
combination(X,Y):-lightblue(X),butterfly(Y).

parsed from model: 


facts: 
lightblue(1..4).butterfly(1..5).

generated: 
Write an ASP program that computes the cross-product of elements in the sets defined by "lightblue" and "butterfly".
Answer: cross_product(lightblue,butterfly)
```python
set1 = set("lightblue")
set2 = set(" arrivant")
cross_product(set1,set2)
```

unique_rules: 
[]

jaccard: 0.0

AS desired: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)', 'lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'lightblue(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'lightblue(4)', 'butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)']]


426
join

question: 
Create an ASP program to define the predicate "desk_lightblue" that links each desk to the surname of lightblue, using fields "ID","weight","lightblueID" for "desk" and fields "ID","strength","surname" for "lightblue".

answer from file: 
desk_lightblue(X,Z):-desk(X,_,Y),lightblue(Y,_,Z).

parsed from model: 
desk_lightblue(X,Z):-desk(X,_,Y),lightblue(Y,_,Z).

facts: 
desk("ID","weight","lightblueID").lightblue("ID","strength","surname").

generated: 
Create an ASP program to define the predicate "desk_lightblue" that links each desk to the surname of lightblue, using fields "ID","weight","lightblueID" for "desk" and fields "ID","strength","surname" for "lightblue".
Answer: desk_lightblue(X,Z):-desk(X,_,Y),lightblue(Y,_,Z).
desk(X,_,Y):-height(X,_,Y).
lightblue(ID,strength,Z):-height(ID,strength,Z).

unique_rules: 
['desk_lightblue(X,Z):-desk(X,_,Y),lightblue(Y,_,Z).', 'desk(X,_,Y):-height(X,_,Y).', 'lightblue(ID,strength,Z):-height(ID,strength,Z).']

jaccard: 1.0

AS desired: [['desk("ID","weight","lightblueID")', 'lightblue("ID","strength","surname")']]
\AS obtained: [['desk("ID","weight","lightblueID")', 'lightblue("ID","strength","surname")']]


427
closure

question: 
Write an ASP program for the following problem. Define predicate "journey" as the transitive closure of predicate "mumbai".

answer from file: 
journey(X,Y):-mumbai(X,Y).
journey(X,Y):-mumbai(X,Z),journey(Z,Y).

parsed from model: 
journey(X,Y):-mumbai(X,Y).
journey(X,Y):-mumbai(X,Z),journey(Z,Y).

facts: 
mumbai(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "journey" as the transitive closure of predicate "mumbai".
Answer: journey(X,Y):-mumbai(X,Y).
journey(X,Y):-mumbai(X,Z),journey(Z,Y).
mumbai(X,Y):-city(X,Y).
city(X,Y):-street(X,Y).
street(X,Y):-city(X,Y).

unique_rules: 
['journey(X,Y):-mumbai(X,Y).', 'journey(X,Y):-mumbai(X,Z),journey(Z,Y).', 'mumbai(X,Y):-city(X,Y).', 'city(X,Y):-street(X,Y).', 'street(X,Y):-city(X,Y).']

jaccard: 1.0

AS desired: [['mumbai(1,1)', 'mumbai(1,2)', 'mumbai(1,3)', 'mumbai(1,4)', 'mumbai(2,1)', 'mumbai(2,2)', 'mumbai(2,3)', 'mumbai(2,4)', 'mumbai(3,1)', 'mumbai(3,2)', 'mumbai(3,3)', 'mumbai(3,4)', 'journey(1,1)', 'journey(1,2)', 'journey(1,3)', 'journey(1,4)', 'journey(2,1)', 'journey(2,2)', 'journey(2,3)', 'journey(2,4)', 'journey(3,1)', 'journey(3,2)', 'journey(3,3)', 'journey(3,4)']]
\AS obtained: [['mumbai(1,1)', 'mumbai(1,2)', 'mumbai(1,3)', 'mumbai(1,4)', 'mumbai(2,1)', 'mumbai(2,2)', 'mumbai(2,3)', 'mumbai(2,4)', 'mumbai(3,1)', 'mumbai(3,2)', 'mumbai(3,3)', 'mumbai(3,4)', 'journey(1,1)', 'journey(1,2)', 'journey(1,3)', 'journey(1,4)', 'journey(2,1)', 'journey(2,2)', 'journey(2,3)', 'journey(2,4)', 'journey(3,1)', 'journey(3,2)', 'journey(3,3)', 'journey(3,4)']]


428
preference

question: 
Create an ASP program that keeps the predicate "lightblue" with value "3" unlinked from "toronto". If linked, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(3,"toronto").[1@1]

parsed from model: 
:~assign(3,"toronto").[1@1]

facts: 
lightblue(1..20).

generated: 
Create an ASP program that keeps the predicate "lightblue" with value "3" unlinked from "toronto". If linked, it incurs a cost of "1" at level "1".
Answer: :~assign(3,"toronto").[1@1]
The predicate "lightblue" has fields "ID","city","author","name","price","description","author","city","name","price","description","age","height","city","name","price","description","author","city","name","price","description","age","height","city","name","price","description","author","city","name","price","description","age","height","city","name","price","description","author","city","name","price","description","age","height","city","name","price","description","author","city","name","price","description","age","height","city","name","price","description","author","

unique_rules: 
[':~assign(3,"toronto").[1@1]']

jaccard: 1.0

AS desired: [['lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'lightblue(4)', 'lightblue(5)', 'lightblue(6)', 'lightblue(7)', 'lightblue(8)', 'lightblue(9)', 'lightblue(10)', 'lightblue(11)', 'lightblue(12)', 'lightblue(13)', 'lightblue(14)', 'lightblue(15)', 'lightblue(16)', 'lightblue(17)', 'lightblue(18)', 'lightblue(19)', 'lightblue(20)']]
\AS obtained: [['lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'lightblue(4)', 'lightblue(5)', 'lightblue(6)', 'lightblue(7)', 'lightblue(8)', 'lightblue(9)', 'lightblue(10)', 'lightblue(11)', 'lightblue(12)', 'lightblue(13)', 'lightblue(14)', 'lightblue(15)', 'lightblue(16)', 'lightblue(17)', 'lightblue(18)', 'lightblue(19)', 'lightblue(20)']]


429
filtering

question: 
Develop an ASP script to capture all values linked to the "pink" label within the "chicago" predicate.

answer from file: 
select(X):-chicago(X,"pink").

parsed from model: 
select(X):-chicago(X,"pink").

facts: 
chicago(1..5, "pink").

generated: 
Develop an ASP script to capture all values linked to the "pink" label within the "chicago" predicate.
Answer: select(X):-chicago(X,"pink").
select(X):-chicago(X,"city").
select(X):-chicago(X,"author").
chicago(X,"pink").
chicago(X,"city").
chicago(X,"author").
```

unique_rules: 
['select(X):-chicago(X,"pink").', 'select(X):-chicago(X,"city").', 'select(X):-chicago(X,"author").']

jaccard: 1.0

AS desired: [['chicago(1,"pink")', 'chicago(2,"pink")', 'chicago(3,"pink")', 'chicago(4,"pink")', 'chicago(5,"pink")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['chicago(1,"pink")', 'chicago(2,"pink")', 'chicago(3,"pink")', 'chicago(4,"pink")', 'chicago(5,"pink")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


430
negative_filtering

question: 
Develop an ASP script to collect values tied to the predicate "black" but not linked to the predicate "moscow" and labeled "white".

answer from file: 
select(X):-black(X),not moscow(X,"white").

parsed from model: 
select(X):-black(X),not moscow(X,"white").

facts: 
black(1..3).moscow(1,"lake").moscow(2,"white").moscow(3,"butterfly").

generated: 
Develop an ASP script to collect values tied to the predicate "black" but not linked to the predicate "moscow" and labeled "white".
Answer: select(X):-black(X),not moscow(X,"white").
select(X):-black(X),not(moscow(X,"white")).

unique_rules: 
['select(X):-black(X),not moscow(X,"white").', 'select(X):-black(X),not(moscow(X,"white")).']

jaccard: 1.0

AS desired: [['black(1)', 'black(2)', 'black(3)', 'moscow(1,"lake")', 'moscow(2,"white")', 'moscow(3,"butterfly")', 'select(1)', 'select(3)']]
\AS obtained: [['black(1)', 'black(2)', 'black(3)', 'moscow(1,"lake")', 'moscow(2,"white")', 'moscow(3,"butterfly")', 'select(1)', 'select(3)']]


431
numeric_filtering

question: 
Design an ASP solution to capture all values tied to the predicate "roof" with a value different than 26.

answer from file: 
select(X):-roof(X,C),C!=26.

parsed from model: 
select(X):-roof(X,C),C!=26.

facts: 
roof(1..3, 1..100).

generated: 
Design an ASP solution to capture all values tied to the predicate "roof" with a value different than 26.
Answer: select(X):-roof(X,C),C!=26.
Explanation: The predicate "roof" includes all values tied to the predicate "city" with a value different than 26.
The predicate "city" includes all values tied to the predicate "rome" with a value different than 26.
The predicate "rome" includes all values tied to the predicate "moto" with a value different than 26.
The predicate "moto" includes all values tied to the predicate "author" with a value different than 26.
The predicate "author" includes all values tied to the predicate "city" with a value different than 26.
The predicate "city

unique_rules: 
['select(X):-roof(X,C),C!=26.']

jaccard: 1.0

AS desired: [['roof(1,1)', 'roof(1,2)', 'roof(1,3)', 'roof(1,4)', 'roof(1,5)', 'roof(1,6)', 'roof(1,7)', 'roof(1,8)', 'roof(1,9)', 'roof(1,10)', 'roof(1,11)', 'roof(1,12)', 'roof(1,13)', 'roof(1,14)', 'roof(1,15)', 'roof(1,16)', 'roof(1,17)', 'roof(1,18)', 'roof(1,19)', 'roof(1,20)', 'roof(1,21)', 'roof(1,22)', 'roof(1,23)', 'roof(1,24)', 'roof(1,25)', 'roof(1,26)', 'roof(1,27)', 'roof(1,28)', 'roof(1,29)', 'roof(1,30)', 'roof(1,31)', 'roof(1,32)', 'roof(1,33)', 'roof(1,34)', 'roof(1,35)', 'roof(1,36)', 'roof(1,37)', 'roof(1,38)', 'roof(1,39)', 'roof(1,40)', 'roof(1,41)', 'roof(1,42)', 'roof(1,43)', 'roof(1,44)', 'roof(1,45)', 'roof(1,46)', 'roof(1,47)', 'roof(1,48)', 'roof(1,49)', 'roof(1,50)', 'roof(1,51)', 'roof(1,52)', 'roof(1,53)', 'roof(1,54)', 'roof(1,55)', 'roof(1,56)', 'roof(1,57)', 'roof(1,58)', 'roof(1,59)', 'roof(1,60)', 'roof(1,61)', 'roof(1,62)', 'roof(1,63)', 'roof(1,64)', 'roof(1,65)', 'roof(1,66)', 'roof(1,67)', 'roof(1,68)', 'roof(1,69)', 'roof(1,70)', 'roof(1,71)', 'roof(1,72)', 'roof(1,73)', 'roof(1,74)', 'roof(1,75)', 'roof(1,76)', 'roof(1,77)', 'roof(1,78)', 'roof(1,79)', 'roof(1,80)', 'roof(1,81)', 'roof(1,82)', 'roof(1,83)', 'roof(1,84)', 'roof(1,85)', 'roof(1,86)', 'roof(1,87)', 'roof(1,88)', 'roof(1,89)', 'roof(1,90)', 'roof(1,91)', 'roof(1,92)', 'roof(1,93)', 'roof(1,94)', 'roof(1,95)', 'roof(1,96)', 'roof(1,97)', 'roof(1,98)', 'roof(1,99)', 'roof(1,100)', 'roof(2,1)', 'roof(2,2)', 'roof(2,3)', 'roof(2,4)', 'roof(2,5)', 'roof(2,6)', 'roof(2,7)', 'roof(2,8)', 'roof(2,9)', 'roof(2,10)', 'roof(2,11)', 'roof(2,12)', 'roof(2,13)', 'roof(2,14)', 'roof(2,15)', 'roof(2,16)', 'roof(2,17)', 'roof(2,18)', 'roof(2,19)', 'roof(2,20)', 'roof(2,21)', 'roof(2,22)', 'roof(2,23)', 'roof(2,24)', 'roof(2,25)', 'roof(2,26)', 'roof(2,27)', 'roof(2,28)', 'roof(2,29)', 'roof(2,30)', 'roof(2,31)', 'roof(2,32)', 'roof(2,33)', 'roof(2,34)', 'roof(2,35)', 'roof(2,36)', 'roof(2,37)', 'roof(2,38)', 'roof(2,39)', 'roof(2,40)', 'roof(2,41)', 'roof(2,42)', 'roof(2,43)', 'roof(2,44)', 'roof(2,45)', 'roof(2,46)', 'roof(2,47)', 'roof(2,48)', 'roof(2,49)', 'roof(2,50)', 'roof(2,51)', 'roof(2,52)', 'roof(2,53)', 'roof(2,54)', 'roof(2,55)', 'roof(2,56)', 'roof(2,57)', 'roof(2,58)', 'roof(2,59)', 'roof(2,60)', 'roof(2,61)', 'roof(2,62)', 'roof(2,63)', 'roof(2,64)', 'roof(2,65)', 'roof(2,66)', 'roof(2,67)', 'roof(2,68)', 'roof(2,69)', 'roof(2,70)', 'roof(2,71)', 'roof(2,72)', 'roof(2,73)', 'roof(2,74)', 'roof(2,75)', 'roof(2,76)', 'roof(2,77)', 'roof(2,78)', 'roof(2,79)', 'roof(2,80)', 'roof(2,81)', 'roof(2,82)', 'roof(2,83)', 'roof(2,84)', 'roof(2,85)', 'roof(2,86)', 'roof(2,87)', 'roof(2,88)', 'roof(2,89)', 'roof(2,90)', 'roof(2,91)', 'roof(2,92)', 'roof(2,93)', 'roof(2,94)', 'roof(2,95)', 'roof(2,96)', 'roof(2,97)', 'roof(2,98)', 'roof(2,99)', 'roof(2,100)', 'roof(3,1)', 'roof(3,2)', 'roof(3,3)', 'roof(3,4)', 'roof(3,5)', 'roof(3,6)', 'roof(3,7)', 'roof(3,8)', 'roof(3,9)', 'roof(3,10)', 'roof(3,11)', 'roof(3,12)', 'roof(3,13)', 'roof(3,14)', 'roof(3,15)', 'roof(3,16)', 'roof(3,17)', 'roof(3,18)', 'roof(3,19)', 'roof(3,20)', 'roof(3,21)', 'roof(3,22)', 'roof(3,23)', 'roof(3,24)', 'roof(3,25)', 'roof(3,26)', 'roof(3,27)', 'roof(3,28)', 'roof(3,29)', 'roof(3,30)', 'roof(3,31)', 'roof(3,32)', 'roof(3,33)', 'roof(3,34)', 'roof(3,35)', 'roof(3,36)', 'roof(3,37)', 'roof(3,38)', 'roof(3,39)', 'roof(3,40)', 'roof(3,41)', 'roof(3,42)', 'roof(3,43)', 'roof(3,44)', 'roof(3,45)', 'roof(3,46)', 'roof(3,47)', 'roof(3,48)', 'roof(3,49)', 'roof(3,50)', 'roof(3,51)', 'roof(3,52)', 'roof(3,53)', 'roof(3,54)', 'roof(3,55)', 'roof(3,56)', 'roof(3,57)', 'roof(3,58)', 'roof(3,59)', 'roof(3,60)', 'roof(3,61)', 'roof(3,62)', 'roof(3,63)', 'roof(3,64)', 'roof(3,65)', 'roof(3,66)', 'roof(3,67)', 'roof(3,68)', 'roof(3,69)', 'roof(3,70)', 'roof(3,71)', 'roof(3,72)', 'roof(3,73)', 'roof(3,74)', 'roof(3,75)', 'roof(3,76)', 'roof(3,77)', 'roof(3,78)', 'roof(3,79)', 'roof(3,80)', 'roof(3,81)', 'roof(3,82)', 'roof(3,83)', 'roof(3,84)', 'roof(3,85)', 'roof(3,86)', 'roof(3,87)', 'roof(3,88)', 'roof(3,89)', 'roof(3,90)', 'roof(3,91)', 'roof(3,92)', 'roof(3,93)', 'roof(3,94)', 'roof(3,95)', 'roof(3,96)', 'roof(3,97)', 'roof(3,98)', 'roof(3,99)', 'roof(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['roof(1,1)', 'roof(1,2)', 'roof(1,3)', 'roof(1,4)', 'roof(1,5)', 'roof(1,6)', 'roof(1,7)', 'roof(1,8)', 'roof(1,9)', 'roof(1,10)', 'roof(1,11)', 'roof(1,12)', 'roof(1,13)', 'roof(1,14)', 'roof(1,15)', 'roof(1,16)', 'roof(1,17)', 'roof(1,18)', 'roof(1,19)', 'roof(1,20)', 'roof(1,21)', 'roof(1,22)', 'roof(1,23)', 'roof(1,24)', 'roof(1,25)', 'roof(1,26)', 'roof(1,27)', 'roof(1,28)', 'roof(1,29)', 'roof(1,30)', 'roof(1,31)', 'roof(1,32)', 'roof(1,33)', 'roof(1,34)', 'roof(1,35)', 'roof(1,36)', 'roof(1,37)', 'roof(1,38)', 'roof(1,39)', 'roof(1,40)', 'roof(1,41)', 'roof(1,42)', 'roof(1,43)', 'roof(1,44)', 'roof(1,45)', 'roof(1,46)', 'roof(1,47)', 'roof(1,48)', 'roof(1,49)', 'roof(1,50)', 'roof(1,51)', 'roof(1,52)', 'roof(1,53)', 'roof(1,54)', 'roof(1,55)', 'roof(1,56)', 'roof(1,57)', 'roof(1,58)', 'roof(1,59)', 'roof(1,60)', 'roof(1,61)', 'roof(1,62)', 'roof(1,63)', 'roof(1,64)', 'roof(1,65)', 'roof(1,66)', 'roof(1,67)', 'roof(1,68)', 'roof(1,69)', 'roof(1,70)', 'roof(1,71)', 'roof(1,72)', 'roof(1,73)', 'roof(1,74)', 'roof(1,75)', 'roof(1,76)', 'roof(1,77)', 'roof(1,78)', 'roof(1,79)', 'roof(1,80)', 'roof(1,81)', 'roof(1,82)', 'roof(1,83)', 'roof(1,84)', 'roof(1,85)', 'roof(1,86)', 'roof(1,87)', 'roof(1,88)', 'roof(1,89)', 'roof(1,90)', 'roof(1,91)', 'roof(1,92)', 'roof(1,93)', 'roof(1,94)', 'roof(1,95)', 'roof(1,96)', 'roof(1,97)', 'roof(1,98)', 'roof(1,99)', 'roof(1,100)', 'roof(2,1)', 'roof(2,2)', 'roof(2,3)', 'roof(2,4)', 'roof(2,5)', 'roof(2,6)', 'roof(2,7)', 'roof(2,8)', 'roof(2,9)', 'roof(2,10)', 'roof(2,11)', 'roof(2,12)', 'roof(2,13)', 'roof(2,14)', 'roof(2,15)', 'roof(2,16)', 'roof(2,17)', 'roof(2,18)', 'roof(2,19)', 'roof(2,20)', 'roof(2,21)', 'roof(2,22)', 'roof(2,23)', 'roof(2,24)', 'roof(2,25)', 'roof(2,26)', 'roof(2,27)', 'roof(2,28)', 'roof(2,29)', 'roof(2,30)', 'roof(2,31)', 'roof(2,32)', 'roof(2,33)', 'roof(2,34)', 'roof(2,35)', 'roof(2,36)', 'roof(2,37)', 'roof(2,38)', 'roof(2,39)', 'roof(2,40)', 'roof(2,41)', 'roof(2,42)', 'roof(2,43)', 'roof(2,44)', 'roof(2,45)', 'roof(2,46)', 'roof(2,47)', 'roof(2,48)', 'roof(2,49)', 'roof(2,50)', 'roof(2,51)', 'roof(2,52)', 'roof(2,53)', 'roof(2,54)', 'roof(2,55)', 'roof(2,56)', 'roof(2,57)', 'roof(2,58)', 'roof(2,59)', 'roof(2,60)', 'roof(2,61)', 'roof(2,62)', 'roof(2,63)', 'roof(2,64)', 'roof(2,65)', 'roof(2,66)', 'roof(2,67)', 'roof(2,68)', 'roof(2,69)', 'roof(2,70)', 'roof(2,71)', 'roof(2,72)', 'roof(2,73)', 'roof(2,74)', 'roof(2,75)', 'roof(2,76)', 'roof(2,77)', 'roof(2,78)', 'roof(2,79)', 'roof(2,80)', 'roof(2,81)', 'roof(2,82)', 'roof(2,83)', 'roof(2,84)', 'roof(2,85)', 'roof(2,86)', 'roof(2,87)', 'roof(2,88)', 'roof(2,89)', 'roof(2,90)', 'roof(2,91)', 'roof(2,92)', 'roof(2,93)', 'roof(2,94)', 'roof(2,95)', 'roof(2,96)', 'roof(2,97)', 'roof(2,98)', 'roof(2,99)', 'roof(2,100)', 'roof(3,1)', 'roof(3,2)', 'roof(3,3)', 'roof(3,4)', 'roof(3,5)', 'roof(3,6)', 'roof(3,7)', 'roof(3,8)', 'roof(3,9)', 'roof(3,10)', 'roof(3,11)', 'roof(3,12)', 'roof(3,13)', 'roof(3,14)', 'roof(3,15)', 'roof(3,16)', 'roof(3,17)', 'roof(3,18)', 'roof(3,19)', 'roof(3,20)', 'roof(3,21)', 'roof(3,22)', 'roof(3,23)', 'roof(3,24)', 'roof(3,25)', 'roof(3,26)', 'roof(3,27)', 'roof(3,28)', 'roof(3,29)', 'roof(3,30)', 'roof(3,31)', 'roof(3,32)', 'roof(3,33)', 'roof(3,34)', 'roof(3,35)', 'roof(3,36)', 'roof(3,37)', 'roof(3,38)', 'roof(3,39)', 'roof(3,40)', 'roof(3,41)', 'roof(3,42)', 'roof(3,43)', 'roof(3,44)', 'roof(3,45)', 'roof(3,46)', 'roof(3,47)', 'roof(3,48)', 'roof(3,49)', 'roof(3,50)', 'roof(3,51)', 'roof(3,52)', 'roof(3,53)', 'roof(3,54)', 'roof(3,55)', 'roof(3,56)', 'roof(3,57)', 'roof(3,58)', 'roof(3,59)', 'roof(3,60)', 'roof(3,61)', 'roof(3,62)', 'roof(3,63)', 'roof(3,64)', 'roof(3,65)', 'roof(3,66)', 'roof(3,67)', 'roof(3,68)', 'roof(3,69)', 'roof(3,70)', 'roof(3,71)', 'roof(3,72)', 'roof(3,73)', 'roof(3,74)', 'roof(3,75)', 'roof(3,76)', 'roof(3,77)', 'roof(3,78)', 'roof(3,79)', 'roof(3,80)', 'roof(3,81)', 'roof(3,82)', 'roof(3,83)', 'roof(3,84)', 'roof(3,85)', 'roof(3,86)', 'roof(3,87)', 'roof(3,88)', 'roof(3,89)', 'roof(3,90)', 'roof(3,91)', 'roof(3,92)', 'roof(3,93)', 'roof(3,94)', 'roof(3,95)', 'roof(3,96)', 'roof(3,97)', 'roof(3,98)', 'roof(3,99)', 'roof(3,100)', 'select(1)', 'select(2)', 'select(3)']]


432
assignment

question: 
Write an ASP code snippet to connect a single label from "roof","chair","cloud","cosenza" to elements specified by the predicate "singapore".

answer from file: 
assign(X,"roof")|assign(X,"chair")|assign(X,"cloud")|assign(X,"cosenza"):-singapore(X).

parsed from model: 
assign(X,"roof")|assign(X,"chair")|assign(X,"cloud")|assign(X,"cosenza"):-singapore(X).

facts: 
singapore(1..5).

generated: 
Write an ASP code snippet to connect a single label from "roof","chair","cloud","cosenza" to elements specified by the predicate "singapore".
Answer: assign(X,"roof")|assign(X,"chair")|assign(X,"cloud")|assign(X,"cosenza"):-singapore(X).
assign(X,"city"):-singapore(X).
```

unique_rules: 
['assign(X,"roof")|assign(X,"chair")|assign(X,"cloud")|assign(X,"cosenza"):-singapore(X).', 'assign(X,"city"):-singapore(X).']

jaccard: 1.0

AS desired: [['singapore(1)', 'singapore(2)', 'singapore(3)', 'singapore(4)', 'singapore(5)', 'assign(1,"cloud")', 'assign(2,"cosenza")', 'assign(3,"cloud")', 'assign(4,"cosenza")', 'assign(5,"cosenza")']]
\AS obtained: [['singapore(1)', 'singapore(2)', 'singapore(3)', 'singapore(4)', 'singapore(5)', 'assign(1,"cloud")', 'assign(2,"cosenza")', 'assign(3,"cloud")', 'assign(4,"cosenza")', 'assign(5,"cosenza")']]


433
constraint

question: 
Compose an ASP solution to ensure the "singapore" predicate with value 12 is not associated with the label "wall".

answer from file: 
:-assign(12,wall).

parsed from model: 
:-assign(12,wall).

facts: 
singapore(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-singapore(X).

generated: 
Compose an ASP solution to ensure the "singapore" predicate with value 12 is not associated with the label "wall".
Answer: :-assign(12,wall).
Explanation: The predicate "shangai" includes values associated with the label "street","height","moto","author","description","rome","city","shangai","author","description","city","moto","author","height","description","rome","city","shangai","author","description","city","moto","author","height","description","rome","city","shangai","author","description","city","moto","author","height","description","rome","city","shangai","author","description","city","moto","author","height","description","rome","city","shangai","author","description","city","moto","author","height","description","rome","city","shangai","author

unique_rules: 
[':-assign(12,wall).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'singapore(1)', 'singapore(2)', 'singapore(3)', 'singapore(4)', 'singapore(5)', 'singapore(6)', 'singapore(7)', 'singapore(8)', 'singapore(9)', 'singapore(10)', 'singapore(11)', 'singapore(12)', 'singapore(13)', 'singapore(14)', 'singapore(15)', 'singapore(16)', 'singapore(17)', 'singapore(18)', 'singapore(19)', 'singapore(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'singapore(1)', 'singapore(2)', 'singapore(3)', 'singapore(4)', 'singapore(5)', 'singapore(6)', 'singapore(7)', 'singapore(8)', 'singapore(9)', 'singapore(10)', 'singapore(11)', 'singapore(12)', 'singapore(13)', 'singapore(14)', 'singapore(15)', 'singapore(16)', 'singapore(17)', 'singapore(18)', 'singapore(19)', 'singapore(20)']]


434
combination

question: 
Develop an ASP code snippet to produce all valid combinations of elements from the "roof" and "butterfly" sets.

answer from file: 
combination(X,Y):-roof(X),butterfly(Y).

parsed from model: 
combination(X,Y):-roof(X),butterfly(Y).

facts: 
roof(1..4).butterfly(1..5).

generated: 
Develop an ASP code snippet to produce all valid combinations of elements from the "roof" and "butterfly" sets.
Answer: combination(X,Y):-roof(X),butterfly(Y).
combination(X,Y):-roof(X),Y.
combination(X,Y):-Y,roof(X).
combination(X,Y):-Y,Y.

unique_rules: 
['combination(X,Y):-roof(X),butterfly(Y).', 'combination(X,Y):-roof(X),Y.', 'combination(X,Y):-Y,roof(X).', 'combination(X,Y):-Y,Y.']

jaccard: 1.0

AS desired: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)', 'roof(1)', 'roof(2)', 'roof(3)', 'roof(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)', 'roof(1)', 'roof(2)', 'roof(3)', 'roof(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


435
join

question: 
Formulate an ASP program that defines the predicate "chair_black" to associate each chair with the weight of black, using the fields "ID","surname","hair","quality","blackID" of "chair" and "ID","weight" of "black".

answer from file: 
chair_black(X,Z):-chair(X,_,_,_,Y),black(Y,Z).

parsed from model: 
chair_black(X,Z):-chair(X,_,_,_,Y),black(Y,Z).

facts: 
chair("ID","surname","hair","quality","blackID").black("ID","weight").

generated: 
Formulate an ASP program that defines the predicate "chair_black" to associate each chair with the weight of black, using the fields "ID","surname","hair","quality","blackID" of "chair" and "ID","weight" of "black".
Answer: chair_black(X,Z):-chair(X,_,_,_,Y),black(Y,Z).
chair_black(X,Z):-chair(X,_,_,_,Y),not black(Y,Z).

unique_rules: 
['chair_black(X,Z):-chair(X,_,_,_,Y),black(Y,Z).', 'chair_black(X,Z):-chair(X,_,_,_,Y),not black(Y,Z).']

jaccard: 1.0

AS desired: [['black("ID","weight")', 'chair("ID","surname","hair","quality","blackID")']]
\AS obtained: [['black("ID","weight")', 'chair("ID","surname","hair","quality","blackID")']]


436
closure

question: 
Develop an ASP script to link the predicate "butterfly" to its transitive closure, resulting in the predicate "family".

answer from file: 
family(X,Y):-butterfly(X,Y).
family(X,Y):-butterfly(X,Z),family(Z,Y).

parsed from model: 
family(X,Y):-butterfly(X,Y).
family(X,Y):- arrivant(X,Y).

facts: 
butterfly(1..3, 1..4).

generated: 
Develop an ASP script to link the predicate "butterfly" to its transitive closure, resulting in the predicate "family".
Answer: family(X,Y):-butterfly(X,Y).
family(X,Y):- arrivant(X,Y).
family(X,Y):-bike(X,Y).
family(X,Y):-moto(X,Y).
family(X,Y):-author(X,Y).
family(X,Y):-city(X,Y).
family(X,Y):-moto(X,Y).
family(X,Y):-author(X,Y).
family(X,Y):-city(X,Y).
family(X,Y):-bike(X,Y).
family(X,Y):-author(X,Y).
family(X,

unique_rules: 
['family(X,Y):-butterfly(X,Y).', 'family(X,Y):- arrivant(X,Y).', 'family(X,Y):-bike(X,Y).', 'family(X,Y):-moto(X,Y).', 'family(X,Y):-author(X,Y).', 'family(X,Y):-city(X,Y).']

jaccard: 1.0

AS desired: [['butterfly(1,1)', 'butterfly(1,2)', 'butterfly(1,3)', 'butterfly(1,4)', 'butterfly(2,1)', 'butterfly(2,2)', 'butterfly(2,3)', 'butterfly(2,4)', 'butterfly(3,1)', 'butterfly(3,2)', 'butterfly(3,3)', 'butterfly(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]
\AS obtained: [['butterfly(1,1)', 'butterfly(1,2)', 'butterfly(1,3)', 'butterfly(1,4)', 'butterfly(2,1)', 'butterfly(2,2)', 'butterfly(2,3)', 'butterfly(2,4)', 'butterfly(3,1)', 'butterfly(3,2)', 'butterfly(3,3)', 'butterfly(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]


437
preference

question: 
Generate an ASP program to disallow the association of the predicate "chicago" with value "13" with "pink". If associated, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(13,"pink").[1@1]

parsed from model: 
:~assign(13,"pink").[1@1]

facts: 
chicago(1..20).

generated: 
Generate an ASP program to disallow the association of the predicate "chicago" with value "13" with "pink". If associated, it incurs a cost of "1" at level "1".
Answer: :~assign(13,"pink").[1@1]
This program uses the predicate "city" with fields "ID","height","author","name","price","city","description","author","name","price","city","description","height","author","name","price","city","description","author","name","price","city","description","height","author","name","price","city","description","author","name","price","city","description","height","author","name","price","city","description","author","name","price","city","description","height","author","name","price","city","description","author","name","price","city","description","height","author","name","price","city

unique_rules: 
[':~assign(13,"pink").[1@1]']

jaccard: 1.0

AS desired: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'chicago(5)', 'chicago(6)', 'chicago(7)', 'chicago(8)', 'chicago(9)', 'chicago(10)', 'chicago(11)', 'chicago(12)', 'chicago(13)', 'chicago(14)', 'chicago(15)', 'chicago(16)', 'chicago(17)', 'chicago(18)', 'chicago(19)', 'chicago(20)']]
\AS obtained: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'chicago(5)', 'chicago(6)', 'chicago(7)', 'chicago(8)', 'chicago(9)', 'chicago(10)', 'chicago(11)', 'chicago(12)', 'chicago(13)', 'chicago(14)', 'chicago(15)', 'chicago(16)', 'chicago(17)', 'chicago(18)', 'chicago(19)', 'chicago(20)']]


438
filtering

question: 
Generate an ASP code snippet to capture values related to the "surname" label in the "quality" predicate.

answer from file: 
select(X):-quality(X,"surname").

parsed from model: 
select(X):-quality(X,"description").

facts: 
quality(1..5, "surname").

generated: 
Generate an ASP code snippet to capture values related to the "surname" label in the "quality" predicate.
Answer: select(X):-quality(X,"description").
select(X):-quality(X,"author").
select(X):-quality(X,"description","author").

unique_rules: 
['select(X):-quality(X,"description").', 'select(X):-quality(X,"author").', 'select(X):-quality(X,"description","author").']

jaccard: 0.0

AS desired: [['quality(1,"surname")', 'quality(2,"surname")', 'quality(3,"surname")', 'quality(4,"surname")', 'quality(5,"surname")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['quality(1,"surname")', 'quality(2,"surname")', 'quality(3,"surname")', 'quality(4,"surname")', 'quality(5,"surname")']]


439
negative_filtering

question: 
Write an ASP script to select all values tied to the predicate "chicago" but not to the predicate "toronto" and labeled as "chair".

answer from file: 
select(X):-chicago(X),not toronto(X,"chair").

parsed from model: 
select(X):-chicago(X),not toronto(X,"chair").

facts: 
chicago(1..3).toronto(1,"surname").toronto(2,"lightblue").toronto(3,"laptop").

generated: 
Write an ASP script to select all values tied to the predicate "chicago" but not to the predicate "toronto" and labeled as "chair".
Answer: select(X):-chicago(X),not toronto(X,"chair").
```
select(X):-chicago(X),not toronto(X,"chair").
```

unique_rules: 
['select(X):-chicago(X),not toronto(X,"chair").']

jaccard: 1.0

AS desired: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'toronto(1,"surname")', 'toronto(2,"lightblue")', 'toronto(3,"laptop")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'toronto(1,"surname")', 'toronto(2,"lightblue")', 'toronto(3,"laptop")', 'select(1)', 'select(2)', 'select(3)']]


440
numeric_filtering

question: 
Design an ASP solution to capture all values tied to the predicate "owner" with a value different than 85.

answer from file: 
select(X):-owner(X,C),C!=85.

parsed from model: 
select(X):-owner(X,C),C!=85.

facts: 
owner(1..3, 1..100).

generated: 
Design an ASP solution to capture all values tied to the predicate "owner" with a value different than 85.
Answer: select(X):-owner(X,C),C!=85.
Explanation: The predicate "owner" includes all values tied to the predicate "city" with a value different than 85.
The predicate "city" includes all values tied to the predicate "author" with a value different than 85.
The predicate "author" includes all values tied to the predicate "moto" with a value different than 85.
So, the predicate "owner" includes all values tied to the predicate "city" with a value different than 85, and the predicate "city" includes all values tied to the predicate "author" with a value different than 85.
The predicate

unique_rules: 
['select(X):-owner(X,C),C!=85.']

jaccard: 1.0

AS desired: [['owner(1,1)', 'owner(1,2)', 'owner(1,3)', 'owner(1,4)', 'owner(1,5)', 'owner(1,6)', 'owner(1,7)', 'owner(1,8)', 'owner(1,9)', 'owner(1,10)', 'owner(1,11)', 'owner(1,12)', 'owner(1,13)', 'owner(1,14)', 'owner(1,15)', 'owner(1,16)', 'owner(1,17)', 'owner(1,18)', 'owner(1,19)', 'owner(1,20)', 'owner(1,21)', 'owner(1,22)', 'owner(1,23)', 'owner(1,24)', 'owner(1,25)', 'owner(1,26)', 'owner(1,27)', 'owner(1,28)', 'owner(1,29)', 'owner(1,30)', 'owner(1,31)', 'owner(1,32)', 'owner(1,33)', 'owner(1,34)', 'owner(1,35)', 'owner(1,36)', 'owner(1,37)', 'owner(1,38)', 'owner(1,39)', 'owner(1,40)', 'owner(1,41)', 'owner(1,42)', 'owner(1,43)', 'owner(1,44)', 'owner(1,45)', 'owner(1,46)', 'owner(1,47)', 'owner(1,48)', 'owner(1,49)', 'owner(1,50)', 'owner(1,51)', 'owner(1,52)', 'owner(1,53)', 'owner(1,54)', 'owner(1,55)', 'owner(1,56)', 'owner(1,57)', 'owner(1,58)', 'owner(1,59)', 'owner(1,60)', 'owner(1,61)', 'owner(1,62)', 'owner(1,63)', 'owner(1,64)', 'owner(1,65)', 'owner(1,66)', 'owner(1,67)', 'owner(1,68)', 'owner(1,69)', 'owner(1,70)', 'owner(1,71)', 'owner(1,72)', 'owner(1,73)', 'owner(1,74)', 'owner(1,75)', 'owner(1,76)', 'owner(1,77)', 'owner(1,78)', 'owner(1,79)', 'owner(1,80)', 'owner(1,81)', 'owner(1,82)', 'owner(1,83)', 'owner(1,84)', 'owner(1,85)', 'owner(1,86)', 'owner(1,87)', 'owner(1,88)', 'owner(1,89)', 'owner(1,90)', 'owner(1,91)', 'owner(1,92)', 'owner(1,93)', 'owner(1,94)', 'owner(1,95)', 'owner(1,96)', 'owner(1,97)', 'owner(1,98)', 'owner(1,99)', 'owner(1,100)', 'owner(2,1)', 'owner(2,2)', 'owner(2,3)', 'owner(2,4)', 'owner(2,5)', 'owner(2,6)', 'owner(2,7)', 'owner(2,8)', 'owner(2,9)', 'owner(2,10)', 'owner(2,11)', 'owner(2,12)', 'owner(2,13)', 'owner(2,14)', 'owner(2,15)', 'owner(2,16)', 'owner(2,17)', 'owner(2,18)', 'owner(2,19)', 'owner(2,20)', 'owner(2,21)', 'owner(2,22)', 'owner(2,23)', 'owner(2,24)', 'owner(2,25)', 'owner(2,26)', 'owner(2,27)', 'owner(2,28)', 'owner(2,29)', 'owner(2,30)', 'owner(2,31)', 'owner(2,32)', 'owner(2,33)', 'owner(2,34)', 'owner(2,35)', 'owner(2,36)', 'owner(2,37)', 'owner(2,38)', 'owner(2,39)', 'owner(2,40)', 'owner(2,41)', 'owner(2,42)', 'owner(2,43)', 'owner(2,44)', 'owner(2,45)', 'owner(2,46)', 'owner(2,47)', 'owner(2,48)', 'owner(2,49)', 'owner(2,50)', 'owner(2,51)', 'owner(2,52)', 'owner(2,53)', 'owner(2,54)', 'owner(2,55)', 'owner(2,56)', 'owner(2,57)', 'owner(2,58)', 'owner(2,59)', 'owner(2,60)', 'owner(2,61)', 'owner(2,62)', 'owner(2,63)', 'owner(2,64)', 'owner(2,65)', 'owner(2,66)', 'owner(2,67)', 'owner(2,68)', 'owner(2,69)', 'owner(2,70)', 'owner(2,71)', 'owner(2,72)', 'owner(2,73)', 'owner(2,74)', 'owner(2,75)', 'owner(2,76)', 'owner(2,77)', 'owner(2,78)', 'owner(2,79)', 'owner(2,80)', 'owner(2,81)', 'owner(2,82)', 'owner(2,83)', 'owner(2,84)', 'owner(2,85)', 'owner(2,86)', 'owner(2,87)', 'owner(2,88)', 'owner(2,89)', 'owner(2,90)', 'owner(2,91)', 'owner(2,92)', 'owner(2,93)', 'owner(2,94)', 'owner(2,95)', 'owner(2,96)', 'owner(2,97)', 'owner(2,98)', 'owner(2,99)', 'owner(2,100)', 'owner(3,1)', 'owner(3,2)', 'owner(3,3)', 'owner(3,4)', 'owner(3,5)', 'owner(3,6)', 'owner(3,7)', 'owner(3,8)', 'owner(3,9)', 'owner(3,10)', 'owner(3,11)', 'owner(3,12)', 'owner(3,13)', 'owner(3,14)', 'owner(3,15)', 'owner(3,16)', 'owner(3,17)', 'owner(3,18)', 'owner(3,19)', 'owner(3,20)', 'owner(3,21)', 'owner(3,22)', 'owner(3,23)', 'owner(3,24)', 'owner(3,25)', 'owner(3,26)', 'owner(3,27)', 'owner(3,28)', 'owner(3,29)', 'owner(3,30)', 'owner(3,31)', 'owner(3,32)', 'owner(3,33)', 'owner(3,34)', 'owner(3,35)', 'owner(3,36)', 'owner(3,37)', 'owner(3,38)', 'owner(3,39)', 'owner(3,40)', 'owner(3,41)', 'owner(3,42)', 'owner(3,43)', 'owner(3,44)', 'owner(3,45)', 'owner(3,46)', 'owner(3,47)', 'owner(3,48)', 'owner(3,49)', 'owner(3,50)', 'owner(3,51)', 'owner(3,52)', 'owner(3,53)', 'owner(3,54)', 'owner(3,55)', 'owner(3,56)', 'owner(3,57)', 'owner(3,58)', 'owner(3,59)', 'owner(3,60)', 'owner(3,61)', 'owner(3,62)', 'owner(3,63)', 'owner(3,64)', 'owner(3,65)', 'owner(3,66)', 'owner(3,67)', 'owner(3,68)', 'owner(3,69)', 'owner(3,70)', 'owner(3,71)', 'owner(3,72)', 'owner(3,73)', 'owner(3,74)', 'owner(3,75)', 'owner(3,76)', 'owner(3,77)', 'owner(3,78)', 'owner(3,79)', 'owner(3,80)', 'owner(3,81)', 'owner(3,82)', 'owner(3,83)', 'owner(3,84)', 'owner(3,85)', 'owner(3,86)', 'owner(3,87)', 'owner(3,88)', 'owner(3,89)', 'owner(3,90)', 'owner(3,91)', 'owner(3,92)', 'owner(3,93)', 'owner(3,94)', 'owner(3,95)', 'owner(3,96)', 'owner(3,97)', 'owner(3,98)', 'owner(3,99)', 'owner(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['owner(1,1)', 'owner(1,2)', 'owner(1,3)', 'owner(1,4)', 'owner(1,5)', 'owner(1,6)', 'owner(1,7)', 'owner(1,8)', 'owner(1,9)', 'owner(1,10)', 'owner(1,11)', 'owner(1,12)', 'owner(1,13)', 'owner(1,14)', 'owner(1,15)', 'owner(1,16)', 'owner(1,17)', 'owner(1,18)', 'owner(1,19)', 'owner(1,20)', 'owner(1,21)', 'owner(1,22)', 'owner(1,23)', 'owner(1,24)', 'owner(1,25)', 'owner(1,26)', 'owner(1,27)', 'owner(1,28)', 'owner(1,29)', 'owner(1,30)', 'owner(1,31)', 'owner(1,32)', 'owner(1,33)', 'owner(1,34)', 'owner(1,35)', 'owner(1,36)', 'owner(1,37)', 'owner(1,38)', 'owner(1,39)', 'owner(1,40)', 'owner(1,41)', 'owner(1,42)', 'owner(1,43)', 'owner(1,44)', 'owner(1,45)', 'owner(1,46)', 'owner(1,47)', 'owner(1,48)', 'owner(1,49)', 'owner(1,50)', 'owner(1,51)', 'owner(1,52)', 'owner(1,53)', 'owner(1,54)', 'owner(1,55)', 'owner(1,56)', 'owner(1,57)', 'owner(1,58)', 'owner(1,59)', 'owner(1,60)', 'owner(1,61)', 'owner(1,62)', 'owner(1,63)', 'owner(1,64)', 'owner(1,65)', 'owner(1,66)', 'owner(1,67)', 'owner(1,68)', 'owner(1,69)', 'owner(1,70)', 'owner(1,71)', 'owner(1,72)', 'owner(1,73)', 'owner(1,74)', 'owner(1,75)', 'owner(1,76)', 'owner(1,77)', 'owner(1,78)', 'owner(1,79)', 'owner(1,80)', 'owner(1,81)', 'owner(1,82)', 'owner(1,83)', 'owner(1,84)', 'owner(1,85)', 'owner(1,86)', 'owner(1,87)', 'owner(1,88)', 'owner(1,89)', 'owner(1,90)', 'owner(1,91)', 'owner(1,92)', 'owner(1,93)', 'owner(1,94)', 'owner(1,95)', 'owner(1,96)', 'owner(1,97)', 'owner(1,98)', 'owner(1,99)', 'owner(1,100)', 'owner(2,1)', 'owner(2,2)', 'owner(2,3)', 'owner(2,4)', 'owner(2,5)', 'owner(2,6)', 'owner(2,7)', 'owner(2,8)', 'owner(2,9)', 'owner(2,10)', 'owner(2,11)', 'owner(2,12)', 'owner(2,13)', 'owner(2,14)', 'owner(2,15)', 'owner(2,16)', 'owner(2,17)', 'owner(2,18)', 'owner(2,19)', 'owner(2,20)', 'owner(2,21)', 'owner(2,22)', 'owner(2,23)', 'owner(2,24)', 'owner(2,25)', 'owner(2,26)', 'owner(2,27)', 'owner(2,28)', 'owner(2,29)', 'owner(2,30)', 'owner(2,31)', 'owner(2,32)', 'owner(2,33)', 'owner(2,34)', 'owner(2,35)', 'owner(2,36)', 'owner(2,37)', 'owner(2,38)', 'owner(2,39)', 'owner(2,40)', 'owner(2,41)', 'owner(2,42)', 'owner(2,43)', 'owner(2,44)', 'owner(2,45)', 'owner(2,46)', 'owner(2,47)', 'owner(2,48)', 'owner(2,49)', 'owner(2,50)', 'owner(2,51)', 'owner(2,52)', 'owner(2,53)', 'owner(2,54)', 'owner(2,55)', 'owner(2,56)', 'owner(2,57)', 'owner(2,58)', 'owner(2,59)', 'owner(2,60)', 'owner(2,61)', 'owner(2,62)', 'owner(2,63)', 'owner(2,64)', 'owner(2,65)', 'owner(2,66)', 'owner(2,67)', 'owner(2,68)', 'owner(2,69)', 'owner(2,70)', 'owner(2,71)', 'owner(2,72)', 'owner(2,73)', 'owner(2,74)', 'owner(2,75)', 'owner(2,76)', 'owner(2,77)', 'owner(2,78)', 'owner(2,79)', 'owner(2,80)', 'owner(2,81)', 'owner(2,82)', 'owner(2,83)', 'owner(2,84)', 'owner(2,85)', 'owner(2,86)', 'owner(2,87)', 'owner(2,88)', 'owner(2,89)', 'owner(2,90)', 'owner(2,91)', 'owner(2,92)', 'owner(2,93)', 'owner(2,94)', 'owner(2,95)', 'owner(2,96)', 'owner(2,97)', 'owner(2,98)', 'owner(2,99)', 'owner(2,100)', 'owner(3,1)', 'owner(3,2)', 'owner(3,3)', 'owner(3,4)', 'owner(3,5)', 'owner(3,6)', 'owner(3,7)', 'owner(3,8)', 'owner(3,9)', 'owner(3,10)', 'owner(3,11)', 'owner(3,12)', 'owner(3,13)', 'owner(3,14)', 'owner(3,15)', 'owner(3,16)', 'owner(3,17)', 'owner(3,18)', 'owner(3,19)', 'owner(3,20)', 'owner(3,21)', 'owner(3,22)', 'owner(3,23)', 'owner(3,24)', 'owner(3,25)', 'owner(3,26)', 'owner(3,27)', 'owner(3,28)', 'owner(3,29)', 'owner(3,30)', 'owner(3,31)', 'owner(3,32)', 'owner(3,33)', 'owner(3,34)', 'owner(3,35)', 'owner(3,36)', 'owner(3,37)', 'owner(3,38)', 'owner(3,39)', 'owner(3,40)', 'owner(3,41)', 'owner(3,42)', 'owner(3,43)', 'owner(3,44)', 'owner(3,45)', 'owner(3,46)', 'owner(3,47)', 'owner(3,48)', 'owner(3,49)', 'owner(3,50)', 'owner(3,51)', 'owner(3,52)', 'owner(3,53)', 'owner(3,54)', 'owner(3,55)', 'owner(3,56)', 'owner(3,57)', 'owner(3,58)', 'owner(3,59)', 'owner(3,60)', 'owner(3,61)', 'owner(3,62)', 'owner(3,63)', 'owner(3,64)', 'owner(3,65)', 'owner(3,66)', 'owner(3,67)', 'owner(3,68)', 'owner(3,69)', 'owner(3,70)', 'owner(3,71)', 'owner(3,72)', 'owner(3,73)', 'owner(3,74)', 'owner(3,75)', 'owner(3,76)', 'owner(3,77)', 'owner(3,78)', 'owner(3,79)', 'owner(3,80)', 'owner(3,81)', 'owner(3,82)', 'owner(3,83)', 'owner(3,84)', 'owner(3,85)', 'owner(3,86)', 'owner(3,87)', 'owner(3,88)', 'owner(3,89)', 'owner(3,90)', 'owner(3,91)', 'owner(3,92)', 'owner(3,93)', 'owner(3,94)', 'owner(3,95)', 'owner(3,96)', 'owner(3,97)', 'owner(3,98)', 'owner(3,99)', 'owner(3,100)', 'select(1)', 'select(2)', 'select(3)']]


441
assignment

question: 
Create an ASP script that maps a single label from "chicago","black","strength","cosenza","chair","laptop","singapore" to a collection of elements specified by the predicate "pink".

answer from file: 
assign(X,"chicago")|assign(X,"black")|assign(X,"strength")|assign(X,"cosenza")|assign(X,"chair")|assign(X,"laptop")|assign(X,"singapore"):-pink(X).

parsed from model: 
assign(X,"chicago")|assign(X,"black")|assign(X,"strength")|assign(X,"cosenza")|assign(X,"chair")|assign(X,"laptop")|assign(X,"singapore"):-pink(X).

facts: 
pink(1..5).

generated: 
Create an ASP script that maps a single label from "chicago","black","strength","cosenza","chair","laptop","singapore" to a collection of elements specified by the predicate "pink".
Answer: assign(X,"chicago")|assign(X,"black")|assign(X,"strength")|assign(X,"cosenza")|assign(X,"chair")|assign(X,"laptop")|assign(X,"singapore"):-pink(X).
assign(X,"city")|assign(X,"author")|assign(X,"moto","author","city","description","height","name","description","city","author","height","description","name","description","height","description","city","author","height","description","city","author","height","description","city","author","height","description","city","author","height","description","city","author","height","description","city","author

unique_rules: 
['assign(X,"chicago")|assign(X,"black")|assign(X,"strength")|assign(X,"cosenza")|assign(X,"chair")|assign(X,"laptop")|assign(X,"singapore"):-pink(X).']

jaccard: 1.0

AS desired: [['pink(1)', 'pink(2)', 'pink(3)', 'pink(4)', 'pink(5)', 'assign(1,"singapore")', 'assign(2,"singapore")', 'assign(3,"singapore")', 'assign(4,"singapore")', 'assign(5,"singapore")']]
\AS obtained: [['pink(1)', 'pink(2)', 'pink(3)', 'pink(4)', 'pink(5)', 'assign(1,"singapore")', 'assign(2,"singapore")', 'assign(3,"singapore")', 'assign(4,"singapore")', 'assign(5,"singapore")']]


442
constraint

question: 
Generate an ASP code to exclude linking the "strength" predicate with value 3 to the label "cairo".

answer from file: 
:-assign(3,cairo).

parsed from model: 
:-assign(3,cairo).

facts: 
strength(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-strength(X).

generated: 
Generate an ASP code to exclude linking the "strength" predicate with value 3 to the label "cairo".
Answer: :-assign(3,cairo).
Explanation: The predicate "street" includes fields "ID","city","author","height","name","description","city","author","height","name","description","city","author","height","name","description","city","author","height","name","description","city","author","height","name","description","city","author","height","name","description","city","author","height","name","description","city","author","height","name","description","city","author","height","name","description","city","author","height","name","description","city","author","height","name","description","city","author","height","name","description","city","author","height","name

unique_rules: 
[':-assign(3,cairo).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'strength(6)', 'strength(7)', 'strength(8)', 'strength(9)', 'strength(10)', 'strength(11)', 'strength(12)', 'strength(13)', 'strength(14)', 'strength(15)', 'strength(16)', 'strength(17)', 'strength(18)', 'strength(19)', 'strength(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'strength(6)', 'strength(7)', 'strength(8)', 'strength(9)', 'strength(10)', 'strength(11)', 'strength(12)', 'strength(13)', 'strength(14)', 'strength(15)', 'strength(16)', 'strength(17)', 'strength(18)', 'strength(19)', 'strength(20)']]


443
combination

question: 
Design an ASP solution to compute all possible pairings of elements from two sets defined by the predicates "chair" and "delhi".

answer from file: 
combination(X,Y):-chair(X),delhi(Y).

parsed from model: 
combination(X,Y):-chair(X),delhi(Y).

facts: 
chair(1..4).delhi(1..5).

generated: 
Design an ASP solution to compute all possible pairings of elements from two sets defined by the predicates "chair" and "delhi".
Answer: combination(X,Y):-chair(X),delhi(Y).
combination(X,Y):-chair(X),not delhi(Y).
combination(X,Y):-not chair(X),delhi(Y).
combination(X,Y):-not chair(X),not delhi(Y).

unique_rules: 
['combination(X,Y):-chair(X),delhi(Y).', 'combination(X,Y):-chair(X),not delhi(Y).', 'combination(X,Y):-not chair(X),delhi(Y).', 'combination(X,Y):-not chair(X),not delhi(Y).']

jaccard: 1.0

AS desired: [['delhi(1)', 'delhi(2)', 'delhi(3)', 'delhi(4)', 'delhi(5)', 'chair(1)', 'chair(2)', 'chair(3)', 'chair(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['delhi(1)', 'delhi(2)', 'delhi(3)', 'delhi(4)', 'delhi(5)', 'chair(1)', 'chair(2)', 'chair(3)', 'chair(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


444
join

question: 
Write an ASP program for the following problem. Consider predicate "pink" having fields "ID","chairID","hair","quality","lake", and the predicate "chair" having fields "ID","lake","owner". Define a predicate "pink_chair" that associates to each "pink" the "lake" of "chair".

answer from file: 
pink_chair(X,Z):-pink(X,Y,_,_,_),chair(Y,Z,_).

parsed from model: 
pink_chair(X,Z):-pink(X,Y,_,_,Z),chair(Y,Z,_).

facts: 
pink("ID","chairID","hair","quality","lake").chair("ID","lake","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "pink" having fields "ID","chairID","hair","quality","lake", and the predicate "chair" having fields "ID","lake","owner". Define a predicate "pink_chair" that associates to each "pink" the "lake" of "chair".
Answer: pink_chair(X,Z):-pink(X,Y,_,_,Z),chair(Y,Z,_).
pink_chair(X,Z):-pink(X,Y,_,_,Z),not chair(Y,Z,_).
pink_chair(X,Z):-not pink(X,Y,_,_,Z),chair(Y,Z,_).

unique_rules: 
['pink_chair(X,Z):-pink(X,Y,_,_,Z),chair(Y,Z,_).', 'pink_chair(X,Z):-pink(X,Y,_,_,Z),not chair(Y,Z,_).', 'pink_chair(X,Z):-not pink(X,Y,_,_,Z),chair(Y,Z,_).']

jaccard: 1.0

AS desired: [['pink("ID","chairID","hair","quality","lake")', 'chair("ID","lake","owner")']]
\AS obtained: [['pink("ID","chairID","hair","quality","lake")', 'chair("ID","lake","owner")']]


445
closure

question: 
Create an ASP code snippet to determine the transitive closure of the "storm" predicate, resulting in the predicate "family".

answer from file: 
family(X,Y):-storm(X,Y).
family(X,Y):-storm(X,Z),family(Z,Y).

parsed from model: 
family(X,Y):-storm(X,Y).
family(X,Y):-storm(X,Z),family(Z,Y).

facts: 
storm(1..3, 1..4).

generated: 
Create an ASP code snippet to determine the transitive closure of the "storm" predicate, resulting in the predicate "family".
Answer: family(X,Y):-storm(X,Y).
family(X,Y):-storm(X,Z),family(Z,Y).
family(X,Y):-storm(X,Z),not family(Z,Y).
family(X,Y):-not storm(X,Y).
family(X,Y):-X,Y.
family(X,Y):-not X,not Y.

unique_rules: 
['family(X,Y):-storm(X,Y).', 'family(X,Y):-storm(X,Z),family(Z,Y).', 'family(X,Y):-storm(X,Z),not family(Z,Y).', 'family(X,Y):-not storm(X,Y).', 'family(X,Y):-X,Y.', 'family(X,Y):-not X,not Y.']

jaccard: 1.0

AS desired: [['storm(1,1)', 'storm(1,2)', 'storm(1,3)', 'storm(1,4)', 'storm(2,1)', 'storm(2,2)', 'storm(2,3)', 'storm(2,4)', 'storm(3,1)', 'storm(3,2)', 'storm(3,3)', 'storm(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]
\AS obtained: [['storm(1,1)', 'storm(1,2)', 'storm(1,3)', 'storm(1,4)', 'storm(2,1)', 'storm(2,2)', 'storm(2,3)', 'storm(2,4)', 'storm(3,1)', 'storm(3,2)', 'storm(3,3)', 'storm(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]


446
preference

question: 
Compose an ASP script to ensure the "butterfly" predicate with value "15" does not link to "laptop". If this connection happens, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(15,"laptop").[1@1]

parsed from model: 
:~assign(15,"laptop").[1@1]

facts: 
butterfly(1..20).

generated: 
Compose an ASP script to ensure the "butterfly" predicate with value "15" does not link to "laptop". If this connection happens, it incurs a cost of "1" at level "1".
Answer: :~assign(15,"laptop").[1@1]
This script uses the "assign" predicate to check the connection between the "15" and "laptop" labels. If the connection is found, it incurs a cost of "1" at level "1".
The predicate "bike" includes fields "ID","city","author","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price

unique_rules: 
[':~assign(15,"laptop").[1@1]']

jaccard: 1.0

AS desired: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)', 'butterfly(6)', 'butterfly(7)', 'butterfly(8)', 'butterfly(9)', 'butterfly(10)', 'butterfly(11)', 'butterfly(12)', 'butterfly(13)', 'butterfly(14)', 'butterfly(15)', 'butterfly(16)', 'butterfly(17)', 'butterfly(18)', 'butterfly(19)', 'butterfly(20)']]
\AS obtained: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)', 'butterfly(6)', 'butterfly(7)', 'butterfly(8)', 'butterfly(9)', 'butterfly(10)', 'butterfly(11)', 'butterfly(12)', 'butterfly(13)', 'butterfly(14)', 'butterfly(15)', 'butterfly(16)', 'butterfly(17)', 'butterfly(18)', 'butterfly(19)', 'butterfly(20)']]


447
filtering

question: 
Create an ASP code to retrieve values associated with the label "owner" within the "moscow" predicate.

answer from file: 
select(X):-moscow(X,"owner").

parsed from model: 
select(X):-moscow(X,"owner").

facts: 
moscow(1..5, "owner").

generated: 
Create an ASP code to retrieve values associated with the label "owner" within the "moscow" predicate.
Answer: select(X):-moscow(X,"owner").
moscow(X,Z):- felicità(X,Z).
 felicità(X,Z):-city(X,Z).

unique_rules: 
['select(X):-moscow(X,"owner").', 'moscow(X,Z):- felicità(X,Z).', 'felicità(X,Z):-city(X,Z).']

jaccard: 1.0

AS desired: [['moscow(1,"owner")', 'moscow(2,"owner")', 'moscow(3,"owner")', 'moscow(4,"owner")', 'moscow(5,"owner")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['moscow(1,"owner")', 'moscow(2,"owner")', 'moscow(3,"owner")', 'moscow(4,"owner")', 'moscow(5,"owner")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


448
negative_filtering

question: 
Generate an ASP code snippet to retrieve values linked to the predicate "chicago" but not to the predicate "storm" and labeled "storm".

answer from file: 
select(X):-chicago(X),not storm(X,"storm").

parsed from model: 
select(X):-chicago(X),not storm(X,"storm").

facts: 
chicago(1..3).storm(1,"mumbai").storm(2,"storm").storm(3,"white").

generated: 
Generate an ASP code snippet to retrieve values linked to the predicate "chicago" but not to the predicate "storm" and labeled "storm".
Answer: select(X):-chicago(X),not storm(X,"storm").
Explanation: The predicate "chicago" links values to the predicate "city". The predicate "storm" links values to the predicate "author". The predicate "author" is linked to the predicate "city".
The predicate "city" is linked to the predicate "rome". The predicate "rome" is linked to the predicate "author".
The predicate "author" is linked to the predicate "city".
The predicate "city" is linked to the predicate "rome".
The predicate "rome" is linked to the predicate "author".
The predicate "author" is linked to the predicate "city".
The predicate "city" is

unique_rules: 
['select(X):-chicago(X),not storm(X,"storm").']

jaccard: 1.0

AS desired: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'storm(1,"mumbai")', 'storm(2,"storm")', 'storm(3,"white")', 'select(1)', 'select(3)']]
\AS obtained: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'storm(1,"mumbai")', 'storm(2,"storm")', 'storm(3,"white")', 'select(1)', 'select(3)']]


449
numeric_filtering

question: 
Compose an ASP program to fetch values associated with the predicate "moscow" with a value different than 48.

answer from file: 
select(X):-moscow(X,C),C!=48.

parsed from model: 
select(X):-moscow(X,C),C!=48.

facts: 
moscow(1..3, 1..100).

generated: 
Compose an ASP program to fetch values associated with the predicate "moscow" with a value different than 48.
Answer: select(X):-moscow(X,C),C!=48.
moscow(X,C):-moscow(X,C),C==48.

unique_rules: 
['select(X):-moscow(X,C),C!=48.', 'moscow(X,C):-moscow(X,C),C==48.']

jaccard: 1.0

AS desired: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(1,5)', 'moscow(1,6)', 'moscow(1,7)', 'moscow(1,8)', 'moscow(1,9)', 'moscow(1,10)', 'moscow(1,11)', 'moscow(1,12)', 'moscow(1,13)', 'moscow(1,14)', 'moscow(1,15)', 'moscow(1,16)', 'moscow(1,17)', 'moscow(1,18)', 'moscow(1,19)', 'moscow(1,20)', 'moscow(1,21)', 'moscow(1,22)', 'moscow(1,23)', 'moscow(1,24)', 'moscow(1,25)', 'moscow(1,26)', 'moscow(1,27)', 'moscow(1,28)', 'moscow(1,29)', 'moscow(1,30)', 'moscow(1,31)', 'moscow(1,32)', 'moscow(1,33)', 'moscow(1,34)', 'moscow(1,35)', 'moscow(1,36)', 'moscow(1,37)', 'moscow(1,38)', 'moscow(1,39)', 'moscow(1,40)', 'moscow(1,41)', 'moscow(1,42)', 'moscow(1,43)', 'moscow(1,44)', 'moscow(1,45)', 'moscow(1,46)', 'moscow(1,47)', 'moscow(1,48)', 'moscow(1,49)', 'moscow(1,50)', 'moscow(1,51)', 'moscow(1,52)', 'moscow(1,53)', 'moscow(1,54)', 'moscow(1,55)', 'moscow(1,56)', 'moscow(1,57)', 'moscow(1,58)', 'moscow(1,59)', 'moscow(1,60)', 'moscow(1,61)', 'moscow(1,62)', 'moscow(1,63)', 'moscow(1,64)', 'moscow(1,65)', 'moscow(1,66)', 'moscow(1,67)', 'moscow(1,68)', 'moscow(1,69)', 'moscow(1,70)', 'moscow(1,71)', 'moscow(1,72)', 'moscow(1,73)', 'moscow(1,74)', 'moscow(1,75)', 'moscow(1,76)', 'moscow(1,77)', 'moscow(1,78)', 'moscow(1,79)', 'moscow(1,80)', 'moscow(1,81)', 'moscow(1,82)', 'moscow(1,83)', 'moscow(1,84)', 'moscow(1,85)', 'moscow(1,86)', 'moscow(1,87)', 'moscow(1,88)', 'moscow(1,89)', 'moscow(1,90)', 'moscow(1,91)', 'moscow(1,92)', 'moscow(1,93)', 'moscow(1,94)', 'moscow(1,95)', 'moscow(1,96)', 'moscow(1,97)', 'moscow(1,98)', 'moscow(1,99)', 'moscow(1,100)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(2,5)', 'moscow(2,6)', 'moscow(2,7)', 'moscow(2,8)', 'moscow(2,9)', 'moscow(2,10)', 'moscow(2,11)', 'moscow(2,12)', 'moscow(2,13)', 'moscow(2,14)', 'moscow(2,15)', 'moscow(2,16)', 'moscow(2,17)', 'moscow(2,18)', 'moscow(2,19)', 'moscow(2,20)', 'moscow(2,21)', 'moscow(2,22)', 'moscow(2,23)', 'moscow(2,24)', 'moscow(2,25)', 'moscow(2,26)', 'moscow(2,27)', 'moscow(2,28)', 'moscow(2,29)', 'moscow(2,30)', 'moscow(2,31)', 'moscow(2,32)', 'moscow(2,33)', 'moscow(2,34)', 'moscow(2,35)', 'moscow(2,36)', 'moscow(2,37)', 'moscow(2,38)', 'moscow(2,39)', 'moscow(2,40)', 'moscow(2,41)', 'moscow(2,42)', 'moscow(2,43)', 'moscow(2,44)', 'moscow(2,45)', 'moscow(2,46)', 'moscow(2,47)', 'moscow(2,48)', 'moscow(2,49)', 'moscow(2,50)', 'moscow(2,51)', 'moscow(2,52)', 'moscow(2,53)', 'moscow(2,54)', 'moscow(2,55)', 'moscow(2,56)', 'moscow(2,57)', 'moscow(2,58)', 'moscow(2,59)', 'moscow(2,60)', 'moscow(2,61)', 'moscow(2,62)', 'moscow(2,63)', 'moscow(2,64)', 'moscow(2,65)', 'moscow(2,66)', 'moscow(2,67)', 'moscow(2,68)', 'moscow(2,69)', 'moscow(2,70)', 'moscow(2,71)', 'moscow(2,72)', 'moscow(2,73)', 'moscow(2,74)', 'moscow(2,75)', 'moscow(2,76)', 'moscow(2,77)', 'moscow(2,78)', 'moscow(2,79)', 'moscow(2,80)', 'moscow(2,81)', 'moscow(2,82)', 'moscow(2,83)', 'moscow(2,84)', 'moscow(2,85)', 'moscow(2,86)', 'moscow(2,87)', 'moscow(2,88)', 'moscow(2,89)', 'moscow(2,90)', 'moscow(2,91)', 'moscow(2,92)', 'moscow(2,93)', 'moscow(2,94)', 'moscow(2,95)', 'moscow(2,96)', 'moscow(2,97)', 'moscow(2,98)', 'moscow(2,99)', 'moscow(2,100)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)', 'moscow(3,5)', 'moscow(3,6)', 'moscow(3,7)', 'moscow(3,8)', 'moscow(3,9)', 'moscow(3,10)', 'moscow(3,11)', 'moscow(3,12)', 'moscow(3,13)', 'moscow(3,14)', 'moscow(3,15)', 'moscow(3,16)', 'moscow(3,17)', 'moscow(3,18)', 'moscow(3,19)', 'moscow(3,20)', 'moscow(3,21)', 'moscow(3,22)', 'moscow(3,23)', 'moscow(3,24)', 'moscow(3,25)', 'moscow(3,26)', 'moscow(3,27)', 'moscow(3,28)', 'moscow(3,29)', 'moscow(3,30)', 'moscow(3,31)', 'moscow(3,32)', 'moscow(3,33)', 'moscow(3,34)', 'moscow(3,35)', 'moscow(3,36)', 'moscow(3,37)', 'moscow(3,38)', 'moscow(3,39)', 'moscow(3,40)', 'moscow(3,41)', 'moscow(3,42)', 'moscow(3,43)', 'moscow(3,44)', 'moscow(3,45)', 'moscow(3,46)', 'moscow(3,47)', 'moscow(3,48)', 'moscow(3,49)', 'moscow(3,50)', 'moscow(3,51)', 'moscow(3,52)', 'moscow(3,53)', 'moscow(3,54)', 'moscow(3,55)', 'moscow(3,56)', 'moscow(3,57)', 'moscow(3,58)', 'moscow(3,59)', 'moscow(3,60)', 'moscow(3,61)', 'moscow(3,62)', 'moscow(3,63)', 'moscow(3,64)', 'moscow(3,65)', 'moscow(3,66)', 'moscow(3,67)', 'moscow(3,68)', 'moscow(3,69)', 'moscow(3,70)', 'moscow(3,71)', 'moscow(3,72)', 'moscow(3,73)', 'moscow(3,74)', 'moscow(3,75)', 'moscow(3,76)', 'moscow(3,77)', 'moscow(3,78)', 'moscow(3,79)', 'moscow(3,80)', 'moscow(3,81)', 'moscow(3,82)', 'moscow(3,83)', 'moscow(3,84)', 'moscow(3,85)', 'moscow(3,86)', 'moscow(3,87)', 'moscow(3,88)', 'moscow(3,89)', 'moscow(3,90)', 'moscow(3,91)', 'moscow(3,92)', 'moscow(3,93)', 'moscow(3,94)', 'moscow(3,95)', 'moscow(3,96)', 'moscow(3,97)', 'moscow(3,98)', 'moscow(3,99)', 'moscow(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(1,5)', 'moscow(1,6)', 'moscow(1,7)', 'moscow(1,8)', 'moscow(1,9)', 'moscow(1,10)', 'moscow(1,11)', 'moscow(1,12)', 'moscow(1,13)', 'moscow(1,14)', 'moscow(1,15)', 'moscow(1,16)', 'moscow(1,17)', 'moscow(1,18)', 'moscow(1,19)', 'moscow(1,20)', 'moscow(1,21)', 'moscow(1,22)', 'moscow(1,23)', 'moscow(1,24)', 'moscow(1,25)', 'moscow(1,26)', 'moscow(1,27)', 'moscow(1,28)', 'moscow(1,29)', 'moscow(1,30)', 'moscow(1,31)', 'moscow(1,32)', 'moscow(1,33)', 'moscow(1,34)', 'moscow(1,35)', 'moscow(1,36)', 'moscow(1,37)', 'moscow(1,38)', 'moscow(1,39)', 'moscow(1,40)', 'moscow(1,41)', 'moscow(1,42)', 'moscow(1,43)', 'moscow(1,44)', 'moscow(1,45)', 'moscow(1,46)', 'moscow(1,47)', 'moscow(1,48)', 'moscow(1,49)', 'moscow(1,50)', 'moscow(1,51)', 'moscow(1,52)', 'moscow(1,53)', 'moscow(1,54)', 'moscow(1,55)', 'moscow(1,56)', 'moscow(1,57)', 'moscow(1,58)', 'moscow(1,59)', 'moscow(1,60)', 'moscow(1,61)', 'moscow(1,62)', 'moscow(1,63)', 'moscow(1,64)', 'moscow(1,65)', 'moscow(1,66)', 'moscow(1,67)', 'moscow(1,68)', 'moscow(1,69)', 'moscow(1,70)', 'moscow(1,71)', 'moscow(1,72)', 'moscow(1,73)', 'moscow(1,74)', 'moscow(1,75)', 'moscow(1,76)', 'moscow(1,77)', 'moscow(1,78)', 'moscow(1,79)', 'moscow(1,80)', 'moscow(1,81)', 'moscow(1,82)', 'moscow(1,83)', 'moscow(1,84)', 'moscow(1,85)', 'moscow(1,86)', 'moscow(1,87)', 'moscow(1,88)', 'moscow(1,89)', 'moscow(1,90)', 'moscow(1,91)', 'moscow(1,92)', 'moscow(1,93)', 'moscow(1,94)', 'moscow(1,95)', 'moscow(1,96)', 'moscow(1,97)', 'moscow(1,98)', 'moscow(1,99)', 'moscow(1,100)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(2,5)', 'moscow(2,6)', 'moscow(2,7)', 'moscow(2,8)', 'moscow(2,9)', 'moscow(2,10)', 'moscow(2,11)', 'moscow(2,12)', 'moscow(2,13)', 'moscow(2,14)', 'moscow(2,15)', 'moscow(2,16)', 'moscow(2,17)', 'moscow(2,18)', 'moscow(2,19)', 'moscow(2,20)', 'moscow(2,21)', 'moscow(2,22)', 'moscow(2,23)', 'moscow(2,24)', 'moscow(2,25)', 'moscow(2,26)', 'moscow(2,27)', 'moscow(2,28)', 'moscow(2,29)', 'moscow(2,30)', 'moscow(2,31)', 'moscow(2,32)', 'moscow(2,33)', 'moscow(2,34)', 'moscow(2,35)', 'moscow(2,36)', 'moscow(2,37)', 'moscow(2,38)', 'moscow(2,39)', 'moscow(2,40)', 'moscow(2,41)', 'moscow(2,42)', 'moscow(2,43)', 'moscow(2,44)', 'moscow(2,45)', 'moscow(2,46)', 'moscow(2,47)', 'moscow(2,48)', 'moscow(2,49)', 'moscow(2,50)', 'moscow(2,51)', 'moscow(2,52)', 'moscow(2,53)', 'moscow(2,54)', 'moscow(2,55)', 'moscow(2,56)', 'moscow(2,57)', 'moscow(2,58)', 'moscow(2,59)', 'moscow(2,60)', 'moscow(2,61)', 'moscow(2,62)', 'moscow(2,63)', 'moscow(2,64)', 'moscow(2,65)', 'moscow(2,66)', 'moscow(2,67)', 'moscow(2,68)', 'moscow(2,69)', 'moscow(2,70)', 'moscow(2,71)', 'moscow(2,72)', 'moscow(2,73)', 'moscow(2,74)', 'moscow(2,75)', 'moscow(2,76)', 'moscow(2,77)', 'moscow(2,78)', 'moscow(2,79)', 'moscow(2,80)', 'moscow(2,81)', 'moscow(2,82)', 'moscow(2,83)', 'moscow(2,84)', 'moscow(2,85)', 'moscow(2,86)', 'moscow(2,87)', 'moscow(2,88)', 'moscow(2,89)', 'moscow(2,90)', 'moscow(2,91)', 'moscow(2,92)', 'moscow(2,93)', 'moscow(2,94)', 'moscow(2,95)', 'moscow(2,96)', 'moscow(2,97)', 'moscow(2,98)', 'moscow(2,99)', 'moscow(2,100)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)', 'moscow(3,5)', 'moscow(3,6)', 'moscow(3,7)', 'moscow(3,8)', 'moscow(3,9)', 'moscow(3,10)', 'moscow(3,11)', 'moscow(3,12)', 'moscow(3,13)', 'moscow(3,14)', 'moscow(3,15)', 'moscow(3,16)', 'moscow(3,17)', 'moscow(3,18)', 'moscow(3,19)', 'moscow(3,20)', 'moscow(3,21)', 'moscow(3,22)', 'moscow(3,23)', 'moscow(3,24)', 'moscow(3,25)', 'moscow(3,26)', 'moscow(3,27)', 'moscow(3,28)', 'moscow(3,29)', 'moscow(3,30)', 'moscow(3,31)', 'moscow(3,32)', 'moscow(3,33)', 'moscow(3,34)', 'moscow(3,35)', 'moscow(3,36)', 'moscow(3,37)', 'moscow(3,38)', 'moscow(3,39)', 'moscow(3,40)', 'moscow(3,41)', 'moscow(3,42)', 'moscow(3,43)', 'moscow(3,44)', 'moscow(3,45)', 'moscow(3,46)', 'moscow(3,47)', 'moscow(3,48)', 'moscow(3,49)', 'moscow(3,50)', 'moscow(3,51)', 'moscow(3,52)', 'moscow(3,53)', 'moscow(3,54)', 'moscow(3,55)', 'moscow(3,56)', 'moscow(3,57)', 'moscow(3,58)', 'moscow(3,59)', 'moscow(3,60)', 'moscow(3,61)', 'moscow(3,62)', 'moscow(3,63)', 'moscow(3,64)', 'moscow(3,65)', 'moscow(3,66)', 'moscow(3,67)', 'moscow(3,68)', 'moscow(3,69)', 'moscow(3,70)', 'moscow(3,71)', 'moscow(3,72)', 'moscow(3,73)', 'moscow(3,74)', 'moscow(3,75)', 'moscow(3,76)', 'moscow(3,77)', 'moscow(3,78)', 'moscow(3,79)', 'moscow(3,80)', 'moscow(3,81)', 'moscow(3,82)', 'moscow(3,83)', 'moscow(3,84)', 'moscow(3,85)', 'moscow(3,86)', 'moscow(3,87)', 'moscow(3,88)', 'moscow(3,89)', 'moscow(3,90)', 'moscow(3,91)', 'moscow(3,92)', 'moscow(3,93)', 'moscow(3,94)', 'moscow(3,95)', 'moscow(3,96)', 'moscow(3,97)', 'moscow(3,98)', 'moscow(3,99)', 'moscow(3,100)', 'select(1)', 'select(2)', 'select(3)']]


450
assignment

question: 
Draft an ASP code that connects a single label from the set "weight","cloud","desk","cairo","quality","barcelona","hair","mumbai","surname" to elements specified by the predicate "surname".

answer from file: 
assign(X,"weight")|assign(X,"cloud")|assign(X,"desk")|assign(X,"cairo")|assign(X,"quality")|assign(X,"barcelona")|assign(X,"hair")|assign(X,"mumbai")|assign(X,"surname"):-surname(X).

parsed from model: 
assign(X,"weight")|assign(X,"cloud")|assign(X,"desk")|assign(X,"cairo")|assign(X,"quality")|assign(X,"barcelona")|assign(X,"hair")|assign(X,"mumbai")|assign(X,"surname"):-surname(X).

facts: 
surname(1..5).

generated: 
Draft an ASP code that connects a single label from the set "weight","cloud","desk","cairo","quality","barcelona","hair","mumbai","surname" to elements specified by the predicate "surname".
Answer: assign(X,"weight")|assign(X,"cloud")|assign(X,"desk")|assign(X,"cairo")|assign(X,"quality")|assign(X,"barcelona")|assign(X,"hair")|assign(X,"mumbai")|assign(X,"surname"):-surname(X).
assign(X,"city")|assign(X,"author")|assign(X,"description","city"):-surname(X).
```

unique_rules: 
['assign(X,"weight")|assign(X,"cloud")|assign(X,"desk")|assign(X,"cairo")|assign(X,"quality")|assign(X,"barcelona")|assign(X,"hair")|assign(X,"mumbai")|assign(X,"surname"):-surname(X).', 'assign(X,"city")|assign(X,"author")|assign(X,"description","city"):-surname(X).']

jaccard: 1.0

AS desired: [['surname(1)', 'surname(2)', 'surname(3)', 'surname(4)', 'surname(5)', 'assign(1,"surname")', 'assign(2,"surname")', 'assign(3,"surname")', 'assign(4,"surname")', 'assign(5,"surname")']]
\AS obtained: [['surname(1)', 'surname(2)', 'surname(3)', 'surname(4)', 'surname(5)', 'assign(1,"surname")', 'assign(2,"surname")', 'assign(3,"surname")', 'assign(4,"surname")', 'assign(5,"surname")']]


451
constraint

question: 
Develop an ASP application that avoids the predicate "laptop" with a value of 5 being linked to the label "lightblue".

answer from file: 
:-assign(5,lightblue).

parsed from model: 
:-assign(5,lightblue).

facts: 
laptop(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-laptop(X).

generated: 
Develop an ASP application that avoids the predicate "laptop" with a value of 5 being linked to the label "lightblue".
Answer: :-assign(5,lightblue).
Explanation: The predicate "lightblue" includes elements linked to the label "lightblue", and the predicate "laptop" contains elements linked to the label "lightblue". The predicate "assign" avoids linking the element with a value of 5 to the label "lightblue".

unique_rules: 
[':-assign(5,lightblue).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'laptop(1)', 'laptop(2)', 'laptop(3)', 'laptop(4)', 'laptop(5)', 'laptop(6)', 'laptop(7)', 'laptop(8)', 'laptop(9)', 'laptop(10)', 'laptop(11)', 'laptop(12)', 'laptop(13)', 'laptop(14)', 'laptop(15)', 'laptop(16)', 'laptop(17)', 'laptop(18)', 'laptop(19)', 'laptop(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'laptop(1)', 'laptop(2)', 'laptop(3)', 'laptop(4)', 'laptop(5)', 'laptop(6)', 'laptop(7)', 'laptop(8)', 'laptop(9)', 'laptop(10)', 'laptop(11)', 'laptop(12)', 'laptop(13)', 'laptop(14)', 'laptop(15)', 'laptop(16)', 'laptop(17)', 'laptop(18)', 'laptop(19)', 'laptop(20)']]


452
combination

question: 
Generate an ASP code to compute the cross-product of elements in the sets defined by "storm" and "chicago".

answer from file: 
combination(X,Y):-storm(X),chicago(Y).

parsed from model: 
cross_product(X,Y):-storm(X),chicago(Y).

facts: 
storm(1..4).chicago(1..5).

generated: 
Generate an ASP code to compute the cross-product of elements in the sets defined by "storm" and "chicago".
Answer: cross_product(X,Y):-storm(X),chicago(Y).
cross_product(X,Y):-storm(X),not chicago(Y).
cross_product(X,Y):-not storm(X),chicago(Y).

unique_rules: 
['cross_product(X,Y):-storm(X),chicago(Y).', 'cross_product(X,Y):-storm(X),not chicago(Y).', 'cross_product(X,Y):-not storm(X),chicago(Y).']

jaccard: 0.0

AS desired: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'chicago(5)', 'storm(1)', 'storm(2)', 'storm(3)', 'storm(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'chicago(5)', 'storm(1)', 'storm(2)', 'storm(3)', 'storm(4)', 'cross_product(1,1)', 'cross_product(1,2)', 'cross_product(1,3)', 'cross_product(1,4)', 'cross_product(1,5)', 'cross_product(2,1)', 'cross_product(2,2)', 'cross_product(2,3)', 'cross_product(2,4)', 'cross_product(2,5)', 'cross_product(3,1)', 'cross_product(3,2)', 'cross_product(3,3)', 'cross_product(3,4)', 'cross_product(3,5)', 'cross_product(4,1)', 'cross_product(4,2)', 'cross_product(4,3)', 'cross_product(4,4)', 'cross_product(4,5)']]


453
join

question: 
Create an ASP solution to define the predicate "butterfly_chair" that links each butterfly to the lake of chair, given "butterfly" has fields "ID","quality","chairID" and "chair" has fields "ID","strength","lake".

answer from file: 
butterfly_chair(X,Z):-butterfly(X,_,Y),chair(Y,_,Z).

parsed from model: 
butterfly_chair(X,Z):-butterfly(X,_,Y),chair(Y,_,Z).

facts: 
butterfly("ID","quality","chairID").chair("ID","strength","lake").

generated: 
Create an ASP solution to define the predicate "butterfly_chair" that links each butterfly to the lake of chair, given "butterfly" has fields "ID","quality","chairID" and "chair" has fields "ID","strength","lake". Define the predicate "butterfly_chair" that links each butterfly to the lake of chair.
Answer: butterfly_chair(X,Z):-butterfly(X,_,Y),chair(Y,_,Z).
butterfly_chair(X,Z):- arrivant(X,_,Y), assurent(Y,_,Z).
 arrivant(X,_,Y):-bike(X,_,Y).
 assurent(X,_,Z):-bike(X,_,Z).

unique_rules: 
['butterfly_chair(X,Z):-butterfly(X,_,Y),chair(Y,_,Z).', 'butterfly_chair(X,Z):- arrivant(X,_,Y), assurent(Y,_,Z).', 'arrivant(X,_,Y):-bike(X,_,Y).', 'assurent(X,_,Z):-bike(X,_,Z).']

jaccard: 1.0

AS desired: [['butterfly("ID","quality","chairID")', 'chair("ID","strength","lake")']]
\AS obtained: [['butterfly("ID","quality","chairID")', 'chair("ID","strength","lake")']]


454
closure

question: 
Craft an ASP script that infers the "trains" predicate by computing the transitive closure of the "chicago" predicate.

answer from file: 
trains(X,Y):-chicago(X,Y).
trains(X,Y):-chicago(X,Z),trains(Z,Y).

parsed from model: 
trains(X,Y):-chicago(X,Y).
trains(X,Y):-chicago(X,Z),trains(Z,Y).

facts: 
chicago(1..3, 1..4).

generated: 
Craft an ASP script that infers the "trains" predicate by computing the transitive closure of the "chicago" predicate.
Answer: trains(X,Y):-chicago(X,Y).
trains(X,Y):-chicago(X,Z),trains(Z,Y).
trains(X,Y):-chicago(X,Y).
Explanation:
- The first rule captures the transitive closure of "chicago" with itself.
- The second rule captures the transitive closure of "chicago" with the "city" label.
- The third rule captures the transitive closure of "chicago" with the "moto" label.
- The fourth rule captures the transitive closure of "chicago" with itself.

unique_rules: 
['trains(X,Y):-chicago(X,Y).', 'trains(X,Y):-chicago(X,Z),trains(Z,Y).']

jaccard: 1.0

AS desired: [['chicago(1,1)', 'chicago(1,2)', 'chicago(1,3)', 'chicago(1,4)', 'chicago(2,1)', 'chicago(2,2)', 'chicago(2,3)', 'chicago(2,4)', 'chicago(3,1)', 'chicago(3,2)', 'chicago(3,3)', 'chicago(3,4)', 'trains(1,1)', 'trains(1,2)', 'trains(1,3)', 'trains(1,4)', 'trains(2,1)', 'trains(2,2)', 'trains(2,3)', 'trains(2,4)', 'trains(3,1)', 'trains(3,2)', 'trains(3,3)', 'trains(3,4)']]
\AS obtained: [['chicago(1,1)', 'chicago(1,2)', 'chicago(1,3)', 'chicago(1,4)', 'chicago(2,1)', 'chicago(2,2)', 'chicago(2,3)', 'chicago(2,4)', 'chicago(3,1)', 'chicago(3,2)', 'chicago(3,3)', 'chicago(3,4)', 'trains(1,1)', 'trains(1,2)', 'trains(1,3)', 'trains(1,4)', 'trains(2,1)', 'trains(2,2)', 'trains(2,3)', 'trains(2,4)', 'trains(3,1)', 'trains(3,2)', 'trains(3,3)', 'trains(3,4)']]


455
preference

question: 
Compose an ASP program to keep the predicate "darkmagenta" with value "5" separate from "mumbai". If this association occurs, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(5,"mumbai").[1@1]

parsed from model: 
:~assign(5,"mumbai").[1@1]

facts: 
darkmagenta(1..20).

generated: 
Compose an ASP program to keep the predicate "darkmagenta" with value "5" separate from "mumbai". If this association occurs, it incurs a cost of "1" at level "1".
Answer: :~assign(5,"mumbai").[1@1]
This predicate ensures that the association between "5" and "mumbai" is not established.
The predicate "gray" with value "1" at level "1" is used to enforce this separation.
The predicate "darkmagenta" with value "5" at level "1" is the one that incurs the cost specified by the predicate "gray".

unique_rules: 
[':~assign(5,"mumbai").[1@1]']

jaccard: 1.0

AS desired: [['darkmagenta(1)', 'darkmagenta(2)', 'darkmagenta(3)', 'darkmagenta(4)', 'darkmagenta(5)', 'darkmagenta(6)', 'darkmagenta(7)', 'darkmagenta(8)', 'darkmagenta(9)', 'darkmagenta(10)', 'darkmagenta(11)', 'darkmagenta(12)', 'darkmagenta(13)', 'darkmagenta(14)', 'darkmagenta(15)', 'darkmagenta(16)', 'darkmagenta(17)', 'darkmagenta(18)', 'darkmagenta(19)', 'darkmagenta(20)']]
\AS obtained: [['darkmagenta(1)', 'darkmagenta(2)', 'darkmagenta(3)', 'darkmagenta(4)', 'darkmagenta(5)', 'darkmagenta(6)', 'darkmagenta(7)', 'darkmagenta(8)', 'darkmagenta(9)', 'darkmagenta(10)', 'darkmagenta(11)', 'darkmagenta(12)', 'darkmagenta(13)', 'darkmagenta(14)', 'darkmagenta(15)', 'darkmagenta(16)', 'darkmagenta(17)', 'darkmagenta(18)', 'darkmagenta(19)', 'darkmagenta(20)']]


456
filtering

question: 
Draft an ASP code to retrieve values associated with the predicate "black" and the label "roof".

answer from file: 
select(X):-black(X,"roof").

parsed from model: 
select(X):-black(X,"roof").

facts: 
black(1..5, "roof").

generated: 
Draft an ASP code to retrieve values associated with the predicate "black" and the label "roof".
Answer: select(X):-black(X,"roof").
black(X,Z):-black(X,Z).
```

unique_rules: 
['select(X):-black(X,"roof").', 'black(X,Z):-black(X,Z).']

jaccard: 1.0

AS desired: [['black(1,"roof")', 'black(2,"roof")', 'black(3,"roof")', 'black(4,"roof")', 'black(5,"roof")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['black(1,"roof")', 'black(2,"roof")', 'black(3,"roof")', 'black(4,"roof")', 'black(5,"roof")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


457
negative_filtering

question: 
Write an ASP script to select values connected to the predicate "pink" but not associated with the predicate "white" and labeled "lightblue".

answer from file: 
select(X):-pink(X),not white(X,"lightblue").

parsed from model: 
select(X):-pink(X),not white(X,"lightblue").

facts: 
pink(1..3).white(1,"black").white(2,"lightblue").white(3,"chair").

generated: 
Write an ASP script to select values connected to the predicate "pink" but not associated with the predicate "white" and labeled "lightblue".
Answer: select(X):-pink(X),not white(X,"lightblue").
```
select(X):-pink(X),not white(X,"lightblue").
```

unique_rules: 
['select(X):-pink(X),not white(X,"lightblue").']

jaccard: 1.0

AS desired: [['pink(1)', 'pink(2)', 'pink(3)', 'white(1,"black")', 'white(2,"lightblue")', 'white(3,"chair")', 'select(1)', 'select(3)']]
\AS obtained: [['pink(1)', 'pink(2)', 'pink(3)', 'white(1,"black")', 'white(2,"lightblue")', 'white(3,"chair")', 'select(1)', 'select(3)']]


458
numeric_filtering

question: 
Draft an ASP code snippet to identify values linked to the predicate "surname" with a value different than 9.

answer from file: 
select(X):-surname(X,C),C!=9.

parsed from model: 
select(X):-surname(X,C),C!=9.

facts: 
surname(1..3, 1..100).

generated: 
Draft an ASP code snippet to identify values linked to the predicate "surname" with a value different than 9.
Answer: select(X):-surname(X,C),C!=9.
```
The predicate "description" includes fields "ID","height","author","city","name","price","description","author","city","name","height","description","price","author","city","name","height","description","price","author","city","name","height","description","price","author","city","name","height","description","price","author","city","name","height","description","price","author","city","name","height","description","price","author","city","name","height","description","price","author","city","name","height","description","price","author","city","name","height","description","price","

unique_rules: 
['select(X):-surname(X,C),C!=9.']

jaccard: 1.0

AS desired: [['surname(1,1)', 'surname(1,2)', 'surname(1,3)', 'surname(1,4)', 'surname(1,5)', 'surname(1,6)', 'surname(1,7)', 'surname(1,8)', 'surname(1,9)', 'surname(1,10)', 'surname(1,11)', 'surname(1,12)', 'surname(1,13)', 'surname(1,14)', 'surname(1,15)', 'surname(1,16)', 'surname(1,17)', 'surname(1,18)', 'surname(1,19)', 'surname(1,20)', 'surname(1,21)', 'surname(1,22)', 'surname(1,23)', 'surname(1,24)', 'surname(1,25)', 'surname(1,26)', 'surname(1,27)', 'surname(1,28)', 'surname(1,29)', 'surname(1,30)', 'surname(1,31)', 'surname(1,32)', 'surname(1,33)', 'surname(1,34)', 'surname(1,35)', 'surname(1,36)', 'surname(1,37)', 'surname(1,38)', 'surname(1,39)', 'surname(1,40)', 'surname(1,41)', 'surname(1,42)', 'surname(1,43)', 'surname(1,44)', 'surname(1,45)', 'surname(1,46)', 'surname(1,47)', 'surname(1,48)', 'surname(1,49)', 'surname(1,50)', 'surname(1,51)', 'surname(1,52)', 'surname(1,53)', 'surname(1,54)', 'surname(1,55)', 'surname(1,56)', 'surname(1,57)', 'surname(1,58)', 'surname(1,59)', 'surname(1,60)', 'surname(1,61)', 'surname(1,62)', 'surname(1,63)', 'surname(1,64)', 'surname(1,65)', 'surname(1,66)', 'surname(1,67)', 'surname(1,68)', 'surname(1,69)', 'surname(1,70)', 'surname(1,71)', 'surname(1,72)', 'surname(1,73)', 'surname(1,74)', 'surname(1,75)', 'surname(1,76)', 'surname(1,77)', 'surname(1,78)', 'surname(1,79)', 'surname(1,80)', 'surname(1,81)', 'surname(1,82)', 'surname(1,83)', 'surname(1,84)', 'surname(1,85)', 'surname(1,86)', 'surname(1,87)', 'surname(1,88)', 'surname(1,89)', 'surname(1,90)', 'surname(1,91)', 'surname(1,92)', 'surname(1,93)', 'surname(1,94)', 'surname(1,95)', 'surname(1,96)', 'surname(1,97)', 'surname(1,98)', 'surname(1,99)', 'surname(1,100)', 'surname(2,1)', 'surname(2,2)', 'surname(2,3)', 'surname(2,4)', 'surname(2,5)', 'surname(2,6)', 'surname(2,7)', 'surname(2,8)', 'surname(2,9)', 'surname(2,10)', 'surname(2,11)', 'surname(2,12)', 'surname(2,13)', 'surname(2,14)', 'surname(2,15)', 'surname(2,16)', 'surname(2,17)', 'surname(2,18)', 'surname(2,19)', 'surname(2,20)', 'surname(2,21)', 'surname(2,22)', 'surname(2,23)', 'surname(2,24)', 'surname(2,25)', 'surname(2,26)', 'surname(2,27)', 'surname(2,28)', 'surname(2,29)', 'surname(2,30)', 'surname(2,31)', 'surname(2,32)', 'surname(2,33)', 'surname(2,34)', 'surname(2,35)', 'surname(2,36)', 'surname(2,37)', 'surname(2,38)', 'surname(2,39)', 'surname(2,40)', 'surname(2,41)', 'surname(2,42)', 'surname(2,43)', 'surname(2,44)', 'surname(2,45)', 'surname(2,46)', 'surname(2,47)', 'surname(2,48)', 'surname(2,49)', 'surname(2,50)', 'surname(2,51)', 'surname(2,52)', 'surname(2,53)', 'surname(2,54)', 'surname(2,55)', 'surname(2,56)', 'surname(2,57)', 'surname(2,58)', 'surname(2,59)', 'surname(2,60)', 'surname(2,61)', 'surname(2,62)', 'surname(2,63)', 'surname(2,64)', 'surname(2,65)', 'surname(2,66)', 'surname(2,67)', 'surname(2,68)', 'surname(2,69)', 'surname(2,70)', 'surname(2,71)', 'surname(2,72)', 'surname(2,73)', 'surname(2,74)', 'surname(2,75)', 'surname(2,76)', 'surname(2,77)', 'surname(2,78)', 'surname(2,79)', 'surname(2,80)', 'surname(2,81)', 'surname(2,82)', 'surname(2,83)', 'surname(2,84)', 'surname(2,85)', 'surname(2,86)', 'surname(2,87)', 'surname(2,88)', 'surname(2,89)', 'surname(2,90)', 'surname(2,91)', 'surname(2,92)', 'surname(2,93)', 'surname(2,94)', 'surname(2,95)', 'surname(2,96)', 'surname(2,97)', 'surname(2,98)', 'surname(2,99)', 'surname(2,100)', 'surname(3,1)', 'surname(3,2)', 'surname(3,3)', 'surname(3,4)', 'surname(3,5)', 'surname(3,6)', 'surname(3,7)', 'surname(3,8)', 'surname(3,9)', 'surname(3,10)', 'surname(3,11)', 'surname(3,12)', 'surname(3,13)', 'surname(3,14)', 'surname(3,15)', 'surname(3,16)', 'surname(3,17)', 'surname(3,18)', 'surname(3,19)', 'surname(3,20)', 'surname(3,21)', 'surname(3,22)', 'surname(3,23)', 'surname(3,24)', 'surname(3,25)', 'surname(3,26)', 'surname(3,27)', 'surname(3,28)', 'surname(3,29)', 'surname(3,30)', 'surname(3,31)', 'surname(3,32)', 'surname(3,33)', 'surname(3,34)', 'surname(3,35)', 'surname(3,36)', 'surname(3,37)', 'surname(3,38)', 'surname(3,39)', 'surname(3,40)', 'surname(3,41)', 'surname(3,42)', 'surname(3,43)', 'surname(3,44)', 'surname(3,45)', 'surname(3,46)', 'surname(3,47)', 'surname(3,48)', 'surname(3,49)', 'surname(3,50)', 'surname(3,51)', 'surname(3,52)', 'surname(3,53)', 'surname(3,54)', 'surname(3,55)', 'surname(3,56)', 'surname(3,57)', 'surname(3,58)', 'surname(3,59)', 'surname(3,60)', 'surname(3,61)', 'surname(3,62)', 'surname(3,63)', 'surname(3,64)', 'surname(3,65)', 'surname(3,66)', 'surname(3,67)', 'surname(3,68)', 'surname(3,69)', 'surname(3,70)', 'surname(3,71)', 'surname(3,72)', 'surname(3,73)', 'surname(3,74)', 'surname(3,75)', 'surname(3,76)', 'surname(3,77)', 'surname(3,78)', 'surname(3,79)', 'surname(3,80)', 'surname(3,81)', 'surname(3,82)', 'surname(3,83)', 'surname(3,84)', 'surname(3,85)', 'surname(3,86)', 'surname(3,87)', 'surname(3,88)', 'surname(3,89)', 'surname(3,90)', 'surname(3,91)', 'surname(3,92)', 'surname(3,93)', 'surname(3,94)', 'surname(3,95)', 'surname(3,96)', 'surname(3,97)', 'surname(3,98)', 'surname(3,99)', 'surname(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['surname(1,1)', 'surname(1,2)', 'surname(1,3)', 'surname(1,4)', 'surname(1,5)', 'surname(1,6)', 'surname(1,7)', 'surname(1,8)', 'surname(1,9)', 'surname(1,10)', 'surname(1,11)', 'surname(1,12)', 'surname(1,13)', 'surname(1,14)', 'surname(1,15)', 'surname(1,16)', 'surname(1,17)', 'surname(1,18)', 'surname(1,19)', 'surname(1,20)', 'surname(1,21)', 'surname(1,22)', 'surname(1,23)', 'surname(1,24)', 'surname(1,25)', 'surname(1,26)', 'surname(1,27)', 'surname(1,28)', 'surname(1,29)', 'surname(1,30)', 'surname(1,31)', 'surname(1,32)', 'surname(1,33)', 'surname(1,34)', 'surname(1,35)', 'surname(1,36)', 'surname(1,37)', 'surname(1,38)', 'surname(1,39)', 'surname(1,40)', 'surname(1,41)', 'surname(1,42)', 'surname(1,43)', 'surname(1,44)', 'surname(1,45)', 'surname(1,46)', 'surname(1,47)', 'surname(1,48)', 'surname(1,49)', 'surname(1,50)', 'surname(1,51)', 'surname(1,52)', 'surname(1,53)', 'surname(1,54)', 'surname(1,55)', 'surname(1,56)', 'surname(1,57)', 'surname(1,58)', 'surname(1,59)', 'surname(1,60)', 'surname(1,61)', 'surname(1,62)', 'surname(1,63)', 'surname(1,64)', 'surname(1,65)', 'surname(1,66)', 'surname(1,67)', 'surname(1,68)', 'surname(1,69)', 'surname(1,70)', 'surname(1,71)', 'surname(1,72)', 'surname(1,73)', 'surname(1,74)', 'surname(1,75)', 'surname(1,76)', 'surname(1,77)', 'surname(1,78)', 'surname(1,79)', 'surname(1,80)', 'surname(1,81)', 'surname(1,82)', 'surname(1,83)', 'surname(1,84)', 'surname(1,85)', 'surname(1,86)', 'surname(1,87)', 'surname(1,88)', 'surname(1,89)', 'surname(1,90)', 'surname(1,91)', 'surname(1,92)', 'surname(1,93)', 'surname(1,94)', 'surname(1,95)', 'surname(1,96)', 'surname(1,97)', 'surname(1,98)', 'surname(1,99)', 'surname(1,100)', 'surname(2,1)', 'surname(2,2)', 'surname(2,3)', 'surname(2,4)', 'surname(2,5)', 'surname(2,6)', 'surname(2,7)', 'surname(2,8)', 'surname(2,9)', 'surname(2,10)', 'surname(2,11)', 'surname(2,12)', 'surname(2,13)', 'surname(2,14)', 'surname(2,15)', 'surname(2,16)', 'surname(2,17)', 'surname(2,18)', 'surname(2,19)', 'surname(2,20)', 'surname(2,21)', 'surname(2,22)', 'surname(2,23)', 'surname(2,24)', 'surname(2,25)', 'surname(2,26)', 'surname(2,27)', 'surname(2,28)', 'surname(2,29)', 'surname(2,30)', 'surname(2,31)', 'surname(2,32)', 'surname(2,33)', 'surname(2,34)', 'surname(2,35)', 'surname(2,36)', 'surname(2,37)', 'surname(2,38)', 'surname(2,39)', 'surname(2,40)', 'surname(2,41)', 'surname(2,42)', 'surname(2,43)', 'surname(2,44)', 'surname(2,45)', 'surname(2,46)', 'surname(2,47)', 'surname(2,48)', 'surname(2,49)', 'surname(2,50)', 'surname(2,51)', 'surname(2,52)', 'surname(2,53)', 'surname(2,54)', 'surname(2,55)', 'surname(2,56)', 'surname(2,57)', 'surname(2,58)', 'surname(2,59)', 'surname(2,60)', 'surname(2,61)', 'surname(2,62)', 'surname(2,63)', 'surname(2,64)', 'surname(2,65)', 'surname(2,66)', 'surname(2,67)', 'surname(2,68)', 'surname(2,69)', 'surname(2,70)', 'surname(2,71)', 'surname(2,72)', 'surname(2,73)', 'surname(2,74)', 'surname(2,75)', 'surname(2,76)', 'surname(2,77)', 'surname(2,78)', 'surname(2,79)', 'surname(2,80)', 'surname(2,81)', 'surname(2,82)', 'surname(2,83)', 'surname(2,84)', 'surname(2,85)', 'surname(2,86)', 'surname(2,87)', 'surname(2,88)', 'surname(2,89)', 'surname(2,90)', 'surname(2,91)', 'surname(2,92)', 'surname(2,93)', 'surname(2,94)', 'surname(2,95)', 'surname(2,96)', 'surname(2,97)', 'surname(2,98)', 'surname(2,99)', 'surname(2,100)', 'surname(3,1)', 'surname(3,2)', 'surname(3,3)', 'surname(3,4)', 'surname(3,5)', 'surname(3,6)', 'surname(3,7)', 'surname(3,8)', 'surname(3,9)', 'surname(3,10)', 'surname(3,11)', 'surname(3,12)', 'surname(3,13)', 'surname(3,14)', 'surname(3,15)', 'surname(3,16)', 'surname(3,17)', 'surname(3,18)', 'surname(3,19)', 'surname(3,20)', 'surname(3,21)', 'surname(3,22)', 'surname(3,23)', 'surname(3,24)', 'surname(3,25)', 'surname(3,26)', 'surname(3,27)', 'surname(3,28)', 'surname(3,29)', 'surname(3,30)', 'surname(3,31)', 'surname(3,32)', 'surname(3,33)', 'surname(3,34)', 'surname(3,35)', 'surname(3,36)', 'surname(3,37)', 'surname(3,38)', 'surname(3,39)', 'surname(3,40)', 'surname(3,41)', 'surname(3,42)', 'surname(3,43)', 'surname(3,44)', 'surname(3,45)', 'surname(3,46)', 'surname(3,47)', 'surname(3,48)', 'surname(3,49)', 'surname(3,50)', 'surname(3,51)', 'surname(3,52)', 'surname(3,53)', 'surname(3,54)', 'surname(3,55)', 'surname(3,56)', 'surname(3,57)', 'surname(3,58)', 'surname(3,59)', 'surname(3,60)', 'surname(3,61)', 'surname(3,62)', 'surname(3,63)', 'surname(3,64)', 'surname(3,65)', 'surname(3,66)', 'surname(3,67)', 'surname(3,68)', 'surname(3,69)', 'surname(3,70)', 'surname(3,71)', 'surname(3,72)', 'surname(3,73)', 'surname(3,74)', 'surname(3,75)', 'surname(3,76)', 'surname(3,77)', 'surname(3,78)', 'surname(3,79)', 'surname(3,80)', 'surname(3,81)', 'surname(3,82)', 'surname(3,83)', 'surname(3,84)', 'surname(3,85)', 'surname(3,86)', 'surname(3,87)', 'surname(3,88)', 'surname(3,89)', 'surname(3,90)', 'surname(3,91)', 'surname(3,92)', 'surname(3,93)', 'surname(3,94)', 'surname(3,95)', 'surname(3,96)', 'surname(3,97)', 'surname(3,98)', 'surname(3,99)', 'surname(3,100)', 'select(1)', 'select(2)', 'select(3)']]


459
assignment

question: 
Develop an ASP script that ensures each element, as specified by the predicate "quality", receives exactly one label from the set "surname","cosenza".

answer from file: 
assign(X,"surname")|assign(X,"cosenza"):-quality(X).

parsed from model: 
assign(X,"surname")|assign(X,"cosenza"):-quality(X).

facts: 
quality(1..5).

generated: 
Develop an ASP script that ensures each element, as specified by the predicate "quality", receives exactly one label from the set "surname","cosenza".
Answer: assign(X,"surname")|assign(X,"cosenza"):-quality(X).
assign(X,"name"):-quality(X).
assign(X,"author"):-quality(X).
assign(X,"description"):-quality(X).
assign(X,"moto"):-quality(X).
assign(X,"rome"):-quality(X).
assign(X,"description","rome"):-quality(X).
assign(X,"description","moto"):-quality(X).
assign(X,"description","author"):-quality(X).
assign(X,"description","description"):-quality(X).

unique_rules: 
['assign(X,"surname")|assign(X,"cosenza"):-quality(X).', 'assign(X,"name"):-quality(X).', 'assign(X,"author"):-quality(X).', 'assign(X,"description"):-quality(X).', 'assign(X,"moto"):-quality(X).', 'assign(X,"rome"):-quality(X).', 'assign(X,"description","rome"):-quality(X).', 'assign(X,"description","moto"):-quality(X).', 'assign(X,"description","author"):-quality(X).', 'assign(X,"description","description"):-quality(X).']

jaccard: 1.0

AS desired: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'assign(1,"cosenza")', 'assign(2,"surname")', 'assign(3,"surname")', 'assign(4,"cosenza")', 'assign(5,"surname")']]
\AS obtained: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'assign(1,"cosenza")', 'assign(2,"surname")', 'assign(3,"surname")', 'assign(4,"cosenza")', 'assign(5,"surname")']]


460
constraint

question: 
Design an ASP application that prohibits assigning the "flower" predicate with value 9 to the label "toronto".

answer from file: 
:-assign(9,toronto).

parsed from model: 
:-assign(9,toronto).

facts: 
flower(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-flower(X).

generated: 
Design an ASP application that prohibits assigning the "flower" predicate with value 9 to the label "toronto".
Answer: :-assign(9,toronto).
Explanation: The predicate "florence" includes values 1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,4

unique_rules: 
[':-assign(9,toronto).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'flower(1)', 'flower(2)', 'flower(3)', 'flower(4)', 'flower(5)', 'flower(6)', 'flower(7)', 'flower(8)', 'flower(9)', 'flower(10)', 'flower(11)', 'flower(12)', 'flower(13)', 'flower(14)', 'flower(15)', 'flower(16)', 'flower(17)', 'flower(18)', 'flower(19)', 'flower(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'flower(1)', 'flower(2)', 'flower(3)', 'flower(4)', 'flower(5)', 'flower(6)', 'flower(7)', 'flower(8)', 'flower(9)', 'flower(10)', 'flower(11)', 'flower(12)', 'flower(13)', 'flower(14)', 'flower(15)', 'flower(16)', 'flower(17)', 'flower(18)', 'flower(19)', 'flower(20)']]


461
combination

question: 
Craft an ASP application to list valid combinations of elements between the predicates "cairo" and "chicago".

answer from file: 
combination(X,Y):-cairo(X),chicago(Y).

parsed from model: 
combination(X,Y):-cairo(X),chicago(Y).

facts: 
cairo(1..4).chicago(1..5).

generated: 
Craft an ASP application to list valid combinations of elements between the predicates "cairo" and "chicago".
Answer: combination(X,Y):-cairo(X),chicago(Y).
combination(X,Y):-cairo(X),not chicago(Y).
combination(X,Y):-not cairo(X),chicago(Y).

unique_rules: 
['combination(X,Y):-cairo(X),chicago(Y).', 'combination(X,Y):-cairo(X),not chicago(Y).', 'combination(X,Y):-not cairo(X),chicago(Y).']

jaccard: 1.0

AS desired: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'chicago(5)', 'cairo(1)', 'cairo(2)', 'cairo(3)', 'cairo(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'chicago(5)', 'cairo(1)', 'cairo(2)', 'cairo(3)', 'cairo(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


462
join

question: 
Create an ASP script to define the predicate "pink_wall" that links each pink to the owner of wall, given that "pink" has fields "ID","weight","lake","wallID","hair" and "wall" has fields "ID","surname","lake","owner".

answer from file: 
pink_wall(X,Z):-pink(X,_,_,Y,_),wall(Y,_,_,Z).

parsed from model: 
pink_wall(X,Z):-pink(X,_,_,Y,_),wall(Y,_,_,Z).

facts: 
pink("ID","weight","lake","wallID","hair").wall("ID","surname","lake","owner").

generated: 
Create an ASP script to define the predicate "pink_wall" that links each pink to the owner of wall, given that "pink" has fields "ID","weight","lake","wallID","hair" and "wall" has fields "ID","surname","lake","owner". Define the predicate "pink_wall" that links each pink to the owner of wall.
Answer: pink_wall(X,Z):-pink(X,_,_,Y,_),wall(Y,_,_,Z).
pink_wall(X,Z):-pink(X,_,_,Y),wall(Y,_,_,X).

unique_rules: 
['pink_wall(X,Z):-pink(X,_,_,Y,_),wall(Y,_,_,Z).', 'pink_wall(X,Z):-pink(X,_,_,Y),wall(Y,_,_,X).']

jaccard: 1.0

AS desired: [['pink("ID","weight","lake","wallID","hair")', 'wall("ID","surname","lake","owner")']]
\AS obtained: [['pink("ID","weight","lake","wallID","hair")', 'wall("ID","surname","lake","owner")']]


463
closure

question: 
Design an ASP program that infers the "trains" predicate using the transitive closure of the "delhi" predicate.

answer from file: 
trains(X,Y):-delhi(X,Y).
trains(X,Y):-delhi(X,Z),trains(Z,Y).

parsed from model: 
trains(X,Y):-delhi(X,Y).
trains(X,Y):-delhi(X,Z),trains(Z,Y).

facts: 
delhi(1..3, 1..4).

generated: 
Design an ASP program that infers the "trains" predicate using the transitive closure of the "delhi" predicate.
Answer: trains(X,Y):-delhi(X,Y).
trains(X,Y):-delhi(X,Z),trains(Z,Y).
trains(X,Y):-delhi(X,Z),not trains(Z,Y).
delhi(X,Y):-city(X,Y).
city(X,Y):-bike(X,Y).
bike(X,Y):-moto(X,Y).
moto(X,Y):-dubai(X,Y).
dubai(X,Y):-car(X,Y).

unique_rules: 
['trains(X,Y):-delhi(X,Y).', 'trains(X,Y):-delhi(X,Z),trains(Z,Y).', 'trains(X,Y):-delhi(X,Z),not trains(Z,Y).', 'delhi(X,Y):-city(X,Y).', 'city(X,Y):-bike(X,Y).', 'bike(X,Y):-moto(X,Y).', 'moto(X,Y):-dubai(X,Y).', 'dubai(X,Y):-car(X,Y).']

jaccard: 1.0

AS desired: [['delhi(1,1)', 'delhi(1,2)', 'delhi(1,3)', 'delhi(1,4)', 'delhi(2,1)', 'delhi(2,2)', 'delhi(2,3)', 'delhi(2,4)', 'delhi(3,1)', 'delhi(3,2)', 'delhi(3,3)', 'delhi(3,4)', 'trains(1,1)', 'trains(1,2)', 'trains(1,3)', 'trains(1,4)', 'trains(2,1)', 'trains(2,2)', 'trains(2,3)', 'trains(2,4)', 'trains(3,1)', 'trains(3,2)', 'trains(3,3)', 'trains(3,4)']]
\AS obtained: [['delhi(1,1)', 'delhi(1,2)', 'delhi(1,3)', 'delhi(1,4)', 'delhi(2,1)', 'delhi(2,2)', 'delhi(2,3)', 'delhi(2,4)', 'delhi(3,1)', 'delhi(3,2)', 'delhi(3,3)', 'delhi(3,4)', 'trains(1,1)', 'trains(1,2)', 'trains(1,3)', 'trains(1,4)', 'trains(2,1)', 'trains(2,2)', 'trains(2,3)', 'trains(2,4)', 'trains(3,1)', 'trains(3,2)', 'trains(3,3)', 'trains(3,4)']]


464
preference

question: 
Draft an ASP solution to make sure the predicate "lightblue" with value "1" is not connected to "surname". If connected, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(1,"surname").[1@1]

parsed from model: 
:~assign(1,"surname").[1@1]

facts: 
lightblue(1..20).

generated: 
Draft an ASP solution to make sure the predicate "lightblue" with value "1" is not connected to "surname". If connected, it incurs a cost of "1" at level "1".
Answer: :~assign(1,"surname").[1@1]
Explanation: The predicate "lightblue" with value "1" is not connected to the "description" label.
The predicate "description" with value "1" is connected to the "author" label.
The predicate "author" with value "1" is connected to the "author" label.
The predicate "author" with value "1" is not connected to the "description" label.
The predicate "description" with value "1" is connected to the "author" label.
The predicate "author" with value "1" is connected to the "description" label.
The predicate "description" with value "

unique_rules: 
[':~assign(1,"surname").[1@1]']

jaccard: 1.0

AS desired: [['lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'lightblue(4)', 'lightblue(5)', 'lightblue(6)', 'lightblue(7)', 'lightblue(8)', 'lightblue(9)', 'lightblue(10)', 'lightblue(11)', 'lightblue(12)', 'lightblue(13)', 'lightblue(14)', 'lightblue(15)', 'lightblue(16)', 'lightblue(17)', 'lightblue(18)', 'lightblue(19)', 'lightblue(20)']]
\AS obtained: [['lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'lightblue(4)', 'lightblue(5)', 'lightblue(6)', 'lightblue(7)', 'lightblue(8)', 'lightblue(9)', 'lightblue(10)', 'lightblue(11)', 'lightblue(12)', 'lightblue(13)', 'lightblue(14)', 'lightblue(15)', 'lightblue(16)', 'lightblue(17)', 'lightblue(18)', 'lightblue(19)', 'lightblue(20)']]


465
filtering

question: 
Craft an ASP code snippet to capture all relevant values for the "barcelona" label within the "barcelona" predicate.

answer from file: 
select(X):-barcelona(X,"barcelona").

parsed from model: 
select(X):-barcelona(X,"shangai").

facts: 
barcelona(1..5, "barcelona").

generated: 
Craft an ASP code snippet to capture all relevant values for the "barcelona" label within the "barcelona" predicate.
Answer: select(X):-barcelona(X,"shangai").
select(X):-barcelona(X,"city").
select(X):-barcelona(X,"moto").
select(X):-barcelona(X,"author").
select(X):-barcelona(X,"description").
select(X):-barcelona(X,"height").
select(X):-barcelona(X,"author","shangai").
select(X):-barcelona(X,"author","city").
select(X):-barcelona(X,"author","moto").
select(X):-barcelona(X,"author","author").
select(X):-barcelona(X,"author","description").
select(X):-barcelona(X,"author","height").
select

unique_rules: 
['select(X):-barcelona(X,"shangai").', 'select(X):-barcelona(X,"city").', 'select(X):-barcelona(X,"moto").', 'select(X):-barcelona(X,"author").', 'select(X):-barcelona(X,"description").', 'select(X):-barcelona(X,"height").', 'select(X):-barcelona(X,"author","shangai").', 'select(X):-barcelona(X,"author","city").', 'select(X):-barcelona(X,"author","moto").', 'select(X):-barcelona(X,"author","author").', 'select(X):-barcelona(X,"author","description").', 'select(X):-barcelona(X,"author","height").']

jaccard: 0.0

AS desired: [['barcelona(1,"barcelona")', 'barcelona(2,"barcelona")', 'barcelona(3,"barcelona")', 'barcelona(4,"barcelona")', 'barcelona(5,"barcelona")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['barcelona(1,"barcelona")', 'barcelona(2,"barcelona")', 'barcelona(3,"barcelona")', 'barcelona(4,"barcelona")', 'barcelona(5,"barcelona")']]


466
negative_filtering

question: 
Compose an ASP solution to identify all values connected to the predicate "darkmagenta" but not to the predicate "moscow" and labeled "laptop".

answer from file: 
select(X):-darkmagenta(X),not moscow(X,"laptop").

parsed from model: 
select(X):-darkmagenta(X),not moscow(X,"laptop").

facts: 
darkmagenta(1..3).moscow(1,"quality").moscow(2,"wall").moscow(3,"laptop").

generated: 
Compose an ASP solution to identify all values connected to the predicate "darkmagenta" but not to the predicate "moscow" and labeled "laptop".
Answer: select(X):-darkmagenta(X),not moscow(X,"laptop").
darkmagenta(X):-age(X,"height"),height(X,"height").
moscow(X,"laptop"):-age(X,"height").

unique_rules: 
['select(X):-darkmagenta(X),not moscow(X,"laptop").', 'darkmagenta(X):-age(X,"height"),height(X,"height").', 'moscow(X,"laptop"):-age(X,"height").']

jaccard: 1.0

AS desired: [['darkmagenta(1)', 'darkmagenta(2)', 'darkmagenta(3)', 'moscow(1,"quality")', 'moscow(2,"wall")', 'moscow(3,"laptop")', 'select(1)', 'select(2)']]
\AS obtained: [['darkmagenta(1)', 'darkmagenta(2)', 'darkmagenta(3)', 'moscow(1,"quality")', 'moscow(2,"wall")', 'moscow(3,"laptop")', 'select(1)', 'select(2)']]


467
numeric_filtering

question: 
Generate an ASP code to capture values associated with the predicate "chair" with a value different than 66.

answer from file: 
select(X):-chair(X,C),C!=66.

parsed from model: 
select(X):-chair(X,C),C!=66.

facts: 
chair(1..3, 1..100).

generated: 
Generate an ASP code to capture values associated with the predicate "chair" with a value different than 66.
Answer: select(X):-chair(X,C),C!=66.
chair(X,C):-chair(X,C),C==66.

unique_rules: 
['select(X):-chair(X,C),C!=66.', 'chair(X,C):-chair(X,C),C==66.']

jaccard: 1.0

AS desired: [['chair(1,1)', 'chair(1,2)', 'chair(1,3)', 'chair(1,4)', 'chair(1,5)', 'chair(1,6)', 'chair(1,7)', 'chair(1,8)', 'chair(1,9)', 'chair(1,10)', 'chair(1,11)', 'chair(1,12)', 'chair(1,13)', 'chair(1,14)', 'chair(1,15)', 'chair(1,16)', 'chair(1,17)', 'chair(1,18)', 'chair(1,19)', 'chair(1,20)', 'chair(1,21)', 'chair(1,22)', 'chair(1,23)', 'chair(1,24)', 'chair(1,25)', 'chair(1,26)', 'chair(1,27)', 'chair(1,28)', 'chair(1,29)', 'chair(1,30)', 'chair(1,31)', 'chair(1,32)', 'chair(1,33)', 'chair(1,34)', 'chair(1,35)', 'chair(1,36)', 'chair(1,37)', 'chair(1,38)', 'chair(1,39)', 'chair(1,40)', 'chair(1,41)', 'chair(1,42)', 'chair(1,43)', 'chair(1,44)', 'chair(1,45)', 'chair(1,46)', 'chair(1,47)', 'chair(1,48)', 'chair(1,49)', 'chair(1,50)', 'chair(1,51)', 'chair(1,52)', 'chair(1,53)', 'chair(1,54)', 'chair(1,55)', 'chair(1,56)', 'chair(1,57)', 'chair(1,58)', 'chair(1,59)', 'chair(1,60)', 'chair(1,61)', 'chair(1,62)', 'chair(1,63)', 'chair(1,64)', 'chair(1,65)', 'chair(1,66)', 'chair(1,67)', 'chair(1,68)', 'chair(1,69)', 'chair(1,70)', 'chair(1,71)', 'chair(1,72)', 'chair(1,73)', 'chair(1,74)', 'chair(1,75)', 'chair(1,76)', 'chair(1,77)', 'chair(1,78)', 'chair(1,79)', 'chair(1,80)', 'chair(1,81)', 'chair(1,82)', 'chair(1,83)', 'chair(1,84)', 'chair(1,85)', 'chair(1,86)', 'chair(1,87)', 'chair(1,88)', 'chair(1,89)', 'chair(1,90)', 'chair(1,91)', 'chair(1,92)', 'chair(1,93)', 'chair(1,94)', 'chair(1,95)', 'chair(1,96)', 'chair(1,97)', 'chair(1,98)', 'chair(1,99)', 'chair(1,100)', 'chair(2,1)', 'chair(2,2)', 'chair(2,3)', 'chair(2,4)', 'chair(2,5)', 'chair(2,6)', 'chair(2,7)', 'chair(2,8)', 'chair(2,9)', 'chair(2,10)', 'chair(2,11)', 'chair(2,12)', 'chair(2,13)', 'chair(2,14)', 'chair(2,15)', 'chair(2,16)', 'chair(2,17)', 'chair(2,18)', 'chair(2,19)', 'chair(2,20)', 'chair(2,21)', 'chair(2,22)', 'chair(2,23)', 'chair(2,24)', 'chair(2,25)', 'chair(2,26)', 'chair(2,27)', 'chair(2,28)', 'chair(2,29)', 'chair(2,30)', 'chair(2,31)', 'chair(2,32)', 'chair(2,33)', 'chair(2,34)', 'chair(2,35)', 'chair(2,36)', 'chair(2,37)', 'chair(2,38)', 'chair(2,39)', 'chair(2,40)', 'chair(2,41)', 'chair(2,42)', 'chair(2,43)', 'chair(2,44)', 'chair(2,45)', 'chair(2,46)', 'chair(2,47)', 'chair(2,48)', 'chair(2,49)', 'chair(2,50)', 'chair(2,51)', 'chair(2,52)', 'chair(2,53)', 'chair(2,54)', 'chair(2,55)', 'chair(2,56)', 'chair(2,57)', 'chair(2,58)', 'chair(2,59)', 'chair(2,60)', 'chair(2,61)', 'chair(2,62)', 'chair(2,63)', 'chair(2,64)', 'chair(2,65)', 'chair(2,66)', 'chair(2,67)', 'chair(2,68)', 'chair(2,69)', 'chair(2,70)', 'chair(2,71)', 'chair(2,72)', 'chair(2,73)', 'chair(2,74)', 'chair(2,75)', 'chair(2,76)', 'chair(2,77)', 'chair(2,78)', 'chair(2,79)', 'chair(2,80)', 'chair(2,81)', 'chair(2,82)', 'chair(2,83)', 'chair(2,84)', 'chair(2,85)', 'chair(2,86)', 'chair(2,87)', 'chair(2,88)', 'chair(2,89)', 'chair(2,90)', 'chair(2,91)', 'chair(2,92)', 'chair(2,93)', 'chair(2,94)', 'chair(2,95)', 'chair(2,96)', 'chair(2,97)', 'chair(2,98)', 'chair(2,99)', 'chair(2,100)', 'chair(3,1)', 'chair(3,2)', 'chair(3,3)', 'chair(3,4)', 'chair(3,5)', 'chair(3,6)', 'chair(3,7)', 'chair(3,8)', 'chair(3,9)', 'chair(3,10)', 'chair(3,11)', 'chair(3,12)', 'chair(3,13)', 'chair(3,14)', 'chair(3,15)', 'chair(3,16)', 'chair(3,17)', 'chair(3,18)', 'chair(3,19)', 'chair(3,20)', 'chair(3,21)', 'chair(3,22)', 'chair(3,23)', 'chair(3,24)', 'chair(3,25)', 'chair(3,26)', 'chair(3,27)', 'chair(3,28)', 'chair(3,29)', 'chair(3,30)', 'chair(3,31)', 'chair(3,32)', 'chair(3,33)', 'chair(3,34)', 'chair(3,35)', 'chair(3,36)', 'chair(3,37)', 'chair(3,38)', 'chair(3,39)', 'chair(3,40)', 'chair(3,41)', 'chair(3,42)', 'chair(3,43)', 'chair(3,44)', 'chair(3,45)', 'chair(3,46)', 'chair(3,47)', 'chair(3,48)', 'chair(3,49)', 'chair(3,50)', 'chair(3,51)', 'chair(3,52)', 'chair(3,53)', 'chair(3,54)', 'chair(3,55)', 'chair(3,56)', 'chair(3,57)', 'chair(3,58)', 'chair(3,59)', 'chair(3,60)', 'chair(3,61)', 'chair(3,62)', 'chair(3,63)', 'chair(3,64)', 'chair(3,65)', 'chair(3,66)', 'chair(3,67)', 'chair(3,68)', 'chair(3,69)', 'chair(3,70)', 'chair(3,71)', 'chair(3,72)', 'chair(3,73)', 'chair(3,74)', 'chair(3,75)', 'chair(3,76)', 'chair(3,77)', 'chair(3,78)', 'chair(3,79)', 'chair(3,80)', 'chair(3,81)', 'chair(3,82)', 'chair(3,83)', 'chair(3,84)', 'chair(3,85)', 'chair(3,86)', 'chair(3,87)', 'chair(3,88)', 'chair(3,89)', 'chair(3,90)', 'chair(3,91)', 'chair(3,92)', 'chair(3,93)', 'chair(3,94)', 'chair(3,95)', 'chair(3,96)', 'chair(3,97)', 'chair(3,98)', 'chair(3,99)', 'chair(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['chair(1,1)', 'chair(1,2)', 'chair(1,3)', 'chair(1,4)', 'chair(1,5)', 'chair(1,6)', 'chair(1,7)', 'chair(1,8)', 'chair(1,9)', 'chair(1,10)', 'chair(1,11)', 'chair(1,12)', 'chair(1,13)', 'chair(1,14)', 'chair(1,15)', 'chair(1,16)', 'chair(1,17)', 'chair(1,18)', 'chair(1,19)', 'chair(1,20)', 'chair(1,21)', 'chair(1,22)', 'chair(1,23)', 'chair(1,24)', 'chair(1,25)', 'chair(1,26)', 'chair(1,27)', 'chair(1,28)', 'chair(1,29)', 'chair(1,30)', 'chair(1,31)', 'chair(1,32)', 'chair(1,33)', 'chair(1,34)', 'chair(1,35)', 'chair(1,36)', 'chair(1,37)', 'chair(1,38)', 'chair(1,39)', 'chair(1,40)', 'chair(1,41)', 'chair(1,42)', 'chair(1,43)', 'chair(1,44)', 'chair(1,45)', 'chair(1,46)', 'chair(1,47)', 'chair(1,48)', 'chair(1,49)', 'chair(1,50)', 'chair(1,51)', 'chair(1,52)', 'chair(1,53)', 'chair(1,54)', 'chair(1,55)', 'chair(1,56)', 'chair(1,57)', 'chair(1,58)', 'chair(1,59)', 'chair(1,60)', 'chair(1,61)', 'chair(1,62)', 'chair(1,63)', 'chair(1,64)', 'chair(1,65)', 'chair(1,66)', 'chair(1,67)', 'chair(1,68)', 'chair(1,69)', 'chair(1,70)', 'chair(1,71)', 'chair(1,72)', 'chair(1,73)', 'chair(1,74)', 'chair(1,75)', 'chair(1,76)', 'chair(1,77)', 'chair(1,78)', 'chair(1,79)', 'chair(1,80)', 'chair(1,81)', 'chair(1,82)', 'chair(1,83)', 'chair(1,84)', 'chair(1,85)', 'chair(1,86)', 'chair(1,87)', 'chair(1,88)', 'chair(1,89)', 'chair(1,90)', 'chair(1,91)', 'chair(1,92)', 'chair(1,93)', 'chair(1,94)', 'chair(1,95)', 'chair(1,96)', 'chair(1,97)', 'chair(1,98)', 'chair(1,99)', 'chair(1,100)', 'chair(2,1)', 'chair(2,2)', 'chair(2,3)', 'chair(2,4)', 'chair(2,5)', 'chair(2,6)', 'chair(2,7)', 'chair(2,8)', 'chair(2,9)', 'chair(2,10)', 'chair(2,11)', 'chair(2,12)', 'chair(2,13)', 'chair(2,14)', 'chair(2,15)', 'chair(2,16)', 'chair(2,17)', 'chair(2,18)', 'chair(2,19)', 'chair(2,20)', 'chair(2,21)', 'chair(2,22)', 'chair(2,23)', 'chair(2,24)', 'chair(2,25)', 'chair(2,26)', 'chair(2,27)', 'chair(2,28)', 'chair(2,29)', 'chair(2,30)', 'chair(2,31)', 'chair(2,32)', 'chair(2,33)', 'chair(2,34)', 'chair(2,35)', 'chair(2,36)', 'chair(2,37)', 'chair(2,38)', 'chair(2,39)', 'chair(2,40)', 'chair(2,41)', 'chair(2,42)', 'chair(2,43)', 'chair(2,44)', 'chair(2,45)', 'chair(2,46)', 'chair(2,47)', 'chair(2,48)', 'chair(2,49)', 'chair(2,50)', 'chair(2,51)', 'chair(2,52)', 'chair(2,53)', 'chair(2,54)', 'chair(2,55)', 'chair(2,56)', 'chair(2,57)', 'chair(2,58)', 'chair(2,59)', 'chair(2,60)', 'chair(2,61)', 'chair(2,62)', 'chair(2,63)', 'chair(2,64)', 'chair(2,65)', 'chair(2,66)', 'chair(2,67)', 'chair(2,68)', 'chair(2,69)', 'chair(2,70)', 'chair(2,71)', 'chair(2,72)', 'chair(2,73)', 'chair(2,74)', 'chair(2,75)', 'chair(2,76)', 'chair(2,77)', 'chair(2,78)', 'chair(2,79)', 'chair(2,80)', 'chair(2,81)', 'chair(2,82)', 'chair(2,83)', 'chair(2,84)', 'chair(2,85)', 'chair(2,86)', 'chair(2,87)', 'chair(2,88)', 'chair(2,89)', 'chair(2,90)', 'chair(2,91)', 'chair(2,92)', 'chair(2,93)', 'chair(2,94)', 'chair(2,95)', 'chair(2,96)', 'chair(2,97)', 'chair(2,98)', 'chair(2,99)', 'chair(2,100)', 'chair(3,1)', 'chair(3,2)', 'chair(3,3)', 'chair(3,4)', 'chair(3,5)', 'chair(3,6)', 'chair(3,7)', 'chair(3,8)', 'chair(3,9)', 'chair(3,10)', 'chair(3,11)', 'chair(3,12)', 'chair(3,13)', 'chair(3,14)', 'chair(3,15)', 'chair(3,16)', 'chair(3,17)', 'chair(3,18)', 'chair(3,19)', 'chair(3,20)', 'chair(3,21)', 'chair(3,22)', 'chair(3,23)', 'chair(3,24)', 'chair(3,25)', 'chair(3,26)', 'chair(3,27)', 'chair(3,28)', 'chair(3,29)', 'chair(3,30)', 'chair(3,31)', 'chair(3,32)', 'chair(3,33)', 'chair(3,34)', 'chair(3,35)', 'chair(3,36)', 'chair(3,37)', 'chair(3,38)', 'chair(3,39)', 'chair(3,40)', 'chair(3,41)', 'chair(3,42)', 'chair(3,43)', 'chair(3,44)', 'chair(3,45)', 'chair(3,46)', 'chair(3,47)', 'chair(3,48)', 'chair(3,49)', 'chair(3,50)', 'chair(3,51)', 'chair(3,52)', 'chair(3,53)', 'chair(3,54)', 'chair(3,55)', 'chair(3,56)', 'chair(3,57)', 'chair(3,58)', 'chair(3,59)', 'chair(3,60)', 'chair(3,61)', 'chair(3,62)', 'chair(3,63)', 'chair(3,64)', 'chair(3,65)', 'chair(3,66)', 'chair(3,67)', 'chair(3,68)', 'chair(3,69)', 'chair(3,70)', 'chair(3,71)', 'chair(3,72)', 'chair(3,73)', 'chair(3,74)', 'chair(3,75)', 'chair(3,76)', 'chair(3,77)', 'chair(3,78)', 'chair(3,79)', 'chair(3,80)', 'chair(3,81)', 'chair(3,82)', 'chair(3,83)', 'chair(3,84)', 'chair(3,85)', 'chair(3,86)', 'chair(3,87)', 'chair(3,88)', 'chair(3,89)', 'chair(3,90)', 'chair(3,91)', 'chair(3,92)', 'chair(3,93)', 'chair(3,94)', 'chair(3,95)', 'chair(3,96)', 'chair(3,97)', 'chair(3,98)', 'chair(3,99)', 'chair(3,100)', 'select(1)', 'select(2)', 'select(3)']]


468
assignment

question: 
Develop an ASP script that ensures each element, as specified by the predicate "black", receives exactly one label from the set "desk","cairo","singapore","pink","surname".

answer from file: 
assign(X,"desk")|assign(X,"cairo")|assign(X,"singapore")|assign(X,"pink")|assign(X,"surname"):-black(X).

parsed from model: 
assign(X,"desk")|assign(X,"cairo")|assign(X,"singapore")|assign(X,"pink")|assign(X,"surname"):-black(X).

facts: 
black(1..5).

generated: 
Develop an ASP script that ensures each element, as specified by the predicate "black", receives exactly one label from the set "desk","cairo","singapore","pink","surname".
Answer: assign(X,"desk")|assign(X,"cairo")|assign(X,"singapore")|assign(X,"pink")|assign(X,"surname"):-black(X).
black(X):-black(X,"description").
black(X,"description"):-black(X).
black(X,"description"):-name(X,"description").
black(X,"description"):-name(X,"city").
black(X,"description"):-name(X,"author").
black(X,"description"):-name(X,"description").

unique_rules: 
['assign(X,"desk")|assign(X,"cairo")|assign(X,"singapore")|assign(X,"pink")|assign(X,"surname"):-black(X).', 'black(X):-black(X,"description").', 'black(X,"description"):-black(X).', 'black(X,"description"):-name(X,"description").', 'black(X,"description"):-name(X,"city").', 'black(X,"description"):-name(X,"author").']

jaccard: 1.0

AS desired: [['black(1)', 'black(2)', 'black(3)', 'black(4)', 'black(5)', 'assign(1,"surname")', 'assign(2,"surname")', 'assign(3,"surname")', 'assign(4,"surname")', 'assign(5,"surname")']]
\AS obtained: [['black(1)', 'black(2)', 'black(3)', 'black(4)', 'black(5)', 'assign(1,"surname")', 'assign(2,"surname")', 'assign(3,"surname")', 'assign(4,"surname")', 'assign(5,"surname")']]


469
constraint

question: 
Produce an ASP program that prevents associating the "desk" predicate with value 11 with the label "owner".

answer from file: 
:-assign(11,owner).

parsed from model: 
:-assign(11,owner).

facts: 
desk(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-desk(X).

generated: 
Produce an ASP program that prevents associating the "desk" predicate with value 11 with the label "owner".
Answer: :-assign(11,owner).
Explanation: The predicate "author" includes the "description" label for the "table" and "moto" predicates, and the predicate "moto" includes the "description" label for the "moto" and "height" predicates.
The predicate "bike" includes the "description" label for the "bike" and "height" predicates.
The predicate "description" includes the "description" label for the "table","moto","height","author","city","description","rome","name","price","author","city","description","height","moto","city","description","rome","name","price","author","city","description","height","moto","city","description","rome

unique_rules: 
[':-assign(11,owner).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'desk(1)', 'desk(2)', 'desk(3)', 'desk(4)', 'desk(5)', 'desk(6)', 'desk(7)', 'desk(8)', 'desk(9)', 'desk(10)', 'desk(11)', 'desk(12)', 'desk(13)', 'desk(14)', 'desk(15)', 'desk(16)', 'desk(17)', 'desk(18)', 'desk(19)', 'desk(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'desk(1)', 'desk(2)', 'desk(3)', 'desk(4)', 'desk(5)', 'desk(6)', 'desk(7)', 'desk(8)', 'desk(9)', 'desk(10)', 'desk(11)', 'desk(12)', 'desk(13)', 'desk(14)', 'desk(15)', 'desk(16)', 'desk(17)', 'desk(18)', 'desk(19)', 'desk(20)']]


470
combination

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "surname" and "cloud".

answer from file: 
combination(X,Y):-surname(X),cloud(Y).

parsed from model: 
combination(X,Y):-surname(X),cloud(Y).

facts: 
surname(1..4).cloud(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "surname" and "cloud".
Answer: combination(X,Y):-surname(X),cloud(Y).
combination(X,Y):- assurent(X,Y).
combination(X,Y):-shangai(X,Y).
combination(X,Y):-shangai(X),car(Y).
combination(X,Y):-car(X),shangai(Y).
combination(X,Y):-shangai(X),car(Y).
combination(X,Y):-car(X),shangai(Y).

unique_rules: 
['combination(X,Y):-surname(X),cloud(Y).', 'combination(X,Y):- assurent(X,Y).', 'combination(X,Y):-shangai(X,Y).', 'combination(X,Y):-shangai(X),car(Y).', 'combination(X,Y):-car(X),shangai(Y).']

jaccard: 1.0

AS desired: [['cloud(1)', 'cloud(2)', 'cloud(3)', 'cloud(4)', 'cloud(5)', 'surname(1)', 'surname(2)', 'surname(3)', 'surname(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['cloud(1)', 'cloud(2)', 'cloud(3)', 'cloud(4)', 'cloud(5)', 'surname(1)', 'surname(2)', 'surname(3)', 'surname(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


471
join

question: 
Write an ASP program to solve the problem by defining the predicate "owner_darkmagenta" which associates each owner to the hair of darkmagenta, using the fields "ID","surname","strength","darkmagentaID","lake" of "owner" and the fields "ID","surname","hair","lake" of "darkmagenta".

answer from file: 
owner_darkmagenta(X,Z):-owner(X,_,_,Y,_),darkmagenta(Y,_,Z,_).

parsed from model: 
owner_darkmagenta(X,Z):-owner(X,_,_,Y,_),darkmagenta(Y,_,Z,_).

facts: 
owner("ID","surname","strength","darkmagentaID","lake").darkmagenta("ID","surname","hair","lake").

generated: 
Write an ASP program to solve the problem by defining the predicate "owner_darkmagenta" which associates each owner to the hair of darkmagenta, using the fields "ID","surname","strength","darkmagentaID","lake" of "owner" and the fields "ID","surname","hair","lake" of "darkmagenta". Define the predicate "owner_darkmagenta" which associates each owner to the hair of darkmagenta.
Answer: owner_darkmagenta(X,Z):-owner(X,_,_,Y,_),darkmagenta(Y,_,Z,_).
owner_darkmagenta(X,Z):-owner(X,_,_,Y,_),darkmagenta(Y,_,_,Z).

unique_rules: 
['owner_darkmagenta(X,Z):-owner(X,_,_,Y,_),darkmagenta(Y,_,Z,_).', 'owner_darkmagenta(X,Z):-owner(X,_,_,Y,_),darkmagenta(Y,_,_,Z).']

jaccard: 1.0

AS desired: [['owner("ID","surname","strength","darkmagentaID","lake")', 'darkmagenta("ID","surname","hair","lake")']]
\AS obtained: [['owner("ID","surname","strength","darkmagentaID","lake")', 'darkmagenta("ID","surname","hair","lake")']]


472
closure

question: 
Develop an ASP application that constructs the "loops" predicate based on the transitive closure of the "surname" predicate.

answer from file: 
loops(X,Y):-surname(X,Y).
loops(X,Y):-surname(X,Z),loops(Z,Y).

parsed from model: 
loops(X,Y):-surname(X,Y).
loops(X,Y):-surname(X,Z),loops(Z,Y).

facts: 
surname(1..3, 1..4).

generated: 
Develop an ASP application that constructs the "loops" predicate based on the transitive closure of the "surname" predicate.
Answer: loops(X,Y):-surname(X,Y).
loops(X,Y):-surname(X,Z),loops(Z,Y).
loops(X,Y):- assurent(X,Y).
 assurent(X,Y):- assurent(X,Z),loops(Z,Y).

unique_rules: 
['loops(X,Y):-surname(X,Y).', 'loops(X,Y):-surname(X,Z),loops(Z,Y).', 'loops(X,Y):- assurent(X,Y).', 'assurent(X,Y):- assurent(X,Z),loops(Z,Y).']

jaccard: 1.0

AS desired: [['surname(1,1)', 'surname(1,2)', 'surname(1,3)', 'surname(1,4)', 'surname(2,1)', 'surname(2,2)', 'surname(2,3)', 'surname(2,4)', 'surname(3,1)', 'surname(3,2)', 'surname(3,3)', 'surname(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]
\AS obtained: [['surname(1,1)', 'surname(1,2)', 'surname(1,3)', 'surname(1,4)', 'surname(2,1)', 'surname(2,2)', 'surname(2,3)', 'surname(2,4)', 'surname(3,1)', 'surname(3,2)', 'surname(3,3)', 'surname(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]


473
preference

question: 
Write an ASP program that disallows the association between "singapore" with value "5" and "surname", with a cost of "1" at level "1" if this association occurs.

answer from file: 
:~assign(5,"surname").[1@1]

parsed from model: 
:-assign(5,"surname").

facts: 
singapore(1..20).

generated: 
Write an ASP program that disallows the association between "singapore" with value "5" and "surname", with a cost of "1" at level "1" if this association occurs.
Answer: :-assign(5,"surname").
Cost(1,"1").
The predicate "description" includes fields "ID","city","author","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","

unique_rules: 
[':-assign(5,"surname").']

jaccard: 1.0

AS desired: [['singapore(1)', 'singapore(2)', 'singapore(3)', 'singapore(4)', 'singapore(5)', 'singapore(6)', 'singapore(7)', 'singapore(8)', 'singapore(9)', 'singapore(10)', 'singapore(11)', 'singapore(12)', 'singapore(13)', 'singapore(14)', 'singapore(15)', 'singapore(16)', 'singapore(17)', 'singapore(18)', 'singapore(19)', 'singapore(20)']]
\AS obtained: [['singapore(1)', 'singapore(2)', 'singapore(3)', 'singapore(4)', 'singapore(5)', 'singapore(6)', 'singapore(7)', 'singapore(8)', 'singapore(9)', 'singapore(10)', 'singapore(11)', 'singapore(12)', 'singapore(13)', 'singapore(14)', 'singapore(15)', 'singapore(16)', 'singapore(17)', 'singapore(18)', 'singapore(19)', 'singapore(20)']]


474
filtering

question: 
Draft an ASP code to retrieve values associated with the predicate "chair" and the label "quality".

answer from file: 
select(X):-chair(X,"quality").

parsed from model: 
select(X):-chair(X,"quality").

facts: 
chair(1..5, "quality").

generated: 
Draft an ASP code to retrieve values associated with the predicate "chair" and the label "quality".
Answer: select(X):-chair(X,"quality").
chair(X,Z):- felicità(X,Z).
 felicità(X,Z):-chair(X,Z).

unique_rules: 
['select(X):-chair(X,"quality").', 'chair(X,Z):- felicità(X,Z).', 'felicità(X,Z):-chair(X,Z).']

jaccard: 1.0

AS desired: [['chair(1,"quality")', 'chair(2,"quality")', 'chair(3,"quality")', 'chair(4,"quality")', 'chair(5,"quality")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['chair(1,"quality")', 'chair(2,"quality")', 'chair(3,"quality")', 'chair(4,"quality")', 'chair(5,"quality")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


475
negative_filtering

question: 
Produce an ASP program to gather values associated with the predicate "chicago" but not linked to the predicate "moscow" and labeled "butterfly".

answer from file: 
select(X):-chicago(X),not moscow(X,"butterfly").

parsed from model: 
select(X):-chicago(X),not moscow(X,"butterfly").

facts: 
chicago(1..3).moscow(1,"pink").moscow(2,"moscow").moscow(3,"butterfly").

generated: 
Produce an ASP program to gather values associated with the predicate "chicago" but not linked to the predicate "moscow" and labeled "butterfly".
Answer: select(X):-chicago(X),not moscow(X,"butterfly").

unique_rules: 
['select(X):-chicago(X),not moscow(X,"butterfly").']

jaccard: 1.0

AS desired: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'moscow(1,"pink")', 'moscow(2,"moscow")', 'moscow(3,"butterfly")', 'select(1)', 'select(2)']]
\AS obtained: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'moscow(1,"pink")', 'moscow(2,"moscow")', 'moscow(3,"butterfly")', 'select(1)', 'select(2)']]


476
numeric_filtering

question: 
Formulate an ASP application to fetch values connected to the predicate "singapore" with a value different than 29.

answer from file: 
select(X):-singapore(X,C),C!=29.

parsed from model: 
select(X):-singapore(X,C),C!=29.

facts: 
singapore(1..3, 1..100).

generated: 
Formulate an ASP application to fetch values connected to the predicate "singapore" with a value different than 29.
Answer: select(X):-singapore(X,C),C!=29.
singapore(X,C):-singapore(X,C),C==29.

unique_rules: 
['select(X):-singapore(X,C),C!=29.', 'singapore(X,C):-singapore(X,C),C==29.']

jaccard: 1.0

AS desired: [['singapore(1,1)', 'singapore(1,2)', 'singapore(1,3)', 'singapore(1,4)', 'singapore(1,5)', 'singapore(1,6)', 'singapore(1,7)', 'singapore(1,8)', 'singapore(1,9)', 'singapore(1,10)', 'singapore(1,11)', 'singapore(1,12)', 'singapore(1,13)', 'singapore(1,14)', 'singapore(1,15)', 'singapore(1,16)', 'singapore(1,17)', 'singapore(1,18)', 'singapore(1,19)', 'singapore(1,20)', 'singapore(1,21)', 'singapore(1,22)', 'singapore(1,23)', 'singapore(1,24)', 'singapore(1,25)', 'singapore(1,26)', 'singapore(1,27)', 'singapore(1,28)', 'singapore(1,29)', 'singapore(1,30)', 'singapore(1,31)', 'singapore(1,32)', 'singapore(1,33)', 'singapore(1,34)', 'singapore(1,35)', 'singapore(1,36)', 'singapore(1,37)', 'singapore(1,38)', 'singapore(1,39)', 'singapore(1,40)', 'singapore(1,41)', 'singapore(1,42)', 'singapore(1,43)', 'singapore(1,44)', 'singapore(1,45)', 'singapore(1,46)', 'singapore(1,47)', 'singapore(1,48)', 'singapore(1,49)', 'singapore(1,50)', 'singapore(1,51)', 'singapore(1,52)', 'singapore(1,53)', 'singapore(1,54)', 'singapore(1,55)', 'singapore(1,56)', 'singapore(1,57)', 'singapore(1,58)', 'singapore(1,59)', 'singapore(1,60)', 'singapore(1,61)', 'singapore(1,62)', 'singapore(1,63)', 'singapore(1,64)', 'singapore(1,65)', 'singapore(1,66)', 'singapore(1,67)', 'singapore(1,68)', 'singapore(1,69)', 'singapore(1,70)', 'singapore(1,71)', 'singapore(1,72)', 'singapore(1,73)', 'singapore(1,74)', 'singapore(1,75)', 'singapore(1,76)', 'singapore(1,77)', 'singapore(1,78)', 'singapore(1,79)', 'singapore(1,80)', 'singapore(1,81)', 'singapore(1,82)', 'singapore(1,83)', 'singapore(1,84)', 'singapore(1,85)', 'singapore(1,86)', 'singapore(1,87)', 'singapore(1,88)', 'singapore(1,89)', 'singapore(1,90)', 'singapore(1,91)', 'singapore(1,92)', 'singapore(1,93)', 'singapore(1,94)', 'singapore(1,95)', 'singapore(1,96)', 'singapore(1,97)', 'singapore(1,98)', 'singapore(1,99)', 'singapore(1,100)', 'singapore(2,1)', 'singapore(2,2)', 'singapore(2,3)', 'singapore(2,4)', 'singapore(2,5)', 'singapore(2,6)', 'singapore(2,7)', 'singapore(2,8)', 'singapore(2,9)', 'singapore(2,10)', 'singapore(2,11)', 'singapore(2,12)', 'singapore(2,13)', 'singapore(2,14)', 'singapore(2,15)', 'singapore(2,16)', 'singapore(2,17)', 'singapore(2,18)', 'singapore(2,19)', 'singapore(2,20)', 'singapore(2,21)', 'singapore(2,22)', 'singapore(2,23)', 'singapore(2,24)', 'singapore(2,25)', 'singapore(2,26)', 'singapore(2,27)', 'singapore(2,28)', 'singapore(2,29)', 'singapore(2,30)', 'singapore(2,31)', 'singapore(2,32)', 'singapore(2,33)', 'singapore(2,34)', 'singapore(2,35)', 'singapore(2,36)', 'singapore(2,37)', 'singapore(2,38)', 'singapore(2,39)', 'singapore(2,40)', 'singapore(2,41)', 'singapore(2,42)', 'singapore(2,43)', 'singapore(2,44)', 'singapore(2,45)', 'singapore(2,46)', 'singapore(2,47)', 'singapore(2,48)', 'singapore(2,49)', 'singapore(2,50)', 'singapore(2,51)', 'singapore(2,52)', 'singapore(2,53)', 'singapore(2,54)', 'singapore(2,55)', 'singapore(2,56)', 'singapore(2,57)', 'singapore(2,58)', 'singapore(2,59)', 'singapore(2,60)', 'singapore(2,61)', 'singapore(2,62)', 'singapore(2,63)', 'singapore(2,64)', 'singapore(2,65)', 'singapore(2,66)', 'singapore(2,67)', 'singapore(2,68)', 'singapore(2,69)', 'singapore(2,70)', 'singapore(2,71)', 'singapore(2,72)', 'singapore(2,73)', 'singapore(2,74)', 'singapore(2,75)', 'singapore(2,76)', 'singapore(2,77)', 'singapore(2,78)', 'singapore(2,79)', 'singapore(2,80)', 'singapore(2,81)', 'singapore(2,82)', 'singapore(2,83)', 'singapore(2,84)', 'singapore(2,85)', 'singapore(2,86)', 'singapore(2,87)', 'singapore(2,88)', 'singapore(2,89)', 'singapore(2,90)', 'singapore(2,91)', 'singapore(2,92)', 'singapore(2,93)', 'singapore(2,94)', 'singapore(2,95)', 'singapore(2,96)', 'singapore(2,97)', 'singapore(2,98)', 'singapore(2,99)', 'singapore(2,100)', 'singapore(3,1)', 'singapore(3,2)', 'singapore(3,3)', 'singapore(3,4)', 'singapore(3,5)', 'singapore(3,6)', 'singapore(3,7)', 'singapore(3,8)', 'singapore(3,9)', 'singapore(3,10)', 'singapore(3,11)', 'singapore(3,12)', 'singapore(3,13)', 'singapore(3,14)', 'singapore(3,15)', 'singapore(3,16)', 'singapore(3,17)', 'singapore(3,18)', 'singapore(3,19)', 'singapore(3,20)', 'singapore(3,21)', 'singapore(3,22)', 'singapore(3,23)', 'singapore(3,24)', 'singapore(3,25)', 'singapore(3,26)', 'singapore(3,27)', 'singapore(3,28)', 'singapore(3,29)', 'singapore(3,30)', 'singapore(3,31)', 'singapore(3,32)', 'singapore(3,33)', 'singapore(3,34)', 'singapore(3,35)', 'singapore(3,36)', 'singapore(3,37)', 'singapore(3,38)', 'singapore(3,39)', 'singapore(3,40)', 'singapore(3,41)', 'singapore(3,42)', 'singapore(3,43)', 'singapore(3,44)', 'singapore(3,45)', 'singapore(3,46)', 'singapore(3,47)', 'singapore(3,48)', 'singapore(3,49)', 'singapore(3,50)', 'singapore(3,51)', 'singapore(3,52)', 'singapore(3,53)', 'singapore(3,54)', 'singapore(3,55)', 'singapore(3,56)', 'singapore(3,57)', 'singapore(3,58)', 'singapore(3,59)', 'singapore(3,60)', 'singapore(3,61)', 'singapore(3,62)', 'singapore(3,63)', 'singapore(3,64)', 'singapore(3,65)', 'singapore(3,66)', 'singapore(3,67)', 'singapore(3,68)', 'singapore(3,69)', 'singapore(3,70)', 'singapore(3,71)', 'singapore(3,72)', 'singapore(3,73)', 'singapore(3,74)', 'singapore(3,75)', 'singapore(3,76)', 'singapore(3,77)', 'singapore(3,78)', 'singapore(3,79)', 'singapore(3,80)', 'singapore(3,81)', 'singapore(3,82)', 'singapore(3,83)', 'singapore(3,84)', 'singapore(3,85)', 'singapore(3,86)', 'singapore(3,87)', 'singapore(3,88)', 'singapore(3,89)', 'singapore(3,90)', 'singapore(3,91)', 'singapore(3,92)', 'singapore(3,93)', 'singapore(3,94)', 'singapore(3,95)', 'singapore(3,96)', 'singapore(3,97)', 'singapore(3,98)', 'singapore(3,99)', 'singapore(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['singapore(1,1)', 'singapore(1,2)', 'singapore(1,3)', 'singapore(1,4)', 'singapore(1,5)', 'singapore(1,6)', 'singapore(1,7)', 'singapore(1,8)', 'singapore(1,9)', 'singapore(1,10)', 'singapore(1,11)', 'singapore(1,12)', 'singapore(1,13)', 'singapore(1,14)', 'singapore(1,15)', 'singapore(1,16)', 'singapore(1,17)', 'singapore(1,18)', 'singapore(1,19)', 'singapore(1,20)', 'singapore(1,21)', 'singapore(1,22)', 'singapore(1,23)', 'singapore(1,24)', 'singapore(1,25)', 'singapore(1,26)', 'singapore(1,27)', 'singapore(1,28)', 'singapore(1,29)', 'singapore(1,30)', 'singapore(1,31)', 'singapore(1,32)', 'singapore(1,33)', 'singapore(1,34)', 'singapore(1,35)', 'singapore(1,36)', 'singapore(1,37)', 'singapore(1,38)', 'singapore(1,39)', 'singapore(1,40)', 'singapore(1,41)', 'singapore(1,42)', 'singapore(1,43)', 'singapore(1,44)', 'singapore(1,45)', 'singapore(1,46)', 'singapore(1,47)', 'singapore(1,48)', 'singapore(1,49)', 'singapore(1,50)', 'singapore(1,51)', 'singapore(1,52)', 'singapore(1,53)', 'singapore(1,54)', 'singapore(1,55)', 'singapore(1,56)', 'singapore(1,57)', 'singapore(1,58)', 'singapore(1,59)', 'singapore(1,60)', 'singapore(1,61)', 'singapore(1,62)', 'singapore(1,63)', 'singapore(1,64)', 'singapore(1,65)', 'singapore(1,66)', 'singapore(1,67)', 'singapore(1,68)', 'singapore(1,69)', 'singapore(1,70)', 'singapore(1,71)', 'singapore(1,72)', 'singapore(1,73)', 'singapore(1,74)', 'singapore(1,75)', 'singapore(1,76)', 'singapore(1,77)', 'singapore(1,78)', 'singapore(1,79)', 'singapore(1,80)', 'singapore(1,81)', 'singapore(1,82)', 'singapore(1,83)', 'singapore(1,84)', 'singapore(1,85)', 'singapore(1,86)', 'singapore(1,87)', 'singapore(1,88)', 'singapore(1,89)', 'singapore(1,90)', 'singapore(1,91)', 'singapore(1,92)', 'singapore(1,93)', 'singapore(1,94)', 'singapore(1,95)', 'singapore(1,96)', 'singapore(1,97)', 'singapore(1,98)', 'singapore(1,99)', 'singapore(1,100)', 'singapore(2,1)', 'singapore(2,2)', 'singapore(2,3)', 'singapore(2,4)', 'singapore(2,5)', 'singapore(2,6)', 'singapore(2,7)', 'singapore(2,8)', 'singapore(2,9)', 'singapore(2,10)', 'singapore(2,11)', 'singapore(2,12)', 'singapore(2,13)', 'singapore(2,14)', 'singapore(2,15)', 'singapore(2,16)', 'singapore(2,17)', 'singapore(2,18)', 'singapore(2,19)', 'singapore(2,20)', 'singapore(2,21)', 'singapore(2,22)', 'singapore(2,23)', 'singapore(2,24)', 'singapore(2,25)', 'singapore(2,26)', 'singapore(2,27)', 'singapore(2,28)', 'singapore(2,29)', 'singapore(2,30)', 'singapore(2,31)', 'singapore(2,32)', 'singapore(2,33)', 'singapore(2,34)', 'singapore(2,35)', 'singapore(2,36)', 'singapore(2,37)', 'singapore(2,38)', 'singapore(2,39)', 'singapore(2,40)', 'singapore(2,41)', 'singapore(2,42)', 'singapore(2,43)', 'singapore(2,44)', 'singapore(2,45)', 'singapore(2,46)', 'singapore(2,47)', 'singapore(2,48)', 'singapore(2,49)', 'singapore(2,50)', 'singapore(2,51)', 'singapore(2,52)', 'singapore(2,53)', 'singapore(2,54)', 'singapore(2,55)', 'singapore(2,56)', 'singapore(2,57)', 'singapore(2,58)', 'singapore(2,59)', 'singapore(2,60)', 'singapore(2,61)', 'singapore(2,62)', 'singapore(2,63)', 'singapore(2,64)', 'singapore(2,65)', 'singapore(2,66)', 'singapore(2,67)', 'singapore(2,68)', 'singapore(2,69)', 'singapore(2,70)', 'singapore(2,71)', 'singapore(2,72)', 'singapore(2,73)', 'singapore(2,74)', 'singapore(2,75)', 'singapore(2,76)', 'singapore(2,77)', 'singapore(2,78)', 'singapore(2,79)', 'singapore(2,80)', 'singapore(2,81)', 'singapore(2,82)', 'singapore(2,83)', 'singapore(2,84)', 'singapore(2,85)', 'singapore(2,86)', 'singapore(2,87)', 'singapore(2,88)', 'singapore(2,89)', 'singapore(2,90)', 'singapore(2,91)', 'singapore(2,92)', 'singapore(2,93)', 'singapore(2,94)', 'singapore(2,95)', 'singapore(2,96)', 'singapore(2,97)', 'singapore(2,98)', 'singapore(2,99)', 'singapore(2,100)', 'singapore(3,1)', 'singapore(3,2)', 'singapore(3,3)', 'singapore(3,4)', 'singapore(3,5)', 'singapore(3,6)', 'singapore(3,7)', 'singapore(3,8)', 'singapore(3,9)', 'singapore(3,10)', 'singapore(3,11)', 'singapore(3,12)', 'singapore(3,13)', 'singapore(3,14)', 'singapore(3,15)', 'singapore(3,16)', 'singapore(3,17)', 'singapore(3,18)', 'singapore(3,19)', 'singapore(3,20)', 'singapore(3,21)', 'singapore(3,22)', 'singapore(3,23)', 'singapore(3,24)', 'singapore(3,25)', 'singapore(3,26)', 'singapore(3,27)', 'singapore(3,28)', 'singapore(3,29)', 'singapore(3,30)', 'singapore(3,31)', 'singapore(3,32)', 'singapore(3,33)', 'singapore(3,34)', 'singapore(3,35)', 'singapore(3,36)', 'singapore(3,37)', 'singapore(3,38)', 'singapore(3,39)', 'singapore(3,40)', 'singapore(3,41)', 'singapore(3,42)', 'singapore(3,43)', 'singapore(3,44)', 'singapore(3,45)', 'singapore(3,46)', 'singapore(3,47)', 'singapore(3,48)', 'singapore(3,49)', 'singapore(3,50)', 'singapore(3,51)', 'singapore(3,52)', 'singapore(3,53)', 'singapore(3,54)', 'singapore(3,55)', 'singapore(3,56)', 'singapore(3,57)', 'singapore(3,58)', 'singapore(3,59)', 'singapore(3,60)', 'singapore(3,61)', 'singapore(3,62)', 'singapore(3,63)', 'singapore(3,64)', 'singapore(3,65)', 'singapore(3,66)', 'singapore(3,67)', 'singapore(3,68)', 'singapore(3,69)', 'singapore(3,70)', 'singapore(3,71)', 'singapore(3,72)', 'singapore(3,73)', 'singapore(3,74)', 'singapore(3,75)', 'singapore(3,76)', 'singapore(3,77)', 'singapore(3,78)', 'singapore(3,79)', 'singapore(3,80)', 'singapore(3,81)', 'singapore(3,82)', 'singapore(3,83)', 'singapore(3,84)', 'singapore(3,85)', 'singapore(3,86)', 'singapore(3,87)', 'singapore(3,88)', 'singapore(3,89)', 'singapore(3,90)', 'singapore(3,91)', 'singapore(3,92)', 'singapore(3,93)', 'singapore(3,94)', 'singapore(3,95)', 'singapore(3,96)', 'singapore(3,97)', 'singapore(3,98)', 'singapore(3,99)', 'singapore(3,100)', 'select(1)', 'select(2)', 'select(3)']]


477
assignment

question: 
Write an ASP solution to connect each element defined by the predicate "chicago" with a single label from "lightblue","singapore","white","cloud","owner","pink","wall","quality","darkmagenta".

answer from file: 
assign(X,"lightblue")|assign(X,"singapore")|assign(X,"white")|assign(X,"cloud")|assign(X,"owner")|assign(X,"pink")|assign(X,"wall")|assign(X,"quality")|assign(X,"darkmagenta"):-chicago(X).

parsed from model: 
assign(X,"lightblue")|assign(X,"singapore")|assign(X,"white")|assign(X,"cloud")|assign(X,"owner")|assign(X,"pink")|assign(X,"wall")|assign(X,"quality")|assign(X,"darkmagenta"):-chicago(X).

facts: 
chicago(1..5).

generated: 
Write an ASP solution to connect each element defined by the predicate "chicago" with a single label from "lightblue","singapore","white","cloud","owner","pink","wall","quality","darkmagenta".
Answer: assign(X,"lightblue")|assign(X,"singapore")|assign(X,"white")|assign(X,"cloud")|assign(X,"owner")|assign(X,"pink")|assign(X,"wall")|assign(X,"quality")|assign(X,"darkmagenta"):-chicago(X).
Explanation:
- chicago(X) checks if the element X is defined by the predicate "chicago".
- If so, it assigns a single label from "lightblue","singapore","white","cloud","owner","pink","wall","quality","darkmagenta" to the element X.

unique_rules: 
['assign(X,"lightblue")|assign(X,"singapore")|assign(X,"white")|assign(X,"cloud")|assign(X,"owner")|assign(X,"pink")|assign(X,"wall")|assign(X,"quality")|assign(X,"darkmagenta"):-chicago(X).']

jaccard: 1.0

AS desired: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'chicago(5)', 'assign(1,"darkmagenta")', 'assign(2,"darkmagenta")', 'assign(3,"darkmagenta")', 'assign(4,"darkmagenta")', 'assign(5,"darkmagenta")']]
\AS obtained: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'chicago(5)', 'assign(1,"darkmagenta")', 'assign(2,"darkmagenta")', 'assign(3,"darkmagenta")', 'assign(4,"darkmagenta")', 'assign(5,"darkmagenta")']]


478
constraint

question: 
Develop an ASP application that avoids the predicate "lake" with a value of 13 being linked to the label "hair".

answer from file: 
:-assign(13,hair).

parsed from model: 
:-assign(13,hair).

facts: 
lake(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-lake(X).

generated: 
Develop an ASP application that avoids the predicate "lake" with a value of 13 being linked to the label "hair".
Answer: :-assign(13,hair).
Explanation: The predicate "bike" includes a field "author" that is linked to the label "height".
The predicate "height" includes a field "name" that is linked to the label "description".
The predicate "description" includes a field "author" that is linked to the label "height".
The predicate "bike" includes a field "author" that is linked to the label "height".
The predicate "height" includes a field "name" that is linked to the label "description".
The predicate "description" includes a field "author" that is linked to the label "height".
The predicate "bike" includes a field "author

unique_rules: 
[':-assign(13,hair).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lake(6)', 'lake(7)', 'lake(8)', 'lake(9)', 'lake(10)', 'lake(11)', 'lake(12)', 'lake(13)', 'lake(14)', 'lake(15)', 'lake(16)', 'lake(17)', 'lake(18)', 'lake(19)', 'lake(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lake(6)', 'lake(7)', 'lake(8)', 'lake(9)', 'lake(10)', 'lake(11)', 'lake(12)', 'lake(13)', 'lake(14)', 'lake(15)', 'lake(16)', 'lake(17)', 'lake(18)', 'lake(19)', 'lake(20)']]


479
combination

question: 
Produce an ASP script to generate all valid pairings of elements as represented by the predicates "flower" and "lake".

answer from file: 
combination(X,Y):-flower(X),lake(Y).

parsed from model: 
combination(X,Y):-flower(X),lake(Y).

facts: 
flower(1..4).lake(1..5).

generated: 
Produce an ASP script to generate all valid pairings of elements as represented by the predicates "flower" and "lake".
Answer: combination(X,Y):-flower(X),lake(Y).
combination(X,Y):-flower(X),not lake(Y).
combination(X,Y):-not flower(X),lake(Y).
combination(X,Y):-not flower(X),not lake(Y).

unique_rules: 
['combination(X,Y):-flower(X),lake(Y).', 'combination(X,Y):-flower(X),not lake(Y).', 'combination(X,Y):-not flower(X),lake(Y).', 'combination(X,Y):-not flower(X),not lake(Y).']

jaccard: 1.0

AS desired: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'flower(1)', 'flower(2)', 'flower(3)', 'flower(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'flower(1)', 'flower(2)', 'flower(3)', 'flower(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


480
join

question: 
Create an ASP script to define the predicate "white_singapore" that links each white to the surname of singapore, given that "white" has fields "ID","weight","strength","singaporeID" and "singapore" has fields "ID","surname".

answer from file: 
white_singapore(X,Z):-white(X,_,_,Y),singapore(Y,Z).

parsed from model: 
white_singapore(X,Z):-white(X,_,_,Y),singapore(Y,Z).

facts: 
white("ID","weight","strength","singaporeID").singapore("ID","surname").

generated: 
Create an ASP script to define the predicate "white_singapore" that links each white to the surname of singapore, given that "white" has fields "ID","weight","strength","singaporeID" and "singapore" has fields "ID","surname". Define the predicate "white_singapore" that links each white to the surname of singapore.
Answer: white_singapore(X,Z):-white(X,_,_,Y),singapore(Y,Z).
white_singapore(X,Z):-white(X,_,_,Y),singapore(X,Z).

unique_rules: 
['white_singapore(X,Z):-white(X,_,_,Y),singapore(Y,Z).', 'white_singapore(X,Z):-white(X,_,_,Y),singapore(X,Z).']

jaccard: 1.0

AS desired: [['singapore("ID","surname")', 'white("ID","weight","strength","singaporeID")']]
\AS obtained: [['singapore("ID","surname")', 'white("ID","weight","strength","singaporeID")']]


481
closure

question: 
Develop an ASP script that derives the "family" predicate through the transitive closure of the "delhi" predicate.

answer from file: 
family(X,Y):-delhi(X,Y).
family(X,Y):-delhi(X,Z),family(Z,Y).

parsed from model: 
family(X,Y):-delhi(X,Y).
family(X,Y):-delhi(X,Z),family(Z,Y).

facts: 
delhi(1..3, 1..4).

generated: 
Develop an ASP script that derives the "family" predicate through the transitive closure of the "delhi" predicate.
Answer: family(X,Y):-delhi(X,Y).
family(X,Y):-delhi(X,Z),family(Z,Y).
family(X,Y):-delhi(X,Z),Z!=Y.
family(X,Y):-delhi(X,Z),Z==Y.
family(X,Y):-delhi(X,Z),Z!=Y,age(Z,Y).
age(X,Y):-family(X,Y).
age(X,Y):-family(X,Z),Z!=Y.
age(X,Y):-family(X,Z),Z==Y.

unique_rules: 
['family(X,Y):-delhi(X,Y).', 'family(X,Y):-delhi(X,Z),family(Z,Y).', 'family(X,Y):-delhi(X,Z),Z!=Y.', 'family(X,Y):-delhi(X,Z),Z==Y.', 'family(X,Y):-delhi(X,Z),Z!=Y,age(Z,Y).', 'age(X,Y):-family(X,Y).', 'age(X,Y):-family(X,Z),Z!=Y.', 'age(X,Y):-family(X,Z),Z==Y.']

jaccard: 1.0

AS desired: [['delhi(1,1)', 'delhi(1,2)', 'delhi(1,3)', 'delhi(1,4)', 'delhi(2,1)', 'delhi(2,2)', 'delhi(2,3)', 'delhi(2,4)', 'delhi(3,1)', 'delhi(3,2)', 'delhi(3,3)', 'delhi(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]
\AS obtained: [['delhi(1,1)', 'delhi(1,2)', 'delhi(1,3)', 'delhi(1,4)', 'delhi(2,1)', 'delhi(2,2)', 'delhi(2,3)', 'delhi(2,4)', 'delhi(3,1)', 'delhi(3,2)', 'delhi(3,3)', 'delhi(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]


482
preference

question: 
Develop an ASP code snippet to avoid linking the "quality" predicate with value "7" to "delhi". If such a link is found, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(7,"delhi").[1@1]

parsed from model: 
:~assign(7,"delhi").[1@1]

facts: 
quality(1..20).

generated: 
Develop an ASP code snippet to avoid linking the "quality" predicate with value "7" to "delhi". If such a link is found, it incurs a cost of "1" at level "1".
Answer: :~assign(7,"delhi").[1@1]
The predicate "description" includes fields "ID","city","author","height","name","price","author","city","description","name","height","price","city","author","name","description","height","price","city","description","name","height","price","city","author","name","description","height","price","city","description","name","height","price","city","author","name","description","height","price","city","description","name","height","price","city","author","name","description","height","price","city","description","name","height","price","city","author","name","description","height","price","

unique_rules: 
[':~assign(7,"delhi").[1@1]']

jaccard: 1.0

AS desired: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'quality(6)', 'quality(7)', 'quality(8)', 'quality(9)', 'quality(10)', 'quality(11)', 'quality(12)', 'quality(13)', 'quality(14)', 'quality(15)', 'quality(16)', 'quality(17)', 'quality(18)', 'quality(19)', 'quality(20)']]
\AS obtained: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'quality(6)', 'quality(7)', 'quality(8)', 'quality(9)', 'quality(10)', 'quality(11)', 'quality(12)', 'quality(13)', 'quality(14)', 'quality(15)', 'quality(16)', 'quality(17)', 'quality(18)', 'quality(19)', 'quality(20)']]


483
filtering

question: 
Formulate an ASP application to fetch all values tied to the predicate "barcelona" and labeled as "storm".

answer from file: 
select(X):-barcelona(X,"storm").

parsed from model: 
select(X):-barcelona(X,"storm").

facts: 
barcelona(1..5, "storm").

generated: 
Formulate an ASP application to fetch all values tied to the predicate "barcelona" and labeled as "storm".
Answer: select(X):-barcelona(X,"storm").
select(X):-barcelona(X,"author").
select(X):-barcelona(X,"moto").
select(X):-barcelona(X,"dubai").
select(X):-barcelona(X,"author","city").
select(X):-barcelona(X,"author","description").
select(X):-barcelona(X,"author","height").
select(X):-barcelona(X,"author","name").
select(X):-barcelona(X,"author","description","height").
select(X):-barcelona(X,"author","description","height").
select(X):-barcelona(X,"author","description","height").
```

unique_rules: 
['select(X):-barcelona(X,"storm").', 'select(X):-barcelona(X,"author").', 'select(X):-barcelona(X,"moto").', 'select(X):-barcelona(X,"dubai").', 'select(X):-barcelona(X,"author","city").', 'select(X):-barcelona(X,"author","description").', 'select(X):-barcelona(X,"author","height").', 'select(X):-barcelona(X,"author","name").', 'select(X):-barcelona(X,"author","description","height").']

jaccard: 1.0

AS desired: [['barcelona(1,"storm")', 'barcelona(2,"storm")', 'barcelona(3,"storm")', 'barcelona(4,"storm")', 'barcelona(5,"storm")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['barcelona(1,"storm")', 'barcelona(2,"storm")', 'barcelona(3,"storm")', 'barcelona(4,"storm")', 'barcelona(5,"storm")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


484
negative_filtering

question: 
Design an ASP solution to capture values associated with the predicate "flower" but not tied to the predicate "pink" and labeled "darkmagenta".

answer from file: 
select(X):-flower(X),not pink(X,"darkmagenta").

parsed from model: 
select(X):-flower(X),not pink(X,"darkmagenta").

facts: 
flower(1..3).pink(1,"lightblue").pink(2,"chair").pink(3,"darkmagenta").

generated: 
Design an ASP solution to capture values associated with the predicate "flower" but not tied to the predicate "pink" and labeled "darkmagenta".
Answer: select(X):-flower(X),not pink(X,"darkmagenta").
Explanation: The predicate "flower" includes values associated with the predicate "city","height","author","moto","description","name","rome","city","author","description","name","height","author","moto","description","name","city","author","description","height","author","city","description","name","height","author","moto","description","name","city","author","description","height","author","city","description","name","height","author","moto","description","name","city","author","description","height","author","city","description","name","height","author","moto","description","name","city","author","description","

unique_rules: 
['select(X):-flower(X),not pink(X,"darkmagenta").']

jaccard: 1.0

AS desired: [['flower(1)', 'flower(2)', 'flower(3)', 'pink(1,"lightblue")', 'pink(2,"chair")', 'pink(3,"darkmagenta")', 'select(1)', 'select(2)']]
\AS obtained: [['flower(1)', 'flower(2)', 'flower(3)', 'pink(1,"lightblue")', 'pink(2,"chair")', 'pink(3,"darkmagenta")', 'select(1)', 'select(2)']]


485
numeric_filtering

question: 
Develop an ASP program to gather all values linked to the predicate "desk" with a value different than 72.

answer from file: 
select(X):-desk(X,C),C!=72.

parsed from model: 
select(X):-desk(X,C),C!=72.

facts: 
desk(1..3, 1..100).

generated: 
Develop an ASP program to gather all values linked to the predicate "desk" with a value different than 72.
Answer: select(X):-desk(X,C),C!=72.
select(X):-desk(X,C),C==72.

unique_rules: 
['select(X):-desk(X,C),C!=72.', 'select(X):-desk(X,C),C==72.']

jaccard: 1.0

AS desired: [['desk(1,1)', 'desk(1,2)', 'desk(1,3)', 'desk(1,4)', 'desk(1,5)', 'desk(1,6)', 'desk(1,7)', 'desk(1,8)', 'desk(1,9)', 'desk(1,10)', 'desk(1,11)', 'desk(1,12)', 'desk(1,13)', 'desk(1,14)', 'desk(1,15)', 'desk(1,16)', 'desk(1,17)', 'desk(1,18)', 'desk(1,19)', 'desk(1,20)', 'desk(1,21)', 'desk(1,22)', 'desk(1,23)', 'desk(1,24)', 'desk(1,25)', 'desk(1,26)', 'desk(1,27)', 'desk(1,28)', 'desk(1,29)', 'desk(1,30)', 'desk(1,31)', 'desk(1,32)', 'desk(1,33)', 'desk(1,34)', 'desk(1,35)', 'desk(1,36)', 'desk(1,37)', 'desk(1,38)', 'desk(1,39)', 'desk(1,40)', 'desk(1,41)', 'desk(1,42)', 'desk(1,43)', 'desk(1,44)', 'desk(1,45)', 'desk(1,46)', 'desk(1,47)', 'desk(1,48)', 'desk(1,49)', 'desk(1,50)', 'desk(1,51)', 'desk(1,52)', 'desk(1,53)', 'desk(1,54)', 'desk(1,55)', 'desk(1,56)', 'desk(1,57)', 'desk(1,58)', 'desk(1,59)', 'desk(1,60)', 'desk(1,61)', 'desk(1,62)', 'desk(1,63)', 'desk(1,64)', 'desk(1,65)', 'desk(1,66)', 'desk(1,67)', 'desk(1,68)', 'desk(1,69)', 'desk(1,70)', 'desk(1,71)', 'desk(1,72)', 'desk(1,73)', 'desk(1,74)', 'desk(1,75)', 'desk(1,76)', 'desk(1,77)', 'desk(1,78)', 'desk(1,79)', 'desk(1,80)', 'desk(1,81)', 'desk(1,82)', 'desk(1,83)', 'desk(1,84)', 'desk(1,85)', 'desk(1,86)', 'desk(1,87)', 'desk(1,88)', 'desk(1,89)', 'desk(1,90)', 'desk(1,91)', 'desk(1,92)', 'desk(1,93)', 'desk(1,94)', 'desk(1,95)', 'desk(1,96)', 'desk(1,97)', 'desk(1,98)', 'desk(1,99)', 'desk(1,100)', 'desk(2,1)', 'desk(2,2)', 'desk(2,3)', 'desk(2,4)', 'desk(2,5)', 'desk(2,6)', 'desk(2,7)', 'desk(2,8)', 'desk(2,9)', 'desk(2,10)', 'desk(2,11)', 'desk(2,12)', 'desk(2,13)', 'desk(2,14)', 'desk(2,15)', 'desk(2,16)', 'desk(2,17)', 'desk(2,18)', 'desk(2,19)', 'desk(2,20)', 'desk(2,21)', 'desk(2,22)', 'desk(2,23)', 'desk(2,24)', 'desk(2,25)', 'desk(2,26)', 'desk(2,27)', 'desk(2,28)', 'desk(2,29)', 'desk(2,30)', 'desk(2,31)', 'desk(2,32)', 'desk(2,33)', 'desk(2,34)', 'desk(2,35)', 'desk(2,36)', 'desk(2,37)', 'desk(2,38)', 'desk(2,39)', 'desk(2,40)', 'desk(2,41)', 'desk(2,42)', 'desk(2,43)', 'desk(2,44)', 'desk(2,45)', 'desk(2,46)', 'desk(2,47)', 'desk(2,48)', 'desk(2,49)', 'desk(2,50)', 'desk(2,51)', 'desk(2,52)', 'desk(2,53)', 'desk(2,54)', 'desk(2,55)', 'desk(2,56)', 'desk(2,57)', 'desk(2,58)', 'desk(2,59)', 'desk(2,60)', 'desk(2,61)', 'desk(2,62)', 'desk(2,63)', 'desk(2,64)', 'desk(2,65)', 'desk(2,66)', 'desk(2,67)', 'desk(2,68)', 'desk(2,69)', 'desk(2,70)', 'desk(2,71)', 'desk(2,72)', 'desk(2,73)', 'desk(2,74)', 'desk(2,75)', 'desk(2,76)', 'desk(2,77)', 'desk(2,78)', 'desk(2,79)', 'desk(2,80)', 'desk(2,81)', 'desk(2,82)', 'desk(2,83)', 'desk(2,84)', 'desk(2,85)', 'desk(2,86)', 'desk(2,87)', 'desk(2,88)', 'desk(2,89)', 'desk(2,90)', 'desk(2,91)', 'desk(2,92)', 'desk(2,93)', 'desk(2,94)', 'desk(2,95)', 'desk(2,96)', 'desk(2,97)', 'desk(2,98)', 'desk(2,99)', 'desk(2,100)', 'desk(3,1)', 'desk(3,2)', 'desk(3,3)', 'desk(3,4)', 'desk(3,5)', 'desk(3,6)', 'desk(3,7)', 'desk(3,8)', 'desk(3,9)', 'desk(3,10)', 'desk(3,11)', 'desk(3,12)', 'desk(3,13)', 'desk(3,14)', 'desk(3,15)', 'desk(3,16)', 'desk(3,17)', 'desk(3,18)', 'desk(3,19)', 'desk(3,20)', 'desk(3,21)', 'desk(3,22)', 'desk(3,23)', 'desk(3,24)', 'desk(3,25)', 'desk(3,26)', 'desk(3,27)', 'desk(3,28)', 'desk(3,29)', 'desk(3,30)', 'desk(3,31)', 'desk(3,32)', 'desk(3,33)', 'desk(3,34)', 'desk(3,35)', 'desk(3,36)', 'desk(3,37)', 'desk(3,38)', 'desk(3,39)', 'desk(3,40)', 'desk(3,41)', 'desk(3,42)', 'desk(3,43)', 'desk(3,44)', 'desk(3,45)', 'desk(3,46)', 'desk(3,47)', 'desk(3,48)', 'desk(3,49)', 'desk(3,50)', 'desk(3,51)', 'desk(3,52)', 'desk(3,53)', 'desk(3,54)', 'desk(3,55)', 'desk(3,56)', 'desk(3,57)', 'desk(3,58)', 'desk(3,59)', 'desk(3,60)', 'desk(3,61)', 'desk(3,62)', 'desk(3,63)', 'desk(3,64)', 'desk(3,65)', 'desk(3,66)', 'desk(3,67)', 'desk(3,68)', 'desk(3,69)', 'desk(3,70)', 'desk(3,71)', 'desk(3,72)', 'desk(3,73)', 'desk(3,74)', 'desk(3,75)', 'desk(3,76)', 'desk(3,77)', 'desk(3,78)', 'desk(3,79)', 'desk(3,80)', 'desk(3,81)', 'desk(3,82)', 'desk(3,83)', 'desk(3,84)', 'desk(3,85)', 'desk(3,86)', 'desk(3,87)', 'desk(3,88)', 'desk(3,89)', 'desk(3,90)', 'desk(3,91)', 'desk(3,92)', 'desk(3,93)', 'desk(3,94)', 'desk(3,95)', 'desk(3,96)', 'desk(3,97)', 'desk(3,98)', 'desk(3,99)', 'desk(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['desk(1,1)', 'desk(1,2)', 'desk(1,3)', 'desk(1,4)', 'desk(1,5)', 'desk(1,6)', 'desk(1,7)', 'desk(1,8)', 'desk(1,9)', 'desk(1,10)', 'desk(1,11)', 'desk(1,12)', 'desk(1,13)', 'desk(1,14)', 'desk(1,15)', 'desk(1,16)', 'desk(1,17)', 'desk(1,18)', 'desk(1,19)', 'desk(1,20)', 'desk(1,21)', 'desk(1,22)', 'desk(1,23)', 'desk(1,24)', 'desk(1,25)', 'desk(1,26)', 'desk(1,27)', 'desk(1,28)', 'desk(1,29)', 'desk(1,30)', 'desk(1,31)', 'desk(1,32)', 'desk(1,33)', 'desk(1,34)', 'desk(1,35)', 'desk(1,36)', 'desk(1,37)', 'desk(1,38)', 'desk(1,39)', 'desk(1,40)', 'desk(1,41)', 'desk(1,42)', 'desk(1,43)', 'desk(1,44)', 'desk(1,45)', 'desk(1,46)', 'desk(1,47)', 'desk(1,48)', 'desk(1,49)', 'desk(1,50)', 'desk(1,51)', 'desk(1,52)', 'desk(1,53)', 'desk(1,54)', 'desk(1,55)', 'desk(1,56)', 'desk(1,57)', 'desk(1,58)', 'desk(1,59)', 'desk(1,60)', 'desk(1,61)', 'desk(1,62)', 'desk(1,63)', 'desk(1,64)', 'desk(1,65)', 'desk(1,66)', 'desk(1,67)', 'desk(1,68)', 'desk(1,69)', 'desk(1,70)', 'desk(1,71)', 'desk(1,72)', 'desk(1,73)', 'desk(1,74)', 'desk(1,75)', 'desk(1,76)', 'desk(1,77)', 'desk(1,78)', 'desk(1,79)', 'desk(1,80)', 'desk(1,81)', 'desk(1,82)', 'desk(1,83)', 'desk(1,84)', 'desk(1,85)', 'desk(1,86)', 'desk(1,87)', 'desk(1,88)', 'desk(1,89)', 'desk(1,90)', 'desk(1,91)', 'desk(1,92)', 'desk(1,93)', 'desk(1,94)', 'desk(1,95)', 'desk(1,96)', 'desk(1,97)', 'desk(1,98)', 'desk(1,99)', 'desk(1,100)', 'desk(2,1)', 'desk(2,2)', 'desk(2,3)', 'desk(2,4)', 'desk(2,5)', 'desk(2,6)', 'desk(2,7)', 'desk(2,8)', 'desk(2,9)', 'desk(2,10)', 'desk(2,11)', 'desk(2,12)', 'desk(2,13)', 'desk(2,14)', 'desk(2,15)', 'desk(2,16)', 'desk(2,17)', 'desk(2,18)', 'desk(2,19)', 'desk(2,20)', 'desk(2,21)', 'desk(2,22)', 'desk(2,23)', 'desk(2,24)', 'desk(2,25)', 'desk(2,26)', 'desk(2,27)', 'desk(2,28)', 'desk(2,29)', 'desk(2,30)', 'desk(2,31)', 'desk(2,32)', 'desk(2,33)', 'desk(2,34)', 'desk(2,35)', 'desk(2,36)', 'desk(2,37)', 'desk(2,38)', 'desk(2,39)', 'desk(2,40)', 'desk(2,41)', 'desk(2,42)', 'desk(2,43)', 'desk(2,44)', 'desk(2,45)', 'desk(2,46)', 'desk(2,47)', 'desk(2,48)', 'desk(2,49)', 'desk(2,50)', 'desk(2,51)', 'desk(2,52)', 'desk(2,53)', 'desk(2,54)', 'desk(2,55)', 'desk(2,56)', 'desk(2,57)', 'desk(2,58)', 'desk(2,59)', 'desk(2,60)', 'desk(2,61)', 'desk(2,62)', 'desk(2,63)', 'desk(2,64)', 'desk(2,65)', 'desk(2,66)', 'desk(2,67)', 'desk(2,68)', 'desk(2,69)', 'desk(2,70)', 'desk(2,71)', 'desk(2,72)', 'desk(2,73)', 'desk(2,74)', 'desk(2,75)', 'desk(2,76)', 'desk(2,77)', 'desk(2,78)', 'desk(2,79)', 'desk(2,80)', 'desk(2,81)', 'desk(2,82)', 'desk(2,83)', 'desk(2,84)', 'desk(2,85)', 'desk(2,86)', 'desk(2,87)', 'desk(2,88)', 'desk(2,89)', 'desk(2,90)', 'desk(2,91)', 'desk(2,92)', 'desk(2,93)', 'desk(2,94)', 'desk(2,95)', 'desk(2,96)', 'desk(2,97)', 'desk(2,98)', 'desk(2,99)', 'desk(2,100)', 'desk(3,1)', 'desk(3,2)', 'desk(3,3)', 'desk(3,4)', 'desk(3,5)', 'desk(3,6)', 'desk(3,7)', 'desk(3,8)', 'desk(3,9)', 'desk(3,10)', 'desk(3,11)', 'desk(3,12)', 'desk(3,13)', 'desk(3,14)', 'desk(3,15)', 'desk(3,16)', 'desk(3,17)', 'desk(3,18)', 'desk(3,19)', 'desk(3,20)', 'desk(3,21)', 'desk(3,22)', 'desk(3,23)', 'desk(3,24)', 'desk(3,25)', 'desk(3,26)', 'desk(3,27)', 'desk(3,28)', 'desk(3,29)', 'desk(3,30)', 'desk(3,31)', 'desk(3,32)', 'desk(3,33)', 'desk(3,34)', 'desk(3,35)', 'desk(3,36)', 'desk(3,37)', 'desk(3,38)', 'desk(3,39)', 'desk(3,40)', 'desk(3,41)', 'desk(3,42)', 'desk(3,43)', 'desk(3,44)', 'desk(3,45)', 'desk(3,46)', 'desk(3,47)', 'desk(3,48)', 'desk(3,49)', 'desk(3,50)', 'desk(3,51)', 'desk(3,52)', 'desk(3,53)', 'desk(3,54)', 'desk(3,55)', 'desk(3,56)', 'desk(3,57)', 'desk(3,58)', 'desk(3,59)', 'desk(3,60)', 'desk(3,61)', 'desk(3,62)', 'desk(3,63)', 'desk(3,64)', 'desk(3,65)', 'desk(3,66)', 'desk(3,67)', 'desk(3,68)', 'desk(3,69)', 'desk(3,70)', 'desk(3,71)', 'desk(3,72)', 'desk(3,73)', 'desk(3,74)', 'desk(3,75)', 'desk(3,76)', 'desk(3,77)', 'desk(3,78)', 'desk(3,79)', 'desk(3,80)', 'desk(3,81)', 'desk(3,82)', 'desk(3,83)', 'desk(3,84)', 'desk(3,85)', 'desk(3,86)', 'desk(3,87)', 'desk(3,88)', 'desk(3,89)', 'desk(3,90)', 'desk(3,91)', 'desk(3,92)', 'desk(3,93)', 'desk(3,94)', 'desk(3,95)', 'desk(3,96)', 'desk(3,97)', 'desk(3,98)', 'desk(3,99)', 'desk(3,100)', 'select(1)', 'select(2)', 'select(3)']]


486
assignment

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate singapore. The labels are "chair","storm","lake","black","white".

answer from file: 
assign(X,"chair")|assign(X,"storm")|assign(X,"lake")|assign(X,"black")|assign(X,"white"):-singapore(X).

parsed from model: 
assign(X,"chair")|assign(X,"storm")|assign(X,"lake")|assign(X,"black")|assign(X,"white"):-singapore(X).

facts: 
singapore(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate singapore. The labels are "chair","storm","lake","black","white".
Answer: assign(X,"chair")|assign(X,"storm")|assign(X,"lake")|assign(X,"black")|assign(X,"white"):-singapore(X).
assign(X,"city"):- felicità(X).
 áng=assign(X,"city"):- felicità(X).
 áng(X,"city"): felicità(X).
 áng(X,"city"):- singapore(X).
 áng(X,"city"):- black(X).
 áng(X,"city"):- white(X).
 áng(X,"city"):- lake(X).
 áng(X,"city"):- storm(X).
 áng(X,"city"):- chair(

unique_rules: 
['assign(X,"chair")|assign(X,"storm")|assign(X,"lake")|assign(X,"black")|assign(X,"white"):-singapore(X).', 'assign(X,"city"):- felicità(X).', 'áng=assign(X,"city"):- felicità(X).', 'áng(X,"city"):- singapore(X).', 'áng(X,"city"):- black(X).', 'áng(X,"city"):- white(X).', 'áng(X,"city"):- lake(X).', 'áng(X,"city"):- storm(X).', 'áng(X,"city"):- chair(']

jaccard: 1.0

AS desired: [['singapore(1)', 'singapore(2)', 'singapore(3)', 'singapore(4)', 'singapore(5)', 'assign(1,"white")', 'assign(2,"white")', 'assign(3,"white")', 'assign(4,"white")', 'assign(5,"white")']]
\AS obtained: [['singapore(1)', 'singapore(2)', 'singapore(3)', 'singapore(4)', 'singapore(5)', 'assign(1,"white")', 'assign(2,"white")', 'assign(3,"white")', 'assign(4,"white")', 'assign(5,"white")']]


487
constraint

question: 
Create an ASP code snippet to ensure the "cairo" predicate with a value of 10 is not linked to the label "laptop".

answer from file: 
:-assign(10,laptop).

parsed from model: 
:-assign(10,laptop).

facts: 
cairo(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-cairo(X).

generated: 
Create an ASP code snippet to ensure the "cairo" predicate with a value of 10 is not linked to the label "laptop".
Answer: :-assign(10,laptop).
Explanation: The predicate "city" includes a "city" label for the "shangai" value, and the predicate "shangai" contains a "city" label for the "height" value. If the "city" label is assigned to the "height" value, it violates the "city" label constraint.

unique_rules: 
[':-assign(10,laptop).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'cairo(1)', 'cairo(2)', 'cairo(3)', 'cairo(4)', 'cairo(5)', 'cairo(6)', 'cairo(7)', 'cairo(8)', 'cairo(9)', 'cairo(10)', 'cairo(11)', 'cairo(12)', 'cairo(13)', 'cairo(14)', 'cairo(15)', 'cairo(16)', 'cairo(17)', 'cairo(18)', 'cairo(19)', 'cairo(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'cairo(1)', 'cairo(2)', 'cairo(3)', 'cairo(4)', 'cairo(5)', 'cairo(6)', 'cairo(7)', 'cairo(8)', 'cairo(9)', 'cairo(10)', 'cairo(11)', 'cairo(12)', 'cairo(13)', 'cairo(14)', 'cairo(15)', 'cairo(16)', 'cairo(17)', 'cairo(18)', 'cairo(19)', 'cairo(20)']]


488
combination

question: 
Develop an ASP code snippet to produce all valid combinations of elements from the "lightblue" and "lake" sets.

answer from file: 
combination(X,Y):-lightblue(X),lake(Y).

parsed from model: 
combination(X,Y):-lightblue(X),lake(Y).

facts: 
lightblue(1..4).lake(1..5).

generated: 
Develop an ASP code snippet to produce all valid combinations of elements from the "lightblue" and "lake" sets.
Answer: combination(X,Y):-lightblue(X),lake(Y).
combination(X,Y):-lightblue(X),not lake(Y).
combination(X,Y):-not lightblue(X),lake(Y).

unique_rules: 
['combination(X,Y):-lightblue(X),lake(Y).', 'combination(X,Y):-lightblue(X),not lake(Y).', 'combination(X,Y):-not lightblue(X),lake(Y).']

jaccard: 1.0

AS desired: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'lightblue(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'lightblue(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


489
join

question: 
Develop an ASP solution that defines the predicate "lake_storm" to link each lake to the surname of storm, with "lake" having fields "ID","stormID","owner","weight","lake" and "storm" having fields "ID","surname","owner".

answer from file: 
lake_storm(X,Z):-lake(X,Y,_,_,_),storm(Y,Z,_).

parsed from model: 
lake_storm(X,Z):-lake(X,Y,_,_,_),storm(Y,Z,_).

facts: 
lake("ID","stormID","owner","weight","lake").storm("ID","surname","owner").

generated: 
Develop an ASP solution that defines the predicate "lake_storm" to link each lake to the surname of storm, with "lake" having fields "ID","stormID","owner","weight","lake" and "storm" having fields "ID","surname","owner". Define the predicate "lake_storm" that links each lake to the surname of storm.
Answer: lake_storm(X,Z):-lake(X,Y,_,_,_),storm(Y,Z,_).
lake_storm(X,Z):-lake(X,Y,_,_,Z),storm(Y,_,Z).

unique_rules: 
['lake_storm(X,Z):-lake(X,Y,_,_,_),storm(Y,Z,_).', 'lake_storm(X,Z):-lake(X,Y,_,_,Z),storm(Y,_,Z).']

jaccard: 1.0

AS desired: [['lake("ID","stormID","owner","weight","lake")', 'storm("ID","surname","owner")']]
\AS obtained: [['lake("ID","stormID","owner","weight","lake")', 'storm("ID","surname","owner")']]


490
closure

question: 
Create an ASP solution that establishes the transitive closure of the "moscow" predicate, defined as "loops".

answer from file: 
loops(X,Y):-moscow(X,Y).
loops(X,Y):-moscow(X,Z),loops(Z,Y).

parsed from model: 


facts: 
moscow(1..3, 1..4).

generated: 
Create an ASP solution that establishes the transitive closure of the "moscow" predicate, defined as "loops".
Answer: closure(loops)
closure(loops) = {X|X∈loops}.
closure(loops) = loops.
closure(loops) = union(closure(X),closure(Y))|X,Y∈loops.
closure(loops) = union(X,Y)|X,Y∈loops.

unique_rules: 
[]

jaccard: 0.0

AS desired: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]
\AS obtained: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)']]


491
preference

question: 
Craft an ASP solution to prevent the linking of the "quality" predicate with value "5" to "quality". Any link incurs a cost of "1" at level "1".

answer from file: 
:~assign(5,"quality").[1@1]

parsed from model: 
:~assign(5,"quality").[1@1]

facts: 
quality(1..20).

generated: 
Craft an ASP solution to prevent the linking of the "quality" predicate with value "5" to "quality". Any link incurs a cost of "1" at level "1".
Answer: :~assign(5,"quality").[1@1]
Explanation: The predicate "quality" includes values "1","city","author","rome","description","moto","author","city","description","price","height","author","description","city","author","description","price","height","author","description","city","author","description","price","height","author","description","city","author","description","price","height","author","description","city","author","description","price","height","author","description","city","author","description","price","height","author","description","city","author","description","price","height","author","description","city","author","description","price","height","author","description

unique_rules: 
[':~assign(5,"quality").[1@1]']

jaccard: 1.0

AS desired: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'quality(6)', 'quality(7)', 'quality(8)', 'quality(9)', 'quality(10)', 'quality(11)', 'quality(12)', 'quality(13)', 'quality(14)', 'quality(15)', 'quality(16)', 'quality(17)', 'quality(18)', 'quality(19)', 'quality(20)']]
\AS obtained: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'quality(6)', 'quality(7)', 'quality(8)', 'quality(9)', 'quality(10)', 'quality(11)', 'quality(12)', 'quality(13)', 'quality(14)', 'quality(15)', 'quality(16)', 'quality(17)', 'quality(18)', 'quality(19)', 'quality(20)']]


492
filtering

question: 
Write an ASP script to collect values associated with the "surname" label from the "strength" predicate.

answer from file: 
select(X):-strength(X,"surname").

parsed from model: 
select(X):-strength(X,"description").

facts: 
strength(1..5, "surname").

generated: 
Write an ASP script to collect values associated with the "surname" label from the "strength" predicate.
Answer: select(X):-strength(X,"description").
select(X):-strength(X,"author").
select(X):-strength(X,"description","author").
strength(X,"description").
strength(X,"author").
strength(X,"description","author").

unique_rules: 
['select(X):-strength(X,"description").', 'select(X):-strength(X,"author").', 'select(X):-strength(X,"description","author").']

jaccard: 0.0

AS desired: [['strength(1,"surname")', 'strength(2,"surname")', 'strength(3,"surname")', 'strength(4,"surname")', 'strength(5,"surname")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['strength(1,"surname")', 'strength(2,"surname")', 'strength(3,"surname")', 'strength(4,"surname")', 'strength(5,"surname")']]


493
negative_filtering

question: 
Develop an ASP script to collect values tied to the predicate "flower" but not linked to the predicate "owner" and labeled "butterfly".

answer from file: 
select(X):-flower(X),not owner(X,"butterfly").

parsed from model: 
select(X):-flower(X),not owner(X,"butterfly").

facts: 
flower(1..3).owner(1,"surname").owner(2,"quality").owner(3,"black").

generated: 
Develop an ASP script to collect values tied to the predicate "flower" but not linked to the predicate "owner" and labeled "butterfly".
Answer: select(X):-flower(X),not owner(X,"butterfly").
select(X):-owner(X,"description").
```

unique_rules: 
['select(X):-flower(X),not owner(X,"butterfly").', 'select(X):-owner(X,"description").']

jaccard: 1.0

AS desired: [['flower(1)', 'flower(2)', 'flower(3)', 'owner(1,"surname")', 'owner(2,"quality")', 'owner(3,"black")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['flower(1)', 'flower(2)', 'flower(3)', 'owner(1,"surname")', 'owner(2,"quality")', 'owner(3,"black")', 'select(1)', 'select(2)', 'select(3)']]


494
numeric_filtering

question: 
Produce an ASP script to retrieve values associated with the predicate "flower" with a value different than 47.

answer from file: 
select(X):-flower(X,C),C!=47.

parsed from model: 
select(X):-flower(X,C),C!=47.

facts: 
flower(1..3, 1..100).

generated: 
Produce an ASP script to retrieve values associated with the predicate "flower" with a value different than 47.
Answer: select(X):-flower(X,C),C!=47.
select(X):-flower(X,C),C==47.

unique_rules: 
['select(X):-flower(X,C),C!=47.', 'select(X):-flower(X,C),C==47.']

jaccard: 1.0

AS desired: [['flower(1,1)', 'flower(1,2)', 'flower(1,3)', 'flower(1,4)', 'flower(1,5)', 'flower(1,6)', 'flower(1,7)', 'flower(1,8)', 'flower(1,9)', 'flower(1,10)', 'flower(1,11)', 'flower(1,12)', 'flower(1,13)', 'flower(1,14)', 'flower(1,15)', 'flower(1,16)', 'flower(1,17)', 'flower(1,18)', 'flower(1,19)', 'flower(1,20)', 'flower(1,21)', 'flower(1,22)', 'flower(1,23)', 'flower(1,24)', 'flower(1,25)', 'flower(1,26)', 'flower(1,27)', 'flower(1,28)', 'flower(1,29)', 'flower(1,30)', 'flower(1,31)', 'flower(1,32)', 'flower(1,33)', 'flower(1,34)', 'flower(1,35)', 'flower(1,36)', 'flower(1,37)', 'flower(1,38)', 'flower(1,39)', 'flower(1,40)', 'flower(1,41)', 'flower(1,42)', 'flower(1,43)', 'flower(1,44)', 'flower(1,45)', 'flower(1,46)', 'flower(1,47)', 'flower(1,48)', 'flower(1,49)', 'flower(1,50)', 'flower(1,51)', 'flower(1,52)', 'flower(1,53)', 'flower(1,54)', 'flower(1,55)', 'flower(1,56)', 'flower(1,57)', 'flower(1,58)', 'flower(1,59)', 'flower(1,60)', 'flower(1,61)', 'flower(1,62)', 'flower(1,63)', 'flower(1,64)', 'flower(1,65)', 'flower(1,66)', 'flower(1,67)', 'flower(1,68)', 'flower(1,69)', 'flower(1,70)', 'flower(1,71)', 'flower(1,72)', 'flower(1,73)', 'flower(1,74)', 'flower(1,75)', 'flower(1,76)', 'flower(1,77)', 'flower(1,78)', 'flower(1,79)', 'flower(1,80)', 'flower(1,81)', 'flower(1,82)', 'flower(1,83)', 'flower(1,84)', 'flower(1,85)', 'flower(1,86)', 'flower(1,87)', 'flower(1,88)', 'flower(1,89)', 'flower(1,90)', 'flower(1,91)', 'flower(1,92)', 'flower(1,93)', 'flower(1,94)', 'flower(1,95)', 'flower(1,96)', 'flower(1,97)', 'flower(1,98)', 'flower(1,99)', 'flower(1,100)', 'flower(2,1)', 'flower(2,2)', 'flower(2,3)', 'flower(2,4)', 'flower(2,5)', 'flower(2,6)', 'flower(2,7)', 'flower(2,8)', 'flower(2,9)', 'flower(2,10)', 'flower(2,11)', 'flower(2,12)', 'flower(2,13)', 'flower(2,14)', 'flower(2,15)', 'flower(2,16)', 'flower(2,17)', 'flower(2,18)', 'flower(2,19)', 'flower(2,20)', 'flower(2,21)', 'flower(2,22)', 'flower(2,23)', 'flower(2,24)', 'flower(2,25)', 'flower(2,26)', 'flower(2,27)', 'flower(2,28)', 'flower(2,29)', 'flower(2,30)', 'flower(2,31)', 'flower(2,32)', 'flower(2,33)', 'flower(2,34)', 'flower(2,35)', 'flower(2,36)', 'flower(2,37)', 'flower(2,38)', 'flower(2,39)', 'flower(2,40)', 'flower(2,41)', 'flower(2,42)', 'flower(2,43)', 'flower(2,44)', 'flower(2,45)', 'flower(2,46)', 'flower(2,47)', 'flower(2,48)', 'flower(2,49)', 'flower(2,50)', 'flower(2,51)', 'flower(2,52)', 'flower(2,53)', 'flower(2,54)', 'flower(2,55)', 'flower(2,56)', 'flower(2,57)', 'flower(2,58)', 'flower(2,59)', 'flower(2,60)', 'flower(2,61)', 'flower(2,62)', 'flower(2,63)', 'flower(2,64)', 'flower(2,65)', 'flower(2,66)', 'flower(2,67)', 'flower(2,68)', 'flower(2,69)', 'flower(2,70)', 'flower(2,71)', 'flower(2,72)', 'flower(2,73)', 'flower(2,74)', 'flower(2,75)', 'flower(2,76)', 'flower(2,77)', 'flower(2,78)', 'flower(2,79)', 'flower(2,80)', 'flower(2,81)', 'flower(2,82)', 'flower(2,83)', 'flower(2,84)', 'flower(2,85)', 'flower(2,86)', 'flower(2,87)', 'flower(2,88)', 'flower(2,89)', 'flower(2,90)', 'flower(2,91)', 'flower(2,92)', 'flower(2,93)', 'flower(2,94)', 'flower(2,95)', 'flower(2,96)', 'flower(2,97)', 'flower(2,98)', 'flower(2,99)', 'flower(2,100)', 'flower(3,1)', 'flower(3,2)', 'flower(3,3)', 'flower(3,4)', 'flower(3,5)', 'flower(3,6)', 'flower(3,7)', 'flower(3,8)', 'flower(3,9)', 'flower(3,10)', 'flower(3,11)', 'flower(3,12)', 'flower(3,13)', 'flower(3,14)', 'flower(3,15)', 'flower(3,16)', 'flower(3,17)', 'flower(3,18)', 'flower(3,19)', 'flower(3,20)', 'flower(3,21)', 'flower(3,22)', 'flower(3,23)', 'flower(3,24)', 'flower(3,25)', 'flower(3,26)', 'flower(3,27)', 'flower(3,28)', 'flower(3,29)', 'flower(3,30)', 'flower(3,31)', 'flower(3,32)', 'flower(3,33)', 'flower(3,34)', 'flower(3,35)', 'flower(3,36)', 'flower(3,37)', 'flower(3,38)', 'flower(3,39)', 'flower(3,40)', 'flower(3,41)', 'flower(3,42)', 'flower(3,43)', 'flower(3,44)', 'flower(3,45)', 'flower(3,46)', 'flower(3,47)', 'flower(3,48)', 'flower(3,49)', 'flower(3,50)', 'flower(3,51)', 'flower(3,52)', 'flower(3,53)', 'flower(3,54)', 'flower(3,55)', 'flower(3,56)', 'flower(3,57)', 'flower(3,58)', 'flower(3,59)', 'flower(3,60)', 'flower(3,61)', 'flower(3,62)', 'flower(3,63)', 'flower(3,64)', 'flower(3,65)', 'flower(3,66)', 'flower(3,67)', 'flower(3,68)', 'flower(3,69)', 'flower(3,70)', 'flower(3,71)', 'flower(3,72)', 'flower(3,73)', 'flower(3,74)', 'flower(3,75)', 'flower(3,76)', 'flower(3,77)', 'flower(3,78)', 'flower(3,79)', 'flower(3,80)', 'flower(3,81)', 'flower(3,82)', 'flower(3,83)', 'flower(3,84)', 'flower(3,85)', 'flower(3,86)', 'flower(3,87)', 'flower(3,88)', 'flower(3,89)', 'flower(3,90)', 'flower(3,91)', 'flower(3,92)', 'flower(3,93)', 'flower(3,94)', 'flower(3,95)', 'flower(3,96)', 'flower(3,97)', 'flower(3,98)', 'flower(3,99)', 'flower(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['flower(1,1)', 'flower(1,2)', 'flower(1,3)', 'flower(1,4)', 'flower(1,5)', 'flower(1,6)', 'flower(1,7)', 'flower(1,8)', 'flower(1,9)', 'flower(1,10)', 'flower(1,11)', 'flower(1,12)', 'flower(1,13)', 'flower(1,14)', 'flower(1,15)', 'flower(1,16)', 'flower(1,17)', 'flower(1,18)', 'flower(1,19)', 'flower(1,20)', 'flower(1,21)', 'flower(1,22)', 'flower(1,23)', 'flower(1,24)', 'flower(1,25)', 'flower(1,26)', 'flower(1,27)', 'flower(1,28)', 'flower(1,29)', 'flower(1,30)', 'flower(1,31)', 'flower(1,32)', 'flower(1,33)', 'flower(1,34)', 'flower(1,35)', 'flower(1,36)', 'flower(1,37)', 'flower(1,38)', 'flower(1,39)', 'flower(1,40)', 'flower(1,41)', 'flower(1,42)', 'flower(1,43)', 'flower(1,44)', 'flower(1,45)', 'flower(1,46)', 'flower(1,47)', 'flower(1,48)', 'flower(1,49)', 'flower(1,50)', 'flower(1,51)', 'flower(1,52)', 'flower(1,53)', 'flower(1,54)', 'flower(1,55)', 'flower(1,56)', 'flower(1,57)', 'flower(1,58)', 'flower(1,59)', 'flower(1,60)', 'flower(1,61)', 'flower(1,62)', 'flower(1,63)', 'flower(1,64)', 'flower(1,65)', 'flower(1,66)', 'flower(1,67)', 'flower(1,68)', 'flower(1,69)', 'flower(1,70)', 'flower(1,71)', 'flower(1,72)', 'flower(1,73)', 'flower(1,74)', 'flower(1,75)', 'flower(1,76)', 'flower(1,77)', 'flower(1,78)', 'flower(1,79)', 'flower(1,80)', 'flower(1,81)', 'flower(1,82)', 'flower(1,83)', 'flower(1,84)', 'flower(1,85)', 'flower(1,86)', 'flower(1,87)', 'flower(1,88)', 'flower(1,89)', 'flower(1,90)', 'flower(1,91)', 'flower(1,92)', 'flower(1,93)', 'flower(1,94)', 'flower(1,95)', 'flower(1,96)', 'flower(1,97)', 'flower(1,98)', 'flower(1,99)', 'flower(1,100)', 'flower(2,1)', 'flower(2,2)', 'flower(2,3)', 'flower(2,4)', 'flower(2,5)', 'flower(2,6)', 'flower(2,7)', 'flower(2,8)', 'flower(2,9)', 'flower(2,10)', 'flower(2,11)', 'flower(2,12)', 'flower(2,13)', 'flower(2,14)', 'flower(2,15)', 'flower(2,16)', 'flower(2,17)', 'flower(2,18)', 'flower(2,19)', 'flower(2,20)', 'flower(2,21)', 'flower(2,22)', 'flower(2,23)', 'flower(2,24)', 'flower(2,25)', 'flower(2,26)', 'flower(2,27)', 'flower(2,28)', 'flower(2,29)', 'flower(2,30)', 'flower(2,31)', 'flower(2,32)', 'flower(2,33)', 'flower(2,34)', 'flower(2,35)', 'flower(2,36)', 'flower(2,37)', 'flower(2,38)', 'flower(2,39)', 'flower(2,40)', 'flower(2,41)', 'flower(2,42)', 'flower(2,43)', 'flower(2,44)', 'flower(2,45)', 'flower(2,46)', 'flower(2,47)', 'flower(2,48)', 'flower(2,49)', 'flower(2,50)', 'flower(2,51)', 'flower(2,52)', 'flower(2,53)', 'flower(2,54)', 'flower(2,55)', 'flower(2,56)', 'flower(2,57)', 'flower(2,58)', 'flower(2,59)', 'flower(2,60)', 'flower(2,61)', 'flower(2,62)', 'flower(2,63)', 'flower(2,64)', 'flower(2,65)', 'flower(2,66)', 'flower(2,67)', 'flower(2,68)', 'flower(2,69)', 'flower(2,70)', 'flower(2,71)', 'flower(2,72)', 'flower(2,73)', 'flower(2,74)', 'flower(2,75)', 'flower(2,76)', 'flower(2,77)', 'flower(2,78)', 'flower(2,79)', 'flower(2,80)', 'flower(2,81)', 'flower(2,82)', 'flower(2,83)', 'flower(2,84)', 'flower(2,85)', 'flower(2,86)', 'flower(2,87)', 'flower(2,88)', 'flower(2,89)', 'flower(2,90)', 'flower(2,91)', 'flower(2,92)', 'flower(2,93)', 'flower(2,94)', 'flower(2,95)', 'flower(2,96)', 'flower(2,97)', 'flower(2,98)', 'flower(2,99)', 'flower(2,100)', 'flower(3,1)', 'flower(3,2)', 'flower(3,3)', 'flower(3,4)', 'flower(3,5)', 'flower(3,6)', 'flower(3,7)', 'flower(3,8)', 'flower(3,9)', 'flower(3,10)', 'flower(3,11)', 'flower(3,12)', 'flower(3,13)', 'flower(3,14)', 'flower(3,15)', 'flower(3,16)', 'flower(3,17)', 'flower(3,18)', 'flower(3,19)', 'flower(3,20)', 'flower(3,21)', 'flower(3,22)', 'flower(3,23)', 'flower(3,24)', 'flower(3,25)', 'flower(3,26)', 'flower(3,27)', 'flower(3,28)', 'flower(3,29)', 'flower(3,30)', 'flower(3,31)', 'flower(3,32)', 'flower(3,33)', 'flower(3,34)', 'flower(3,35)', 'flower(3,36)', 'flower(3,37)', 'flower(3,38)', 'flower(3,39)', 'flower(3,40)', 'flower(3,41)', 'flower(3,42)', 'flower(3,43)', 'flower(3,44)', 'flower(3,45)', 'flower(3,46)', 'flower(3,47)', 'flower(3,48)', 'flower(3,49)', 'flower(3,50)', 'flower(3,51)', 'flower(3,52)', 'flower(3,53)', 'flower(3,54)', 'flower(3,55)', 'flower(3,56)', 'flower(3,57)', 'flower(3,58)', 'flower(3,59)', 'flower(3,60)', 'flower(3,61)', 'flower(3,62)', 'flower(3,63)', 'flower(3,64)', 'flower(3,65)', 'flower(3,66)', 'flower(3,67)', 'flower(3,68)', 'flower(3,69)', 'flower(3,70)', 'flower(3,71)', 'flower(3,72)', 'flower(3,73)', 'flower(3,74)', 'flower(3,75)', 'flower(3,76)', 'flower(3,77)', 'flower(3,78)', 'flower(3,79)', 'flower(3,80)', 'flower(3,81)', 'flower(3,82)', 'flower(3,83)', 'flower(3,84)', 'flower(3,85)', 'flower(3,86)', 'flower(3,87)', 'flower(3,88)', 'flower(3,89)', 'flower(3,90)', 'flower(3,91)', 'flower(3,92)', 'flower(3,93)', 'flower(3,94)', 'flower(3,95)', 'flower(3,96)', 'flower(3,97)', 'flower(3,98)', 'flower(3,99)', 'flower(3,100)', 'select(1)', 'select(2)', 'select(3)']]


495
assignment

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are "cairo","quality".

answer from file: 
assign(X,"cairo")|assign(X,"quality"):-lake(X).

parsed from model: 
assign(X,"cairo")|assign(X,"quality"):-lake(X).

facts: 
lake(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are "cairo","quality".
Answer: assign(X,"cairo")|assign(X,"quality"):-lake(X).
assign(X,"city"):- felicità(X,"city").
assign(X,"author"):- felicità(X,"author").
assign(X,"moto"):- felicità(X,"moto").
assign(X,"rome"):- felicità(X,"rome").
assign(X,"description","city"):- felicità(X,"description").
assign(X,"description","author"):- felicità(X,"description").
assign(X,"description","moto"):- felicità(X,"description").
assign(X,"description","rome"):- felicità(X,"description").
assign(X,"description","author"):

unique_rules: 
['assign(X,"cairo")|assign(X,"quality"):-lake(X).', 'assign(X,"city"):- felicità(X,"city").', 'assign(X,"author"):- felicità(X,"author").', 'assign(X,"moto"):- felicità(X,"moto").', 'assign(X,"rome"):- felicità(X,"rome").', 'assign(X,"description","city"):- felicità(X,"description").', 'assign(X,"description","author"):- felicità(X,"description").', 'assign(X,"description","moto"):- felicità(X,"description").', 'assign(X,"description","rome"):- felicità(X,"description").']

jaccard: 1.0

AS desired: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'assign(1,"quality")', 'assign(2,"cairo")', 'assign(3,"cairo")', 'assign(4,"quality")', 'assign(5,"cairo")']]
\AS obtained: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'assign(1,"quality")', 'assign(2,"cairo")', 'assign(3,"cairo")', 'assign(4,"quality")', 'assign(5,"cairo")']]


496
constraint

question: 
Craft an ASP application to avoid mapping the "cairo" predicate with value 8 to the label "singapore".

answer from file: 
:-assign(8,singapore).

parsed from model: 
:-assign(8,singapore).

facts: 
cairo(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-cairo(X).

generated: 
Craft an ASP application to avoid mapping the "cairo" predicate with value 8 to the label "singapore".
Answer: :-assign(8,singapore).
Explanation: The predicate "city" includes fields "ID","height","author","name","city","description","author","name","city","description","height","age","name","city","description","author","name","city","description","height","age","name","city","description","author","name","city","description","height","age","name","city","description","author","name","city","description","height","age","name","city","description","author","name","city","description","height","age","name","city","description","author","name","city","description","height","age","name","city","description","author","name","city","description","

unique_rules: 
[':-assign(8,singapore).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'cairo(1)', 'cairo(2)', 'cairo(3)', 'cairo(4)', 'cairo(5)', 'cairo(6)', 'cairo(7)', 'cairo(8)', 'cairo(9)', 'cairo(10)', 'cairo(11)', 'cairo(12)', 'cairo(13)', 'cairo(14)', 'cairo(15)', 'cairo(16)', 'cairo(17)', 'cairo(18)', 'cairo(19)', 'cairo(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'cairo(1)', 'cairo(2)', 'cairo(3)', 'cairo(4)', 'cairo(5)', 'cairo(6)', 'cairo(7)', 'cairo(8)', 'cairo(9)', 'cairo(10)', 'cairo(11)', 'cairo(12)', 'cairo(13)', 'cairo(14)', 'cairo(15)', 'cairo(16)', 'cairo(17)', 'cairo(18)', 'cairo(19)', 'cairo(20)']]


497
combination

question: 
Develop an ASP code snippet to produce all valid combinations of elements from the "owner" and "chicago" sets.

answer from file: 
combination(X,Y):-owner(X),chicago(Y).

parsed from model: 
combination(X,Y):-owner(X),chicago(Y).

facts: 
owner(1..4).chicago(1..5).

generated: 
Develop an ASP code snippet to produce all valid combinations of elements from the "owner" and "chicago" sets.
Answer: combination(X,Y):-owner(X),chicago(Y).
combination(X,Y):-owner(X),not chicago(Y).
combination(X,Y):-not owner(X),chicago(Y).
combination(X,Y):-not owner(X),not chicago(Y).

unique_rules: 
['combination(X,Y):-owner(X),chicago(Y).', 'combination(X,Y):-owner(X),not chicago(Y).', 'combination(X,Y):-not owner(X),chicago(Y).', 'combination(X,Y):-not owner(X),not chicago(Y).']

jaccard: 1.0

AS desired: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'chicago(5)', 'owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'chicago(5)', 'owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


498
join

question: 
Compose an ASP code snippet to define the predicate "laptop_barcelona" linking each laptop to the weight of barcelona, using the fields "ID","barcelonaID","weight" of "laptop" and the fields "ID","weight","lake" of "barcelona".

answer from file: 
laptop_barcelona(X,Z):-laptop(X,Y,_),barcelona(Y,Z,_).

parsed from model: 
laptop_barcelona(X,Z):-laptop(X,Y,_),barcelona(Y,Z,_).

facts: 
laptop("ID","barcelonaID","weight").barcelona("ID","weight","lake").

generated: 
Compose an ASP code snippet to define the predicate "laptop_barcelona" linking each laptop to the weight of barcelona, using the fields "ID","barcelonaID","weight" of "laptop" and the fields "ID","weight","lake" of "barcelona".
Answer: laptop_barcelona(X,Z):-laptop(X,Y,_),barcelona(Y,Z,_).
laptop(X,Y,_):-bike(X,Y,_).
barcelona(ID,Z,_):-bike(ID,Z,_).

unique_rules: 
['laptop_barcelona(X,Z):-laptop(X,Y,_),barcelona(Y,Z,_).', 'laptop(X,Y,_):-bike(X,Y,_).', 'barcelona(ID,Z,_):-bike(ID,Z,_).']

jaccard: 1.0

AS desired: [['laptop("ID","barcelonaID","weight")', 'barcelona("ID","weight","lake")']]
\AS obtained: [['laptop("ID","barcelonaID","weight")', 'barcelona("ID","weight","lake")']]


499
closure

question: 
Formulate an ASP solution to establish the transitive closure of the "white" predicate, defined as "trains".

answer from file: 
trains(X,Y):-white(X,Y).
trains(X,Y):-white(X,Z),trains(Z,Y).

parsed from model: 
closure(X,Y):-white(X,Y).
closure(X,Y):-white(X,Z),closure(Z,Y).

facts: 
white(1..3, 1..4).

generated: 
Formulate an ASP solution to establish the transitive closure of the "white" predicate, defined as "trains".
Answer: closure(X,Y):-white(X,Y).
closure(X,Y):-white(X,Z),closure(Z,Y).
closure(X,Y):-white(X,Z),not closure(Z,Y).
closure(X,Y):-not white(X,Y).
closure(X,Y):-X,Y.
closure(X,Y):-not X,not Y.

unique_rules: 
['closure(X,Y):-white(X,Y).', 'closure(X,Y):-white(X,Z),closure(Z,Y).', 'closure(X,Y):-white(X,Z),not closure(Z,Y).', 'closure(X,Y):-not white(X,Y).', 'closure(X,Y):-X,Y.', 'closure(X,Y):-not X,not Y.']

jaccard: 0.0

AS desired: [['white(1,1)', 'white(1,2)', 'white(1,3)', 'white(1,4)', 'white(2,1)', 'white(2,2)', 'white(2,3)', 'white(2,4)', 'white(3,1)', 'white(3,2)', 'white(3,3)', 'white(3,4)', 'trains(1,1)', 'trains(1,2)', 'trains(1,3)', 'trains(1,4)', 'trains(2,1)', 'trains(2,2)', 'trains(2,3)', 'trains(2,4)', 'trains(3,1)', 'trains(3,2)', 'trains(3,3)', 'trains(3,4)']]
\AS obtained: [['white(1,1)', 'white(1,2)', 'white(1,3)', 'white(1,4)', 'white(2,1)', 'white(2,2)', 'white(2,3)', 'white(2,4)', 'white(3,1)', 'white(3,2)', 'white(3,3)', 'white(3,4)', 'closure(1,1)', 'closure(1,2)', 'closure(1,3)', 'closure(1,4)', 'closure(2,1)', 'closure(2,2)', 'closure(2,3)', 'closure(2,4)', 'closure(3,1)', 'closure(3,2)', 'closure(3,3)', 'closure(3,4)']]


500
preference

question: 
Develop an ASP code snippet to avoid linking the "weight" predicate with value "2" to "quality". If such a link is found, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(2,"quality").[1@1]

parsed from model: 
:~assign(2,"quality").[1@1]

facts: 
weight(1..20).

generated: 
Develop an ASP code snippet to avoid linking the "weight" predicate with value "2" to "quality". If such a link is found, it incurs a cost of "1" at level "1".
Answer: :~assign(2,"quality").[1@1]
The predicate "price" includes fields "ID","city","author","height","name","price","description","author","city","name","height","description","price","author","city","name","height","description","price","author","city","name","height","description","price","author","city","name","height","description","price","author","city","name","height","description","price","author","city","name","height","description","price","author","city","name","height","description","price","author","city","name","height","description","price","author","city","name","height","description","price","author","city

unique_rules: 
[':~assign(2,"quality").[1@1]']

jaccard: 1.0

AS desired: [['weight(1)', 'weight(2)', 'weight(3)', 'weight(4)', 'weight(5)', 'weight(6)', 'weight(7)', 'weight(8)', 'weight(9)', 'weight(10)', 'weight(11)', 'weight(12)', 'weight(13)', 'weight(14)', 'weight(15)', 'weight(16)', 'weight(17)', 'weight(18)', 'weight(19)', 'weight(20)']]
\AS obtained: [['weight(1)', 'weight(2)', 'weight(3)', 'weight(4)', 'weight(5)', 'weight(6)', 'weight(7)', 'weight(8)', 'weight(9)', 'weight(10)', 'weight(11)', 'weight(12)', 'weight(13)', 'weight(14)', 'weight(15)', 'weight(16)', 'weight(17)', 'weight(18)', 'weight(19)', 'weight(20)']]


501
filtering

question: 
Develop an ASP program to select values tied to the label "mumbai" within the predicate "wall".

answer from file: 
select(X):-wall(X,"mumbai").

parsed from model: 
select(X):-wall(X,"mumbai").

facts: 
wall(1..5, "mumbai").

generated: 
Develop an ASP program to select values tied to the label "mumbai" within the predicate "wall".
Answer: select(X):-wall(X,"mumbai").
select(X):-wall(X,"dubai").
select(X):-wall(X,"moto").
select(X):-wall(X,"rome").
select(X):-wall(X,"shangai").
select(X):-wall(X,"dubai").
select(X):-wall(X,"moto").
select(X):-wall(X,"rome").
select(X):-wall(X,"shangai").
```

unique_rules: 
['select(X):-wall(X,"mumbai").', 'select(X):-wall(X,"dubai").', 'select(X):-wall(X,"moto").', 'select(X):-wall(X,"rome").', 'select(X):-wall(X,"shangai").']

jaccard: 1.0

AS desired: [['wall(1,"mumbai")', 'wall(2,"mumbai")', 'wall(3,"mumbai")', 'wall(4,"mumbai")', 'wall(5,"mumbai")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['wall(1,"mumbai")', 'wall(2,"mumbai")', 'wall(3,"mumbai")', 'wall(4,"mumbai")', 'wall(5,"mumbai")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


502
negative_filtering

question: 
Formulate an ASP code to gather values associated with the predicate "storm" but not connected to the predicate "cosenza" and labeled "strength".

answer from file: 
select(X):-storm(X),not cosenza(X,"strength").

parsed from model: 
select(X):-storm(X),not cosenza(X,"strength").

facts: 
storm(1..3).cosenza(1,"singapore").cosenza(2,"butterfly").cosenza(3,"owner").

generated: 
Formulate an ASP code to gather values associated with the predicate "storm" but not connected to the predicate "cosenza" and labeled "strength".
Answer: select(X):-storm(X),not cosenza(X,"strength").

unique_rules: 
['select(X):-storm(X),not cosenza(X,"strength").']

jaccard: 1.0

AS desired: [['storm(1)', 'storm(2)', 'storm(3)', 'cosenza(1,"singapore")', 'cosenza(2,"butterfly")', 'cosenza(3,"owner")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['storm(1)', 'storm(2)', 'storm(3)', 'cosenza(1,"singapore")', 'cosenza(2,"butterfly")', 'cosenza(3,"owner")', 'select(1)', 'select(2)', 'select(3)']]


503
numeric_filtering

question: 
Write an ASP program for the following problem. Select all values associated with predicate "butterfly" with a value different than 64.

answer from file: 
select(X):-butterfly(X,C),C!=64.

parsed from model: 
select(X):- arrivant(X,C),C!=64.

facts: 
butterfly(1..3, 1..100).

generated: 
Write an ASP program for the following problem. Select all values associated with predicate "butterfly" with a value different than 64.
Answer: select(X):- arrivant(X,C),C!=64.
 arrivant(X,C):- arrivant(X,C1),C1!=64.
The predicate " arrivant" has fields "ID","height","author","city","description","name","price","author","city","description","name","height","author","city","description","price","author","city","description","name","height","author","city","description","price","author","city","description","name","height","author","city","description","price","author","city","description","name","height","author","city","description","price","author","city","description","name","height","author","city","description","price

unique_rules: 
['select(X):- arrivant(X,C),C!=64.', 'arrivant(X,C):- arrivant(X,C1),C1!=64.']

jaccard: 0.0

AS desired: [['butterfly(1,1)', 'butterfly(1,2)', 'butterfly(1,3)', 'butterfly(1,4)', 'butterfly(1,5)', 'butterfly(1,6)', 'butterfly(1,7)', 'butterfly(1,8)', 'butterfly(1,9)', 'butterfly(1,10)', 'butterfly(1,11)', 'butterfly(1,12)', 'butterfly(1,13)', 'butterfly(1,14)', 'butterfly(1,15)', 'butterfly(1,16)', 'butterfly(1,17)', 'butterfly(1,18)', 'butterfly(1,19)', 'butterfly(1,20)', 'butterfly(1,21)', 'butterfly(1,22)', 'butterfly(1,23)', 'butterfly(1,24)', 'butterfly(1,25)', 'butterfly(1,26)', 'butterfly(1,27)', 'butterfly(1,28)', 'butterfly(1,29)', 'butterfly(1,30)', 'butterfly(1,31)', 'butterfly(1,32)', 'butterfly(1,33)', 'butterfly(1,34)', 'butterfly(1,35)', 'butterfly(1,36)', 'butterfly(1,37)', 'butterfly(1,38)', 'butterfly(1,39)', 'butterfly(1,40)', 'butterfly(1,41)', 'butterfly(1,42)', 'butterfly(1,43)', 'butterfly(1,44)', 'butterfly(1,45)', 'butterfly(1,46)', 'butterfly(1,47)', 'butterfly(1,48)', 'butterfly(1,49)', 'butterfly(1,50)', 'butterfly(1,51)', 'butterfly(1,52)', 'butterfly(1,53)', 'butterfly(1,54)', 'butterfly(1,55)', 'butterfly(1,56)', 'butterfly(1,57)', 'butterfly(1,58)', 'butterfly(1,59)', 'butterfly(1,60)', 'butterfly(1,61)', 'butterfly(1,62)', 'butterfly(1,63)', 'butterfly(1,64)', 'butterfly(1,65)', 'butterfly(1,66)', 'butterfly(1,67)', 'butterfly(1,68)', 'butterfly(1,69)', 'butterfly(1,70)', 'butterfly(1,71)', 'butterfly(1,72)', 'butterfly(1,73)', 'butterfly(1,74)', 'butterfly(1,75)', 'butterfly(1,76)', 'butterfly(1,77)', 'butterfly(1,78)', 'butterfly(1,79)', 'butterfly(1,80)', 'butterfly(1,81)', 'butterfly(1,82)', 'butterfly(1,83)', 'butterfly(1,84)', 'butterfly(1,85)', 'butterfly(1,86)', 'butterfly(1,87)', 'butterfly(1,88)', 'butterfly(1,89)', 'butterfly(1,90)', 'butterfly(1,91)', 'butterfly(1,92)', 'butterfly(1,93)', 'butterfly(1,94)', 'butterfly(1,95)', 'butterfly(1,96)', 'butterfly(1,97)', 'butterfly(1,98)', 'butterfly(1,99)', 'butterfly(1,100)', 'butterfly(2,1)', 'butterfly(2,2)', 'butterfly(2,3)', 'butterfly(2,4)', 'butterfly(2,5)', 'butterfly(2,6)', 'butterfly(2,7)', 'butterfly(2,8)', 'butterfly(2,9)', 'butterfly(2,10)', 'butterfly(2,11)', 'butterfly(2,12)', 'butterfly(2,13)', 'butterfly(2,14)', 'butterfly(2,15)', 'butterfly(2,16)', 'butterfly(2,17)', 'butterfly(2,18)', 'butterfly(2,19)', 'butterfly(2,20)', 'butterfly(2,21)', 'butterfly(2,22)', 'butterfly(2,23)', 'butterfly(2,24)', 'butterfly(2,25)', 'butterfly(2,26)', 'butterfly(2,27)', 'butterfly(2,28)', 'butterfly(2,29)', 'butterfly(2,30)', 'butterfly(2,31)', 'butterfly(2,32)', 'butterfly(2,33)', 'butterfly(2,34)', 'butterfly(2,35)', 'butterfly(2,36)', 'butterfly(2,37)', 'butterfly(2,38)', 'butterfly(2,39)', 'butterfly(2,40)', 'butterfly(2,41)', 'butterfly(2,42)', 'butterfly(2,43)', 'butterfly(2,44)', 'butterfly(2,45)', 'butterfly(2,46)', 'butterfly(2,47)', 'butterfly(2,48)', 'butterfly(2,49)', 'butterfly(2,50)', 'butterfly(2,51)', 'butterfly(2,52)', 'butterfly(2,53)', 'butterfly(2,54)', 'butterfly(2,55)', 'butterfly(2,56)', 'butterfly(2,57)', 'butterfly(2,58)', 'butterfly(2,59)', 'butterfly(2,60)', 'butterfly(2,61)', 'butterfly(2,62)', 'butterfly(2,63)', 'butterfly(2,64)', 'butterfly(2,65)', 'butterfly(2,66)', 'butterfly(2,67)', 'butterfly(2,68)', 'butterfly(2,69)', 'butterfly(2,70)', 'butterfly(2,71)', 'butterfly(2,72)', 'butterfly(2,73)', 'butterfly(2,74)', 'butterfly(2,75)', 'butterfly(2,76)', 'butterfly(2,77)', 'butterfly(2,78)', 'butterfly(2,79)', 'butterfly(2,80)', 'butterfly(2,81)', 'butterfly(2,82)', 'butterfly(2,83)', 'butterfly(2,84)', 'butterfly(2,85)', 'butterfly(2,86)', 'butterfly(2,87)', 'butterfly(2,88)', 'butterfly(2,89)', 'butterfly(2,90)', 'butterfly(2,91)', 'butterfly(2,92)', 'butterfly(2,93)', 'butterfly(2,94)', 'butterfly(2,95)', 'butterfly(2,96)', 'butterfly(2,97)', 'butterfly(2,98)', 'butterfly(2,99)', 'butterfly(2,100)', 'butterfly(3,1)', 'butterfly(3,2)', 'butterfly(3,3)', 'butterfly(3,4)', 'butterfly(3,5)', 'butterfly(3,6)', 'butterfly(3,7)', 'butterfly(3,8)', 'butterfly(3,9)', 'butterfly(3,10)', 'butterfly(3,11)', 'butterfly(3,12)', 'butterfly(3,13)', 'butterfly(3,14)', 'butterfly(3,15)', 'butterfly(3,16)', 'butterfly(3,17)', 'butterfly(3,18)', 'butterfly(3,19)', 'butterfly(3,20)', 'butterfly(3,21)', 'butterfly(3,22)', 'butterfly(3,23)', 'butterfly(3,24)', 'butterfly(3,25)', 'butterfly(3,26)', 'butterfly(3,27)', 'butterfly(3,28)', 'butterfly(3,29)', 'butterfly(3,30)', 'butterfly(3,31)', 'butterfly(3,32)', 'butterfly(3,33)', 'butterfly(3,34)', 'butterfly(3,35)', 'butterfly(3,36)', 'butterfly(3,37)', 'butterfly(3,38)', 'butterfly(3,39)', 'butterfly(3,40)', 'butterfly(3,41)', 'butterfly(3,42)', 'butterfly(3,43)', 'butterfly(3,44)', 'butterfly(3,45)', 'butterfly(3,46)', 'butterfly(3,47)', 'butterfly(3,48)', 'butterfly(3,49)', 'butterfly(3,50)', 'butterfly(3,51)', 'butterfly(3,52)', 'butterfly(3,53)', 'butterfly(3,54)', 'butterfly(3,55)', 'butterfly(3,56)', 'butterfly(3,57)', 'butterfly(3,58)', 'butterfly(3,59)', 'butterfly(3,60)', 'butterfly(3,61)', 'butterfly(3,62)', 'butterfly(3,63)', 'butterfly(3,64)', 'butterfly(3,65)', 'butterfly(3,66)', 'butterfly(3,67)', 'butterfly(3,68)', 'butterfly(3,69)', 'butterfly(3,70)', 'butterfly(3,71)', 'butterfly(3,72)', 'butterfly(3,73)', 'butterfly(3,74)', 'butterfly(3,75)', 'butterfly(3,76)', 'butterfly(3,77)', 'butterfly(3,78)', 'butterfly(3,79)', 'butterfly(3,80)', 'butterfly(3,81)', 'butterfly(3,82)', 'butterfly(3,83)', 'butterfly(3,84)', 'butterfly(3,85)', 'butterfly(3,86)', 'butterfly(3,87)', 'butterfly(3,88)', 'butterfly(3,89)', 'butterfly(3,90)', 'butterfly(3,91)', 'butterfly(3,92)', 'butterfly(3,93)', 'butterfly(3,94)', 'butterfly(3,95)', 'butterfly(3,96)', 'butterfly(3,97)', 'butterfly(3,98)', 'butterfly(3,99)', 'butterfly(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['butterfly(1,1)', 'butterfly(1,2)', 'butterfly(1,3)', 'butterfly(1,4)', 'butterfly(1,5)', 'butterfly(1,6)', 'butterfly(1,7)', 'butterfly(1,8)', 'butterfly(1,9)', 'butterfly(1,10)', 'butterfly(1,11)', 'butterfly(1,12)', 'butterfly(1,13)', 'butterfly(1,14)', 'butterfly(1,15)', 'butterfly(1,16)', 'butterfly(1,17)', 'butterfly(1,18)', 'butterfly(1,19)', 'butterfly(1,20)', 'butterfly(1,21)', 'butterfly(1,22)', 'butterfly(1,23)', 'butterfly(1,24)', 'butterfly(1,25)', 'butterfly(1,26)', 'butterfly(1,27)', 'butterfly(1,28)', 'butterfly(1,29)', 'butterfly(1,30)', 'butterfly(1,31)', 'butterfly(1,32)', 'butterfly(1,33)', 'butterfly(1,34)', 'butterfly(1,35)', 'butterfly(1,36)', 'butterfly(1,37)', 'butterfly(1,38)', 'butterfly(1,39)', 'butterfly(1,40)', 'butterfly(1,41)', 'butterfly(1,42)', 'butterfly(1,43)', 'butterfly(1,44)', 'butterfly(1,45)', 'butterfly(1,46)', 'butterfly(1,47)', 'butterfly(1,48)', 'butterfly(1,49)', 'butterfly(1,50)', 'butterfly(1,51)', 'butterfly(1,52)', 'butterfly(1,53)', 'butterfly(1,54)', 'butterfly(1,55)', 'butterfly(1,56)', 'butterfly(1,57)', 'butterfly(1,58)', 'butterfly(1,59)', 'butterfly(1,60)', 'butterfly(1,61)', 'butterfly(1,62)', 'butterfly(1,63)', 'butterfly(1,64)', 'butterfly(1,65)', 'butterfly(1,66)', 'butterfly(1,67)', 'butterfly(1,68)', 'butterfly(1,69)', 'butterfly(1,70)', 'butterfly(1,71)', 'butterfly(1,72)', 'butterfly(1,73)', 'butterfly(1,74)', 'butterfly(1,75)', 'butterfly(1,76)', 'butterfly(1,77)', 'butterfly(1,78)', 'butterfly(1,79)', 'butterfly(1,80)', 'butterfly(1,81)', 'butterfly(1,82)', 'butterfly(1,83)', 'butterfly(1,84)', 'butterfly(1,85)', 'butterfly(1,86)', 'butterfly(1,87)', 'butterfly(1,88)', 'butterfly(1,89)', 'butterfly(1,90)', 'butterfly(1,91)', 'butterfly(1,92)', 'butterfly(1,93)', 'butterfly(1,94)', 'butterfly(1,95)', 'butterfly(1,96)', 'butterfly(1,97)', 'butterfly(1,98)', 'butterfly(1,99)', 'butterfly(1,100)', 'butterfly(2,1)', 'butterfly(2,2)', 'butterfly(2,3)', 'butterfly(2,4)', 'butterfly(2,5)', 'butterfly(2,6)', 'butterfly(2,7)', 'butterfly(2,8)', 'butterfly(2,9)', 'butterfly(2,10)', 'butterfly(2,11)', 'butterfly(2,12)', 'butterfly(2,13)', 'butterfly(2,14)', 'butterfly(2,15)', 'butterfly(2,16)', 'butterfly(2,17)', 'butterfly(2,18)', 'butterfly(2,19)', 'butterfly(2,20)', 'butterfly(2,21)', 'butterfly(2,22)', 'butterfly(2,23)', 'butterfly(2,24)', 'butterfly(2,25)', 'butterfly(2,26)', 'butterfly(2,27)', 'butterfly(2,28)', 'butterfly(2,29)', 'butterfly(2,30)', 'butterfly(2,31)', 'butterfly(2,32)', 'butterfly(2,33)', 'butterfly(2,34)', 'butterfly(2,35)', 'butterfly(2,36)', 'butterfly(2,37)', 'butterfly(2,38)', 'butterfly(2,39)', 'butterfly(2,40)', 'butterfly(2,41)', 'butterfly(2,42)', 'butterfly(2,43)', 'butterfly(2,44)', 'butterfly(2,45)', 'butterfly(2,46)', 'butterfly(2,47)', 'butterfly(2,48)', 'butterfly(2,49)', 'butterfly(2,50)', 'butterfly(2,51)', 'butterfly(2,52)', 'butterfly(2,53)', 'butterfly(2,54)', 'butterfly(2,55)', 'butterfly(2,56)', 'butterfly(2,57)', 'butterfly(2,58)', 'butterfly(2,59)', 'butterfly(2,60)', 'butterfly(2,61)', 'butterfly(2,62)', 'butterfly(2,63)', 'butterfly(2,64)', 'butterfly(2,65)', 'butterfly(2,66)', 'butterfly(2,67)', 'butterfly(2,68)', 'butterfly(2,69)', 'butterfly(2,70)', 'butterfly(2,71)', 'butterfly(2,72)', 'butterfly(2,73)', 'butterfly(2,74)', 'butterfly(2,75)', 'butterfly(2,76)', 'butterfly(2,77)', 'butterfly(2,78)', 'butterfly(2,79)', 'butterfly(2,80)', 'butterfly(2,81)', 'butterfly(2,82)', 'butterfly(2,83)', 'butterfly(2,84)', 'butterfly(2,85)', 'butterfly(2,86)', 'butterfly(2,87)', 'butterfly(2,88)', 'butterfly(2,89)', 'butterfly(2,90)', 'butterfly(2,91)', 'butterfly(2,92)', 'butterfly(2,93)', 'butterfly(2,94)', 'butterfly(2,95)', 'butterfly(2,96)', 'butterfly(2,97)', 'butterfly(2,98)', 'butterfly(2,99)', 'butterfly(2,100)', 'butterfly(3,1)', 'butterfly(3,2)', 'butterfly(3,3)', 'butterfly(3,4)', 'butterfly(3,5)', 'butterfly(3,6)', 'butterfly(3,7)', 'butterfly(3,8)', 'butterfly(3,9)', 'butterfly(3,10)', 'butterfly(3,11)', 'butterfly(3,12)', 'butterfly(3,13)', 'butterfly(3,14)', 'butterfly(3,15)', 'butterfly(3,16)', 'butterfly(3,17)', 'butterfly(3,18)', 'butterfly(3,19)', 'butterfly(3,20)', 'butterfly(3,21)', 'butterfly(3,22)', 'butterfly(3,23)', 'butterfly(3,24)', 'butterfly(3,25)', 'butterfly(3,26)', 'butterfly(3,27)', 'butterfly(3,28)', 'butterfly(3,29)', 'butterfly(3,30)', 'butterfly(3,31)', 'butterfly(3,32)', 'butterfly(3,33)', 'butterfly(3,34)', 'butterfly(3,35)', 'butterfly(3,36)', 'butterfly(3,37)', 'butterfly(3,38)', 'butterfly(3,39)', 'butterfly(3,40)', 'butterfly(3,41)', 'butterfly(3,42)', 'butterfly(3,43)', 'butterfly(3,44)', 'butterfly(3,45)', 'butterfly(3,46)', 'butterfly(3,47)', 'butterfly(3,48)', 'butterfly(3,49)', 'butterfly(3,50)', 'butterfly(3,51)', 'butterfly(3,52)', 'butterfly(3,53)', 'butterfly(3,54)', 'butterfly(3,55)', 'butterfly(3,56)', 'butterfly(3,57)', 'butterfly(3,58)', 'butterfly(3,59)', 'butterfly(3,60)', 'butterfly(3,61)', 'butterfly(3,62)', 'butterfly(3,63)', 'butterfly(3,64)', 'butterfly(3,65)', 'butterfly(3,66)', 'butterfly(3,67)', 'butterfly(3,68)', 'butterfly(3,69)', 'butterfly(3,70)', 'butterfly(3,71)', 'butterfly(3,72)', 'butterfly(3,73)', 'butterfly(3,74)', 'butterfly(3,75)', 'butterfly(3,76)', 'butterfly(3,77)', 'butterfly(3,78)', 'butterfly(3,79)', 'butterfly(3,80)', 'butterfly(3,81)', 'butterfly(3,82)', 'butterfly(3,83)', 'butterfly(3,84)', 'butterfly(3,85)', 'butterfly(3,86)', 'butterfly(3,87)', 'butterfly(3,88)', 'butterfly(3,89)', 'butterfly(3,90)', 'butterfly(3,91)', 'butterfly(3,92)', 'butterfly(3,93)', 'butterfly(3,94)', 'butterfly(3,95)', 'butterfly(3,96)', 'butterfly(3,97)', 'butterfly(3,98)', 'butterfly(3,99)', 'butterfly(3,100)']]


504
assignment

question: 
Craft an ASP solution that associates precisely one label from "lake","delhi","white","cairo" with elements specified by the predicate "quality".

answer from file: 
assign(X,"lake")|assign(X,"delhi")|assign(X,"white")|assign(X,"cairo"):-quality(X).

parsed from model: 
assign(X,"lake")|assign(X,"delhi")|assign(X,"white")|assign(X,"cairo"):-quality(X).

facts: 
quality(1..5).

generated: 
Craft an ASP solution that associates precisely one label from "lake","delhi","white","cairo" with elements specified by the predicate "quality".
Answer: assign(X,"lake")|assign(X,"delhi")|assign(X,"white")|assign(X,"cairo"):-quality(X).
assign(X,"lake"):-price(X).
assign(X,"delhi"):-price(X).
assign(X,"white"):-price(X).
assign(X,"cairo"):-price(X).
where price(X) is a predicate that determines the price of the element specified by X.

unique_rules: 
['assign(X,"lake")|assign(X,"delhi")|assign(X,"white")|assign(X,"cairo"):-quality(X).', 'assign(X,"lake"):-price(X).', 'assign(X,"delhi"):-price(X).', 'assign(X,"white"):-price(X).', 'assign(X,"cairo"):-price(X).']

jaccard: 1.0

AS desired: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'assign(1,"white")', 'assign(2,"cairo")', 'assign(3,"white")', 'assign(4,"cairo")', 'assign(5,"cairo")']]
\AS obtained: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'assign(1,"white")', 'assign(2,"cairo")', 'assign(3,"white")', 'assign(4,"cairo")', 'assign(5,"cairo")']]


505
constraint

question: 
Design an ASP application that prohibits assigning the "owner" predicate with value 13 to the label "cosenza".

answer from file: 
:-assign(13,cosenza).

parsed from model: 
:-assign(13,cosenza).

facts: 
owner(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-owner(X).

generated: 
Design an ASP application that prohibits assigning the "owner" predicate with value 13 to the label "cosenza".
Answer: :-assign(13,cosenza).
Explanation: The predicate "author" includes fields "ID","height","city","name","author","description","price","city","description","author","name","age","height","city","description","price","author","name","city","description","author","name","age","height","city","description","price","author","name","city","description","author","name","age","height","city","description","price","author","name","city","description","author","name","age","height","city","description","price","author","name","city","description","author","name","age","height","city","description","price","author","name","city","description

unique_rules: 
[':-assign(13,cosenza).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'owner(5)', 'owner(6)', 'owner(7)', 'owner(8)', 'owner(9)', 'owner(10)', 'owner(11)', 'owner(12)', 'owner(13)', 'owner(14)', 'owner(15)', 'owner(16)', 'owner(17)', 'owner(18)', 'owner(19)', 'owner(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'owner(5)', 'owner(6)', 'owner(7)', 'owner(8)', 'owner(9)', 'owner(10)', 'owner(11)', 'owner(12)', 'owner(13)', 'owner(14)', 'owner(15)', 'owner(16)', 'owner(17)', 'owner(18)', 'owner(19)', 'owner(20)']]


506
combination

question: 
Design an ASP solution to compute all possible pairings of elements from two sets defined by the predicates "chicago" and "moscow".

answer from file: 
combination(X,Y):-chicago(X),moscow(Y).

parsed from model: 
combination(X,Y):-chicago(X),moscow(Y).

facts: 
chicago(1..4).moscow(1..5).

generated: 
Design an ASP solution to compute all possible pairings of elements from two sets defined by the predicates "chicago" and "moscow".
Answer: combination(X,Y):-chicago(X),moscow(Y).
combination(X,Y):-chicago(X),not moscow(Y).
combination(X,Y):-not chicago(X),moscow(Y).
combination(X,Y):-not chicago(X),not moscow(Y).

unique_rules: 
['combination(X,Y):-chicago(X),moscow(Y).', 'combination(X,Y):-chicago(X),not moscow(Y).', 'combination(X,Y):-not chicago(X),moscow(Y).', 'combination(X,Y):-not chicago(X),not moscow(Y).']

jaccard: 1.0

AS desired: [['moscow(1)', 'moscow(2)', 'moscow(3)', 'moscow(4)', 'moscow(5)', 'chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['moscow(1)', 'moscow(2)', 'moscow(3)', 'moscow(4)', 'moscow(5)', 'chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


507
join

question: 
Create an ASP program to define the predicate "wall_darkmagenta" that links each wall to the quality of darkmagenta, using fields "ID","darkmagentaID","weight","surname","quality" for "wall" and fields "ID","hair","lake","quality" for "darkmagenta".

answer from file: 
wall_darkmagenta(X,Z):-wall(X,Y,_,_,_),darkmagenta(Y,_,_,Z).

parsed from model: 
wall_darkmagenta(X,Z):-wall(X,Y,_,_,_),darkmagenta(Y,hair,lake,Z).

facts: 
wall("ID","darkmagentaID","weight","surname","quality").darkmagenta("ID","hair","lake","quality").

generated: 
Create an ASP program to define the predicate "wall_darkmagenta" that links each wall to the quality of darkmagenta, using fields "ID","darkmagentaID","weight","surname","quality" for "wall" and fields "ID","hair","lake","quality" for "darkmagenta".
Answer: wall_darkmagenta(X,Z):-wall(X,Y,_,_,_),darkmagenta(Y,hair,lake,Z).
wall_darkmagenta(X,Z):-wall(X,Y,_,_,Z),darkmagenta(Y,_,_,Z).

unique_rules: 
['wall_darkmagenta(X,Z):-wall(X,Y,_,_,_),darkmagenta(Y,hair,lake,Z).', 'wall_darkmagenta(X,Z):-wall(X,Y,_,_,Z),darkmagenta(Y,_,_,Z).']

jaccard: 1.0

AS desired: [['wall("ID","darkmagentaID","weight","surname","quality")', 'darkmagenta("ID","hair","lake","quality")']]
\AS obtained: [['darkmagenta("ID","hair","lake","quality")', 'wall("ID","darkmagentaID","weight","surname","quality")']]


508
closure

question: 
Design an ASP program that infers the "loops" predicate using the transitive closure of the "butterfly" predicate.

answer from file: 
loops(X,Y):-butterfly(X,Y).
loops(X,Y):-butterfly(X,Z),loops(Z,Y).

parsed from model: 
loops(X,Y):-butterfly(X,Y).
loops(X,Y):- arrivant(X,Y).

facts: 
butterfly(1..3, 1..4).

generated: 
Design an ASP program that infers the "loops" predicate using the transitive closure of the "butterfly" predicate.
Answer: loops(X,Y):-butterfly(X,Y).
loops(X,Y):- arrivant(X,Y).
loops(X,Y):-car(X,Y).
loops(X,Y):-bike(X,Y).
loops(X,Y):-height(X,Y).
loops(X,Y):-moto(X,Y).
loops(X,Y):-name(X,Y).
loops(X,Y):-object(X,Y).
loops(X,Y):-shape(X,Y).
loops(X,Y):-moto(X,Y).
loops(X,Y):-name(X,Y).
loops(X,

unique_rules: 
['loops(X,Y):-butterfly(X,Y).', 'loops(X,Y):- arrivant(X,Y).', 'loops(X,Y):-car(X,Y).', 'loops(X,Y):-bike(X,Y).', 'loops(X,Y):-height(X,Y).', 'loops(X,Y):-moto(X,Y).', 'loops(X,Y):-name(X,Y).', 'loops(X,Y):-object(X,Y).', 'loops(X,Y):-shape(X,Y).']

jaccard: 1.0

AS desired: [['butterfly(1,1)', 'butterfly(1,2)', 'butterfly(1,3)', 'butterfly(1,4)', 'butterfly(2,1)', 'butterfly(2,2)', 'butterfly(2,3)', 'butterfly(2,4)', 'butterfly(3,1)', 'butterfly(3,2)', 'butterfly(3,3)', 'butterfly(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]
\AS obtained: [['butterfly(1,1)', 'butterfly(1,2)', 'butterfly(1,3)', 'butterfly(1,4)', 'butterfly(2,1)', 'butterfly(2,2)', 'butterfly(2,3)', 'butterfly(2,4)', 'butterfly(3,1)', 'butterfly(3,2)', 'butterfly(3,3)', 'butterfly(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]


509
preference

question: 
Generate an ASP program to disallow the association of the predicate "mumbai" with value "3" with "singapore". If associated, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(3,"singapore").[1@1]

parsed from model: 
:~assign(3,"singapore").[1@1]

facts: 
mumbai(1..20).

generated: 
Generate an ASP program to disallow the association of the predicate "mumbai" with value "3" with "singapore". If associated, it incurs a cost of "1" at level "1".
Answer: :~assign(3,"singapore").[1@1]
This program uses the predicate "city" with fields "ID","height","author","name","price","city","description","author","name","price","city","description","height","author","name","price","city","description","author","name","price","city","description","height","author","name","price","city","description","author","name","price","city","description","height","author","name","price","city","description","author","name","price","city","description","height","author","name","price","city","description","author","name","price","city","description","height","author","name","price","city

unique_rules: 
[':~assign(3,"singapore").[1@1]']

jaccard: 1.0

AS desired: [['mumbai(1)', 'mumbai(2)', 'mumbai(3)', 'mumbai(4)', 'mumbai(5)', 'mumbai(6)', 'mumbai(7)', 'mumbai(8)', 'mumbai(9)', 'mumbai(10)', 'mumbai(11)', 'mumbai(12)', 'mumbai(13)', 'mumbai(14)', 'mumbai(15)', 'mumbai(16)', 'mumbai(17)', 'mumbai(18)', 'mumbai(19)', 'mumbai(20)']]
\AS obtained: [['mumbai(1)', 'mumbai(2)', 'mumbai(3)', 'mumbai(4)', 'mumbai(5)', 'mumbai(6)', 'mumbai(7)', 'mumbai(8)', 'mumbai(9)', 'mumbai(10)', 'mumbai(11)', 'mumbai(12)', 'mumbai(13)', 'mumbai(14)', 'mumbai(15)', 'mumbai(16)', 'mumbai(17)', 'mumbai(18)', 'mumbai(19)', 'mumbai(20)']]


510
filtering

question: 
Compose an ASP solution to gather data from the "weight" predicate associated with the label "darkmagenta".

answer from file: 
select(X):-weight(X,"darkmagenta").

parsed from model: 
select(X):-weight(X,"darkmagenta").

facts: 
weight(1..5, "darkmagenta").

generated: 
Compose an ASP solution to gather data from the "weight" predicate associated with the label "darkmagenta".
Answer: select(X):-weight(X,"darkmagenta").
weight(X,"darkmagenta")|select(X):-weight(X,"gray").
weight(X,"gray")|select(X):-weight(X,"rome").
weight(X,"rome")|select(X):-weight(X,"color").
weight(X,"color")|select(X):-weight(X,"amsterdam").
weight(X,"amsterdam")|select(X):-weight(X,"moto").
weight(X,"moto")|select(X):-weight(X,"height").
weight(X,"height")|select(X):-weight(X,"description").
weight(X,"description")

unique_rules: 
['select(X):-weight(X,"darkmagenta").', 'weight(X,"darkmagenta")|select(X):-weight(X,"gray").', 'weight(X,"gray")|select(X):-weight(X,"rome").', 'weight(X,"rome")|select(X):-weight(X,"color").', 'weight(X,"color")|select(X):-weight(X,"amsterdam").', 'weight(X,"amsterdam")|select(X):-weight(X,"moto").', 'weight(X,"moto")|select(X):-weight(X,"height").', 'weight(X,"height")|select(X):-weight(X,"description").']

jaccard: 1.0

AS desired: [['weight(1,"darkmagenta")', 'weight(2,"darkmagenta")', 'weight(3,"darkmagenta")', 'weight(4,"darkmagenta")', 'weight(5,"darkmagenta")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['weight(1,"darkmagenta")', 'weight(2,"darkmagenta")', 'weight(3,"darkmagenta")', 'weight(4,"darkmagenta")', 'weight(5,"darkmagenta")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


511
negative_filtering

question: 
Create an ASP application to fetch values associated with the predicate "roof" but not linked to the predicate "quality" and labeled "cosenza".

answer from file: 
select(X):-roof(X),not quality(X,"cosenza").

parsed from model: 
select(X):-roof(X),not quality(X,"cosenza").

facts: 
roof(1..3).quality(1,"barcelona").quality(2,"cosenza").quality(3,"laptop").

generated: 
Create an ASP application to fetch values associated with the predicate "roof" but not linked to the predicate "quality" and labeled "cosenza".
Answer: select(X):-roof(X),not quality(X,"cosenza").
Explanation: The predicate "roof" includes values associated with the predicate "city","height","moto","author","description","rome","city","author","description","height","name","moto","city","description","author","height","name","description","city","author","description","height","name","description","city","author","description","height","name","description","city","author","description","height","name","description","city","author","description","height","name","description","city","author","description","height","name","description","city","author","description","height","name","description","city","author","description","height","

unique_rules: 
['select(X):-roof(X),not quality(X,"cosenza").']

jaccard: 1.0

AS desired: [['roof(1)', 'roof(2)', 'roof(3)', 'quality(1,"barcelona")', 'quality(2,"cosenza")', 'quality(3,"laptop")', 'select(1)', 'select(3)']]
\AS obtained: [['roof(1)', 'roof(2)', 'roof(3)', 'quality(1,"barcelona")', 'quality(2,"cosenza")', 'quality(3,"laptop")', 'select(1)', 'select(3)']]


512
numeric_filtering

question: 
Write an ASP solution to identify values tied to the predicate "hair" with a value different than 45.

answer from file: 
select(X):-hair(X,C),C!=45.

parsed from model: 
select(X):-hair(X,C),C!=45.

facts: 
hair(1..3, 1..100).

generated: 
Write an ASP solution to identify values tied to the predicate "hair" with a value different than 45.
Answer: select(X):-hair(X,C),C!=45.
Explanation: The predicate "hair" includes values tied to the predicate "author" with a value different than 45.
The predicate "author" includes values tied to the predicate "city" with a value different than 45.
The predicate "city" includes values tied to the predicate "moto" with a value different than 45.
So, the predicate "hair" includes all values tied to the predicate "author" with a value different than 45.

unique_rules: 
['select(X):-hair(X,C),C!=45.']

jaccard: 1.0

AS desired: [['hair(1,1)', 'hair(1,2)', 'hair(1,3)', 'hair(1,4)', 'hair(1,5)', 'hair(1,6)', 'hair(1,7)', 'hair(1,8)', 'hair(1,9)', 'hair(1,10)', 'hair(1,11)', 'hair(1,12)', 'hair(1,13)', 'hair(1,14)', 'hair(1,15)', 'hair(1,16)', 'hair(1,17)', 'hair(1,18)', 'hair(1,19)', 'hair(1,20)', 'hair(1,21)', 'hair(1,22)', 'hair(1,23)', 'hair(1,24)', 'hair(1,25)', 'hair(1,26)', 'hair(1,27)', 'hair(1,28)', 'hair(1,29)', 'hair(1,30)', 'hair(1,31)', 'hair(1,32)', 'hair(1,33)', 'hair(1,34)', 'hair(1,35)', 'hair(1,36)', 'hair(1,37)', 'hair(1,38)', 'hair(1,39)', 'hair(1,40)', 'hair(1,41)', 'hair(1,42)', 'hair(1,43)', 'hair(1,44)', 'hair(1,45)', 'hair(1,46)', 'hair(1,47)', 'hair(1,48)', 'hair(1,49)', 'hair(1,50)', 'hair(1,51)', 'hair(1,52)', 'hair(1,53)', 'hair(1,54)', 'hair(1,55)', 'hair(1,56)', 'hair(1,57)', 'hair(1,58)', 'hair(1,59)', 'hair(1,60)', 'hair(1,61)', 'hair(1,62)', 'hair(1,63)', 'hair(1,64)', 'hair(1,65)', 'hair(1,66)', 'hair(1,67)', 'hair(1,68)', 'hair(1,69)', 'hair(1,70)', 'hair(1,71)', 'hair(1,72)', 'hair(1,73)', 'hair(1,74)', 'hair(1,75)', 'hair(1,76)', 'hair(1,77)', 'hair(1,78)', 'hair(1,79)', 'hair(1,80)', 'hair(1,81)', 'hair(1,82)', 'hair(1,83)', 'hair(1,84)', 'hair(1,85)', 'hair(1,86)', 'hair(1,87)', 'hair(1,88)', 'hair(1,89)', 'hair(1,90)', 'hair(1,91)', 'hair(1,92)', 'hair(1,93)', 'hair(1,94)', 'hair(1,95)', 'hair(1,96)', 'hair(1,97)', 'hair(1,98)', 'hair(1,99)', 'hair(1,100)', 'hair(2,1)', 'hair(2,2)', 'hair(2,3)', 'hair(2,4)', 'hair(2,5)', 'hair(2,6)', 'hair(2,7)', 'hair(2,8)', 'hair(2,9)', 'hair(2,10)', 'hair(2,11)', 'hair(2,12)', 'hair(2,13)', 'hair(2,14)', 'hair(2,15)', 'hair(2,16)', 'hair(2,17)', 'hair(2,18)', 'hair(2,19)', 'hair(2,20)', 'hair(2,21)', 'hair(2,22)', 'hair(2,23)', 'hair(2,24)', 'hair(2,25)', 'hair(2,26)', 'hair(2,27)', 'hair(2,28)', 'hair(2,29)', 'hair(2,30)', 'hair(2,31)', 'hair(2,32)', 'hair(2,33)', 'hair(2,34)', 'hair(2,35)', 'hair(2,36)', 'hair(2,37)', 'hair(2,38)', 'hair(2,39)', 'hair(2,40)', 'hair(2,41)', 'hair(2,42)', 'hair(2,43)', 'hair(2,44)', 'hair(2,45)', 'hair(2,46)', 'hair(2,47)', 'hair(2,48)', 'hair(2,49)', 'hair(2,50)', 'hair(2,51)', 'hair(2,52)', 'hair(2,53)', 'hair(2,54)', 'hair(2,55)', 'hair(2,56)', 'hair(2,57)', 'hair(2,58)', 'hair(2,59)', 'hair(2,60)', 'hair(2,61)', 'hair(2,62)', 'hair(2,63)', 'hair(2,64)', 'hair(2,65)', 'hair(2,66)', 'hair(2,67)', 'hair(2,68)', 'hair(2,69)', 'hair(2,70)', 'hair(2,71)', 'hair(2,72)', 'hair(2,73)', 'hair(2,74)', 'hair(2,75)', 'hair(2,76)', 'hair(2,77)', 'hair(2,78)', 'hair(2,79)', 'hair(2,80)', 'hair(2,81)', 'hair(2,82)', 'hair(2,83)', 'hair(2,84)', 'hair(2,85)', 'hair(2,86)', 'hair(2,87)', 'hair(2,88)', 'hair(2,89)', 'hair(2,90)', 'hair(2,91)', 'hair(2,92)', 'hair(2,93)', 'hair(2,94)', 'hair(2,95)', 'hair(2,96)', 'hair(2,97)', 'hair(2,98)', 'hair(2,99)', 'hair(2,100)', 'hair(3,1)', 'hair(3,2)', 'hair(3,3)', 'hair(3,4)', 'hair(3,5)', 'hair(3,6)', 'hair(3,7)', 'hair(3,8)', 'hair(3,9)', 'hair(3,10)', 'hair(3,11)', 'hair(3,12)', 'hair(3,13)', 'hair(3,14)', 'hair(3,15)', 'hair(3,16)', 'hair(3,17)', 'hair(3,18)', 'hair(3,19)', 'hair(3,20)', 'hair(3,21)', 'hair(3,22)', 'hair(3,23)', 'hair(3,24)', 'hair(3,25)', 'hair(3,26)', 'hair(3,27)', 'hair(3,28)', 'hair(3,29)', 'hair(3,30)', 'hair(3,31)', 'hair(3,32)', 'hair(3,33)', 'hair(3,34)', 'hair(3,35)', 'hair(3,36)', 'hair(3,37)', 'hair(3,38)', 'hair(3,39)', 'hair(3,40)', 'hair(3,41)', 'hair(3,42)', 'hair(3,43)', 'hair(3,44)', 'hair(3,45)', 'hair(3,46)', 'hair(3,47)', 'hair(3,48)', 'hair(3,49)', 'hair(3,50)', 'hair(3,51)', 'hair(3,52)', 'hair(3,53)', 'hair(3,54)', 'hair(3,55)', 'hair(3,56)', 'hair(3,57)', 'hair(3,58)', 'hair(3,59)', 'hair(3,60)', 'hair(3,61)', 'hair(3,62)', 'hair(3,63)', 'hair(3,64)', 'hair(3,65)', 'hair(3,66)', 'hair(3,67)', 'hair(3,68)', 'hair(3,69)', 'hair(3,70)', 'hair(3,71)', 'hair(3,72)', 'hair(3,73)', 'hair(3,74)', 'hair(3,75)', 'hair(3,76)', 'hair(3,77)', 'hair(3,78)', 'hair(3,79)', 'hair(3,80)', 'hair(3,81)', 'hair(3,82)', 'hair(3,83)', 'hair(3,84)', 'hair(3,85)', 'hair(3,86)', 'hair(3,87)', 'hair(3,88)', 'hair(3,89)', 'hair(3,90)', 'hair(3,91)', 'hair(3,92)', 'hair(3,93)', 'hair(3,94)', 'hair(3,95)', 'hair(3,96)', 'hair(3,97)', 'hair(3,98)', 'hair(3,99)', 'hair(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['hair(1,1)', 'hair(1,2)', 'hair(1,3)', 'hair(1,4)', 'hair(1,5)', 'hair(1,6)', 'hair(1,7)', 'hair(1,8)', 'hair(1,9)', 'hair(1,10)', 'hair(1,11)', 'hair(1,12)', 'hair(1,13)', 'hair(1,14)', 'hair(1,15)', 'hair(1,16)', 'hair(1,17)', 'hair(1,18)', 'hair(1,19)', 'hair(1,20)', 'hair(1,21)', 'hair(1,22)', 'hair(1,23)', 'hair(1,24)', 'hair(1,25)', 'hair(1,26)', 'hair(1,27)', 'hair(1,28)', 'hair(1,29)', 'hair(1,30)', 'hair(1,31)', 'hair(1,32)', 'hair(1,33)', 'hair(1,34)', 'hair(1,35)', 'hair(1,36)', 'hair(1,37)', 'hair(1,38)', 'hair(1,39)', 'hair(1,40)', 'hair(1,41)', 'hair(1,42)', 'hair(1,43)', 'hair(1,44)', 'hair(1,45)', 'hair(1,46)', 'hair(1,47)', 'hair(1,48)', 'hair(1,49)', 'hair(1,50)', 'hair(1,51)', 'hair(1,52)', 'hair(1,53)', 'hair(1,54)', 'hair(1,55)', 'hair(1,56)', 'hair(1,57)', 'hair(1,58)', 'hair(1,59)', 'hair(1,60)', 'hair(1,61)', 'hair(1,62)', 'hair(1,63)', 'hair(1,64)', 'hair(1,65)', 'hair(1,66)', 'hair(1,67)', 'hair(1,68)', 'hair(1,69)', 'hair(1,70)', 'hair(1,71)', 'hair(1,72)', 'hair(1,73)', 'hair(1,74)', 'hair(1,75)', 'hair(1,76)', 'hair(1,77)', 'hair(1,78)', 'hair(1,79)', 'hair(1,80)', 'hair(1,81)', 'hair(1,82)', 'hair(1,83)', 'hair(1,84)', 'hair(1,85)', 'hair(1,86)', 'hair(1,87)', 'hair(1,88)', 'hair(1,89)', 'hair(1,90)', 'hair(1,91)', 'hair(1,92)', 'hair(1,93)', 'hair(1,94)', 'hair(1,95)', 'hair(1,96)', 'hair(1,97)', 'hair(1,98)', 'hair(1,99)', 'hair(1,100)', 'hair(2,1)', 'hair(2,2)', 'hair(2,3)', 'hair(2,4)', 'hair(2,5)', 'hair(2,6)', 'hair(2,7)', 'hair(2,8)', 'hair(2,9)', 'hair(2,10)', 'hair(2,11)', 'hair(2,12)', 'hair(2,13)', 'hair(2,14)', 'hair(2,15)', 'hair(2,16)', 'hair(2,17)', 'hair(2,18)', 'hair(2,19)', 'hair(2,20)', 'hair(2,21)', 'hair(2,22)', 'hair(2,23)', 'hair(2,24)', 'hair(2,25)', 'hair(2,26)', 'hair(2,27)', 'hair(2,28)', 'hair(2,29)', 'hair(2,30)', 'hair(2,31)', 'hair(2,32)', 'hair(2,33)', 'hair(2,34)', 'hair(2,35)', 'hair(2,36)', 'hair(2,37)', 'hair(2,38)', 'hair(2,39)', 'hair(2,40)', 'hair(2,41)', 'hair(2,42)', 'hair(2,43)', 'hair(2,44)', 'hair(2,45)', 'hair(2,46)', 'hair(2,47)', 'hair(2,48)', 'hair(2,49)', 'hair(2,50)', 'hair(2,51)', 'hair(2,52)', 'hair(2,53)', 'hair(2,54)', 'hair(2,55)', 'hair(2,56)', 'hair(2,57)', 'hair(2,58)', 'hair(2,59)', 'hair(2,60)', 'hair(2,61)', 'hair(2,62)', 'hair(2,63)', 'hair(2,64)', 'hair(2,65)', 'hair(2,66)', 'hair(2,67)', 'hair(2,68)', 'hair(2,69)', 'hair(2,70)', 'hair(2,71)', 'hair(2,72)', 'hair(2,73)', 'hair(2,74)', 'hair(2,75)', 'hair(2,76)', 'hair(2,77)', 'hair(2,78)', 'hair(2,79)', 'hair(2,80)', 'hair(2,81)', 'hair(2,82)', 'hair(2,83)', 'hair(2,84)', 'hair(2,85)', 'hair(2,86)', 'hair(2,87)', 'hair(2,88)', 'hair(2,89)', 'hair(2,90)', 'hair(2,91)', 'hair(2,92)', 'hair(2,93)', 'hair(2,94)', 'hair(2,95)', 'hair(2,96)', 'hair(2,97)', 'hair(2,98)', 'hair(2,99)', 'hair(2,100)', 'hair(3,1)', 'hair(3,2)', 'hair(3,3)', 'hair(3,4)', 'hair(3,5)', 'hair(3,6)', 'hair(3,7)', 'hair(3,8)', 'hair(3,9)', 'hair(3,10)', 'hair(3,11)', 'hair(3,12)', 'hair(3,13)', 'hair(3,14)', 'hair(3,15)', 'hair(3,16)', 'hair(3,17)', 'hair(3,18)', 'hair(3,19)', 'hair(3,20)', 'hair(3,21)', 'hair(3,22)', 'hair(3,23)', 'hair(3,24)', 'hair(3,25)', 'hair(3,26)', 'hair(3,27)', 'hair(3,28)', 'hair(3,29)', 'hair(3,30)', 'hair(3,31)', 'hair(3,32)', 'hair(3,33)', 'hair(3,34)', 'hair(3,35)', 'hair(3,36)', 'hair(3,37)', 'hair(3,38)', 'hair(3,39)', 'hair(3,40)', 'hair(3,41)', 'hair(3,42)', 'hair(3,43)', 'hair(3,44)', 'hair(3,45)', 'hair(3,46)', 'hair(3,47)', 'hair(3,48)', 'hair(3,49)', 'hair(3,50)', 'hair(3,51)', 'hair(3,52)', 'hair(3,53)', 'hair(3,54)', 'hair(3,55)', 'hair(3,56)', 'hair(3,57)', 'hair(3,58)', 'hair(3,59)', 'hair(3,60)', 'hair(3,61)', 'hair(3,62)', 'hair(3,63)', 'hair(3,64)', 'hair(3,65)', 'hair(3,66)', 'hair(3,67)', 'hair(3,68)', 'hair(3,69)', 'hair(3,70)', 'hair(3,71)', 'hair(3,72)', 'hair(3,73)', 'hair(3,74)', 'hair(3,75)', 'hair(3,76)', 'hair(3,77)', 'hair(3,78)', 'hair(3,79)', 'hair(3,80)', 'hair(3,81)', 'hair(3,82)', 'hair(3,83)', 'hair(3,84)', 'hair(3,85)', 'hair(3,86)', 'hair(3,87)', 'hair(3,88)', 'hair(3,89)', 'hair(3,90)', 'hair(3,91)', 'hair(3,92)', 'hair(3,93)', 'hair(3,94)', 'hair(3,95)', 'hair(3,96)', 'hair(3,97)', 'hair(3,98)', 'hair(3,99)', 'hair(3,100)', 'select(1)', 'select(2)', 'select(3)']]


513
assignment

question: 
Develop an ASP script that ensures each element, as specified by the predicate "pink", receives exactly one label from the set "chair","desk".

answer from file: 
assign(X,"chair")|assign(X,"desk"):-pink(X).

parsed from model: 
assign(X,"chair")|assign(X,"desk"):-pink(X).

facts: 
pink(1..5).

generated: 
Develop an ASP script that ensures each element, as specified by the predicate "pink", receives exactly one label from the set "chair","desk".
Answer: assign(X,"chair")|assign(X,"desk"):-pink(X).
assign(X,"chair"):-pink(X).
assign(X,"desk"):-pink(X).
```
The predicate "pink" includes elements that are labeled "chair" or "desk", and the predicate " felicità" contains elements that are labeled "city".
Define the predicate "green" that links each element of " felicità" to the element of "pink".
```
green(X,Z):- felicità(X),assign(X,"chair").
green(X,Z):- felicità(X),assign(X,"desk").
```
The predicate "green" links each element of "

unique_rules: 
['assign(X,"chair")|assign(X,"desk"):-pink(X).', 'assign(X,"chair"):-pink(X).', 'assign(X,"desk"):-pink(X).', 'green(X,Z):- felicità(X),assign(X,"chair").', 'green(X,Z):- felicità(X),assign(X,"desk").']

jaccard: 1.0

AS desired: [['pink(1)', 'pink(2)', 'pink(3)', 'pink(4)', 'pink(5)', 'assign(1,"desk")', 'assign(2,"chair")', 'assign(3,"chair")', 'assign(4,"desk")', 'assign(5,"chair")']]
\AS obtained: [['pink(1)', 'pink(2)', 'pink(3)', 'pink(4)', 'pink(5)', 'assign(1,"desk")', 'assign(2,"chair")', 'assign(3,"chair")', 'assign(4,"desk")', 'assign(5,"chair")']]


514
constraint

question: 
Compose an ASP solution that avoids the predicate "hair" with value 6 being mapped to the label "toronto".

answer from file: 
:-assign(6,toronto).

parsed from model: 
:-assign(6,toronto).

facts: 
hair(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-hair(X).

generated: 
Compose an ASP solution that avoids the predicate "hair" with value 6 being mapped to the label "toronto".
Answer: :-assign(6,toronto).
Explanation: The predicate "height" includes values linked to the labels "amsterdam","city","description","florence","green","height","moto","object","price","shangai","street","table","author","city","description","height","moto","object","price","shangai","street","table","author","city","description","height","moto","object","price","shangai","street","table","author","city","description","height","moto","object","price","shangai","street","table","author","city","description","height","moto","object","price","shangai","street","table","author","city","description","height","moto","object","price","

unique_rules: 
[':-assign(6,toronto).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'hair(1)', 'hair(2)', 'hair(3)', 'hair(4)', 'hair(5)', 'hair(6)', 'hair(7)', 'hair(8)', 'hair(9)', 'hair(10)', 'hair(11)', 'hair(12)', 'hair(13)', 'hair(14)', 'hair(15)', 'hair(16)', 'hair(17)', 'hair(18)', 'hair(19)', 'hair(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'hair(1)', 'hair(2)', 'hair(3)', 'hair(4)', 'hair(5)', 'hair(6)', 'hair(7)', 'hair(8)', 'hair(9)', 'hair(10)', 'hair(11)', 'hair(12)', 'hair(13)', 'hair(14)', 'hair(15)', 'hair(16)', 'hair(17)', 'hair(18)', 'hair(19)', 'hair(20)']]


515
combination

question: 
Write an ASP program that determines all possible combinations of elements from sets represented by the predicates "roof" and "lake".

answer from file: 
combination(X,Y):-roof(X),lake(Y).

parsed from model: 
combination(X,Y):-roof(X),lake(Y).

facts: 
roof(1..4).lake(1..5).

generated: 
Write an ASP program that determines all possible combinations of elements from sets represented by the predicates "roof" and "lake".
Answer: combination(X,Y):-roof(X),lake(Y).
combination(X,Y):-roof(X),not lake(Y).
combination(X,Y):-not roof(X),lake(Y).
combination(X,Y):-not roof(X),not lake(Y).

unique_rules: 
['combination(X,Y):-roof(X),lake(Y).', 'combination(X,Y):-roof(X),not lake(Y).', 'combination(X,Y):-not roof(X),lake(Y).', 'combination(X,Y):-not roof(X),not lake(Y).']

jaccard: 1.0

AS desired: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'roof(1)', 'roof(2)', 'roof(3)', 'roof(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'roof(1)', 'roof(2)', 'roof(3)', 'roof(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


516
join

question: 
Design an ASP application to solve the problem by defining the predicate "chair_delhi" which links each chair to the hair of delhi, using fields "ID","surname","weight","hair","delhiID" for "chair" and fields "ID","weight","hair" for "delhi".

answer from file: 
chair_delhi(X,Z):-chair(X,_,_,_,Y),delhi(Y,_,Z).

parsed from model: 
chair_delhi_link(X,Z):-chair(X,_,_,_,Y),delhi(Y,Z,_).

facts: 
chair("ID","surname","weight","hair","delhiID").delhi("ID","weight","hair").

generated: 
Design an ASP application to solve the problem by defining the predicate "chair_delhi" which links each chair to the hair of delhi, using fields "ID","surname","weight","hair","delhiID" for "chair" and fields "ID","weight","hair" for "delhi". Define the predicate "chair_delhi_link" which links each chair to the weight of delhi.
Answer: chair_delhi_link(X,Z):-chair(X,_,_,_,Y),delhi(Y,Z,_).
chair_delhi_link(X,Z):-chair(X,_,_,Z,_),delhi(Z,_,_).
chair(X,_,_,_,Y):- felicità(X,Y,_,Y).
 felicità(X,Y,_,Z):-chair(X,Y,_,Z).

unique_rules: 
['chair_delhi_link(X,Z):-chair(X,_,_,_,Y),delhi(Y,Z,_).', 'chair_delhi_link(X,Z):-chair(X,_,_,Z,_),delhi(Z,_,_).', 'chair(X,_,_,_,Y):- felicità(X,Y,_,Y).', 'felicità(X,Y,_,Z):-chair(X,Y,_,Z).']

jaccard: 1.0

AS desired: [['chair("ID","surname","weight","hair","delhiID")', 'delhi("ID","weight","hair")']]
\AS obtained: [['chair("ID","surname","weight","hair","delhiID")', 'delhi("ID","weight","hair")']]


517
closure

question: 
Craft an ASP script that infers the "journey" predicate by computing the transitive closure of the "surname" predicate.

answer from file: 
journey(X,Y):-surname(X,Y).
journey(X,Y):-surname(X,Z),journey(Z,Y).

parsed from model: 
journey(X,Y):-surname(X,Y).
journey(X,Y):-surname(X,Z),journey(Z,Y).

facts: 
surname(1..3, 1..4).

generated: 
Craft an ASP script that infers the "journey" predicate by computing the transitive closure of the "surname" predicate.
Answer: journey(X,Y):-surname(X,Y).
journey(X,Y):-surname(X,Z),journey(Z,Y).
journey(X,Y):- felicità(X,Y).
 felicità(X,Y):-name(X,Y).
name(X,Y):-age(X,Y).
age(X,Y):-city(X,Y).
city(X,Y):-author(X,Y).
author(X,Y):-description(X,Y).
description(X,Y):-height(X,Y).
height(X,Y):-age(X,Y).
age(X,Y):-city(X,Y

unique_rules: 
['journey(X,Y):-surname(X,Y).', 'journey(X,Y):-surname(X,Z),journey(Z,Y).', 'journey(X,Y):- felicità(X,Y).', 'felicità(X,Y):-name(X,Y).', 'name(X,Y):-age(X,Y).', 'age(X,Y):-city(X,Y).', 'city(X,Y):-author(X,Y).', 'author(X,Y):-description(X,Y).', 'description(X,Y):-height(X,Y).', 'height(X,Y):-age(X,Y).', 'age(X,Y):-city(X,Y']

jaccard: 1.0

AS desired: [['surname(1,1)', 'surname(1,2)', 'surname(1,3)', 'surname(1,4)', 'surname(2,1)', 'surname(2,2)', 'surname(2,3)', 'surname(2,4)', 'surname(3,1)', 'surname(3,2)', 'surname(3,3)', 'surname(3,4)', 'journey(1,1)', 'journey(1,2)', 'journey(1,3)', 'journey(1,4)', 'journey(2,1)', 'journey(2,2)', 'journey(2,3)', 'journey(2,4)', 'journey(3,1)', 'journey(3,2)', 'journey(3,3)', 'journey(3,4)']]
\AS obtained: [['surname(1,1)', 'surname(1,2)', 'surname(1,3)', 'surname(1,4)', 'surname(2,1)', 'surname(2,2)', 'surname(2,3)', 'surname(2,4)', 'surname(3,1)', 'surname(3,2)', 'surname(3,3)', 'surname(3,4)', 'journey(1,1)', 'journey(1,2)', 'journey(1,3)', 'journey(1,4)', 'journey(2,1)', 'journey(2,2)', 'journey(2,3)', 'journey(2,4)', 'journey(3,1)', 'journey(3,2)', 'journey(3,3)', 'journey(3,4)']]


518
preference

question: 
Create an ASP program that keeps the predicate "cosenza" with value "12" unlinked from "butterfly". If linked, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(12,"butterfly").[1@1]

parsed from model: 
:~assign(12,"butterfly").[1@1]

facts: 
cosenza(1..20).

generated: 
Create an ASP program that keeps the predicate "cosenza" with value "12" unlinked from "butterfly". If linked, it incurs a cost of "1" at level "1".
Answer: :~assign(12,"butterfly").[1@1]
The predicate "green" keeps the predicate "moto" with value "12" unlinked from "city". If linked, it incurs a cost of "1" at level "1".
Answer: :~assign(12,"city").[1@1]

unique_rules: 
[':~assign(12,"butterfly").[1@1]', ':~assign(12,"city").[1@1]']

jaccard: 1.0

AS desired: [['cosenza(1)', 'cosenza(2)', 'cosenza(3)', 'cosenza(4)', 'cosenza(5)', 'cosenza(6)', 'cosenza(7)', 'cosenza(8)', 'cosenza(9)', 'cosenza(10)', 'cosenza(11)', 'cosenza(12)', 'cosenza(13)', 'cosenza(14)', 'cosenza(15)', 'cosenza(16)', 'cosenza(17)', 'cosenza(18)', 'cosenza(19)', 'cosenza(20)']]
\AS obtained: [['cosenza(1)', 'cosenza(2)', 'cosenza(3)', 'cosenza(4)', 'cosenza(5)', 'cosenza(6)', 'cosenza(7)', 'cosenza(8)', 'cosenza(9)', 'cosenza(10)', 'cosenza(11)', 'cosenza(12)', 'cosenza(13)', 'cosenza(14)', 'cosenza(15)', 'cosenza(16)', 'cosenza(17)', 'cosenza(18)', 'cosenza(19)', 'cosenza(20)']]


519
filtering

question: 
Compose an ASP solution to gather data from the "barcelona" predicate associated with the label "flower".

answer from file: 
select(X):-barcelona(X,"flower").

parsed from model: 
select(X):-barcelona(X,"flower").

facts: 
barcelona(1..5, "flower").

generated: 
Compose an ASP solution to gather data from the "barcelona" predicate associated with the label "flower".
Answer: select(X):-barcelona(X,"flower").
 áng=select(X):-barcelona(X,"author").
 áng(X):-barcelona(X,"city").
 áng(X):-barcelona(X,"description").
 áng(X):-barcelona(X,"height").
 áng(X):-barcelona(X,"name").
 áng(X):-barcelona(X,"price").
 áng(X):-barcelona(X,"author","description").
 áng(X):-barcelona(X,"author","city").
 áng(X):-barcelona(X,"author","height").
 áng(X):-barcelona(X,"author","description").

unique_rules: 
['select(X):-barcelona(X,"flower").', 'áng=select(X):-barcelona(X,"author").', 'áng(X):-barcelona(X,"city").', 'áng(X):-barcelona(X,"description").', 'áng(X):-barcelona(X,"height").', 'áng(X):-barcelona(X,"name").', 'áng(X):-barcelona(X,"price").', 'áng(X):-barcelona(X,"author","description").', 'áng(X):-barcelona(X,"author","city").', 'áng(X):-barcelona(X,"author","height").']

jaccard: 1.0

AS desired: [['barcelona(1,"flower")', 'barcelona(2,"flower")', 'barcelona(3,"flower")', 'barcelona(4,"flower")', 'barcelona(5,"flower")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['barcelona(1,"flower")', 'barcelona(2,"flower")', 'barcelona(3,"flower")', 'barcelona(4,"flower")', 'barcelona(5,"flower")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


520
negative_filtering

question: 
Formulate an ASP code to gather values associated with the predicate "desk" but not connected to the predicate "cosenza" and labeled "singapore".

answer from file: 
select(X):-desk(X),not cosenza(X,"singapore").

parsed from model: 
select(X):-desk(X),not cosenza(X,"singapore").

facts: 
desk(1..3).cosenza(1,"hair").cosenza(2,"singapore").cosenza(3,"toronto").

generated: 
Formulate an ASP code to gather values associated with the predicate "desk" but not connected to the predicate "cosenza" and labeled "singapore".
Answer: select(X):-desk(X),not cosenza(X,"singapore").

unique_rules: 
['select(X):-desk(X),not cosenza(X,"singapore").']

jaccard: 1.0

AS desired: [['desk(1)', 'desk(2)', 'desk(3)', 'cosenza(1,"hair")', 'cosenza(2,"singapore")', 'cosenza(3,"toronto")', 'select(1)', 'select(3)']]
\AS obtained: [['desk(1)', 'desk(2)', 'desk(3)', 'cosenza(1,"hair")', 'cosenza(2,"singapore")', 'cosenza(3,"toronto")', 'select(1)', 'select(3)']]


521
numeric_filtering

question: 
Craft an ASP code to retrieve values connected to the predicate "white" with a value different than 81.

answer from file: 
select(X):-white(X,C),C!=81.

parsed from model: 
select(X):-white(X,C),C!=81.

facts: 
white(1..3, 1..100).

generated: 
Craft an ASP code to retrieve values connected to the predicate "white" with a value different than 81.
Answer: select(X):-white(X,C),C!=81.
white(X,C):-white(X,C),C==81.

unique_rules: 
['select(X):-white(X,C),C!=81.', 'white(X,C):-white(X,C),C==81.']

jaccard: 1.0

AS desired: [['white(1,1)', 'white(1,2)', 'white(1,3)', 'white(1,4)', 'white(1,5)', 'white(1,6)', 'white(1,7)', 'white(1,8)', 'white(1,9)', 'white(1,10)', 'white(1,11)', 'white(1,12)', 'white(1,13)', 'white(1,14)', 'white(1,15)', 'white(1,16)', 'white(1,17)', 'white(1,18)', 'white(1,19)', 'white(1,20)', 'white(1,21)', 'white(1,22)', 'white(1,23)', 'white(1,24)', 'white(1,25)', 'white(1,26)', 'white(1,27)', 'white(1,28)', 'white(1,29)', 'white(1,30)', 'white(1,31)', 'white(1,32)', 'white(1,33)', 'white(1,34)', 'white(1,35)', 'white(1,36)', 'white(1,37)', 'white(1,38)', 'white(1,39)', 'white(1,40)', 'white(1,41)', 'white(1,42)', 'white(1,43)', 'white(1,44)', 'white(1,45)', 'white(1,46)', 'white(1,47)', 'white(1,48)', 'white(1,49)', 'white(1,50)', 'white(1,51)', 'white(1,52)', 'white(1,53)', 'white(1,54)', 'white(1,55)', 'white(1,56)', 'white(1,57)', 'white(1,58)', 'white(1,59)', 'white(1,60)', 'white(1,61)', 'white(1,62)', 'white(1,63)', 'white(1,64)', 'white(1,65)', 'white(1,66)', 'white(1,67)', 'white(1,68)', 'white(1,69)', 'white(1,70)', 'white(1,71)', 'white(1,72)', 'white(1,73)', 'white(1,74)', 'white(1,75)', 'white(1,76)', 'white(1,77)', 'white(1,78)', 'white(1,79)', 'white(1,80)', 'white(1,81)', 'white(1,82)', 'white(1,83)', 'white(1,84)', 'white(1,85)', 'white(1,86)', 'white(1,87)', 'white(1,88)', 'white(1,89)', 'white(1,90)', 'white(1,91)', 'white(1,92)', 'white(1,93)', 'white(1,94)', 'white(1,95)', 'white(1,96)', 'white(1,97)', 'white(1,98)', 'white(1,99)', 'white(1,100)', 'white(2,1)', 'white(2,2)', 'white(2,3)', 'white(2,4)', 'white(2,5)', 'white(2,6)', 'white(2,7)', 'white(2,8)', 'white(2,9)', 'white(2,10)', 'white(2,11)', 'white(2,12)', 'white(2,13)', 'white(2,14)', 'white(2,15)', 'white(2,16)', 'white(2,17)', 'white(2,18)', 'white(2,19)', 'white(2,20)', 'white(2,21)', 'white(2,22)', 'white(2,23)', 'white(2,24)', 'white(2,25)', 'white(2,26)', 'white(2,27)', 'white(2,28)', 'white(2,29)', 'white(2,30)', 'white(2,31)', 'white(2,32)', 'white(2,33)', 'white(2,34)', 'white(2,35)', 'white(2,36)', 'white(2,37)', 'white(2,38)', 'white(2,39)', 'white(2,40)', 'white(2,41)', 'white(2,42)', 'white(2,43)', 'white(2,44)', 'white(2,45)', 'white(2,46)', 'white(2,47)', 'white(2,48)', 'white(2,49)', 'white(2,50)', 'white(2,51)', 'white(2,52)', 'white(2,53)', 'white(2,54)', 'white(2,55)', 'white(2,56)', 'white(2,57)', 'white(2,58)', 'white(2,59)', 'white(2,60)', 'white(2,61)', 'white(2,62)', 'white(2,63)', 'white(2,64)', 'white(2,65)', 'white(2,66)', 'white(2,67)', 'white(2,68)', 'white(2,69)', 'white(2,70)', 'white(2,71)', 'white(2,72)', 'white(2,73)', 'white(2,74)', 'white(2,75)', 'white(2,76)', 'white(2,77)', 'white(2,78)', 'white(2,79)', 'white(2,80)', 'white(2,81)', 'white(2,82)', 'white(2,83)', 'white(2,84)', 'white(2,85)', 'white(2,86)', 'white(2,87)', 'white(2,88)', 'white(2,89)', 'white(2,90)', 'white(2,91)', 'white(2,92)', 'white(2,93)', 'white(2,94)', 'white(2,95)', 'white(2,96)', 'white(2,97)', 'white(2,98)', 'white(2,99)', 'white(2,100)', 'white(3,1)', 'white(3,2)', 'white(3,3)', 'white(3,4)', 'white(3,5)', 'white(3,6)', 'white(3,7)', 'white(3,8)', 'white(3,9)', 'white(3,10)', 'white(3,11)', 'white(3,12)', 'white(3,13)', 'white(3,14)', 'white(3,15)', 'white(3,16)', 'white(3,17)', 'white(3,18)', 'white(3,19)', 'white(3,20)', 'white(3,21)', 'white(3,22)', 'white(3,23)', 'white(3,24)', 'white(3,25)', 'white(3,26)', 'white(3,27)', 'white(3,28)', 'white(3,29)', 'white(3,30)', 'white(3,31)', 'white(3,32)', 'white(3,33)', 'white(3,34)', 'white(3,35)', 'white(3,36)', 'white(3,37)', 'white(3,38)', 'white(3,39)', 'white(3,40)', 'white(3,41)', 'white(3,42)', 'white(3,43)', 'white(3,44)', 'white(3,45)', 'white(3,46)', 'white(3,47)', 'white(3,48)', 'white(3,49)', 'white(3,50)', 'white(3,51)', 'white(3,52)', 'white(3,53)', 'white(3,54)', 'white(3,55)', 'white(3,56)', 'white(3,57)', 'white(3,58)', 'white(3,59)', 'white(3,60)', 'white(3,61)', 'white(3,62)', 'white(3,63)', 'white(3,64)', 'white(3,65)', 'white(3,66)', 'white(3,67)', 'white(3,68)', 'white(3,69)', 'white(3,70)', 'white(3,71)', 'white(3,72)', 'white(3,73)', 'white(3,74)', 'white(3,75)', 'white(3,76)', 'white(3,77)', 'white(3,78)', 'white(3,79)', 'white(3,80)', 'white(3,81)', 'white(3,82)', 'white(3,83)', 'white(3,84)', 'white(3,85)', 'white(3,86)', 'white(3,87)', 'white(3,88)', 'white(3,89)', 'white(3,90)', 'white(3,91)', 'white(3,92)', 'white(3,93)', 'white(3,94)', 'white(3,95)', 'white(3,96)', 'white(3,97)', 'white(3,98)', 'white(3,99)', 'white(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['white(1,1)', 'white(1,2)', 'white(1,3)', 'white(1,4)', 'white(1,5)', 'white(1,6)', 'white(1,7)', 'white(1,8)', 'white(1,9)', 'white(1,10)', 'white(1,11)', 'white(1,12)', 'white(1,13)', 'white(1,14)', 'white(1,15)', 'white(1,16)', 'white(1,17)', 'white(1,18)', 'white(1,19)', 'white(1,20)', 'white(1,21)', 'white(1,22)', 'white(1,23)', 'white(1,24)', 'white(1,25)', 'white(1,26)', 'white(1,27)', 'white(1,28)', 'white(1,29)', 'white(1,30)', 'white(1,31)', 'white(1,32)', 'white(1,33)', 'white(1,34)', 'white(1,35)', 'white(1,36)', 'white(1,37)', 'white(1,38)', 'white(1,39)', 'white(1,40)', 'white(1,41)', 'white(1,42)', 'white(1,43)', 'white(1,44)', 'white(1,45)', 'white(1,46)', 'white(1,47)', 'white(1,48)', 'white(1,49)', 'white(1,50)', 'white(1,51)', 'white(1,52)', 'white(1,53)', 'white(1,54)', 'white(1,55)', 'white(1,56)', 'white(1,57)', 'white(1,58)', 'white(1,59)', 'white(1,60)', 'white(1,61)', 'white(1,62)', 'white(1,63)', 'white(1,64)', 'white(1,65)', 'white(1,66)', 'white(1,67)', 'white(1,68)', 'white(1,69)', 'white(1,70)', 'white(1,71)', 'white(1,72)', 'white(1,73)', 'white(1,74)', 'white(1,75)', 'white(1,76)', 'white(1,77)', 'white(1,78)', 'white(1,79)', 'white(1,80)', 'white(1,81)', 'white(1,82)', 'white(1,83)', 'white(1,84)', 'white(1,85)', 'white(1,86)', 'white(1,87)', 'white(1,88)', 'white(1,89)', 'white(1,90)', 'white(1,91)', 'white(1,92)', 'white(1,93)', 'white(1,94)', 'white(1,95)', 'white(1,96)', 'white(1,97)', 'white(1,98)', 'white(1,99)', 'white(1,100)', 'white(2,1)', 'white(2,2)', 'white(2,3)', 'white(2,4)', 'white(2,5)', 'white(2,6)', 'white(2,7)', 'white(2,8)', 'white(2,9)', 'white(2,10)', 'white(2,11)', 'white(2,12)', 'white(2,13)', 'white(2,14)', 'white(2,15)', 'white(2,16)', 'white(2,17)', 'white(2,18)', 'white(2,19)', 'white(2,20)', 'white(2,21)', 'white(2,22)', 'white(2,23)', 'white(2,24)', 'white(2,25)', 'white(2,26)', 'white(2,27)', 'white(2,28)', 'white(2,29)', 'white(2,30)', 'white(2,31)', 'white(2,32)', 'white(2,33)', 'white(2,34)', 'white(2,35)', 'white(2,36)', 'white(2,37)', 'white(2,38)', 'white(2,39)', 'white(2,40)', 'white(2,41)', 'white(2,42)', 'white(2,43)', 'white(2,44)', 'white(2,45)', 'white(2,46)', 'white(2,47)', 'white(2,48)', 'white(2,49)', 'white(2,50)', 'white(2,51)', 'white(2,52)', 'white(2,53)', 'white(2,54)', 'white(2,55)', 'white(2,56)', 'white(2,57)', 'white(2,58)', 'white(2,59)', 'white(2,60)', 'white(2,61)', 'white(2,62)', 'white(2,63)', 'white(2,64)', 'white(2,65)', 'white(2,66)', 'white(2,67)', 'white(2,68)', 'white(2,69)', 'white(2,70)', 'white(2,71)', 'white(2,72)', 'white(2,73)', 'white(2,74)', 'white(2,75)', 'white(2,76)', 'white(2,77)', 'white(2,78)', 'white(2,79)', 'white(2,80)', 'white(2,81)', 'white(2,82)', 'white(2,83)', 'white(2,84)', 'white(2,85)', 'white(2,86)', 'white(2,87)', 'white(2,88)', 'white(2,89)', 'white(2,90)', 'white(2,91)', 'white(2,92)', 'white(2,93)', 'white(2,94)', 'white(2,95)', 'white(2,96)', 'white(2,97)', 'white(2,98)', 'white(2,99)', 'white(2,100)', 'white(3,1)', 'white(3,2)', 'white(3,3)', 'white(3,4)', 'white(3,5)', 'white(3,6)', 'white(3,7)', 'white(3,8)', 'white(3,9)', 'white(3,10)', 'white(3,11)', 'white(3,12)', 'white(3,13)', 'white(3,14)', 'white(3,15)', 'white(3,16)', 'white(3,17)', 'white(3,18)', 'white(3,19)', 'white(3,20)', 'white(3,21)', 'white(3,22)', 'white(3,23)', 'white(3,24)', 'white(3,25)', 'white(3,26)', 'white(3,27)', 'white(3,28)', 'white(3,29)', 'white(3,30)', 'white(3,31)', 'white(3,32)', 'white(3,33)', 'white(3,34)', 'white(3,35)', 'white(3,36)', 'white(3,37)', 'white(3,38)', 'white(3,39)', 'white(3,40)', 'white(3,41)', 'white(3,42)', 'white(3,43)', 'white(3,44)', 'white(3,45)', 'white(3,46)', 'white(3,47)', 'white(3,48)', 'white(3,49)', 'white(3,50)', 'white(3,51)', 'white(3,52)', 'white(3,53)', 'white(3,54)', 'white(3,55)', 'white(3,56)', 'white(3,57)', 'white(3,58)', 'white(3,59)', 'white(3,60)', 'white(3,61)', 'white(3,62)', 'white(3,63)', 'white(3,64)', 'white(3,65)', 'white(3,66)', 'white(3,67)', 'white(3,68)', 'white(3,69)', 'white(3,70)', 'white(3,71)', 'white(3,72)', 'white(3,73)', 'white(3,74)', 'white(3,75)', 'white(3,76)', 'white(3,77)', 'white(3,78)', 'white(3,79)', 'white(3,80)', 'white(3,81)', 'white(3,82)', 'white(3,83)', 'white(3,84)', 'white(3,85)', 'white(3,86)', 'white(3,87)', 'white(3,88)', 'white(3,89)', 'white(3,90)', 'white(3,91)', 'white(3,92)', 'white(3,93)', 'white(3,94)', 'white(3,95)', 'white(3,96)', 'white(3,97)', 'white(3,98)', 'white(3,99)', 'white(3,100)', 'select(1)', 'select(2)', 'select(3)']]


522
assignment

question: 
Formulate an ASP program that links each element, as identified by the predicate "strength", with one label from "cosenza","wall","butterfly","quality","laptop","chair","barcelona","moscow","roof".

answer from file: 
assign(X,"cosenza")|assign(X,"wall")|assign(X,"butterfly")|assign(X,"quality")|assign(X,"laptop")|assign(X,"chair")|assign(X,"barcelona")|assign(X,"moscow")|assign(X,"roof"):-strength(X).

parsed from model: 
assign(X,"cosenza")|assign(X,"wall")|assign(X,"butterfly")|assign(X,"quality")|assign(X,"laptop")|assign(X,"chair")|assign(X,"barcelona")|assign(X,"moscow")|assign(X,"roof"):-strength(X).

facts: 
strength(1..5).

generated: 
Formulate an ASP program that links each element, as identified by the predicate "strength", with one label from "cosenza","wall","butterfly","quality","laptop","chair","barcelona","moscow","roof".
Answer: assign(X,"cosenza")|assign(X,"wall")|assign(X,"butterfly")|assign(X,"quality")|assign(X,"laptop")|assign(X,"chair")|assign(X,"barcelona")|assign(X,"moscow")|assign(X,"roof"):-strength(X).

unique_rules: 
['assign(X,"cosenza")|assign(X,"wall")|assign(X,"butterfly")|assign(X,"quality")|assign(X,"laptop")|assign(X,"chair")|assign(X,"barcelona")|assign(X,"moscow")|assign(X,"roof"):-strength(X).']

jaccard: 1.0

AS desired: [['strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'assign(1,"roof")', 'assign(2,"roof")', 'assign(3,"roof")', 'assign(4,"roof")', 'assign(5,"roof")']]
\AS obtained: [['strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'assign(1,"roof")', 'assign(2,"roof")', 'assign(3,"roof")', 'assign(4,"roof")', 'assign(5,"roof")']]


523
constraint

question: 
Create an ASP script to avoid associating the "storm" predicate having value 9 with the "lightblue" label.

answer from file: 
:-assign(9,lightblue).

parsed from model: 
:-assign(9,lightblue).

facts: 
storm(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-storm(X).

generated: 
Create an ASP script to avoid associating the "storm" predicate having value 9 with the "lightblue" label.
Answer: :-assign(9,lightblue).
assign(9,"green").
```
assign(9,lightblue)
assign(9,"green")
```
The first line defines the predicate "storm" with value 9.
The second line defines the predicate "lightblue" with value 9.
The third line associates the "lightblue" label with the value 9.
The fourth line defines the predicate "green" with value 9.
The fifth line associates the "green" label with the value 9.

unique_rules: 
[':-assign(9,lightblue).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'storm(1)', 'storm(2)', 'storm(3)', 'storm(4)', 'storm(5)', 'storm(6)', 'storm(7)', 'storm(8)', 'storm(9)', 'storm(10)', 'storm(11)', 'storm(12)', 'storm(13)', 'storm(14)', 'storm(15)', 'storm(16)', 'storm(17)', 'storm(18)', 'storm(19)', 'storm(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'storm(1)', 'storm(2)', 'storm(3)', 'storm(4)', 'storm(5)', 'storm(6)', 'storm(7)', 'storm(8)', 'storm(9)', 'storm(10)', 'storm(11)', 'storm(12)', 'storm(13)', 'storm(14)', 'storm(15)', 'storm(16)', 'storm(17)', 'storm(18)', 'storm(19)', 'storm(20)']]


524
combination

question: 
Compose an ASP script that generates the cross-product of elements between the predicates "owner" and "surname".

answer from file: 
combination(X,Y):-owner(X),surname(Y).

parsed from model: 
cross_product(X,Y):-owner(X),surname(Y).

facts: 
owner(1..4).surname(1..5).

generated: 
Compose an ASP script that generates the cross-product of elements between the predicates "owner" and "surname".
Answer: cross_product(X,Y):-owner(X),surname(Y).
cross_product(X,Y):-owner(X),not surname(Y).
cross_product(X,Y):-not owner(X),surname(Y).

unique_rules: 
['cross_product(X,Y):-owner(X),surname(Y).', 'cross_product(X,Y):-owner(X),not surname(Y).', 'cross_product(X,Y):-not owner(X),surname(Y).']

jaccard: 0.0

AS desired: [['surname(1)', 'surname(2)', 'surname(3)', 'surname(4)', 'surname(5)', 'owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['surname(1)', 'surname(2)', 'surname(3)', 'surname(4)', 'surname(5)', 'owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'cross_product(1,1)', 'cross_product(1,2)', 'cross_product(1,3)', 'cross_product(1,4)', 'cross_product(1,5)', 'cross_product(2,1)', 'cross_product(2,2)', 'cross_product(2,3)', 'cross_product(2,4)', 'cross_product(2,5)', 'cross_product(3,1)', 'cross_product(3,2)', 'cross_product(3,3)', 'cross_product(3,4)', 'cross_product(3,5)', 'cross_product(4,1)', 'cross_product(4,2)', 'cross_product(4,3)', 'cross_product(4,4)', 'cross_product(4,5)']]


525
join

question: 
Develop an ASP solution that defines the predicate "cloud_laptop" to link each cloud to the lake of laptop, with "cloud" having fields "ID","surname","weight","laptopID" and "laptop" having fields "ID","strength","lake".

answer from file: 
cloud_laptop(X,Z):-cloud(X,_,_,Y),laptop(Y,_,Z).

parsed from model: 
cloud_laptop(X,Z):-cloud(X,_,_,Y),laptop(Y,_,Z).

facts: 
cloud("ID","surname","weight","laptopID").laptop("ID","strength","lake").

generated: 
Develop an ASP solution that defines the predicate "cloud_laptop" to link each cloud to the lake of laptop, with "cloud" having fields "ID","surname","weight","laptopID" and "laptop" having fields "ID","strength","lake". Define the predicate "cloud_laptop" that links each cloud to the lake of laptop.
Answer: cloud_laptop(X,Z):-cloud(X,_,_,Y),laptop(Y,_,Z).
cloud_laptop(X,Z):-cloud(X,_,_,Y),not laptop(Y,Z).
cloud_laptop(X,Z):-cloud(X,_,_,Y),laptop(Y,_,Z).

unique_rules: 
['cloud_laptop(X,Z):-cloud(X,_,_,Y),laptop(Y,_,Z).', 'cloud_laptop(X,Z):-cloud(X,_,_,Y),not laptop(Y,Z).']

jaccard: 1.0

AS desired: [['cloud("ID","surname","weight","laptopID")', 'laptop("ID","strength","lake")']]
\AS obtained: [['cloud("ID","surname","weight","laptopID")', 'laptop("ID","strength","lake")']]


526
closure

question: 
Develop an ASP script that derives the "loops" predicate through the transitive closure of the "storm" predicate.

answer from file: 
loops(X,Y):-storm(X,Y).
loops(X,Y):-storm(X,Z),loops(Z,Y).

parsed from model: 
loops(X,Y):-storm(X,Y).
loops(X,Y):-storm(X,Z),loops(Z,Y).

facts: 
storm(1..3, 1..4).

generated: 
Develop an ASP script that derives the "loops" predicate through the transitive closure of the "storm" predicate.
Answer: loops(X,Y):-storm(X,Y).
loops(X,Y):-storm(X,Z),loops(Z,Y).
loops(X,Y):-storm(X,Z),not storms(Z,Y).
loops(X,Y):-not storms(X,Y).
loops(X,Y):-loops(X,Z),loops(Z,Y).
loops(X,Y):-loops(X,Y).

unique_rules: 
['loops(X,Y):-storm(X,Y).', 'loops(X,Y):-storm(X,Z),loops(Z,Y).', 'loops(X,Y):-storm(X,Z),not storms(Z,Y).', 'loops(X,Y):-not storms(X,Y).', 'loops(X,Y):-loops(X,Z),loops(Z,Y).', 'loops(X,Y):-loops(X,Y).']

jaccard: 1.0

AS desired: [['storm(1,1)', 'storm(1,2)', 'storm(1,3)', 'storm(1,4)', 'storm(2,1)', 'storm(2,2)', 'storm(2,3)', 'storm(2,4)', 'storm(3,1)', 'storm(3,2)', 'storm(3,3)', 'storm(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]
\AS obtained: [['storm(1,1)', 'storm(1,2)', 'storm(1,3)', 'storm(1,4)', 'storm(2,1)', 'storm(2,2)', 'storm(2,3)', 'storm(2,4)', 'storm(3,1)', 'storm(3,2)', 'storm(3,3)', 'storm(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]


527
preference

question: 
Create an ASP program that keeps the predicate "chair" with value "7" unlinked from "flower". If linked, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(7,"flower").[1@1]

parsed from model: 
:~assign(7,"flower").[1@1]

facts: 
chair(1..20).

generated: 
Create an ASP program that keeps the predicate "chair" with value "7" unlinked from "flower". If linked, it incurs a cost of "1" at level "1".
Answer: :~assign(7,"flower").[1@1]
The predicate "gray" keeps the predicate "city" with value "1" unlinked from "moto". If linked, it incurs a cost of "1" at level "1".
Answer: :~assign(1,"moto").[1@1]

unique_rules: 
[':~assign(7,"flower").[1@1]', ':~assign(1,"moto").[1@1]']

jaccard: 1.0

AS desired: [['chair(1)', 'chair(2)', 'chair(3)', 'chair(4)', 'chair(5)', 'chair(6)', 'chair(7)', 'chair(8)', 'chair(9)', 'chair(10)', 'chair(11)', 'chair(12)', 'chair(13)', 'chair(14)', 'chair(15)', 'chair(16)', 'chair(17)', 'chair(18)', 'chair(19)', 'chair(20)']]
\AS obtained: [['chair(1)', 'chair(2)', 'chair(3)', 'chair(4)', 'chair(5)', 'chair(6)', 'chair(7)', 'chair(8)', 'chair(9)', 'chair(10)', 'chair(11)', 'chair(12)', 'chair(13)', 'chair(14)', 'chair(15)', 'chair(16)', 'chair(17)', 'chair(18)', 'chair(19)', 'chair(20)']]


528
filtering

question: 
Compose an ASP program to identify values labeled as "cosenza" within the predicate "quality".

answer from file: 
select(X):-quality(X,"cosenza").

parsed from model: 
select(X):-quality(X,"cosenza").

facts: 
quality(1..5, "cosenza").

generated: 
Compose an ASP program to identify values labeled as "cosenza" within the predicate "quality".
Answer: select(X):-quality(X,"cosenza").
select(X):-quality(X,"author").
select(X):-quality(X,"moto").
select(X):-quality(X,"rome").
select(X):-quality(X,"description").
select(X):-quality(X,"author","description").
select(X):-quality(X,"description","author").
select(X):-quality(X,"description","moto").
select(X):-quality(X,"description","rome").
select(X):-quality(X,"description","description").
select(X):-quality(X,"description","author").
select(X):-quality(X,"description","moto").


unique_rules: 
['select(X):-quality(X,"cosenza").', 'select(X):-quality(X,"author").', 'select(X):-quality(X,"moto").', 'select(X):-quality(X,"rome").', 'select(X):-quality(X,"description").', 'select(X):-quality(X,"author","description").', 'select(X):-quality(X,"description","author").', 'select(X):-quality(X,"description","moto").', 'select(X):-quality(X,"description","rome").', 'select(X):-quality(X,"description","description").']

jaccard: 1.0

AS desired: [['quality(1,"cosenza")', 'quality(2,"cosenza")', 'quality(3,"cosenza")', 'quality(4,"cosenza")', 'quality(5,"cosenza")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['quality(1,"cosenza")', 'quality(2,"cosenza")', 'quality(3,"cosenza")', 'quality(4,"cosenza")', 'quality(5,"cosenza")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


529
negative_filtering

question: 
Generate an ASP script to gather values linked to the predicate "singapore" but not to the predicate "cloud" and labeled "darkmagenta".

answer from file: 
select(X):-singapore(X),not cloud(X,"darkmagenta").

parsed from model: 
select(X):-singapore(X),not cloud(X,"darkmagenta").

facts: 
singapore(1..3).cloud(1,"surname").cloud(2,"toronto").cloud(3,"darkmagenta").

generated: 
Generate an ASP script to gather values linked to the predicate "singapore" but not to the predicate "cloud" and labeled "darkmagenta".
Answer: select(X):-singapore(X),not cloud(X,"darkmagenta").
```

unique_rules: 
['select(X):-singapore(X),not cloud(X,"darkmagenta").']

jaccard: 1.0

AS desired: [['singapore(1)', 'singapore(2)', 'singapore(3)', 'cloud(1,"surname")', 'cloud(2,"toronto")', 'cloud(3,"darkmagenta")', 'select(1)', 'select(2)']]
\AS obtained: [['singapore(1)', 'singapore(2)', 'singapore(3)', 'cloud(1,"surname")', 'cloud(2,"toronto")', 'cloud(3,"darkmagenta")', 'select(1)', 'select(2)']]


530
numeric_filtering

question: 
Develop an ASP application to retrieve all values connected to the predicate "strength" with a value different than 15.

answer from file: 
select(X):-strength(X,C),C!=15.

parsed from model: 
select(X):-strength(X,C),C!=15.

facts: 
strength(1..3, 1..100).

generated: 
Develop an ASP application to retrieve all values connected to the predicate "strength" with a value different than 15.
Answer: select(X):-strength(X,C),C!=15.
strength(X,C):-strength(X,C),C==15.

unique_rules: 
['select(X):-strength(X,C),C!=15.', 'strength(X,C):-strength(X,C),C==15.']

jaccard: 1.0

AS desired: [['strength(1,1)', 'strength(1,2)', 'strength(1,3)', 'strength(1,4)', 'strength(1,5)', 'strength(1,6)', 'strength(1,7)', 'strength(1,8)', 'strength(1,9)', 'strength(1,10)', 'strength(1,11)', 'strength(1,12)', 'strength(1,13)', 'strength(1,14)', 'strength(1,15)', 'strength(1,16)', 'strength(1,17)', 'strength(1,18)', 'strength(1,19)', 'strength(1,20)', 'strength(1,21)', 'strength(1,22)', 'strength(1,23)', 'strength(1,24)', 'strength(1,25)', 'strength(1,26)', 'strength(1,27)', 'strength(1,28)', 'strength(1,29)', 'strength(1,30)', 'strength(1,31)', 'strength(1,32)', 'strength(1,33)', 'strength(1,34)', 'strength(1,35)', 'strength(1,36)', 'strength(1,37)', 'strength(1,38)', 'strength(1,39)', 'strength(1,40)', 'strength(1,41)', 'strength(1,42)', 'strength(1,43)', 'strength(1,44)', 'strength(1,45)', 'strength(1,46)', 'strength(1,47)', 'strength(1,48)', 'strength(1,49)', 'strength(1,50)', 'strength(1,51)', 'strength(1,52)', 'strength(1,53)', 'strength(1,54)', 'strength(1,55)', 'strength(1,56)', 'strength(1,57)', 'strength(1,58)', 'strength(1,59)', 'strength(1,60)', 'strength(1,61)', 'strength(1,62)', 'strength(1,63)', 'strength(1,64)', 'strength(1,65)', 'strength(1,66)', 'strength(1,67)', 'strength(1,68)', 'strength(1,69)', 'strength(1,70)', 'strength(1,71)', 'strength(1,72)', 'strength(1,73)', 'strength(1,74)', 'strength(1,75)', 'strength(1,76)', 'strength(1,77)', 'strength(1,78)', 'strength(1,79)', 'strength(1,80)', 'strength(1,81)', 'strength(1,82)', 'strength(1,83)', 'strength(1,84)', 'strength(1,85)', 'strength(1,86)', 'strength(1,87)', 'strength(1,88)', 'strength(1,89)', 'strength(1,90)', 'strength(1,91)', 'strength(1,92)', 'strength(1,93)', 'strength(1,94)', 'strength(1,95)', 'strength(1,96)', 'strength(1,97)', 'strength(1,98)', 'strength(1,99)', 'strength(1,100)', 'strength(2,1)', 'strength(2,2)', 'strength(2,3)', 'strength(2,4)', 'strength(2,5)', 'strength(2,6)', 'strength(2,7)', 'strength(2,8)', 'strength(2,9)', 'strength(2,10)', 'strength(2,11)', 'strength(2,12)', 'strength(2,13)', 'strength(2,14)', 'strength(2,15)', 'strength(2,16)', 'strength(2,17)', 'strength(2,18)', 'strength(2,19)', 'strength(2,20)', 'strength(2,21)', 'strength(2,22)', 'strength(2,23)', 'strength(2,24)', 'strength(2,25)', 'strength(2,26)', 'strength(2,27)', 'strength(2,28)', 'strength(2,29)', 'strength(2,30)', 'strength(2,31)', 'strength(2,32)', 'strength(2,33)', 'strength(2,34)', 'strength(2,35)', 'strength(2,36)', 'strength(2,37)', 'strength(2,38)', 'strength(2,39)', 'strength(2,40)', 'strength(2,41)', 'strength(2,42)', 'strength(2,43)', 'strength(2,44)', 'strength(2,45)', 'strength(2,46)', 'strength(2,47)', 'strength(2,48)', 'strength(2,49)', 'strength(2,50)', 'strength(2,51)', 'strength(2,52)', 'strength(2,53)', 'strength(2,54)', 'strength(2,55)', 'strength(2,56)', 'strength(2,57)', 'strength(2,58)', 'strength(2,59)', 'strength(2,60)', 'strength(2,61)', 'strength(2,62)', 'strength(2,63)', 'strength(2,64)', 'strength(2,65)', 'strength(2,66)', 'strength(2,67)', 'strength(2,68)', 'strength(2,69)', 'strength(2,70)', 'strength(2,71)', 'strength(2,72)', 'strength(2,73)', 'strength(2,74)', 'strength(2,75)', 'strength(2,76)', 'strength(2,77)', 'strength(2,78)', 'strength(2,79)', 'strength(2,80)', 'strength(2,81)', 'strength(2,82)', 'strength(2,83)', 'strength(2,84)', 'strength(2,85)', 'strength(2,86)', 'strength(2,87)', 'strength(2,88)', 'strength(2,89)', 'strength(2,90)', 'strength(2,91)', 'strength(2,92)', 'strength(2,93)', 'strength(2,94)', 'strength(2,95)', 'strength(2,96)', 'strength(2,97)', 'strength(2,98)', 'strength(2,99)', 'strength(2,100)', 'strength(3,1)', 'strength(3,2)', 'strength(3,3)', 'strength(3,4)', 'strength(3,5)', 'strength(3,6)', 'strength(3,7)', 'strength(3,8)', 'strength(3,9)', 'strength(3,10)', 'strength(3,11)', 'strength(3,12)', 'strength(3,13)', 'strength(3,14)', 'strength(3,15)', 'strength(3,16)', 'strength(3,17)', 'strength(3,18)', 'strength(3,19)', 'strength(3,20)', 'strength(3,21)', 'strength(3,22)', 'strength(3,23)', 'strength(3,24)', 'strength(3,25)', 'strength(3,26)', 'strength(3,27)', 'strength(3,28)', 'strength(3,29)', 'strength(3,30)', 'strength(3,31)', 'strength(3,32)', 'strength(3,33)', 'strength(3,34)', 'strength(3,35)', 'strength(3,36)', 'strength(3,37)', 'strength(3,38)', 'strength(3,39)', 'strength(3,40)', 'strength(3,41)', 'strength(3,42)', 'strength(3,43)', 'strength(3,44)', 'strength(3,45)', 'strength(3,46)', 'strength(3,47)', 'strength(3,48)', 'strength(3,49)', 'strength(3,50)', 'strength(3,51)', 'strength(3,52)', 'strength(3,53)', 'strength(3,54)', 'strength(3,55)', 'strength(3,56)', 'strength(3,57)', 'strength(3,58)', 'strength(3,59)', 'strength(3,60)', 'strength(3,61)', 'strength(3,62)', 'strength(3,63)', 'strength(3,64)', 'strength(3,65)', 'strength(3,66)', 'strength(3,67)', 'strength(3,68)', 'strength(3,69)', 'strength(3,70)', 'strength(3,71)', 'strength(3,72)', 'strength(3,73)', 'strength(3,74)', 'strength(3,75)', 'strength(3,76)', 'strength(3,77)', 'strength(3,78)', 'strength(3,79)', 'strength(3,80)', 'strength(3,81)', 'strength(3,82)', 'strength(3,83)', 'strength(3,84)', 'strength(3,85)', 'strength(3,86)', 'strength(3,87)', 'strength(3,88)', 'strength(3,89)', 'strength(3,90)', 'strength(3,91)', 'strength(3,92)', 'strength(3,93)', 'strength(3,94)', 'strength(3,95)', 'strength(3,96)', 'strength(3,97)', 'strength(3,98)', 'strength(3,99)', 'strength(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['strength(1,1)', 'strength(1,2)', 'strength(1,3)', 'strength(1,4)', 'strength(1,5)', 'strength(1,6)', 'strength(1,7)', 'strength(1,8)', 'strength(1,9)', 'strength(1,10)', 'strength(1,11)', 'strength(1,12)', 'strength(1,13)', 'strength(1,14)', 'strength(1,15)', 'strength(1,16)', 'strength(1,17)', 'strength(1,18)', 'strength(1,19)', 'strength(1,20)', 'strength(1,21)', 'strength(1,22)', 'strength(1,23)', 'strength(1,24)', 'strength(1,25)', 'strength(1,26)', 'strength(1,27)', 'strength(1,28)', 'strength(1,29)', 'strength(1,30)', 'strength(1,31)', 'strength(1,32)', 'strength(1,33)', 'strength(1,34)', 'strength(1,35)', 'strength(1,36)', 'strength(1,37)', 'strength(1,38)', 'strength(1,39)', 'strength(1,40)', 'strength(1,41)', 'strength(1,42)', 'strength(1,43)', 'strength(1,44)', 'strength(1,45)', 'strength(1,46)', 'strength(1,47)', 'strength(1,48)', 'strength(1,49)', 'strength(1,50)', 'strength(1,51)', 'strength(1,52)', 'strength(1,53)', 'strength(1,54)', 'strength(1,55)', 'strength(1,56)', 'strength(1,57)', 'strength(1,58)', 'strength(1,59)', 'strength(1,60)', 'strength(1,61)', 'strength(1,62)', 'strength(1,63)', 'strength(1,64)', 'strength(1,65)', 'strength(1,66)', 'strength(1,67)', 'strength(1,68)', 'strength(1,69)', 'strength(1,70)', 'strength(1,71)', 'strength(1,72)', 'strength(1,73)', 'strength(1,74)', 'strength(1,75)', 'strength(1,76)', 'strength(1,77)', 'strength(1,78)', 'strength(1,79)', 'strength(1,80)', 'strength(1,81)', 'strength(1,82)', 'strength(1,83)', 'strength(1,84)', 'strength(1,85)', 'strength(1,86)', 'strength(1,87)', 'strength(1,88)', 'strength(1,89)', 'strength(1,90)', 'strength(1,91)', 'strength(1,92)', 'strength(1,93)', 'strength(1,94)', 'strength(1,95)', 'strength(1,96)', 'strength(1,97)', 'strength(1,98)', 'strength(1,99)', 'strength(1,100)', 'strength(2,1)', 'strength(2,2)', 'strength(2,3)', 'strength(2,4)', 'strength(2,5)', 'strength(2,6)', 'strength(2,7)', 'strength(2,8)', 'strength(2,9)', 'strength(2,10)', 'strength(2,11)', 'strength(2,12)', 'strength(2,13)', 'strength(2,14)', 'strength(2,15)', 'strength(2,16)', 'strength(2,17)', 'strength(2,18)', 'strength(2,19)', 'strength(2,20)', 'strength(2,21)', 'strength(2,22)', 'strength(2,23)', 'strength(2,24)', 'strength(2,25)', 'strength(2,26)', 'strength(2,27)', 'strength(2,28)', 'strength(2,29)', 'strength(2,30)', 'strength(2,31)', 'strength(2,32)', 'strength(2,33)', 'strength(2,34)', 'strength(2,35)', 'strength(2,36)', 'strength(2,37)', 'strength(2,38)', 'strength(2,39)', 'strength(2,40)', 'strength(2,41)', 'strength(2,42)', 'strength(2,43)', 'strength(2,44)', 'strength(2,45)', 'strength(2,46)', 'strength(2,47)', 'strength(2,48)', 'strength(2,49)', 'strength(2,50)', 'strength(2,51)', 'strength(2,52)', 'strength(2,53)', 'strength(2,54)', 'strength(2,55)', 'strength(2,56)', 'strength(2,57)', 'strength(2,58)', 'strength(2,59)', 'strength(2,60)', 'strength(2,61)', 'strength(2,62)', 'strength(2,63)', 'strength(2,64)', 'strength(2,65)', 'strength(2,66)', 'strength(2,67)', 'strength(2,68)', 'strength(2,69)', 'strength(2,70)', 'strength(2,71)', 'strength(2,72)', 'strength(2,73)', 'strength(2,74)', 'strength(2,75)', 'strength(2,76)', 'strength(2,77)', 'strength(2,78)', 'strength(2,79)', 'strength(2,80)', 'strength(2,81)', 'strength(2,82)', 'strength(2,83)', 'strength(2,84)', 'strength(2,85)', 'strength(2,86)', 'strength(2,87)', 'strength(2,88)', 'strength(2,89)', 'strength(2,90)', 'strength(2,91)', 'strength(2,92)', 'strength(2,93)', 'strength(2,94)', 'strength(2,95)', 'strength(2,96)', 'strength(2,97)', 'strength(2,98)', 'strength(2,99)', 'strength(2,100)', 'strength(3,1)', 'strength(3,2)', 'strength(3,3)', 'strength(3,4)', 'strength(3,5)', 'strength(3,6)', 'strength(3,7)', 'strength(3,8)', 'strength(3,9)', 'strength(3,10)', 'strength(3,11)', 'strength(3,12)', 'strength(3,13)', 'strength(3,14)', 'strength(3,15)', 'strength(3,16)', 'strength(3,17)', 'strength(3,18)', 'strength(3,19)', 'strength(3,20)', 'strength(3,21)', 'strength(3,22)', 'strength(3,23)', 'strength(3,24)', 'strength(3,25)', 'strength(3,26)', 'strength(3,27)', 'strength(3,28)', 'strength(3,29)', 'strength(3,30)', 'strength(3,31)', 'strength(3,32)', 'strength(3,33)', 'strength(3,34)', 'strength(3,35)', 'strength(3,36)', 'strength(3,37)', 'strength(3,38)', 'strength(3,39)', 'strength(3,40)', 'strength(3,41)', 'strength(3,42)', 'strength(3,43)', 'strength(3,44)', 'strength(3,45)', 'strength(3,46)', 'strength(3,47)', 'strength(3,48)', 'strength(3,49)', 'strength(3,50)', 'strength(3,51)', 'strength(3,52)', 'strength(3,53)', 'strength(3,54)', 'strength(3,55)', 'strength(3,56)', 'strength(3,57)', 'strength(3,58)', 'strength(3,59)', 'strength(3,60)', 'strength(3,61)', 'strength(3,62)', 'strength(3,63)', 'strength(3,64)', 'strength(3,65)', 'strength(3,66)', 'strength(3,67)', 'strength(3,68)', 'strength(3,69)', 'strength(3,70)', 'strength(3,71)', 'strength(3,72)', 'strength(3,73)', 'strength(3,74)', 'strength(3,75)', 'strength(3,76)', 'strength(3,77)', 'strength(3,78)', 'strength(3,79)', 'strength(3,80)', 'strength(3,81)', 'strength(3,82)', 'strength(3,83)', 'strength(3,84)', 'strength(3,85)', 'strength(3,86)', 'strength(3,87)', 'strength(3,88)', 'strength(3,89)', 'strength(3,90)', 'strength(3,91)', 'strength(3,92)', 'strength(3,93)', 'strength(3,94)', 'strength(3,95)', 'strength(3,96)', 'strength(3,97)', 'strength(3,98)', 'strength(3,99)', 'strength(3,100)', 'select(1)', 'select(2)', 'select(3)']]


531
assignment

question: 
Implement an ASP application to tag elements, defined by the predicate "quality", with one label from the set "cloud","weight".

answer from file: 
assign(X,"cloud")|assign(X,"weight"):-quality(X).

parsed from model: 
assign(X,"cloud")|assign(X,"weight"):-quality(X).

facts: 
quality(1..5).

generated: 
Implement an ASP application to tag elements, defined by the predicate "quality", with one label from the set "cloud","weight".
Answer: assign(X,"cloud")|assign(X,"weight"):-quality(X).
assign(X,"cloud"):-price(X,"city").
assign(X,"weight"):-price(X,"city").
price(X,Y):-quality(X),city(Y).
price(X,Y):-weight(X),city(Y).
price(X,Y):-city(X),city(Y).
price(X,Y):-city(X),city(Y).
```
The predicate "quality" includes fields "ID","height","city","price","author","description","name","city","author","description","name","price","height","city","description","

unique_rules: 
['assign(X,"cloud")|assign(X,"weight"):-quality(X).', 'assign(X,"cloud"):-price(X,"city").', 'assign(X,"weight"):-price(X,"city").', 'price(X,Y):-quality(X),city(Y).', 'price(X,Y):-weight(X),city(Y).', 'price(X,Y):-city(X),city(Y).']

jaccard: 1.0

AS desired: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'assign(1,"weight")', 'assign(2,"cloud")', 'assign(3,"cloud")', 'assign(4,"weight")', 'assign(5,"cloud")']]
\AS obtained: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'assign(1,"weight")', 'assign(2,"cloud")', 'assign(3,"cloud")', 'assign(4,"weight")', 'assign(5,"cloud")']]


532
constraint

question: 
Develop an ASP application to disallow connecting the "desk" predicate having value 7 with the "toronto" label.

answer from file: 
:-assign(7,toronto).

parsed from model: 
:-assign(7,toronto).

facts: 
desk(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-desk(X).

generated: 
Develop an ASP application to disallow connecting the "desk" predicate having value 7 with the "toronto" label.
Answer: :-assign(7,toronto).
Explanation: The predicate "table" includes fields "ID","city","author","name","description","price","author","city","description","name","height","age","city","description","price","author","name","height","age","city","description","price","author","name","height","age","city","description","price","author","name","height","age","city","description","price","author","name","height","age","city","description","price","author","name","height","age","city","description","price","author","name","height","age","city","description","price","author","name","height","age","city","description","price","author

unique_rules: 
[':-assign(7,toronto).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'desk(1)', 'desk(2)', 'desk(3)', 'desk(4)', 'desk(5)', 'desk(6)', 'desk(7)', 'desk(8)', 'desk(9)', 'desk(10)', 'desk(11)', 'desk(12)', 'desk(13)', 'desk(14)', 'desk(15)', 'desk(16)', 'desk(17)', 'desk(18)', 'desk(19)', 'desk(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'desk(1)', 'desk(2)', 'desk(3)', 'desk(4)', 'desk(5)', 'desk(6)', 'desk(7)', 'desk(8)', 'desk(9)', 'desk(10)', 'desk(11)', 'desk(12)', 'desk(13)', 'desk(14)', 'desk(15)', 'desk(16)', 'desk(17)', 'desk(18)', 'desk(19)', 'desk(20)']]


533
combination

question: 
Develop an ASP solution that finds all pairings of elements from the predicates "hair" and "white".

answer from file: 
combination(X,Y):-hair(X),white(Y).

parsed from model: 
combination(X,Y):-hair(X),white(Y).

facts: 
hair(1..4).white(1..5).

generated: 
Develop an ASP solution that finds all pairings of elements from the predicates "hair" and "white".
Answer: combination(X,Y):-hair(X),white(Y).
combination(X,Y):-hair(X),not white(Y).
combination(X,Y):-not hair(X),white(Y).
combination(X,Y):-not hair(X),not white(Y).

unique_rules: 
['combination(X,Y):-hair(X),white(Y).', 'combination(X,Y):-hair(X),not white(Y).', 'combination(X,Y):-not hair(X),white(Y).', 'combination(X,Y):-not hair(X),not white(Y).']

jaccard: 1.0

AS desired: [['white(1)', 'white(2)', 'white(3)', 'white(4)', 'white(5)', 'hair(1)', 'hair(2)', 'hair(3)', 'hair(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['white(1)', 'white(2)', 'white(3)', 'white(4)', 'white(5)', 'hair(1)', 'hair(2)', 'hair(3)', 'hair(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


534
join

question: 
Develop an ASP solution that defines the predicate "flower_strength" to link each flower to the quality of strength, with "flower" having fields "ID","strengthID","quality" and "strength" having fields "ID","quality","owner".

answer from file: 
flower_strength(X,Z):-flower(X,Y,_),strength(Y,Z,_).

parsed from model: 
flower_strength(X,Z):-flower(X,Y,_),strength(Y,Z,_).

facts: 
flower("ID","strengthID","quality").strength("ID","quality","owner").

generated: 
Develop an ASP solution that defines the predicate "flower_strength" to link each flower to the quality of strength, with "flower" having fields "ID","strengthID","quality" and "strength" having fields "ID","quality","owner". Define the predicate "flower_strength" that links each flower to the quality of strength.
Answer: flower_strength(X,Z):-flower(X,Y,_),strength(Y,Z,_).
flower_strength(X,Z):-flower(X,Y,Z).

unique_rules: 
['flower_strength(X,Z):-flower(X,Y,_),strength(Y,Z,_).', 'flower_strength(X,Z):-flower(X,Y,Z).']

jaccard: 1.0

AS desired: [['flower("ID","strengthID","quality")', 'strength("ID","quality","owner")']]
\AS obtained: [['flower("ID","strengthID","quality")', 'strength("ID","quality","owner")']]


535
closure

question: 
Create an ASP solution that establishes the predicate "loops" through the transitive closure of the "moscow" predicate.

answer from file: 
loops(X,Y):-moscow(X,Y).
loops(X,Y):-moscow(X,Z),loops(Z,Y).

parsed from model: 
loops(X,Y):-moscow(X,Y).
loops(X,Y):-moscow(X,Z),loops(Z,Y).

facts: 
moscow(1..3, 1..4).

generated: 
Create an ASP solution that establishes the predicate "loops" through the transitive closure of the "moscow" predicate.
Answer: loops(X,Y):-moscow(X,Y).
loops(X,Y):-moscow(X,Z),loops(Z,Y).
loops(X,Y):-not moscow(X,Y).
loops(X,Y):-X==Y.
loops(X,Y):-X!=Y,city(X,Y).
city(X,Y):-loops(X,Y).
city(X,Y):-X,city(Y,Z),loops(Z,Y).
city(X,Y):-not city(X,Y).

unique_rules: 
['loops(X,Y):-moscow(X,Y).', 'loops(X,Y):-moscow(X,Z),loops(Z,Y).', 'loops(X,Y):-not moscow(X,Y).', 'loops(X,Y):-X==Y.', 'loops(X,Y):-X!=Y,city(X,Y).', 'city(X,Y):-loops(X,Y).', 'city(X,Y):-X,city(Y,Z),loops(Z,Y).', 'city(X,Y):-not city(X,Y).']

jaccard: 1.0

AS desired: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]
\AS obtained: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]


536
preference

question: 
Craft an ASP application to avoid the predicate "barcelona" with value "4" from being associated with "strength". If this occurs, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(4,"strength").[1@1]

parsed from model: 
:~assign(4,"strength").[1@1]

facts: 
barcelona(1..20).

generated: 
Craft an ASP application to avoid the predicate "barcelona" with value "4" from being associated with "strength". If this occurs, it incurs a cost of "1" at level "1".
Answer: :~assign(4,"strength").[1@1]
The predicate "bike" includes fields "ID","height","city","author","name","price","description","author","city","name","description","price","height","author","city","name","description","price","height","author","city","name","description","price","height","author","city","name","description","price","height","author","city","name","description","price","height","author","city","name","description","price","height","author","city","name","description","price","height","author","city","name","description","price","height","author","city","name","description","price","height","author","city

unique_rules: 
[':~assign(4,"strength").[1@1]']

jaccard: 1.0

AS desired: [['barcelona(1)', 'barcelona(2)', 'barcelona(3)', 'barcelona(4)', 'barcelona(5)', 'barcelona(6)', 'barcelona(7)', 'barcelona(8)', 'barcelona(9)', 'barcelona(10)', 'barcelona(11)', 'barcelona(12)', 'barcelona(13)', 'barcelona(14)', 'barcelona(15)', 'barcelona(16)', 'barcelona(17)', 'barcelona(18)', 'barcelona(19)', 'barcelona(20)']]
\AS obtained: [['barcelona(1)', 'barcelona(2)', 'barcelona(3)', 'barcelona(4)', 'barcelona(5)', 'barcelona(6)', 'barcelona(7)', 'barcelona(8)', 'barcelona(9)', 'barcelona(10)', 'barcelona(11)', 'barcelona(12)', 'barcelona(13)', 'barcelona(14)', 'barcelona(15)', 'barcelona(16)', 'barcelona(17)', 'barcelona(18)', 'barcelona(19)', 'barcelona(20)']]


537
filtering

question: 
Craft an ASP code snippet to capture all relevant values for the "cosenza" label within the "pink" predicate.

answer from file: 
select(X):-pink(X,"cosenza").

parsed from model: 
select(X):-pink(X,"cosenza").

facts: 
pink(1..5, "cosenza").

generated: 
Craft an ASP code snippet to capture all relevant values for the "cosenza" label within the "pink" predicate.
Answer: select(X):-pink(X,"cosenza").
pink(X,"cosenza")|select(X):-pink(X,"city").
pink(X,"city")|select(X):-pink(X,"moto").
pink(X,"moto")|select(X):-pink(X,"author").
pink(X,"author")|select(X):-pink(X,"description").
pink(X,"description")|select(X):-pink(X,"height").
pink(X,"height").

unique_rules: 
['select(X):-pink(X,"cosenza").', 'pink(X,"cosenza")|select(X):-pink(X,"city").', 'pink(X,"city")|select(X):-pink(X,"moto").', 'pink(X,"moto")|select(X):-pink(X,"author").', 'pink(X,"author")|select(X):-pink(X,"description").', 'pink(X,"description")|select(X):-pink(X,"height").']

jaccard: 1.0

AS desired: [['pink(1,"cosenza")', 'pink(2,"cosenza")', 'pink(3,"cosenza")', 'pink(4,"cosenza")', 'pink(5,"cosenza")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['pink(1,"cosenza")', 'pink(2,"cosenza")', 'pink(3,"cosenza")', 'pink(4,"cosenza")', 'pink(5,"cosenza")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


538
negative_filtering

question: 
Produce an ASP program to gather values associated with the predicate "mumbai" but not linked to the predicate "black" and labeled "white".

answer from file: 
select(X):-mumbai(X),not black(X,"white").

parsed from model: 
select(X):-mumbai(X),not black(X,"white").

facts: 
mumbai(1..3).black(1,"mumbai").black(2,"hair").black(3,"toronto").

generated: 
Produce an ASP program to gather values associated with the predicate "mumbai" but not linked to the predicate "black" and labeled "white".
Answer: select(X):-mumbai(X),not black(X,"white").
mumbai(X):-city(X),height(X,18).
black(X,"white").
height(X,Y):-city(X),Y.

unique_rules: 
['select(X):-mumbai(X),not black(X,"white").', 'mumbai(X):-city(X),height(X,18).', 'height(X,Y):-city(X),Y.']

jaccard: 1.0

AS desired: [['mumbai(1)', 'mumbai(2)', 'mumbai(3)', 'black(1,"mumbai")', 'black(2,"hair")', 'black(3,"toronto")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['mumbai(1)', 'mumbai(2)', 'mumbai(3)', 'black(1,"mumbai")', 'black(2,"hair")', 'black(3,"toronto")', 'select(1)', 'select(2)', 'select(3)']]


539
numeric_filtering

question: 
Design an ASP solution to capture all values tied to the predicate "quality" with a value different than 76.

answer from file: 
select(X):-quality(X,C),C!=76.

parsed from model: 
select(X):-quality(X,C),C!=76.

facts: 
quality(1..3, 1..100).

generated: 
Design an ASP solution to capture all values tied to the predicate "quality" with a value different than 76.
Answer: select(X):-quality(X,C),C!=76.
Explanation: The predicate "quality" includes all values tied to the predicate "city" with a value different than 76.
The predicate "city" includes all values tied to the predicate "author" with a value different than 76.
The predicate "author" includes all values tied to the predicate "moto" with a value different than 76.
So, the predicate "quality" includes all values tied to the predicate "city" with a value different than 76, and the predicate "city" includes all values tied to the predicate "author" with a value different than 76.
The predicate

unique_rules: 
['select(X):-quality(X,C),C!=76.']

jaccard: 1.0

AS desired: [['quality(1,1)', 'quality(1,2)', 'quality(1,3)', 'quality(1,4)', 'quality(1,5)', 'quality(1,6)', 'quality(1,7)', 'quality(1,8)', 'quality(1,9)', 'quality(1,10)', 'quality(1,11)', 'quality(1,12)', 'quality(1,13)', 'quality(1,14)', 'quality(1,15)', 'quality(1,16)', 'quality(1,17)', 'quality(1,18)', 'quality(1,19)', 'quality(1,20)', 'quality(1,21)', 'quality(1,22)', 'quality(1,23)', 'quality(1,24)', 'quality(1,25)', 'quality(1,26)', 'quality(1,27)', 'quality(1,28)', 'quality(1,29)', 'quality(1,30)', 'quality(1,31)', 'quality(1,32)', 'quality(1,33)', 'quality(1,34)', 'quality(1,35)', 'quality(1,36)', 'quality(1,37)', 'quality(1,38)', 'quality(1,39)', 'quality(1,40)', 'quality(1,41)', 'quality(1,42)', 'quality(1,43)', 'quality(1,44)', 'quality(1,45)', 'quality(1,46)', 'quality(1,47)', 'quality(1,48)', 'quality(1,49)', 'quality(1,50)', 'quality(1,51)', 'quality(1,52)', 'quality(1,53)', 'quality(1,54)', 'quality(1,55)', 'quality(1,56)', 'quality(1,57)', 'quality(1,58)', 'quality(1,59)', 'quality(1,60)', 'quality(1,61)', 'quality(1,62)', 'quality(1,63)', 'quality(1,64)', 'quality(1,65)', 'quality(1,66)', 'quality(1,67)', 'quality(1,68)', 'quality(1,69)', 'quality(1,70)', 'quality(1,71)', 'quality(1,72)', 'quality(1,73)', 'quality(1,74)', 'quality(1,75)', 'quality(1,76)', 'quality(1,77)', 'quality(1,78)', 'quality(1,79)', 'quality(1,80)', 'quality(1,81)', 'quality(1,82)', 'quality(1,83)', 'quality(1,84)', 'quality(1,85)', 'quality(1,86)', 'quality(1,87)', 'quality(1,88)', 'quality(1,89)', 'quality(1,90)', 'quality(1,91)', 'quality(1,92)', 'quality(1,93)', 'quality(1,94)', 'quality(1,95)', 'quality(1,96)', 'quality(1,97)', 'quality(1,98)', 'quality(1,99)', 'quality(1,100)', 'quality(2,1)', 'quality(2,2)', 'quality(2,3)', 'quality(2,4)', 'quality(2,5)', 'quality(2,6)', 'quality(2,7)', 'quality(2,8)', 'quality(2,9)', 'quality(2,10)', 'quality(2,11)', 'quality(2,12)', 'quality(2,13)', 'quality(2,14)', 'quality(2,15)', 'quality(2,16)', 'quality(2,17)', 'quality(2,18)', 'quality(2,19)', 'quality(2,20)', 'quality(2,21)', 'quality(2,22)', 'quality(2,23)', 'quality(2,24)', 'quality(2,25)', 'quality(2,26)', 'quality(2,27)', 'quality(2,28)', 'quality(2,29)', 'quality(2,30)', 'quality(2,31)', 'quality(2,32)', 'quality(2,33)', 'quality(2,34)', 'quality(2,35)', 'quality(2,36)', 'quality(2,37)', 'quality(2,38)', 'quality(2,39)', 'quality(2,40)', 'quality(2,41)', 'quality(2,42)', 'quality(2,43)', 'quality(2,44)', 'quality(2,45)', 'quality(2,46)', 'quality(2,47)', 'quality(2,48)', 'quality(2,49)', 'quality(2,50)', 'quality(2,51)', 'quality(2,52)', 'quality(2,53)', 'quality(2,54)', 'quality(2,55)', 'quality(2,56)', 'quality(2,57)', 'quality(2,58)', 'quality(2,59)', 'quality(2,60)', 'quality(2,61)', 'quality(2,62)', 'quality(2,63)', 'quality(2,64)', 'quality(2,65)', 'quality(2,66)', 'quality(2,67)', 'quality(2,68)', 'quality(2,69)', 'quality(2,70)', 'quality(2,71)', 'quality(2,72)', 'quality(2,73)', 'quality(2,74)', 'quality(2,75)', 'quality(2,76)', 'quality(2,77)', 'quality(2,78)', 'quality(2,79)', 'quality(2,80)', 'quality(2,81)', 'quality(2,82)', 'quality(2,83)', 'quality(2,84)', 'quality(2,85)', 'quality(2,86)', 'quality(2,87)', 'quality(2,88)', 'quality(2,89)', 'quality(2,90)', 'quality(2,91)', 'quality(2,92)', 'quality(2,93)', 'quality(2,94)', 'quality(2,95)', 'quality(2,96)', 'quality(2,97)', 'quality(2,98)', 'quality(2,99)', 'quality(2,100)', 'quality(3,1)', 'quality(3,2)', 'quality(3,3)', 'quality(3,4)', 'quality(3,5)', 'quality(3,6)', 'quality(3,7)', 'quality(3,8)', 'quality(3,9)', 'quality(3,10)', 'quality(3,11)', 'quality(3,12)', 'quality(3,13)', 'quality(3,14)', 'quality(3,15)', 'quality(3,16)', 'quality(3,17)', 'quality(3,18)', 'quality(3,19)', 'quality(3,20)', 'quality(3,21)', 'quality(3,22)', 'quality(3,23)', 'quality(3,24)', 'quality(3,25)', 'quality(3,26)', 'quality(3,27)', 'quality(3,28)', 'quality(3,29)', 'quality(3,30)', 'quality(3,31)', 'quality(3,32)', 'quality(3,33)', 'quality(3,34)', 'quality(3,35)', 'quality(3,36)', 'quality(3,37)', 'quality(3,38)', 'quality(3,39)', 'quality(3,40)', 'quality(3,41)', 'quality(3,42)', 'quality(3,43)', 'quality(3,44)', 'quality(3,45)', 'quality(3,46)', 'quality(3,47)', 'quality(3,48)', 'quality(3,49)', 'quality(3,50)', 'quality(3,51)', 'quality(3,52)', 'quality(3,53)', 'quality(3,54)', 'quality(3,55)', 'quality(3,56)', 'quality(3,57)', 'quality(3,58)', 'quality(3,59)', 'quality(3,60)', 'quality(3,61)', 'quality(3,62)', 'quality(3,63)', 'quality(3,64)', 'quality(3,65)', 'quality(3,66)', 'quality(3,67)', 'quality(3,68)', 'quality(3,69)', 'quality(3,70)', 'quality(3,71)', 'quality(3,72)', 'quality(3,73)', 'quality(3,74)', 'quality(3,75)', 'quality(3,76)', 'quality(3,77)', 'quality(3,78)', 'quality(3,79)', 'quality(3,80)', 'quality(3,81)', 'quality(3,82)', 'quality(3,83)', 'quality(3,84)', 'quality(3,85)', 'quality(3,86)', 'quality(3,87)', 'quality(3,88)', 'quality(3,89)', 'quality(3,90)', 'quality(3,91)', 'quality(3,92)', 'quality(3,93)', 'quality(3,94)', 'quality(3,95)', 'quality(3,96)', 'quality(3,97)', 'quality(3,98)', 'quality(3,99)', 'quality(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['quality(1,1)', 'quality(1,2)', 'quality(1,3)', 'quality(1,4)', 'quality(1,5)', 'quality(1,6)', 'quality(1,7)', 'quality(1,8)', 'quality(1,9)', 'quality(1,10)', 'quality(1,11)', 'quality(1,12)', 'quality(1,13)', 'quality(1,14)', 'quality(1,15)', 'quality(1,16)', 'quality(1,17)', 'quality(1,18)', 'quality(1,19)', 'quality(1,20)', 'quality(1,21)', 'quality(1,22)', 'quality(1,23)', 'quality(1,24)', 'quality(1,25)', 'quality(1,26)', 'quality(1,27)', 'quality(1,28)', 'quality(1,29)', 'quality(1,30)', 'quality(1,31)', 'quality(1,32)', 'quality(1,33)', 'quality(1,34)', 'quality(1,35)', 'quality(1,36)', 'quality(1,37)', 'quality(1,38)', 'quality(1,39)', 'quality(1,40)', 'quality(1,41)', 'quality(1,42)', 'quality(1,43)', 'quality(1,44)', 'quality(1,45)', 'quality(1,46)', 'quality(1,47)', 'quality(1,48)', 'quality(1,49)', 'quality(1,50)', 'quality(1,51)', 'quality(1,52)', 'quality(1,53)', 'quality(1,54)', 'quality(1,55)', 'quality(1,56)', 'quality(1,57)', 'quality(1,58)', 'quality(1,59)', 'quality(1,60)', 'quality(1,61)', 'quality(1,62)', 'quality(1,63)', 'quality(1,64)', 'quality(1,65)', 'quality(1,66)', 'quality(1,67)', 'quality(1,68)', 'quality(1,69)', 'quality(1,70)', 'quality(1,71)', 'quality(1,72)', 'quality(1,73)', 'quality(1,74)', 'quality(1,75)', 'quality(1,76)', 'quality(1,77)', 'quality(1,78)', 'quality(1,79)', 'quality(1,80)', 'quality(1,81)', 'quality(1,82)', 'quality(1,83)', 'quality(1,84)', 'quality(1,85)', 'quality(1,86)', 'quality(1,87)', 'quality(1,88)', 'quality(1,89)', 'quality(1,90)', 'quality(1,91)', 'quality(1,92)', 'quality(1,93)', 'quality(1,94)', 'quality(1,95)', 'quality(1,96)', 'quality(1,97)', 'quality(1,98)', 'quality(1,99)', 'quality(1,100)', 'quality(2,1)', 'quality(2,2)', 'quality(2,3)', 'quality(2,4)', 'quality(2,5)', 'quality(2,6)', 'quality(2,7)', 'quality(2,8)', 'quality(2,9)', 'quality(2,10)', 'quality(2,11)', 'quality(2,12)', 'quality(2,13)', 'quality(2,14)', 'quality(2,15)', 'quality(2,16)', 'quality(2,17)', 'quality(2,18)', 'quality(2,19)', 'quality(2,20)', 'quality(2,21)', 'quality(2,22)', 'quality(2,23)', 'quality(2,24)', 'quality(2,25)', 'quality(2,26)', 'quality(2,27)', 'quality(2,28)', 'quality(2,29)', 'quality(2,30)', 'quality(2,31)', 'quality(2,32)', 'quality(2,33)', 'quality(2,34)', 'quality(2,35)', 'quality(2,36)', 'quality(2,37)', 'quality(2,38)', 'quality(2,39)', 'quality(2,40)', 'quality(2,41)', 'quality(2,42)', 'quality(2,43)', 'quality(2,44)', 'quality(2,45)', 'quality(2,46)', 'quality(2,47)', 'quality(2,48)', 'quality(2,49)', 'quality(2,50)', 'quality(2,51)', 'quality(2,52)', 'quality(2,53)', 'quality(2,54)', 'quality(2,55)', 'quality(2,56)', 'quality(2,57)', 'quality(2,58)', 'quality(2,59)', 'quality(2,60)', 'quality(2,61)', 'quality(2,62)', 'quality(2,63)', 'quality(2,64)', 'quality(2,65)', 'quality(2,66)', 'quality(2,67)', 'quality(2,68)', 'quality(2,69)', 'quality(2,70)', 'quality(2,71)', 'quality(2,72)', 'quality(2,73)', 'quality(2,74)', 'quality(2,75)', 'quality(2,76)', 'quality(2,77)', 'quality(2,78)', 'quality(2,79)', 'quality(2,80)', 'quality(2,81)', 'quality(2,82)', 'quality(2,83)', 'quality(2,84)', 'quality(2,85)', 'quality(2,86)', 'quality(2,87)', 'quality(2,88)', 'quality(2,89)', 'quality(2,90)', 'quality(2,91)', 'quality(2,92)', 'quality(2,93)', 'quality(2,94)', 'quality(2,95)', 'quality(2,96)', 'quality(2,97)', 'quality(2,98)', 'quality(2,99)', 'quality(2,100)', 'quality(3,1)', 'quality(3,2)', 'quality(3,3)', 'quality(3,4)', 'quality(3,5)', 'quality(3,6)', 'quality(3,7)', 'quality(3,8)', 'quality(3,9)', 'quality(3,10)', 'quality(3,11)', 'quality(3,12)', 'quality(3,13)', 'quality(3,14)', 'quality(3,15)', 'quality(3,16)', 'quality(3,17)', 'quality(3,18)', 'quality(3,19)', 'quality(3,20)', 'quality(3,21)', 'quality(3,22)', 'quality(3,23)', 'quality(3,24)', 'quality(3,25)', 'quality(3,26)', 'quality(3,27)', 'quality(3,28)', 'quality(3,29)', 'quality(3,30)', 'quality(3,31)', 'quality(3,32)', 'quality(3,33)', 'quality(3,34)', 'quality(3,35)', 'quality(3,36)', 'quality(3,37)', 'quality(3,38)', 'quality(3,39)', 'quality(3,40)', 'quality(3,41)', 'quality(3,42)', 'quality(3,43)', 'quality(3,44)', 'quality(3,45)', 'quality(3,46)', 'quality(3,47)', 'quality(3,48)', 'quality(3,49)', 'quality(3,50)', 'quality(3,51)', 'quality(3,52)', 'quality(3,53)', 'quality(3,54)', 'quality(3,55)', 'quality(3,56)', 'quality(3,57)', 'quality(3,58)', 'quality(3,59)', 'quality(3,60)', 'quality(3,61)', 'quality(3,62)', 'quality(3,63)', 'quality(3,64)', 'quality(3,65)', 'quality(3,66)', 'quality(3,67)', 'quality(3,68)', 'quality(3,69)', 'quality(3,70)', 'quality(3,71)', 'quality(3,72)', 'quality(3,73)', 'quality(3,74)', 'quality(3,75)', 'quality(3,76)', 'quality(3,77)', 'quality(3,78)', 'quality(3,79)', 'quality(3,80)', 'quality(3,81)', 'quality(3,82)', 'quality(3,83)', 'quality(3,84)', 'quality(3,85)', 'quality(3,86)', 'quality(3,87)', 'quality(3,88)', 'quality(3,89)', 'quality(3,90)', 'quality(3,91)', 'quality(3,92)', 'quality(3,93)', 'quality(3,94)', 'quality(3,95)', 'quality(3,96)', 'quality(3,97)', 'quality(3,98)', 'quality(3,99)', 'quality(3,100)', 'select(1)', 'select(2)', 'select(3)']]


540
assignment

question: 
Design an ASP script to connect each element, as determined by the predicate "chicago", with one label from "weight","cosenza".

answer from file: 
assign(X,"weight")|assign(X,"cosenza"):-chicago(X).

parsed from model: 
assign(X,"weight")|assign(X,"cosenza"):-chicago(X).

facts: 
chicago(1..5).

generated: 
Design an ASP script to connect each element, as determined by the predicate "chicago", with one label from "weight","cosenza".
Answer: assign(X,"weight")|assign(X,"cosenza"):-chicago(X).
assign(X,"weight"):-chicago(X).
assign(X,"cosenza"):-chicago(X).
```
The predicate "chicago" includes fields "ID","height","author","city","description","name","author","city","description","height","name","price","description","city","author","name","height","description","price","city","description","height","name","price","description","city","author","name","height","description","price","city","description","height","name","price","description","city","author","name","height","description","price","city","description","height","

unique_rules: 
['assign(X,"weight")|assign(X,"cosenza"):-chicago(X).', 'assign(X,"weight"):-chicago(X).', 'assign(X,"cosenza"):-chicago(X).']

jaccard: 1.0

AS desired: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'chicago(5)', 'assign(1,"cosenza")', 'assign(2,"weight")', 'assign(3,"weight")', 'assign(4,"cosenza")', 'assign(5,"weight")']]
\AS obtained: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'chicago(5)', 'assign(1,"cosenza")', 'assign(2,"weight")', 'assign(3,"weight")', 'assign(4,"cosenza")', 'assign(5,"weight")']]


541
constraint

question: 
Write an ASP program for the following problem. Prevent the predicate "cairo" with value "7" from having label "lake".

answer from file: 
:-assign(7,lake).

parsed from model: 


facts: 
cairo(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-cairo(X).

generated: 
Write an ASP program for the following problem. Prevent the predicate "cairo" with value "7" from having label "lake".
```
assign(7,lake).
```
The predicate "city" has fields "ID","height","author","name","city","description","author","city","name","description","height","price","city","author","description","city","name","height","price","city","author","description","height","price","city","author","description","city","name","height","price","city","author","description","height","price","city","author","description","height","price","city","author","description","height","price","city","author","description","height","price","city","author","description","height","price","city","author","description","height","price","city","author","description","height","

unique_rules: 
[]

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'cairo(1)', 'cairo(2)', 'cairo(3)', 'cairo(4)', 'cairo(5)', 'cairo(6)', 'cairo(7)', 'cairo(8)', 'cairo(9)', 'cairo(10)', 'cairo(11)', 'cairo(12)', 'cairo(13)', 'cairo(14)', 'cairo(15)', 'cairo(16)', 'cairo(17)', 'cairo(18)', 'cairo(19)', 'cairo(20)']]
\AS obtained: [['cairo(1)', 'cairo(2)', 'cairo(3)', 'cairo(4)', 'cairo(5)', 'cairo(6)', 'cairo(7)', 'cairo(8)', 'cairo(9)', 'cairo(10)', 'cairo(11)', 'cairo(12)', 'cairo(13)', 'cairo(14)', 'cairo(15)', 'cairo(16)', 'cairo(17)', 'cairo(18)', 'cairo(19)', 'cairo(20)', 'assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")']]


542
combination

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "chicago" and "owner".

answer from file: 
combination(X,Y):-chicago(X),owner(Y).

parsed from model: 
combination(X,Y):-chicago(X),owner(Y).

facts: 
chicago(1..4).owner(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "chicago" and "owner".
Answer: combination(X,Y):-chicago(X),owner(Y).
combination(X,Y):-chicago(X),not owner(Y).
combination(X,Y):-not chicago(X),owner(Y).
combination(X,Y):-not chicago(X),not owner(Y).

unique_rules: 
['combination(X,Y):-chicago(X),owner(Y).', 'combination(X,Y):-chicago(X),not owner(Y).', 'combination(X,Y):-not chicago(X),owner(Y).', 'combination(X,Y):-not chicago(X),not owner(Y).']

jaccard: 1.0

AS desired: [['owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'owner(5)', 'chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'owner(5)', 'chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


543
join

question: 
Develop an ASP solution to create the predicate "desk_moscow" that links each desk with the lake of moscow, with "desk" having fields "ID","moscowID","hair" and "moscow" having fields "ID","lake","owner","hair".

answer from file: 
desk_moscow(X,Z):-desk(X,Y,_),moscow(Y,Z,_,_).

parsed from model: 
desk_moscow(X,Z):-desk(X,Y,_),moscow(Y,Z,_,_).

facts: 
desk("ID","moscowID","hair").moscow("ID","lake","owner","hair").

generated: 
Develop an ASP solution to create the predicate "desk_moscow" that links each desk with the lake of moscow, with "desk" having fields "ID","moscowID","hair" and "moscow" having fields "ID","lake","owner","hair". Define the predicate "desk_moscow" that links each desk with the lake of moscow.
Answer: desk_moscow(X,Z):-desk(X,Y,_),moscow(Y,Z,_,_).
desk_moscow(X,Z):-desk(X,Y,_),moscow(Y,Z,_,Y).

unique_rules: 
['desk_moscow(X,Z):-desk(X,Y,_),moscow(Y,Z,_,_).', 'desk_moscow(X,Z):-desk(X,Y,_),moscow(Y,Z,_,Y).']

jaccard: 1.0

AS desired: [['desk("ID","moscowID","hair")', 'moscow("ID","lake","owner","hair")']]
\AS obtained: [['desk("ID","moscowID","hair")', 'moscow("ID","lake","owner","hair")']]


544
closure

question: 
Produce an ASP program to compute the transitive closure of the "mumbai" predicate and define it as "journey".

answer from file: 
journey(X,Y):-mumbai(X,Y).
journey(X,Y):-mumbai(X,Z),journey(Z,Y).

parsed from model: 
journey(X,Y):-mumbai(X,Y).
journey(X,Y):-mumbai(X,Z),journey(Z,Y).

facts: 
mumbai(1..3, 1..4).

generated: 
Produce an ASP program to compute the transitive closure of the "mumbai" predicate and define it as "journey".
Answer: journey(X,Y):-mumbai(X,Y).
journey(X,Y):-mumbai(X,Z),journey(Z,Y).
journey(X,Y):-not(mumbai(X,Y)).
journey(X,Y):-mumbai(X,Z),age(Z,Y).
age(X,Y):-city(X,Y).
city(X,Y):-age(X,Y).

unique_rules: 
['journey(X,Y):-mumbai(X,Y).', 'journey(X,Y):-mumbai(X,Z),journey(Z,Y).', 'journey(X,Y):-not(mumbai(X,Y)).', 'journey(X,Y):-mumbai(X,Z),age(Z,Y).', 'age(X,Y):-city(X,Y).', 'city(X,Y):-age(X,Y).']

jaccard: 1.0

AS desired: [['mumbai(1,1)', 'mumbai(1,2)', 'mumbai(1,3)', 'mumbai(1,4)', 'mumbai(2,1)', 'mumbai(2,2)', 'mumbai(2,3)', 'mumbai(2,4)', 'mumbai(3,1)', 'mumbai(3,2)', 'mumbai(3,3)', 'mumbai(3,4)', 'journey(1,1)', 'journey(1,2)', 'journey(1,3)', 'journey(1,4)', 'journey(2,1)', 'journey(2,2)', 'journey(2,3)', 'journey(2,4)', 'journey(3,1)', 'journey(3,2)', 'journey(3,3)', 'journey(3,4)']]
\AS obtained: [['mumbai(1,1)', 'mumbai(1,2)', 'mumbai(1,3)', 'mumbai(1,4)', 'mumbai(2,1)', 'mumbai(2,2)', 'mumbai(2,3)', 'mumbai(2,4)', 'mumbai(3,1)', 'mumbai(3,2)', 'mumbai(3,3)', 'mumbai(3,4)', 'journey(1,1)', 'journey(1,2)', 'journey(1,3)', 'journey(1,4)', 'journey(2,1)', 'journey(2,2)', 'journey(2,3)', 'journey(2,4)', 'journey(3,1)', 'journey(3,2)', 'journey(3,3)', 'journey(3,4)']]


545
preference

question: 
Generate an ASP program to disallow the association of the predicate "wall" with value "15" with "laptop". If associated, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(15,"laptop").[1@1]

parsed from model: 
:~assign(15,"laptop").[1@1]

facts: 
wall(1..20).

generated: 
Generate an ASP program to disallow the association of the predicate "wall" with value "15" with "laptop". If associated, it incurs a cost of "1" at level "1".
Answer: :~assign(15,"laptop").[1@1]
This program uses the predicate "wall" with value "15" and the predicate "laptop" with value "1". If the predicate "wall" is associated with the predicate " arrivant" with value "1", it incurs a cost of "1" at level "1".
The predicate " arrivant" has no value that matches the predicate "wall".

unique_rules: 
[':~assign(15,"laptop").[1@1]']

jaccard: 1.0

AS desired: [['wall(1)', 'wall(2)', 'wall(3)', 'wall(4)', 'wall(5)', 'wall(6)', 'wall(7)', 'wall(8)', 'wall(9)', 'wall(10)', 'wall(11)', 'wall(12)', 'wall(13)', 'wall(14)', 'wall(15)', 'wall(16)', 'wall(17)', 'wall(18)', 'wall(19)', 'wall(20)']]
\AS obtained: [['wall(1)', 'wall(2)', 'wall(3)', 'wall(4)', 'wall(5)', 'wall(6)', 'wall(7)', 'wall(8)', 'wall(9)', 'wall(10)', 'wall(11)', 'wall(12)', 'wall(13)', 'wall(14)', 'wall(15)', 'wall(16)', 'wall(17)', 'wall(18)', 'wall(19)', 'wall(20)']]


546
filtering

question: 
Generate an ASP code snippet to capture values related to the "chicago" label in the "hair" predicate.

answer from file: 
select(X):-hair(X,"chicago").

parsed from model: 
select(X):-hair(X,"chicago").

facts: 
hair(1..5, "chicago").

generated: 
Generate an ASP code snippet to capture values related to the "chicago" label in the "hair" predicate.
Answer: select(X):-hair(X,"chicago").
select(X):-hair(X,"city").
select(X):-hair(X,"author").
select(X):-hair(X,"description").
select(X):-hair(X,"height").
select(X):-hair(X,"name").
select(X):-hair(X,"author","description").
select(X):-hair(X,"author","height").
select(X):-hair(X,"description","height").

unique_rules: 
['select(X):-hair(X,"chicago").', 'select(X):-hair(X,"city").', 'select(X):-hair(X,"author").', 'select(X):-hair(X,"description").', 'select(X):-hair(X,"height").', 'select(X):-hair(X,"name").', 'select(X):-hair(X,"author","description").', 'select(X):-hair(X,"author","height").', 'select(X):-hair(X,"description","height").']

jaccard: 1.0

AS desired: [['hair(1,"chicago")', 'hair(2,"chicago")', 'hair(3,"chicago")', 'hair(4,"chicago")', 'hair(5,"chicago")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['hair(1,"chicago")', 'hair(2,"chicago")', 'hair(3,"chicago")', 'hair(4,"chicago")', 'hair(5,"chicago")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


547
negative_filtering

question: 
Create an ASP solution to fetch values connected to the predicate "roof" but not associated with the predicate "mumbai" and labeled "laptop".

answer from file: 
select(X):-roof(X),not mumbai(X,"laptop").

parsed from model: 
select(X):-roof(X),not mumbai(X,"laptop").

facts: 
roof(1..3).mumbai(1,"laptop").mumbai(2,"roof").mumbai(3,"desk").

generated: 
Create an ASP solution to fetch values connected to the predicate "roof" but not associated with the predicate "mumbai" and labeled "laptop".
Answer: select(X):-roof(X),not mumbai(X,"laptop").
Explanation: The predicate "roof" includes values connected to the predicate "city", and the predicate "mumbai" includes values labeled "bike".
The predicate " arrivant" combines values connected to the predicate "city" and the predicate "bike".
The predicate "tokyo" combines values labeled "bike" and the predicate "city".
The predicate "florence" combines values connected to the predicate "city" and the predicate "moto".
The predicate "car" combines values connected to the predicate "city" and the predicate "moto".
The predicate "height" combines values connected to the predicate "city" and the predicate "moto

unique_rules: 
['select(X):-roof(X),not mumbai(X,"laptop").']

jaccard: 1.0

AS desired: [['roof(1)', 'roof(2)', 'roof(3)', 'mumbai(1,"laptop")', 'mumbai(2,"roof")', 'mumbai(3,"desk")', 'select(2)', 'select(3)']]
\AS obtained: [['roof(1)', 'roof(2)', 'roof(3)', 'mumbai(1,"laptop")', 'mumbai(2,"roof")', 'mumbai(3,"desk")', 'select(2)', 'select(3)']]


548
numeric_filtering

question: 
Draft an ASP code snippet to identify values linked to the predicate "black" with a value different than 85.

answer from file: 
select(X):-black(X,C),C!=85.

parsed from model: 
select(X):-black(X,C),C!=85.

facts: 
black(1..3, 1..100).

generated: 
Draft an ASP code snippet to identify values linked to the predicate "black" with a value different than 85.
Answer: select(X):-black(X,C),C!=85.
black(X,C):-black(X,C),C==85.

unique_rules: 
['select(X):-black(X,C),C!=85.', 'black(X,C):-black(X,C),C==85.']

jaccard: 1.0

AS desired: [['black(1,1)', 'black(1,2)', 'black(1,3)', 'black(1,4)', 'black(1,5)', 'black(1,6)', 'black(1,7)', 'black(1,8)', 'black(1,9)', 'black(1,10)', 'black(1,11)', 'black(1,12)', 'black(1,13)', 'black(1,14)', 'black(1,15)', 'black(1,16)', 'black(1,17)', 'black(1,18)', 'black(1,19)', 'black(1,20)', 'black(1,21)', 'black(1,22)', 'black(1,23)', 'black(1,24)', 'black(1,25)', 'black(1,26)', 'black(1,27)', 'black(1,28)', 'black(1,29)', 'black(1,30)', 'black(1,31)', 'black(1,32)', 'black(1,33)', 'black(1,34)', 'black(1,35)', 'black(1,36)', 'black(1,37)', 'black(1,38)', 'black(1,39)', 'black(1,40)', 'black(1,41)', 'black(1,42)', 'black(1,43)', 'black(1,44)', 'black(1,45)', 'black(1,46)', 'black(1,47)', 'black(1,48)', 'black(1,49)', 'black(1,50)', 'black(1,51)', 'black(1,52)', 'black(1,53)', 'black(1,54)', 'black(1,55)', 'black(1,56)', 'black(1,57)', 'black(1,58)', 'black(1,59)', 'black(1,60)', 'black(1,61)', 'black(1,62)', 'black(1,63)', 'black(1,64)', 'black(1,65)', 'black(1,66)', 'black(1,67)', 'black(1,68)', 'black(1,69)', 'black(1,70)', 'black(1,71)', 'black(1,72)', 'black(1,73)', 'black(1,74)', 'black(1,75)', 'black(1,76)', 'black(1,77)', 'black(1,78)', 'black(1,79)', 'black(1,80)', 'black(1,81)', 'black(1,82)', 'black(1,83)', 'black(1,84)', 'black(1,85)', 'black(1,86)', 'black(1,87)', 'black(1,88)', 'black(1,89)', 'black(1,90)', 'black(1,91)', 'black(1,92)', 'black(1,93)', 'black(1,94)', 'black(1,95)', 'black(1,96)', 'black(1,97)', 'black(1,98)', 'black(1,99)', 'black(1,100)', 'black(2,1)', 'black(2,2)', 'black(2,3)', 'black(2,4)', 'black(2,5)', 'black(2,6)', 'black(2,7)', 'black(2,8)', 'black(2,9)', 'black(2,10)', 'black(2,11)', 'black(2,12)', 'black(2,13)', 'black(2,14)', 'black(2,15)', 'black(2,16)', 'black(2,17)', 'black(2,18)', 'black(2,19)', 'black(2,20)', 'black(2,21)', 'black(2,22)', 'black(2,23)', 'black(2,24)', 'black(2,25)', 'black(2,26)', 'black(2,27)', 'black(2,28)', 'black(2,29)', 'black(2,30)', 'black(2,31)', 'black(2,32)', 'black(2,33)', 'black(2,34)', 'black(2,35)', 'black(2,36)', 'black(2,37)', 'black(2,38)', 'black(2,39)', 'black(2,40)', 'black(2,41)', 'black(2,42)', 'black(2,43)', 'black(2,44)', 'black(2,45)', 'black(2,46)', 'black(2,47)', 'black(2,48)', 'black(2,49)', 'black(2,50)', 'black(2,51)', 'black(2,52)', 'black(2,53)', 'black(2,54)', 'black(2,55)', 'black(2,56)', 'black(2,57)', 'black(2,58)', 'black(2,59)', 'black(2,60)', 'black(2,61)', 'black(2,62)', 'black(2,63)', 'black(2,64)', 'black(2,65)', 'black(2,66)', 'black(2,67)', 'black(2,68)', 'black(2,69)', 'black(2,70)', 'black(2,71)', 'black(2,72)', 'black(2,73)', 'black(2,74)', 'black(2,75)', 'black(2,76)', 'black(2,77)', 'black(2,78)', 'black(2,79)', 'black(2,80)', 'black(2,81)', 'black(2,82)', 'black(2,83)', 'black(2,84)', 'black(2,85)', 'black(2,86)', 'black(2,87)', 'black(2,88)', 'black(2,89)', 'black(2,90)', 'black(2,91)', 'black(2,92)', 'black(2,93)', 'black(2,94)', 'black(2,95)', 'black(2,96)', 'black(2,97)', 'black(2,98)', 'black(2,99)', 'black(2,100)', 'black(3,1)', 'black(3,2)', 'black(3,3)', 'black(3,4)', 'black(3,5)', 'black(3,6)', 'black(3,7)', 'black(3,8)', 'black(3,9)', 'black(3,10)', 'black(3,11)', 'black(3,12)', 'black(3,13)', 'black(3,14)', 'black(3,15)', 'black(3,16)', 'black(3,17)', 'black(3,18)', 'black(3,19)', 'black(3,20)', 'black(3,21)', 'black(3,22)', 'black(3,23)', 'black(3,24)', 'black(3,25)', 'black(3,26)', 'black(3,27)', 'black(3,28)', 'black(3,29)', 'black(3,30)', 'black(3,31)', 'black(3,32)', 'black(3,33)', 'black(3,34)', 'black(3,35)', 'black(3,36)', 'black(3,37)', 'black(3,38)', 'black(3,39)', 'black(3,40)', 'black(3,41)', 'black(3,42)', 'black(3,43)', 'black(3,44)', 'black(3,45)', 'black(3,46)', 'black(3,47)', 'black(3,48)', 'black(3,49)', 'black(3,50)', 'black(3,51)', 'black(3,52)', 'black(3,53)', 'black(3,54)', 'black(3,55)', 'black(3,56)', 'black(3,57)', 'black(3,58)', 'black(3,59)', 'black(3,60)', 'black(3,61)', 'black(3,62)', 'black(3,63)', 'black(3,64)', 'black(3,65)', 'black(3,66)', 'black(3,67)', 'black(3,68)', 'black(3,69)', 'black(3,70)', 'black(3,71)', 'black(3,72)', 'black(3,73)', 'black(3,74)', 'black(3,75)', 'black(3,76)', 'black(3,77)', 'black(3,78)', 'black(3,79)', 'black(3,80)', 'black(3,81)', 'black(3,82)', 'black(3,83)', 'black(3,84)', 'black(3,85)', 'black(3,86)', 'black(3,87)', 'black(3,88)', 'black(3,89)', 'black(3,90)', 'black(3,91)', 'black(3,92)', 'black(3,93)', 'black(3,94)', 'black(3,95)', 'black(3,96)', 'black(3,97)', 'black(3,98)', 'black(3,99)', 'black(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['black(1,1)', 'black(1,2)', 'black(1,3)', 'black(1,4)', 'black(1,5)', 'black(1,6)', 'black(1,7)', 'black(1,8)', 'black(1,9)', 'black(1,10)', 'black(1,11)', 'black(1,12)', 'black(1,13)', 'black(1,14)', 'black(1,15)', 'black(1,16)', 'black(1,17)', 'black(1,18)', 'black(1,19)', 'black(1,20)', 'black(1,21)', 'black(1,22)', 'black(1,23)', 'black(1,24)', 'black(1,25)', 'black(1,26)', 'black(1,27)', 'black(1,28)', 'black(1,29)', 'black(1,30)', 'black(1,31)', 'black(1,32)', 'black(1,33)', 'black(1,34)', 'black(1,35)', 'black(1,36)', 'black(1,37)', 'black(1,38)', 'black(1,39)', 'black(1,40)', 'black(1,41)', 'black(1,42)', 'black(1,43)', 'black(1,44)', 'black(1,45)', 'black(1,46)', 'black(1,47)', 'black(1,48)', 'black(1,49)', 'black(1,50)', 'black(1,51)', 'black(1,52)', 'black(1,53)', 'black(1,54)', 'black(1,55)', 'black(1,56)', 'black(1,57)', 'black(1,58)', 'black(1,59)', 'black(1,60)', 'black(1,61)', 'black(1,62)', 'black(1,63)', 'black(1,64)', 'black(1,65)', 'black(1,66)', 'black(1,67)', 'black(1,68)', 'black(1,69)', 'black(1,70)', 'black(1,71)', 'black(1,72)', 'black(1,73)', 'black(1,74)', 'black(1,75)', 'black(1,76)', 'black(1,77)', 'black(1,78)', 'black(1,79)', 'black(1,80)', 'black(1,81)', 'black(1,82)', 'black(1,83)', 'black(1,84)', 'black(1,85)', 'black(1,86)', 'black(1,87)', 'black(1,88)', 'black(1,89)', 'black(1,90)', 'black(1,91)', 'black(1,92)', 'black(1,93)', 'black(1,94)', 'black(1,95)', 'black(1,96)', 'black(1,97)', 'black(1,98)', 'black(1,99)', 'black(1,100)', 'black(2,1)', 'black(2,2)', 'black(2,3)', 'black(2,4)', 'black(2,5)', 'black(2,6)', 'black(2,7)', 'black(2,8)', 'black(2,9)', 'black(2,10)', 'black(2,11)', 'black(2,12)', 'black(2,13)', 'black(2,14)', 'black(2,15)', 'black(2,16)', 'black(2,17)', 'black(2,18)', 'black(2,19)', 'black(2,20)', 'black(2,21)', 'black(2,22)', 'black(2,23)', 'black(2,24)', 'black(2,25)', 'black(2,26)', 'black(2,27)', 'black(2,28)', 'black(2,29)', 'black(2,30)', 'black(2,31)', 'black(2,32)', 'black(2,33)', 'black(2,34)', 'black(2,35)', 'black(2,36)', 'black(2,37)', 'black(2,38)', 'black(2,39)', 'black(2,40)', 'black(2,41)', 'black(2,42)', 'black(2,43)', 'black(2,44)', 'black(2,45)', 'black(2,46)', 'black(2,47)', 'black(2,48)', 'black(2,49)', 'black(2,50)', 'black(2,51)', 'black(2,52)', 'black(2,53)', 'black(2,54)', 'black(2,55)', 'black(2,56)', 'black(2,57)', 'black(2,58)', 'black(2,59)', 'black(2,60)', 'black(2,61)', 'black(2,62)', 'black(2,63)', 'black(2,64)', 'black(2,65)', 'black(2,66)', 'black(2,67)', 'black(2,68)', 'black(2,69)', 'black(2,70)', 'black(2,71)', 'black(2,72)', 'black(2,73)', 'black(2,74)', 'black(2,75)', 'black(2,76)', 'black(2,77)', 'black(2,78)', 'black(2,79)', 'black(2,80)', 'black(2,81)', 'black(2,82)', 'black(2,83)', 'black(2,84)', 'black(2,85)', 'black(2,86)', 'black(2,87)', 'black(2,88)', 'black(2,89)', 'black(2,90)', 'black(2,91)', 'black(2,92)', 'black(2,93)', 'black(2,94)', 'black(2,95)', 'black(2,96)', 'black(2,97)', 'black(2,98)', 'black(2,99)', 'black(2,100)', 'black(3,1)', 'black(3,2)', 'black(3,3)', 'black(3,4)', 'black(3,5)', 'black(3,6)', 'black(3,7)', 'black(3,8)', 'black(3,9)', 'black(3,10)', 'black(3,11)', 'black(3,12)', 'black(3,13)', 'black(3,14)', 'black(3,15)', 'black(3,16)', 'black(3,17)', 'black(3,18)', 'black(3,19)', 'black(3,20)', 'black(3,21)', 'black(3,22)', 'black(3,23)', 'black(3,24)', 'black(3,25)', 'black(3,26)', 'black(3,27)', 'black(3,28)', 'black(3,29)', 'black(3,30)', 'black(3,31)', 'black(3,32)', 'black(3,33)', 'black(3,34)', 'black(3,35)', 'black(3,36)', 'black(3,37)', 'black(3,38)', 'black(3,39)', 'black(3,40)', 'black(3,41)', 'black(3,42)', 'black(3,43)', 'black(3,44)', 'black(3,45)', 'black(3,46)', 'black(3,47)', 'black(3,48)', 'black(3,49)', 'black(3,50)', 'black(3,51)', 'black(3,52)', 'black(3,53)', 'black(3,54)', 'black(3,55)', 'black(3,56)', 'black(3,57)', 'black(3,58)', 'black(3,59)', 'black(3,60)', 'black(3,61)', 'black(3,62)', 'black(3,63)', 'black(3,64)', 'black(3,65)', 'black(3,66)', 'black(3,67)', 'black(3,68)', 'black(3,69)', 'black(3,70)', 'black(3,71)', 'black(3,72)', 'black(3,73)', 'black(3,74)', 'black(3,75)', 'black(3,76)', 'black(3,77)', 'black(3,78)', 'black(3,79)', 'black(3,80)', 'black(3,81)', 'black(3,82)', 'black(3,83)', 'black(3,84)', 'black(3,85)', 'black(3,86)', 'black(3,87)', 'black(3,88)', 'black(3,89)', 'black(3,90)', 'black(3,91)', 'black(3,92)', 'black(3,93)', 'black(3,94)', 'black(3,95)', 'black(3,96)', 'black(3,97)', 'black(3,98)', 'black(3,99)', 'black(3,100)', 'select(1)', 'select(2)', 'select(3)']]


549
assignment

question: 
Compose an ASP program that maps a single label from the set "roof","barcelona","lightblue","owner","toronto","weight","chicago" to elements determined by the predicate "storm".

answer from file: 
assign(X,"roof")|assign(X,"barcelona")|assign(X,"lightblue")|assign(X,"owner")|assign(X,"toronto")|assign(X,"weight")|assign(X,"chicago"):-storm(X).

parsed from model: 
assign(X,"roof")|assign(X,"barcelona")|assign(X,"lightblue")|assign(X,"owner")|assign(X,"toronto")|assign(X,"weight")|assign(X,"chicago"):-storm(X).

facts: 
storm(1..5).

generated: 
Compose an ASP program that maps a single label from the set "roof","barcelona","lightblue","owner","toronto","weight","chicago" to elements determined by the predicate "storm".
Answer: assign(X,"roof")|assign(X,"barcelona")|assign(X,"lightblue")|assign(X,"owner")|assign(X,"toronto")|assign(X,"weight")|assign(X,"chicago"):-storm(X).
This program uses the predicate "storm" to determine the elements to be assigned.
The predicate "storm" includes fields "ID","height","description","name","city","author","age","description","name","city","author","age","description","name","city","description","name","city","author","age","description","name","city","description","name","city","description","name","city","author","age","description","name","city

unique_rules: 
['assign(X,"roof")|assign(X,"barcelona")|assign(X,"lightblue")|assign(X,"owner")|assign(X,"toronto")|assign(X,"weight")|assign(X,"chicago"):-storm(X).']

jaccard: 1.0

AS desired: [['storm(1)', 'storm(2)', 'storm(3)', 'storm(4)', 'storm(5)', 'assign(1,"chicago")', 'assign(2,"chicago")', 'assign(3,"chicago")', 'assign(4,"chicago")', 'assign(5,"chicago")']]
\AS obtained: [['storm(1)', 'storm(2)', 'storm(3)', 'storm(4)', 'storm(5)', 'assign(1,"chicago")', 'assign(2,"chicago")', 'assign(3,"chicago")', 'assign(4,"chicago")', 'assign(5,"chicago")']]


550
constraint

question: 
Formulate an ASP code that ensures the "desk" predicate having value 1 is not connected to the label "cloud".

answer from file: 
:-assign(1,cloud).

parsed from model: 
:-assign(1,cloud).

facts: 
desk(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-desk(X).

generated: 
Formulate an ASP code that ensures the "desk" predicate having value 1 is not connected to the label "cloud".
Answer: :-assign(1,cloud).
Explanation: The predicate "table" includes the "desk" label for the "city" value 1.
The predicate "cloud" contains the "city" label.
The predicate "assign" associates each element with the label "city".
The predicate "table" does not contain the "city" label for the "object" value 1.
Therefore, the predicate "assign" ensures that the connection between the "desk" label and the "object" value 1 is not established.

unique_rules: 
[':-assign(1,cloud).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'desk(1)', 'desk(2)', 'desk(3)', 'desk(4)', 'desk(5)', 'desk(6)', 'desk(7)', 'desk(8)', 'desk(9)', 'desk(10)', 'desk(11)', 'desk(12)', 'desk(13)', 'desk(14)', 'desk(15)', 'desk(16)', 'desk(17)', 'desk(18)', 'desk(19)', 'desk(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'desk(1)', 'desk(2)', 'desk(3)', 'desk(4)', 'desk(5)', 'desk(6)', 'desk(7)', 'desk(8)', 'desk(9)', 'desk(10)', 'desk(11)', 'desk(12)', 'desk(13)', 'desk(14)', 'desk(15)', 'desk(16)', 'desk(17)', 'desk(18)', 'desk(19)', 'desk(20)']]


551
combination

question: 
Write an ASP program that computes the cross-product of elements in the sets defined by "laptop" and "cosenza".

answer from file: 
combination(X,Y):-laptop(X),cosenza(Y).

parsed from model: 
cross_product(X,Y):-laptop(X),cosenza(Y).

facts: 
laptop(1..4).cosenza(1..5).

generated: 
Write an ASP program that computes the cross-product of elements in the sets defined by "laptop" and "cosenza".
Answer: cross_product(X,Y):-laptop(X),cosenza(Y).
cross_product(X,Y):-laptop(X),not cosenza(Y).
cross_product(X,Y):-not laptop(X),cosenza(Y).

unique_rules: 
['cross_product(X,Y):-laptop(X),cosenza(Y).', 'cross_product(X,Y):-laptop(X),not cosenza(Y).', 'cross_product(X,Y):-not laptop(X),cosenza(Y).']

jaccard: 0.0

AS desired: [['cosenza(1)', 'cosenza(2)', 'cosenza(3)', 'cosenza(4)', 'cosenza(5)', 'laptop(1)', 'laptop(2)', 'laptop(3)', 'laptop(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['cosenza(1)', 'cosenza(2)', 'cosenza(3)', 'cosenza(4)', 'cosenza(5)', 'laptop(1)', 'laptop(2)', 'laptop(3)', 'laptop(4)', 'cross_product(1,1)', 'cross_product(1,2)', 'cross_product(1,3)', 'cross_product(1,4)', 'cross_product(1,5)', 'cross_product(2,1)', 'cross_product(2,2)', 'cross_product(2,3)', 'cross_product(2,4)', 'cross_product(2,5)', 'cross_product(3,1)', 'cross_product(3,2)', 'cross_product(3,3)', 'cross_product(3,4)', 'cross_product(3,5)', 'cross_product(4,1)', 'cross_product(4,2)', 'cross_product(4,3)', 'cross_product(4,4)', 'cross_product(4,5)']]


552
join

question: 
Write an ASP application to address the problem where the predicate "roof" has fields "ID","quality","hair","whiteID","owner", and the predicate "white" has fields "ID","surname","weight". Define the predicate "roof_white" that associates each roof with the weight of white.

answer from file: 
roof_white(X,Z):-roof(X,_,_,Y,_),white(Y,_,Z).

parsed from model: 
roof_white(X,Z):-roof(X,_,_,Y,_),white(Y,_,Z).

facts: 
roof("ID","quality","hair","whiteID","owner").white("ID","surname","weight").

generated: 
Write an ASP application to address the problem where the predicate "roof" has fields "ID","quality","hair","whiteID","owner", and the predicate "white" has fields "ID","surname","weight". Define the predicate "roof_white" that associates each roof with the weight of white.
Answer: roof_white(X,Z):-roof(X,_,_,Y,_),white(Y,_,Z).
roof_white(X,Z):-roof(X,_,_,_,Z).

unique_rules: 
['roof_white(X,Z):-roof(X,_,_,Y,_),white(Y,_,Z).', 'roof_white(X,Z):-roof(X,_,_,_,Z).']

jaccard: 1.0

AS desired: [['roof("ID","quality","hair","whiteID","owner")', 'white("ID","surname","weight")']]
\AS obtained: [['roof("ID","quality","hair","whiteID","owner")', 'white("ID","surname","weight")']]


553
closure

question: 
Develop an ASP script that derives the "family" predicate through the transitive closure of the "black" predicate.

answer from file: 
family(X,Y):-black(X,Y).
family(X,Y):-black(X,Z),family(Z,Y).

parsed from model: 
family(X,Y):-black(X,Y).
family(X,Y):-black(X,Z),family(Z,Y).

facts: 
black(1..3, 1..4).

generated: 
Develop an ASP script that derives the "family" predicate through the transitive closure of the "black" predicate.
Answer: family(X,Y):-black(X,Y).
family(X,Y):-black(X,Z),family(Z,Y).
family(X,Y):-black(X,Z),not black(Z,Y).
black(X,Y):-city(X,Y).
black(X,Y):-moto(X,Y).
city(X,Y):-moto(X,Y).
moto(X,Y):-city(X,Y).

unique_rules: 
['family(X,Y):-black(X,Y).', 'family(X,Y):-black(X,Z),family(Z,Y).', 'family(X,Y):-black(X,Z),not black(Z,Y).', 'black(X,Y):-city(X,Y).', 'black(X,Y):-moto(X,Y).', 'city(X,Y):-moto(X,Y).', 'moto(X,Y):-city(X,Y).']

jaccard: 1.0

AS desired: [['black(1,1)', 'black(1,2)', 'black(1,3)', 'black(1,4)', 'black(2,1)', 'black(2,2)', 'black(2,3)', 'black(2,4)', 'black(3,1)', 'black(3,2)', 'black(3,3)', 'black(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]
\AS obtained: [['black(1,1)', 'black(1,2)', 'black(1,3)', 'black(1,4)', 'black(2,1)', 'black(2,2)', 'black(2,3)', 'black(2,4)', 'black(3,1)', 'black(3,2)', 'black(3,3)', 'black(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]


554
preference

question: 
Formulate an ASP solution to prevent the association of the predicate "cloud" with value "5" with "mumbai". If this association occurs, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(5,"mumbai").[1@1]

parsed from model: 
:~assign(5,"mumbai").[1@1]

facts: 
cloud(1..20).

generated: 
Formulate an ASP solution to prevent the association of the predicate "cloud" with value "5" with "mumbai". If this association occurs, it incurs a cost of "1" at level "1".
Answer: :~assign(5,"mumbai").[1@1]
This predicate defines the "prohibition" predicate, which associates the "gray" label to the "city" relation.
The "city" relation is defined as the transitive closure of the "street" predicate.
The "gray" label is defined as the transitive closure of the "moto" label.
The cost of the "city" relation is "1" at level "1".

unique_rules: 
[':~assign(5,"mumbai").[1@1]']

jaccard: 1.0

AS desired: [['cloud(1)', 'cloud(2)', 'cloud(3)', 'cloud(4)', 'cloud(5)', 'cloud(6)', 'cloud(7)', 'cloud(8)', 'cloud(9)', 'cloud(10)', 'cloud(11)', 'cloud(12)', 'cloud(13)', 'cloud(14)', 'cloud(15)', 'cloud(16)', 'cloud(17)', 'cloud(18)', 'cloud(19)', 'cloud(20)']]
\AS obtained: [['cloud(1)', 'cloud(2)', 'cloud(3)', 'cloud(4)', 'cloud(5)', 'cloud(6)', 'cloud(7)', 'cloud(8)', 'cloud(9)', 'cloud(10)', 'cloud(11)', 'cloud(12)', 'cloud(13)', 'cloud(14)', 'cloud(15)', 'cloud(16)', 'cloud(17)', 'cloud(18)', 'cloud(19)', 'cloud(20)']]


555
filtering

question: 
Write an ASP application to collect values linked to the predicate "storm" and labeled as "desk".

answer from file: 
select(X):-storm(X,"desk").

parsed from model: 
select(X):-storm(X,"desk").

facts: 
storm(1..5, "desk").

generated: 
Write an ASP application to collect values linked to the predicate "storm" and labeled as "desk".
Answer: select(X):-storm(X,"desk").
select(X):-storm(X,"dubai").
select(X):-storm(X,"moto").
select(X):-storm(X,"height").
```

unique_rules: 
['select(X):-storm(X,"desk").', 'select(X):-storm(X,"dubai").', 'select(X):-storm(X,"moto").', 'select(X):-storm(X,"height").']

jaccard: 1.0

AS desired: [['storm(1,"desk")', 'storm(2,"desk")', 'storm(3,"desk")', 'storm(4,"desk")', 'storm(5,"desk")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['storm(1,"desk")', 'storm(2,"desk")', 'storm(3,"desk")', 'storm(4,"desk")', 'storm(5,"desk")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


556
negative_filtering

question: 
Develop an ASP script to collect values tied to the predicate "mumbai" but not linked to the predicate "wall" and labeled "desk".

answer from file: 
select(X):-mumbai(X),not wall(X,"desk").

parsed from model: 
select(X):-mumbai(X),not wall(X,"desk").

facts: 
mumbai(1..3).wall(1,"pink").wall(2,"roof").wall(3,"chair").

generated: 
Develop an ASP script to collect values tied to the predicate "mumbai" but not linked to the predicate "wall" and labeled "desk".
Answer: select(X):-mumbai(X),not wall(X,"desk").
select(X):-wall(X,"desk").
```

unique_rules: 
['select(X):-mumbai(X),not wall(X,"desk").', 'select(X):-wall(X,"desk").']

jaccard: 1.0

AS desired: [['mumbai(1)', 'mumbai(2)', 'mumbai(3)', 'wall(1,"pink")', 'wall(2,"roof")', 'wall(3,"chair")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['mumbai(1)', 'mumbai(2)', 'mumbai(3)', 'wall(1,"pink")', 'wall(2,"roof")', 'wall(3,"chair")', 'select(1)', 'select(2)', 'select(3)']]


557
numeric_filtering

question: 
Generate an ASP application to select all values linked to the predicate "mumbai" with a value different than 2.

answer from file: 
select(X):-mumbai(X,C),C!=2.

parsed from model: 
select(X):-mumbai(X,C),C!=2.

facts: 
mumbai(1..3, 1..100).

generated: 
Generate an ASP application to select all values linked to the predicate "mumbai" with a value different than 2.
Answer: select(X):-mumbai(X,C),C!=2.
mumbai(X,C):-mumbai(X,C),C==2.

unique_rules: 
['select(X):-mumbai(X,C),C!=2.', 'mumbai(X,C):-mumbai(X,C),C==2.']

jaccard: 1.0

AS desired: [['mumbai(1,1)', 'mumbai(1,2)', 'mumbai(1,3)', 'mumbai(1,4)', 'mumbai(1,5)', 'mumbai(1,6)', 'mumbai(1,7)', 'mumbai(1,8)', 'mumbai(1,9)', 'mumbai(1,10)', 'mumbai(1,11)', 'mumbai(1,12)', 'mumbai(1,13)', 'mumbai(1,14)', 'mumbai(1,15)', 'mumbai(1,16)', 'mumbai(1,17)', 'mumbai(1,18)', 'mumbai(1,19)', 'mumbai(1,20)', 'mumbai(1,21)', 'mumbai(1,22)', 'mumbai(1,23)', 'mumbai(1,24)', 'mumbai(1,25)', 'mumbai(1,26)', 'mumbai(1,27)', 'mumbai(1,28)', 'mumbai(1,29)', 'mumbai(1,30)', 'mumbai(1,31)', 'mumbai(1,32)', 'mumbai(1,33)', 'mumbai(1,34)', 'mumbai(1,35)', 'mumbai(1,36)', 'mumbai(1,37)', 'mumbai(1,38)', 'mumbai(1,39)', 'mumbai(1,40)', 'mumbai(1,41)', 'mumbai(1,42)', 'mumbai(1,43)', 'mumbai(1,44)', 'mumbai(1,45)', 'mumbai(1,46)', 'mumbai(1,47)', 'mumbai(1,48)', 'mumbai(1,49)', 'mumbai(1,50)', 'mumbai(1,51)', 'mumbai(1,52)', 'mumbai(1,53)', 'mumbai(1,54)', 'mumbai(1,55)', 'mumbai(1,56)', 'mumbai(1,57)', 'mumbai(1,58)', 'mumbai(1,59)', 'mumbai(1,60)', 'mumbai(1,61)', 'mumbai(1,62)', 'mumbai(1,63)', 'mumbai(1,64)', 'mumbai(1,65)', 'mumbai(1,66)', 'mumbai(1,67)', 'mumbai(1,68)', 'mumbai(1,69)', 'mumbai(1,70)', 'mumbai(1,71)', 'mumbai(1,72)', 'mumbai(1,73)', 'mumbai(1,74)', 'mumbai(1,75)', 'mumbai(1,76)', 'mumbai(1,77)', 'mumbai(1,78)', 'mumbai(1,79)', 'mumbai(1,80)', 'mumbai(1,81)', 'mumbai(1,82)', 'mumbai(1,83)', 'mumbai(1,84)', 'mumbai(1,85)', 'mumbai(1,86)', 'mumbai(1,87)', 'mumbai(1,88)', 'mumbai(1,89)', 'mumbai(1,90)', 'mumbai(1,91)', 'mumbai(1,92)', 'mumbai(1,93)', 'mumbai(1,94)', 'mumbai(1,95)', 'mumbai(1,96)', 'mumbai(1,97)', 'mumbai(1,98)', 'mumbai(1,99)', 'mumbai(1,100)', 'mumbai(2,1)', 'mumbai(2,2)', 'mumbai(2,3)', 'mumbai(2,4)', 'mumbai(2,5)', 'mumbai(2,6)', 'mumbai(2,7)', 'mumbai(2,8)', 'mumbai(2,9)', 'mumbai(2,10)', 'mumbai(2,11)', 'mumbai(2,12)', 'mumbai(2,13)', 'mumbai(2,14)', 'mumbai(2,15)', 'mumbai(2,16)', 'mumbai(2,17)', 'mumbai(2,18)', 'mumbai(2,19)', 'mumbai(2,20)', 'mumbai(2,21)', 'mumbai(2,22)', 'mumbai(2,23)', 'mumbai(2,24)', 'mumbai(2,25)', 'mumbai(2,26)', 'mumbai(2,27)', 'mumbai(2,28)', 'mumbai(2,29)', 'mumbai(2,30)', 'mumbai(2,31)', 'mumbai(2,32)', 'mumbai(2,33)', 'mumbai(2,34)', 'mumbai(2,35)', 'mumbai(2,36)', 'mumbai(2,37)', 'mumbai(2,38)', 'mumbai(2,39)', 'mumbai(2,40)', 'mumbai(2,41)', 'mumbai(2,42)', 'mumbai(2,43)', 'mumbai(2,44)', 'mumbai(2,45)', 'mumbai(2,46)', 'mumbai(2,47)', 'mumbai(2,48)', 'mumbai(2,49)', 'mumbai(2,50)', 'mumbai(2,51)', 'mumbai(2,52)', 'mumbai(2,53)', 'mumbai(2,54)', 'mumbai(2,55)', 'mumbai(2,56)', 'mumbai(2,57)', 'mumbai(2,58)', 'mumbai(2,59)', 'mumbai(2,60)', 'mumbai(2,61)', 'mumbai(2,62)', 'mumbai(2,63)', 'mumbai(2,64)', 'mumbai(2,65)', 'mumbai(2,66)', 'mumbai(2,67)', 'mumbai(2,68)', 'mumbai(2,69)', 'mumbai(2,70)', 'mumbai(2,71)', 'mumbai(2,72)', 'mumbai(2,73)', 'mumbai(2,74)', 'mumbai(2,75)', 'mumbai(2,76)', 'mumbai(2,77)', 'mumbai(2,78)', 'mumbai(2,79)', 'mumbai(2,80)', 'mumbai(2,81)', 'mumbai(2,82)', 'mumbai(2,83)', 'mumbai(2,84)', 'mumbai(2,85)', 'mumbai(2,86)', 'mumbai(2,87)', 'mumbai(2,88)', 'mumbai(2,89)', 'mumbai(2,90)', 'mumbai(2,91)', 'mumbai(2,92)', 'mumbai(2,93)', 'mumbai(2,94)', 'mumbai(2,95)', 'mumbai(2,96)', 'mumbai(2,97)', 'mumbai(2,98)', 'mumbai(2,99)', 'mumbai(2,100)', 'mumbai(3,1)', 'mumbai(3,2)', 'mumbai(3,3)', 'mumbai(3,4)', 'mumbai(3,5)', 'mumbai(3,6)', 'mumbai(3,7)', 'mumbai(3,8)', 'mumbai(3,9)', 'mumbai(3,10)', 'mumbai(3,11)', 'mumbai(3,12)', 'mumbai(3,13)', 'mumbai(3,14)', 'mumbai(3,15)', 'mumbai(3,16)', 'mumbai(3,17)', 'mumbai(3,18)', 'mumbai(3,19)', 'mumbai(3,20)', 'mumbai(3,21)', 'mumbai(3,22)', 'mumbai(3,23)', 'mumbai(3,24)', 'mumbai(3,25)', 'mumbai(3,26)', 'mumbai(3,27)', 'mumbai(3,28)', 'mumbai(3,29)', 'mumbai(3,30)', 'mumbai(3,31)', 'mumbai(3,32)', 'mumbai(3,33)', 'mumbai(3,34)', 'mumbai(3,35)', 'mumbai(3,36)', 'mumbai(3,37)', 'mumbai(3,38)', 'mumbai(3,39)', 'mumbai(3,40)', 'mumbai(3,41)', 'mumbai(3,42)', 'mumbai(3,43)', 'mumbai(3,44)', 'mumbai(3,45)', 'mumbai(3,46)', 'mumbai(3,47)', 'mumbai(3,48)', 'mumbai(3,49)', 'mumbai(3,50)', 'mumbai(3,51)', 'mumbai(3,52)', 'mumbai(3,53)', 'mumbai(3,54)', 'mumbai(3,55)', 'mumbai(3,56)', 'mumbai(3,57)', 'mumbai(3,58)', 'mumbai(3,59)', 'mumbai(3,60)', 'mumbai(3,61)', 'mumbai(3,62)', 'mumbai(3,63)', 'mumbai(3,64)', 'mumbai(3,65)', 'mumbai(3,66)', 'mumbai(3,67)', 'mumbai(3,68)', 'mumbai(3,69)', 'mumbai(3,70)', 'mumbai(3,71)', 'mumbai(3,72)', 'mumbai(3,73)', 'mumbai(3,74)', 'mumbai(3,75)', 'mumbai(3,76)', 'mumbai(3,77)', 'mumbai(3,78)', 'mumbai(3,79)', 'mumbai(3,80)', 'mumbai(3,81)', 'mumbai(3,82)', 'mumbai(3,83)', 'mumbai(3,84)', 'mumbai(3,85)', 'mumbai(3,86)', 'mumbai(3,87)', 'mumbai(3,88)', 'mumbai(3,89)', 'mumbai(3,90)', 'mumbai(3,91)', 'mumbai(3,92)', 'mumbai(3,93)', 'mumbai(3,94)', 'mumbai(3,95)', 'mumbai(3,96)', 'mumbai(3,97)', 'mumbai(3,98)', 'mumbai(3,99)', 'mumbai(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['mumbai(1,1)', 'mumbai(1,2)', 'mumbai(1,3)', 'mumbai(1,4)', 'mumbai(1,5)', 'mumbai(1,6)', 'mumbai(1,7)', 'mumbai(1,8)', 'mumbai(1,9)', 'mumbai(1,10)', 'mumbai(1,11)', 'mumbai(1,12)', 'mumbai(1,13)', 'mumbai(1,14)', 'mumbai(1,15)', 'mumbai(1,16)', 'mumbai(1,17)', 'mumbai(1,18)', 'mumbai(1,19)', 'mumbai(1,20)', 'mumbai(1,21)', 'mumbai(1,22)', 'mumbai(1,23)', 'mumbai(1,24)', 'mumbai(1,25)', 'mumbai(1,26)', 'mumbai(1,27)', 'mumbai(1,28)', 'mumbai(1,29)', 'mumbai(1,30)', 'mumbai(1,31)', 'mumbai(1,32)', 'mumbai(1,33)', 'mumbai(1,34)', 'mumbai(1,35)', 'mumbai(1,36)', 'mumbai(1,37)', 'mumbai(1,38)', 'mumbai(1,39)', 'mumbai(1,40)', 'mumbai(1,41)', 'mumbai(1,42)', 'mumbai(1,43)', 'mumbai(1,44)', 'mumbai(1,45)', 'mumbai(1,46)', 'mumbai(1,47)', 'mumbai(1,48)', 'mumbai(1,49)', 'mumbai(1,50)', 'mumbai(1,51)', 'mumbai(1,52)', 'mumbai(1,53)', 'mumbai(1,54)', 'mumbai(1,55)', 'mumbai(1,56)', 'mumbai(1,57)', 'mumbai(1,58)', 'mumbai(1,59)', 'mumbai(1,60)', 'mumbai(1,61)', 'mumbai(1,62)', 'mumbai(1,63)', 'mumbai(1,64)', 'mumbai(1,65)', 'mumbai(1,66)', 'mumbai(1,67)', 'mumbai(1,68)', 'mumbai(1,69)', 'mumbai(1,70)', 'mumbai(1,71)', 'mumbai(1,72)', 'mumbai(1,73)', 'mumbai(1,74)', 'mumbai(1,75)', 'mumbai(1,76)', 'mumbai(1,77)', 'mumbai(1,78)', 'mumbai(1,79)', 'mumbai(1,80)', 'mumbai(1,81)', 'mumbai(1,82)', 'mumbai(1,83)', 'mumbai(1,84)', 'mumbai(1,85)', 'mumbai(1,86)', 'mumbai(1,87)', 'mumbai(1,88)', 'mumbai(1,89)', 'mumbai(1,90)', 'mumbai(1,91)', 'mumbai(1,92)', 'mumbai(1,93)', 'mumbai(1,94)', 'mumbai(1,95)', 'mumbai(1,96)', 'mumbai(1,97)', 'mumbai(1,98)', 'mumbai(1,99)', 'mumbai(1,100)', 'mumbai(2,1)', 'mumbai(2,2)', 'mumbai(2,3)', 'mumbai(2,4)', 'mumbai(2,5)', 'mumbai(2,6)', 'mumbai(2,7)', 'mumbai(2,8)', 'mumbai(2,9)', 'mumbai(2,10)', 'mumbai(2,11)', 'mumbai(2,12)', 'mumbai(2,13)', 'mumbai(2,14)', 'mumbai(2,15)', 'mumbai(2,16)', 'mumbai(2,17)', 'mumbai(2,18)', 'mumbai(2,19)', 'mumbai(2,20)', 'mumbai(2,21)', 'mumbai(2,22)', 'mumbai(2,23)', 'mumbai(2,24)', 'mumbai(2,25)', 'mumbai(2,26)', 'mumbai(2,27)', 'mumbai(2,28)', 'mumbai(2,29)', 'mumbai(2,30)', 'mumbai(2,31)', 'mumbai(2,32)', 'mumbai(2,33)', 'mumbai(2,34)', 'mumbai(2,35)', 'mumbai(2,36)', 'mumbai(2,37)', 'mumbai(2,38)', 'mumbai(2,39)', 'mumbai(2,40)', 'mumbai(2,41)', 'mumbai(2,42)', 'mumbai(2,43)', 'mumbai(2,44)', 'mumbai(2,45)', 'mumbai(2,46)', 'mumbai(2,47)', 'mumbai(2,48)', 'mumbai(2,49)', 'mumbai(2,50)', 'mumbai(2,51)', 'mumbai(2,52)', 'mumbai(2,53)', 'mumbai(2,54)', 'mumbai(2,55)', 'mumbai(2,56)', 'mumbai(2,57)', 'mumbai(2,58)', 'mumbai(2,59)', 'mumbai(2,60)', 'mumbai(2,61)', 'mumbai(2,62)', 'mumbai(2,63)', 'mumbai(2,64)', 'mumbai(2,65)', 'mumbai(2,66)', 'mumbai(2,67)', 'mumbai(2,68)', 'mumbai(2,69)', 'mumbai(2,70)', 'mumbai(2,71)', 'mumbai(2,72)', 'mumbai(2,73)', 'mumbai(2,74)', 'mumbai(2,75)', 'mumbai(2,76)', 'mumbai(2,77)', 'mumbai(2,78)', 'mumbai(2,79)', 'mumbai(2,80)', 'mumbai(2,81)', 'mumbai(2,82)', 'mumbai(2,83)', 'mumbai(2,84)', 'mumbai(2,85)', 'mumbai(2,86)', 'mumbai(2,87)', 'mumbai(2,88)', 'mumbai(2,89)', 'mumbai(2,90)', 'mumbai(2,91)', 'mumbai(2,92)', 'mumbai(2,93)', 'mumbai(2,94)', 'mumbai(2,95)', 'mumbai(2,96)', 'mumbai(2,97)', 'mumbai(2,98)', 'mumbai(2,99)', 'mumbai(2,100)', 'mumbai(3,1)', 'mumbai(3,2)', 'mumbai(3,3)', 'mumbai(3,4)', 'mumbai(3,5)', 'mumbai(3,6)', 'mumbai(3,7)', 'mumbai(3,8)', 'mumbai(3,9)', 'mumbai(3,10)', 'mumbai(3,11)', 'mumbai(3,12)', 'mumbai(3,13)', 'mumbai(3,14)', 'mumbai(3,15)', 'mumbai(3,16)', 'mumbai(3,17)', 'mumbai(3,18)', 'mumbai(3,19)', 'mumbai(3,20)', 'mumbai(3,21)', 'mumbai(3,22)', 'mumbai(3,23)', 'mumbai(3,24)', 'mumbai(3,25)', 'mumbai(3,26)', 'mumbai(3,27)', 'mumbai(3,28)', 'mumbai(3,29)', 'mumbai(3,30)', 'mumbai(3,31)', 'mumbai(3,32)', 'mumbai(3,33)', 'mumbai(3,34)', 'mumbai(3,35)', 'mumbai(3,36)', 'mumbai(3,37)', 'mumbai(3,38)', 'mumbai(3,39)', 'mumbai(3,40)', 'mumbai(3,41)', 'mumbai(3,42)', 'mumbai(3,43)', 'mumbai(3,44)', 'mumbai(3,45)', 'mumbai(3,46)', 'mumbai(3,47)', 'mumbai(3,48)', 'mumbai(3,49)', 'mumbai(3,50)', 'mumbai(3,51)', 'mumbai(3,52)', 'mumbai(3,53)', 'mumbai(3,54)', 'mumbai(3,55)', 'mumbai(3,56)', 'mumbai(3,57)', 'mumbai(3,58)', 'mumbai(3,59)', 'mumbai(3,60)', 'mumbai(3,61)', 'mumbai(3,62)', 'mumbai(3,63)', 'mumbai(3,64)', 'mumbai(3,65)', 'mumbai(3,66)', 'mumbai(3,67)', 'mumbai(3,68)', 'mumbai(3,69)', 'mumbai(3,70)', 'mumbai(3,71)', 'mumbai(3,72)', 'mumbai(3,73)', 'mumbai(3,74)', 'mumbai(3,75)', 'mumbai(3,76)', 'mumbai(3,77)', 'mumbai(3,78)', 'mumbai(3,79)', 'mumbai(3,80)', 'mumbai(3,81)', 'mumbai(3,82)', 'mumbai(3,83)', 'mumbai(3,84)', 'mumbai(3,85)', 'mumbai(3,86)', 'mumbai(3,87)', 'mumbai(3,88)', 'mumbai(3,89)', 'mumbai(3,90)', 'mumbai(3,91)', 'mumbai(3,92)', 'mumbai(3,93)', 'mumbai(3,94)', 'mumbai(3,95)', 'mumbai(3,96)', 'mumbai(3,97)', 'mumbai(3,98)', 'mumbai(3,99)', 'mumbai(3,100)', 'select(1)', 'select(2)', 'select(3)']]


558
assignment

question: 
Develop an ASP script that ensures each element, as specified by the predicate "butterfly", receives exactly one label from the set "storm","singapore","weight".

answer from file: 
assign(X,"storm")|assign(X,"singapore")|assign(X,"weight"):-butterfly(X).

parsed from model: 
assign(X,"storm")|assign(X,"singapore")|assign(X,"weight"):- arrivant(X,"bike").

facts: 
butterfly(1..5).

generated: 
Develop an ASP script that ensures each element, as specified by the predicate "butterfly", receives exactly one label from the set "storm","singapore","weight".
Answer: assign(X,"storm")|assign(X,"singapore")|assign(X,"weight"):- arrivant(X,"bike").
assign(X,"bike"):- arrivant(X,"height").
assign(X,"height"):- arrivant(X,"bike").
assign(X,"bike"):- arrivant(X,"height").
assign(X,"height"):- arrivant(X,"bike").
```
The predicate "bike" includes elements that are not associated with the labels "height","shangai","bike","florence","description","author","city","description","height","price","description","author","city","description","height","price","description","author","city","description","height","price

unique_rules: 
['assign(X,"storm")|assign(X,"singapore")|assign(X,"weight"):- arrivant(X,"bike").', 'assign(X,"bike"):- arrivant(X,"height").', 'assign(X,"height"):- arrivant(X,"bike").']

jaccard: 0.0

AS desired: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)', 'assign(1,"weight")', 'assign(2,"weight")', 'assign(3,"weight")', 'assign(4,"weight")', 'assign(5,"weight")']]
\AS obtained: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)']]


559
constraint

question: 
Formulate an ASP script to ensure the "desk" predicate having value 1 is not associated with the label "laptop".

answer from file: 
:-assign(1,laptop).

parsed from model: 
:-assign(1,laptop).

facts: 
desk(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-desk(X).

generated: 
Formulate an ASP script to ensure the "desk" predicate having value 1 is not associated with the label "laptop".
Answer: :-assign(1,laptop).
Explanation: The predicate "desk" having value 1 is not associated with the label " arrivant".
The predicate " arrivant" having value 1 is associated with the label "bike".
The predicate "bike" having value 1 is not associated with the label "description".
The predicate "description" having value 1 is associated with the label "description".
So, the script assigns 1 to the label " arrivant" only if the "desk" predicate having value 1 is not associated with the label "description".

unique_rules: 
[':-assign(1,laptop).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'desk(1)', 'desk(2)', 'desk(3)', 'desk(4)', 'desk(5)', 'desk(6)', 'desk(7)', 'desk(8)', 'desk(9)', 'desk(10)', 'desk(11)', 'desk(12)', 'desk(13)', 'desk(14)', 'desk(15)', 'desk(16)', 'desk(17)', 'desk(18)', 'desk(19)', 'desk(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'desk(1)', 'desk(2)', 'desk(3)', 'desk(4)', 'desk(5)', 'desk(6)', 'desk(7)', 'desk(8)', 'desk(9)', 'desk(10)', 'desk(11)', 'desk(12)', 'desk(13)', 'desk(14)', 'desk(15)', 'desk(16)', 'desk(17)', 'desk(18)', 'desk(19)', 'desk(20)']]


560
combination

question: 
Create an ASP program to calculate the Cartesian product of elements from sets represented by the predicates "quality" and "delhi".

answer from file: 
combination(X,Y):-quality(X),delhi(Y).

parsed from model: 
combination(X,Y):-quality(X),delhi(Y).

facts: 
quality(1..4).delhi(1..5).

generated: 
Create an ASP program to calculate the Cartesian product of elements from sets represented by the predicates "quality" and "delhi".
Answer: combination(X,Y):-quality(X),delhi(Y).
combination(X,Y):-quality(X),not delhi(Y).
combination(X,Y):-not quality(X),delhi(Y).
combination(X,Y):-quality(X),delhi(Y).

unique_rules: 
['combination(X,Y):-quality(X),delhi(Y).', 'combination(X,Y):-quality(X),not delhi(Y).', 'combination(X,Y):-not quality(X),delhi(Y).']

jaccard: 1.0

AS desired: [['delhi(1)', 'delhi(2)', 'delhi(3)', 'delhi(4)', 'delhi(5)', 'quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['delhi(1)', 'delhi(2)', 'delhi(3)', 'delhi(4)', 'delhi(5)', 'quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


561
join

question: 
Draft an ASP script to define the predicate "chair_surname" that associates each chair with the owner of surname, given "chair" has fields "ID","weight","surnameID","surname" and "surname" has fields "ID","owner","lake","quality".

answer from file: 
chair_surname(X,Z):-chair(X,_,Y,_),surname(Y,Z,_,_).

parsed from model: 
chair_surname(X,Z):-chair(X,_,Y,_),author(Y,Z,_,_).

facts: 
chair("ID","weight","surnameID","surname").surname("ID","owner","lake","quality").

generated: 
Draft an ASP script to define the predicate "chair_surname" that associates each chair with the owner of surname, given "chair" has fields "ID","weight","surnameID","surname" and "surname" has fields "ID","owner","lake","quality". Define the predicate "chair_surname" that associates each chair with the owner of the surname "author".
Answer: chair_surname(X,Z):-chair(X,_,Y,_),author(Y,Z,_,_).
chair_surname(X,Z):-chair(X,_,Z,_),author(Z,_,_,_).

unique_rules: 
['chair_surname(X,Z):-chair(X,_,Y,_),author(Y,Z,_,_).', 'chair_surname(X,Z):-chair(X,_,Z,_),author(Z,_,_,_).']

jaccard: 1.0

AS desired: [['chair("ID","weight","surnameID","surname")', 'surname("ID","owner","lake","quality")']]
\AS obtained: [['chair("ID","weight","surnameID","surname")', 'surname("ID","owner","lake","quality")']]


562
closure

question: 
Develop an ASP application that constructs the "trains" predicate based on the transitive closure of the "owner" predicate.

answer from file: 
trains(X,Y):-owner(X,Y).
trains(X,Y):-owner(X,Z),trains(Z,Y).

parsed from model: 
trains(X,Y):-owner(X,Y).
trains(X,Y):-owner(X,Z),trains(Z,Y).

facts: 
owner(1..3, 1..4).

generated: 
Develop an ASP application that constructs the "trains" predicate based on the transitive closure of the "owner" predicate.
Answer: trains(X,Y):-owner(X,Y).
trains(X,Y):-owner(X,Z),trains(Z,Y).
trains(X,Y):-owner(X,Z),Z!=Y.
owner(X,Y):-city(X,Y).
city(X,Y):-city(X,Z),Z!=Y.

unique_rules: 
['trains(X,Y):-owner(X,Y).', 'trains(X,Y):-owner(X,Z),trains(Z,Y).', 'trains(X,Y):-owner(X,Z),Z!=Y.', 'owner(X,Y):-city(X,Y).', 'city(X,Y):-city(X,Z),Z!=Y.']

jaccard: 1.0

AS desired: [['owner(1,1)', 'owner(1,2)', 'owner(1,3)', 'owner(1,4)', 'owner(2,1)', 'owner(2,2)', 'owner(2,3)', 'owner(2,4)', 'owner(3,1)', 'owner(3,2)', 'owner(3,3)', 'owner(3,4)', 'trains(1,1)', 'trains(1,2)', 'trains(1,3)', 'trains(1,4)', 'trains(2,1)', 'trains(2,2)', 'trains(2,3)', 'trains(2,4)', 'trains(3,1)', 'trains(3,2)', 'trains(3,3)', 'trains(3,4)']]
\AS obtained: [['owner(1,1)', 'owner(1,2)', 'owner(1,3)', 'owner(1,4)', 'owner(2,1)', 'owner(2,2)', 'owner(2,3)', 'owner(2,4)', 'owner(3,1)', 'owner(3,2)', 'owner(3,3)', 'owner(3,4)', 'trains(1,1)', 'trains(1,2)', 'trains(1,3)', 'trains(1,4)', 'trains(2,1)', 'trains(2,2)', 'trains(2,3)', 'trains(2,4)', 'trains(3,1)', 'trains(3,2)', 'trains(3,3)', 'trains(3,4)']]


563
preference

question: 
Craft an ASP solution to prevent the linking of the "lake" predicate with value "14" to "black". Any link incurs a cost of "1" at level "1".

answer from file: 
:~assign(14,"black").[1@1]

parsed from model: 
:~assign(14,"black").[1@1]

facts: 
lake(1..20).

generated: 
Craft an ASP solution to prevent the linking of the "lake" predicate with value "14" to "black". Any link incurs a cost of "1" at level "1".
Answer: :~assign(14,"black").[1@1]
The predicate "bike" includes fields "ID","city","author","name","price","description","author","city","name","price","description","author","city","name","price","description","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","

unique_rules: 
[':~assign(14,"black").[1@1]']

jaccard: 1.0

AS desired: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lake(6)', 'lake(7)', 'lake(8)', 'lake(9)', 'lake(10)', 'lake(11)', 'lake(12)', 'lake(13)', 'lake(14)', 'lake(15)', 'lake(16)', 'lake(17)', 'lake(18)', 'lake(19)', 'lake(20)']]
\AS obtained: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lake(6)', 'lake(7)', 'lake(8)', 'lake(9)', 'lake(10)', 'lake(11)', 'lake(12)', 'lake(13)', 'lake(14)', 'lake(15)', 'lake(16)', 'lake(17)', 'lake(18)', 'lake(19)', 'lake(20)']]


564
filtering

question: 
Produce an ASP program to gather and retrieve values linked to the "wall" label in the "moscow" predicate.

answer from file: 
select(X):-moscow(X,"wall").

parsed from model: 
select(X):-moscow(X,"wall").

facts: 
moscow(1..5, "wall").

generated: 
Produce an ASP program to gather and retrieve values linked to the "wall" label in the "moscow" predicate.
Answer: select(X):-moscow(X,"wall").
select(X):-moscow(X,"city").
select(X):-moscow(X,"author").
moscow(X,"city").
moscow(X,"author").
moscow(X,"wall").

unique_rules: 
['select(X):-moscow(X,"wall").', 'select(X):-moscow(X,"city").', 'select(X):-moscow(X,"author").']

jaccard: 1.0

AS desired: [['moscow(1,"wall")', 'moscow(2,"wall")', 'moscow(3,"wall")', 'moscow(4,"wall")', 'moscow(5,"wall")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['moscow(1,"wall")', 'moscow(2,"wall")', 'moscow(3,"wall")', 'moscow(4,"wall")', 'moscow(5,"wall")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


565
negative_filtering

question: 
Draft an ASP solution to identify values associated with the predicate "desk" but not tied to the predicate "cosenza" and labeled "weight".

answer from file: 
select(X):-desk(X),not cosenza(X,"weight").

parsed from model: 
select(X):-desk(X),not cosenza(X,"weight").

facts: 
desk(1..3).cosenza(1,"chicago").cosenza(2,"white").cosenza(3,"moscow").

generated: 
Draft an ASP solution to identify values associated with the predicate "desk" but not tied to the predicate "cosenza" and labeled "weight".
Answer: select(X):-desk(X),not cosenza(X,"weight").
Explanation: The predicate "desk" includes values associated with the predicate "height","moto","author","city","description","name","author","city","description","height","moto","author","city","description","name","author","city","description","height","moto","author","city","description","name","author","city","description","height","moto","author","city","description","name","author","city","description","height","moto","author","city","description","name","author","city","description","height","moto","author","city","description","name","author","city","description","height","moto","author","city","

unique_rules: 
['select(X):-desk(X),not cosenza(X,"weight").']

jaccard: 1.0

AS desired: [['desk(1)', 'desk(2)', 'desk(3)', 'cosenza(1,"chicago")', 'cosenza(2,"white")', 'cosenza(3,"moscow")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['desk(1)', 'desk(2)', 'desk(3)', 'cosenza(1,"chicago")', 'cosenza(2,"white")', 'cosenza(3,"moscow")', 'select(1)', 'select(2)', 'select(3)']]


566
numeric_filtering

question: 
Formulate an ASP script to identify values tied to the predicate "storm" with a value different than 81.

answer from file: 
select(X):-storm(X,C),C!=81.

parsed from model: 
select(X):-storm(X,C),C!=81.

facts: 
storm(1..3, 1..100).

generated: 
Formulate an ASP script to identify values tied to the predicate "storm" with a value different than 81.
Answer: select(X):-storm(X,C),C!=81.
select(X):-storm(X,C),C==81.
The predicate "storm" includes fields "ID","height","author","city","name","description","author","city","name","height","description","price","author","city","name","height","description","price","author","city","name","height","description","price","author","city","name","height","description","price","author","city","name","height","description","price","author","city","name","height","description","price","author","city","name","height","description","price","author","city","name","height","description","price

unique_rules: 
['select(X):-storm(X,C),C!=81.', 'select(X):-storm(X,C),C==81.']

jaccard: 1.0

AS desired: [['storm(1,1)', 'storm(1,2)', 'storm(1,3)', 'storm(1,4)', 'storm(1,5)', 'storm(1,6)', 'storm(1,7)', 'storm(1,8)', 'storm(1,9)', 'storm(1,10)', 'storm(1,11)', 'storm(1,12)', 'storm(1,13)', 'storm(1,14)', 'storm(1,15)', 'storm(1,16)', 'storm(1,17)', 'storm(1,18)', 'storm(1,19)', 'storm(1,20)', 'storm(1,21)', 'storm(1,22)', 'storm(1,23)', 'storm(1,24)', 'storm(1,25)', 'storm(1,26)', 'storm(1,27)', 'storm(1,28)', 'storm(1,29)', 'storm(1,30)', 'storm(1,31)', 'storm(1,32)', 'storm(1,33)', 'storm(1,34)', 'storm(1,35)', 'storm(1,36)', 'storm(1,37)', 'storm(1,38)', 'storm(1,39)', 'storm(1,40)', 'storm(1,41)', 'storm(1,42)', 'storm(1,43)', 'storm(1,44)', 'storm(1,45)', 'storm(1,46)', 'storm(1,47)', 'storm(1,48)', 'storm(1,49)', 'storm(1,50)', 'storm(1,51)', 'storm(1,52)', 'storm(1,53)', 'storm(1,54)', 'storm(1,55)', 'storm(1,56)', 'storm(1,57)', 'storm(1,58)', 'storm(1,59)', 'storm(1,60)', 'storm(1,61)', 'storm(1,62)', 'storm(1,63)', 'storm(1,64)', 'storm(1,65)', 'storm(1,66)', 'storm(1,67)', 'storm(1,68)', 'storm(1,69)', 'storm(1,70)', 'storm(1,71)', 'storm(1,72)', 'storm(1,73)', 'storm(1,74)', 'storm(1,75)', 'storm(1,76)', 'storm(1,77)', 'storm(1,78)', 'storm(1,79)', 'storm(1,80)', 'storm(1,81)', 'storm(1,82)', 'storm(1,83)', 'storm(1,84)', 'storm(1,85)', 'storm(1,86)', 'storm(1,87)', 'storm(1,88)', 'storm(1,89)', 'storm(1,90)', 'storm(1,91)', 'storm(1,92)', 'storm(1,93)', 'storm(1,94)', 'storm(1,95)', 'storm(1,96)', 'storm(1,97)', 'storm(1,98)', 'storm(1,99)', 'storm(1,100)', 'storm(2,1)', 'storm(2,2)', 'storm(2,3)', 'storm(2,4)', 'storm(2,5)', 'storm(2,6)', 'storm(2,7)', 'storm(2,8)', 'storm(2,9)', 'storm(2,10)', 'storm(2,11)', 'storm(2,12)', 'storm(2,13)', 'storm(2,14)', 'storm(2,15)', 'storm(2,16)', 'storm(2,17)', 'storm(2,18)', 'storm(2,19)', 'storm(2,20)', 'storm(2,21)', 'storm(2,22)', 'storm(2,23)', 'storm(2,24)', 'storm(2,25)', 'storm(2,26)', 'storm(2,27)', 'storm(2,28)', 'storm(2,29)', 'storm(2,30)', 'storm(2,31)', 'storm(2,32)', 'storm(2,33)', 'storm(2,34)', 'storm(2,35)', 'storm(2,36)', 'storm(2,37)', 'storm(2,38)', 'storm(2,39)', 'storm(2,40)', 'storm(2,41)', 'storm(2,42)', 'storm(2,43)', 'storm(2,44)', 'storm(2,45)', 'storm(2,46)', 'storm(2,47)', 'storm(2,48)', 'storm(2,49)', 'storm(2,50)', 'storm(2,51)', 'storm(2,52)', 'storm(2,53)', 'storm(2,54)', 'storm(2,55)', 'storm(2,56)', 'storm(2,57)', 'storm(2,58)', 'storm(2,59)', 'storm(2,60)', 'storm(2,61)', 'storm(2,62)', 'storm(2,63)', 'storm(2,64)', 'storm(2,65)', 'storm(2,66)', 'storm(2,67)', 'storm(2,68)', 'storm(2,69)', 'storm(2,70)', 'storm(2,71)', 'storm(2,72)', 'storm(2,73)', 'storm(2,74)', 'storm(2,75)', 'storm(2,76)', 'storm(2,77)', 'storm(2,78)', 'storm(2,79)', 'storm(2,80)', 'storm(2,81)', 'storm(2,82)', 'storm(2,83)', 'storm(2,84)', 'storm(2,85)', 'storm(2,86)', 'storm(2,87)', 'storm(2,88)', 'storm(2,89)', 'storm(2,90)', 'storm(2,91)', 'storm(2,92)', 'storm(2,93)', 'storm(2,94)', 'storm(2,95)', 'storm(2,96)', 'storm(2,97)', 'storm(2,98)', 'storm(2,99)', 'storm(2,100)', 'storm(3,1)', 'storm(3,2)', 'storm(3,3)', 'storm(3,4)', 'storm(3,5)', 'storm(3,6)', 'storm(3,7)', 'storm(3,8)', 'storm(3,9)', 'storm(3,10)', 'storm(3,11)', 'storm(3,12)', 'storm(3,13)', 'storm(3,14)', 'storm(3,15)', 'storm(3,16)', 'storm(3,17)', 'storm(3,18)', 'storm(3,19)', 'storm(3,20)', 'storm(3,21)', 'storm(3,22)', 'storm(3,23)', 'storm(3,24)', 'storm(3,25)', 'storm(3,26)', 'storm(3,27)', 'storm(3,28)', 'storm(3,29)', 'storm(3,30)', 'storm(3,31)', 'storm(3,32)', 'storm(3,33)', 'storm(3,34)', 'storm(3,35)', 'storm(3,36)', 'storm(3,37)', 'storm(3,38)', 'storm(3,39)', 'storm(3,40)', 'storm(3,41)', 'storm(3,42)', 'storm(3,43)', 'storm(3,44)', 'storm(3,45)', 'storm(3,46)', 'storm(3,47)', 'storm(3,48)', 'storm(3,49)', 'storm(3,50)', 'storm(3,51)', 'storm(3,52)', 'storm(3,53)', 'storm(3,54)', 'storm(3,55)', 'storm(3,56)', 'storm(3,57)', 'storm(3,58)', 'storm(3,59)', 'storm(3,60)', 'storm(3,61)', 'storm(3,62)', 'storm(3,63)', 'storm(3,64)', 'storm(3,65)', 'storm(3,66)', 'storm(3,67)', 'storm(3,68)', 'storm(3,69)', 'storm(3,70)', 'storm(3,71)', 'storm(3,72)', 'storm(3,73)', 'storm(3,74)', 'storm(3,75)', 'storm(3,76)', 'storm(3,77)', 'storm(3,78)', 'storm(3,79)', 'storm(3,80)', 'storm(3,81)', 'storm(3,82)', 'storm(3,83)', 'storm(3,84)', 'storm(3,85)', 'storm(3,86)', 'storm(3,87)', 'storm(3,88)', 'storm(3,89)', 'storm(3,90)', 'storm(3,91)', 'storm(3,92)', 'storm(3,93)', 'storm(3,94)', 'storm(3,95)', 'storm(3,96)', 'storm(3,97)', 'storm(3,98)', 'storm(3,99)', 'storm(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['storm(1,1)', 'storm(1,2)', 'storm(1,3)', 'storm(1,4)', 'storm(1,5)', 'storm(1,6)', 'storm(1,7)', 'storm(1,8)', 'storm(1,9)', 'storm(1,10)', 'storm(1,11)', 'storm(1,12)', 'storm(1,13)', 'storm(1,14)', 'storm(1,15)', 'storm(1,16)', 'storm(1,17)', 'storm(1,18)', 'storm(1,19)', 'storm(1,20)', 'storm(1,21)', 'storm(1,22)', 'storm(1,23)', 'storm(1,24)', 'storm(1,25)', 'storm(1,26)', 'storm(1,27)', 'storm(1,28)', 'storm(1,29)', 'storm(1,30)', 'storm(1,31)', 'storm(1,32)', 'storm(1,33)', 'storm(1,34)', 'storm(1,35)', 'storm(1,36)', 'storm(1,37)', 'storm(1,38)', 'storm(1,39)', 'storm(1,40)', 'storm(1,41)', 'storm(1,42)', 'storm(1,43)', 'storm(1,44)', 'storm(1,45)', 'storm(1,46)', 'storm(1,47)', 'storm(1,48)', 'storm(1,49)', 'storm(1,50)', 'storm(1,51)', 'storm(1,52)', 'storm(1,53)', 'storm(1,54)', 'storm(1,55)', 'storm(1,56)', 'storm(1,57)', 'storm(1,58)', 'storm(1,59)', 'storm(1,60)', 'storm(1,61)', 'storm(1,62)', 'storm(1,63)', 'storm(1,64)', 'storm(1,65)', 'storm(1,66)', 'storm(1,67)', 'storm(1,68)', 'storm(1,69)', 'storm(1,70)', 'storm(1,71)', 'storm(1,72)', 'storm(1,73)', 'storm(1,74)', 'storm(1,75)', 'storm(1,76)', 'storm(1,77)', 'storm(1,78)', 'storm(1,79)', 'storm(1,80)', 'storm(1,81)', 'storm(1,82)', 'storm(1,83)', 'storm(1,84)', 'storm(1,85)', 'storm(1,86)', 'storm(1,87)', 'storm(1,88)', 'storm(1,89)', 'storm(1,90)', 'storm(1,91)', 'storm(1,92)', 'storm(1,93)', 'storm(1,94)', 'storm(1,95)', 'storm(1,96)', 'storm(1,97)', 'storm(1,98)', 'storm(1,99)', 'storm(1,100)', 'storm(2,1)', 'storm(2,2)', 'storm(2,3)', 'storm(2,4)', 'storm(2,5)', 'storm(2,6)', 'storm(2,7)', 'storm(2,8)', 'storm(2,9)', 'storm(2,10)', 'storm(2,11)', 'storm(2,12)', 'storm(2,13)', 'storm(2,14)', 'storm(2,15)', 'storm(2,16)', 'storm(2,17)', 'storm(2,18)', 'storm(2,19)', 'storm(2,20)', 'storm(2,21)', 'storm(2,22)', 'storm(2,23)', 'storm(2,24)', 'storm(2,25)', 'storm(2,26)', 'storm(2,27)', 'storm(2,28)', 'storm(2,29)', 'storm(2,30)', 'storm(2,31)', 'storm(2,32)', 'storm(2,33)', 'storm(2,34)', 'storm(2,35)', 'storm(2,36)', 'storm(2,37)', 'storm(2,38)', 'storm(2,39)', 'storm(2,40)', 'storm(2,41)', 'storm(2,42)', 'storm(2,43)', 'storm(2,44)', 'storm(2,45)', 'storm(2,46)', 'storm(2,47)', 'storm(2,48)', 'storm(2,49)', 'storm(2,50)', 'storm(2,51)', 'storm(2,52)', 'storm(2,53)', 'storm(2,54)', 'storm(2,55)', 'storm(2,56)', 'storm(2,57)', 'storm(2,58)', 'storm(2,59)', 'storm(2,60)', 'storm(2,61)', 'storm(2,62)', 'storm(2,63)', 'storm(2,64)', 'storm(2,65)', 'storm(2,66)', 'storm(2,67)', 'storm(2,68)', 'storm(2,69)', 'storm(2,70)', 'storm(2,71)', 'storm(2,72)', 'storm(2,73)', 'storm(2,74)', 'storm(2,75)', 'storm(2,76)', 'storm(2,77)', 'storm(2,78)', 'storm(2,79)', 'storm(2,80)', 'storm(2,81)', 'storm(2,82)', 'storm(2,83)', 'storm(2,84)', 'storm(2,85)', 'storm(2,86)', 'storm(2,87)', 'storm(2,88)', 'storm(2,89)', 'storm(2,90)', 'storm(2,91)', 'storm(2,92)', 'storm(2,93)', 'storm(2,94)', 'storm(2,95)', 'storm(2,96)', 'storm(2,97)', 'storm(2,98)', 'storm(2,99)', 'storm(2,100)', 'storm(3,1)', 'storm(3,2)', 'storm(3,3)', 'storm(3,4)', 'storm(3,5)', 'storm(3,6)', 'storm(3,7)', 'storm(3,8)', 'storm(3,9)', 'storm(3,10)', 'storm(3,11)', 'storm(3,12)', 'storm(3,13)', 'storm(3,14)', 'storm(3,15)', 'storm(3,16)', 'storm(3,17)', 'storm(3,18)', 'storm(3,19)', 'storm(3,20)', 'storm(3,21)', 'storm(3,22)', 'storm(3,23)', 'storm(3,24)', 'storm(3,25)', 'storm(3,26)', 'storm(3,27)', 'storm(3,28)', 'storm(3,29)', 'storm(3,30)', 'storm(3,31)', 'storm(3,32)', 'storm(3,33)', 'storm(3,34)', 'storm(3,35)', 'storm(3,36)', 'storm(3,37)', 'storm(3,38)', 'storm(3,39)', 'storm(3,40)', 'storm(3,41)', 'storm(3,42)', 'storm(3,43)', 'storm(3,44)', 'storm(3,45)', 'storm(3,46)', 'storm(3,47)', 'storm(3,48)', 'storm(3,49)', 'storm(3,50)', 'storm(3,51)', 'storm(3,52)', 'storm(3,53)', 'storm(3,54)', 'storm(3,55)', 'storm(3,56)', 'storm(3,57)', 'storm(3,58)', 'storm(3,59)', 'storm(3,60)', 'storm(3,61)', 'storm(3,62)', 'storm(3,63)', 'storm(3,64)', 'storm(3,65)', 'storm(3,66)', 'storm(3,67)', 'storm(3,68)', 'storm(3,69)', 'storm(3,70)', 'storm(3,71)', 'storm(3,72)', 'storm(3,73)', 'storm(3,74)', 'storm(3,75)', 'storm(3,76)', 'storm(3,77)', 'storm(3,78)', 'storm(3,79)', 'storm(3,80)', 'storm(3,81)', 'storm(3,82)', 'storm(3,83)', 'storm(3,84)', 'storm(3,85)', 'storm(3,86)', 'storm(3,87)', 'storm(3,88)', 'storm(3,89)', 'storm(3,90)', 'storm(3,91)', 'storm(3,92)', 'storm(3,93)', 'storm(3,94)', 'storm(3,95)', 'storm(3,96)', 'storm(3,97)', 'storm(3,98)', 'storm(3,99)', 'storm(3,100)', 'select(1)', 'select(2)', 'select(3)']]


567
assignment

question: 
Create an ASP script that maps a single label from "chicago","black","strength","cosenza","chair","laptop","singapore" to a collection of elements specified by the predicate "pink".

answer from file: 
assign(X,"chicago")|assign(X,"black")|assign(X,"strength")|assign(X,"cosenza")|assign(X,"chair")|assign(X,"laptop")|assign(X,"singapore"):-pink(X).

parsed from model: 
assign(X,"chicago")|assign(X,"black")|assign(X,"strength")|assign(X,"cosenza")|assign(X,"chair")|assign(X,"laptop")|assign(X,"singapore"):-pink(X).

facts: 
pink(1..5).

generated: 
Create an ASP script that maps a single label from "chicago","black","strength","cosenza","chair","laptop","singapore" to a collection of elements specified by the predicate "pink".
Answer: assign(X,"chicago")|assign(X,"black")|assign(X,"strength")|assign(X,"cosenza")|assign(X,"chair")|assign(X,"laptop")|assign(X,"singapore"):-pink(X).
```
assign(X,"chicago")|assign(X,"black")|assign(X,"strength")|assign(X,"cosenza")|assign(X,"chair")|assign(X,"laptop")|assign(X,"singapore"):-pink(X).
```

unique_rules: 
['assign(X,"chicago")|assign(X,"black")|assign(X,"strength")|assign(X,"cosenza")|assign(X,"chair")|assign(X,"laptop")|assign(X,"singapore"):-pink(X).']

jaccard: 1.0

AS desired: [['pink(1)', 'pink(2)', 'pink(3)', 'pink(4)', 'pink(5)', 'assign(1,"singapore")', 'assign(2,"singapore")', 'assign(3,"singapore")', 'assign(4,"singapore")', 'assign(5,"singapore")']]
\AS obtained: [['pink(1)', 'pink(2)', 'pink(3)', 'pink(4)', 'pink(5)', 'assign(1,"singapore")', 'assign(2,"singapore")', 'assign(3,"singapore")', 'assign(4,"singapore")', 'assign(5,"singapore")']]


568
constraint

question: 
Generate an ASP code to exclude linking the "strength" predicate with value 3 to the label "cairo".

answer from file: 
:-assign(3,cairo).

parsed from model: 
:-assign(3,cairo).

facts: 
strength(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-strength(X).

generated: 
Generate an ASP code to exclude linking the "strength" predicate with value 3 to the label "cairo".
Answer: :-assign(3,cairo).
Explanation: The predicate "street" includes fields "ID","city","author","height","name","description","city","author","height","name","description","city","author","height","name","description","city","author","height","name","description","city","author","height","name","description","city","author","height","name","description","city","author","height","name","description","city","author","height","name","description","city","author","height","name","description","city","author","height","name","description","city","author","height","name","description","city","author","height","name","description","city","author","height","name

unique_rules: 
[':-assign(3,cairo).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'strength(6)', 'strength(7)', 'strength(8)', 'strength(9)', 'strength(10)', 'strength(11)', 'strength(12)', 'strength(13)', 'strength(14)', 'strength(15)', 'strength(16)', 'strength(17)', 'strength(18)', 'strength(19)', 'strength(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'strength(6)', 'strength(7)', 'strength(8)', 'strength(9)', 'strength(10)', 'strength(11)', 'strength(12)', 'strength(13)', 'strength(14)', 'strength(15)', 'strength(16)', 'strength(17)', 'strength(18)', 'strength(19)', 'strength(20)']]


569
combination

question: 
Design an ASP solution to compute all possible pairings of elements from two sets defined by the predicates "chair" and "delhi".

answer from file: 
combination(X,Y):-chair(X),delhi(Y).

parsed from model: 
combination(X,Y):-chair(X),delhi(Y).

facts: 
chair(1..4).delhi(1..5).

generated: 
Design an ASP solution to compute all possible pairings of elements from two sets defined by the predicates "chair" and "delhi".
Answer: combination(X,Y):-chair(X),delhi(Y).
combination(X,Y):-chair(X),not delhi(Y).
combination(X,Y):-delhi(Y),not chair(X).
combination(X,Y):-delhi(Y),chair(X).
combination(X,Y):-not chair(X),delhi(Y).

unique_rules: 
['combination(X,Y):-chair(X),delhi(Y).', 'combination(X,Y):-chair(X),not delhi(Y).', 'combination(X,Y):-delhi(Y),not chair(X).', 'combination(X,Y):-delhi(Y),chair(X).', 'combination(X,Y):-not chair(X),delhi(Y).']

jaccard: 1.0

AS desired: [['delhi(1)', 'delhi(2)', 'delhi(3)', 'delhi(4)', 'delhi(5)', 'chair(1)', 'chair(2)', 'chair(3)', 'chair(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['delhi(1)', 'delhi(2)', 'delhi(3)', 'delhi(4)', 'delhi(5)', 'chair(1)', 'chair(2)', 'chair(3)', 'chair(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


570
join

question: 
Write an ASP program for the following problem. Consider predicate "pink" having fields "ID","chairID","hair","quality","lake", and the predicate "chair" having fields "ID","lake","owner". Define a predicate "pink_chair" that associates to each "pink" the "lake" of "chair".

answer from file: 
pink_chair(X,Z):-pink(X,Y,_,_,_),chair(Y,Z,_).

parsed from model: 
pink_chair(X,Z):-pink(X,Y,_,_,Z),chair(Y,Z,_).

facts: 
pink("ID","chairID","hair","quality","lake").chair("ID","lake","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "pink" having fields "ID","chairID","hair","quality","lake", and the predicate "chair" having fields "ID","lake","owner". Define a predicate "pink_chair" that associates to each "pink" the "lake" of "chair".
Answer: pink_chair(X,Z):-pink(X,Y,_,_,Z),chair(Y,Z,_).
pink_chair(X,Z):-pink(X,Y,_,_,Z),not chair(Y,Z,_).
pink_chair(X,Z):-not pink(X,Y,_,_,Z),chair(Y,Z,_).

unique_rules: 
['pink_chair(X,Z):-pink(X,Y,_,_,Z),chair(Y,Z,_).', 'pink_chair(X,Z):-pink(X,Y,_,_,Z),not chair(Y,Z,_).', 'pink_chair(X,Z):-not pink(X,Y,_,_,Z),chair(Y,Z,_).']

jaccard: 1.0

AS desired: [['pink("ID","chairID","hair","quality","lake")', 'chair("ID","lake","owner")']]
\AS obtained: [['pink("ID","chairID","hair","quality","lake")', 'chair("ID","lake","owner")']]


571
closure

question: 
Create an ASP code snippet to determine the transitive closure of the "storm" predicate, resulting in the predicate "family".

answer from file: 
family(X,Y):-storm(X,Y).
family(X,Y):-storm(X,Z),family(Z,Y).

parsed from model: 
family(X,Y):-storm(X,Y).
family(X,Y):-storm(X,Z),family(Z,Y).

facts: 
storm(1..3, 1..4).

generated: 
Create an ASP code snippet to determine the transitive closure of the "storm" predicate, resulting in the predicate "family".
Answer: family(X,Y):-storm(X,Y).
family(X,Y):-storm(X,Z),family(Z,Y).
family(X,Y):-storm(X,Z),not family(Z,Y).
family(X,Y):-not storm(X,Y).
family(X,Y):-X,Y.
family(X,Y):-not X,not Y.

unique_rules: 
['family(X,Y):-storm(X,Y).', 'family(X,Y):-storm(X,Z),family(Z,Y).', 'family(X,Y):-storm(X,Z),not family(Z,Y).', 'family(X,Y):-not storm(X,Y).', 'family(X,Y):-X,Y.', 'family(X,Y):-not X,not Y.']

jaccard: 1.0

AS desired: [['storm(1,1)', 'storm(1,2)', 'storm(1,3)', 'storm(1,4)', 'storm(2,1)', 'storm(2,2)', 'storm(2,3)', 'storm(2,4)', 'storm(3,1)', 'storm(3,2)', 'storm(3,3)', 'storm(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]
\AS obtained: [['storm(1,1)', 'storm(1,2)', 'storm(1,3)', 'storm(1,4)', 'storm(2,1)', 'storm(2,2)', 'storm(2,3)', 'storm(2,4)', 'storm(3,1)', 'storm(3,2)', 'storm(3,3)', 'storm(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]


572
preference

question: 
Compose an ASP script to ensure the "butterfly" predicate with value "15" does not link to "laptop". If this connection happens, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(15,"laptop").[1@1]

parsed from model: 
:~assign(15,"laptop").[1@1]

facts: 
butterfly(1..20).

generated: 
Compose an ASP script to ensure the "butterfly" predicate with value "15" does not link to "laptop". If this connection happens, it incurs a cost of "1" at level "1".
Answer: :~assign(15,"laptop").[1@1]
This script uses the "assign" predicate to check the connection between the "15" and "laptop" labels. If the connection is found, it incurs a cost of "1" at level "1".

unique_rules: 
[':~assign(15,"laptop").[1@1]']

jaccard: 1.0

AS desired: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)', 'butterfly(6)', 'butterfly(7)', 'butterfly(8)', 'butterfly(9)', 'butterfly(10)', 'butterfly(11)', 'butterfly(12)', 'butterfly(13)', 'butterfly(14)', 'butterfly(15)', 'butterfly(16)', 'butterfly(17)', 'butterfly(18)', 'butterfly(19)', 'butterfly(20)']]
\AS obtained: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)', 'butterfly(6)', 'butterfly(7)', 'butterfly(8)', 'butterfly(9)', 'butterfly(10)', 'butterfly(11)', 'butterfly(12)', 'butterfly(13)', 'butterfly(14)', 'butterfly(15)', 'butterfly(16)', 'butterfly(17)', 'butterfly(18)', 'butterfly(19)', 'butterfly(20)']]


573
filtering

question: 
Create an ASP code to retrieve values associated with the label "owner" within the "moscow" predicate.

answer from file: 
select(X):-moscow(X,"owner").

parsed from model: 
select(X):-moscow(X,"owner").

facts: 
moscow(1..5, "owner").

generated: 
Create an ASP code to retrieve values associated with the label "owner" within the "moscow" predicate.
Answer: select(X):-moscow(X,"owner").
moscow(X,Z):- felicità(X,Z).
 felicità(X,Z):-city(X,Z).

unique_rules: 
['select(X):-moscow(X,"owner").', 'moscow(X,Z):- felicità(X,Z).', 'felicità(X,Z):-city(X,Z).']

jaccard: 1.0

AS desired: [['moscow(1,"owner")', 'moscow(2,"owner")', 'moscow(3,"owner")', 'moscow(4,"owner")', 'moscow(5,"owner")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['moscow(1,"owner")', 'moscow(2,"owner")', 'moscow(3,"owner")', 'moscow(4,"owner")', 'moscow(5,"owner")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


574
negative_filtering

question: 
Generate an ASP code snippet to retrieve values linked to the predicate "chicago" but not to the predicate "storm" and labeled "storm".

answer from file: 
select(X):-chicago(X),not storm(X,"storm").

parsed from model: 
select(X):-chicago(X),not storm(X,"storm").

facts: 
chicago(1..3).storm(1,"mumbai").storm(2,"storm").storm(3,"white").

generated: 
Generate an ASP code snippet to retrieve values linked to the predicate "chicago" but not to the predicate "storm" and labeled "storm".
Answer: select(X):-chicago(X),not storm(X,"storm").

unique_rules: 
['select(X):-chicago(X),not storm(X,"storm").']

jaccard: 1.0

AS desired: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'storm(1,"mumbai")', 'storm(2,"storm")', 'storm(3,"white")', 'select(1)', 'select(3)']]
\AS obtained: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'storm(1,"mumbai")', 'storm(2,"storm")', 'storm(3,"white")', 'select(1)', 'select(3)']]


575
numeric_filtering

question: 
Compose an ASP program to fetch values associated with the predicate "moscow" with a value different than 48.

answer from file: 
select(X):-moscow(X,C),C!=48.

parsed from model: 
select(X):-moscow(X,C),C!=48.

facts: 
moscow(1..3, 1..100).

generated: 
Compose an ASP program to fetch values associated with the predicate "moscow" with a value different than 48.
Answer: select(X):-moscow(X,C),C!=48.
moscow(X,C):-moscow(X,C),C==48.

unique_rules: 
['select(X):-moscow(X,C),C!=48.', 'moscow(X,C):-moscow(X,C),C==48.']

jaccard: 1.0

AS desired: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(1,5)', 'moscow(1,6)', 'moscow(1,7)', 'moscow(1,8)', 'moscow(1,9)', 'moscow(1,10)', 'moscow(1,11)', 'moscow(1,12)', 'moscow(1,13)', 'moscow(1,14)', 'moscow(1,15)', 'moscow(1,16)', 'moscow(1,17)', 'moscow(1,18)', 'moscow(1,19)', 'moscow(1,20)', 'moscow(1,21)', 'moscow(1,22)', 'moscow(1,23)', 'moscow(1,24)', 'moscow(1,25)', 'moscow(1,26)', 'moscow(1,27)', 'moscow(1,28)', 'moscow(1,29)', 'moscow(1,30)', 'moscow(1,31)', 'moscow(1,32)', 'moscow(1,33)', 'moscow(1,34)', 'moscow(1,35)', 'moscow(1,36)', 'moscow(1,37)', 'moscow(1,38)', 'moscow(1,39)', 'moscow(1,40)', 'moscow(1,41)', 'moscow(1,42)', 'moscow(1,43)', 'moscow(1,44)', 'moscow(1,45)', 'moscow(1,46)', 'moscow(1,47)', 'moscow(1,48)', 'moscow(1,49)', 'moscow(1,50)', 'moscow(1,51)', 'moscow(1,52)', 'moscow(1,53)', 'moscow(1,54)', 'moscow(1,55)', 'moscow(1,56)', 'moscow(1,57)', 'moscow(1,58)', 'moscow(1,59)', 'moscow(1,60)', 'moscow(1,61)', 'moscow(1,62)', 'moscow(1,63)', 'moscow(1,64)', 'moscow(1,65)', 'moscow(1,66)', 'moscow(1,67)', 'moscow(1,68)', 'moscow(1,69)', 'moscow(1,70)', 'moscow(1,71)', 'moscow(1,72)', 'moscow(1,73)', 'moscow(1,74)', 'moscow(1,75)', 'moscow(1,76)', 'moscow(1,77)', 'moscow(1,78)', 'moscow(1,79)', 'moscow(1,80)', 'moscow(1,81)', 'moscow(1,82)', 'moscow(1,83)', 'moscow(1,84)', 'moscow(1,85)', 'moscow(1,86)', 'moscow(1,87)', 'moscow(1,88)', 'moscow(1,89)', 'moscow(1,90)', 'moscow(1,91)', 'moscow(1,92)', 'moscow(1,93)', 'moscow(1,94)', 'moscow(1,95)', 'moscow(1,96)', 'moscow(1,97)', 'moscow(1,98)', 'moscow(1,99)', 'moscow(1,100)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(2,5)', 'moscow(2,6)', 'moscow(2,7)', 'moscow(2,8)', 'moscow(2,9)', 'moscow(2,10)', 'moscow(2,11)', 'moscow(2,12)', 'moscow(2,13)', 'moscow(2,14)', 'moscow(2,15)', 'moscow(2,16)', 'moscow(2,17)', 'moscow(2,18)', 'moscow(2,19)', 'moscow(2,20)', 'moscow(2,21)', 'moscow(2,22)', 'moscow(2,23)', 'moscow(2,24)', 'moscow(2,25)', 'moscow(2,26)', 'moscow(2,27)', 'moscow(2,28)', 'moscow(2,29)', 'moscow(2,30)', 'moscow(2,31)', 'moscow(2,32)', 'moscow(2,33)', 'moscow(2,34)', 'moscow(2,35)', 'moscow(2,36)', 'moscow(2,37)', 'moscow(2,38)', 'moscow(2,39)', 'moscow(2,40)', 'moscow(2,41)', 'moscow(2,42)', 'moscow(2,43)', 'moscow(2,44)', 'moscow(2,45)', 'moscow(2,46)', 'moscow(2,47)', 'moscow(2,48)', 'moscow(2,49)', 'moscow(2,50)', 'moscow(2,51)', 'moscow(2,52)', 'moscow(2,53)', 'moscow(2,54)', 'moscow(2,55)', 'moscow(2,56)', 'moscow(2,57)', 'moscow(2,58)', 'moscow(2,59)', 'moscow(2,60)', 'moscow(2,61)', 'moscow(2,62)', 'moscow(2,63)', 'moscow(2,64)', 'moscow(2,65)', 'moscow(2,66)', 'moscow(2,67)', 'moscow(2,68)', 'moscow(2,69)', 'moscow(2,70)', 'moscow(2,71)', 'moscow(2,72)', 'moscow(2,73)', 'moscow(2,74)', 'moscow(2,75)', 'moscow(2,76)', 'moscow(2,77)', 'moscow(2,78)', 'moscow(2,79)', 'moscow(2,80)', 'moscow(2,81)', 'moscow(2,82)', 'moscow(2,83)', 'moscow(2,84)', 'moscow(2,85)', 'moscow(2,86)', 'moscow(2,87)', 'moscow(2,88)', 'moscow(2,89)', 'moscow(2,90)', 'moscow(2,91)', 'moscow(2,92)', 'moscow(2,93)', 'moscow(2,94)', 'moscow(2,95)', 'moscow(2,96)', 'moscow(2,97)', 'moscow(2,98)', 'moscow(2,99)', 'moscow(2,100)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)', 'moscow(3,5)', 'moscow(3,6)', 'moscow(3,7)', 'moscow(3,8)', 'moscow(3,9)', 'moscow(3,10)', 'moscow(3,11)', 'moscow(3,12)', 'moscow(3,13)', 'moscow(3,14)', 'moscow(3,15)', 'moscow(3,16)', 'moscow(3,17)', 'moscow(3,18)', 'moscow(3,19)', 'moscow(3,20)', 'moscow(3,21)', 'moscow(3,22)', 'moscow(3,23)', 'moscow(3,24)', 'moscow(3,25)', 'moscow(3,26)', 'moscow(3,27)', 'moscow(3,28)', 'moscow(3,29)', 'moscow(3,30)', 'moscow(3,31)', 'moscow(3,32)', 'moscow(3,33)', 'moscow(3,34)', 'moscow(3,35)', 'moscow(3,36)', 'moscow(3,37)', 'moscow(3,38)', 'moscow(3,39)', 'moscow(3,40)', 'moscow(3,41)', 'moscow(3,42)', 'moscow(3,43)', 'moscow(3,44)', 'moscow(3,45)', 'moscow(3,46)', 'moscow(3,47)', 'moscow(3,48)', 'moscow(3,49)', 'moscow(3,50)', 'moscow(3,51)', 'moscow(3,52)', 'moscow(3,53)', 'moscow(3,54)', 'moscow(3,55)', 'moscow(3,56)', 'moscow(3,57)', 'moscow(3,58)', 'moscow(3,59)', 'moscow(3,60)', 'moscow(3,61)', 'moscow(3,62)', 'moscow(3,63)', 'moscow(3,64)', 'moscow(3,65)', 'moscow(3,66)', 'moscow(3,67)', 'moscow(3,68)', 'moscow(3,69)', 'moscow(3,70)', 'moscow(3,71)', 'moscow(3,72)', 'moscow(3,73)', 'moscow(3,74)', 'moscow(3,75)', 'moscow(3,76)', 'moscow(3,77)', 'moscow(3,78)', 'moscow(3,79)', 'moscow(3,80)', 'moscow(3,81)', 'moscow(3,82)', 'moscow(3,83)', 'moscow(3,84)', 'moscow(3,85)', 'moscow(3,86)', 'moscow(3,87)', 'moscow(3,88)', 'moscow(3,89)', 'moscow(3,90)', 'moscow(3,91)', 'moscow(3,92)', 'moscow(3,93)', 'moscow(3,94)', 'moscow(3,95)', 'moscow(3,96)', 'moscow(3,97)', 'moscow(3,98)', 'moscow(3,99)', 'moscow(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(1,5)', 'moscow(1,6)', 'moscow(1,7)', 'moscow(1,8)', 'moscow(1,9)', 'moscow(1,10)', 'moscow(1,11)', 'moscow(1,12)', 'moscow(1,13)', 'moscow(1,14)', 'moscow(1,15)', 'moscow(1,16)', 'moscow(1,17)', 'moscow(1,18)', 'moscow(1,19)', 'moscow(1,20)', 'moscow(1,21)', 'moscow(1,22)', 'moscow(1,23)', 'moscow(1,24)', 'moscow(1,25)', 'moscow(1,26)', 'moscow(1,27)', 'moscow(1,28)', 'moscow(1,29)', 'moscow(1,30)', 'moscow(1,31)', 'moscow(1,32)', 'moscow(1,33)', 'moscow(1,34)', 'moscow(1,35)', 'moscow(1,36)', 'moscow(1,37)', 'moscow(1,38)', 'moscow(1,39)', 'moscow(1,40)', 'moscow(1,41)', 'moscow(1,42)', 'moscow(1,43)', 'moscow(1,44)', 'moscow(1,45)', 'moscow(1,46)', 'moscow(1,47)', 'moscow(1,48)', 'moscow(1,49)', 'moscow(1,50)', 'moscow(1,51)', 'moscow(1,52)', 'moscow(1,53)', 'moscow(1,54)', 'moscow(1,55)', 'moscow(1,56)', 'moscow(1,57)', 'moscow(1,58)', 'moscow(1,59)', 'moscow(1,60)', 'moscow(1,61)', 'moscow(1,62)', 'moscow(1,63)', 'moscow(1,64)', 'moscow(1,65)', 'moscow(1,66)', 'moscow(1,67)', 'moscow(1,68)', 'moscow(1,69)', 'moscow(1,70)', 'moscow(1,71)', 'moscow(1,72)', 'moscow(1,73)', 'moscow(1,74)', 'moscow(1,75)', 'moscow(1,76)', 'moscow(1,77)', 'moscow(1,78)', 'moscow(1,79)', 'moscow(1,80)', 'moscow(1,81)', 'moscow(1,82)', 'moscow(1,83)', 'moscow(1,84)', 'moscow(1,85)', 'moscow(1,86)', 'moscow(1,87)', 'moscow(1,88)', 'moscow(1,89)', 'moscow(1,90)', 'moscow(1,91)', 'moscow(1,92)', 'moscow(1,93)', 'moscow(1,94)', 'moscow(1,95)', 'moscow(1,96)', 'moscow(1,97)', 'moscow(1,98)', 'moscow(1,99)', 'moscow(1,100)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(2,5)', 'moscow(2,6)', 'moscow(2,7)', 'moscow(2,8)', 'moscow(2,9)', 'moscow(2,10)', 'moscow(2,11)', 'moscow(2,12)', 'moscow(2,13)', 'moscow(2,14)', 'moscow(2,15)', 'moscow(2,16)', 'moscow(2,17)', 'moscow(2,18)', 'moscow(2,19)', 'moscow(2,20)', 'moscow(2,21)', 'moscow(2,22)', 'moscow(2,23)', 'moscow(2,24)', 'moscow(2,25)', 'moscow(2,26)', 'moscow(2,27)', 'moscow(2,28)', 'moscow(2,29)', 'moscow(2,30)', 'moscow(2,31)', 'moscow(2,32)', 'moscow(2,33)', 'moscow(2,34)', 'moscow(2,35)', 'moscow(2,36)', 'moscow(2,37)', 'moscow(2,38)', 'moscow(2,39)', 'moscow(2,40)', 'moscow(2,41)', 'moscow(2,42)', 'moscow(2,43)', 'moscow(2,44)', 'moscow(2,45)', 'moscow(2,46)', 'moscow(2,47)', 'moscow(2,48)', 'moscow(2,49)', 'moscow(2,50)', 'moscow(2,51)', 'moscow(2,52)', 'moscow(2,53)', 'moscow(2,54)', 'moscow(2,55)', 'moscow(2,56)', 'moscow(2,57)', 'moscow(2,58)', 'moscow(2,59)', 'moscow(2,60)', 'moscow(2,61)', 'moscow(2,62)', 'moscow(2,63)', 'moscow(2,64)', 'moscow(2,65)', 'moscow(2,66)', 'moscow(2,67)', 'moscow(2,68)', 'moscow(2,69)', 'moscow(2,70)', 'moscow(2,71)', 'moscow(2,72)', 'moscow(2,73)', 'moscow(2,74)', 'moscow(2,75)', 'moscow(2,76)', 'moscow(2,77)', 'moscow(2,78)', 'moscow(2,79)', 'moscow(2,80)', 'moscow(2,81)', 'moscow(2,82)', 'moscow(2,83)', 'moscow(2,84)', 'moscow(2,85)', 'moscow(2,86)', 'moscow(2,87)', 'moscow(2,88)', 'moscow(2,89)', 'moscow(2,90)', 'moscow(2,91)', 'moscow(2,92)', 'moscow(2,93)', 'moscow(2,94)', 'moscow(2,95)', 'moscow(2,96)', 'moscow(2,97)', 'moscow(2,98)', 'moscow(2,99)', 'moscow(2,100)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)', 'moscow(3,5)', 'moscow(3,6)', 'moscow(3,7)', 'moscow(3,8)', 'moscow(3,9)', 'moscow(3,10)', 'moscow(3,11)', 'moscow(3,12)', 'moscow(3,13)', 'moscow(3,14)', 'moscow(3,15)', 'moscow(3,16)', 'moscow(3,17)', 'moscow(3,18)', 'moscow(3,19)', 'moscow(3,20)', 'moscow(3,21)', 'moscow(3,22)', 'moscow(3,23)', 'moscow(3,24)', 'moscow(3,25)', 'moscow(3,26)', 'moscow(3,27)', 'moscow(3,28)', 'moscow(3,29)', 'moscow(3,30)', 'moscow(3,31)', 'moscow(3,32)', 'moscow(3,33)', 'moscow(3,34)', 'moscow(3,35)', 'moscow(3,36)', 'moscow(3,37)', 'moscow(3,38)', 'moscow(3,39)', 'moscow(3,40)', 'moscow(3,41)', 'moscow(3,42)', 'moscow(3,43)', 'moscow(3,44)', 'moscow(3,45)', 'moscow(3,46)', 'moscow(3,47)', 'moscow(3,48)', 'moscow(3,49)', 'moscow(3,50)', 'moscow(3,51)', 'moscow(3,52)', 'moscow(3,53)', 'moscow(3,54)', 'moscow(3,55)', 'moscow(3,56)', 'moscow(3,57)', 'moscow(3,58)', 'moscow(3,59)', 'moscow(3,60)', 'moscow(3,61)', 'moscow(3,62)', 'moscow(3,63)', 'moscow(3,64)', 'moscow(3,65)', 'moscow(3,66)', 'moscow(3,67)', 'moscow(3,68)', 'moscow(3,69)', 'moscow(3,70)', 'moscow(3,71)', 'moscow(3,72)', 'moscow(3,73)', 'moscow(3,74)', 'moscow(3,75)', 'moscow(3,76)', 'moscow(3,77)', 'moscow(3,78)', 'moscow(3,79)', 'moscow(3,80)', 'moscow(3,81)', 'moscow(3,82)', 'moscow(3,83)', 'moscow(3,84)', 'moscow(3,85)', 'moscow(3,86)', 'moscow(3,87)', 'moscow(3,88)', 'moscow(3,89)', 'moscow(3,90)', 'moscow(3,91)', 'moscow(3,92)', 'moscow(3,93)', 'moscow(3,94)', 'moscow(3,95)', 'moscow(3,96)', 'moscow(3,97)', 'moscow(3,98)', 'moscow(3,99)', 'moscow(3,100)', 'select(1)', 'select(2)', 'select(3)']]


576
assignment

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate singapore. The labels are "chair","storm","lake","black","white".

answer from file: 
assign(X,"chair")|assign(X,"storm")|assign(X,"lake")|assign(X,"black")|assign(X,"white"):-singapore(X).

parsed from model: 
assign(X,"chair")|assign(X,"storm")|assign(X,"lake")|assign(X,"black")|assign(X,"white"):- arrivant(X).

facts: 
singapore(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate singapore. The labels are "chair","storm","lake","black","white".
Answer: assign(X,"chair")|assign(X,"storm")|assign(X,"lake")|assign(X,"black")|assign(X,"white"):- arrivant(X).
assign(X,"chair"):-dubai(X).
assign(X,"storm"):-dubai(X).
assign(X,"lake"):-dubai(X).
assign(X,"black"):-dubai(X).
assign(X,"white"):-dubai(X).
where DUBBI(X) means that the predicate "dubai" with value "X" has the label "table".
The predicate " arrivant" has fields "ID","height","city","name","author","description","city","

unique_rules: 
['assign(X,"chair")|assign(X,"storm")|assign(X,"lake")|assign(X,"black")|assign(X,"white"):- arrivant(X).', 'assign(X,"chair"):-dubai(X).', 'assign(X,"storm"):-dubai(X).', 'assign(X,"lake"):-dubai(X).', 'assign(X,"black"):-dubai(X).', 'assign(X,"white"):-dubai(X).']

jaccard: 0.0

AS desired: [['singapore(1)', 'singapore(2)', 'singapore(3)', 'singapore(4)', 'singapore(5)', 'assign(1,"white")', 'assign(2,"white")', 'assign(3,"white")', 'assign(4,"white")', 'assign(5,"white")']]
\AS obtained: [['singapore(1)', 'singapore(2)', 'singapore(3)', 'singapore(4)', 'singapore(5)']]


577
constraint

question: 
Create an ASP code snippet to ensure the "cairo" predicate with a value of 10 is not linked to the label "laptop".

answer from file: 
:-assign(10,laptop).

parsed from model: 
:-assign(10,laptop).

facts: 
cairo(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-cairo(X).

generated: 
Create an ASP code snippet to ensure the "cairo" predicate with a value of 10 is not linked to the label "laptop".
Answer: :-assign(10,laptop).
Explanation: The predicate "city" includes a "city" label for the "shangai" value, and the predicate "shangai" contains a "city" label for the "height" value. If the "city" label is assigned to the "height" value, it violates the "city" label constraint.

unique_rules: 
[':-assign(10,laptop).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'cairo(1)', 'cairo(2)', 'cairo(3)', 'cairo(4)', 'cairo(5)', 'cairo(6)', 'cairo(7)', 'cairo(8)', 'cairo(9)', 'cairo(10)', 'cairo(11)', 'cairo(12)', 'cairo(13)', 'cairo(14)', 'cairo(15)', 'cairo(16)', 'cairo(17)', 'cairo(18)', 'cairo(19)', 'cairo(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'cairo(1)', 'cairo(2)', 'cairo(3)', 'cairo(4)', 'cairo(5)', 'cairo(6)', 'cairo(7)', 'cairo(8)', 'cairo(9)', 'cairo(10)', 'cairo(11)', 'cairo(12)', 'cairo(13)', 'cairo(14)', 'cairo(15)', 'cairo(16)', 'cairo(17)', 'cairo(18)', 'cairo(19)', 'cairo(20)']]


578
combination

question: 
Develop an ASP code snippet to produce all valid combinations of elements from the "lightblue" and "lake" sets.

answer from file: 
combination(X,Y):-lightblue(X),lake(Y).

parsed from model: 
combination(X,Y):-lightblue(X),lake(Y).

facts: 
lightblue(1..4).lake(1..5).

generated: 
Develop an ASP code snippet to produce all valid combinations of elements from the "lightblue" and "lake" sets.
Answer: combination(X,Y):-lightblue(X),lake(Y).
combination(X,Y):-lightblue(X),not lake(Y).
combination(X,Y):-not lightblue(X),lake(Y).

unique_rules: 
['combination(X,Y):-lightblue(X),lake(Y).', 'combination(X,Y):-lightblue(X),not lake(Y).', 'combination(X,Y):-not lightblue(X),lake(Y).']

jaccard: 1.0

AS desired: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'lightblue(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'lightblue(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


579
join

question: 
Develop an ASP solution that defines the predicate "lake_storm" to link each lake to the surname of storm, with "lake" having fields "ID","stormID","owner","weight","lake" and "storm" having fields "ID","surname","owner".

answer from file: 
lake_storm(X,Z):-lake(X,Y,_,_,_),storm(Y,Z,_).

parsed from model: 
lake_storm(X,Z):-lake(X,Y,_,_,_),storm(Y,Z,_).

facts: 
lake("ID","stormID","owner","weight","lake").storm("ID","surname","owner").

generated: 
Develop an ASP solution that defines the predicate "lake_storm" to link each lake to the surname of storm, with "lake" having fields "ID","stormID","owner","weight","lake" and "storm" having fields "ID","surname","owner". Define the predicate "lake_storm" that links each lake to the surname of storm.
Answer: lake_storm(X,Z):-lake(X,Y,_,_,_),storm(Y,Z,_).
lake_storm(X,Z):-lake(X,Y,_,_,Z),storm(Y,_,Z).

unique_rules: 
['lake_storm(X,Z):-lake(X,Y,_,_,_),storm(Y,Z,_).', 'lake_storm(X,Z):-lake(X,Y,_,_,Z),storm(Y,_,Z).']

jaccard: 1.0

AS desired: [['lake("ID","stormID","owner","weight","lake")', 'storm("ID","surname","owner")']]
\AS obtained: [['lake("ID","stormID","owner","weight","lake")', 'storm("ID","surname","owner")']]


580
closure

question: 
Create an ASP solution that establishes the transitive closure of the "moscow" predicate, defined as "loops".

answer from file: 
loops(X,Y):-moscow(X,Y).
loops(X,Y):-moscow(X,Z),loops(Z,Y).

parsed from model: 


facts: 
moscow(1..3, 1..4).

generated: 
Create an ASP solution that establishes the transitive closure of the "moscow" predicate, defined as "loops".
Answer: closure(loops)
closure(loops) = {X|X∈loops}.
closure(loops) = loops.
closure(loops) = union(closure(X),closure(Y))|X,Y∈loops.
closure(loops) = union(loops,city(X,Y))|X,Y∈loops.
city(X,Y) = {X|X,Y∈loops}.

unique_rules: 
[]

jaccard: 0.0

AS desired: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]
\AS obtained: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)']]


581
preference

question: 
Craft an ASP solution to prevent the linking of the "quality" predicate with value "5" to "quality". Any link incurs a cost of "1" at level "1".

answer from file: 
:~assign(5,"quality").[1@1]

parsed from model: 
:~assign(5,"quality").[1@1]

facts: 
quality(1..20).

generated: 
Craft an ASP solution to prevent the linking of the "quality" predicate with value "5" to "quality". Any link incurs a cost of "1" at level "1".
Answer: :~assign(5,"quality").[1@1]
Explanation: The predicate "quality" includes a link with a cost of "1" at level "1". The predicate "city" includes a link with the same cost and level. The predicate "bike" includes a link with the same cost and level as the predicate "city". The predicate "price" includes a link with the same cost and level as the predicate "bike". The predicate "author" includes a link with the same cost and level as the predicate "price".
The predicate "city" links the "quality" predicate with the "price" predicate. The predicate "bike" links the "quality" predicate with the "author" predicate

unique_rules: 
[':~assign(5,"quality").[1@1]']

jaccard: 1.0

AS desired: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'quality(6)', 'quality(7)', 'quality(8)', 'quality(9)', 'quality(10)', 'quality(11)', 'quality(12)', 'quality(13)', 'quality(14)', 'quality(15)', 'quality(16)', 'quality(17)', 'quality(18)', 'quality(19)', 'quality(20)']]
\AS obtained: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'quality(6)', 'quality(7)', 'quality(8)', 'quality(9)', 'quality(10)', 'quality(11)', 'quality(12)', 'quality(13)', 'quality(14)', 'quality(15)', 'quality(16)', 'quality(17)', 'quality(18)', 'quality(19)', 'quality(20)']]


582
filtering

question: 
Write an ASP script to collect values associated with the "surname" label from the "strength" predicate.

answer from file: 
select(X):-strength(X,"surname").

parsed from model: 
select(X):-strength(X,"description").

facts: 
strength(1..5, "surname").

generated: 
Write an ASP script to collect values associated with the "surname" label from the "strength" predicate.
Answer: select(X):-strength(X,"description").
select(X):-strength(X,"author").
select(X):-strength(X,"description","author").
strength(X,"description").
strength(X,"author").
strength(X,"description","author").

unique_rules: 
['select(X):-strength(X,"description").', 'select(X):-strength(X,"author").', 'select(X):-strength(X,"description","author").']

jaccard: 0.0

AS desired: [['strength(1,"surname")', 'strength(2,"surname")', 'strength(3,"surname")', 'strength(4,"surname")', 'strength(5,"surname")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['strength(1,"surname")', 'strength(2,"surname")', 'strength(3,"surname")', 'strength(4,"surname")', 'strength(5,"surname")']]


583
negative_filtering

question: 
Develop an ASP script to collect values tied to the predicate "flower" but not linked to the predicate "owner" and labeled "butterfly".

answer from file: 
select(X):-flower(X),not owner(X,"butterfly").

parsed from model: 
select(X):-flower(X),not owner(X,"butterfly").

facts: 
flower(1..3).owner(1,"surname").owner(2,"quality").owner(3,"black").

generated: 
Develop an ASP script to collect values tied to the predicate "flower" but not linked to the predicate "owner" and labeled "butterfly".
Answer: select(X):-flower(X),not owner(X,"butterfly").

unique_rules: 
['select(X):-flower(X),not owner(X,"butterfly").']

jaccard: 1.0

AS desired: [['flower(1)', 'flower(2)', 'flower(3)', 'owner(1,"surname")', 'owner(2,"quality")', 'owner(3,"black")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['flower(1)', 'flower(2)', 'flower(3)', 'owner(1,"surname")', 'owner(2,"quality")', 'owner(3,"black")', 'select(1)', 'select(2)', 'select(3)']]


584
numeric_filtering

question: 
Produce an ASP script to retrieve values associated with the predicate "flower" with a value different than 47.

answer from file: 
select(X):-flower(X,C),C!=47.

parsed from model: 
select(X):-flower(X,C),C!=47.

facts: 
flower(1..3, 1..100).

generated: 
Produce an ASP script to retrieve values associated with the predicate "flower" with a value different than 47.
Answer: select(X):-flower(X,C),C!=47.
select(X):-flower(X,C),C==47.

unique_rules: 
['select(X):-flower(X,C),C!=47.', 'select(X):-flower(X,C),C==47.']

jaccard: 1.0

AS desired: [['flower(1,1)', 'flower(1,2)', 'flower(1,3)', 'flower(1,4)', 'flower(1,5)', 'flower(1,6)', 'flower(1,7)', 'flower(1,8)', 'flower(1,9)', 'flower(1,10)', 'flower(1,11)', 'flower(1,12)', 'flower(1,13)', 'flower(1,14)', 'flower(1,15)', 'flower(1,16)', 'flower(1,17)', 'flower(1,18)', 'flower(1,19)', 'flower(1,20)', 'flower(1,21)', 'flower(1,22)', 'flower(1,23)', 'flower(1,24)', 'flower(1,25)', 'flower(1,26)', 'flower(1,27)', 'flower(1,28)', 'flower(1,29)', 'flower(1,30)', 'flower(1,31)', 'flower(1,32)', 'flower(1,33)', 'flower(1,34)', 'flower(1,35)', 'flower(1,36)', 'flower(1,37)', 'flower(1,38)', 'flower(1,39)', 'flower(1,40)', 'flower(1,41)', 'flower(1,42)', 'flower(1,43)', 'flower(1,44)', 'flower(1,45)', 'flower(1,46)', 'flower(1,47)', 'flower(1,48)', 'flower(1,49)', 'flower(1,50)', 'flower(1,51)', 'flower(1,52)', 'flower(1,53)', 'flower(1,54)', 'flower(1,55)', 'flower(1,56)', 'flower(1,57)', 'flower(1,58)', 'flower(1,59)', 'flower(1,60)', 'flower(1,61)', 'flower(1,62)', 'flower(1,63)', 'flower(1,64)', 'flower(1,65)', 'flower(1,66)', 'flower(1,67)', 'flower(1,68)', 'flower(1,69)', 'flower(1,70)', 'flower(1,71)', 'flower(1,72)', 'flower(1,73)', 'flower(1,74)', 'flower(1,75)', 'flower(1,76)', 'flower(1,77)', 'flower(1,78)', 'flower(1,79)', 'flower(1,80)', 'flower(1,81)', 'flower(1,82)', 'flower(1,83)', 'flower(1,84)', 'flower(1,85)', 'flower(1,86)', 'flower(1,87)', 'flower(1,88)', 'flower(1,89)', 'flower(1,90)', 'flower(1,91)', 'flower(1,92)', 'flower(1,93)', 'flower(1,94)', 'flower(1,95)', 'flower(1,96)', 'flower(1,97)', 'flower(1,98)', 'flower(1,99)', 'flower(1,100)', 'flower(2,1)', 'flower(2,2)', 'flower(2,3)', 'flower(2,4)', 'flower(2,5)', 'flower(2,6)', 'flower(2,7)', 'flower(2,8)', 'flower(2,9)', 'flower(2,10)', 'flower(2,11)', 'flower(2,12)', 'flower(2,13)', 'flower(2,14)', 'flower(2,15)', 'flower(2,16)', 'flower(2,17)', 'flower(2,18)', 'flower(2,19)', 'flower(2,20)', 'flower(2,21)', 'flower(2,22)', 'flower(2,23)', 'flower(2,24)', 'flower(2,25)', 'flower(2,26)', 'flower(2,27)', 'flower(2,28)', 'flower(2,29)', 'flower(2,30)', 'flower(2,31)', 'flower(2,32)', 'flower(2,33)', 'flower(2,34)', 'flower(2,35)', 'flower(2,36)', 'flower(2,37)', 'flower(2,38)', 'flower(2,39)', 'flower(2,40)', 'flower(2,41)', 'flower(2,42)', 'flower(2,43)', 'flower(2,44)', 'flower(2,45)', 'flower(2,46)', 'flower(2,47)', 'flower(2,48)', 'flower(2,49)', 'flower(2,50)', 'flower(2,51)', 'flower(2,52)', 'flower(2,53)', 'flower(2,54)', 'flower(2,55)', 'flower(2,56)', 'flower(2,57)', 'flower(2,58)', 'flower(2,59)', 'flower(2,60)', 'flower(2,61)', 'flower(2,62)', 'flower(2,63)', 'flower(2,64)', 'flower(2,65)', 'flower(2,66)', 'flower(2,67)', 'flower(2,68)', 'flower(2,69)', 'flower(2,70)', 'flower(2,71)', 'flower(2,72)', 'flower(2,73)', 'flower(2,74)', 'flower(2,75)', 'flower(2,76)', 'flower(2,77)', 'flower(2,78)', 'flower(2,79)', 'flower(2,80)', 'flower(2,81)', 'flower(2,82)', 'flower(2,83)', 'flower(2,84)', 'flower(2,85)', 'flower(2,86)', 'flower(2,87)', 'flower(2,88)', 'flower(2,89)', 'flower(2,90)', 'flower(2,91)', 'flower(2,92)', 'flower(2,93)', 'flower(2,94)', 'flower(2,95)', 'flower(2,96)', 'flower(2,97)', 'flower(2,98)', 'flower(2,99)', 'flower(2,100)', 'flower(3,1)', 'flower(3,2)', 'flower(3,3)', 'flower(3,4)', 'flower(3,5)', 'flower(3,6)', 'flower(3,7)', 'flower(3,8)', 'flower(3,9)', 'flower(3,10)', 'flower(3,11)', 'flower(3,12)', 'flower(3,13)', 'flower(3,14)', 'flower(3,15)', 'flower(3,16)', 'flower(3,17)', 'flower(3,18)', 'flower(3,19)', 'flower(3,20)', 'flower(3,21)', 'flower(3,22)', 'flower(3,23)', 'flower(3,24)', 'flower(3,25)', 'flower(3,26)', 'flower(3,27)', 'flower(3,28)', 'flower(3,29)', 'flower(3,30)', 'flower(3,31)', 'flower(3,32)', 'flower(3,33)', 'flower(3,34)', 'flower(3,35)', 'flower(3,36)', 'flower(3,37)', 'flower(3,38)', 'flower(3,39)', 'flower(3,40)', 'flower(3,41)', 'flower(3,42)', 'flower(3,43)', 'flower(3,44)', 'flower(3,45)', 'flower(3,46)', 'flower(3,47)', 'flower(3,48)', 'flower(3,49)', 'flower(3,50)', 'flower(3,51)', 'flower(3,52)', 'flower(3,53)', 'flower(3,54)', 'flower(3,55)', 'flower(3,56)', 'flower(3,57)', 'flower(3,58)', 'flower(3,59)', 'flower(3,60)', 'flower(3,61)', 'flower(3,62)', 'flower(3,63)', 'flower(3,64)', 'flower(3,65)', 'flower(3,66)', 'flower(3,67)', 'flower(3,68)', 'flower(3,69)', 'flower(3,70)', 'flower(3,71)', 'flower(3,72)', 'flower(3,73)', 'flower(3,74)', 'flower(3,75)', 'flower(3,76)', 'flower(3,77)', 'flower(3,78)', 'flower(3,79)', 'flower(3,80)', 'flower(3,81)', 'flower(3,82)', 'flower(3,83)', 'flower(3,84)', 'flower(3,85)', 'flower(3,86)', 'flower(3,87)', 'flower(3,88)', 'flower(3,89)', 'flower(3,90)', 'flower(3,91)', 'flower(3,92)', 'flower(3,93)', 'flower(3,94)', 'flower(3,95)', 'flower(3,96)', 'flower(3,97)', 'flower(3,98)', 'flower(3,99)', 'flower(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['flower(1,1)', 'flower(1,2)', 'flower(1,3)', 'flower(1,4)', 'flower(1,5)', 'flower(1,6)', 'flower(1,7)', 'flower(1,8)', 'flower(1,9)', 'flower(1,10)', 'flower(1,11)', 'flower(1,12)', 'flower(1,13)', 'flower(1,14)', 'flower(1,15)', 'flower(1,16)', 'flower(1,17)', 'flower(1,18)', 'flower(1,19)', 'flower(1,20)', 'flower(1,21)', 'flower(1,22)', 'flower(1,23)', 'flower(1,24)', 'flower(1,25)', 'flower(1,26)', 'flower(1,27)', 'flower(1,28)', 'flower(1,29)', 'flower(1,30)', 'flower(1,31)', 'flower(1,32)', 'flower(1,33)', 'flower(1,34)', 'flower(1,35)', 'flower(1,36)', 'flower(1,37)', 'flower(1,38)', 'flower(1,39)', 'flower(1,40)', 'flower(1,41)', 'flower(1,42)', 'flower(1,43)', 'flower(1,44)', 'flower(1,45)', 'flower(1,46)', 'flower(1,47)', 'flower(1,48)', 'flower(1,49)', 'flower(1,50)', 'flower(1,51)', 'flower(1,52)', 'flower(1,53)', 'flower(1,54)', 'flower(1,55)', 'flower(1,56)', 'flower(1,57)', 'flower(1,58)', 'flower(1,59)', 'flower(1,60)', 'flower(1,61)', 'flower(1,62)', 'flower(1,63)', 'flower(1,64)', 'flower(1,65)', 'flower(1,66)', 'flower(1,67)', 'flower(1,68)', 'flower(1,69)', 'flower(1,70)', 'flower(1,71)', 'flower(1,72)', 'flower(1,73)', 'flower(1,74)', 'flower(1,75)', 'flower(1,76)', 'flower(1,77)', 'flower(1,78)', 'flower(1,79)', 'flower(1,80)', 'flower(1,81)', 'flower(1,82)', 'flower(1,83)', 'flower(1,84)', 'flower(1,85)', 'flower(1,86)', 'flower(1,87)', 'flower(1,88)', 'flower(1,89)', 'flower(1,90)', 'flower(1,91)', 'flower(1,92)', 'flower(1,93)', 'flower(1,94)', 'flower(1,95)', 'flower(1,96)', 'flower(1,97)', 'flower(1,98)', 'flower(1,99)', 'flower(1,100)', 'flower(2,1)', 'flower(2,2)', 'flower(2,3)', 'flower(2,4)', 'flower(2,5)', 'flower(2,6)', 'flower(2,7)', 'flower(2,8)', 'flower(2,9)', 'flower(2,10)', 'flower(2,11)', 'flower(2,12)', 'flower(2,13)', 'flower(2,14)', 'flower(2,15)', 'flower(2,16)', 'flower(2,17)', 'flower(2,18)', 'flower(2,19)', 'flower(2,20)', 'flower(2,21)', 'flower(2,22)', 'flower(2,23)', 'flower(2,24)', 'flower(2,25)', 'flower(2,26)', 'flower(2,27)', 'flower(2,28)', 'flower(2,29)', 'flower(2,30)', 'flower(2,31)', 'flower(2,32)', 'flower(2,33)', 'flower(2,34)', 'flower(2,35)', 'flower(2,36)', 'flower(2,37)', 'flower(2,38)', 'flower(2,39)', 'flower(2,40)', 'flower(2,41)', 'flower(2,42)', 'flower(2,43)', 'flower(2,44)', 'flower(2,45)', 'flower(2,46)', 'flower(2,47)', 'flower(2,48)', 'flower(2,49)', 'flower(2,50)', 'flower(2,51)', 'flower(2,52)', 'flower(2,53)', 'flower(2,54)', 'flower(2,55)', 'flower(2,56)', 'flower(2,57)', 'flower(2,58)', 'flower(2,59)', 'flower(2,60)', 'flower(2,61)', 'flower(2,62)', 'flower(2,63)', 'flower(2,64)', 'flower(2,65)', 'flower(2,66)', 'flower(2,67)', 'flower(2,68)', 'flower(2,69)', 'flower(2,70)', 'flower(2,71)', 'flower(2,72)', 'flower(2,73)', 'flower(2,74)', 'flower(2,75)', 'flower(2,76)', 'flower(2,77)', 'flower(2,78)', 'flower(2,79)', 'flower(2,80)', 'flower(2,81)', 'flower(2,82)', 'flower(2,83)', 'flower(2,84)', 'flower(2,85)', 'flower(2,86)', 'flower(2,87)', 'flower(2,88)', 'flower(2,89)', 'flower(2,90)', 'flower(2,91)', 'flower(2,92)', 'flower(2,93)', 'flower(2,94)', 'flower(2,95)', 'flower(2,96)', 'flower(2,97)', 'flower(2,98)', 'flower(2,99)', 'flower(2,100)', 'flower(3,1)', 'flower(3,2)', 'flower(3,3)', 'flower(3,4)', 'flower(3,5)', 'flower(3,6)', 'flower(3,7)', 'flower(3,8)', 'flower(3,9)', 'flower(3,10)', 'flower(3,11)', 'flower(3,12)', 'flower(3,13)', 'flower(3,14)', 'flower(3,15)', 'flower(3,16)', 'flower(3,17)', 'flower(3,18)', 'flower(3,19)', 'flower(3,20)', 'flower(3,21)', 'flower(3,22)', 'flower(3,23)', 'flower(3,24)', 'flower(3,25)', 'flower(3,26)', 'flower(3,27)', 'flower(3,28)', 'flower(3,29)', 'flower(3,30)', 'flower(3,31)', 'flower(3,32)', 'flower(3,33)', 'flower(3,34)', 'flower(3,35)', 'flower(3,36)', 'flower(3,37)', 'flower(3,38)', 'flower(3,39)', 'flower(3,40)', 'flower(3,41)', 'flower(3,42)', 'flower(3,43)', 'flower(3,44)', 'flower(3,45)', 'flower(3,46)', 'flower(3,47)', 'flower(3,48)', 'flower(3,49)', 'flower(3,50)', 'flower(3,51)', 'flower(3,52)', 'flower(3,53)', 'flower(3,54)', 'flower(3,55)', 'flower(3,56)', 'flower(3,57)', 'flower(3,58)', 'flower(3,59)', 'flower(3,60)', 'flower(3,61)', 'flower(3,62)', 'flower(3,63)', 'flower(3,64)', 'flower(3,65)', 'flower(3,66)', 'flower(3,67)', 'flower(3,68)', 'flower(3,69)', 'flower(3,70)', 'flower(3,71)', 'flower(3,72)', 'flower(3,73)', 'flower(3,74)', 'flower(3,75)', 'flower(3,76)', 'flower(3,77)', 'flower(3,78)', 'flower(3,79)', 'flower(3,80)', 'flower(3,81)', 'flower(3,82)', 'flower(3,83)', 'flower(3,84)', 'flower(3,85)', 'flower(3,86)', 'flower(3,87)', 'flower(3,88)', 'flower(3,89)', 'flower(3,90)', 'flower(3,91)', 'flower(3,92)', 'flower(3,93)', 'flower(3,94)', 'flower(3,95)', 'flower(3,96)', 'flower(3,97)', 'flower(3,98)', 'flower(3,99)', 'flower(3,100)', 'select(1)', 'select(2)', 'select(3)']]


585
assignment

question: 
Compose an ASP program that maps a single label from the set "delhi","surname","moscow","quality","butterfly","chair","desk","lake" to elements determined by the predicate "owner".

answer from file: 
assign(X,"delhi")|assign(X,"surname")|assign(X,"moscow")|assign(X,"quality")|assign(X,"butterfly")|assign(X,"chair")|assign(X,"desk")|assign(X,"lake"):-owner(X).

parsed from model: 
assign(X,"delhi")|assign(X,"surname")|assign(X,"moscow")|assign(X,"quality")|assign(X,"butterfly")|assign(X,"chair")|assign(X,"desk")|assign(X,"lake"):-owner(X).

facts: 
owner(1..5).

generated: 
Compose an ASP program that maps a single label from the set "delhi","surname","moscow","quality","butterfly","chair","desk","lake" to elements determined by the predicate "owner".
Answer: assign(X,"delhi")|assign(X,"surname")|assign(X,"moscow")|assign(X,"quality")|assign(X,"butterfly")|assign(X,"chair")|assign(X,"desk")|assign(X,"lake"):-owner(X).
assign(X,"city"):-owner(X).
```
The predicate "owner" includes elements determined by the predicate "city".
The predicate "city" includes elements determined by the predicate "description".
The predicate "description" includes elements determined by the predicate "author".
The predicate "author" includes elements determined by the predicate "rome".
The predicate "rome" includes elements determined by the

unique_rules: 
['assign(X,"delhi")|assign(X,"surname")|assign(X,"moscow")|assign(X,"quality")|assign(X,"butterfly")|assign(X,"chair")|assign(X,"desk")|assign(X,"lake"):-owner(X).', 'assign(X,"city"):-owner(X).']

jaccard: 1.0

AS desired: [['owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'owner(5)', 'assign(1,"lake")', 'assign(2,"lake")', 'assign(3,"desk")', 'assign(4,"lake")', 'assign(5,"lake")']]
\AS obtained: [['owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'owner(5)', 'assign(1,"lake")', 'assign(2,"lake")', 'assign(3,"desk")', 'assign(4,"lake")', 'assign(5,"lake")']]


586
constraint

question: 
Compose an ASP solution that avoids the predicate "weight" with value 2 being mapped to the label "lake".

answer from file: 
:-assign(2,lake).

parsed from model: 
:-assign(2,lake).

facts: 
weight(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-weight(X).

generated: 
Compose an ASP solution that avoids the predicate "weight" with value 2 being mapped to the label "lake".
Answer: :-assign(2,lake).
Explanation: The predicate "weight" includes values linked to the labels "author","city","description","florence","height","moto","shangai","street","table","author","city","description","florence","height","moto","shangai","street","table","author","city","description","florence","height","moto","shangai","street","table","author","city","description","florence","height","moto","shangai","street","table","author","city","description","florence","height","moto","shangai","street","table","author","city","description","florence","height","moto","shangai","street","table","author","city","description

unique_rules: 
[':-assign(2,lake).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'weight(1)', 'weight(2)', 'weight(3)', 'weight(4)', 'weight(5)', 'weight(6)', 'weight(7)', 'weight(8)', 'weight(9)', 'weight(10)', 'weight(11)', 'weight(12)', 'weight(13)', 'weight(14)', 'weight(15)', 'weight(16)', 'weight(17)', 'weight(18)', 'weight(19)', 'weight(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'weight(1)', 'weight(2)', 'weight(3)', 'weight(4)', 'weight(5)', 'weight(6)', 'weight(7)', 'weight(8)', 'weight(9)', 'weight(10)', 'weight(11)', 'weight(12)', 'weight(13)', 'weight(14)', 'weight(15)', 'weight(16)', 'weight(17)', 'weight(18)', 'weight(19)', 'weight(20)']]


587
combination

question: 
Write an ASP application that finds all pairings of elements from the sets defined by the predicates "chicago" and "laptop".

answer from file: 
combination(X,Y):-chicago(X),laptop(Y).

parsed from model: 
combination(X,Y):-chicago(X),laptop(Y).

facts: 
chicago(1..4).laptop(1..5).

generated: 
Write an ASP application that finds all pairings of elements from the sets defined by the predicates "chicago" and "laptop".
Answer: combination(X,Y):-chicago(X),laptop(Y).
combination(X,Y):-chicago(X),not laptop(Y).
combination(X,Y):-not chicago(X),laptop(Y).

unique_rules: 
['combination(X,Y):-chicago(X),laptop(Y).', 'combination(X,Y):-chicago(X),not laptop(Y).', 'combination(X,Y):-not chicago(X),laptop(Y).']

jaccard: 1.0

AS desired: [['laptop(1)', 'laptop(2)', 'laptop(3)', 'laptop(4)', 'laptop(5)', 'chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['laptop(1)', 'laptop(2)', 'laptop(3)', 'laptop(4)', 'laptop(5)', 'chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


588
join

question: 
Compose an ASP code snippet to define the predicate "cairo_flower" linking each cairo to the owner of flower, using the fields "ID","flowerID","lake" of "cairo" and the fields "ID","owner" of "flower".

answer from file: 
cairo_flower(X,Z):-cairo(X,Y,_),flower(Y,Z).

parsed from model: 
cairo_flower(X,Z):-cairo(X,Y,_),flower(Y,Z).

facts: 
cairo("ID","flowerID","lake").flower("ID","owner").

generated: 
Compose an ASP code snippet to define the predicate "cairo_flower" linking each cairo to the owner of flower, using the fields "ID","flowerID","lake" of "cairo" and the fields "ID","owner" of "flower".
Answer: cairo_flower(X,Z):-cairo(X,Y,_),flower(Y,Z).
cairo_flower(X,Z):-cairo(X,Y,_),not flower(Y,Z).

unique_rules: 
['cairo_flower(X,Z):-cairo(X,Y,_),flower(Y,Z).', 'cairo_flower(X,Z):-cairo(X,Y,_),not flower(Y,Z).']

jaccard: 1.0

AS desired: [['flower("ID","owner")', 'cairo("ID","flowerID","lake")']]
\AS obtained: [['flower("ID","owner")', 'cairo("ID","flowerID","lake")']]


589
closure

question: 
Design an ASP code to link the predicate "barcelona" to its transitive closure, defined as "journey".

answer from file: 
journey(X,Y):-barcelona(X,Y).
journey(X,Y):-barcelona(X,Z),journey(Z,Y).

parsed from model: 
journey(X,Y):-barcelona(X,Y).
journey(X,Y):-barcelona(X,Z),journey(Z,Y).

facts: 
barcelona(1..3, 1..4).

generated: 
Design an ASP code to link the predicate "barcelona" to its transitive closure, defined as "journey".
Answer: journey(X,Y):-barcelona(X,Y).
journey(X,Y):-barcelona(X,Z),journey(Z,Y).
journey(X,Y):-london(X,Y).
london(X,Y):-city(X,Y).
london(X,Y):-moto(X,Y).
moto(X,Y):-city(X,Y).
moto(X,Y):-dubai(X,Y).
dubai(X,Y):-city(X,Y).

unique_rules: 
['journey(X,Y):-barcelona(X,Y).', 'journey(X,Y):-barcelona(X,Z),journey(Z,Y).', 'journey(X,Y):-london(X,Y).', 'london(X,Y):-city(X,Y).', 'london(X,Y):-moto(X,Y).', 'moto(X,Y):-city(X,Y).', 'moto(X,Y):-dubai(X,Y).', 'dubai(X,Y):-city(X,Y).']

jaccard: 1.0

AS desired: [['barcelona(1,1)', 'barcelona(1,2)', 'barcelona(1,3)', 'barcelona(1,4)', 'barcelona(2,1)', 'barcelona(2,2)', 'barcelona(2,3)', 'barcelona(2,4)', 'barcelona(3,1)', 'barcelona(3,2)', 'barcelona(3,3)', 'barcelona(3,4)', 'journey(1,1)', 'journey(1,2)', 'journey(1,3)', 'journey(1,4)', 'journey(2,1)', 'journey(2,2)', 'journey(2,3)', 'journey(2,4)', 'journey(3,1)', 'journey(3,2)', 'journey(3,3)', 'journey(3,4)']]
\AS obtained: [['barcelona(1,1)', 'barcelona(1,2)', 'barcelona(1,3)', 'barcelona(1,4)', 'barcelona(2,1)', 'barcelona(2,2)', 'barcelona(2,3)', 'barcelona(2,4)', 'barcelona(3,1)', 'barcelona(3,2)', 'barcelona(3,3)', 'barcelona(3,4)', 'journey(1,1)', 'journey(1,2)', 'journey(1,3)', 'journey(1,4)', 'journey(2,1)', 'journey(2,2)', 'journey(2,3)', 'journey(2,4)', 'journey(3,1)', 'journey(3,2)', 'journey(3,3)', 'journey(3,4)']]


590
preference

question: 
Compose an ASP script to ensure the "toronto" predicate with value "6" does not link to "cairo". If this connection happens, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(6,"cairo").[1@1]

parsed from model: 
:~assign(6,"cairo").[1@1]

facts: 
toronto(1..20).

generated: 
Compose an ASP script to ensure the "toronto" predicate with value "6" does not link to "cairo". If this connection happens, it incurs a cost of "1" at level "1".
Answer: :~assign(6,"cairo").[1@1]
This script uses the "assign" predicate to check the connection between the "tree" and "city" labels. If the connection is found, it incurs a cost of "1" at level "1".
The predicate "tree" includes fields "ID","city","author","name","price","description","author","city","name","price","description","author","name","city","price","description","author","city","name","price","description","author","name","city","price","description","author","name","city","price","description","author","name","city","price","description","author","name","city","price","description

unique_rules: 
[':~assign(6,"cairo").[1@1]']

jaccard: 1.0

AS desired: [['toronto(1)', 'toronto(2)', 'toronto(3)', 'toronto(4)', 'toronto(5)', 'toronto(6)', 'toronto(7)', 'toronto(8)', 'toronto(9)', 'toronto(10)', 'toronto(11)', 'toronto(12)', 'toronto(13)', 'toronto(14)', 'toronto(15)', 'toronto(16)', 'toronto(17)', 'toronto(18)', 'toronto(19)', 'toronto(20)']]
\AS obtained: [['toronto(1)', 'toronto(2)', 'toronto(3)', 'toronto(4)', 'toronto(5)', 'toronto(6)', 'toronto(7)', 'toronto(8)', 'toronto(9)', 'toronto(10)', 'toronto(11)', 'toronto(12)', 'toronto(13)', 'toronto(14)', 'toronto(15)', 'toronto(16)', 'toronto(17)', 'toronto(18)', 'toronto(19)', 'toronto(20)']]


591
filtering

question: 
Formulate an ASP application to fetch all values tied to the predicate "laptop" and labeled as "black".

answer from file: 
select(X):-laptop(X,"black").

parsed from model: 
select(X):-laptop(X,"black").

facts: 
laptop(1..5, "black").

generated: 
Formulate an ASP application to fetch all values tied to the predicate "laptop" and labeled as "black".
Answer: select(X):-laptop(X,"black").
select(X):-laptop(X,"gray").
select(X):-laptop(X,"moto").
person(X,"black").
person(X,"gray").
person(X,"moto").
```

unique_rules: 
['select(X):-laptop(X,"black").', 'select(X):-laptop(X,"gray").', 'select(X):-laptop(X,"moto").']

jaccard: 1.0

AS desired: [['laptop(1,"black")', 'laptop(2,"black")', 'laptop(3,"black")', 'laptop(4,"black")', 'laptop(5,"black")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['laptop(1,"black")', 'laptop(2,"black")', 'laptop(3,"black")', 'laptop(4,"black")', 'laptop(5,"black")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


592
negative_filtering

question: 
Formulate an ASP code to select values linked to the predicate "weight" but not associated with the predicate "black" and labeled "laptop".

answer from file: 
select(X):-weight(X),not black(X,"laptop").

parsed from model: 
select(X):-weight(X),not black(X,"laptop").

facts: 
weight(1..3).black(1,"owner").black(2,"laptop").black(3,"cosenza").

generated: 
Formulate an ASP code to select values linked to the predicate "weight" but not associated with the predicate "black" and labeled "laptop".
Answer: select(X):-weight(X),not black(X,"laptop").
Explanation:
1. **select(X):-weight(X).** This selects values linked to the predicate "weight".
2. **not black(X,"laptop").** This selects values associated with the predicate "black" but not labeled "laptop".
3. The predicate "black" has fields "ID","height","city","description","name","author","price","city","description","name","author","height","description","city","name","price","author","city","description","name","author","height","description","city","name","price","author","city","description","name","author","height","description","city

unique_rules: 
['select(X):-weight(X),not black(X,"laptop").', '1. **select(X):-weight(X).** This selects values linked to the predicate "weight".']

jaccard: 1.0

AS desired: [['weight(1)', 'weight(2)', 'weight(3)', 'black(1,"owner")', 'black(2,"laptop")', 'black(3,"cosenza")', 'select(1)', 'select(3)']]
\AS obtained: [['weight(1)', 'weight(2)', 'weight(3)', 'black(1,"owner")', 'black(2,"laptop")', 'black(3,"cosenza")', 'select(1)', 'select(3)']]


593
numeric_filtering

question: 
Create an ASP application to fetch all values tied to the predicate "storm" with a value different than 55.

answer from file: 
select(X):-storm(X,C),C!=55.

parsed from model: 
select(X):-storm(X,C),C!=55.

facts: 
storm(1..3, 1..100).

generated: 
Create an ASP application to fetch all values tied to the predicate "storm" with a value different than 55.
Answer: select(X):-storm(X,C),C!=55.
Explanation: The predicate "storm" includes elements tied to the predicate "city" with a value different than 55.
The predicate "city" contains elements tied to the predicate "author" with a value different than 55.
The predicate "author" contains elements tied to the predicate "moto" with a value different than 55.
So, the predicate "storm" includes elements tied to the predicate "city" with a value different than 55.

unique_rules: 
['select(X):-storm(X,C),C!=55.']

jaccard: 1.0

AS desired: [['storm(1,1)', 'storm(1,2)', 'storm(1,3)', 'storm(1,4)', 'storm(1,5)', 'storm(1,6)', 'storm(1,7)', 'storm(1,8)', 'storm(1,9)', 'storm(1,10)', 'storm(1,11)', 'storm(1,12)', 'storm(1,13)', 'storm(1,14)', 'storm(1,15)', 'storm(1,16)', 'storm(1,17)', 'storm(1,18)', 'storm(1,19)', 'storm(1,20)', 'storm(1,21)', 'storm(1,22)', 'storm(1,23)', 'storm(1,24)', 'storm(1,25)', 'storm(1,26)', 'storm(1,27)', 'storm(1,28)', 'storm(1,29)', 'storm(1,30)', 'storm(1,31)', 'storm(1,32)', 'storm(1,33)', 'storm(1,34)', 'storm(1,35)', 'storm(1,36)', 'storm(1,37)', 'storm(1,38)', 'storm(1,39)', 'storm(1,40)', 'storm(1,41)', 'storm(1,42)', 'storm(1,43)', 'storm(1,44)', 'storm(1,45)', 'storm(1,46)', 'storm(1,47)', 'storm(1,48)', 'storm(1,49)', 'storm(1,50)', 'storm(1,51)', 'storm(1,52)', 'storm(1,53)', 'storm(1,54)', 'storm(1,55)', 'storm(1,56)', 'storm(1,57)', 'storm(1,58)', 'storm(1,59)', 'storm(1,60)', 'storm(1,61)', 'storm(1,62)', 'storm(1,63)', 'storm(1,64)', 'storm(1,65)', 'storm(1,66)', 'storm(1,67)', 'storm(1,68)', 'storm(1,69)', 'storm(1,70)', 'storm(1,71)', 'storm(1,72)', 'storm(1,73)', 'storm(1,74)', 'storm(1,75)', 'storm(1,76)', 'storm(1,77)', 'storm(1,78)', 'storm(1,79)', 'storm(1,80)', 'storm(1,81)', 'storm(1,82)', 'storm(1,83)', 'storm(1,84)', 'storm(1,85)', 'storm(1,86)', 'storm(1,87)', 'storm(1,88)', 'storm(1,89)', 'storm(1,90)', 'storm(1,91)', 'storm(1,92)', 'storm(1,93)', 'storm(1,94)', 'storm(1,95)', 'storm(1,96)', 'storm(1,97)', 'storm(1,98)', 'storm(1,99)', 'storm(1,100)', 'storm(2,1)', 'storm(2,2)', 'storm(2,3)', 'storm(2,4)', 'storm(2,5)', 'storm(2,6)', 'storm(2,7)', 'storm(2,8)', 'storm(2,9)', 'storm(2,10)', 'storm(2,11)', 'storm(2,12)', 'storm(2,13)', 'storm(2,14)', 'storm(2,15)', 'storm(2,16)', 'storm(2,17)', 'storm(2,18)', 'storm(2,19)', 'storm(2,20)', 'storm(2,21)', 'storm(2,22)', 'storm(2,23)', 'storm(2,24)', 'storm(2,25)', 'storm(2,26)', 'storm(2,27)', 'storm(2,28)', 'storm(2,29)', 'storm(2,30)', 'storm(2,31)', 'storm(2,32)', 'storm(2,33)', 'storm(2,34)', 'storm(2,35)', 'storm(2,36)', 'storm(2,37)', 'storm(2,38)', 'storm(2,39)', 'storm(2,40)', 'storm(2,41)', 'storm(2,42)', 'storm(2,43)', 'storm(2,44)', 'storm(2,45)', 'storm(2,46)', 'storm(2,47)', 'storm(2,48)', 'storm(2,49)', 'storm(2,50)', 'storm(2,51)', 'storm(2,52)', 'storm(2,53)', 'storm(2,54)', 'storm(2,55)', 'storm(2,56)', 'storm(2,57)', 'storm(2,58)', 'storm(2,59)', 'storm(2,60)', 'storm(2,61)', 'storm(2,62)', 'storm(2,63)', 'storm(2,64)', 'storm(2,65)', 'storm(2,66)', 'storm(2,67)', 'storm(2,68)', 'storm(2,69)', 'storm(2,70)', 'storm(2,71)', 'storm(2,72)', 'storm(2,73)', 'storm(2,74)', 'storm(2,75)', 'storm(2,76)', 'storm(2,77)', 'storm(2,78)', 'storm(2,79)', 'storm(2,80)', 'storm(2,81)', 'storm(2,82)', 'storm(2,83)', 'storm(2,84)', 'storm(2,85)', 'storm(2,86)', 'storm(2,87)', 'storm(2,88)', 'storm(2,89)', 'storm(2,90)', 'storm(2,91)', 'storm(2,92)', 'storm(2,93)', 'storm(2,94)', 'storm(2,95)', 'storm(2,96)', 'storm(2,97)', 'storm(2,98)', 'storm(2,99)', 'storm(2,100)', 'storm(3,1)', 'storm(3,2)', 'storm(3,3)', 'storm(3,4)', 'storm(3,5)', 'storm(3,6)', 'storm(3,7)', 'storm(3,8)', 'storm(3,9)', 'storm(3,10)', 'storm(3,11)', 'storm(3,12)', 'storm(3,13)', 'storm(3,14)', 'storm(3,15)', 'storm(3,16)', 'storm(3,17)', 'storm(3,18)', 'storm(3,19)', 'storm(3,20)', 'storm(3,21)', 'storm(3,22)', 'storm(3,23)', 'storm(3,24)', 'storm(3,25)', 'storm(3,26)', 'storm(3,27)', 'storm(3,28)', 'storm(3,29)', 'storm(3,30)', 'storm(3,31)', 'storm(3,32)', 'storm(3,33)', 'storm(3,34)', 'storm(3,35)', 'storm(3,36)', 'storm(3,37)', 'storm(3,38)', 'storm(3,39)', 'storm(3,40)', 'storm(3,41)', 'storm(3,42)', 'storm(3,43)', 'storm(3,44)', 'storm(3,45)', 'storm(3,46)', 'storm(3,47)', 'storm(3,48)', 'storm(3,49)', 'storm(3,50)', 'storm(3,51)', 'storm(3,52)', 'storm(3,53)', 'storm(3,54)', 'storm(3,55)', 'storm(3,56)', 'storm(3,57)', 'storm(3,58)', 'storm(3,59)', 'storm(3,60)', 'storm(3,61)', 'storm(3,62)', 'storm(3,63)', 'storm(3,64)', 'storm(3,65)', 'storm(3,66)', 'storm(3,67)', 'storm(3,68)', 'storm(3,69)', 'storm(3,70)', 'storm(3,71)', 'storm(3,72)', 'storm(3,73)', 'storm(3,74)', 'storm(3,75)', 'storm(3,76)', 'storm(3,77)', 'storm(3,78)', 'storm(3,79)', 'storm(3,80)', 'storm(3,81)', 'storm(3,82)', 'storm(3,83)', 'storm(3,84)', 'storm(3,85)', 'storm(3,86)', 'storm(3,87)', 'storm(3,88)', 'storm(3,89)', 'storm(3,90)', 'storm(3,91)', 'storm(3,92)', 'storm(3,93)', 'storm(3,94)', 'storm(3,95)', 'storm(3,96)', 'storm(3,97)', 'storm(3,98)', 'storm(3,99)', 'storm(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['storm(1,1)', 'storm(1,2)', 'storm(1,3)', 'storm(1,4)', 'storm(1,5)', 'storm(1,6)', 'storm(1,7)', 'storm(1,8)', 'storm(1,9)', 'storm(1,10)', 'storm(1,11)', 'storm(1,12)', 'storm(1,13)', 'storm(1,14)', 'storm(1,15)', 'storm(1,16)', 'storm(1,17)', 'storm(1,18)', 'storm(1,19)', 'storm(1,20)', 'storm(1,21)', 'storm(1,22)', 'storm(1,23)', 'storm(1,24)', 'storm(1,25)', 'storm(1,26)', 'storm(1,27)', 'storm(1,28)', 'storm(1,29)', 'storm(1,30)', 'storm(1,31)', 'storm(1,32)', 'storm(1,33)', 'storm(1,34)', 'storm(1,35)', 'storm(1,36)', 'storm(1,37)', 'storm(1,38)', 'storm(1,39)', 'storm(1,40)', 'storm(1,41)', 'storm(1,42)', 'storm(1,43)', 'storm(1,44)', 'storm(1,45)', 'storm(1,46)', 'storm(1,47)', 'storm(1,48)', 'storm(1,49)', 'storm(1,50)', 'storm(1,51)', 'storm(1,52)', 'storm(1,53)', 'storm(1,54)', 'storm(1,55)', 'storm(1,56)', 'storm(1,57)', 'storm(1,58)', 'storm(1,59)', 'storm(1,60)', 'storm(1,61)', 'storm(1,62)', 'storm(1,63)', 'storm(1,64)', 'storm(1,65)', 'storm(1,66)', 'storm(1,67)', 'storm(1,68)', 'storm(1,69)', 'storm(1,70)', 'storm(1,71)', 'storm(1,72)', 'storm(1,73)', 'storm(1,74)', 'storm(1,75)', 'storm(1,76)', 'storm(1,77)', 'storm(1,78)', 'storm(1,79)', 'storm(1,80)', 'storm(1,81)', 'storm(1,82)', 'storm(1,83)', 'storm(1,84)', 'storm(1,85)', 'storm(1,86)', 'storm(1,87)', 'storm(1,88)', 'storm(1,89)', 'storm(1,90)', 'storm(1,91)', 'storm(1,92)', 'storm(1,93)', 'storm(1,94)', 'storm(1,95)', 'storm(1,96)', 'storm(1,97)', 'storm(1,98)', 'storm(1,99)', 'storm(1,100)', 'storm(2,1)', 'storm(2,2)', 'storm(2,3)', 'storm(2,4)', 'storm(2,5)', 'storm(2,6)', 'storm(2,7)', 'storm(2,8)', 'storm(2,9)', 'storm(2,10)', 'storm(2,11)', 'storm(2,12)', 'storm(2,13)', 'storm(2,14)', 'storm(2,15)', 'storm(2,16)', 'storm(2,17)', 'storm(2,18)', 'storm(2,19)', 'storm(2,20)', 'storm(2,21)', 'storm(2,22)', 'storm(2,23)', 'storm(2,24)', 'storm(2,25)', 'storm(2,26)', 'storm(2,27)', 'storm(2,28)', 'storm(2,29)', 'storm(2,30)', 'storm(2,31)', 'storm(2,32)', 'storm(2,33)', 'storm(2,34)', 'storm(2,35)', 'storm(2,36)', 'storm(2,37)', 'storm(2,38)', 'storm(2,39)', 'storm(2,40)', 'storm(2,41)', 'storm(2,42)', 'storm(2,43)', 'storm(2,44)', 'storm(2,45)', 'storm(2,46)', 'storm(2,47)', 'storm(2,48)', 'storm(2,49)', 'storm(2,50)', 'storm(2,51)', 'storm(2,52)', 'storm(2,53)', 'storm(2,54)', 'storm(2,55)', 'storm(2,56)', 'storm(2,57)', 'storm(2,58)', 'storm(2,59)', 'storm(2,60)', 'storm(2,61)', 'storm(2,62)', 'storm(2,63)', 'storm(2,64)', 'storm(2,65)', 'storm(2,66)', 'storm(2,67)', 'storm(2,68)', 'storm(2,69)', 'storm(2,70)', 'storm(2,71)', 'storm(2,72)', 'storm(2,73)', 'storm(2,74)', 'storm(2,75)', 'storm(2,76)', 'storm(2,77)', 'storm(2,78)', 'storm(2,79)', 'storm(2,80)', 'storm(2,81)', 'storm(2,82)', 'storm(2,83)', 'storm(2,84)', 'storm(2,85)', 'storm(2,86)', 'storm(2,87)', 'storm(2,88)', 'storm(2,89)', 'storm(2,90)', 'storm(2,91)', 'storm(2,92)', 'storm(2,93)', 'storm(2,94)', 'storm(2,95)', 'storm(2,96)', 'storm(2,97)', 'storm(2,98)', 'storm(2,99)', 'storm(2,100)', 'storm(3,1)', 'storm(3,2)', 'storm(3,3)', 'storm(3,4)', 'storm(3,5)', 'storm(3,6)', 'storm(3,7)', 'storm(3,8)', 'storm(3,9)', 'storm(3,10)', 'storm(3,11)', 'storm(3,12)', 'storm(3,13)', 'storm(3,14)', 'storm(3,15)', 'storm(3,16)', 'storm(3,17)', 'storm(3,18)', 'storm(3,19)', 'storm(3,20)', 'storm(3,21)', 'storm(3,22)', 'storm(3,23)', 'storm(3,24)', 'storm(3,25)', 'storm(3,26)', 'storm(3,27)', 'storm(3,28)', 'storm(3,29)', 'storm(3,30)', 'storm(3,31)', 'storm(3,32)', 'storm(3,33)', 'storm(3,34)', 'storm(3,35)', 'storm(3,36)', 'storm(3,37)', 'storm(3,38)', 'storm(3,39)', 'storm(3,40)', 'storm(3,41)', 'storm(3,42)', 'storm(3,43)', 'storm(3,44)', 'storm(3,45)', 'storm(3,46)', 'storm(3,47)', 'storm(3,48)', 'storm(3,49)', 'storm(3,50)', 'storm(3,51)', 'storm(3,52)', 'storm(3,53)', 'storm(3,54)', 'storm(3,55)', 'storm(3,56)', 'storm(3,57)', 'storm(3,58)', 'storm(3,59)', 'storm(3,60)', 'storm(3,61)', 'storm(3,62)', 'storm(3,63)', 'storm(3,64)', 'storm(3,65)', 'storm(3,66)', 'storm(3,67)', 'storm(3,68)', 'storm(3,69)', 'storm(3,70)', 'storm(3,71)', 'storm(3,72)', 'storm(3,73)', 'storm(3,74)', 'storm(3,75)', 'storm(3,76)', 'storm(3,77)', 'storm(3,78)', 'storm(3,79)', 'storm(3,80)', 'storm(3,81)', 'storm(3,82)', 'storm(3,83)', 'storm(3,84)', 'storm(3,85)', 'storm(3,86)', 'storm(3,87)', 'storm(3,88)', 'storm(3,89)', 'storm(3,90)', 'storm(3,91)', 'storm(3,92)', 'storm(3,93)', 'storm(3,94)', 'storm(3,95)', 'storm(3,96)', 'storm(3,97)', 'storm(3,98)', 'storm(3,99)', 'storm(3,100)', 'select(1)', 'select(2)', 'select(3)']]


594
assignment

question: 
Build an ASP code snippet to link one label from "moscow","cairo","hair","roof","cosenza","surname" to elements identified by the predicate "butterfly".

answer from file: 
assign(X,"moscow")|assign(X,"cairo")|assign(X,"hair")|assign(X,"roof")|assign(X,"cosenza")|assign(X,"surname"):-butterfly(X).

parsed from model: 
assign(X,"moscow")|assign(X,"cairo")|assign(X,"hair")|assign(X,"roof")|assign(X,"cosenza")|assign(X,"surname"):-butterfly(X).

facts: 
butterfly(1..5).

generated: 
Build an ASP code snippet to link one label from "moscow","cairo","hair","roof","cosenza","surname" to elements identified by the predicate "butterfly".
Answer: assign(X,"moscow")|assign(X,"cairo")|assign(X,"hair")|assign(X,"roof")|assign(X,"cosenza")|assign(X,"surname"):-butterfly(X).
assign(X,"city"):- arrivant(X).
```
The predicate " arrivant" defines the "city" label as the transitive closure of the "moto" predicate.
The predicate "moto" defines the "city" label as the transitive closure of the "city" predicate.
The predicate "butterfly" defines the "city" label as the transitive closure of the "moto" predicate.
The predicate "moto" defines the "city" label as the transitive closure

unique_rules: 
['assign(X,"moscow")|assign(X,"cairo")|assign(X,"hair")|assign(X,"roof")|assign(X,"cosenza")|assign(X,"surname"):-butterfly(X).', 'assign(X,"city"):- arrivant(X).']

jaccard: 1.0

AS desired: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)', 'assign(1,"surname")', 'assign(2,"surname")', 'assign(3,"surname")', 'assign(4,"surname")', 'assign(5,"surname")']]
\AS obtained: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)', 'assign(1,"surname")', 'assign(2,"surname")', 'assign(3,"surname")', 'assign(4,"surname")', 'assign(5,"surname")']]


595
constraint

question: 
Generate an ASP code to exclude linking the "strength" predicate with value 3 to the label "cloud".

answer from file: 
:-assign(3,cloud).

parsed from model: 
:-assign(3,cloud).

facts: 
strength(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-strength(X).

generated: 
Generate an ASP code to exclude linking the "strength" predicate with value 3 to the label "cloud".
Answer: :-assign(3,cloud).
Explanation: The predicate "height" includes fields "ID","city","author","name","price","description","author","city","name","description","price","height","author","city","name","description","price","height","city","name","description","price","author","city","name","description","price","height","author","city","name","description","price","height","city","name","description","price","author","city","name","description","price","height","author","city","name","description","price","height","city","name","description","price","author","city","name","description","price","height","author","city","name","description","price

unique_rules: 
[':-assign(3,cloud).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'strength(6)', 'strength(7)', 'strength(8)', 'strength(9)', 'strength(10)', 'strength(11)', 'strength(12)', 'strength(13)', 'strength(14)', 'strength(15)', 'strength(16)', 'strength(17)', 'strength(18)', 'strength(19)', 'strength(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'strength(6)', 'strength(7)', 'strength(8)', 'strength(9)', 'strength(10)', 'strength(11)', 'strength(12)', 'strength(13)', 'strength(14)', 'strength(15)', 'strength(16)', 'strength(17)', 'strength(18)', 'strength(19)', 'strength(20)']]


596
combination

question: 
Write an ASP program that computes the cross-product of elements in the sets defined by "lightblue" and "butterfly".

answer from file: 
combination(X,Y):-lightblue(X),butterfly(Y).

parsed from model: 
cross_product(X,Y):-lightblue(X),butterfly(Y).

facts: 
lightblue(1..4).butterfly(1..5).

generated: 
Write an ASP program that computes the cross-product of elements in the sets defined by "lightblue" and "butterfly".
Answer: cross_product(X,Y):-lightblue(X),butterfly(Y).
cross_product(X,Y):-lightblue(X),not butterfly(Y).
cross_product(X,Y):-not lightblue(X), felicità(Y).
cross_product(X,Y):-not lightblue(X),not amsterdam(Y).

unique_rules: 
['cross_product(X,Y):-lightblue(X),butterfly(Y).', 'cross_product(X,Y):-lightblue(X),not butterfly(Y).', 'cross_product(X,Y):-not lightblue(X), felicità(Y).', 'cross_product(X,Y):-not lightblue(X),not amsterdam(Y).']

jaccard: 0.0

AS desired: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)', 'lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'lightblue(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)', 'lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'lightblue(4)', 'cross_product(1,1)', 'cross_product(1,2)', 'cross_product(1,3)', 'cross_product(1,4)', 'cross_product(1,5)', 'cross_product(2,1)', 'cross_product(2,2)', 'cross_product(2,3)', 'cross_product(2,4)', 'cross_product(2,5)', 'cross_product(3,1)', 'cross_product(3,2)', 'cross_product(3,3)', 'cross_product(3,4)', 'cross_product(3,5)', 'cross_product(4,1)', 'cross_product(4,2)', 'cross_product(4,3)', 'cross_product(4,4)', 'cross_product(4,5)']]


597
join

question: 
Create an ASP program to define the predicate "desk_lightblue" that links each desk to the surname of lightblue, using fields "ID","weight","lightblueID" for "desk" and fields "ID","strength","surname" for "lightblue".

answer from file: 
desk_lightblue(X,Z):-desk(X,_,Y),lightblue(Y,_,Z).

parsed from model: 
desk_lightblue(X,Z):-desk(X,_,Y),lightblue(Y,_,Z).

facts: 
desk("ID","weight","lightblueID").lightblue("ID","strength","surname").

generated: 
Create an ASP program to define the predicate "desk_lightblue" that links each desk to the surname of lightblue, using fields "ID","weight","lightblueID" for "desk" and fields "ID","strength","surname" for "lightblue".
Answer: desk_lightblue(X,Z):-desk(X,_,Y),lightblue(Y,_,Z).
desk(X,_,Y):-height(X,_,Y).
lightblue(ID,strength,Z):-height(ID,strength,Z).

unique_rules: 
['desk_lightblue(X,Z):-desk(X,_,Y),lightblue(Y,_,Z).', 'desk(X,_,Y):-height(X,_,Y).', 'lightblue(ID,strength,Z):-height(ID,strength,Z).']

jaccard: 1.0

AS desired: [['desk("ID","weight","lightblueID")', 'lightblue("ID","strength","surname")']]
\AS obtained: [['desk("ID","weight","lightblueID")', 'lightblue("ID","strength","surname")']]


598
closure

question: 
Write an ASP program for the following problem. Define predicate "journey" as the transitive closure of predicate "mumbai".

answer from file: 
journey(X,Y):-mumbai(X,Y).
journey(X,Y):-mumbai(X,Z),journey(Z,Y).

parsed from model: 
journey(X,Y):-mumbai(X,Y).
journey(X,Y):-mumbai(X,Z),journey(Z,Y).

facts: 
mumbai(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "journey" as the transitive closure of predicate "mumbai".
Answer: journey(X,Y):-mumbai(X,Y).
journey(X,Y):-mumbai(X,Z),journey(Z,Y).
mumbai(X,Y):-city(X,Y).
city(X,Y):-street(X,Y).
street(X,Y):-bike(X,Y).
bike(X,Y):-city(X,Y).
street(X,Y):-bike(X,Y).
street(X,Y):-city(X,Y).
street(X,Y):-city(X,Z),street(Z,Y).

unique_rules: 
['journey(X,Y):-mumbai(X,Y).', 'journey(X,Y):-mumbai(X,Z),journey(Z,Y).', 'mumbai(X,Y):-city(X,Y).', 'city(X,Y):-street(X,Y).', 'street(X,Y):-bike(X,Y).', 'bike(X,Y):-city(X,Y).', 'street(X,Y):-city(X,Y).', 'street(X,Y):-city(X,Z),street(Z,Y).']

jaccard: 1.0

AS desired: [['mumbai(1,1)', 'mumbai(1,2)', 'mumbai(1,3)', 'mumbai(1,4)', 'mumbai(2,1)', 'mumbai(2,2)', 'mumbai(2,3)', 'mumbai(2,4)', 'mumbai(3,1)', 'mumbai(3,2)', 'mumbai(3,3)', 'mumbai(3,4)', 'journey(1,1)', 'journey(1,2)', 'journey(1,3)', 'journey(1,4)', 'journey(2,1)', 'journey(2,2)', 'journey(2,3)', 'journey(2,4)', 'journey(3,1)', 'journey(3,2)', 'journey(3,3)', 'journey(3,4)']]
\AS obtained: [['mumbai(1,1)', 'mumbai(1,2)', 'mumbai(1,3)', 'mumbai(1,4)', 'mumbai(2,1)', 'mumbai(2,2)', 'mumbai(2,3)', 'mumbai(2,4)', 'mumbai(3,1)', 'mumbai(3,2)', 'mumbai(3,3)', 'mumbai(3,4)', 'journey(1,1)', 'journey(1,2)', 'journey(1,3)', 'journey(1,4)', 'journey(2,1)', 'journey(2,2)', 'journey(2,3)', 'journey(2,4)', 'journey(3,1)', 'journey(3,2)', 'journey(3,3)', 'journey(3,4)']]


599
preference

question: 
Create an ASP program that keeps the predicate "lightblue" with value "3" unlinked from "toronto". If linked, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(3,"toronto").[1@1]

parsed from model: 
:~assign(3,"toronto").[1@1]

facts: 
lightblue(1..20).

generated: 
Create an ASP program that keeps the predicate "lightblue" with value "3" unlinked from "toronto". If linked, it incurs a cost of "1" at level "1".
Answer: :~assign(3,"toronto").[1@1]
This program uses the predicate "lightblue" with value "3" being linked to the "city" label.
The predicate "city" has fields "ID","height","author","name","city","description","age","author","city","description","name","price","height","author","city","age","description","name","price","height","author","city","description","name","price","height","author","city","age","description","name","price","height","author","city","description","name","price","height","author","city","age","description","name","price","height","author","city","description","name","price

unique_rules: 
[':~assign(3,"toronto").[1@1]']

jaccard: 1.0

AS desired: [['lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'lightblue(4)', 'lightblue(5)', 'lightblue(6)', 'lightblue(7)', 'lightblue(8)', 'lightblue(9)', 'lightblue(10)', 'lightblue(11)', 'lightblue(12)', 'lightblue(13)', 'lightblue(14)', 'lightblue(15)', 'lightblue(16)', 'lightblue(17)', 'lightblue(18)', 'lightblue(19)', 'lightblue(20)']]
\AS obtained: [['lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'lightblue(4)', 'lightblue(5)', 'lightblue(6)', 'lightblue(7)', 'lightblue(8)', 'lightblue(9)', 'lightblue(10)', 'lightblue(11)', 'lightblue(12)', 'lightblue(13)', 'lightblue(14)', 'lightblue(15)', 'lightblue(16)', 'lightblue(17)', 'lightblue(18)', 'lightblue(19)', 'lightblue(20)']]


600
filtering

question: 
Develop an ASP script to capture all values linked to the "pink" label within the "chicago" predicate.

answer from file: 
select(X):-chicago(X,"pink").

parsed from model: 
select(X):-chicago(X,"pink").

facts: 
chicago(1..5, "pink").

generated: 
Develop an ASP script to capture all values linked to the "pink" label within the "chicago" predicate.
Answer: select(X):-chicago(X,"pink").
select(X):-chicago(X,"city").
select(X):-chicago(X,"author").
chicago(X,"pink").
chicago(X,"city").
chicago(X,"author").
```

unique_rules: 
['select(X):-chicago(X,"pink").', 'select(X):-chicago(X,"city").', 'select(X):-chicago(X,"author").']

jaccard: 1.0

AS desired: [['chicago(1,"pink")', 'chicago(2,"pink")', 'chicago(3,"pink")', 'chicago(4,"pink")', 'chicago(5,"pink")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['chicago(1,"pink")', 'chicago(2,"pink")', 'chicago(3,"pink")', 'chicago(4,"pink")', 'chicago(5,"pink")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


601
negative_filtering

question: 
Develop an ASP script to collect values tied to the predicate "black" but not linked to the predicate "moscow" and labeled "white".

answer from file: 
select(X):-black(X),not moscow(X,"white").

parsed from model: 
select(X):-black(X),not moscow(X,"white").

facts: 
black(1..3).moscow(1,"lake").moscow(2,"white").moscow(3,"butterfly").

generated: 
Develop an ASP script to collect values tied to the predicate "black" but not linked to the predicate "moscow" and labeled "white".
Answer: select(X):-black(X),not moscow(X,"white").
black(X):-age(X,"height"),height(X,"height").
moscow(X,"white"):-age(X,"height").

unique_rules: 
['select(X):-black(X),not moscow(X,"white").', 'black(X):-age(X,"height"),height(X,"height").', 'moscow(X,"white"):-age(X,"height").']

jaccard: 1.0

AS desired: [['black(1)', 'black(2)', 'black(3)', 'moscow(1,"lake")', 'moscow(2,"white")', 'moscow(3,"butterfly")', 'select(1)', 'select(3)']]
\AS obtained: [['black(1)', 'black(2)', 'black(3)', 'moscow(1,"lake")', 'moscow(2,"white")', 'moscow(3,"butterfly")', 'select(1)', 'select(3)']]


602
numeric_filtering

question: 
Design an ASP solution to capture all values tied to the predicate "roof" with a value different than 26.

answer from file: 
select(X):-roof(X,C),C!=26.

parsed from model: 
select(X):-roof(X,C),C!=26.

facts: 
roof(1..3, 1..100).

generated: 
Design an ASP solution to capture all values tied to the predicate "roof" with a value different than 26.
Answer: select(X):-roof(X,C),C!=26.
Explanation: The predicate "roof" includes all values tied to the predicate "city" with a value different than 26.
The predicate "city" includes all values tied to the predicate "rome" with a value different than 26.
The predicate "rome" includes all values tied to the predicate "moto" with a value different than 26.
The predicate "moto" includes all values tied to the predicate "author" with a value different than 26.
The predicate "author" includes all values tied to the predicate "city" with a value different than 26.
The predicate "city

unique_rules: 
['select(X):-roof(X,C),C!=26.']

jaccard: 1.0

AS desired: [['roof(1,1)', 'roof(1,2)', 'roof(1,3)', 'roof(1,4)', 'roof(1,5)', 'roof(1,6)', 'roof(1,7)', 'roof(1,8)', 'roof(1,9)', 'roof(1,10)', 'roof(1,11)', 'roof(1,12)', 'roof(1,13)', 'roof(1,14)', 'roof(1,15)', 'roof(1,16)', 'roof(1,17)', 'roof(1,18)', 'roof(1,19)', 'roof(1,20)', 'roof(1,21)', 'roof(1,22)', 'roof(1,23)', 'roof(1,24)', 'roof(1,25)', 'roof(1,26)', 'roof(1,27)', 'roof(1,28)', 'roof(1,29)', 'roof(1,30)', 'roof(1,31)', 'roof(1,32)', 'roof(1,33)', 'roof(1,34)', 'roof(1,35)', 'roof(1,36)', 'roof(1,37)', 'roof(1,38)', 'roof(1,39)', 'roof(1,40)', 'roof(1,41)', 'roof(1,42)', 'roof(1,43)', 'roof(1,44)', 'roof(1,45)', 'roof(1,46)', 'roof(1,47)', 'roof(1,48)', 'roof(1,49)', 'roof(1,50)', 'roof(1,51)', 'roof(1,52)', 'roof(1,53)', 'roof(1,54)', 'roof(1,55)', 'roof(1,56)', 'roof(1,57)', 'roof(1,58)', 'roof(1,59)', 'roof(1,60)', 'roof(1,61)', 'roof(1,62)', 'roof(1,63)', 'roof(1,64)', 'roof(1,65)', 'roof(1,66)', 'roof(1,67)', 'roof(1,68)', 'roof(1,69)', 'roof(1,70)', 'roof(1,71)', 'roof(1,72)', 'roof(1,73)', 'roof(1,74)', 'roof(1,75)', 'roof(1,76)', 'roof(1,77)', 'roof(1,78)', 'roof(1,79)', 'roof(1,80)', 'roof(1,81)', 'roof(1,82)', 'roof(1,83)', 'roof(1,84)', 'roof(1,85)', 'roof(1,86)', 'roof(1,87)', 'roof(1,88)', 'roof(1,89)', 'roof(1,90)', 'roof(1,91)', 'roof(1,92)', 'roof(1,93)', 'roof(1,94)', 'roof(1,95)', 'roof(1,96)', 'roof(1,97)', 'roof(1,98)', 'roof(1,99)', 'roof(1,100)', 'roof(2,1)', 'roof(2,2)', 'roof(2,3)', 'roof(2,4)', 'roof(2,5)', 'roof(2,6)', 'roof(2,7)', 'roof(2,8)', 'roof(2,9)', 'roof(2,10)', 'roof(2,11)', 'roof(2,12)', 'roof(2,13)', 'roof(2,14)', 'roof(2,15)', 'roof(2,16)', 'roof(2,17)', 'roof(2,18)', 'roof(2,19)', 'roof(2,20)', 'roof(2,21)', 'roof(2,22)', 'roof(2,23)', 'roof(2,24)', 'roof(2,25)', 'roof(2,26)', 'roof(2,27)', 'roof(2,28)', 'roof(2,29)', 'roof(2,30)', 'roof(2,31)', 'roof(2,32)', 'roof(2,33)', 'roof(2,34)', 'roof(2,35)', 'roof(2,36)', 'roof(2,37)', 'roof(2,38)', 'roof(2,39)', 'roof(2,40)', 'roof(2,41)', 'roof(2,42)', 'roof(2,43)', 'roof(2,44)', 'roof(2,45)', 'roof(2,46)', 'roof(2,47)', 'roof(2,48)', 'roof(2,49)', 'roof(2,50)', 'roof(2,51)', 'roof(2,52)', 'roof(2,53)', 'roof(2,54)', 'roof(2,55)', 'roof(2,56)', 'roof(2,57)', 'roof(2,58)', 'roof(2,59)', 'roof(2,60)', 'roof(2,61)', 'roof(2,62)', 'roof(2,63)', 'roof(2,64)', 'roof(2,65)', 'roof(2,66)', 'roof(2,67)', 'roof(2,68)', 'roof(2,69)', 'roof(2,70)', 'roof(2,71)', 'roof(2,72)', 'roof(2,73)', 'roof(2,74)', 'roof(2,75)', 'roof(2,76)', 'roof(2,77)', 'roof(2,78)', 'roof(2,79)', 'roof(2,80)', 'roof(2,81)', 'roof(2,82)', 'roof(2,83)', 'roof(2,84)', 'roof(2,85)', 'roof(2,86)', 'roof(2,87)', 'roof(2,88)', 'roof(2,89)', 'roof(2,90)', 'roof(2,91)', 'roof(2,92)', 'roof(2,93)', 'roof(2,94)', 'roof(2,95)', 'roof(2,96)', 'roof(2,97)', 'roof(2,98)', 'roof(2,99)', 'roof(2,100)', 'roof(3,1)', 'roof(3,2)', 'roof(3,3)', 'roof(3,4)', 'roof(3,5)', 'roof(3,6)', 'roof(3,7)', 'roof(3,8)', 'roof(3,9)', 'roof(3,10)', 'roof(3,11)', 'roof(3,12)', 'roof(3,13)', 'roof(3,14)', 'roof(3,15)', 'roof(3,16)', 'roof(3,17)', 'roof(3,18)', 'roof(3,19)', 'roof(3,20)', 'roof(3,21)', 'roof(3,22)', 'roof(3,23)', 'roof(3,24)', 'roof(3,25)', 'roof(3,26)', 'roof(3,27)', 'roof(3,28)', 'roof(3,29)', 'roof(3,30)', 'roof(3,31)', 'roof(3,32)', 'roof(3,33)', 'roof(3,34)', 'roof(3,35)', 'roof(3,36)', 'roof(3,37)', 'roof(3,38)', 'roof(3,39)', 'roof(3,40)', 'roof(3,41)', 'roof(3,42)', 'roof(3,43)', 'roof(3,44)', 'roof(3,45)', 'roof(3,46)', 'roof(3,47)', 'roof(3,48)', 'roof(3,49)', 'roof(3,50)', 'roof(3,51)', 'roof(3,52)', 'roof(3,53)', 'roof(3,54)', 'roof(3,55)', 'roof(3,56)', 'roof(3,57)', 'roof(3,58)', 'roof(3,59)', 'roof(3,60)', 'roof(3,61)', 'roof(3,62)', 'roof(3,63)', 'roof(3,64)', 'roof(3,65)', 'roof(3,66)', 'roof(3,67)', 'roof(3,68)', 'roof(3,69)', 'roof(3,70)', 'roof(3,71)', 'roof(3,72)', 'roof(3,73)', 'roof(3,74)', 'roof(3,75)', 'roof(3,76)', 'roof(3,77)', 'roof(3,78)', 'roof(3,79)', 'roof(3,80)', 'roof(3,81)', 'roof(3,82)', 'roof(3,83)', 'roof(3,84)', 'roof(3,85)', 'roof(3,86)', 'roof(3,87)', 'roof(3,88)', 'roof(3,89)', 'roof(3,90)', 'roof(3,91)', 'roof(3,92)', 'roof(3,93)', 'roof(3,94)', 'roof(3,95)', 'roof(3,96)', 'roof(3,97)', 'roof(3,98)', 'roof(3,99)', 'roof(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['roof(1,1)', 'roof(1,2)', 'roof(1,3)', 'roof(1,4)', 'roof(1,5)', 'roof(1,6)', 'roof(1,7)', 'roof(1,8)', 'roof(1,9)', 'roof(1,10)', 'roof(1,11)', 'roof(1,12)', 'roof(1,13)', 'roof(1,14)', 'roof(1,15)', 'roof(1,16)', 'roof(1,17)', 'roof(1,18)', 'roof(1,19)', 'roof(1,20)', 'roof(1,21)', 'roof(1,22)', 'roof(1,23)', 'roof(1,24)', 'roof(1,25)', 'roof(1,26)', 'roof(1,27)', 'roof(1,28)', 'roof(1,29)', 'roof(1,30)', 'roof(1,31)', 'roof(1,32)', 'roof(1,33)', 'roof(1,34)', 'roof(1,35)', 'roof(1,36)', 'roof(1,37)', 'roof(1,38)', 'roof(1,39)', 'roof(1,40)', 'roof(1,41)', 'roof(1,42)', 'roof(1,43)', 'roof(1,44)', 'roof(1,45)', 'roof(1,46)', 'roof(1,47)', 'roof(1,48)', 'roof(1,49)', 'roof(1,50)', 'roof(1,51)', 'roof(1,52)', 'roof(1,53)', 'roof(1,54)', 'roof(1,55)', 'roof(1,56)', 'roof(1,57)', 'roof(1,58)', 'roof(1,59)', 'roof(1,60)', 'roof(1,61)', 'roof(1,62)', 'roof(1,63)', 'roof(1,64)', 'roof(1,65)', 'roof(1,66)', 'roof(1,67)', 'roof(1,68)', 'roof(1,69)', 'roof(1,70)', 'roof(1,71)', 'roof(1,72)', 'roof(1,73)', 'roof(1,74)', 'roof(1,75)', 'roof(1,76)', 'roof(1,77)', 'roof(1,78)', 'roof(1,79)', 'roof(1,80)', 'roof(1,81)', 'roof(1,82)', 'roof(1,83)', 'roof(1,84)', 'roof(1,85)', 'roof(1,86)', 'roof(1,87)', 'roof(1,88)', 'roof(1,89)', 'roof(1,90)', 'roof(1,91)', 'roof(1,92)', 'roof(1,93)', 'roof(1,94)', 'roof(1,95)', 'roof(1,96)', 'roof(1,97)', 'roof(1,98)', 'roof(1,99)', 'roof(1,100)', 'roof(2,1)', 'roof(2,2)', 'roof(2,3)', 'roof(2,4)', 'roof(2,5)', 'roof(2,6)', 'roof(2,7)', 'roof(2,8)', 'roof(2,9)', 'roof(2,10)', 'roof(2,11)', 'roof(2,12)', 'roof(2,13)', 'roof(2,14)', 'roof(2,15)', 'roof(2,16)', 'roof(2,17)', 'roof(2,18)', 'roof(2,19)', 'roof(2,20)', 'roof(2,21)', 'roof(2,22)', 'roof(2,23)', 'roof(2,24)', 'roof(2,25)', 'roof(2,26)', 'roof(2,27)', 'roof(2,28)', 'roof(2,29)', 'roof(2,30)', 'roof(2,31)', 'roof(2,32)', 'roof(2,33)', 'roof(2,34)', 'roof(2,35)', 'roof(2,36)', 'roof(2,37)', 'roof(2,38)', 'roof(2,39)', 'roof(2,40)', 'roof(2,41)', 'roof(2,42)', 'roof(2,43)', 'roof(2,44)', 'roof(2,45)', 'roof(2,46)', 'roof(2,47)', 'roof(2,48)', 'roof(2,49)', 'roof(2,50)', 'roof(2,51)', 'roof(2,52)', 'roof(2,53)', 'roof(2,54)', 'roof(2,55)', 'roof(2,56)', 'roof(2,57)', 'roof(2,58)', 'roof(2,59)', 'roof(2,60)', 'roof(2,61)', 'roof(2,62)', 'roof(2,63)', 'roof(2,64)', 'roof(2,65)', 'roof(2,66)', 'roof(2,67)', 'roof(2,68)', 'roof(2,69)', 'roof(2,70)', 'roof(2,71)', 'roof(2,72)', 'roof(2,73)', 'roof(2,74)', 'roof(2,75)', 'roof(2,76)', 'roof(2,77)', 'roof(2,78)', 'roof(2,79)', 'roof(2,80)', 'roof(2,81)', 'roof(2,82)', 'roof(2,83)', 'roof(2,84)', 'roof(2,85)', 'roof(2,86)', 'roof(2,87)', 'roof(2,88)', 'roof(2,89)', 'roof(2,90)', 'roof(2,91)', 'roof(2,92)', 'roof(2,93)', 'roof(2,94)', 'roof(2,95)', 'roof(2,96)', 'roof(2,97)', 'roof(2,98)', 'roof(2,99)', 'roof(2,100)', 'roof(3,1)', 'roof(3,2)', 'roof(3,3)', 'roof(3,4)', 'roof(3,5)', 'roof(3,6)', 'roof(3,7)', 'roof(3,8)', 'roof(3,9)', 'roof(3,10)', 'roof(3,11)', 'roof(3,12)', 'roof(3,13)', 'roof(3,14)', 'roof(3,15)', 'roof(3,16)', 'roof(3,17)', 'roof(3,18)', 'roof(3,19)', 'roof(3,20)', 'roof(3,21)', 'roof(3,22)', 'roof(3,23)', 'roof(3,24)', 'roof(3,25)', 'roof(3,26)', 'roof(3,27)', 'roof(3,28)', 'roof(3,29)', 'roof(3,30)', 'roof(3,31)', 'roof(3,32)', 'roof(3,33)', 'roof(3,34)', 'roof(3,35)', 'roof(3,36)', 'roof(3,37)', 'roof(3,38)', 'roof(3,39)', 'roof(3,40)', 'roof(3,41)', 'roof(3,42)', 'roof(3,43)', 'roof(3,44)', 'roof(3,45)', 'roof(3,46)', 'roof(3,47)', 'roof(3,48)', 'roof(3,49)', 'roof(3,50)', 'roof(3,51)', 'roof(3,52)', 'roof(3,53)', 'roof(3,54)', 'roof(3,55)', 'roof(3,56)', 'roof(3,57)', 'roof(3,58)', 'roof(3,59)', 'roof(3,60)', 'roof(3,61)', 'roof(3,62)', 'roof(3,63)', 'roof(3,64)', 'roof(3,65)', 'roof(3,66)', 'roof(3,67)', 'roof(3,68)', 'roof(3,69)', 'roof(3,70)', 'roof(3,71)', 'roof(3,72)', 'roof(3,73)', 'roof(3,74)', 'roof(3,75)', 'roof(3,76)', 'roof(3,77)', 'roof(3,78)', 'roof(3,79)', 'roof(3,80)', 'roof(3,81)', 'roof(3,82)', 'roof(3,83)', 'roof(3,84)', 'roof(3,85)', 'roof(3,86)', 'roof(3,87)', 'roof(3,88)', 'roof(3,89)', 'roof(3,90)', 'roof(3,91)', 'roof(3,92)', 'roof(3,93)', 'roof(3,94)', 'roof(3,95)', 'roof(3,96)', 'roof(3,97)', 'roof(3,98)', 'roof(3,99)', 'roof(3,100)', 'select(1)', 'select(2)', 'select(3)']]


603
assignment

question: 
Formulate an ASP program that links each element, as identified by the predicate "chair", with one label from "laptop","quality","strength".

answer from file: 
assign(X,"laptop")|assign(X,"quality")|assign(X,"strength"):-chair(X).

parsed from model: 
assign(X,"laptop")|assign(X,"quality")|assign(X,"strength"):-chair(X).

facts: 
chair(1..5).

generated: 
Formulate an ASP program that links each element, as identified by the predicate "chair", with one label from "laptop","quality","strength".
Answer: assign(X,"laptop")|assign(X,"quality")|assign(X,"strength"):-chair(X).
assign(X,"laptop")|assign(X,"quality"):- felicità(X).
assign(X,"strength"):-city(X).
 felicità(X,"city").
city(X,"description").
description(X,"city").
city(X,"description","city").
description(X,"city","description").
description(X,"description","description").
description(X,"description","city").
city(X,"description","description").
description(X,"description","city").
city(X,"description","description").
description(X,"description","

unique_rules: 
['assign(X,"laptop")|assign(X,"quality")|assign(X,"strength"):-chair(X).', 'assign(X,"laptop")|assign(X,"quality"):- felicità(X).', 'assign(X,"strength"):-city(X).']

jaccard: 1.0

AS desired: [['chair(1)', 'chair(2)', 'chair(3)', 'chair(4)', 'chair(5)', 'assign(1,"strength")', 'assign(2,"strength")', 'assign(3,"strength")', 'assign(4,"strength")', 'assign(5,"strength")']]
\AS obtained: [['chair(1)', 'chair(2)', 'chair(3)', 'chair(4)', 'chair(5)', 'assign(1,"strength")', 'assign(2,"strength")', 'assign(3,"strength")', 'assign(4,"strength")', 'assign(5,"strength")']]


604
constraint

question: 
Formulate an ASP script to ensure the "owner" predicate having value 9 is not associated with the label "cairo".

answer from file: 
:-assign(9,cairo).

parsed from model: 
:-assign(9,cairo).

facts: 
owner(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-owner(X).

generated: 
Formulate an ASP script to ensure the "owner" predicate having value 9 is not associated with the label "cairo".
Answer: :-assign(9,cairo).
assign(9,city).
The predicate "city" has fields "ID","author","city","name","description","author","age","city","description","name","height","description","city","name","age","description","author","height","city","description","name","height","description","city","name","age","description","author","height","city","description","name","height","description","city","name","age","description","author","height","city","description","name","height","description","city","name","age","description","author","height","city","description","name","height","description","city","name","age","description","author","height","

unique_rules: 
[':-assign(9,cairo).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'owner(5)', 'owner(6)', 'owner(7)', 'owner(8)', 'owner(9)', 'owner(10)', 'owner(11)', 'owner(12)', 'owner(13)', 'owner(14)', 'owner(15)', 'owner(16)', 'owner(17)', 'owner(18)', 'owner(19)', 'owner(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'owner(5)', 'owner(6)', 'owner(7)', 'owner(8)', 'owner(9)', 'owner(10)', 'owner(11)', 'owner(12)', 'owner(13)', 'owner(14)', 'owner(15)', 'owner(16)', 'owner(17)', 'owner(18)', 'owner(19)', 'owner(20)']]


605
combination

question: 
Write an ASP application that finds all pairings of elements from the sets defined by the predicates "moscow" and "flower".

answer from file: 
combination(X,Y):-moscow(X),flower(Y).

parsed from model: 
combination(X,Y):-moscow(X),flower(Y).

facts: 
moscow(1..4).flower(1..5).

generated: 
Write an ASP application that finds all pairings of elements from the sets defined by the predicates "moscow" and "flower".
Answer: combination(X,Y):-moscow(X),flower(Y).
combination(X,Y):-moscow(X),not flower(Y).
combination(X,Y):-not moscow(X),flower(Y).

unique_rules: 
['combination(X,Y):-moscow(X),flower(Y).', 'combination(X,Y):-moscow(X),not flower(Y).', 'combination(X,Y):-not moscow(X),flower(Y).']

jaccard: 1.0

AS desired: [['flower(1)', 'flower(2)', 'flower(3)', 'flower(4)', 'flower(5)', 'moscow(1)', 'moscow(2)', 'moscow(3)', 'moscow(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['flower(1)', 'flower(2)', 'flower(3)', 'flower(4)', 'flower(5)', 'moscow(1)', 'moscow(2)', 'moscow(3)', 'moscow(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


606
join

question: 
Compose an ASP script that addresses the problem by defining the predicate "cloud_cairo" which links each cloud to the surname of cairo", with "cloud" having fields "ID","strength","weight","cairoID" and "cairo" having fields "ID","surname","strength".

answer from file: 
cloud_cairo(X,Z):-cloud(X,_,_,Y),cairo(Y,Z,_).

parsed from model: 
cloud_cairo(X,Z):-cloud(X,_,_,Y),cairo(Y,Z,_).

facts: 
cloud("ID","strength","weight","cairoID").cairo("ID","surname","strength").

generated: 
Compose an ASP script that addresses the problem by defining the predicate "cloud_cairo" which links each cloud to the surname of cairo", with "cloud" having fields "ID","strength","weight","cairoID" and "cairo" having fields "ID","surname","strength". Define the predicate "cloud_cairo" which links each cloud to the surname of cairo".
Answer: cloud_cairo(X,Z):-cloud(X,_,_,Y),cairo(Y,Z,_).
cloud_cairo(X,Z):-cloud(X,_,_,Y),not cairo(Y,Z,_).
cloud(X,_,_,Y):-not cloud(X,_,_),cairo(Y,Z,_).

unique_rules: 
['cloud_cairo(X,Z):-cloud(X,_,_,Y),cairo(Y,Z,_).', 'cloud_cairo(X,Z):-cloud(X,_,_,Y),not cairo(Y,Z,_).', 'cloud(X,_,_,Y):-not cloud(X,_,_),cairo(Y,Z,_).']

jaccard: 1.0

AS desired: [['cloud("ID","strength","weight","cairoID")', 'cairo("ID","surname","strength")']]
\AS obtained: [['cloud("ID","strength","weight","cairoID")', 'cairo("ID","surname","strength")']]


607
closure

question: 
Formulate an ASP code snippet to establish the "family" predicate by computing the transitive closure of the "storm" predicate.

answer from file: 
family(X,Y):-storm(X,Y).
family(X,Y):-storm(X,Z),family(Z,Y).

parsed from model: 
family(X,Y):-storm(X,Y).
family(X,Y):-storm(X,Z),family(Z,Y).

facts: 
storm(1..3, 1..4).

generated: 
Formulate an ASP code snippet to establish the "family" predicate by computing the transitive closure of the "storm" predicate.
Answer: family(X,Y):-storm(X,Y).
family(X,Y):-storm(X,Z),family(Z,Y).
family(X,Y):-storm(X,Z),not family(Z,Y).
family(X,Y):-not storm(X,Y).
family(X,Y):-X=Y.
family(X,Y):-X!=Y.

unique_rules: 
['family(X,Y):-storm(X,Y).', 'family(X,Y):-storm(X,Z),family(Z,Y).', 'family(X,Y):-storm(X,Z),not family(Z,Y).', 'family(X,Y):-not storm(X,Y).', 'family(X,Y):-X=Y.', 'family(X,Y):-X!=Y.']

jaccard: 1.0

AS desired: [['storm(1,1)', 'storm(1,2)', 'storm(1,3)', 'storm(1,4)', 'storm(2,1)', 'storm(2,2)', 'storm(2,3)', 'storm(2,4)', 'storm(3,1)', 'storm(3,2)', 'storm(3,3)', 'storm(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]
\AS obtained: [['storm(1,1)', 'storm(1,2)', 'storm(1,3)', 'storm(1,4)', 'storm(2,1)', 'storm(2,2)', 'storm(2,3)', 'storm(2,4)', 'storm(3,1)', 'storm(3,2)', 'storm(3,3)', 'storm(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]


608
preference

question: 
Generate an ASP script to ensure the "flower" predicate with value "19" is not linked to "owner". Any occurrence incurs a cost of "1" at level "1".

answer from file: 
:~assign(19,"owner").[1@1]

parsed from model: 
:~assign(19,"owner").[1@1]

facts: 
flower(1..20).

generated: 
Generate an ASP script to ensure the "flower" predicate with value "19" is not linked to "owner". Any occurrence incurs a cost of "1" at level "1".
Answer: :~assign(19,"owner").[1@1]
The predicate "florence" includes fields "ID","city","author","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author

unique_rules: 
[':~assign(19,"owner").[1@1]']

jaccard: 1.0

AS desired: [['flower(1)', 'flower(2)', 'flower(3)', 'flower(4)', 'flower(5)', 'flower(6)', 'flower(7)', 'flower(8)', 'flower(9)', 'flower(10)', 'flower(11)', 'flower(12)', 'flower(13)', 'flower(14)', 'flower(15)', 'flower(16)', 'flower(17)', 'flower(18)', 'flower(19)', 'flower(20)']]
\AS obtained: [['flower(1)', 'flower(2)', 'flower(3)', 'flower(4)', 'flower(5)', 'flower(6)', 'flower(7)', 'flower(8)', 'flower(9)', 'flower(10)', 'flower(11)', 'flower(12)', 'flower(13)', 'flower(14)', 'flower(15)', 'flower(16)', 'flower(17)', 'flower(18)', 'flower(19)', 'flower(20)']]


609
filtering

question: 
Craft an ASP code snippet to capture all relevant values for the "surname" label within the "white" predicate.

answer from file: 
select(X):-white(X,"surname").

parsed from model: 
select(X):-white(X,"description").

facts: 
white(1..5, "surname").

generated: 
Craft an ASP code snippet to capture all relevant values for the "surname" label within the "white" predicate.
Answer: select(X):-white(X,"description").
select(X):-white(X,"author").
select(X):-white(X,"city").
select(X):-white(X,"description","author").
select(X):-white(X,"description","city").
select(X):-white(X,"description","author","city").
```

unique_rules: 
['select(X):-white(X,"description").', 'select(X):-white(X,"author").', 'select(X):-white(X,"city").', 'select(X):-white(X,"description","author").', 'select(X):-white(X,"description","city").', 'select(X):-white(X,"description","author","city").']

jaccard: 0.0

AS desired: [['white(1,"surname")', 'white(2,"surname")', 'white(3,"surname")', 'white(4,"surname")', 'white(5,"surname")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['white(1,"surname")', 'white(2,"surname")', 'white(3,"surname")', 'white(4,"surname")', 'white(5,"surname")']]


610
negative_filtering

question: 
Write an ASP script to select values connected to the predicate "cloud" but not associated with the predicate "darkmagenta" and labeled "singapore".

answer from file: 
select(X):-cloud(X),not darkmagenta(X,"singapore").

parsed from model: 
select(X):-cloud(X),not darkmagenta(X,"singapore").

facts: 
cloud(1..3).darkmagenta(1,"barcelona").darkmagenta(2,"storm").darkmagenta(3,"singapore").

generated: 
Write an ASP script to select values connected to the predicate "cloud" but not associated with the predicate "darkmagenta" and labeled "singapore".
Answer: select(X):-cloud(X),not darkmagenta(X,"singapore").

unique_rules: 
['select(X):-cloud(X),not darkmagenta(X,"singapore").']

jaccard: 1.0

AS desired: [['cloud(1)', 'cloud(2)', 'cloud(3)', 'darkmagenta(1,"barcelona")', 'darkmagenta(2,"storm")', 'darkmagenta(3,"singapore")', 'select(1)', 'select(2)']]
\AS obtained: [['cloud(1)', 'cloud(2)', 'cloud(3)', 'darkmagenta(1,"barcelona")', 'darkmagenta(2,"storm")', 'darkmagenta(3,"singapore")', 'select(1)', 'select(2)']]


611
numeric_filtering

question: 
Craft an ASP program to fetch values linked to the predicate "moscow" with a value different than 50.

answer from file: 
select(X):-moscow(X,C),C!=50.

parsed from model: 
select(X):-moscow(X,C),C!=50.

facts: 
moscow(1..3, 1..100).

generated: 
Craft an ASP program to fetch values linked to the predicate "moscow" with a value different than 50.
Answer: select(X):-moscow(X,C),C!=50.
select(X):-moscow(X,C),C==50.

unique_rules: 
['select(X):-moscow(X,C),C!=50.', 'select(X):-moscow(X,C),C==50.']

jaccard: 1.0

AS desired: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(1,5)', 'moscow(1,6)', 'moscow(1,7)', 'moscow(1,8)', 'moscow(1,9)', 'moscow(1,10)', 'moscow(1,11)', 'moscow(1,12)', 'moscow(1,13)', 'moscow(1,14)', 'moscow(1,15)', 'moscow(1,16)', 'moscow(1,17)', 'moscow(1,18)', 'moscow(1,19)', 'moscow(1,20)', 'moscow(1,21)', 'moscow(1,22)', 'moscow(1,23)', 'moscow(1,24)', 'moscow(1,25)', 'moscow(1,26)', 'moscow(1,27)', 'moscow(1,28)', 'moscow(1,29)', 'moscow(1,30)', 'moscow(1,31)', 'moscow(1,32)', 'moscow(1,33)', 'moscow(1,34)', 'moscow(1,35)', 'moscow(1,36)', 'moscow(1,37)', 'moscow(1,38)', 'moscow(1,39)', 'moscow(1,40)', 'moscow(1,41)', 'moscow(1,42)', 'moscow(1,43)', 'moscow(1,44)', 'moscow(1,45)', 'moscow(1,46)', 'moscow(1,47)', 'moscow(1,48)', 'moscow(1,49)', 'moscow(1,50)', 'moscow(1,51)', 'moscow(1,52)', 'moscow(1,53)', 'moscow(1,54)', 'moscow(1,55)', 'moscow(1,56)', 'moscow(1,57)', 'moscow(1,58)', 'moscow(1,59)', 'moscow(1,60)', 'moscow(1,61)', 'moscow(1,62)', 'moscow(1,63)', 'moscow(1,64)', 'moscow(1,65)', 'moscow(1,66)', 'moscow(1,67)', 'moscow(1,68)', 'moscow(1,69)', 'moscow(1,70)', 'moscow(1,71)', 'moscow(1,72)', 'moscow(1,73)', 'moscow(1,74)', 'moscow(1,75)', 'moscow(1,76)', 'moscow(1,77)', 'moscow(1,78)', 'moscow(1,79)', 'moscow(1,80)', 'moscow(1,81)', 'moscow(1,82)', 'moscow(1,83)', 'moscow(1,84)', 'moscow(1,85)', 'moscow(1,86)', 'moscow(1,87)', 'moscow(1,88)', 'moscow(1,89)', 'moscow(1,90)', 'moscow(1,91)', 'moscow(1,92)', 'moscow(1,93)', 'moscow(1,94)', 'moscow(1,95)', 'moscow(1,96)', 'moscow(1,97)', 'moscow(1,98)', 'moscow(1,99)', 'moscow(1,100)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(2,5)', 'moscow(2,6)', 'moscow(2,7)', 'moscow(2,8)', 'moscow(2,9)', 'moscow(2,10)', 'moscow(2,11)', 'moscow(2,12)', 'moscow(2,13)', 'moscow(2,14)', 'moscow(2,15)', 'moscow(2,16)', 'moscow(2,17)', 'moscow(2,18)', 'moscow(2,19)', 'moscow(2,20)', 'moscow(2,21)', 'moscow(2,22)', 'moscow(2,23)', 'moscow(2,24)', 'moscow(2,25)', 'moscow(2,26)', 'moscow(2,27)', 'moscow(2,28)', 'moscow(2,29)', 'moscow(2,30)', 'moscow(2,31)', 'moscow(2,32)', 'moscow(2,33)', 'moscow(2,34)', 'moscow(2,35)', 'moscow(2,36)', 'moscow(2,37)', 'moscow(2,38)', 'moscow(2,39)', 'moscow(2,40)', 'moscow(2,41)', 'moscow(2,42)', 'moscow(2,43)', 'moscow(2,44)', 'moscow(2,45)', 'moscow(2,46)', 'moscow(2,47)', 'moscow(2,48)', 'moscow(2,49)', 'moscow(2,50)', 'moscow(2,51)', 'moscow(2,52)', 'moscow(2,53)', 'moscow(2,54)', 'moscow(2,55)', 'moscow(2,56)', 'moscow(2,57)', 'moscow(2,58)', 'moscow(2,59)', 'moscow(2,60)', 'moscow(2,61)', 'moscow(2,62)', 'moscow(2,63)', 'moscow(2,64)', 'moscow(2,65)', 'moscow(2,66)', 'moscow(2,67)', 'moscow(2,68)', 'moscow(2,69)', 'moscow(2,70)', 'moscow(2,71)', 'moscow(2,72)', 'moscow(2,73)', 'moscow(2,74)', 'moscow(2,75)', 'moscow(2,76)', 'moscow(2,77)', 'moscow(2,78)', 'moscow(2,79)', 'moscow(2,80)', 'moscow(2,81)', 'moscow(2,82)', 'moscow(2,83)', 'moscow(2,84)', 'moscow(2,85)', 'moscow(2,86)', 'moscow(2,87)', 'moscow(2,88)', 'moscow(2,89)', 'moscow(2,90)', 'moscow(2,91)', 'moscow(2,92)', 'moscow(2,93)', 'moscow(2,94)', 'moscow(2,95)', 'moscow(2,96)', 'moscow(2,97)', 'moscow(2,98)', 'moscow(2,99)', 'moscow(2,100)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)', 'moscow(3,5)', 'moscow(3,6)', 'moscow(3,7)', 'moscow(3,8)', 'moscow(3,9)', 'moscow(3,10)', 'moscow(3,11)', 'moscow(3,12)', 'moscow(3,13)', 'moscow(3,14)', 'moscow(3,15)', 'moscow(3,16)', 'moscow(3,17)', 'moscow(3,18)', 'moscow(3,19)', 'moscow(3,20)', 'moscow(3,21)', 'moscow(3,22)', 'moscow(3,23)', 'moscow(3,24)', 'moscow(3,25)', 'moscow(3,26)', 'moscow(3,27)', 'moscow(3,28)', 'moscow(3,29)', 'moscow(3,30)', 'moscow(3,31)', 'moscow(3,32)', 'moscow(3,33)', 'moscow(3,34)', 'moscow(3,35)', 'moscow(3,36)', 'moscow(3,37)', 'moscow(3,38)', 'moscow(3,39)', 'moscow(3,40)', 'moscow(3,41)', 'moscow(3,42)', 'moscow(3,43)', 'moscow(3,44)', 'moscow(3,45)', 'moscow(3,46)', 'moscow(3,47)', 'moscow(3,48)', 'moscow(3,49)', 'moscow(3,50)', 'moscow(3,51)', 'moscow(3,52)', 'moscow(3,53)', 'moscow(3,54)', 'moscow(3,55)', 'moscow(3,56)', 'moscow(3,57)', 'moscow(3,58)', 'moscow(3,59)', 'moscow(3,60)', 'moscow(3,61)', 'moscow(3,62)', 'moscow(3,63)', 'moscow(3,64)', 'moscow(3,65)', 'moscow(3,66)', 'moscow(3,67)', 'moscow(3,68)', 'moscow(3,69)', 'moscow(3,70)', 'moscow(3,71)', 'moscow(3,72)', 'moscow(3,73)', 'moscow(3,74)', 'moscow(3,75)', 'moscow(3,76)', 'moscow(3,77)', 'moscow(3,78)', 'moscow(3,79)', 'moscow(3,80)', 'moscow(3,81)', 'moscow(3,82)', 'moscow(3,83)', 'moscow(3,84)', 'moscow(3,85)', 'moscow(3,86)', 'moscow(3,87)', 'moscow(3,88)', 'moscow(3,89)', 'moscow(3,90)', 'moscow(3,91)', 'moscow(3,92)', 'moscow(3,93)', 'moscow(3,94)', 'moscow(3,95)', 'moscow(3,96)', 'moscow(3,97)', 'moscow(3,98)', 'moscow(3,99)', 'moscow(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(1,5)', 'moscow(1,6)', 'moscow(1,7)', 'moscow(1,8)', 'moscow(1,9)', 'moscow(1,10)', 'moscow(1,11)', 'moscow(1,12)', 'moscow(1,13)', 'moscow(1,14)', 'moscow(1,15)', 'moscow(1,16)', 'moscow(1,17)', 'moscow(1,18)', 'moscow(1,19)', 'moscow(1,20)', 'moscow(1,21)', 'moscow(1,22)', 'moscow(1,23)', 'moscow(1,24)', 'moscow(1,25)', 'moscow(1,26)', 'moscow(1,27)', 'moscow(1,28)', 'moscow(1,29)', 'moscow(1,30)', 'moscow(1,31)', 'moscow(1,32)', 'moscow(1,33)', 'moscow(1,34)', 'moscow(1,35)', 'moscow(1,36)', 'moscow(1,37)', 'moscow(1,38)', 'moscow(1,39)', 'moscow(1,40)', 'moscow(1,41)', 'moscow(1,42)', 'moscow(1,43)', 'moscow(1,44)', 'moscow(1,45)', 'moscow(1,46)', 'moscow(1,47)', 'moscow(1,48)', 'moscow(1,49)', 'moscow(1,50)', 'moscow(1,51)', 'moscow(1,52)', 'moscow(1,53)', 'moscow(1,54)', 'moscow(1,55)', 'moscow(1,56)', 'moscow(1,57)', 'moscow(1,58)', 'moscow(1,59)', 'moscow(1,60)', 'moscow(1,61)', 'moscow(1,62)', 'moscow(1,63)', 'moscow(1,64)', 'moscow(1,65)', 'moscow(1,66)', 'moscow(1,67)', 'moscow(1,68)', 'moscow(1,69)', 'moscow(1,70)', 'moscow(1,71)', 'moscow(1,72)', 'moscow(1,73)', 'moscow(1,74)', 'moscow(1,75)', 'moscow(1,76)', 'moscow(1,77)', 'moscow(1,78)', 'moscow(1,79)', 'moscow(1,80)', 'moscow(1,81)', 'moscow(1,82)', 'moscow(1,83)', 'moscow(1,84)', 'moscow(1,85)', 'moscow(1,86)', 'moscow(1,87)', 'moscow(1,88)', 'moscow(1,89)', 'moscow(1,90)', 'moscow(1,91)', 'moscow(1,92)', 'moscow(1,93)', 'moscow(1,94)', 'moscow(1,95)', 'moscow(1,96)', 'moscow(1,97)', 'moscow(1,98)', 'moscow(1,99)', 'moscow(1,100)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(2,5)', 'moscow(2,6)', 'moscow(2,7)', 'moscow(2,8)', 'moscow(2,9)', 'moscow(2,10)', 'moscow(2,11)', 'moscow(2,12)', 'moscow(2,13)', 'moscow(2,14)', 'moscow(2,15)', 'moscow(2,16)', 'moscow(2,17)', 'moscow(2,18)', 'moscow(2,19)', 'moscow(2,20)', 'moscow(2,21)', 'moscow(2,22)', 'moscow(2,23)', 'moscow(2,24)', 'moscow(2,25)', 'moscow(2,26)', 'moscow(2,27)', 'moscow(2,28)', 'moscow(2,29)', 'moscow(2,30)', 'moscow(2,31)', 'moscow(2,32)', 'moscow(2,33)', 'moscow(2,34)', 'moscow(2,35)', 'moscow(2,36)', 'moscow(2,37)', 'moscow(2,38)', 'moscow(2,39)', 'moscow(2,40)', 'moscow(2,41)', 'moscow(2,42)', 'moscow(2,43)', 'moscow(2,44)', 'moscow(2,45)', 'moscow(2,46)', 'moscow(2,47)', 'moscow(2,48)', 'moscow(2,49)', 'moscow(2,50)', 'moscow(2,51)', 'moscow(2,52)', 'moscow(2,53)', 'moscow(2,54)', 'moscow(2,55)', 'moscow(2,56)', 'moscow(2,57)', 'moscow(2,58)', 'moscow(2,59)', 'moscow(2,60)', 'moscow(2,61)', 'moscow(2,62)', 'moscow(2,63)', 'moscow(2,64)', 'moscow(2,65)', 'moscow(2,66)', 'moscow(2,67)', 'moscow(2,68)', 'moscow(2,69)', 'moscow(2,70)', 'moscow(2,71)', 'moscow(2,72)', 'moscow(2,73)', 'moscow(2,74)', 'moscow(2,75)', 'moscow(2,76)', 'moscow(2,77)', 'moscow(2,78)', 'moscow(2,79)', 'moscow(2,80)', 'moscow(2,81)', 'moscow(2,82)', 'moscow(2,83)', 'moscow(2,84)', 'moscow(2,85)', 'moscow(2,86)', 'moscow(2,87)', 'moscow(2,88)', 'moscow(2,89)', 'moscow(2,90)', 'moscow(2,91)', 'moscow(2,92)', 'moscow(2,93)', 'moscow(2,94)', 'moscow(2,95)', 'moscow(2,96)', 'moscow(2,97)', 'moscow(2,98)', 'moscow(2,99)', 'moscow(2,100)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)', 'moscow(3,5)', 'moscow(3,6)', 'moscow(3,7)', 'moscow(3,8)', 'moscow(3,9)', 'moscow(3,10)', 'moscow(3,11)', 'moscow(3,12)', 'moscow(3,13)', 'moscow(3,14)', 'moscow(3,15)', 'moscow(3,16)', 'moscow(3,17)', 'moscow(3,18)', 'moscow(3,19)', 'moscow(3,20)', 'moscow(3,21)', 'moscow(3,22)', 'moscow(3,23)', 'moscow(3,24)', 'moscow(3,25)', 'moscow(3,26)', 'moscow(3,27)', 'moscow(3,28)', 'moscow(3,29)', 'moscow(3,30)', 'moscow(3,31)', 'moscow(3,32)', 'moscow(3,33)', 'moscow(3,34)', 'moscow(3,35)', 'moscow(3,36)', 'moscow(3,37)', 'moscow(3,38)', 'moscow(3,39)', 'moscow(3,40)', 'moscow(3,41)', 'moscow(3,42)', 'moscow(3,43)', 'moscow(3,44)', 'moscow(3,45)', 'moscow(3,46)', 'moscow(3,47)', 'moscow(3,48)', 'moscow(3,49)', 'moscow(3,50)', 'moscow(3,51)', 'moscow(3,52)', 'moscow(3,53)', 'moscow(3,54)', 'moscow(3,55)', 'moscow(3,56)', 'moscow(3,57)', 'moscow(3,58)', 'moscow(3,59)', 'moscow(3,60)', 'moscow(3,61)', 'moscow(3,62)', 'moscow(3,63)', 'moscow(3,64)', 'moscow(3,65)', 'moscow(3,66)', 'moscow(3,67)', 'moscow(3,68)', 'moscow(3,69)', 'moscow(3,70)', 'moscow(3,71)', 'moscow(3,72)', 'moscow(3,73)', 'moscow(3,74)', 'moscow(3,75)', 'moscow(3,76)', 'moscow(3,77)', 'moscow(3,78)', 'moscow(3,79)', 'moscow(3,80)', 'moscow(3,81)', 'moscow(3,82)', 'moscow(3,83)', 'moscow(3,84)', 'moscow(3,85)', 'moscow(3,86)', 'moscow(3,87)', 'moscow(3,88)', 'moscow(3,89)', 'moscow(3,90)', 'moscow(3,91)', 'moscow(3,92)', 'moscow(3,93)', 'moscow(3,94)', 'moscow(3,95)', 'moscow(3,96)', 'moscow(3,97)', 'moscow(3,98)', 'moscow(3,99)', 'moscow(3,100)', 'select(1)', 'select(2)', 'select(3)']]


612
assignment

question: 
Craft an ASP solution that associates precisely one label from "butterfly","delhi","chicago","wall","barcelona","cosenza","toronto","lake" with elements specified by the predicate "moscow".

answer from file: 
assign(X,"butterfly")|assign(X,"delhi")|assign(X,"chicago")|assign(X,"wall")|assign(X,"barcelona")|assign(X,"cosenza")|assign(X,"toronto")|assign(X,"lake"):-moscow(X).

parsed from model: 
assign(X,"butterfly")|assign(X,"delhi")|assign(X,"chicago")|assign(X,"wall")|assign(X,"barcelona")|assign(X,"cosenza")|assign(X,"toronto")|assign(X,"lake"):-moscow(X).

facts: 
moscow(1..5).

generated: 
Craft an ASP solution that associates precisely one label from "butterfly","delhi","chicago","wall","barcelona","cosenza","toronto","lake" with elements specified by the predicate "moscow".
Answer: assign(X,"butterfly")|assign(X,"delhi")|assign(X,"chicago")|assign(X,"wall")|assign(X,"barcelona")|assign(X,"cosenza")|assign(X,"toronto")|assign(X,"lake"):-moscow(X).

unique_rules: 
['assign(X,"butterfly")|assign(X,"delhi")|assign(X,"chicago")|assign(X,"wall")|assign(X,"barcelona")|assign(X,"cosenza")|assign(X,"toronto")|assign(X,"lake"):-moscow(X).']

jaccard: 1.0

AS desired: [['moscow(1)', 'moscow(2)', 'moscow(3)', 'moscow(4)', 'moscow(5)', 'assign(1,"lake")', 'assign(2,"lake")', 'assign(3,"toronto")', 'assign(4,"lake")', 'assign(5,"lake")']]
\AS obtained: [['moscow(1)', 'moscow(2)', 'moscow(3)', 'moscow(4)', 'moscow(5)', 'assign(1,"lake")', 'assign(2,"lake")', 'assign(3,"toronto")', 'assign(4,"lake")', 'assign(5,"lake")']]


613
constraint

question: 
Formulate an ASP code that ensures the "storm" predicate having value 15 is not connected to the label "cairo".

answer from file: 
:-assign(15,cairo).

parsed from model: 
:-assign(15,cairo).

facts: 
storm(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-storm(X).

generated: 
Formulate an ASP code that ensures the "storm" predicate having value 15 is not connected to the label "cairo".
Answer: :-assign(15,cairo).
Explanation: The predicate "street" includes values connected to the label "city","height","moto","rome","shangai","description","color","amsterdam","city","author","moto","description","height","rome","shangai","city","description","color","amsterdam","height","description","author","moto","city","description","height","rome","shangai","city","description","color","amsterdam","height","description","author","moto","city","description","height","rome","shangai","city","description","color","amsterdam","height","description","author","moto","city","description","height","rome","shangai","city","description","color","am

unique_rules: 
[':-assign(15,cairo).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'storm(1)', 'storm(2)', 'storm(3)', 'storm(4)', 'storm(5)', 'storm(6)', 'storm(7)', 'storm(8)', 'storm(9)', 'storm(10)', 'storm(11)', 'storm(12)', 'storm(13)', 'storm(14)', 'storm(15)', 'storm(16)', 'storm(17)', 'storm(18)', 'storm(19)', 'storm(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'storm(1)', 'storm(2)', 'storm(3)', 'storm(4)', 'storm(5)', 'storm(6)', 'storm(7)', 'storm(8)', 'storm(9)', 'storm(10)', 'storm(11)', 'storm(12)', 'storm(13)', 'storm(14)', 'storm(15)', 'storm(16)', 'storm(17)', 'storm(18)', 'storm(19)', 'storm(20)']]


614
combination

question: 
Create an ASP solution to list all valid pairings of elements between the predicates "surname" and "delhi".

answer from file: 
combination(X,Y):-surname(X),delhi(Y).

parsed from model: 
combination(X,Y):-surname(X),delhi(Y).

facts: 
surname(1..4).delhi(1..5).

generated: 
Create an ASP solution to list all valid pairings of elements between the predicates "surname" and "delhi".
Answer: combination(X,Y):-surname(X),delhi(Y).
combination(X,Y):-delhi(X),surname(Y).
combination(X,Y):-name(X,Y).
name(X,Y):- felicità(X,Y).
 felicità(X,Y):-name(X,Y).

unique_rules: 
['combination(X,Y):-surname(X),delhi(Y).', 'combination(X,Y):-delhi(X),surname(Y).', 'combination(X,Y):-name(X,Y).', 'name(X,Y):- felicità(X,Y).', 'felicità(X,Y):-name(X,Y).']

jaccard: 1.0

AS desired: [['delhi(1)', 'delhi(2)', 'delhi(3)', 'delhi(4)', 'delhi(5)', 'surname(1)', 'surname(2)', 'surname(3)', 'surname(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['delhi(1)', 'delhi(2)', 'delhi(3)', 'delhi(4)', 'delhi(5)', 'surname(1)', 'surname(2)', 'surname(3)', 'surname(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


615
join

question: 
Compose an ASP script that addresses the problem by defining the predicate "wall_barcelona" which links each wall to the lake of barcelona", with "wall" having fields "ID","weight","barcelonaID","owner" and "barcelona" having fields "ID","quality","lake".

answer from file: 
wall_barcelona(X,Z):-wall(X,_,Y,_),barcelona(Y,_,Z).

parsed from model: 
wall_barcelona_link(X,Z):-wall(X,_,Y,_),barcelona(Y,_,Z).

facts: 
wall("ID","weight","barcelonaID","owner").barcelona("ID","quality","lake").

generated: 
Compose an ASP script that addresses the problem by defining the predicate "wall_barcelona" which links each wall to the lake of barcelona", with "wall" having fields "ID","weight","barcelonaID","owner" and "barcelona" having fields "ID","quality","lake". Define the predicate "wall_barcelona_link" that associates each wall to the lake of barcelona.
Answer: wall_barcelona_link(X,Z):-wall(X,_,Y,_),barcelona(Y,_,Z).
wall_barcelona_link(X,Z):-wall(X,_,_,_),barcelona(X,_,Z).
wall(X,_,Y,_):-wall_barcelona_link(X,Y).
wall(X,_,_,Y):-wall(X,_,Y),barcelona(Y,_,Z).
wall(X,_,Y,_):-wall(X,_,Y),barcelona(X,quality,Z).

unique_rules: 
['wall_barcelona_link(X,Z):-wall(X,_,Y,_),barcelona(Y,_,Z).', 'wall_barcelona_link(X,Z):-wall(X,_,_,_),barcelona(X,_,Z).', 'wall(X,_,Y,_):-wall_barcelona_link(X,Y).', 'wall(X,_,_,Y):-wall(X,_,Y),barcelona(Y,_,Z).', 'wall(X,_,Y,_):-wall(X,_,Y),barcelona(X,quality,Z).']

jaccard: 1.0

AS desired: [['wall("ID","weight","barcelonaID","owner")', 'barcelona("ID","quality","lake")']]
\AS obtained: [['wall("ID","weight","barcelonaID","owner")', 'barcelona("ID","quality","lake")']]


616
closure

question: 
Create an ASP code snippet to determine the transitive closure of the "mumbai" predicate, resulting in the predicate "loops".

answer from file: 
loops(X,Y):-mumbai(X,Y).
loops(X,Y):-mumbai(X,Z),loops(Z,Y).

parsed from model: 
loops(X,Y):-mumbai(X,Y).
loops(X,Y):-mumbai(X,Z),loops(Z,Y).

facts: 
mumbai(1..3, 1..4).

generated: 
Create an ASP code snippet to determine the transitive closure of the "mumbai" predicate, resulting in the predicate "loops".
Answer: loops(X,Y):-mumbai(X,Y).
loops(X,Y):-mumbai(X,Z),loops(Z,Y).
loops(X,Y):-not(mumbai(X,Y)).
loops(X,Y):-mumbai(X,Z),loops(Z,Y).
loops(X,Y):-mumbai(X,Y).
loops(X,Y):-not(mumbai(X,Y)).
loops(X,Y):-mumbai(X,Y).
loops(X,Y):-not(mumbai(X,Y)).
loops(X,Y):-mumbai(X,Y).
loops(X

unique_rules: 
['loops(X,Y):-mumbai(X,Y).', 'loops(X,Y):-mumbai(X,Z),loops(Z,Y).', 'loops(X,Y):-not(mumbai(X,Y)).']

jaccard: 1.0

AS desired: [['mumbai(1,1)', 'mumbai(1,2)', 'mumbai(1,3)', 'mumbai(1,4)', 'mumbai(2,1)', 'mumbai(2,2)', 'mumbai(2,3)', 'mumbai(2,4)', 'mumbai(3,1)', 'mumbai(3,2)', 'mumbai(3,3)', 'mumbai(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]
\AS obtained: [['mumbai(1,1)', 'mumbai(1,2)', 'mumbai(1,3)', 'mumbai(1,4)', 'mumbai(2,1)', 'mumbai(2,2)', 'mumbai(2,3)', 'mumbai(2,4)', 'mumbai(3,1)', 'mumbai(3,2)', 'mumbai(3,3)', 'mumbai(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]


617
preference

question: 
Create an ASP program that keeps the predicate "cosenza" with value "3" unlinked from "moscow". If linked, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(3,"moscow").[1@1]

parsed from model: 
:~assign(3,"moscow").[1@1]

facts: 
cosenza(1..20).

generated: 
Create an ASP program that keeps the predicate "cosenza" with value "3" unlinked from "moscow". If linked, it incurs a cost of "1" at level "1".
Answer: :~assign(3,"moscow").[1@1]
This program uses the predicate "city" with fields "ID","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author

unique_rules: 
[':~assign(3,"moscow").[1@1]']

jaccard: 1.0

AS desired: [['cosenza(1)', 'cosenza(2)', 'cosenza(3)', 'cosenza(4)', 'cosenza(5)', 'cosenza(6)', 'cosenza(7)', 'cosenza(8)', 'cosenza(9)', 'cosenza(10)', 'cosenza(11)', 'cosenza(12)', 'cosenza(13)', 'cosenza(14)', 'cosenza(15)', 'cosenza(16)', 'cosenza(17)', 'cosenza(18)', 'cosenza(19)', 'cosenza(20)']]
\AS obtained: [['cosenza(1)', 'cosenza(2)', 'cosenza(3)', 'cosenza(4)', 'cosenza(5)', 'cosenza(6)', 'cosenza(7)', 'cosenza(8)', 'cosenza(9)', 'cosenza(10)', 'cosenza(11)', 'cosenza(12)', 'cosenza(13)', 'cosenza(14)', 'cosenza(15)', 'cosenza(16)', 'cosenza(17)', 'cosenza(18)', 'cosenza(19)', 'cosenza(20)']]


618
filtering

question: 
Create an ASP solution that retrieves all values labeled "pink" within the predicate "white".

answer from file: 
select(X):-white(X,"pink").

parsed from model: 
select(X):-white(X,"pink").

facts: 
white(1..5, "pink").

generated: 
Create an ASP solution that retrieves all values labeled "pink" within the predicate "white".
Answer: select(X):-white(X,"pink").
select(X):-white(X,"city").
select(X):-white(X,"author").
select(X):-white(X,"description").
select(X):-white(X,"height").
select(X):-white(X,"name").
select(X):-white(X,"price").
select(X):-white(X,"description").
select(X):-white(X,"author").
select(X):-white(X,"city").
select(X):-white(X,"description").
select(X):-white(X,"height").
select(X):-white(X,"name").
select(X):-

unique_rules: 
['select(X):-white(X,"pink").', 'select(X):-white(X,"city").', 'select(X):-white(X,"author").', 'select(X):-white(X,"description").', 'select(X):-white(X,"height").', 'select(X):-white(X,"name").', 'select(X):-white(X,"price").', 'select(X):-']

jaccard: 1.0

AS desired: [['white(1,"pink")', 'white(2,"pink")', 'white(3,"pink")', 'white(4,"pink")', 'white(5,"pink")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['white(1,"pink")', 'white(2,"pink")', 'white(3,"pink")', 'white(4,"pink")', 'white(5,"pink")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


619
negative_filtering

question: 
Create an ASP application to fetch values associated with the predicate "wall" but not linked to the predicate "wall" and labeled "lightblue".

answer from file: 
select(X):-wall(X),not wall(X,"lightblue").

parsed from model: 
select(X):-wall(X),not wall(X,"lightblue").

facts: 
wall(1..3).wall(1,"barcelona").wall(2,"flower").wall(3,"singapore").

generated: 
Create an ASP application to fetch values associated with the predicate "wall" but not linked to the predicate "wall" and labeled "lightblue".
Answer: select(X):-wall(X),not wall(X,"lightblue").
Explanation: The predicate "wall" includes values associated with the predicate "city","height","author","name","description","city","author","name","description","height","city","author","name","description","height","city","author","name","description","height","city","author","name","description","height","city","author","name","description","height","city","author","name","description","height","city","author","name","description","height","city","author","name","description","height","city","author","name","description","height","city","author","name","description","height","city","author","name","

unique_rules: 
['select(X):-wall(X),not wall(X,"lightblue").']

jaccard: 1.0

AS desired: [['wall(1)', 'wall(2)', 'wall(3)', 'wall(1,"barcelona")', 'wall(2,"flower")', 'wall(3,"singapore")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['wall(1)', 'wall(2)', 'wall(3)', 'wall(1,"barcelona")', 'wall(2,"flower")', 'wall(3,"singapore")', 'select(1)', 'select(2)', 'select(3)']]


620
numeric_filtering

question: 
Develop an ASP application to retrieve all values connected to the predicate "flower" with a value different than 6.

answer from file: 
select(X):-flower(X,C),C!=6.

parsed from model: 
select(X):-flower(X,C),C!=6.

facts: 
flower(1..3, 1..100).

generated: 
Develop an ASP application to retrieve all values connected to the predicate "flower" with a value different than 6.
Answer: select(X):-flower(X,C),C!=6.
Explanation:
1. The predicate "flower" includes fields "ID","height","author","city","description","name","price","author","city","description","name","height","author","city","description","price","author","city","description","name","height","author","city","description","price","author","city","description","name","height","author","city","description","price","author","city","description","name","height","author","city","description","price","author","city","description","name","height","author","city","description","price","author","city","description","name","height","author","city","description

unique_rules: 
['select(X):-flower(X,C),C!=6.']

jaccard: 1.0

AS desired: [['flower(1,1)', 'flower(1,2)', 'flower(1,3)', 'flower(1,4)', 'flower(1,5)', 'flower(1,6)', 'flower(1,7)', 'flower(1,8)', 'flower(1,9)', 'flower(1,10)', 'flower(1,11)', 'flower(1,12)', 'flower(1,13)', 'flower(1,14)', 'flower(1,15)', 'flower(1,16)', 'flower(1,17)', 'flower(1,18)', 'flower(1,19)', 'flower(1,20)', 'flower(1,21)', 'flower(1,22)', 'flower(1,23)', 'flower(1,24)', 'flower(1,25)', 'flower(1,26)', 'flower(1,27)', 'flower(1,28)', 'flower(1,29)', 'flower(1,30)', 'flower(1,31)', 'flower(1,32)', 'flower(1,33)', 'flower(1,34)', 'flower(1,35)', 'flower(1,36)', 'flower(1,37)', 'flower(1,38)', 'flower(1,39)', 'flower(1,40)', 'flower(1,41)', 'flower(1,42)', 'flower(1,43)', 'flower(1,44)', 'flower(1,45)', 'flower(1,46)', 'flower(1,47)', 'flower(1,48)', 'flower(1,49)', 'flower(1,50)', 'flower(1,51)', 'flower(1,52)', 'flower(1,53)', 'flower(1,54)', 'flower(1,55)', 'flower(1,56)', 'flower(1,57)', 'flower(1,58)', 'flower(1,59)', 'flower(1,60)', 'flower(1,61)', 'flower(1,62)', 'flower(1,63)', 'flower(1,64)', 'flower(1,65)', 'flower(1,66)', 'flower(1,67)', 'flower(1,68)', 'flower(1,69)', 'flower(1,70)', 'flower(1,71)', 'flower(1,72)', 'flower(1,73)', 'flower(1,74)', 'flower(1,75)', 'flower(1,76)', 'flower(1,77)', 'flower(1,78)', 'flower(1,79)', 'flower(1,80)', 'flower(1,81)', 'flower(1,82)', 'flower(1,83)', 'flower(1,84)', 'flower(1,85)', 'flower(1,86)', 'flower(1,87)', 'flower(1,88)', 'flower(1,89)', 'flower(1,90)', 'flower(1,91)', 'flower(1,92)', 'flower(1,93)', 'flower(1,94)', 'flower(1,95)', 'flower(1,96)', 'flower(1,97)', 'flower(1,98)', 'flower(1,99)', 'flower(1,100)', 'flower(2,1)', 'flower(2,2)', 'flower(2,3)', 'flower(2,4)', 'flower(2,5)', 'flower(2,6)', 'flower(2,7)', 'flower(2,8)', 'flower(2,9)', 'flower(2,10)', 'flower(2,11)', 'flower(2,12)', 'flower(2,13)', 'flower(2,14)', 'flower(2,15)', 'flower(2,16)', 'flower(2,17)', 'flower(2,18)', 'flower(2,19)', 'flower(2,20)', 'flower(2,21)', 'flower(2,22)', 'flower(2,23)', 'flower(2,24)', 'flower(2,25)', 'flower(2,26)', 'flower(2,27)', 'flower(2,28)', 'flower(2,29)', 'flower(2,30)', 'flower(2,31)', 'flower(2,32)', 'flower(2,33)', 'flower(2,34)', 'flower(2,35)', 'flower(2,36)', 'flower(2,37)', 'flower(2,38)', 'flower(2,39)', 'flower(2,40)', 'flower(2,41)', 'flower(2,42)', 'flower(2,43)', 'flower(2,44)', 'flower(2,45)', 'flower(2,46)', 'flower(2,47)', 'flower(2,48)', 'flower(2,49)', 'flower(2,50)', 'flower(2,51)', 'flower(2,52)', 'flower(2,53)', 'flower(2,54)', 'flower(2,55)', 'flower(2,56)', 'flower(2,57)', 'flower(2,58)', 'flower(2,59)', 'flower(2,60)', 'flower(2,61)', 'flower(2,62)', 'flower(2,63)', 'flower(2,64)', 'flower(2,65)', 'flower(2,66)', 'flower(2,67)', 'flower(2,68)', 'flower(2,69)', 'flower(2,70)', 'flower(2,71)', 'flower(2,72)', 'flower(2,73)', 'flower(2,74)', 'flower(2,75)', 'flower(2,76)', 'flower(2,77)', 'flower(2,78)', 'flower(2,79)', 'flower(2,80)', 'flower(2,81)', 'flower(2,82)', 'flower(2,83)', 'flower(2,84)', 'flower(2,85)', 'flower(2,86)', 'flower(2,87)', 'flower(2,88)', 'flower(2,89)', 'flower(2,90)', 'flower(2,91)', 'flower(2,92)', 'flower(2,93)', 'flower(2,94)', 'flower(2,95)', 'flower(2,96)', 'flower(2,97)', 'flower(2,98)', 'flower(2,99)', 'flower(2,100)', 'flower(3,1)', 'flower(3,2)', 'flower(3,3)', 'flower(3,4)', 'flower(3,5)', 'flower(3,6)', 'flower(3,7)', 'flower(3,8)', 'flower(3,9)', 'flower(3,10)', 'flower(3,11)', 'flower(3,12)', 'flower(3,13)', 'flower(3,14)', 'flower(3,15)', 'flower(3,16)', 'flower(3,17)', 'flower(3,18)', 'flower(3,19)', 'flower(3,20)', 'flower(3,21)', 'flower(3,22)', 'flower(3,23)', 'flower(3,24)', 'flower(3,25)', 'flower(3,26)', 'flower(3,27)', 'flower(3,28)', 'flower(3,29)', 'flower(3,30)', 'flower(3,31)', 'flower(3,32)', 'flower(3,33)', 'flower(3,34)', 'flower(3,35)', 'flower(3,36)', 'flower(3,37)', 'flower(3,38)', 'flower(3,39)', 'flower(3,40)', 'flower(3,41)', 'flower(3,42)', 'flower(3,43)', 'flower(3,44)', 'flower(3,45)', 'flower(3,46)', 'flower(3,47)', 'flower(3,48)', 'flower(3,49)', 'flower(3,50)', 'flower(3,51)', 'flower(3,52)', 'flower(3,53)', 'flower(3,54)', 'flower(3,55)', 'flower(3,56)', 'flower(3,57)', 'flower(3,58)', 'flower(3,59)', 'flower(3,60)', 'flower(3,61)', 'flower(3,62)', 'flower(3,63)', 'flower(3,64)', 'flower(3,65)', 'flower(3,66)', 'flower(3,67)', 'flower(3,68)', 'flower(3,69)', 'flower(3,70)', 'flower(3,71)', 'flower(3,72)', 'flower(3,73)', 'flower(3,74)', 'flower(3,75)', 'flower(3,76)', 'flower(3,77)', 'flower(3,78)', 'flower(3,79)', 'flower(3,80)', 'flower(3,81)', 'flower(3,82)', 'flower(3,83)', 'flower(3,84)', 'flower(3,85)', 'flower(3,86)', 'flower(3,87)', 'flower(3,88)', 'flower(3,89)', 'flower(3,90)', 'flower(3,91)', 'flower(3,92)', 'flower(3,93)', 'flower(3,94)', 'flower(3,95)', 'flower(3,96)', 'flower(3,97)', 'flower(3,98)', 'flower(3,99)', 'flower(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['flower(1,1)', 'flower(1,2)', 'flower(1,3)', 'flower(1,4)', 'flower(1,5)', 'flower(1,6)', 'flower(1,7)', 'flower(1,8)', 'flower(1,9)', 'flower(1,10)', 'flower(1,11)', 'flower(1,12)', 'flower(1,13)', 'flower(1,14)', 'flower(1,15)', 'flower(1,16)', 'flower(1,17)', 'flower(1,18)', 'flower(1,19)', 'flower(1,20)', 'flower(1,21)', 'flower(1,22)', 'flower(1,23)', 'flower(1,24)', 'flower(1,25)', 'flower(1,26)', 'flower(1,27)', 'flower(1,28)', 'flower(1,29)', 'flower(1,30)', 'flower(1,31)', 'flower(1,32)', 'flower(1,33)', 'flower(1,34)', 'flower(1,35)', 'flower(1,36)', 'flower(1,37)', 'flower(1,38)', 'flower(1,39)', 'flower(1,40)', 'flower(1,41)', 'flower(1,42)', 'flower(1,43)', 'flower(1,44)', 'flower(1,45)', 'flower(1,46)', 'flower(1,47)', 'flower(1,48)', 'flower(1,49)', 'flower(1,50)', 'flower(1,51)', 'flower(1,52)', 'flower(1,53)', 'flower(1,54)', 'flower(1,55)', 'flower(1,56)', 'flower(1,57)', 'flower(1,58)', 'flower(1,59)', 'flower(1,60)', 'flower(1,61)', 'flower(1,62)', 'flower(1,63)', 'flower(1,64)', 'flower(1,65)', 'flower(1,66)', 'flower(1,67)', 'flower(1,68)', 'flower(1,69)', 'flower(1,70)', 'flower(1,71)', 'flower(1,72)', 'flower(1,73)', 'flower(1,74)', 'flower(1,75)', 'flower(1,76)', 'flower(1,77)', 'flower(1,78)', 'flower(1,79)', 'flower(1,80)', 'flower(1,81)', 'flower(1,82)', 'flower(1,83)', 'flower(1,84)', 'flower(1,85)', 'flower(1,86)', 'flower(1,87)', 'flower(1,88)', 'flower(1,89)', 'flower(1,90)', 'flower(1,91)', 'flower(1,92)', 'flower(1,93)', 'flower(1,94)', 'flower(1,95)', 'flower(1,96)', 'flower(1,97)', 'flower(1,98)', 'flower(1,99)', 'flower(1,100)', 'flower(2,1)', 'flower(2,2)', 'flower(2,3)', 'flower(2,4)', 'flower(2,5)', 'flower(2,6)', 'flower(2,7)', 'flower(2,8)', 'flower(2,9)', 'flower(2,10)', 'flower(2,11)', 'flower(2,12)', 'flower(2,13)', 'flower(2,14)', 'flower(2,15)', 'flower(2,16)', 'flower(2,17)', 'flower(2,18)', 'flower(2,19)', 'flower(2,20)', 'flower(2,21)', 'flower(2,22)', 'flower(2,23)', 'flower(2,24)', 'flower(2,25)', 'flower(2,26)', 'flower(2,27)', 'flower(2,28)', 'flower(2,29)', 'flower(2,30)', 'flower(2,31)', 'flower(2,32)', 'flower(2,33)', 'flower(2,34)', 'flower(2,35)', 'flower(2,36)', 'flower(2,37)', 'flower(2,38)', 'flower(2,39)', 'flower(2,40)', 'flower(2,41)', 'flower(2,42)', 'flower(2,43)', 'flower(2,44)', 'flower(2,45)', 'flower(2,46)', 'flower(2,47)', 'flower(2,48)', 'flower(2,49)', 'flower(2,50)', 'flower(2,51)', 'flower(2,52)', 'flower(2,53)', 'flower(2,54)', 'flower(2,55)', 'flower(2,56)', 'flower(2,57)', 'flower(2,58)', 'flower(2,59)', 'flower(2,60)', 'flower(2,61)', 'flower(2,62)', 'flower(2,63)', 'flower(2,64)', 'flower(2,65)', 'flower(2,66)', 'flower(2,67)', 'flower(2,68)', 'flower(2,69)', 'flower(2,70)', 'flower(2,71)', 'flower(2,72)', 'flower(2,73)', 'flower(2,74)', 'flower(2,75)', 'flower(2,76)', 'flower(2,77)', 'flower(2,78)', 'flower(2,79)', 'flower(2,80)', 'flower(2,81)', 'flower(2,82)', 'flower(2,83)', 'flower(2,84)', 'flower(2,85)', 'flower(2,86)', 'flower(2,87)', 'flower(2,88)', 'flower(2,89)', 'flower(2,90)', 'flower(2,91)', 'flower(2,92)', 'flower(2,93)', 'flower(2,94)', 'flower(2,95)', 'flower(2,96)', 'flower(2,97)', 'flower(2,98)', 'flower(2,99)', 'flower(2,100)', 'flower(3,1)', 'flower(3,2)', 'flower(3,3)', 'flower(3,4)', 'flower(3,5)', 'flower(3,6)', 'flower(3,7)', 'flower(3,8)', 'flower(3,9)', 'flower(3,10)', 'flower(3,11)', 'flower(3,12)', 'flower(3,13)', 'flower(3,14)', 'flower(3,15)', 'flower(3,16)', 'flower(3,17)', 'flower(3,18)', 'flower(3,19)', 'flower(3,20)', 'flower(3,21)', 'flower(3,22)', 'flower(3,23)', 'flower(3,24)', 'flower(3,25)', 'flower(3,26)', 'flower(3,27)', 'flower(3,28)', 'flower(3,29)', 'flower(3,30)', 'flower(3,31)', 'flower(3,32)', 'flower(3,33)', 'flower(3,34)', 'flower(3,35)', 'flower(3,36)', 'flower(3,37)', 'flower(3,38)', 'flower(3,39)', 'flower(3,40)', 'flower(3,41)', 'flower(3,42)', 'flower(3,43)', 'flower(3,44)', 'flower(3,45)', 'flower(3,46)', 'flower(3,47)', 'flower(3,48)', 'flower(3,49)', 'flower(3,50)', 'flower(3,51)', 'flower(3,52)', 'flower(3,53)', 'flower(3,54)', 'flower(3,55)', 'flower(3,56)', 'flower(3,57)', 'flower(3,58)', 'flower(3,59)', 'flower(3,60)', 'flower(3,61)', 'flower(3,62)', 'flower(3,63)', 'flower(3,64)', 'flower(3,65)', 'flower(3,66)', 'flower(3,67)', 'flower(3,68)', 'flower(3,69)', 'flower(3,70)', 'flower(3,71)', 'flower(3,72)', 'flower(3,73)', 'flower(3,74)', 'flower(3,75)', 'flower(3,76)', 'flower(3,77)', 'flower(3,78)', 'flower(3,79)', 'flower(3,80)', 'flower(3,81)', 'flower(3,82)', 'flower(3,83)', 'flower(3,84)', 'flower(3,85)', 'flower(3,86)', 'flower(3,87)', 'flower(3,88)', 'flower(3,89)', 'flower(3,90)', 'flower(3,91)', 'flower(3,92)', 'flower(3,93)', 'flower(3,94)', 'flower(3,95)', 'flower(3,96)', 'flower(3,97)', 'flower(3,98)', 'flower(3,99)', 'flower(3,100)', 'select(1)', 'select(2)', 'select(3)']]


621
assignment

question: 
Develop an ASP script that ensures each element, as specified by the predicate "butterfly", receives exactly one label from the set "storm","singapore","weight".

answer from file: 
assign(X,"storm")|assign(X,"singapore")|assign(X,"weight"):-butterfly(X).

parsed from model: 
assign(X,"storm")|assign(X,"singapore")|assign(X,"weight"):- arrivant(X,"bike").

facts: 
butterfly(1..5).

generated: 
Develop an ASP script that ensures each element, as specified by the predicate "butterfly", receives exactly one label from the set "storm","singapore","weight".
Answer: assign(X,"storm")|assign(X,"singapore")|assign(X,"weight"):- arrivant(X,"bike").
assign(X,"bike"):- arrivant(X,"height").
assign(X,"height"):- arrivant(X,"bike").
assign(X,"bike"):- arrivant(X,"height").
assign(X,"height"):- arrivant(X,"bike").
```
The predicate "bike" includes elements that are not associated with the labels "height","rome","street","florence","color","description","author","city","shangai","height","moto","description","author","city","shangai","height","description","author","city","shangai","height

unique_rules: 
['assign(X,"storm")|assign(X,"singapore")|assign(X,"weight"):- arrivant(X,"bike").', 'assign(X,"bike"):- arrivant(X,"height").', 'assign(X,"height"):- arrivant(X,"bike").']

jaccard: 0.0

AS desired: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)', 'assign(1,"weight")', 'assign(2,"weight")', 'assign(3,"weight")', 'assign(4,"weight")', 'assign(5,"weight")']]
\AS obtained: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)']]


622
constraint

question: 
Formulate an ASP script to ensure the "desk" predicate having value 1 is not associated with the label "laptop".

answer from file: 
:-assign(1,laptop).

parsed from model: 
:-assign(1,laptop).

facts: 
desk(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-desk(X).

generated: 
Formulate an ASP script to ensure the "desk" predicate having value 1 is not associated with the label "laptop".
Answer: :-assign(1,laptop).
Explanation: The predicate "desk" having value 1 is not associated with the label " arrivant".
The predicate " arrivant" having value 1 is associated with the label "bike".
The predicate "bike" having value 1 is not associated with the label "description".
The predicate "description" having value 1 is associated with the label "description".
So, the script assigns 1 to the label " arrivant" only if the "desk" predicate having value 1 is not associated with the label "description".

unique_rules: 
[':-assign(1,laptop).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'desk(1)', 'desk(2)', 'desk(3)', 'desk(4)', 'desk(5)', 'desk(6)', 'desk(7)', 'desk(8)', 'desk(9)', 'desk(10)', 'desk(11)', 'desk(12)', 'desk(13)', 'desk(14)', 'desk(15)', 'desk(16)', 'desk(17)', 'desk(18)', 'desk(19)', 'desk(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'desk(1)', 'desk(2)', 'desk(3)', 'desk(4)', 'desk(5)', 'desk(6)', 'desk(7)', 'desk(8)', 'desk(9)', 'desk(10)', 'desk(11)', 'desk(12)', 'desk(13)', 'desk(14)', 'desk(15)', 'desk(16)', 'desk(17)', 'desk(18)', 'desk(19)', 'desk(20)']]


623
combination

question: 
Create an ASP program to calculate the Cartesian product of elements from sets represented by the predicates "quality" and "delhi".

answer from file: 
combination(X,Y):-quality(X),delhi(Y).

parsed from model: 
combination(X,Y):-quality(X),delhi(Y).

facts: 
quality(1..4).delhi(1..5).

generated: 
Create an ASP program to calculate the Cartesian product of elements from sets represented by the predicates "quality" and "delhi".
Answer: combination(X,Y):-quality(X),delhi(Y).
combination(X,Y):-quality(X),not delhi(Y).
combination(X,Y):-not quality(X),delhi(Y).
combination(X,Y):-quality(X),delhi(Y).

unique_rules: 
['combination(X,Y):-quality(X),delhi(Y).', 'combination(X,Y):-quality(X),not delhi(Y).', 'combination(X,Y):-not quality(X),delhi(Y).']

jaccard: 1.0

AS desired: [['delhi(1)', 'delhi(2)', 'delhi(3)', 'delhi(4)', 'delhi(5)', 'quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['delhi(1)', 'delhi(2)', 'delhi(3)', 'delhi(4)', 'delhi(5)', 'quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


624
join

question: 
Draft an ASP script to define the predicate "chair_surname" that associates each chair with the owner of surname, given "chair" has fields "ID","weight","surnameID","surname" and "surname" has fields "ID","owner","lake","quality".

answer from file: 
chair_surname(X,Z):-chair(X,_,Y,_),surname(Y,Z,_,_).

parsed from model: 
chair_surname(X,Z):-chair(X,_,Y,_),author(Y,Z,_,_).

facts: 
chair("ID","weight","surnameID","surname").surname("ID","owner","lake","quality").

generated: 
Draft an ASP script to define the predicate "chair_surname" that associates each chair with the owner of surname, given "chair" has fields "ID","weight","surnameID","surname" and "surname" has fields "ID","owner","lake","quality". Define the predicate "chair_surname" that associates each chair with the owner of the surname "author".
Answer: chair_surname(X,Z):-chair(X,_,Y,_),author(Y,Z,_,_).
chair_surname(X,Z):-chair(X,_,Z,_),author(Z,_,_,_).

unique_rules: 
['chair_surname(X,Z):-chair(X,_,Y,_),author(Y,Z,_,_).', 'chair_surname(X,Z):-chair(X,_,Z,_),author(Z,_,_,_).']

jaccard: 1.0

AS desired: [['chair("ID","weight","surnameID","surname")', 'surname("ID","owner","lake","quality")']]
\AS obtained: [['chair("ID","weight","surnameID","surname")', 'surname("ID","owner","lake","quality")']]


625
closure

question: 
Develop an ASP application that constructs the "trains" predicate based on the transitive closure of the "owner" predicate.

answer from file: 
trains(X,Y):-owner(X,Y).
trains(X,Y):-owner(X,Z),trains(Z,Y).

parsed from model: 
trains(X,Y):-owner(X,Y).
trains(X,Y):-owner(X,Z),trains(Z,Y).

facts: 
owner(1..3, 1..4).

generated: 
Develop an ASP application that constructs the "trains" predicate based on the transitive closure of the "owner" predicate.
Answer: trains(X,Y):-owner(X,Y).
trains(X,Y):-owner(X,Z),trains(Z,Y).
trains(X,Y):-owner(X,Z),not owner(Z,Y).
owner(X,Y):-city(X,Y).
city(X,Y):-street(X,Y).
street(X,Y):-bike(X,Y).
bike(X,Y):-city(X,Y).

unique_rules: 
['trains(X,Y):-owner(X,Y).', 'trains(X,Y):-owner(X,Z),trains(Z,Y).', 'trains(X,Y):-owner(X,Z),not owner(Z,Y).', 'owner(X,Y):-city(X,Y).', 'city(X,Y):-street(X,Y).', 'street(X,Y):-bike(X,Y).', 'bike(X,Y):-city(X,Y).']

jaccard: 1.0

AS desired: [['owner(1,1)', 'owner(1,2)', 'owner(1,3)', 'owner(1,4)', 'owner(2,1)', 'owner(2,2)', 'owner(2,3)', 'owner(2,4)', 'owner(3,1)', 'owner(3,2)', 'owner(3,3)', 'owner(3,4)', 'trains(1,1)', 'trains(1,2)', 'trains(1,3)', 'trains(1,4)', 'trains(2,1)', 'trains(2,2)', 'trains(2,3)', 'trains(2,4)', 'trains(3,1)', 'trains(3,2)', 'trains(3,3)', 'trains(3,4)']]
\AS obtained: [['owner(1,1)', 'owner(1,2)', 'owner(1,3)', 'owner(1,4)', 'owner(2,1)', 'owner(2,2)', 'owner(2,3)', 'owner(2,4)', 'owner(3,1)', 'owner(3,2)', 'owner(3,3)', 'owner(3,4)', 'trains(1,1)', 'trains(1,2)', 'trains(1,3)', 'trains(1,4)', 'trains(2,1)', 'trains(2,2)', 'trains(2,3)', 'trains(2,4)', 'trains(3,1)', 'trains(3,2)', 'trains(3,3)', 'trains(3,4)']]


626
preference

question: 
Craft an ASP solution to prevent the linking of the "lake" predicate with value "14" to "black". Any link incurs a cost of "1" at level "1".

answer from file: 
:~assign(14,"black").[1@1]

parsed from model: 
:~assign(14,"black").[1@1]

facts: 
lake(1..20).

generated: 
Craft an ASP solution to prevent the linking of the "lake" predicate with value "14" to "black". Any link incurs a cost of "1" at level "1".
Answer: :~assign(14,"black").[1@1]
The predicate "bike" includes fields "ID","city","author","name","price","description","author","city","name","price","description","author","city","name","price","description","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","

unique_rules: 
[':~assign(14,"black").[1@1]']

jaccard: 1.0

AS desired: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lake(6)', 'lake(7)', 'lake(8)', 'lake(9)', 'lake(10)', 'lake(11)', 'lake(12)', 'lake(13)', 'lake(14)', 'lake(15)', 'lake(16)', 'lake(17)', 'lake(18)', 'lake(19)', 'lake(20)']]
\AS obtained: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lake(6)', 'lake(7)', 'lake(8)', 'lake(9)', 'lake(10)', 'lake(11)', 'lake(12)', 'lake(13)', 'lake(14)', 'lake(15)', 'lake(16)', 'lake(17)', 'lake(18)', 'lake(19)', 'lake(20)']]


627
filtering

question: 
Produce an ASP program to gather and retrieve values linked to the "wall" label in the "moscow" predicate.

answer from file: 
select(X):-moscow(X,"wall").

parsed from model: 
select(X):-moscow(X,"wall").

facts: 
moscow(1..5, "wall").

generated: 
Produce an ASP program to gather and retrieve values linked to the "wall" label in the "moscow" predicate.
Answer: select(X):-moscow(X,"wall").
select(X):-moscow(X,"city").
select(X):-moscow(X,"author").
moscow(X,"city").
moscow(X,"author").
moscow(X,"wall").

unique_rules: 
['select(X):-moscow(X,"wall").', 'select(X):-moscow(X,"city").', 'select(X):-moscow(X,"author").']

jaccard: 1.0

AS desired: [['moscow(1,"wall")', 'moscow(2,"wall")', 'moscow(3,"wall")', 'moscow(4,"wall")', 'moscow(5,"wall")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['moscow(1,"wall")', 'moscow(2,"wall")', 'moscow(3,"wall")', 'moscow(4,"wall")', 'moscow(5,"wall")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


628
negative_filtering

question: 
Draft an ASP solution to identify values associated with the predicate "desk" but not tied to the predicate "cosenza" and labeled "weight".

answer from file: 
select(X):-desk(X),not cosenza(X,"weight").

parsed from model: 
select(X):-desk(X),not cosenza(X,"weight").

facts: 
desk(1..3).cosenza(1,"chicago").cosenza(2,"white").cosenza(3,"moscow").

generated: 
Draft an ASP solution to identify values associated with the predicate "desk" but not tied to the predicate "cosenza" and labeled "weight".
Answer: select(X):-desk(X),not cosenza(X,"weight").
Explanation: The predicate "desk" includes values associated with the predicate "height","moto","author","city","description","name","author","city","description","height","moto","author","city","description","name","author","city","description","height","moto","author","city","description","name","author","city","description","height","moto","author","city","description","name","author","city","description","height","moto","author","city","description","name","author","city","description","height","moto","author","city","description","name","author","city","description","height","moto","author","city","

unique_rules: 
['select(X):-desk(X),not cosenza(X,"weight").']

jaccard: 1.0

AS desired: [['desk(1)', 'desk(2)', 'desk(3)', 'cosenza(1,"chicago")', 'cosenza(2,"white")', 'cosenza(3,"moscow")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['desk(1)', 'desk(2)', 'desk(3)', 'cosenza(1,"chicago")', 'cosenza(2,"white")', 'cosenza(3,"moscow")', 'select(1)', 'select(2)', 'select(3)']]


629
numeric_filtering

question: 
Formulate an ASP script to identify values tied to the predicate "storm" with a value different than 81.

answer from file: 
select(X):-storm(X,C),C!=81.

parsed from model: 
select(X):-storm(X,C),C!=81.

facts: 
storm(1..3, 1..100).

generated: 
Formulate an ASP script to identify values tied to the predicate "storm" with a value different than 81.
Answer: select(X):-storm(X,C),C!=81.
select(X):-storm(X,C),C==81.
The predicate "storm" includes fields "ID","height","author","name","city","description","author","height","city","description","name","price","author","description","city","height","description","name","price","author","city","description","name","height","city","description","name","price","author","city","description","name","height","city","description","name","price","author","city","description","name","height","city","description","name","price","author","city","description","name","height","city","description","name

unique_rules: 
['select(X):-storm(X,C),C!=81.', 'select(X):-storm(X,C),C==81.']

jaccard: 1.0

AS desired: [['storm(1,1)', 'storm(1,2)', 'storm(1,3)', 'storm(1,4)', 'storm(1,5)', 'storm(1,6)', 'storm(1,7)', 'storm(1,8)', 'storm(1,9)', 'storm(1,10)', 'storm(1,11)', 'storm(1,12)', 'storm(1,13)', 'storm(1,14)', 'storm(1,15)', 'storm(1,16)', 'storm(1,17)', 'storm(1,18)', 'storm(1,19)', 'storm(1,20)', 'storm(1,21)', 'storm(1,22)', 'storm(1,23)', 'storm(1,24)', 'storm(1,25)', 'storm(1,26)', 'storm(1,27)', 'storm(1,28)', 'storm(1,29)', 'storm(1,30)', 'storm(1,31)', 'storm(1,32)', 'storm(1,33)', 'storm(1,34)', 'storm(1,35)', 'storm(1,36)', 'storm(1,37)', 'storm(1,38)', 'storm(1,39)', 'storm(1,40)', 'storm(1,41)', 'storm(1,42)', 'storm(1,43)', 'storm(1,44)', 'storm(1,45)', 'storm(1,46)', 'storm(1,47)', 'storm(1,48)', 'storm(1,49)', 'storm(1,50)', 'storm(1,51)', 'storm(1,52)', 'storm(1,53)', 'storm(1,54)', 'storm(1,55)', 'storm(1,56)', 'storm(1,57)', 'storm(1,58)', 'storm(1,59)', 'storm(1,60)', 'storm(1,61)', 'storm(1,62)', 'storm(1,63)', 'storm(1,64)', 'storm(1,65)', 'storm(1,66)', 'storm(1,67)', 'storm(1,68)', 'storm(1,69)', 'storm(1,70)', 'storm(1,71)', 'storm(1,72)', 'storm(1,73)', 'storm(1,74)', 'storm(1,75)', 'storm(1,76)', 'storm(1,77)', 'storm(1,78)', 'storm(1,79)', 'storm(1,80)', 'storm(1,81)', 'storm(1,82)', 'storm(1,83)', 'storm(1,84)', 'storm(1,85)', 'storm(1,86)', 'storm(1,87)', 'storm(1,88)', 'storm(1,89)', 'storm(1,90)', 'storm(1,91)', 'storm(1,92)', 'storm(1,93)', 'storm(1,94)', 'storm(1,95)', 'storm(1,96)', 'storm(1,97)', 'storm(1,98)', 'storm(1,99)', 'storm(1,100)', 'storm(2,1)', 'storm(2,2)', 'storm(2,3)', 'storm(2,4)', 'storm(2,5)', 'storm(2,6)', 'storm(2,7)', 'storm(2,8)', 'storm(2,9)', 'storm(2,10)', 'storm(2,11)', 'storm(2,12)', 'storm(2,13)', 'storm(2,14)', 'storm(2,15)', 'storm(2,16)', 'storm(2,17)', 'storm(2,18)', 'storm(2,19)', 'storm(2,20)', 'storm(2,21)', 'storm(2,22)', 'storm(2,23)', 'storm(2,24)', 'storm(2,25)', 'storm(2,26)', 'storm(2,27)', 'storm(2,28)', 'storm(2,29)', 'storm(2,30)', 'storm(2,31)', 'storm(2,32)', 'storm(2,33)', 'storm(2,34)', 'storm(2,35)', 'storm(2,36)', 'storm(2,37)', 'storm(2,38)', 'storm(2,39)', 'storm(2,40)', 'storm(2,41)', 'storm(2,42)', 'storm(2,43)', 'storm(2,44)', 'storm(2,45)', 'storm(2,46)', 'storm(2,47)', 'storm(2,48)', 'storm(2,49)', 'storm(2,50)', 'storm(2,51)', 'storm(2,52)', 'storm(2,53)', 'storm(2,54)', 'storm(2,55)', 'storm(2,56)', 'storm(2,57)', 'storm(2,58)', 'storm(2,59)', 'storm(2,60)', 'storm(2,61)', 'storm(2,62)', 'storm(2,63)', 'storm(2,64)', 'storm(2,65)', 'storm(2,66)', 'storm(2,67)', 'storm(2,68)', 'storm(2,69)', 'storm(2,70)', 'storm(2,71)', 'storm(2,72)', 'storm(2,73)', 'storm(2,74)', 'storm(2,75)', 'storm(2,76)', 'storm(2,77)', 'storm(2,78)', 'storm(2,79)', 'storm(2,80)', 'storm(2,81)', 'storm(2,82)', 'storm(2,83)', 'storm(2,84)', 'storm(2,85)', 'storm(2,86)', 'storm(2,87)', 'storm(2,88)', 'storm(2,89)', 'storm(2,90)', 'storm(2,91)', 'storm(2,92)', 'storm(2,93)', 'storm(2,94)', 'storm(2,95)', 'storm(2,96)', 'storm(2,97)', 'storm(2,98)', 'storm(2,99)', 'storm(2,100)', 'storm(3,1)', 'storm(3,2)', 'storm(3,3)', 'storm(3,4)', 'storm(3,5)', 'storm(3,6)', 'storm(3,7)', 'storm(3,8)', 'storm(3,9)', 'storm(3,10)', 'storm(3,11)', 'storm(3,12)', 'storm(3,13)', 'storm(3,14)', 'storm(3,15)', 'storm(3,16)', 'storm(3,17)', 'storm(3,18)', 'storm(3,19)', 'storm(3,20)', 'storm(3,21)', 'storm(3,22)', 'storm(3,23)', 'storm(3,24)', 'storm(3,25)', 'storm(3,26)', 'storm(3,27)', 'storm(3,28)', 'storm(3,29)', 'storm(3,30)', 'storm(3,31)', 'storm(3,32)', 'storm(3,33)', 'storm(3,34)', 'storm(3,35)', 'storm(3,36)', 'storm(3,37)', 'storm(3,38)', 'storm(3,39)', 'storm(3,40)', 'storm(3,41)', 'storm(3,42)', 'storm(3,43)', 'storm(3,44)', 'storm(3,45)', 'storm(3,46)', 'storm(3,47)', 'storm(3,48)', 'storm(3,49)', 'storm(3,50)', 'storm(3,51)', 'storm(3,52)', 'storm(3,53)', 'storm(3,54)', 'storm(3,55)', 'storm(3,56)', 'storm(3,57)', 'storm(3,58)', 'storm(3,59)', 'storm(3,60)', 'storm(3,61)', 'storm(3,62)', 'storm(3,63)', 'storm(3,64)', 'storm(3,65)', 'storm(3,66)', 'storm(3,67)', 'storm(3,68)', 'storm(3,69)', 'storm(3,70)', 'storm(3,71)', 'storm(3,72)', 'storm(3,73)', 'storm(3,74)', 'storm(3,75)', 'storm(3,76)', 'storm(3,77)', 'storm(3,78)', 'storm(3,79)', 'storm(3,80)', 'storm(3,81)', 'storm(3,82)', 'storm(3,83)', 'storm(3,84)', 'storm(3,85)', 'storm(3,86)', 'storm(3,87)', 'storm(3,88)', 'storm(3,89)', 'storm(3,90)', 'storm(3,91)', 'storm(3,92)', 'storm(3,93)', 'storm(3,94)', 'storm(3,95)', 'storm(3,96)', 'storm(3,97)', 'storm(3,98)', 'storm(3,99)', 'storm(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['storm(1,1)', 'storm(1,2)', 'storm(1,3)', 'storm(1,4)', 'storm(1,5)', 'storm(1,6)', 'storm(1,7)', 'storm(1,8)', 'storm(1,9)', 'storm(1,10)', 'storm(1,11)', 'storm(1,12)', 'storm(1,13)', 'storm(1,14)', 'storm(1,15)', 'storm(1,16)', 'storm(1,17)', 'storm(1,18)', 'storm(1,19)', 'storm(1,20)', 'storm(1,21)', 'storm(1,22)', 'storm(1,23)', 'storm(1,24)', 'storm(1,25)', 'storm(1,26)', 'storm(1,27)', 'storm(1,28)', 'storm(1,29)', 'storm(1,30)', 'storm(1,31)', 'storm(1,32)', 'storm(1,33)', 'storm(1,34)', 'storm(1,35)', 'storm(1,36)', 'storm(1,37)', 'storm(1,38)', 'storm(1,39)', 'storm(1,40)', 'storm(1,41)', 'storm(1,42)', 'storm(1,43)', 'storm(1,44)', 'storm(1,45)', 'storm(1,46)', 'storm(1,47)', 'storm(1,48)', 'storm(1,49)', 'storm(1,50)', 'storm(1,51)', 'storm(1,52)', 'storm(1,53)', 'storm(1,54)', 'storm(1,55)', 'storm(1,56)', 'storm(1,57)', 'storm(1,58)', 'storm(1,59)', 'storm(1,60)', 'storm(1,61)', 'storm(1,62)', 'storm(1,63)', 'storm(1,64)', 'storm(1,65)', 'storm(1,66)', 'storm(1,67)', 'storm(1,68)', 'storm(1,69)', 'storm(1,70)', 'storm(1,71)', 'storm(1,72)', 'storm(1,73)', 'storm(1,74)', 'storm(1,75)', 'storm(1,76)', 'storm(1,77)', 'storm(1,78)', 'storm(1,79)', 'storm(1,80)', 'storm(1,81)', 'storm(1,82)', 'storm(1,83)', 'storm(1,84)', 'storm(1,85)', 'storm(1,86)', 'storm(1,87)', 'storm(1,88)', 'storm(1,89)', 'storm(1,90)', 'storm(1,91)', 'storm(1,92)', 'storm(1,93)', 'storm(1,94)', 'storm(1,95)', 'storm(1,96)', 'storm(1,97)', 'storm(1,98)', 'storm(1,99)', 'storm(1,100)', 'storm(2,1)', 'storm(2,2)', 'storm(2,3)', 'storm(2,4)', 'storm(2,5)', 'storm(2,6)', 'storm(2,7)', 'storm(2,8)', 'storm(2,9)', 'storm(2,10)', 'storm(2,11)', 'storm(2,12)', 'storm(2,13)', 'storm(2,14)', 'storm(2,15)', 'storm(2,16)', 'storm(2,17)', 'storm(2,18)', 'storm(2,19)', 'storm(2,20)', 'storm(2,21)', 'storm(2,22)', 'storm(2,23)', 'storm(2,24)', 'storm(2,25)', 'storm(2,26)', 'storm(2,27)', 'storm(2,28)', 'storm(2,29)', 'storm(2,30)', 'storm(2,31)', 'storm(2,32)', 'storm(2,33)', 'storm(2,34)', 'storm(2,35)', 'storm(2,36)', 'storm(2,37)', 'storm(2,38)', 'storm(2,39)', 'storm(2,40)', 'storm(2,41)', 'storm(2,42)', 'storm(2,43)', 'storm(2,44)', 'storm(2,45)', 'storm(2,46)', 'storm(2,47)', 'storm(2,48)', 'storm(2,49)', 'storm(2,50)', 'storm(2,51)', 'storm(2,52)', 'storm(2,53)', 'storm(2,54)', 'storm(2,55)', 'storm(2,56)', 'storm(2,57)', 'storm(2,58)', 'storm(2,59)', 'storm(2,60)', 'storm(2,61)', 'storm(2,62)', 'storm(2,63)', 'storm(2,64)', 'storm(2,65)', 'storm(2,66)', 'storm(2,67)', 'storm(2,68)', 'storm(2,69)', 'storm(2,70)', 'storm(2,71)', 'storm(2,72)', 'storm(2,73)', 'storm(2,74)', 'storm(2,75)', 'storm(2,76)', 'storm(2,77)', 'storm(2,78)', 'storm(2,79)', 'storm(2,80)', 'storm(2,81)', 'storm(2,82)', 'storm(2,83)', 'storm(2,84)', 'storm(2,85)', 'storm(2,86)', 'storm(2,87)', 'storm(2,88)', 'storm(2,89)', 'storm(2,90)', 'storm(2,91)', 'storm(2,92)', 'storm(2,93)', 'storm(2,94)', 'storm(2,95)', 'storm(2,96)', 'storm(2,97)', 'storm(2,98)', 'storm(2,99)', 'storm(2,100)', 'storm(3,1)', 'storm(3,2)', 'storm(3,3)', 'storm(3,4)', 'storm(3,5)', 'storm(3,6)', 'storm(3,7)', 'storm(3,8)', 'storm(3,9)', 'storm(3,10)', 'storm(3,11)', 'storm(3,12)', 'storm(3,13)', 'storm(3,14)', 'storm(3,15)', 'storm(3,16)', 'storm(3,17)', 'storm(3,18)', 'storm(3,19)', 'storm(3,20)', 'storm(3,21)', 'storm(3,22)', 'storm(3,23)', 'storm(3,24)', 'storm(3,25)', 'storm(3,26)', 'storm(3,27)', 'storm(3,28)', 'storm(3,29)', 'storm(3,30)', 'storm(3,31)', 'storm(3,32)', 'storm(3,33)', 'storm(3,34)', 'storm(3,35)', 'storm(3,36)', 'storm(3,37)', 'storm(3,38)', 'storm(3,39)', 'storm(3,40)', 'storm(3,41)', 'storm(3,42)', 'storm(3,43)', 'storm(3,44)', 'storm(3,45)', 'storm(3,46)', 'storm(3,47)', 'storm(3,48)', 'storm(3,49)', 'storm(3,50)', 'storm(3,51)', 'storm(3,52)', 'storm(3,53)', 'storm(3,54)', 'storm(3,55)', 'storm(3,56)', 'storm(3,57)', 'storm(3,58)', 'storm(3,59)', 'storm(3,60)', 'storm(3,61)', 'storm(3,62)', 'storm(3,63)', 'storm(3,64)', 'storm(3,65)', 'storm(3,66)', 'storm(3,67)', 'storm(3,68)', 'storm(3,69)', 'storm(3,70)', 'storm(3,71)', 'storm(3,72)', 'storm(3,73)', 'storm(3,74)', 'storm(3,75)', 'storm(3,76)', 'storm(3,77)', 'storm(3,78)', 'storm(3,79)', 'storm(3,80)', 'storm(3,81)', 'storm(3,82)', 'storm(3,83)', 'storm(3,84)', 'storm(3,85)', 'storm(3,86)', 'storm(3,87)', 'storm(3,88)', 'storm(3,89)', 'storm(3,90)', 'storm(3,91)', 'storm(3,92)', 'storm(3,93)', 'storm(3,94)', 'storm(3,95)', 'storm(3,96)', 'storm(3,97)', 'storm(3,98)', 'storm(3,99)', 'storm(3,100)', 'select(1)', 'select(2)', 'select(3)']]


630
assignment

question: 
Develop an ASP solution to map one specific label from "hair","toronto","surname","butterfly" to each element defined by the predicate "surname".

answer from file: 
assign(X,"hair")|assign(X,"toronto")|assign(X,"surname")|assign(X,"butterfly"):-surname(X).

parsed from model: 


facts: 
surname(1..5).

generated: 
Develop an ASP solution to map one specific label from "hair","toronto","surname","butterfly" to each element defined by the predicate "surname".
Answer: assign(X,"hair")|assign(X,"toronto")|assign(X,"surname")|assign(X," arrivant")
assign(X,"city")|assign(X,"author")|assign(X,"moto")|assign(X,"rome")
where X is the element defined by the predicate "name".
The predicate "name" includes fields "ID","city","author","moto","rome","description","author","name","city","description","author","moto","description","city","author","name","description","city","description","author","moto","description","city","author","name","description","city","description","author","moto","description","city","author","name","description","

unique_rules: 
[]

jaccard: 0.0

AS desired: [['surname(1)', 'surname(2)', 'surname(3)', 'surname(4)', 'surname(5)', 'assign(1,"surname")', 'assign(2,"butterfly")', 'assign(3,"surname")', 'assign(4,"butterfly")', 'assign(5,"butterfly")']]
\AS obtained: [['surname(1)', 'surname(2)', 'surname(3)', 'surname(4)', 'surname(5)']]


631
constraint

question: 
Craft an ASP application to avoid mapping the "chicago" predicate with value 4 to the label "singapore".

answer from file: 
:-assign(4,singapore).

parsed from model: 
:-assign(4,singapore).

facts: 
chicago(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-chicago(X).

generated: 
Craft an ASP application to avoid mapping the "chicago" predicate with value 4 to the label "singapore".
Answer: :-assign(4,singapore).
Explanation: The predicate "city" includes the "chicago" label, and the predicate "shangai" contains the "city" label. The predicate "amsterdam" avoids assigning the "city" label to the "shangai" predicate.

unique_rules: 
[':-assign(4,singapore).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'chicago(5)', 'chicago(6)', 'chicago(7)', 'chicago(8)', 'chicago(9)', 'chicago(10)', 'chicago(11)', 'chicago(12)', 'chicago(13)', 'chicago(14)', 'chicago(15)', 'chicago(16)', 'chicago(17)', 'chicago(18)', 'chicago(19)', 'chicago(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'chicago(5)', 'chicago(6)', 'chicago(7)', 'chicago(8)', 'chicago(9)', 'chicago(10)', 'chicago(11)', 'chicago(12)', 'chicago(13)', 'chicago(14)', 'chicago(15)', 'chicago(16)', 'chicago(17)', 'chicago(18)', 'chicago(19)', 'chicago(20)']]


632
combination

question: 
Craft an ASP application that calculates the Cartesian product of elements between the predicates "flower" and "surname".

answer from file: 
combination(X,Y):-flower(X),surname(Y).

parsed from model: 
combination(X,Y):-flower(X),surname(Y).

facts: 
flower(1..4).surname(1..5).

generated: 
Craft an ASP application that calculates the Cartesian product of elements between the predicates "flower" and "surname".
Answer: combination(X,Y):-flower(X),surname(Y).
combination(X,Y):-flower(X),not surname(Y).
combination(X,Y):-not flower(X),surname(Y).

unique_rules: 
['combination(X,Y):-flower(X),surname(Y).', 'combination(X,Y):-flower(X),not surname(Y).', 'combination(X,Y):-not flower(X),surname(Y).']

jaccard: 1.0

AS desired: [['surname(1)', 'surname(2)', 'surname(3)', 'surname(4)', 'surname(5)', 'flower(1)', 'flower(2)', 'flower(3)', 'flower(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['surname(1)', 'surname(2)', 'surname(3)', 'surname(4)', 'surname(5)', 'flower(1)', 'flower(2)', 'flower(3)', 'flower(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


633
join

question: 
Design an ASP application to solve the problem by defining the predicate "lightblue_cosenza" which links each lightblue to the lake of cosenza, using fields "ID","quality","cosenzaID","lake","weight" for "lightblue" and fields "ID","lake" for "cosenza".

answer from file: 
lightblue_cosenza(X,Z):-lightblue(X,_,Y,_,_),cosenza(Y,Z).

parsed from model: 
lightblue_cosenza_table(X,Z):-lightblue(X,_,Y,Z,_),cosenza(Y,Z).

facts: 
lightblue("ID","quality","cosenzaID","lake","weight").cosenza("ID","lake").

generated: 
Design an ASP application to solve the problem by defining the predicate "lightblue_cosenza" which links each lightblue to the lake of cosenza, using fields "ID","quality","cosenzaID","lake","weight" for "lightblue" and fields "ID","lake" for "cosenza". Define the predicate "lightblue_cosenza_table" which links each lightblue to the lake of cosenza.
Answer: lightblue_cosenza_table(X,Z):-lightblue(X,_,Y,Z,_),cosenza(Y,Z).
lightblue_cosenza_table(X,Z):-lightblue(X,_,Y,_),not cosenza(Y,Z).
lightblue(X,_,Y,Z,_):-lightblue_cosenza(X,Z).

unique_rules: 
['lightblue_cosenza_table(X,Z):-lightblue(X,_,Y,Z,_),cosenza(Y,Z).', 'lightblue_cosenza_table(X,Z):-lightblue(X,_,Y,_),not cosenza(Y,Z).', 'lightblue(X,_,Y,Z,_):-lightblue_cosenza(X,Z).']

jaccard: 1.0

AS desired: [['cosenza("ID","lake")', 'lightblue("ID","quality","cosenzaID","lake","weight")']]
\AS obtained: [['cosenza("ID","lake")', 'lightblue("ID","quality","cosenzaID","lake","weight")']]


634
closure

question: 
Write an ASP application to compute the transitive closure of the "strength" predicate, resulting in the definition of the "trains" predicate.

answer from file: 
trains(X,Y):-strength(X,Y).
trains(X,Y):-strength(X,Z),trains(Z,Y).

parsed from model: 
trains(X,Y):-strength(X,Y).
trains(X,Y):-strength(X,Z),trains(Z,Y).

facts: 
strength(1..3, 1..4).

generated: 
Write an ASP application to compute the transitive closure of the "strength" predicate, resulting in the definition of the "trains" predicate.
Answer: trains(X,Y):-strength(X,Y).
trains(X,Y):-strength(X,Z),trains(Z,Y).
trains(X,Y):-strength(X,Z),not trains(Z,Y).
strength(X,Y):-height(X,Y).
height(X,Y):-height(X,Z),strength(Z,Y).

unique_rules: 
['trains(X,Y):-strength(X,Y).', 'trains(X,Y):-strength(X,Z),trains(Z,Y).', 'trains(X,Y):-strength(X,Z),not trains(Z,Y).', 'strength(X,Y):-height(X,Y).', 'height(X,Y):-height(X,Z),strength(Z,Y).']

jaccard: 1.0

AS desired: [['strength(1,1)', 'strength(1,2)', 'strength(1,3)', 'strength(1,4)', 'strength(2,1)', 'strength(2,2)', 'strength(2,3)', 'strength(2,4)', 'strength(3,1)', 'strength(3,2)', 'strength(3,3)', 'strength(3,4)', 'trains(1,1)', 'trains(1,2)', 'trains(1,3)', 'trains(1,4)', 'trains(2,1)', 'trains(2,2)', 'trains(2,3)', 'trains(2,4)', 'trains(3,1)', 'trains(3,2)', 'trains(3,3)', 'trains(3,4)']]
\AS obtained: [['strength(1,1)', 'strength(1,2)', 'strength(1,3)', 'strength(1,4)', 'strength(2,1)', 'strength(2,2)', 'strength(2,3)', 'strength(2,4)', 'strength(3,1)', 'strength(3,2)', 'strength(3,3)', 'strength(3,4)', 'trains(1,1)', 'trains(1,2)', 'trains(1,3)', 'trains(1,4)', 'trains(2,1)', 'trains(2,2)', 'trains(2,3)', 'trains(2,4)', 'trains(3,1)', 'trains(3,2)', 'trains(3,3)', 'trains(3,4)']]


635
preference

question: 
Compose an ASP program to keep the predicate "black" with value "18" separate from "cairo". If this association occurs, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(18,"cairo").[1@1]

parsed from model: 
:~assign(18,"cairo").[1@1]

facts: 
black(1..20).

generated: 
Compose an ASP program to keep the predicate "black" with value "18" separate from "cairo". If this association occurs, it incurs a cost of "1" at level "1".
Answer: :~assign(18,"cairo").[1@1]
This predicate ensures that the association between "18" and "cairo" incurs a cost of "1" at level "1".

unique_rules: 
[':~assign(18,"cairo").[1@1]']

jaccard: 1.0

AS desired: [['black(1)', 'black(2)', 'black(3)', 'black(4)', 'black(5)', 'black(6)', 'black(7)', 'black(8)', 'black(9)', 'black(10)', 'black(11)', 'black(12)', 'black(13)', 'black(14)', 'black(15)', 'black(16)', 'black(17)', 'black(18)', 'black(19)', 'black(20)']]
\AS obtained: [['black(1)', 'black(2)', 'black(3)', 'black(4)', 'black(5)', 'black(6)', 'black(7)', 'black(8)', 'black(9)', 'black(10)', 'black(11)', 'black(12)', 'black(13)', 'black(14)', 'black(15)', 'black(16)', 'black(17)', 'black(18)', 'black(19)', 'black(20)']]


636
filtering

question: 
Compose an ASP program to identify values labeled as "lightblue" within the predicate "toronto".

answer from file: 
select(X):-toronto(X,"lightblue").

parsed from model: 
select(X):-toronto(X,"lightblue").

facts: 
toronto(1..5, "lightblue").

generated: 
Compose an ASP program to identify values labeled as "lightblue" within the predicate "toronto".
Answer: select(X):-toronto(X,"lightblue").
lightblue(X,Z):-toronto(X,Z).
```
The predicate "toronto" includes fields "ID","height","author","city","description","name","price","author","city","description","name","height","author","city","description","name","price","author","city","description","name","height","author","city","description","name","price","author","city","description","name","height","author","city","description","name","price","author","city","description","name","height","author","city","description","name","price","author","city","description","name","height","author","city","description","name

unique_rules: 
['select(X):-toronto(X,"lightblue").', 'lightblue(X,Z):-toronto(X,Z).']

jaccard: 1.0

AS desired: [['toronto(1,"lightblue")', 'toronto(2,"lightblue")', 'toronto(3,"lightblue")', 'toronto(4,"lightblue")', 'toronto(5,"lightblue")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['toronto(1,"lightblue")', 'toronto(2,"lightblue")', 'toronto(3,"lightblue")', 'toronto(4,"lightblue")', 'toronto(5,"lightblue")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


637
negative_filtering

question: 
Write an ASP program for the following problem. Select all values associated with predicate "owner" but not associated with predicate "surname" and label "darkmagenta".

answer from file: 
select(X):-owner(X),not surname(X,"darkmagenta").

parsed from model: 
select(X):-owner(X),not surname(X,"darkmagenta").

facts: 
owner(1..3).surname(1,"quality").surname(2,"lightblue").surname(3,"darkmagenta").

generated: 
Write an ASP program for the following problem. Select all values associated with predicate "owner" but not associated with predicate "surname" and label "darkmagenta".
Answer: select(X):-owner(X),not surname(X,"darkmagenta").
select(X):-owner(X),not(surname(X,"darkmagenta")).
```
The predicate "owner" includes values associated with the label "green","height","moto","object","author","description","rome","city","description","author","height","moto","object","description","rome","city","description","author","height","moto","object","description","author","height","city","description","author","height","moto","object","description","author","height","city","description","author","height","moto","object","description","author","height","city","description","author","height","moto","object","description","

unique_rules: 
['select(X):-owner(X),not surname(X,"darkmagenta").', 'select(X):-owner(X),not(surname(X,"darkmagenta")).']

jaccard: 1.0

AS desired: [['owner(1)', 'owner(2)', 'owner(3)', 'surname(1,"quality")', 'surname(2,"lightblue")', 'surname(3,"darkmagenta")', 'select(1)', 'select(2)']]
\AS obtained: [['owner(1)', 'owner(2)', 'owner(3)', 'surname(1,"quality")', 'surname(2,"lightblue")', 'surname(3,"darkmagenta")', 'select(1)', 'select(2)']]


638
numeric_filtering

question: 
Design an ASP solution to capture all values tied to the predicate "pink" with a value different than 98.

answer from file: 
select(X):-pink(X,C),C!=98.

parsed from model: 
select(X):-pink(X,C),C!=98.

facts: 
pink(1..3, 1..100).

generated: 
Design an ASP solution to capture all values tied to the predicate "pink" with a value different than 98.
Answer: select(X):-pink(X,C),C!=98.
Explanation: The predicate "pink" includes values tied to the predicate "author" with a value different than 98.
The predicate "author" includes values tied to the predicate "city" with a value different than 98.
The predicate "city" includes values tied to the predicate "moto" with a value different than 98.
So, the predicate "pink" includes all values tied to the predicate "author" with a value different than 98.
The predicate "author" includes all values tied to the predicate "city" with a value different than 98.
The predicate "city"

unique_rules: 
['select(X):-pink(X,C),C!=98.']

jaccard: 1.0

AS desired: [['pink(1,1)', 'pink(1,2)', 'pink(1,3)', 'pink(1,4)', 'pink(1,5)', 'pink(1,6)', 'pink(1,7)', 'pink(1,8)', 'pink(1,9)', 'pink(1,10)', 'pink(1,11)', 'pink(1,12)', 'pink(1,13)', 'pink(1,14)', 'pink(1,15)', 'pink(1,16)', 'pink(1,17)', 'pink(1,18)', 'pink(1,19)', 'pink(1,20)', 'pink(1,21)', 'pink(1,22)', 'pink(1,23)', 'pink(1,24)', 'pink(1,25)', 'pink(1,26)', 'pink(1,27)', 'pink(1,28)', 'pink(1,29)', 'pink(1,30)', 'pink(1,31)', 'pink(1,32)', 'pink(1,33)', 'pink(1,34)', 'pink(1,35)', 'pink(1,36)', 'pink(1,37)', 'pink(1,38)', 'pink(1,39)', 'pink(1,40)', 'pink(1,41)', 'pink(1,42)', 'pink(1,43)', 'pink(1,44)', 'pink(1,45)', 'pink(1,46)', 'pink(1,47)', 'pink(1,48)', 'pink(1,49)', 'pink(1,50)', 'pink(1,51)', 'pink(1,52)', 'pink(1,53)', 'pink(1,54)', 'pink(1,55)', 'pink(1,56)', 'pink(1,57)', 'pink(1,58)', 'pink(1,59)', 'pink(1,60)', 'pink(1,61)', 'pink(1,62)', 'pink(1,63)', 'pink(1,64)', 'pink(1,65)', 'pink(1,66)', 'pink(1,67)', 'pink(1,68)', 'pink(1,69)', 'pink(1,70)', 'pink(1,71)', 'pink(1,72)', 'pink(1,73)', 'pink(1,74)', 'pink(1,75)', 'pink(1,76)', 'pink(1,77)', 'pink(1,78)', 'pink(1,79)', 'pink(1,80)', 'pink(1,81)', 'pink(1,82)', 'pink(1,83)', 'pink(1,84)', 'pink(1,85)', 'pink(1,86)', 'pink(1,87)', 'pink(1,88)', 'pink(1,89)', 'pink(1,90)', 'pink(1,91)', 'pink(1,92)', 'pink(1,93)', 'pink(1,94)', 'pink(1,95)', 'pink(1,96)', 'pink(1,97)', 'pink(1,98)', 'pink(1,99)', 'pink(1,100)', 'pink(2,1)', 'pink(2,2)', 'pink(2,3)', 'pink(2,4)', 'pink(2,5)', 'pink(2,6)', 'pink(2,7)', 'pink(2,8)', 'pink(2,9)', 'pink(2,10)', 'pink(2,11)', 'pink(2,12)', 'pink(2,13)', 'pink(2,14)', 'pink(2,15)', 'pink(2,16)', 'pink(2,17)', 'pink(2,18)', 'pink(2,19)', 'pink(2,20)', 'pink(2,21)', 'pink(2,22)', 'pink(2,23)', 'pink(2,24)', 'pink(2,25)', 'pink(2,26)', 'pink(2,27)', 'pink(2,28)', 'pink(2,29)', 'pink(2,30)', 'pink(2,31)', 'pink(2,32)', 'pink(2,33)', 'pink(2,34)', 'pink(2,35)', 'pink(2,36)', 'pink(2,37)', 'pink(2,38)', 'pink(2,39)', 'pink(2,40)', 'pink(2,41)', 'pink(2,42)', 'pink(2,43)', 'pink(2,44)', 'pink(2,45)', 'pink(2,46)', 'pink(2,47)', 'pink(2,48)', 'pink(2,49)', 'pink(2,50)', 'pink(2,51)', 'pink(2,52)', 'pink(2,53)', 'pink(2,54)', 'pink(2,55)', 'pink(2,56)', 'pink(2,57)', 'pink(2,58)', 'pink(2,59)', 'pink(2,60)', 'pink(2,61)', 'pink(2,62)', 'pink(2,63)', 'pink(2,64)', 'pink(2,65)', 'pink(2,66)', 'pink(2,67)', 'pink(2,68)', 'pink(2,69)', 'pink(2,70)', 'pink(2,71)', 'pink(2,72)', 'pink(2,73)', 'pink(2,74)', 'pink(2,75)', 'pink(2,76)', 'pink(2,77)', 'pink(2,78)', 'pink(2,79)', 'pink(2,80)', 'pink(2,81)', 'pink(2,82)', 'pink(2,83)', 'pink(2,84)', 'pink(2,85)', 'pink(2,86)', 'pink(2,87)', 'pink(2,88)', 'pink(2,89)', 'pink(2,90)', 'pink(2,91)', 'pink(2,92)', 'pink(2,93)', 'pink(2,94)', 'pink(2,95)', 'pink(2,96)', 'pink(2,97)', 'pink(2,98)', 'pink(2,99)', 'pink(2,100)', 'pink(3,1)', 'pink(3,2)', 'pink(3,3)', 'pink(3,4)', 'pink(3,5)', 'pink(3,6)', 'pink(3,7)', 'pink(3,8)', 'pink(3,9)', 'pink(3,10)', 'pink(3,11)', 'pink(3,12)', 'pink(3,13)', 'pink(3,14)', 'pink(3,15)', 'pink(3,16)', 'pink(3,17)', 'pink(3,18)', 'pink(3,19)', 'pink(3,20)', 'pink(3,21)', 'pink(3,22)', 'pink(3,23)', 'pink(3,24)', 'pink(3,25)', 'pink(3,26)', 'pink(3,27)', 'pink(3,28)', 'pink(3,29)', 'pink(3,30)', 'pink(3,31)', 'pink(3,32)', 'pink(3,33)', 'pink(3,34)', 'pink(3,35)', 'pink(3,36)', 'pink(3,37)', 'pink(3,38)', 'pink(3,39)', 'pink(3,40)', 'pink(3,41)', 'pink(3,42)', 'pink(3,43)', 'pink(3,44)', 'pink(3,45)', 'pink(3,46)', 'pink(3,47)', 'pink(3,48)', 'pink(3,49)', 'pink(3,50)', 'pink(3,51)', 'pink(3,52)', 'pink(3,53)', 'pink(3,54)', 'pink(3,55)', 'pink(3,56)', 'pink(3,57)', 'pink(3,58)', 'pink(3,59)', 'pink(3,60)', 'pink(3,61)', 'pink(3,62)', 'pink(3,63)', 'pink(3,64)', 'pink(3,65)', 'pink(3,66)', 'pink(3,67)', 'pink(3,68)', 'pink(3,69)', 'pink(3,70)', 'pink(3,71)', 'pink(3,72)', 'pink(3,73)', 'pink(3,74)', 'pink(3,75)', 'pink(3,76)', 'pink(3,77)', 'pink(3,78)', 'pink(3,79)', 'pink(3,80)', 'pink(3,81)', 'pink(3,82)', 'pink(3,83)', 'pink(3,84)', 'pink(3,85)', 'pink(3,86)', 'pink(3,87)', 'pink(3,88)', 'pink(3,89)', 'pink(3,90)', 'pink(3,91)', 'pink(3,92)', 'pink(3,93)', 'pink(3,94)', 'pink(3,95)', 'pink(3,96)', 'pink(3,97)', 'pink(3,98)', 'pink(3,99)', 'pink(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['pink(1,1)', 'pink(1,2)', 'pink(1,3)', 'pink(1,4)', 'pink(1,5)', 'pink(1,6)', 'pink(1,7)', 'pink(1,8)', 'pink(1,9)', 'pink(1,10)', 'pink(1,11)', 'pink(1,12)', 'pink(1,13)', 'pink(1,14)', 'pink(1,15)', 'pink(1,16)', 'pink(1,17)', 'pink(1,18)', 'pink(1,19)', 'pink(1,20)', 'pink(1,21)', 'pink(1,22)', 'pink(1,23)', 'pink(1,24)', 'pink(1,25)', 'pink(1,26)', 'pink(1,27)', 'pink(1,28)', 'pink(1,29)', 'pink(1,30)', 'pink(1,31)', 'pink(1,32)', 'pink(1,33)', 'pink(1,34)', 'pink(1,35)', 'pink(1,36)', 'pink(1,37)', 'pink(1,38)', 'pink(1,39)', 'pink(1,40)', 'pink(1,41)', 'pink(1,42)', 'pink(1,43)', 'pink(1,44)', 'pink(1,45)', 'pink(1,46)', 'pink(1,47)', 'pink(1,48)', 'pink(1,49)', 'pink(1,50)', 'pink(1,51)', 'pink(1,52)', 'pink(1,53)', 'pink(1,54)', 'pink(1,55)', 'pink(1,56)', 'pink(1,57)', 'pink(1,58)', 'pink(1,59)', 'pink(1,60)', 'pink(1,61)', 'pink(1,62)', 'pink(1,63)', 'pink(1,64)', 'pink(1,65)', 'pink(1,66)', 'pink(1,67)', 'pink(1,68)', 'pink(1,69)', 'pink(1,70)', 'pink(1,71)', 'pink(1,72)', 'pink(1,73)', 'pink(1,74)', 'pink(1,75)', 'pink(1,76)', 'pink(1,77)', 'pink(1,78)', 'pink(1,79)', 'pink(1,80)', 'pink(1,81)', 'pink(1,82)', 'pink(1,83)', 'pink(1,84)', 'pink(1,85)', 'pink(1,86)', 'pink(1,87)', 'pink(1,88)', 'pink(1,89)', 'pink(1,90)', 'pink(1,91)', 'pink(1,92)', 'pink(1,93)', 'pink(1,94)', 'pink(1,95)', 'pink(1,96)', 'pink(1,97)', 'pink(1,98)', 'pink(1,99)', 'pink(1,100)', 'pink(2,1)', 'pink(2,2)', 'pink(2,3)', 'pink(2,4)', 'pink(2,5)', 'pink(2,6)', 'pink(2,7)', 'pink(2,8)', 'pink(2,9)', 'pink(2,10)', 'pink(2,11)', 'pink(2,12)', 'pink(2,13)', 'pink(2,14)', 'pink(2,15)', 'pink(2,16)', 'pink(2,17)', 'pink(2,18)', 'pink(2,19)', 'pink(2,20)', 'pink(2,21)', 'pink(2,22)', 'pink(2,23)', 'pink(2,24)', 'pink(2,25)', 'pink(2,26)', 'pink(2,27)', 'pink(2,28)', 'pink(2,29)', 'pink(2,30)', 'pink(2,31)', 'pink(2,32)', 'pink(2,33)', 'pink(2,34)', 'pink(2,35)', 'pink(2,36)', 'pink(2,37)', 'pink(2,38)', 'pink(2,39)', 'pink(2,40)', 'pink(2,41)', 'pink(2,42)', 'pink(2,43)', 'pink(2,44)', 'pink(2,45)', 'pink(2,46)', 'pink(2,47)', 'pink(2,48)', 'pink(2,49)', 'pink(2,50)', 'pink(2,51)', 'pink(2,52)', 'pink(2,53)', 'pink(2,54)', 'pink(2,55)', 'pink(2,56)', 'pink(2,57)', 'pink(2,58)', 'pink(2,59)', 'pink(2,60)', 'pink(2,61)', 'pink(2,62)', 'pink(2,63)', 'pink(2,64)', 'pink(2,65)', 'pink(2,66)', 'pink(2,67)', 'pink(2,68)', 'pink(2,69)', 'pink(2,70)', 'pink(2,71)', 'pink(2,72)', 'pink(2,73)', 'pink(2,74)', 'pink(2,75)', 'pink(2,76)', 'pink(2,77)', 'pink(2,78)', 'pink(2,79)', 'pink(2,80)', 'pink(2,81)', 'pink(2,82)', 'pink(2,83)', 'pink(2,84)', 'pink(2,85)', 'pink(2,86)', 'pink(2,87)', 'pink(2,88)', 'pink(2,89)', 'pink(2,90)', 'pink(2,91)', 'pink(2,92)', 'pink(2,93)', 'pink(2,94)', 'pink(2,95)', 'pink(2,96)', 'pink(2,97)', 'pink(2,98)', 'pink(2,99)', 'pink(2,100)', 'pink(3,1)', 'pink(3,2)', 'pink(3,3)', 'pink(3,4)', 'pink(3,5)', 'pink(3,6)', 'pink(3,7)', 'pink(3,8)', 'pink(3,9)', 'pink(3,10)', 'pink(3,11)', 'pink(3,12)', 'pink(3,13)', 'pink(3,14)', 'pink(3,15)', 'pink(3,16)', 'pink(3,17)', 'pink(3,18)', 'pink(3,19)', 'pink(3,20)', 'pink(3,21)', 'pink(3,22)', 'pink(3,23)', 'pink(3,24)', 'pink(3,25)', 'pink(3,26)', 'pink(3,27)', 'pink(3,28)', 'pink(3,29)', 'pink(3,30)', 'pink(3,31)', 'pink(3,32)', 'pink(3,33)', 'pink(3,34)', 'pink(3,35)', 'pink(3,36)', 'pink(3,37)', 'pink(3,38)', 'pink(3,39)', 'pink(3,40)', 'pink(3,41)', 'pink(3,42)', 'pink(3,43)', 'pink(3,44)', 'pink(3,45)', 'pink(3,46)', 'pink(3,47)', 'pink(3,48)', 'pink(3,49)', 'pink(3,50)', 'pink(3,51)', 'pink(3,52)', 'pink(3,53)', 'pink(3,54)', 'pink(3,55)', 'pink(3,56)', 'pink(3,57)', 'pink(3,58)', 'pink(3,59)', 'pink(3,60)', 'pink(3,61)', 'pink(3,62)', 'pink(3,63)', 'pink(3,64)', 'pink(3,65)', 'pink(3,66)', 'pink(3,67)', 'pink(3,68)', 'pink(3,69)', 'pink(3,70)', 'pink(3,71)', 'pink(3,72)', 'pink(3,73)', 'pink(3,74)', 'pink(3,75)', 'pink(3,76)', 'pink(3,77)', 'pink(3,78)', 'pink(3,79)', 'pink(3,80)', 'pink(3,81)', 'pink(3,82)', 'pink(3,83)', 'pink(3,84)', 'pink(3,85)', 'pink(3,86)', 'pink(3,87)', 'pink(3,88)', 'pink(3,89)', 'pink(3,90)', 'pink(3,91)', 'pink(3,92)', 'pink(3,93)', 'pink(3,94)', 'pink(3,95)', 'pink(3,96)', 'pink(3,97)', 'pink(3,98)', 'pink(3,99)', 'pink(3,100)', 'select(1)', 'select(2)', 'select(3)']]


639
assignment

question: 
Write an ASP solution to connect each element defined by the predicate "chicago" with a single label from "lightblue","singapore","white","cloud","owner","pink","wall","quality","darkmagenta".

answer from file: 
assign(X,"lightblue")|assign(X,"singapore")|assign(X,"white")|assign(X,"cloud")|assign(X,"owner")|assign(X,"pink")|assign(X,"wall")|assign(X,"quality")|assign(X,"darkmagenta"):-chicago(X).

parsed from model: 
assign(X,"lightblue")|assign(X,"singapore")|assign(X,"white")|assign(X,"cloud")|assign(X,"owner")|assign(X,"pink")|assign(X,"wall")|assign(X,"quality")|assign(X,"darkmagenta"):-chicago(X).

facts: 
chicago(1..5).

generated: 
Write an ASP solution to connect each element defined by the predicate "chicago" with a single label from "lightblue","singapore","white","cloud","owner","pink","wall","quality","darkmagenta".
Answer: assign(X,"lightblue")|assign(X,"singapore")|assign(X,"white")|assign(X,"cloud")|assign(X,"owner")|assign(X,"pink")|assign(X,"wall")|assign(X,"quality")|assign(X,"darkmagenta"):-chicago(X).
Explanation:
- assign(X,"lightblue"):-chicago(X).
- assign(X,"singapore"):-chicago(X).
- assign(X,"white"):-chicago(X).
- assign(X,"cloud"):-chicago(X).
- assign(X,"owner"):-chicago(X).
- assign(X,"pink

unique_rules: 
['assign(X,"lightblue")|assign(X,"singapore")|assign(X,"white")|assign(X,"cloud")|assign(X,"owner")|assign(X,"pink")|assign(X,"wall")|assign(X,"quality")|assign(X,"darkmagenta"):-chicago(X).', '- assign(X,"lightblue"):-chicago(X).', '- assign(X,"singapore"):-chicago(X).', '- assign(X,"white"):-chicago(X).', '- assign(X,"cloud"):-chicago(X).', '- assign(X,"owner"):-chicago(X).']

jaccard: 1.0

AS desired: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'chicago(5)', 'assign(1,"darkmagenta")', 'assign(2,"darkmagenta")', 'assign(3,"darkmagenta")', 'assign(4,"darkmagenta")', 'assign(5,"darkmagenta")']]
\AS obtained: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'chicago(5)', 'assign(1,"darkmagenta")', 'assign(2,"darkmagenta")', 'assign(3,"darkmagenta")', 'assign(4,"darkmagenta")', 'assign(5,"darkmagenta")']]


640
constraint

question: 
Develop an ASP application that avoids the predicate "lake" with a value of 13 being linked to the label "hair".

answer from file: 
:-assign(13,hair).

parsed from model: 
:-assign(13,hair).

facts: 
lake(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-lake(X).

generated: 
Develop an ASP application that avoids the predicate "lake" with a value of 13 being linked to the label "hair".
Answer: :-assign(13,hair).
Explanation: The predicate "lake" includes a field "ID" that is linked to the label "height".
The predicate "height" includes a field "ID" that is linked to the label "name".
The predicate "name" includes a field "ID" that is linked to the label "height".
So, the predicate "height" includes a field "ID" that is linked to the label "name".
The predicate "name" includes a field "ID" that is linked to the label "height".
The predicate "lake" includes a field "ID" that is linked to the label "height".
So, the predicate "lake" includes

unique_rules: 
[':-assign(13,hair).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lake(6)', 'lake(7)', 'lake(8)', 'lake(9)', 'lake(10)', 'lake(11)', 'lake(12)', 'lake(13)', 'lake(14)', 'lake(15)', 'lake(16)', 'lake(17)', 'lake(18)', 'lake(19)', 'lake(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lake(6)', 'lake(7)', 'lake(8)', 'lake(9)', 'lake(10)', 'lake(11)', 'lake(12)', 'lake(13)', 'lake(14)', 'lake(15)', 'lake(16)', 'lake(17)', 'lake(18)', 'lake(19)', 'lake(20)']]


641
combination

question: 
Produce an ASP script to generate all valid pairings of elements as represented by the predicates "flower" and "lake".

answer from file: 
combination(X,Y):-flower(X),lake(Y).

parsed from model: 
combination(X,Y):-flower(X),lake(Y).

facts: 
flower(1..4).lake(1..5).

generated: 
Produce an ASP script to generate all valid pairings of elements as represented by the predicates "flower" and "lake".
Answer: combination(X,Y):-flower(X),lake(Y).
combination(X,Y):-flower(X),not lake(Y).
combination(X,Y):-not flower(X),lake(Y).
combination(X,Y):-not flower(X),not lake(Y).

unique_rules: 
['combination(X,Y):-flower(X),lake(Y).', 'combination(X,Y):-flower(X),not lake(Y).', 'combination(X,Y):-not flower(X),lake(Y).', 'combination(X,Y):-not flower(X),not lake(Y).']

jaccard: 1.0

AS desired: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'flower(1)', 'flower(2)', 'flower(3)', 'flower(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'flower(1)', 'flower(2)', 'flower(3)', 'flower(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


642
join

question: 
Create an ASP script to define the predicate "white_singapore" that links each white to the surname of singapore, given that "white" has fields "ID","weight","strength","singaporeID" and "singapore" has fields "ID","surname".

answer from file: 
white_singapore(X,Z):-white(X,_,_,Y),singapore(Y,Z).

parsed from model: 
white_singapore(X,Z):-white(X,_,_,Y),singapore(Y,Z).

facts: 
white("ID","weight","strength","singaporeID").singapore("ID","surname").

generated: 
Create an ASP script to define the predicate "white_singapore" that links each white to the surname of singapore, given that "white" has fields "ID","weight","strength","singaporeID" and "singapore" has fields "ID","surname". Define the predicate "white_singapore" that links each white to the surname of singapore.
Answer: white_singapore(X,Z):-white(X,_,_,Y),singapore(Y,Z).
white_singapore(X,Z):-white(X,_,_,Y),singapore(X,Z).

unique_rules: 
['white_singapore(X,Z):-white(X,_,_,Y),singapore(Y,Z).', 'white_singapore(X,Z):-white(X,_,_,Y),singapore(X,Z).']

jaccard: 1.0

AS desired: [['singapore("ID","surname")', 'white("ID","weight","strength","singaporeID")']]
\AS obtained: [['singapore("ID","surname")', 'white("ID","weight","strength","singaporeID")']]


643
closure

question: 
Develop an ASP script that derives the "family" predicate through the transitive closure of the "delhi" predicate.

answer from file: 
family(X,Y):-delhi(X,Y).
family(X,Y):-delhi(X,Z),family(Z,Y).

parsed from model: 
family(X,Y):-delhi(X,Y).
family(X,Y):-delhi(X,Z),family(Z,Y).

facts: 
delhi(1..3, 1..4).

generated: 
Develop an ASP script that derives the "family" predicate through the transitive closure of the "delhi" predicate.
Answer: family(X,Y):-delhi(X,Y).
family(X,Y):-delhi(X,Z),family(Z,Y).
family(X,Y):-delhi(X,Z),Z!=Y.
family(X,Y):-delhi(X,Z),Z==Y.
family(X,Y):-delhi(X,Z),Z!=Y,age(Z,Y).
age(X,Y):-family(X,Y).
age(X,Y):-family(X,Z),Z!=Y.
age(X,Y):-family(X,Z),Z==Y.

unique_rules: 
['family(X,Y):-delhi(X,Y).', 'family(X,Y):-delhi(X,Z),family(Z,Y).', 'family(X,Y):-delhi(X,Z),Z!=Y.', 'family(X,Y):-delhi(X,Z),Z==Y.', 'family(X,Y):-delhi(X,Z),Z!=Y,age(Z,Y).', 'age(X,Y):-family(X,Y).', 'age(X,Y):-family(X,Z),Z!=Y.', 'age(X,Y):-family(X,Z),Z==Y.']

jaccard: 1.0

AS desired: [['delhi(1,1)', 'delhi(1,2)', 'delhi(1,3)', 'delhi(1,4)', 'delhi(2,1)', 'delhi(2,2)', 'delhi(2,3)', 'delhi(2,4)', 'delhi(3,1)', 'delhi(3,2)', 'delhi(3,3)', 'delhi(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]
\AS obtained: [['delhi(1,1)', 'delhi(1,2)', 'delhi(1,3)', 'delhi(1,4)', 'delhi(2,1)', 'delhi(2,2)', 'delhi(2,3)', 'delhi(2,4)', 'delhi(3,1)', 'delhi(3,2)', 'delhi(3,3)', 'delhi(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]


644
preference

question: 
Develop an ASP code snippet to avoid linking the "quality" predicate with value "7" to "delhi". If such a link is found, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(7,"delhi").[1@1]

parsed from model: 
:~assign(7,"delhi").[1@1]

facts: 
quality(1..20).

generated: 
Develop an ASP code snippet to avoid linking the "quality" predicate with value "7" to "delhi". If such a link is found, it incurs a cost of "1" at level "1".
Answer: :~assign(7,"delhi").[1@1]
The predicate "height" includes fields "ID","city","author","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","

unique_rules: 
[':~assign(7,"delhi").[1@1]']

jaccard: 1.0

AS desired: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'quality(6)', 'quality(7)', 'quality(8)', 'quality(9)', 'quality(10)', 'quality(11)', 'quality(12)', 'quality(13)', 'quality(14)', 'quality(15)', 'quality(16)', 'quality(17)', 'quality(18)', 'quality(19)', 'quality(20)']]
\AS obtained: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'quality(6)', 'quality(7)', 'quality(8)', 'quality(9)', 'quality(10)', 'quality(11)', 'quality(12)', 'quality(13)', 'quality(14)', 'quality(15)', 'quality(16)', 'quality(17)', 'quality(18)', 'quality(19)', 'quality(20)']]


645
filtering

question: 
Formulate an ASP application to fetch all values tied to the predicate "barcelona" and labeled as "storm".

answer from file: 
select(X):-barcelona(X,"storm").

parsed from model: 
select(X):-barcelona(X,"storm").

facts: 
barcelona(1..5, "storm").

generated: 
Formulate an ASP application to fetch all values tied to the predicate "barcelona" and labeled as "storm".
Answer: select(X):-barcelona(X,"storm").
select(X):-barcelona(X,"author").
select(X):-barcelona(X,"moto").
select(X):-barcelona(X,"dubai").
select(X):-barcelona(X,"author","city").
select(X):-barcelona(X,"author","description").
select(X):-barcelona(X,"author","height").
select(X):-barcelona(X,"author","city","description").
select(X):-barcelona(X,"author","description","height").
select(X):-barcelona(X,"author","description","height").
```

unique_rules: 
['select(X):-barcelona(X,"storm").', 'select(X):-barcelona(X,"author").', 'select(X):-barcelona(X,"moto").', 'select(X):-barcelona(X,"dubai").', 'select(X):-barcelona(X,"author","city").', 'select(X):-barcelona(X,"author","description").', 'select(X):-barcelona(X,"author","height").', 'select(X):-barcelona(X,"author","city","description").', 'select(X):-barcelona(X,"author","description","height").']

jaccard: 1.0

AS desired: [['barcelona(1,"storm")', 'barcelona(2,"storm")', 'barcelona(3,"storm")', 'barcelona(4,"storm")', 'barcelona(5,"storm")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['barcelona(1,"storm")', 'barcelona(2,"storm")', 'barcelona(3,"storm")', 'barcelona(4,"storm")', 'barcelona(5,"storm")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


646
negative_filtering

question: 
Design an ASP solution to capture values associated with the predicate "flower" but not tied to the predicate "pink" and labeled "darkmagenta".

answer from file: 
select(X):-flower(X),not pink(X,"darkmagenta").

parsed from model: 
select(X):-flower(X),not pink(X,"darkmagenta").

facts: 
flower(1..3).pink(1,"lightblue").pink(2,"chair").pink(3,"darkmagenta").

generated: 
Design an ASP solution to capture values associated with the predicate "flower" but not tied to the predicate "pink" and labeled "darkmagenta".
Answer: select(X):-flower(X),not pink(X,"darkmagenta").
Explanation: The predicate "flower" includes values associated with the predicate "city","height","author","moto","description","name","city","author","moto","description","name","height","city","author","moto","description","name","height","city","author","moto","description","name","height","city","author","moto","description","name","height","city","author","moto","description","name","height","city","author","moto","description","name","height","city","author","moto","description","name","height","city","author","moto","description","name","height","city","author","moto","description","

unique_rules: 
['select(X):-flower(X),not pink(X,"darkmagenta").']

jaccard: 1.0

AS desired: [['flower(1)', 'flower(2)', 'flower(3)', 'pink(1,"lightblue")', 'pink(2,"chair")', 'pink(3,"darkmagenta")', 'select(1)', 'select(2)']]
\AS obtained: [['flower(1)', 'flower(2)', 'flower(3)', 'pink(1,"lightblue")', 'pink(2,"chair")', 'pink(3,"darkmagenta")', 'select(1)', 'select(2)']]


647
numeric_filtering

question: 
Develop an ASP program to gather all values linked to the predicate "desk" with a value different than 72.

answer from file: 
select(X):-desk(X,C),C!=72.

parsed from model: 
select(X):-desk(X,C),C!=72.

facts: 
desk(1..3, 1..100).

generated: 
Develop an ASP program to gather all values linked to the predicate "desk" with a value different than 72.
Answer: select(X):-desk(X,C),C!=72.
select(X):-desk(X,C),C==72.

unique_rules: 
['select(X):-desk(X,C),C!=72.', 'select(X):-desk(X,C),C==72.']

jaccard: 1.0

AS desired: [['desk(1,1)', 'desk(1,2)', 'desk(1,3)', 'desk(1,4)', 'desk(1,5)', 'desk(1,6)', 'desk(1,7)', 'desk(1,8)', 'desk(1,9)', 'desk(1,10)', 'desk(1,11)', 'desk(1,12)', 'desk(1,13)', 'desk(1,14)', 'desk(1,15)', 'desk(1,16)', 'desk(1,17)', 'desk(1,18)', 'desk(1,19)', 'desk(1,20)', 'desk(1,21)', 'desk(1,22)', 'desk(1,23)', 'desk(1,24)', 'desk(1,25)', 'desk(1,26)', 'desk(1,27)', 'desk(1,28)', 'desk(1,29)', 'desk(1,30)', 'desk(1,31)', 'desk(1,32)', 'desk(1,33)', 'desk(1,34)', 'desk(1,35)', 'desk(1,36)', 'desk(1,37)', 'desk(1,38)', 'desk(1,39)', 'desk(1,40)', 'desk(1,41)', 'desk(1,42)', 'desk(1,43)', 'desk(1,44)', 'desk(1,45)', 'desk(1,46)', 'desk(1,47)', 'desk(1,48)', 'desk(1,49)', 'desk(1,50)', 'desk(1,51)', 'desk(1,52)', 'desk(1,53)', 'desk(1,54)', 'desk(1,55)', 'desk(1,56)', 'desk(1,57)', 'desk(1,58)', 'desk(1,59)', 'desk(1,60)', 'desk(1,61)', 'desk(1,62)', 'desk(1,63)', 'desk(1,64)', 'desk(1,65)', 'desk(1,66)', 'desk(1,67)', 'desk(1,68)', 'desk(1,69)', 'desk(1,70)', 'desk(1,71)', 'desk(1,72)', 'desk(1,73)', 'desk(1,74)', 'desk(1,75)', 'desk(1,76)', 'desk(1,77)', 'desk(1,78)', 'desk(1,79)', 'desk(1,80)', 'desk(1,81)', 'desk(1,82)', 'desk(1,83)', 'desk(1,84)', 'desk(1,85)', 'desk(1,86)', 'desk(1,87)', 'desk(1,88)', 'desk(1,89)', 'desk(1,90)', 'desk(1,91)', 'desk(1,92)', 'desk(1,93)', 'desk(1,94)', 'desk(1,95)', 'desk(1,96)', 'desk(1,97)', 'desk(1,98)', 'desk(1,99)', 'desk(1,100)', 'desk(2,1)', 'desk(2,2)', 'desk(2,3)', 'desk(2,4)', 'desk(2,5)', 'desk(2,6)', 'desk(2,7)', 'desk(2,8)', 'desk(2,9)', 'desk(2,10)', 'desk(2,11)', 'desk(2,12)', 'desk(2,13)', 'desk(2,14)', 'desk(2,15)', 'desk(2,16)', 'desk(2,17)', 'desk(2,18)', 'desk(2,19)', 'desk(2,20)', 'desk(2,21)', 'desk(2,22)', 'desk(2,23)', 'desk(2,24)', 'desk(2,25)', 'desk(2,26)', 'desk(2,27)', 'desk(2,28)', 'desk(2,29)', 'desk(2,30)', 'desk(2,31)', 'desk(2,32)', 'desk(2,33)', 'desk(2,34)', 'desk(2,35)', 'desk(2,36)', 'desk(2,37)', 'desk(2,38)', 'desk(2,39)', 'desk(2,40)', 'desk(2,41)', 'desk(2,42)', 'desk(2,43)', 'desk(2,44)', 'desk(2,45)', 'desk(2,46)', 'desk(2,47)', 'desk(2,48)', 'desk(2,49)', 'desk(2,50)', 'desk(2,51)', 'desk(2,52)', 'desk(2,53)', 'desk(2,54)', 'desk(2,55)', 'desk(2,56)', 'desk(2,57)', 'desk(2,58)', 'desk(2,59)', 'desk(2,60)', 'desk(2,61)', 'desk(2,62)', 'desk(2,63)', 'desk(2,64)', 'desk(2,65)', 'desk(2,66)', 'desk(2,67)', 'desk(2,68)', 'desk(2,69)', 'desk(2,70)', 'desk(2,71)', 'desk(2,72)', 'desk(2,73)', 'desk(2,74)', 'desk(2,75)', 'desk(2,76)', 'desk(2,77)', 'desk(2,78)', 'desk(2,79)', 'desk(2,80)', 'desk(2,81)', 'desk(2,82)', 'desk(2,83)', 'desk(2,84)', 'desk(2,85)', 'desk(2,86)', 'desk(2,87)', 'desk(2,88)', 'desk(2,89)', 'desk(2,90)', 'desk(2,91)', 'desk(2,92)', 'desk(2,93)', 'desk(2,94)', 'desk(2,95)', 'desk(2,96)', 'desk(2,97)', 'desk(2,98)', 'desk(2,99)', 'desk(2,100)', 'desk(3,1)', 'desk(3,2)', 'desk(3,3)', 'desk(3,4)', 'desk(3,5)', 'desk(3,6)', 'desk(3,7)', 'desk(3,8)', 'desk(3,9)', 'desk(3,10)', 'desk(3,11)', 'desk(3,12)', 'desk(3,13)', 'desk(3,14)', 'desk(3,15)', 'desk(3,16)', 'desk(3,17)', 'desk(3,18)', 'desk(3,19)', 'desk(3,20)', 'desk(3,21)', 'desk(3,22)', 'desk(3,23)', 'desk(3,24)', 'desk(3,25)', 'desk(3,26)', 'desk(3,27)', 'desk(3,28)', 'desk(3,29)', 'desk(3,30)', 'desk(3,31)', 'desk(3,32)', 'desk(3,33)', 'desk(3,34)', 'desk(3,35)', 'desk(3,36)', 'desk(3,37)', 'desk(3,38)', 'desk(3,39)', 'desk(3,40)', 'desk(3,41)', 'desk(3,42)', 'desk(3,43)', 'desk(3,44)', 'desk(3,45)', 'desk(3,46)', 'desk(3,47)', 'desk(3,48)', 'desk(3,49)', 'desk(3,50)', 'desk(3,51)', 'desk(3,52)', 'desk(3,53)', 'desk(3,54)', 'desk(3,55)', 'desk(3,56)', 'desk(3,57)', 'desk(3,58)', 'desk(3,59)', 'desk(3,60)', 'desk(3,61)', 'desk(3,62)', 'desk(3,63)', 'desk(3,64)', 'desk(3,65)', 'desk(3,66)', 'desk(3,67)', 'desk(3,68)', 'desk(3,69)', 'desk(3,70)', 'desk(3,71)', 'desk(3,72)', 'desk(3,73)', 'desk(3,74)', 'desk(3,75)', 'desk(3,76)', 'desk(3,77)', 'desk(3,78)', 'desk(3,79)', 'desk(3,80)', 'desk(3,81)', 'desk(3,82)', 'desk(3,83)', 'desk(3,84)', 'desk(3,85)', 'desk(3,86)', 'desk(3,87)', 'desk(3,88)', 'desk(3,89)', 'desk(3,90)', 'desk(3,91)', 'desk(3,92)', 'desk(3,93)', 'desk(3,94)', 'desk(3,95)', 'desk(3,96)', 'desk(3,97)', 'desk(3,98)', 'desk(3,99)', 'desk(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['desk(1,1)', 'desk(1,2)', 'desk(1,3)', 'desk(1,4)', 'desk(1,5)', 'desk(1,6)', 'desk(1,7)', 'desk(1,8)', 'desk(1,9)', 'desk(1,10)', 'desk(1,11)', 'desk(1,12)', 'desk(1,13)', 'desk(1,14)', 'desk(1,15)', 'desk(1,16)', 'desk(1,17)', 'desk(1,18)', 'desk(1,19)', 'desk(1,20)', 'desk(1,21)', 'desk(1,22)', 'desk(1,23)', 'desk(1,24)', 'desk(1,25)', 'desk(1,26)', 'desk(1,27)', 'desk(1,28)', 'desk(1,29)', 'desk(1,30)', 'desk(1,31)', 'desk(1,32)', 'desk(1,33)', 'desk(1,34)', 'desk(1,35)', 'desk(1,36)', 'desk(1,37)', 'desk(1,38)', 'desk(1,39)', 'desk(1,40)', 'desk(1,41)', 'desk(1,42)', 'desk(1,43)', 'desk(1,44)', 'desk(1,45)', 'desk(1,46)', 'desk(1,47)', 'desk(1,48)', 'desk(1,49)', 'desk(1,50)', 'desk(1,51)', 'desk(1,52)', 'desk(1,53)', 'desk(1,54)', 'desk(1,55)', 'desk(1,56)', 'desk(1,57)', 'desk(1,58)', 'desk(1,59)', 'desk(1,60)', 'desk(1,61)', 'desk(1,62)', 'desk(1,63)', 'desk(1,64)', 'desk(1,65)', 'desk(1,66)', 'desk(1,67)', 'desk(1,68)', 'desk(1,69)', 'desk(1,70)', 'desk(1,71)', 'desk(1,72)', 'desk(1,73)', 'desk(1,74)', 'desk(1,75)', 'desk(1,76)', 'desk(1,77)', 'desk(1,78)', 'desk(1,79)', 'desk(1,80)', 'desk(1,81)', 'desk(1,82)', 'desk(1,83)', 'desk(1,84)', 'desk(1,85)', 'desk(1,86)', 'desk(1,87)', 'desk(1,88)', 'desk(1,89)', 'desk(1,90)', 'desk(1,91)', 'desk(1,92)', 'desk(1,93)', 'desk(1,94)', 'desk(1,95)', 'desk(1,96)', 'desk(1,97)', 'desk(1,98)', 'desk(1,99)', 'desk(1,100)', 'desk(2,1)', 'desk(2,2)', 'desk(2,3)', 'desk(2,4)', 'desk(2,5)', 'desk(2,6)', 'desk(2,7)', 'desk(2,8)', 'desk(2,9)', 'desk(2,10)', 'desk(2,11)', 'desk(2,12)', 'desk(2,13)', 'desk(2,14)', 'desk(2,15)', 'desk(2,16)', 'desk(2,17)', 'desk(2,18)', 'desk(2,19)', 'desk(2,20)', 'desk(2,21)', 'desk(2,22)', 'desk(2,23)', 'desk(2,24)', 'desk(2,25)', 'desk(2,26)', 'desk(2,27)', 'desk(2,28)', 'desk(2,29)', 'desk(2,30)', 'desk(2,31)', 'desk(2,32)', 'desk(2,33)', 'desk(2,34)', 'desk(2,35)', 'desk(2,36)', 'desk(2,37)', 'desk(2,38)', 'desk(2,39)', 'desk(2,40)', 'desk(2,41)', 'desk(2,42)', 'desk(2,43)', 'desk(2,44)', 'desk(2,45)', 'desk(2,46)', 'desk(2,47)', 'desk(2,48)', 'desk(2,49)', 'desk(2,50)', 'desk(2,51)', 'desk(2,52)', 'desk(2,53)', 'desk(2,54)', 'desk(2,55)', 'desk(2,56)', 'desk(2,57)', 'desk(2,58)', 'desk(2,59)', 'desk(2,60)', 'desk(2,61)', 'desk(2,62)', 'desk(2,63)', 'desk(2,64)', 'desk(2,65)', 'desk(2,66)', 'desk(2,67)', 'desk(2,68)', 'desk(2,69)', 'desk(2,70)', 'desk(2,71)', 'desk(2,72)', 'desk(2,73)', 'desk(2,74)', 'desk(2,75)', 'desk(2,76)', 'desk(2,77)', 'desk(2,78)', 'desk(2,79)', 'desk(2,80)', 'desk(2,81)', 'desk(2,82)', 'desk(2,83)', 'desk(2,84)', 'desk(2,85)', 'desk(2,86)', 'desk(2,87)', 'desk(2,88)', 'desk(2,89)', 'desk(2,90)', 'desk(2,91)', 'desk(2,92)', 'desk(2,93)', 'desk(2,94)', 'desk(2,95)', 'desk(2,96)', 'desk(2,97)', 'desk(2,98)', 'desk(2,99)', 'desk(2,100)', 'desk(3,1)', 'desk(3,2)', 'desk(3,3)', 'desk(3,4)', 'desk(3,5)', 'desk(3,6)', 'desk(3,7)', 'desk(3,8)', 'desk(3,9)', 'desk(3,10)', 'desk(3,11)', 'desk(3,12)', 'desk(3,13)', 'desk(3,14)', 'desk(3,15)', 'desk(3,16)', 'desk(3,17)', 'desk(3,18)', 'desk(3,19)', 'desk(3,20)', 'desk(3,21)', 'desk(3,22)', 'desk(3,23)', 'desk(3,24)', 'desk(3,25)', 'desk(3,26)', 'desk(3,27)', 'desk(3,28)', 'desk(3,29)', 'desk(3,30)', 'desk(3,31)', 'desk(3,32)', 'desk(3,33)', 'desk(3,34)', 'desk(3,35)', 'desk(3,36)', 'desk(3,37)', 'desk(3,38)', 'desk(3,39)', 'desk(3,40)', 'desk(3,41)', 'desk(3,42)', 'desk(3,43)', 'desk(3,44)', 'desk(3,45)', 'desk(3,46)', 'desk(3,47)', 'desk(3,48)', 'desk(3,49)', 'desk(3,50)', 'desk(3,51)', 'desk(3,52)', 'desk(3,53)', 'desk(3,54)', 'desk(3,55)', 'desk(3,56)', 'desk(3,57)', 'desk(3,58)', 'desk(3,59)', 'desk(3,60)', 'desk(3,61)', 'desk(3,62)', 'desk(3,63)', 'desk(3,64)', 'desk(3,65)', 'desk(3,66)', 'desk(3,67)', 'desk(3,68)', 'desk(3,69)', 'desk(3,70)', 'desk(3,71)', 'desk(3,72)', 'desk(3,73)', 'desk(3,74)', 'desk(3,75)', 'desk(3,76)', 'desk(3,77)', 'desk(3,78)', 'desk(3,79)', 'desk(3,80)', 'desk(3,81)', 'desk(3,82)', 'desk(3,83)', 'desk(3,84)', 'desk(3,85)', 'desk(3,86)', 'desk(3,87)', 'desk(3,88)', 'desk(3,89)', 'desk(3,90)', 'desk(3,91)', 'desk(3,92)', 'desk(3,93)', 'desk(3,94)', 'desk(3,95)', 'desk(3,96)', 'desk(3,97)', 'desk(3,98)', 'desk(3,99)', 'desk(3,100)', 'select(1)', 'select(2)', 'select(3)']]


648
assignment

question: 
Compose an ASP program that maps a single label from the set "chicago","storm","singapore","black","roof","wall","strength","hair","desk" to elements determined by the predicate "toronto".

answer from file: 
assign(X,"chicago")|assign(X,"storm")|assign(X,"singapore")|assign(X,"black")|assign(X,"roof")|assign(X,"wall")|assign(X,"strength")|assign(X,"hair")|assign(X,"desk"):-toronto(X).

parsed from model: 
assign(X,"chicago")|assign(X,"storm")|assign(X,"singapore")|assign(X,"black")|assign(X,"roof")|assign(X,"wall")|assign(X,"strength")|assign(X,"hair")|assign(X,"desk"):-toronto(X).

facts: 
toronto(1..5).

generated: 
Compose an ASP program that maps a single label from the set "chicago","storm","singapore","black","roof","wall","strength","hair","desk" to elements determined by the predicate "toronto".
Answer: assign(X,"chicago")|assign(X,"storm")|assign(X,"singapore")|assign(X,"black")|assign(X,"roof")|assign(X,"wall")|assign(X,"strength")|assign(X,"hair")|assign(X,"desk"):-toronto(X).
Explanation:
The predicate "toronto" returns elements associated with the labels "chicago","storm","singapore","black","roof","wall","strength","hair","desk","height","author","city","description","name","price","height","description","name","author","city","description","name","price","height","description","name","author","city","description","name","price","

unique_rules: 
['assign(X,"chicago")|assign(X,"storm")|assign(X,"singapore")|assign(X,"black")|assign(X,"roof")|assign(X,"wall")|assign(X,"strength")|assign(X,"hair")|assign(X,"desk"):-toronto(X).']

jaccard: 1.0

AS desired: [['toronto(1)', 'toronto(2)', 'toronto(3)', 'toronto(4)', 'toronto(5)', 'assign(1,"desk")', 'assign(2,"desk")', 'assign(3,"desk")', 'assign(4,"desk")', 'assign(5,"desk")']]
\AS obtained: [['toronto(1)', 'toronto(2)', 'toronto(3)', 'toronto(4)', 'toronto(5)', 'assign(1,"desk")', 'assign(2,"desk")', 'assign(3,"desk")', 'assign(4,"desk")', 'assign(5,"desk")']]


649
constraint

question: 
Develop an ASP application that avoids the predicate "quality" with a value of 15 being linked to the label "cairo".

answer from file: 
:-assign(15,cairo).

parsed from model: 
:-assign(15,cairo).

facts: 
quality(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-quality(X).

generated: 
Develop an ASP application that avoids the predicate "quality" with a value of 15 being linked to the label "cairo".
Answer: :-assign(15,cairo).
Explanation: The predicate "quality" includes a field "ID" that is linked to the label "city".
The predicate "city" includes a field "ID" that is linked to the label "description".
The predicate "description" includes a field "ID" that is linked to the label "author".
The predicate "author" includes a field "ID" that is linked to the label "description".
The predicate "description" includes a field "ID" that is linked to the label "city".
The predicate "city" includes a field "ID" that is linked to the label "author".
So, the predicate "quality" includes a field

unique_rules: 
[':-assign(15,cairo).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'quality(6)', 'quality(7)', 'quality(8)', 'quality(9)', 'quality(10)', 'quality(11)', 'quality(12)', 'quality(13)', 'quality(14)', 'quality(15)', 'quality(16)', 'quality(17)', 'quality(18)', 'quality(19)', 'quality(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'quality(6)', 'quality(7)', 'quality(8)', 'quality(9)', 'quality(10)', 'quality(11)', 'quality(12)', 'quality(13)', 'quality(14)', 'quality(15)', 'quality(16)', 'quality(17)', 'quality(18)', 'quality(19)', 'quality(20)']]


650
combination

question: 
Compose an ASP script that generates the cross-product of elements between the predicates "flower" and "strength".

answer from file: 
combination(X,Y):-flower(X),strength(Y).

parsed from model: 
cross_product(X,Y):-flower(X),strength(Y).

facts: 
flower(1..4).strength(1..5).

generated: 
Compose an ASP script that generates the cross-product of elements between the predicates "flower" and "strength".
Answer: cross_product(X,Y):-flower(X),strength(Y).
cross_product(X,Y):-flower(X),not strength(Y).
cross_product(X,Y):-not flower(X),strength(Y).

unique_rules: 
['cross_product(X,Y):-flower(X),strength(Y).', 'cross_product(X,Y):-flower(X),not strength(Y).', 'cross_product(X,Y):-not flower(X),strength(Y).']

jaccard: 0.0

AS desired: [['strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'flower(1)', 'flower(2)', 'flower(3)', 'flower(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'flower(1)', 'flower(2)', 'flower(3)', 'flower(4)', 'cross_product(1,1)', 'cross_product(1,2)', 'cross_product(1,3)', 'cross_product(1,4)', 'cross_product(1,5)', 'cross_product(2,1)', 'cross_product(2,2)', 'cross_product(2,3)', 'cross_product(2,4)', 'cross_product(2,5)', 'cross_product(3,1)', 'cross_product(3,2)', 'cross_product(3,3)', 'cross_product(3,4)', 'cross_product(3,5)', 'cross_product(4,1)', 'cross_product(4,2)', 'cross_product(4,3)', 'cross_product(4,4)', 'cross_product(4,5)']]


651
join

question: 
Write an ASP program for the following problem. Consider predicate "moscow" having fields "ID","flowerID","strength","lake", and the predicate "flower" having fields "ID","lake","owner","strength". Define a predicate "moscow_flower" that associates to each "moscow" the "lake" of "flower".

answer from file: 
moscow_flower(X,Z):-moscow(X,Y,_,_),flower(Y,Z,_,_).

parsed from model: 
moscow_flower(X,Z):-moscow(X,Y,_,_),flower(Y,Z,_,Y).

facts: 
moscow("ID","flowerID","strength","lake").flower("ID","lake","owner","strength").

generated: 
Write an ASP program for the following problem. Consider predicate "moscow" having fields "ID","flowerID","strength","lake", and the predicate "flower" having fields "ID","lake","owner","strength". Define a predicate "moscow_flower" that associates to each "moscow" the "lake" of "flower".
Answer: moscow_flower(X,Z):-moscow(X,Y,_,_),flower(Y,Z,_,Y).
moscow_flower(X,Z):-moscow(X,Y,_,_),flower(Y,_,_,X).

unique_rules: 
['moscow_flower(X,Z):-moscow(X,Y,_,_),flower(Y,Z,_,Y).', 'moscow_flower(X,Z):-moscow(X,Y,_,_),flower(Y,_,_,X).']

jaccard: 1.0

AS desired: [['moscow("ID","flowerID","strength","lake")', 'flower("ID","lake","owner","strength")']]
\AS obtained: [['moscow("ID","flowerID","strength","lake")', 'flower("ID","lake","owner","strength")']]


652
closure

question: 
Create an ASP solution that establishes the predicate "loops" through the transitive closure of the "darkmagenta" predicate.

answer from file: 
loops(X,Y):-darkmagenta(X,Y).
loops(X,Y):-darkmagenta(X,Z),loops(Z,Y).

parsed from model: 
loops(X,Y):-darkmagenta(X,Y).
loops(X,Y):-darkmagenta(X,Z),loops(Z,Y).

facts: 
darkmagenta(1..3, 1..4).

generated: 
Create an ASP solution that establishes the predicate "loops" through the transitive closure of the "darkmagenta" predicate.
Answer: loops(X,Y):-darkmagenta(X,Y).
loops(X,Y):-darkmagenta(X,Z),loops(Z,Y).
loops(X,Y):-darkmagenta(X,Z),not darkmagenta(Z,Y).
darkmagenta(X,Y):-city(X,Y).
darkmagenta(X,Y):-city(X,Z),loops(Z,Y).
darkmagenta(X,Y):-city(X,Z),not darkmagenta(Z,Y).

unique_rules: 
['loops(X,Y):-darkmagenta(X,Y).', 'loops(X,Y):-darkmagenta(X,Z),loops(Z,Y).', 'loops(X,Y):-darkmagenta(X,Z),not darkmagenta(Z,Y).', 'darkmagenta(X,Y):-city(X,Y).', 'darkmagenta(X,Y):-city(X,Z),loops(Z,Y).', 'darkmagenta(X,Y):-city(X,Z),not darkmagenta(Z,Y).']

jaccard: 1.0

AS desired: [['darkmagenta(1,1)', 'darkmagenta(1,2)', 'darkmagenta(1,3)', 'darkmagenta(1,4)', 'darkmagenta(2,1)', 'darkmagenta(2,2)', 'darkmagenta(2,3)', 'darkmagenta(2,4)', 'darkmagenta(3,1)', 'darkmagenta(3,2)', 'darkmagenta(3,3)', 'darkmagenta(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]
\AS obtained: [['darkmagenta(1,1)', 'darkmagenta(1,2)', 'darkmagenta(1,3)', 'darkmagenta(1,4)', 'darkmagenta(2,1)', 'darkmagenta(2,2)', 'darkmagenta(2,3)', 'darkmagenta(2,4)', 'darkmagenta(3,1)', 'darkmagenta(3,2)', 'darkmagenta(3,3)', 'darkmagenta(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]


653
preference

question: 
Write an ASP application that avoids the predicate "chair" with value "4" from being linked to "singapore", incurring a cost of "1" at level "1" if linked.

answer from file: 
:~assign(4,"singapore").[1@1]

parsed from model: 
:~assign(4,"singapore").[1@1]

facts: 
chair(1..20).

generated: 
Write an ASP application that avoids the predicate "chair" with value "4" from being linked to "singapore", incurring a cost of "1" at level "1" if linked.
Answer: :~assign(4,"singapore").[1@1]

unique_rules: 
[':~assign(4,"singapore").[1@1]']

jaccard: 1.0

AS desired: [['chair(1)', 'chair(2)', 'chair(3)', 'chair(4)', 'chair(5)', 'chair(6)', 'chair(7)', 'chair(8)', 'chair(9)', 'chair(10)', 'chair(11)', 'chair(12)', 'chair(13)', 'chair(14)', 'chair(15)', 'chair(16)', 'chair(17)', 'chair(18)', 'chair(19)', 'chair(20)']]
\AS obtained: [['chair(1)', 'chair(2)', 'chair(3)', 'chair(4)', 'chair(5)', 'chair(6)', 'chair(7)', 'chair(8)', 'chair(9)', 'chair(10)', 'chair(11)', 'chair(12)', 'chair(13)', 'chair(14)', 'chair(15)', 'chair(16)', 'chair(17)', 'chair(18)', 'chair(19)', 'chair(20)']]


654
filtering

question: 
Design an ASP application to fetch values tied to the label "chicago" within the context of the "pink" predicate.

answer from file: 
select(X):-pink(X,"chicago").

parsed from model: 
select(X):-pink(X,"chicago").

facts: 
pink(1..5, "chicago").

generated: 
Design an ASP application to fetch values tied to the label "chicago" within the context of the "pink" predicate.
Answer: select(X):-pink(X,"chicago").
pink(X,Z):-pink(X,Z).
pink(X,C):-pink(X,"city").
pink(X,Z):-pink(X,Z).

unique_rules: 
['select(X):-pink(X,"chicago").', 'pink(X,Z):-pink(X,Z).', 'pink(X,C):-pink(X,"city").']

jaccard: 1.0

AS desired: [['pink(1,"chicago")', 'pink(2,"chicago")', 'pink(3,"chicago")', 'pink(4,"chicago")', 'pink(5,"chicago")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['pink(1,"chicago")', 'pink(2,"chicago")', 'pink(3,"chicago")', 'pink(4,"chicago")', 'pink(5,"chicago")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


655
negative_filtering

question: 
Create an ASP application to fetch values associated with the predicate "desk" but not linked to the predicate "singapore" and labeled "storm".

answer from file: 
select(X):-desk(X),not singapore(X,"storm").

parsed from model: 
select(X):-desk(X),not singapore(X,"storm").

facts: 
desk(1..3).singapore(1,"lightblue").singapore(2,"quality").singapore(3,"pink").

generated: 
Create an ASP application to fetch values associated with the predicate "desk" but not linked to the predicate "singapore" and labeled "storm".
Answer: select(X):-desk(X),not singapore(X,"storm").
Explanation: The predicate "desk" includes values associated with the predicate "city","height","moto","author","rome","description","name","city","author","height","description","name","rome","author","city","description","name","height","description","author","rome","description","name","height","description","author","rome","description","name","height","description","author","rome","description","name","height","description","author","rome","description","name","height","description","author","rome","description","name","height","description","author","rome","description","name","height","description","author","rome","description","name

unique_rules: 
['select(X):-desk(X),not singapore(X,"storm").']

jaccard: 1.0

AS desired: [['desk(1)', 'desk(2)', 'desk(3)', 'singapore(1,"lightblue")', 'singapore(2,"quality")', 'singapore(3,"pink")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['desk(1)', 'desk(2)', 'desk(3)', 'singapore(1,"lightblue")', 'singapore(2,"quality")', 'singapore(3,"pink")', 'select(1)', 'select(2)', 'select(3)']]


656
numeric_filtering

question: 
Write an ASP solution to identify values tied to the predicate "cosenza" with a value different than 37.

answer from file: 
select(X):-cosenza(X,C),C!=37.

parsed from model: 
select(X):-cosenza(X,C),C!=37.

facts: 
cosenza(1..3, 1..100).

generated: 
Write an ASP solution to identify values tied to the predicate "cosenza" with a value different than 37.
Answer: select(X):-cosenza(X,C),C!=37.
cosenza(X,C):-cosenza(X,C),C==37.

unique_rules: 
['select(X):-cosenza(X,C),C!=37.', 'cosenza(X,C):-cosenza(X,C),C==37.']

jaccard: 1.0

AS desired: [['cosenza(1,1)', 'cosenza(1,2)', 'cosenza(1,3)', 'cosenza(1,4)', 'cosenza(1,5)', 'cosenza(1,6)', 'cosenza(1,7)', 'cosenza(1,8)', 'cosenza(1,9)', 'cosenza(1,10)', 'cosenza(1,11)', 'cosenza(1,12)', 'cosenza(1,13)', 'cosenza(1,14)', 'cosenza(1,15)', 'cosenza(1,16)', 'cosenza(1,17)', 'cosenza(1,18)', 'cosenza(1,19)', 'cosenza(1,20)', 'cosenza(1,21)', 'cosenza(1,22)', 'cosenza(1,23)', 'cosenza(1,24)', 'cosenza(1,25)', 'cosenza(1,26)', 'cosenza(1,27)', 'cosenza(1,28)', 'cosenza(1,29)', 'cosenza(1,30)', 'cosenza(1,31)', 'cosenza(1,32)', 'cosenza(1,33)', 'cosenza(1,34)', 'cosenza(1,35)', 'cosenza(1,36)', 'cosenza(1,37)', 'cosenza(1,38)', 'cosenza(1,39)', 'cosenza(1,40)', 'cosenza(1,41)', 'cosenza(1,42)', 'cosenza(1,43)', 'cosenza(1,44)', 'cosenza(1,45)', 'cosenza(1,46)', 'cosenza(1,47)', 'cosenza(1,48)', 'cosenza(1,49)', 'cosenza(1,50)', 'cosenza(1,51)', 'cosenza(1,52)', 'cosenza(1,53)', 'cosenza(1,54)', 'cosenza(1,55)', 'cosenza(1,56)', 'cosenza(1,57)', 'cosenza(1,58)', 'cosenza(1,59)', 'cosenza(1,60)', 'cosenza(1,61)', 'cosenza(1,62)', 'cosenza(1,63)', 'cosenza(1,64)', 'cosenza(1,65)', 'cosenza(1,66)', 'cosenza(1,67)', 'cosenza(1,68)', 'cosenza(1,69)', 'cosenza(1,70)', 'cosenza(1,71)', 'cosenza(1,72)', 'cosenza(1,73)', 'cosenza(1,74)', 'cosenza(1,75)', 'cosenza(1,76)', 'cosenza(1,77)', 'cosenza(1,78)', 'cosenza(1,79)', 'cosenza(1,80)', 'cosenza(1,81)', 'cosenza(1,82)', 'cosenza(1,83)', 'cosenza(1,84)', 'cosenza(1,85)', 'cosenza(1,86)', 'cosenza(1,87)', 'cosenza(1,88)', 'cosenza(1,89)', 'cosenza(1,90)', 'cosenza(1,91)', 'cosenza(1,92)', 'cosenza(1,93)', 'cosenza(1,94)', 'cosenza(1,95)', 'cosenza(1,96)', 'cosenza(1,97)', 'cosenza(1,98)', 'cosenza(1,99)', 'cosenza(1,100)', 'cosenza(2,1)', 'cosenza(2,2)', 'cosenza(2,3)', 'cosenza(2,4)', 'cosenza(2,5)', 'cosenza(2,6)', 'cosenza(2,7)', 'cosenza(2,8)', 'cosenza(2,9)', 'cosenza(2,10)', 'cosenza(2,11)', 'cosenza(2,12)', 'cosenza(2,13)', 'cosenza(2,14)', 'cosenza(2,15)', 'cosenza(2,16)', 'cosenza(2,17)', 'cosenza(2,18)', 'cosenza(2,19)', 'cosenza(2,20)', 'cosenza(2,21)', 'cosenza(2,22)', 'cosenza(2,23)', 'cosenza(2,24)', 'cosenza(2,25)', 'cosenza(2,26)', 'cosenza(2,27)', 'cosenza(2,28)', 'cosenza(2,29)', 'cosenza(2,30)', 'cosenza(2,31)', 'cosenza(2,32)', 'cosenza(2,33)', 'cosenza(2,34)', 'cosenza(2,35)', 'cosenza(2,36)', 'cosenza(2,37)', 'cosenza(2,38)', 'cosenza(2,39)', 'cosenza(2,40)', 'cosenza(2,41)', 'cosenza(2,42)', 'cosenza(2,43)', 'cosenza(2,44)', 'cosenza(2,45)', 'cosenza(2,46)', 'cosenza(2,47)', 'cosenza(2,48)', 'cosenza(2,49)', 'cosenza(2,50)', 'cosenza(2,51)', 'cosenza(2,52)', 'cosenza(2,53)', 'cosenza(2,54)', 'cosenza(2,55)', 'cosenza(2,56)', 'cosenza(2,57)', 'cosenza(2,58)', 'cosenza(2,59)', 'cosenza(2,60)', 'cosenza(2,61)', 'cosenza(2,62)', 'cosenza(2,63)', 'cosenza(2,64)', 'cosenza(2,65)', 'cosenza(2,66)', 'cosenza(2,67)', 'cosenza(2,68)', 'cosenza(2,69)', 'cosenza(2,70)', 'cosenza(2,71)', 'cosenza(2,72)', 'cosenza(2,73)', 'cosenza(2,74)', 'cosenza(2,75)', 'cosenza(2,76)', 'cosenza(2,77)', 'cosenza(2,78)', 'cosenza(2,79)', 'cosenza(2,80)', 'cosenza(2,81)', 'cosenza(2,82)', 'cosenza(2,83)', 'cosenza(2,84)', 'cosenza(2,85)', 'cosenza(2,86)', 'cosenza(2,87)', 'cosenza(2,88)', 'cosenza(2,89)', 'cosenza(2,90)', 'cosenza(2,91)', 'cosenza(2,92)', 'cosenza(2,93)', 'cosenza(2,94)', 'cosenza(2,95)', 'cosenza(2,96)', 'cosenza(2,97)', 'cosenza(2,98)', 'cosenza(2,99)', 'cosenza(2,100)', 'cosenza(3,1)', 'cosenza(3,2)', 'cosenza(3,3)', 'cosenza(3,4)', 'cosenza(3,5)', 'cosenza(3,6)', 'cosenza(3,7)', 'cosenza(3,8)', 'cosenza(3,9)', 'cosenza(3,10)', 'cosenza(3,11)', 'cosenza(3,12)', 'cosenza(3,13)', 'cosenza(3,14)', 'cosenza(3,15)', 'cosenza(3,16)', 'cosenza(3,17)', 'cosenza(3,18)', 'cosenza(3,19)', 'cosenza(3,20)', 'cosenza(3,21)', 'cosenza(3,22)', 'cosenza(3,23)', 'cosenza(3,24)', 'cosenza(3,25)', 'cosenza(3,26)', 'cosenza(3,27)', 'cosenza(3,28)', 'cosenza(3,29)', 'cosenza(3,30)', 'cosenza(3,31)', 'cosenza(3,32)', 'cosenza(3,33)', 'cosenza(3,34)', 'cosenza(3,35)', 'cosenza(3,36)', 'cosenza(3,37)', 'cosenza(3,38)', 'cosenza(3,39)', 'cosenza(3,40)', 'cosenza(3,41)', 'cosenza(3,42)', 'cosenza(3,43)', 'cosenza(3,44)', 'cosenza(3,45)', 'cosenza(3,46)', 'cosenza(3,47)', 'cosenza(3,48)', 'cosenza(3,49)', 'cosenza(3,50)', 'cosenza(3,51)', 'cosenza(3,52)', 'cosenza(3,53)', 'cosenza(3,54)', 'cosenza(3,55)', 'cosenza(3,56)', 'cosenza(3,57)', 'cosenza(3,58)', 'cosenza(3,59)', 'cosenza(3,60)', 'cosenza(3,61)', 'cosenza(3,62)', 'cosenza(3,63)', 'cosenza(3,64)', 'cosenza(3,65)', 'cosenza(3,66)', 'cosenza(3,67)', 'cosenza(3,68)', 'cosenza(3,69)', 'cosenza(3,70)', 'cosenza(3,71)', 'cosenza(3,72)', 'cosenza(3,73)', 'cosenza(3,74)', 'cosenza(3,75)', 'cosenza(3,76)', 'cosenza(3,77)', 'cosenza(3,78)', 'cosenza(3,79)', 'cosenza(3,80)', 'cosenza(3,81)', 'cosenza(3,82)', 'cosenza(3,83)', 'cosenza(3,84)', 'cosenza(3,85)', 'cosenza(3,86)', 'cosenza(3,87)', 'cosenza(3,88)', 'cosenza(3,89)', 'cosenza(3,90)', 'cosenza(3,91)', 'cosenza(3,92)', 'cosenza(3,93)', 'cosenza(3,94)', 'cosenza(3,95)', 'cosenza(3,96)', 'cosenza(3,97)', 'cosenza(3,98)', 'cosenza(3,99)', 'cosenza(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['cosenza(1,1)', 'cosenza(1,2)', 'cosenza(1,3)', 'cosenza(1,4)', 'cosenza(1,5)', 'cosenza(1,6)', 'cosenza(1,7)', 'cosenza(1,8)', 'cosenza(1,9)', 'cosenza(1,10)', 'cosenza(1,11)', 'cosenza(1,12)', 'cosenza(1,13)', 'cosenza(1,14)', 'cosenza(1,15)', 'cosenza(1,16)', 'cosenza(1,17)', 'cosenza(1,18)', 'cosenza(1,19)', 'cosenza(1,20)', 'cosenza(1,21)', 'cosenza(1,22)', 'cosenza(1,23)', 'cosenza(1,24)', 'cosenza(1,25)', 'cosenza(1,26)', 'cosenza(1,27)', 'cosenza(1,28)', 'cosenza(1,29)', 'cosenza(1,30)', 'cosenza(1,31)', 'cosenza(1,32)', 'cosenza(1,33)', 'cosenza(1,34)', 'cosenza(1,35)', 'cosenza(1,36)', 'cosenza(1,37)', 'cosenza(1,38)', 'cosenza(1,39)', 'cosenza(1,40)', 'cosenza(1,41)', 'cosenza(1,42)', 'cosenza(1,43)', 'cosenza(1,44)', 'cosenza(1,45)', 'cosenza(1,46)', 'cosenza(1,47)', 'cosenza(1,48)', 'cosenza(1,49)', 'cosenza(1,50)', 'cosenza(1,51)', 'cosenza(1,52)', 'cosenza(1,53)', 'cosenza(1,54)', 'cosenza(1,55)', 'cosenza(1,56)', 'cosenza(1,57)', 'cosenza(1,58)', 'cosenza(1,59)', 'cosenza(1,60)', 'cosenza(1,61)', 'cosenza(1,62)', 'cosenza(1,63)', 'cosenza(1,64)', 'cosenza(1,65)', 'cosenza(1,66)', 'cosenza(1,67)', 'cosenza(1,68)', 'cosenza(1,69)', 'cosenza(1,70)', 'cosenza(1,71)', 'cosenza(1,72)', 'cosenza(1,73)', 'cosenza(1,74)', 'cosenza(1,75)', 'cosenza(1,76)', 'cosenza(1,77)', 'cosenza(1,78)', 'cosenza(1,79)', 'cosenza(1,80)', 'cosenza(1,81)', 'cosenza(1,82)', 'cosenza(1,83)', 'cosenza(1,84)', 'cosenza(1,85)', 'cosenza(1,86)', 'cosenza(1,87)', 'cosenza(1,88)', 'cosenza(1,89)', 'cosenza(1,90)', 'cosenza(1,91)', 'cosenza(1,92)', 'cosenza(1,93)', 'cosenza(1,94)', 'cosenza(1,95)', 'cosenza(1,96)', 'cosenza(1,97)', 'cosenza(1,98)', 'cosenza(1,99)', 'cosenza(1,100)', 'cosenza(2,1)', 'cosenza(2,2)', 'cosenza(2,3)', 'cosenza(2,4)', 'cosenza(2,5)', 'cosenza(2,6)', 'cosenza(2,7)', 'cosenza(2,8)', 'cosenza(2,9)', 'cosenza(2,10)', 'cosenza(2,11)', 'cosenza(2,12)', 'cosenza(2,13)', 'cosenza(2,14)', 'cosenza(2,15)', 'cosenza(2,16)', 'cosenza(2,17)', 'cosenza(2,18)', 'cosenza(2,19)', 'cosenza(2,20)', 'cosenza(2,21)', 'cosenza(2,22)', 'cosenza(2,23)', 'cosenza(2,24)', 'cosenza(2,25)', 'cosenza(2,26)', 'cosenza(2,27)', 'cosenza(2,28)', 'cosenza(2,29)', 'cosenza(2,30)', 'cosenza(2,31)', 'cosenza(2,32)', 'cosenza(2,33)', 'cosenza(2,34)', 'cosenza(2,35)', 'cosenza(2,36)', 'cosenza(2,37)', 'cosenza(2,38)', 'cosenza(2,39)', 'cosenza(2,40)', 'cosenza(2,41)', 'cosenza(2,42)', 'cosenza(2,43)', 'cosenza(2,44)', 'cosenza(2,45)', 'cosenza(2,46)', 'cosenza(2,47)', 'cosenza(2,48)', 'cosenza(2,49)', 'cosenza(2,50)', 'cosenza(2,51)', 'cosenza(2,52)', 'cosenza(2,53)', 'cosenza(2,54)', 'cosenza(2,55)', 'cosenza(2,56)', 'cosenza(2,57)', 'cosenza(2,58)', 'cosenza(2,59)', 'cosenza(2,60)', 'cosenza(2,61)', 'cosenza(2,62)', 'cosenza(2,63)', 'cosenza(2,64)', 'cosenza(2,65)', 'cosenza(2,66)', 'cosenza(2,67)', 'cosenza(2,68)', 'cosenza(2,69)', 'cosenza(2,70)', 'cosenza(2,71)', 'cosenza(2,72)', 'cosenza(2,73)', 'cosenza(2,74)', 'cosenza(2,75)', 'cosenza(2,76)', 'cosenza(2,77)', 'cosenza(2,78)', 'cosenza(2,79)', 'cosenza(2,80)', 'cosenza(2,81)', 'cosenza(2,82)', 'cosenza(2,83)', 'cosenza(2,84)', 'cosenza(2,85)', 'cosenza(2,86)', 'cosenza(2,87)', 'cosenza(2,88)', 'cosenza(2,89)', 'cosenza(2,90)', 'cosenza(2,91)', 'cosenza(2,92)', 'cosenza(2,93)', 'cosenza(2,94)', 'cosenza(2,95)', 'cosenza(2,96)', 'cosenza(2,97)', 'cosenza(2,98)', 'cosenza(2,99)', 'cosenza(2,100)', 'cosenza(3,1)', 'cosenza(3,2)', 'cosenza(3,3)', 'cosenza(3,4)', 'cosenza(3,5)', 'cosenza(3,6)', 'cosenza(3,7)', 'cosenza(3,8)', 'cosenza(3,9)', 'cosenza(3,10)', 'cosenza(3,11)', 'cosenza(3,12)', 'cosenza(3,13)', 'cosenza(3,14)', 'cosenza(3,15)', 'cosenza(3,16)', 'cosenza(3,17)', 'cosenza(3,18)', 'cosenza(3,19)', 'cosenza(3,20)', 'cosenza(3,21)', 'cosenza(3,22)', 'cosenza(3,23)', 'cosenza(3,24)', 'cosenza(3,25)', 'cosenza(3,26)', 'cosenza(3,27)', 'cosenza(3,28)', 'cosenza(3,29)', 'cosenza(3,30)', 'cosenza(3,31)', 'cosenza(3,32)', 'cosenza(3,33)', 'cosenza(3,34)', 'cosenza(3,35)', 'cosenza(3,36)', 'cosenza(3,37)', 'cosenza(3,38)', 'cosenza(3,39)', 'cosenza(3,40)', 'cosenza(3,41)', 'cosenza(3,42)', 'cosenza(3,43)', 'cosenza(3,44)', 'cosenza(3,45)', 'cosenza(3,46)', 'cosenza(3,47)', 'cosenza(3,48)', 'cosenza(3,49)', 'cosenza(3,50)', 'cosenza(3,51)', 'cosenza(3,52)', 'cosenza(3,53)', 'cosenza(3,54)', 'cosenza(3,55)', 'cosenza(3,56)', 'cosenza(3,57)', 'cosenza(3,58)', 'cosenza(3,59)', 'cosenza(3,60)', 'cosenza(3,61)', 'cosenza(3,62)', 'cosenza(3,63)', 'cosenza(3,64)', 'cosenza(3,65)', 'cosenza(3,66)', 'cosenza(3,67)', 'cosenza(3,68)', 'cosenza(3,69)', 'cosenza(3,70)', 'cosenza(3,71)', 'cosenza(3,72)', 'cosenza(3,73)', 'cosenza(3,74)', 'cosenza(3,75)', 'cosenza(3,76)', 'cosenza(3,77)', 'cosenza(3,78)', 'cosenza(3,79)', 'cosenza(3,80)', 'cosenza(3,81)', 'cosenza(3,82)', 'cosenza(3,83)', 'cosenza(3,84)', 'cosenza(3,85)', 'cosenza(3,86)', 'cosenza(3,87)', 'cosenza(3,88)', 'cosenza(3,89)', 'cosenza(3,90)', 'cosenza(3,91)', 'cosenza(3,92)', 'cosenza(3,93)', 'cosenza(3,94)', 'cosenza(3,95)', 'cosenza(3,96)', 'cosenza(3,97)', 'cosenza(3,98)', 'cosenza(3,99)', 'cosenza(3,100)', 'select(1)', 'select(2)', 'select(3)']]


657
assignment

question: 
Write an ASP code snippet to connect a single label from "cosenza","pink","flower","white","quality","toronto","darkmagenta" to elements specified by the predicate "lake".

answer from file: 
assign(X,"cosenza")|assign(X,"pink")|assign(X,"flower")|assign(X,"white")|assign(X,"quality")|assign(X,"toronto")|assign(X,"darkmagenta"):-lake(X).

parsed from model: 
assign(X,"cosenza")|assign(X,"pink")|assign(X,"flower")|assign(X,"white")|assign(X,"quality")|assign(X,"toronto")|assign(X,"darkmagenta"):-lake(X).

facts: 
lake(1..5).

generated: 
Write an ASP code snippet to connect a single label from "cosenza","pink","flower","white","quality","toronto","darkmagenta" to elements specified by the predicate "lake".
Answer: assign(X,"cosenza")|assign(X,"pink")|assign(X,"flower")|assign(X,"white")|assign(X,"quality")|assign(X,"toronto")|assign(X,"darkmagenta"):-lake(X).

unique_rules: 
['assign(X,"cosenza")|assign(X,"pink")|assign(X,"flower")|assign(X,"white")|assign(X,"quality")|assign(X,"toronto")|assign(X,"darkmagenta"):-lake(X).']

jaccard: 1.0

AS desired: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'assign(1,"darkmagenta")', 'assign(2,"darkmagenta")', 'assign(3,"darkmagenta")', 'assign(4,"darkmagenta")', 'assign(5,"darkmagenta")']]
\AS obtained: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'assign(1,"darkmagenta")', 'assign(2,"darkmagenta")', 'assign(3,"darkmagenta")', 'assign(4,"darkmagenta")', 'assign(5,"darkmagenta")']]


658
constraint

question: 
Generate an ASP application to prevent linking the "chair" predicate with a value of 4 to the label "surname".

answer from file: 
:-assign(4,surname).

parsed from model: 
:-assign(4,surname).

facts: 
chair(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-chair(X).

generated: 
Generate an ASP application to prevent linking the "chair" predicate with a value of 4 to the label "surname".
Answer: :-assign(4,surname).
This ensures that the "chair" predicate with a value of 4 is not linked to the label "surname".

unique_rules: 
[':-assign(4,surname).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'chair(1)', 'chair(2)', 'chair(3)', 'chair(4)', 'chair(5)', 'chair(6)', 'chair(7)', 'chair(8)', 'chair(9)', 'chair(10)', 'chair(11)', 'chair(12)', 'chair(13)', 'chair(14)', 'chair(15)', 'chair(16)', 'chair(17)', 'chair(18)', 'chair(19)', 'chair(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'chair(1)', 'chair(2)', 'chair(3)', 'chair(4)', 'chair(5)', 'chair(6)', 'chair(7)', 'chair(8)', 'chair(9)', 'chair(10)', 'chair(11)', 'chair(12)', 'chair(13)', 'chair(14)', 'chair(15)', 'chair(16)', 'chair(17)', 'chair(18)', 'chair(19)', 'chair(20)']]


659
combination

question: 
Compose an ASP script that generates the cross-product of elements between the predicates "flower" and "wall".

answer from file: 
combination(X,Y):-flower(X),wall(Y).

parsed from model: 
cross_product(X,Y):-flower(X),wall(Y).

facts: 
flower(1..4).wall(1..5).

generated: 
Compose an ASP script that generates the cross-product of elements between the predicates "flower" and "wall".
Answer: cross_product(X,Y):-flower(X),wall(Y).
cross_product(X,Y):-flower(X),not wall(Y).
cross_product(X,Y):-not flower(X),wall(Y).

unique_rules: 
['cross_product(X,Y):-flower(X),wall(Y).', 'cross_product(X,Y):-flower(X),not wall(Y).', 'cross_product(X,Y):-not flower(X),wall(Y).']

jaccard: 0.0

AS desired: [['wall(1)', 'wall(2)', 'wall(3)', 'wall(4)', 'wall(5)', 'flower(1)', 'flower(2)', 'flower(3)', 'flower(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['wall(1)', 'wall(2)', 'wall(3)', 'wall(4)', 'wall(5)', 'flower(1)', 'flower(2)', 'flower(3)', 'flower(4)', 'cross_product(1,1)', 'cross_product(1,2)', 'cross_product(1,3)', 'cross_product(1,4)', 'cross_product(1,5)', 'cross_product(2,1)', 'cross_product(2,2)', 'cross_product(2,3)', 'cross_product(2,4)', 'cross_product(2,5)', 'cross_product(3,1)', 'cross_product(3,2)', 'cross_product(3,3)', 'cross_product(3,4)', 'cross_product(3,5)', 'cross_product(4,1)', 'cross_product(4,2)', 'cross_product(4,3)', 'cross_product(4,4)', 'cross_product(4,5)']]


660
join

question: 
Design an ASP application to solve the problem by defining the predicate "wall_chair" which links each wall to the owner of chair, using fields "ID","quality","chairID","weight" for "wall" and fields "ID","hair","owner" for "chair".

answer from file: 
wall_chair(X,Z):-wall(X,_,Y,_),chair(Y,_,Z).

parsed from model: 
wall_chair_chair(X,Z):-wall(X,_,Y,_),chair(Y,hair,Z).

facts: 
wall("ID","quality","chairID","weight").chair("ID","hair","owner").

generated: 
Design an ASP application to solve the problem by defining the predicate "wall_chair" which links each wall to the owner of chair, using fields "ID","quality","chairID","weight" for "wall" and fields "ID","hair","owner" for "chair". Define the predicate "wall_chair_chair" which links each wall to the owner of chair.
Answer: wall_chair_chair(X,Z):-wall(X,_,Y,_),chair(Y,hair,Z).
wall_chair_chair(X,Z):-wall(X,_,_,_),chair(Z,_,X).
wall(X,_,Y,_),chair(Y,_,X).
wall(X,_,_,Z),chair(Z,hair,X).

unique_rules: 
['wall_chair_chair(X,Z):-wall(X,_,Y,_),chair(Y,hair,Z).', 'wall_chair_chair(X,Z):-wall(X,_,_,_),chair(Z,_,X).']

jaccard: 1.0

AS desired: [['wall("ID","quality","chairID","weight")', 'chair("ID","hair","owner")']]
\AS obtained: [['chair("ID","hair","owner")', 'wall("ID","quality","chairID","weight")']]


661
closure

question: 
Generate an ASP solution that computes the transitive closure of the "flower" predicate, defining the "journey" predicate.

answer from file: 
journey(X,Y):-flower(X,Y).
journey(X,Y):-flower(X,Z),journey(Z,Y).

parsed from model: 
journey(X,Y):-flower(X,Y).
journey(X,Y):-flower(X,Z),journey(Z,Y).

facts: 
flower(1..3, 1..4).

generated: 
Generate an ASP solution that computes the transitive closure of the "flower" predicate, defining the "journey" predicate.
Answer: journey(X,Y):-flower(X,Y).
journey(X,Y):-flower(X,Z),journey(Z,Y).
journey(X,Y):-not flower(X,Y).
journey(X,Y):-city(X,Y).

unique_rules: 
['journey(X,Y):-flower(X,Y).', 'journey(X,Y):-flower(X,Z),journey(Z,Y).', 'journey(X,Y):-not flower(X,Y).', 'journey(X,Y):-city(X,Y).']

jaccard: 1.0

AS desired: [['flower(1,1)', 'flower(1,2)', 'flower(1,3)', 'flower(1,4)', 'flower(2,1)', 'flower(2,2)', 'flower(2,3)', 'flower(2,4)', 'flower(3,1)', 'flower(3,2)', 'flower(3,3)', 'flower(3,4)', 'journey(1,1)', 'journey(1,2)', 'journey(1,3)', 'journey(1,4)', 'journey(2,1)', 'journey(2,2)', 'journey(2,3)', 'journey(2,4)', 'journey(3,1)', 'journey(3,2)', 'journey(3,3)', 'journey(3,4)']]
\AS obtained: [['flower(1,1)', 'flower(1,2)', 'flower(1,3)', 'flower(1,4)', 'flower(2,1)', 'flower(2,2)', 'flower(2,3)', 'flower(2,4)', 'flower(3,1)', 'flower(3,2)', 'flower(3,3)', 'flower(3,4)', 'journey(1,1)', 'journey(1,2)', 'journey(1,3)', 'journey(1,4)', 'journey(2,1)', 'journey(2,2)', 'journey(2,3)', 'journey(2,4)', 'journey(3,1)', 'journey(3,2)', 'journey(3,3)', 'journey(3,4)']]


662
preference

question: 
Develop an ASP script to keep the predicate "butterfly" with value "9" unlinked from "cairo". Any occurrence incurs a cost of "1" at level "1".

answer from file: 
:~assign(9,"cairo").[1@1]

parsed from model: 
:~assign(9,"cairo").[1@1]

facts: 
butterfly(1..20).

generated: 
Develop an ASP script to keep the predicate "butterfly" with value "9" unlinked from "cairo". Any occurrence incurs a cost of "1" at level "1".
Answer: :~assign(9,"cairo").[1@1]
The predicate "car" has fields "ID","height","author","city","name","price","description","author","city","name","height","description","price","city","author","name","height","description","city","name","price","author","city","name","height","description","price","city","author","name","height","description","city","name","price","author","city","name","height","description","price","city","author","name","height","description","city","name","price","author","city","name","height","description","price","city","author","name","height","description","city","name","price

unique_rules: 
[':~assign(9,"cairo").[1@1]']

jaccard: 1.0

AS desired: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)', 'butterfly(6)', 'butterfly(7)', 'butterfly(8)', 'butterfly(9)', 'butterfly(10)', 'butterfly(11)', 'butterfly(12)', 'butterfly(13)', 'butterfly(14)', 'butterfly(15)', 'butterfly(16)', 'butterfly(17)', 'butterfly(18)', 'butterfly(19)', 'butterfly(20)']]
\AS obtained: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)', 'butterfly(6)', 'butterfly(7)', 'butterfly(8)', 'butterfly(9)', 'butterfly(10)', 'butterfly(11)', 'butterfly(12)', 'butterfly(13)', 'butterfly(14)', 'butterfly(15)', 'butterfly(16)', 'butterfly(17)', 'butterfly(18)', 'butterfly(19)', 'butterfly(20)']]


663
filtering

question: 
Design an ASP program to gather values tied to the "cosenza" label within the context of the predicate "laptop".

answer from file: 
select(X):-laptop(X,"cosenza").

parsed from model: 
select(X):-laptop(X,"cosenza").

facts: 
laptop(1..5, "cosenza").

generated: 
Design an ASP program to gather values tied to the "cosenza" label within the context of the predicate "laptop".
Answer: select(X):-laptop(X,"cosenza").
select(X):-laptop(X,"author").
select(X):-laptop(X,"city").
select(X):-laptop(X,"description").
select(X):-laptop(X,"height").
select(X):-laptop(X,"name").
select(X):-laptop(X,"price").
select(X):-laptop(X,"author","description").
select(X):-laptop(X,"author","height").
select(X):-laptop(X,"author","city").
select(X):-laptop(X,"author","description","height").
select(X):-laptop(X,"description","height").
select(

unique_rules: 
['select(X):-laptop(X,"cosenza").', 'select(X):-laptop(X,"author").', 'select(X):-laptop(X,"city").', 'select(X):-laptop(X,"description").', 'select(X):-laptop(X,"height").', 'select(X):-laptop(X,"name").', 'select(X):-laptop(X,"price").', 'select(X):-laptop(X,"author","description").', 'select(X):-laptop(X,"author","height").', 'select(X):-laptop(X,"author","city").', 'select(X):-laptop(X,"author","description","height").', 'select(X):-laptop(X,"description","height").']

jaccard: 1.0

AS desired: [['laptop(1,"cosenza")', 'laptop(2,"cosenza")', 'laptop(3,"cosenza")', 'laptop(4,"cosenza")', 'laptop(5,"cosenza")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['laptop(1,"cosenza")', 'laptop(2,"cosenza")', 'laptop(3,"cosenza")', 'laptop(4,"cosenza")', 'laptop(5,"cosenza")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


664
negative_filtering

question: 
Draft an ASP solution to identify values associated with the predicate "white" but not tied to the predicate "lightblue" and labeled "owner".

answer from file: 
select(X):-white(X),not lightblue(X,"owner").

parsed from model: 
select(X):-white(X),not lightblue(X,"owner").

facts: 
white(1..3).lightblue(1,"darkmagenta").lightblue(2,"lake").lightblue(3,"roof").

generated: 
Draft an ASP solution to identify values associated with the predicate "white" but not tied to the predicate "lightblue" and labeled "owner".
Answer: select(X):-white(X),not lightblue(X,"owner").
white(X):-age(X,18),author(X,"rome").
lightblue(X,"author").

unique_rules: 
['select(X):-white(X),not lightblue(X,"owner").', 'white(X):-age(X,18),author(X,"rome").']

jaccard: 1.0

AS desired: [['white(1)', 'white(2)', 'white(3)', 'lightblue(1,"darkmagenta")', 'lightblue(2,"lake")', 'lightblue(3,"roof")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['white(1)', 'white(2)', 'white(3)', 'lightblue(1,"darkmagenta")', 'lightblue(2,"lake")', 'lightblue(3,"roof")', 'select(1)', 'select(2)', 'select(3)']]


665
numeric_filtering

question: 
Create an ASP application to fetch all values tied to the predicate "black" with a value different than 54.

answer from file: 
select(X):-black(X,C),C!=54.

parsed from model: 
select(X):-black(X,C),C!=54.

facts: 
black(1..3, 1..100).

generated: 
Create an ASP application to fetch all values tied to the predicate "black" with a value different than 54.
Answer: select(X):-black(X,C),C!=54.
black(X,C):-black(X,C),C==54.

unique_rules: 
['select(X):-black(X,C),C!=54.', 'black(X,C):-black(X,C),C==54.']

jaccard: 1.0

AS desired: [['black(1,1)', 'black(1,2)', 'black(1,3)', 'black(1,4)', 'black(1,5)', 'black(1,6)', 'black(1,7)', 'black(1,8)', 'black(1,9)', 'black(1,10)', 'black(1,11)', 'black(1,12)', 'black(1,13)', 'black(1,14)', 'black(1,15)', 'black(1,16)', 'black(1,17)', 'black(1,18)', 'black(1,19)', 'black(1,20)', 'black(1,21)', 'black(1,22)', 'black(1,23)', 'black(1,24)', 'black(1,25)', 'black(1,26)', 'black(1,27)', 'black(1,28)', 'black(1,29)', 'black(1,30)', 'black(1,31)', 'black(1,32)', 'black(1,33)', 'black(1,34)', 'black(1,35)', 'black(1,36)', 'black(1,37)', 'black(1,38)', 'black(1,39)', 'black(1,40)', 'black(1,41)', 'black(1,42)', 'black(1,43)', 'black(1,44)', 'black(1,45)', 'black(1,46)', 'black(1,47)', 'black(1,48)', 'black(1,49)', 'black(1,50)', 'black(1,51)', 'black(1,52)', 'black(1,53)', 'black(1,54)', 'black(1,55)', 'black(1,56)', 'black(1,57)', 'black(1,58)', 'black(1,59)', 'black(1,60)', 'black(1,61)', 'black(1,62)', 'black(1,63)', 'black(1,64)', 'black(1,65)', 'black(1,66)', 'black(1,67)', 'black(1,68)', 'black(1,69)', 'black(1,70)', 'black(1,71)', 'black(1,72)', 'black(1,73)', 'black(1,74)', 'black(1,75)', 'black(1,76)', 'black(1,77)', 'black(1,78)', 'black(1,79)', 'black(1,80)', 'black(1,81)', 'black(1,82)', 'black(1,83)', 'black(1,84)', 'black(1,85)', 'black(1,86)', 'black(1,87)', 'black(1,88)', 'black(1,89)', 'black(1,90)', 'black(1,91)', 'black(1,92)', 'black(1,93)', 'black(1,94)', 'black(1,95)', 'black(1,96)', 'black(1,97)', 'black(1,98)', 'black(1,99)', 'black(1,100)', 'black(2,1)', 'black(2,2)', 'black(2,3)', 'black(2,4)', 'black(2,5)', 'black(2,6)', 'black(2,7)', 'black(2,8)', 'black(2,9)', 'black(2,10)', 'black(2,11)', 'black(2,12)', 'black(2,13)', 'black(2,14)', 'black(2,15)', 'black(2,16)', 'black(2,17)', 'black(2,18)', 'black(2,19)', 'black(2,20)', 'black(2,21)', 'black(2,22)', 'black(2,23)', 'black(2,24)', 'black(2,25)', 'black(2,26)', 'black(2,27)', 'black(2,28)', 'black(2,29)', 'black(2,30)', 'black(2,31)', 'black(2,32)', 'black(2,33)', 'black(2,34)', 'black(2,35)', 'black(2,36)', 'black(2,37)', 'black(2,38)', 'black(2,39)', 'black(2,40)', 'black(2,41)', 'black(2,42)', 'black(2,43)', 'black(2,44)', 'black(2,45)', 'black(2,46)', 'black(2,47)', 'black(2,48)', 'black(2,49)', 'black(2,50)', 'black(2,51)', 'black(2,52)', 'black(2,53)', 'black(2,54)', 'black(2,55)', 'black(2,56)', 'black(2,57)', 'black(2,58)', 'black(2,59)', 'black(2,60)', 'black(2,61)', 'black(2,62)', 'black(2,63)', 'black(2,64)', 'black(2,65)', 'black(2,66)', 'black(2,67)', 'black(2,68)', 'black(2,69)', 'black(2,70)', 'black(2,71)', 'black(2,72)', 'black(2,73)', 'black(2,74)', 'black(2,75)', 'black(2,76)', 'black(2,77)', 'black(2,78)', 'black(2,79)', 'black(2,80)', 'black(2,81)', 'black(2,82)', 'black(2,83)', 'black(2,84)', 'black(2,85)', 'black(2,86)', 'black(2,87)', 'black(2,88)', 'black(2,89)', 'black(2,90)', 'black(2,91)', 'black(2,92)', 'black(2,93)', 'black(2,94)', 'black(2,95)', 'black(2,96)', 'black(2,97)', 'black(2,98)', 'black(2,99)', 'black(2,100)', 'black(3,1)', 'black(3,2)', 'black(3,3)', 'black(3,4)', 'black(3,5)', 'black(3,6)', 'black(3,7)', 'black(3,8)', 'black(3,9)', 'black(3,10)', 'black(3,11)', 'black(3,12)', 'black(3,13)', 'black(3,14)', 'black(3,15)', 'black(3,16)', 'black(3,17)', 'black(3,18)', 'black(3,19)', 'black(3,20)', 'black(3,21)', 'black(3,22)', 'black(3,23)', 'black(3,24)', 'black(3,25)', 'black(3,26)', 'black(3,27)', 'black(3,28)', 'black(3,29)', 'black(3,30)', 'black(3,31)', 'black(3,32)', 'black(3,33)', 'black(3,34)', 'black(3,35)', 'black(3,36)', 'black(3,37)', 'black(3,38)', 'black(3,39)', 'black(3,40)', 'black(3,41)', 'black(3,42)', 'black(3,43)', 'black(3,44)', 'black(3,45)', 'black(3,46)', 'black(3,47)', 'black(3,48)', 'black(3,49)', 'black(3,50)', 'black(3,51)', 'black(3,52)', 'black(3,53)', 'black(3,54)', 'black(3,55)', 'black(3,56)', 'black(3,57)', 'black(3,58)', 'black(3,59)', 'black(3,60)', 'black(3,61)', 'black(3,62)', 'black(3,63)', 'black(3,64)', 'black(3,65)', 'black(3,66)', 'black(3,67)', 'black(3,68)', 'black(3,69)', 'black(3,70)', 'black(3,71)', 'black(3,72)', 'black(3,73)', 'black(3,74)', 'black(3,75)', 'black(3,76)', 'black(3,77)', 'black(3,78)', 'black(3,79)', 'black(3,80)', 'black(3,81)', 'black(3,82)', 'black(3,83)', 'black(3,84)', 'black(3,85)', 'black(3,86)', 'black(3,87)', 'black(3,88)', 'black(3,89)', 'black(3,90)', 'black(3,91)', 'black(3,92)', 'black(3,93)', 'black(3,94)', 'black(3,95)', 'black(3,96)', 'black(3,97)', 'black(3,98)', 'black(3,99)', 'black(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['black(1,1)', 'black(1,2)', 'black(1,3)', 'black(1,4)', 'black(1,5)', 'black(1,6)', 'black(1,7)', 'black(1,8)', 'black(1,9)', 'black(1,10)', 'black(1,11)', 'black(1,12)', 'black(1,13)', 'black(1,14)', 'black(1,15)', 'black(1,16)', 'black(1,17)', 'black(1,18)', 'black(1,19)', 'black(1,20)', 'black(1,21)', 'black(1,22)', 'black(1,23)', 'black(1,24)', 'black(1,25)', 'black(1,26)', 'black(1,27)', 'black(1,28)', 'black(1,29)', 'black(1,30)', 'black(1,31)', 'black(1,32)', 'black(1,33)', 'black(1,34)', 'black(1,35)', 'black(1,36)', 'black(1,37)', 'black(1,38)', 'black(1,39)', 'black(1,40)', 'black(1,41)', 'black(1,42)', 'black(1,43)', 'black(1,44)', 'black(1,45)', 'black(1,46)', 'black(1,47)', 'black(1,48)', 'black(1,49)', 'black(1,50)', 'black(1,51)', 'black(1,52)', 'black(1,53)', 'black(1,54)', 'black(1,55)', 'black(1,56)', 'black(1,57)', 'black(1,58)', 'black(1,59)', 'black(1,60)', 'black(1,61)', 'black(1,62)', 'black(1,63)', 'black(1,64)', 'black(1,65)', 'black(1,66)', 'black(1,67)', 'black(1,68)', 'black(1,69)', 'black(1,70)', 'black(1,71)', 'black(1,72)', 'black(1,73)', 'black(1,74)', 'black(1,75)', 'black(1,76)', 'black(1,77)', 'black(1,78)', 'black(1,79)', 'black(1,80)', 'black(1,81)', 'black(1,82)', 'black(1,83)', 'black(1,84)', 'black(1,85)', 'black(1,86)', 'black(1,87)', 'black(1,88)', 'black(1,89)', 'black(1,90)', 'black(1,91)', 'black(1,92)', 'black(1,93)', 'black(1,94)', 'black(1,95)', 'black(1,96)', 'black(1,97)', 'black(1,98)', 'black(1,99)', 'black(1,100)', 'black(2,1)', 'black(2,2)', 'black(2,3)', 'black(2,4)', 'black(2,5)', 'black(2,6)', 'black(2,7)', 'black(2,8)', 'black(2,9)', 'black(2,10)', 'black(2,11)', 'black(2,12)', 'black(2,13)', 'black(2,14)', 'black(2,15)', 'black(2,16)', 'black(2,17)', 'black(2,18)', 'black(2,19)', 'black(2,20)', 'black(2,21)', 'black(2,22)', 'black(2,23)', 'black(2,24)', 'black(2,25)', 'black(2,26)', 'black(2,27)', 'black(2,28)', 'black(2,29)', 'black(2,30)', 'black(2,31)', 'black(2,32)', 'black(2,33)', 'black(2,34)', 'black(2,35)', 'black(2,36)', 'black(2,37)', 'black(2,38)', 'black(2,39)', 'black(2,40)', 'black(2,41)', 'black(2,42)', 'black(2,43)', 'black(2,44)', 'black(2,45)', 'black(2,46)', 'black(2,47)', 'black(2,48)', 'black(2,49)', 'black(2,50)', 'black(2,51)', 'black(2,52)', 'black(2,53)', 'black(2,54)', 'black(2,55)', 'black(2,56)', 'black(2,57)', 'black(2,58)', 'black(2,59)', 'black(2,60)', 'black(2,61)', 'black(2,62)', 'black(2,63)', 'black(2,64)', 'black(2,65)', 'black(2,66)', 'black(2,67)', 'black(2,68)', 'black(2,69)', 'black(2,70)', 'black(2,71)', 'black(2,72)', 'black(2,73)', 'black(2,74)', 'black(2,75)', 'black(2,76)', 'black(2,77)', 'black(2,78)', 'black(2,79)', 'black(2,80)', 'black(2,81)', 'black(2,82)', 'black(2,83)', 'black(2,84)', 'black(2,85)', 'black(2,86)', 'black(2,87)', 'black(2,88)', 'black(2,89)', 'black(2,90)', 'black(2,91)', 'black(2,92)', 'black(2,93)', 'black(2,94)', 'black(2,95)', 'black(2,96)', 'black(2,97)', 'black(2,98)', 'black(2,99)', 'black(2,100)', 'black(3,1)', 'black(3,2)', 'black(3,3)', 'black(3,4)', 'black(3,5)', 'black(3,6)', 'black(3,7)', 'black(3,8)', 'black(3,9)', 'black(3,10)', 'black(3,11)', 'black(3,12)', 'black(3,13)', 'black(3,14)', 'black(3,15)', 'black(3,16)', 'black(3,17)', 'black(3,18)', 'black(3,19)', 'black(3,20)', 'black(3,21)', 'black(3,22)', 'black(3,23)', 'black(3,24)', 'black(3,25)', 'black(3,26)', 'black(3,27)', 'black(3,28)', 'black(3,29)', 'black(3,30)', 'black(3,31)', 'black(3,32)', 'black(3,33)', 'black(3,34)', 'black(3,35)', 'black(3,36)', 'black(3,37)', 'black(3,38)', 'black(3,39)', 'black(3,40)', 'black(3,41)', 'black(3,42)', 'black(3,43)', 'black(3,44)', 'black(3,45)', 'black(3,46)', 'black(3,47)', 'black(3,48)', 'black(3,49)', 'black(3,50)', 'black(3,51)', 'black(3,52)', 'black(3,53)', 'black(3,54)', 'black(3,55)', 'black(3,56)', 'black(3,57)', 'black(3,58)', 'black(3,59)', 'black(3,60)', 'black(3,61)', 'black(3,62)', 'black(3,63)', 'black(3,64)', 'black(3,65)', 'black(3,66)', 'black(3,67)', 'black(3,68)', 'black(3,69)', 'black(3,70)', 'black(3,71)', 'black(3,72)', 'black(3,73)', 'black(3,74)', 'black(3,75)', 'black(3,76)', 'black(3,77)', 'black(3,78)', 'black(3,79)', 'black(3,80)', 'black(3,81)', 'black(3,82)', 'black(3,83)', 'black(3,84)', 'black(3,85)', 'black(3,86)', 'black(3,87)', 'black(3,88)', 'black(3,89)', 'black(3,90)', 'black(3,91)', 'black(3,92)', 'black(3,93)', 'black(3,94)', 'black(3,95)', 'black(3,96)', 'black(3,97)', 'black(3,98)', 'black(3,99)', 'black(3,100)', 'select(1)', 'select(2)', 'select(3)']]


666
assignment

question: 
Compose an ASP program that maps a single label from the set "weight","storm","singapore","delhi" to elements determined by the predicate "strength".

answer from file: 
assign(X,"weight")|assign(X,"storm")|assign(X,"singapore")|assign(X,"delhi"):-strength(X).

parsed from model: 
assign(X,"weight")|assign(X,"storm")|assign(X,"singapore")|assign(X,"delhi"):-strength(X).

facts: 
strength(1..5).

generated: 
Compose an ASP program that maps a single label from the set "weight","storm","singapore","delhi" to elements determined by the predicate "strength".
Answer: assign(X,"weight")|assign(X,"storm")|assign(X,"singapore")|assign(X,"delhi"):-strength(X).
assign(X,"weight"):-height(X).
assign(X,"storm"):-height(X).
assign(X,"singapore"):-height(X).
assign(X,"delhi"):-height(X).
```

unique_rules: 
['assign(X,"weight")|assign(X,"storm")|assign(X,"singapore")|assign(X,"delhi"):-strength(X).', 'assign(X,"weight"):-height(X).', 'assign(X,"storm"):-height(X).', 'assign(X,"singapore"):-height(X).', 'assign(X,"delhi"):-height(X).']

jaccard: 1.0

AS desired: [['strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'assign(1,"singapore")', 'assign(2,"delhi")', 'assign(3,"singapore")', 'assign(4,"delhi")', 'assign(5,"delhi")']]
\AS obtained: [['strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'assign(1,"singapore")', 'assign(2,"delhi")', 'assign(3,"singapore")', 'assign(4,"delhi")', 'assign(5,"delhi")']]


667
constraint

question: 
Compose an ASP solution that avoids the predicate "mumbai" with value 2 being mapped to the label "wall".

answer from file: 
:-assign(2,wall).

parsed from model: 
:-assign(2,wall).

facts: 
mumbai(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-mumbai(X).

generated: 
Compose an ASP solution that avoids the predicate "mumbai" with value 2 being mapped to the label "wall".
Answer: :-assign(2,wall).
Explanation: The predicate "mumbai" includes values labeled "city","height","moto","description","author","rome","city","description","author","height","city","description","author","height","city","description","author","height","city","description","author","height","city","description","author","height","city","description","author","height","city","description","author","height","city","description","author","height","city","description","author","height","city","description","author","height","city","description","author","height","city","description","author","height","city","description","author","height","city","description","author","height","city","description

unique_rules: 
[':-assign(2,wall).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'mumbai(1)', 'mumbai(2)', 'mumbai(3)', 'mumbai(4)', 'mumbai(5)', 'mumbai(6)', 'mumbai(7)', 'mumbai(8)', 'mumbai(9)', 'mumbai(10)', 'mumbai(11)', 'mumbai(12)', 'mumbai(13)', 'mumbai(14)', 'mumbai(15)', 'mumbai(16)', 'mumbai(17)', 'mumbai(18)', 'mumbai(19)', 'mumbai(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'mumbai(1)', 'mumbai(2)', 'mumbai(3)', 'mumbai(4)', 'mumbai(5)', 'mumbai(6)', 'mumbai(7)', 'mumbai(8)', 'mumbai(9)', 'mumbai(10)', 'mumbai(11)', 'mumbai(12)', 'mumbai(13)', 'mumbai(14)', 'mumbai(15)', 'mumbai(16)', 'mumbai(17)', 'mumbai(18)', 'mumbai(19)', 'mumbai(20)']]


668
combination

question: 
Write an ASP program that determines all possible combinations of elements from sets represented by the predicates "delhi" and "surname".

answer from file: 
combination(X,Y):-delhi(X),surname(Y).

parsed from model: 
combination(X,Y):-delhi(X),surname(Y).

facts: 
delhi(1..4).surname(1..5).

generated: 
Write an ASP program that determines all possible combinations of elements from sets represented by the predicates "delhi" and "surname".
Answer: combination(X,Y):-delhi(X),surname(Y).
combination(X,Y):-delhi(X),not surname(Y).
combination(X,Y):-not delhi(X),surname(Y).
combination(X,Y):-not delhi(X),not surname(Y).

unique_rules: 
['combination(X,Y):-delhi(X),surname(Y).', 'combination(X,Y):-delhi(X),not surname(Y).', 'combination(X,Y):-not delhi(X),surname(Y).', 'combination(X,Y):-not delhi(X),not surname(Y).']

jaccard: 1.0

AS desired: [['surname(1)', 'surname(2)', 'surname(3)', 'surname(4)', 'surname(5)', 'delhi(1)', 'delhi(2)', 'delhi(3)', 'delhi(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['surname(1)', 'surname(2)', 'surname(3)', 'surname(4)', 'surname(5)', 'delhi(1)', 'delhi(2)', 'delhi(3)', 'delhi(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


669
join

question: 
Generate an ASP program to create the predicate "delhi_laptop" that associates each delhi with the lake of laptop, with the fields "ID","weight","laptopID","hair" of "delhi" and the fields "ID","lake","surname" of "laptop".

answer from file: 
delhi_laptop(X,Z):-delhi(X,_,Y,_),laptop(Y,Z,_).

parsed from model: 
delhi_laptop(X,Z):-delhi(X,_,Y,_),laptop(Y,Z,_).

facts: 
delhi("ID","weight","laptopID","hair").laptop("ID","lake","surname").

generated: 
Generate an ASP program to create the predicate "delhi_laptop" that associates each delhi with the lake of laptop, with the fields "ID","weight","laptopID","hair" of "delhi" and the fields "ID","lake","surname" of "laptop".
Answer: delhi_laptop(X,Z):-delhi(X,_,Y,_),laptop(Y,Z,_).
delhi(X,_,Y,_):- felicità(X,Y,Y).
 felicità(X,Y,Z):-delhi(X,Y,Z),laptop(Y,Y,Z).

unique_rules: 
['delhi_laptop(X,Z):-delhi(X,_,Y,_),laptop(Y,Z,_).', 'delhi(X,_,Y,_):- felicità(X,Y,Y).', 'felicità(X,Y,Z):-delhi(X,Y,Z),laptop(Y,Y,Z).']

jaccard: 1.0

AS desired: [['delhi("ID","weight","laptopID","hair")', 'laptop("ID","lake","surname")']]
\AS obtained: [['delhi("ID","weight","laptopID","hair")', 'laptop("ID","lake","surname")']]


670
closure

question: 
Write an ASP application that defines the predicate "family" based on the transitive closure of the "cairo" predicate.

answer from file: 
family(X,Y):-cairo(X,Y).
family(X,Y):-cairo(X,Z),family(Z,Y).

parsed from model: 
family(X,Y):-cairo(X,Y).
family(X,Y):-cairo(X,Z),family(Z,Y).

facts: 
cairo(1..3, 1..4).

generated: 
Write an ASP application that defines the predicate "family" based on the transitive closure of the "cairo" predicate.
Answer: family(X,Y):-cairo(X,Y).
family(X,Y):-cairo(X,Z),family(Z,Y).
family(X,Y):-not cairo(X,Y).
family(X,Y):-city(X,Y).
city(X,Y):-family(X,Y).
city(X,Y):-city(X,Z),city(Z,Y).

unique_rules: 
['family(X,Y):-cairo(X,Y).', 'family(X,Y):-cairo(X,Z),family(Z,Y).', 'family(X,Y):-not cairo(X,Y).', 'family(X,Y):-city(X,Y).', 'city(X,Y):-family(X,Y).', 'city(X,Y):-city(X,Z),city(Z,Y).']

jaccard: 1.0

AS desired: [['cairo(1,1)', 'cairo(1,2)', 'cairo(1,3)', 'cairo(1,4)', 'cairo(2,1)', 'cairo(2,2)', 'cairo(2,3)', 'cairo(2,4)', 'cairo(3,1)', 'cairo(3,2)', 'cairo(3,3)', 'cairo(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]
\AS obtained: [['cairo(1,1)', 'cairo(1,2)', 'cairo(1,3)', 'cairo(1,4)', 'cairo(2,1)', 'cairo(2,2)', 'cairo(2,3)', 'cairo(2,4)', 'cairo(3,1)', 'cairo(3,2)', 'cairo(3,3)', 'cairo(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]


671
preference

question: 
Craft an ASP solution to prevent the linking of the "cosenza" predicate with value "17" to "owner". Any link incurs a cost of "1" at level "1".

answer from file: 
:~assign(17,"owner").[1@1]

parsed from model: 
:~assign(17,"owner").[1@1]

facts: 
cosenza(1..20).

generated: 
Craft an ASP solution to prevent the linking of the "cosenza" predicate with value "17" to "owner". Any link incurs a cost of "1" at level "1".
Answer: :~assign(17,"owner").[1@1]
The predicate "author" includes fields "ID","city","author","name","price","description","authorID","city","description","price","author","name","height","description","city","author","price","description","name","height","price","author","name","city","description","price","author","name","height","description","city","author","price","description","name","height","price","author","name","city","description","price","author","name","height","description","city","author","price","description","name","height","price","author","name","city","description","price","author","name","height","description

unique_rules: 
[':~assign(17,"owner").[1@1]']

jaccard: 1.0

AS desired: [['cosenza(1)', 'cosenza(2)', 'cosenza(3)', 'cosenza(4)', 'cosenza(5)', 'cosenza(6)', 'cosenza(7)', 'cosenza(8)', 'cosenza(9)', 'cosenza(10)', 'cosenza(11)', 'cosenza(12)', 'cosenza(13)', 'cosenza(14)', 'cosenza(15)', 'cosenza(16)', 'cosenza(17)', 'cosenza(18)', 'cosenza(19)', 'cosenza(20)']]
\AS obtained: [['cosenza(1)', 'cosenza(2)', 'cosenza(3)', 'cosenza(4)', 'cosenza(5)', 'cosenza(6)', 'cosenza(7)', 'cosenza(8)', 'cosenza(9)', 'cosenza(10)', 'cosenza(11)', 'cosenza(12)', 'cosenza(13)', 'cosenza(14)', 'cosenza(15)', 'cosenza(16)', 'cosenza(17)', 'cosenza(18)', 'cosenza(19)', 'cosenza(20)']]


672
filtering

question: 
Design an ASP program to gather values tied to the "mumbai" label within the context of the predicate "desk".

answer from file: 
select(X):-desk(X,"mumbai").

parsed from model: 
select(X):-desk(X,"mumbai").

facts: 
desk(1..5, "mumbai").

generated: 
Design an ASP program to gather values tied to the "mumbai" label within the context of the predicate "desk".
Answer: select(X):-desk(X,"mumbai").
select(X):-desk(X,"dubai").
select(X):-desk(X,"city").
select(X):-desk(X,"moto").
select(X):-desk(X,"rome").
select(X):-desk(X,"shangai").
select(X):-desk(X,"dubai","city").
select(X):-desk(X,"dubai","moto").
select(X):-desk(X,"dubai","rome").
select(X):-desk(X,"dubai","shangai").
select(X):-desk(X,"city","moto").
select(X):-desk(X,"city","rome").


unique_rules: 
['select(X):-desk(X,"mumbai").', 'select(X):-desk(X,"dubai").', 'select(X):-desk(X,"city").', 'select(X):-desk(X,"moto").', 'select(X):-desk(X,"rome").', 'select(X):-desk(X,"shangai").', 'select(X):-desk(X,"dubai","city").', 'select(X):-desk(X,"dubai","moto").', 'select(X):-desk(X,"dubai","rome").', 'select(X):-desk(X,"dubai","shangai").', 'select(X):-desk(X,"city","moto").', 'select(X):-desk(X,"city","rome").']

jaccard: 1.0

AS desired: [['desk(1,"mumbai")', 'desk(2,"mumbai")', 'desk(3,"mumbai")', 'desk(4,"mumbai")', 'desk(5,"mumbai")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['desk(1,"mumbai")', 'desk(2,"mumbai")', 'desk(3,"mumbai")', 'desk(4,"mumbai")', 'desk(5,"mumbai")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


673
negative_filtering

question: 
Draft an ASP solution to identify values associated with the predicate "lake" but not tied to the predicate "strength" and labeled "darkmagenta".

answer from file: 
select(X):-lake(X),not strength(X,"darkmagenta").

parsed from model: 
select(X):-lake(X),not strength(X,"darkmagenta").

facts: 
lake(1..3).strength(1,"surname").strength(2,"flower").strength(3,"darkmagenta").

generated: 
Draft an ASP solution to identify values associated with the predicate "lake" but not tied to the predicate "strength" and labeled "darkmagenta".
Answer: select(X):-lake(X),not strength(X,"darkmagenta").
lake(X):-name(X,"city"),age(X,18).
strength(X,"darkmagenta").
age(X,Y):-city(X,Y).

unique_rules: 
['select(X):-lake(X),not strength(X,"darkmagenta").', 'lake(X):-name(X,"city"),age(X,18).', 'age(X,Y):-city(X,Y).']

jaccard: 1.0

AS desired: [['lake(1)', 'lake(2)', 'lake(3)', 'strength(1,"surname")', 'strength(2,"flower")', 'strength(3,"darkmagenta")', 'select(1)', 'select(2)']]
\AS obtained: [['lake(1)', 'lake(2)', 'lake(3)', 'strength(1,"surname")', 'strength(2,"flower")', 'strength(3,"darkmagenta")', 'select(1)', 'select(2)']]


674
numeric_filtering

question: 
Compose an ASP script to select values linked to the predicate "moscow" with a value different than 1.

answer from file: 
select(X):-moscow(X,C),C!=1.

parsed from model: 
select(X):-moscow(X,C),C!=1.

facts: 
moscow(1..3, 1..100).

generated: 
Compose an ASP script to select values linked to the predicate "moscow" with a value different than 1.
Answer: select(X):-moscow(X,C),C!=1.
```
The predicate "moscow" includes values linked to the predicate "city" with a value different than 1.
The predicate "city" contains values linked to the predicate "author" with a value different than 1.
The predicate "author" contains values linked to the predicate "rome" with a value different than 1.
So, the script selects all values linked to the predicate "moscow" with a value different than 1.
The predicate "rome" contains values linked to the predicate "author" with a value different than 1.
Therefore, the script selects all values linked to the predicate "

unique_rules: 
['select(X):-moscow(X,C),C!=1.']

jaccard: 1.0

AS desired: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(1,5)', 'moscow(1,6)', 'moscow(1,7)', 'moscow(1,8)', 'moscow(1,9)', 'moscow(1,10)', 'moscow(1,11)', 'moscow(1,12)', 'moscow(1,13)', 'moscow(1,14)', 'moscow(1,15)', 'moscow(1,16)', 'moscow(1,17)', 'moscow(1,18)', 'moscow(1,19)', 'moscow(1,20)', 'moscow(1,21)', 'moscow(1,22)', 'moscow(1,23)', 'moscow(1,24)', 'moscow(1,25)', 'moscow(1,26)', 'moscow(1,27)', 'moscow(1,28)', 'moscow(1,29)', 'moscow(1,30)', 'moscow(1,31)', 'moscow(1,32)', 'moscow(1,33)', 'moscow(1,34)', 'moscow(1,35)', 'moscow(1,36)', 'moscow(1,37)', 'moscow(1,38)', 'moscow(1,39)', 'moscow(1,40)', 'moscow(1,41)', 'moscow(1,42)', 'moscow(1,43)', 'moscow(1,44)', 'moscow(1,45)', 'moscow(1,46)', 'moscow(1,47)', 'moscow(1,48)', 'moscow(1,49)', 'moscow(1,50)', 'moscow(1,51)', 'moscow(1,52)', 'moscow(1,53)', 'moscow(1,54)', 'moscow(1,55)', 'moscow(1,56)', 'moscow(1,57)', 'moscow(1,58)', 'moscow(1,59)', 'moscow(1,60)', 'moscow(1,61)', 'moscow(1,62)', 'moscow(1,63)', 'moscow(1,64)', 'moscow(1,65)', 'moscow(1,66)', 'moscow(1,67)', 'moscow(1,68)', 'moscow(1,69)', 'moscow(1,70)', 'moscow(1,71)', 'moscow(1,72)', 'moscow(1,73)', 'moscow(1,74)', 'moscow(1,75)', 'moscow(1,76)', 'moscow(1,77)', 'moscow(1,78)', 'moscow(1,79)', 'moscow(1,80)', 'moscow(1,81)', 'moscow(1,82)', 'moscow(1,83)', 'moscow(1,84)', 'moscow(1,85)', 'moscow(1,86)', 'moscow(1,87)', 'moscow(1,88)', 'moscow(1,89)', 'moscow(1,90)', 'moscow(1,91)', 'moscow(1,92)', 'moscow(1,93)', 'moscow(1,94)', 'moscow(1,95)', 'moscow(1,96)', 'moscow(1,97)', 'moscow(1,98)', 'moscow(1,99)', 'moscow(1,100)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(2,5)', 'moscow(2,6)', 'moscow(2,7)', 'moscow(2,8)', 'moscow(2,9)', 'moscow(2,10)', 'moscow(2,11)', 'moscow(2,12)', 'moscow(2,13)', 'moscow(2,14)', 'moscow(2,15)', 'moscow(2,16)', 'moscow(2,17)', 'moscow(2,18)', 'moscow(2,19)', 'moscow(2,20)', 'moscow(2,21)', 'moscow(2,22)', 'moscow(2,23)', 'moscow(2,24)', 'moscow(2,25)', 'moscow(2,26)', 'moscow(2,27)', 'moscow(2,28)', 'moscow(2,29)', 'moscow(2,30)', 'moscow(2,31)', 'moscow(2,32)', 'moscow(2,33)', 'moscow(2,34)', 'moscow(2,35)', 'moscow(2,36)', 'moscow(2,37)', 'moscow(2,38)', 'moscow(2,39)', 'moscow(2,40)', 'moscow(2,41)', 'moscow(2,42)', 'moscow(2,43)', 'moscow(2,44)', 'moscow(2,45)', 'moscow(2,46)', 'moscow(2,47)', 'moscow(2,48)', 'moscow(2,49)', 'moscow(2,50)', 'moscow(2,51)', 'moscow(2,52)', 'moscow(2,53)', 'moscow(2,54)', 'moscow(2,55)', 'moscow(2,56)', 'moscow(2,57)', 'moscow(2,58)', 'moscow(2,59)', 'moscow(2,60)', 'moscow(2,61)', 'moscow(2,62)', 'moscow(2,63)', 'moscow(2,64)', 'moscow(2,65)', 'moscow(2,66)', 'moscow(2,67)', 'moscow(2,68)', 'moscow(2,69)', 'moscow(2,70)', 'moscow(2,71)', 'moscow(2,72)', 'moscow(2,73)', 'moscow(2,74)', 'moscow(2,75)', 'moscow(2,76)', 'moscow(2,77)', 'moscow(2,78)', 'moscow(2,79)', 'moscow(2,80)', 'moscow(2,81)', 'moscow(2,82)', 'moscow(2,83)', 'moscow(2,84)', 'moscow(2,85)', 'moscow(2,86)', 'moscow(2,87)', 'moscow(2,88)', 'moscow(2,89)', 'moscow(2,90)', 'moscow(2,91)', 'moscow(2,92)', 'moscow(2,93)', 'moscow(2,94)', 'moscow(2,95)', 'moscow(2,96)', 'moscow(2,97)', 'moscow(2,98)', 'moscow(2,99)', 'moscow(2,100)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)', 'moscow(3,5)', 'moscow(3,6)', 'moscow(3,7)', 'moscow(3,8)', 'moscow(3,9)', 'moscow(3,10)', 'moscow(3,11)', 'moscow(3,12)', 'moscow(3,13)', 'moscow(3,14)', 'moscow(3,15)', 'moscow(3,16)', 'moscow(3,17)', 'moscow(3,18)', 'moscow(3,19)', 'moscow(3,20)', 'moscow(3,21)', 'moscow(3,22)', 'moscow(3,23)', 'moscow(3,24)', 'moscow(3,25)', 'moscow(3,26)', 'moscow(3,27)', 'moscow(3,28)', 'moscow(3,29)', 'moscow(3,30)', 'moscow(3,31)', 'moscow(3,32)', 'moscow(3,33)', 'moscow(3,34)', 'moscow(3,35)', 'moscow(3,36)', 'moscow(3,37)', 'moscow(3,38)', 'moscow(3,39)', 'moscow(3,40)', 'moscow(3,41)', 'moscow(3,42)', 'moscow(3,43)', 'moscow(3,44)', 'moscow(3,45)', 'moscow(3,46)', 'moscow(3,47)', 'moscow(3,48)', 'moscow(3,49)', 'moscow(3,50)', 'moscow(3,51)', 'moscow(3,52)', 'moscow(3,53)', 'moscow(3,54)', 'moscow(3,55)', 'moscow(3,56)', 'moscow(3,57)', 'moscow(3,58)', 'moscow(3,59)', 'moscow(3,60)', 'moscow(3,61)', 'moscow(3,62)', 'moscow(3,63)', 'moscow(3,64)', 'moscow(3,65)', 'moscow(3,66)', 'moscow(3,67)', 'moscow(3,68)', 'moscow(3,69)', 'moscow(3,70)', 'moscow(3,71)', 'moscow(3,72)', 'moscow(3,73)', 'moscow(3,74)', 'moscow(3,75)', 'moscow(3,76)', 'moscow(3,77)', 'moscow(3,78)', 'moscow(3,79)', 'moscow(3,80)', 'moscow(3,81)', 'moscow(3,82)', 'moscow(3,83)', 'moscow(3,84)', 'moscow(3,85)', 'moscow(3,86)', 'moscow(3,87)', 'moscow(3,88)', 'moscow(3,89)', 'moscow(3,90)', 'moscow(3,91)', 'moscow(3,92)', 'moscow(3,93)', 'moscow(3,94)', 'moscow(3,95)', 'moscow(3,96)', 'moscow(3,97)', 'moscow(3,98)', 'moscow(3,99)', 'moscow(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(1,5)', 'moscow(1,6)', 'moscow(1,7)', 'moscow(1,8)', 'moscow(1,9)', 'moscow(1,10)', 'moscow(1,11)', 'moscow(1,12)', 'moscow(1,13)', 'moscow(1,14)', 'moscow(1,15)', 'moscow(1,16)', 'moscow(1,17)', 'moscow(1,18)', 'moscow(1,19)', 'moscow(1,20)', 'moscow(1,21)', 'moscow(1,22)', 'moscow(1,23)', 'moscow(1,24)', 'moscow(1,25)', 'moscow(1,26)', 'moscow(1,27)', 'moscow(1,28)', 'moscow(1,29)', 'moscow(1,30)', 'moscow(1,31)', 'moscow(1,32)', 'moscow(1,33)', 'moscow(1,34)', 'moscow(1,35)', 'moscow(1,36)', 'moscow(1,37)', 'moscow(1,38)', 'moscow(1,39)', 'moscow(1,40)', 'moscow(1,41)', 'moscow(1,42)', 'moscow(1,43)', 'moscow(1,44)', 'moscow(1,45)', 'moscow(1,46)', 'moscow(1,47)', 'moscow(1,48)', 'moscow(1,49)', 'moscow(1,50)', 'moscow(1,51)', 'moscow(1,52)', 'moscow(1,53)', 'moscow(1,54)', 'moscow(1,55)', 'moscow(1,56)', 'moscow(1,57)', 'moscow(1,58)', 'moscow(1,59)', 'moscow(1,60)', 'moscow(1,61)', 'moscow(1,62)', 'moscow(1,63)', 'moscow(1,64)', 'moscow(1,65)', 'moscow(1,66)', 'moscow(1,67)', 'moscow(1,68)', 'moscow(1,69)', 'moscow(1,70)', 'moscow(1,71)', 'moscow(1,72)', 'moscow(1,73)', 'moscow(1,74)', 'moscow(1,75)', 'moscow(1,76)', 'moscow(1,77)', 'moscow(1,78)', 'moscow(1,79)', 'moscow(1,80)', 'moscow(1,81)', 'moscow(1,82)', 'moscow(1,83)', 'moscow(1,84)', 'moscow(1,85)', 'moscow(1,86)', 'moscow(1,87)', 'moscow(1,88)', 'moscow(1,89)', 'moscow(1,90)', 'moscow(1,91)', 'moscow(1,92)', 'moscow(1,93)', 'moscow(1,94)', 'moscow(1,95)', 'moscow(1,96)', 'moscow(1,97)', 'moscow(1,98)', 'moscow(1,99)', 'moscow(1,100)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(2,5)', 'moscow(2,6)', 'moscow(2,7)', 'moscow(2,8)', 'moscow(2,9)', 'moscow(2,10)', 'moscow(2,11)', 'moscow(2,12)', 'moscow(2,13)', 'moscow(2,14)', 'moscow(2,15)', 'moscow(2,16)', 'moscow(2,17)', 'moscow(2,18)', 'moscow(2,19)', 'moscow(2,20)', 'moscow(2,21)', 'moscow(2,22)', 'moscow(2,23)', 'moscow(2,24)', 'moscow(2,25)', 'moscow(2,26)', 'moscow(2,27)', 'moscow(2,28)', 'moscow(2,29)', 'moscow(2,30)', 'moscow(2,31)', 'moscow(2,32)', 'moscow(2,33)', 'moscow(2,34)', 'moscow(2,35)', 'moscow(2,36)', 'moscow(2,37)', 'moscow(2,38)', 'moscow(2,39)', 'moscow(2,40)', 'moscow(2,41)', 'moscow(2,42)', 'moscow(2,43)', 'moscow(2,44)', 'moscow(2,45)', 'moscow(2,46)', 'moscow(2,47)', 'moscow(2,48)', 'moscow(2,49)', 'moscow(2,50)', 'moscow(2,51)', 'moscow(2,52)', 'moscow(2,53)', 'moscow(2,54)', 'moscow(2,55)', 'moscow(2,56)', 'moscow(2,57)', 'moscow(2,58)', 'moscow(2,59)', 'moscow(2,60)', 'moscow(2,61)', 'moscow(2,62)', 'moscow(2,63)', 'moscow(2,64)', 'moscow(2,65)', 'moscow(2,66)', 'moscow(2,67)', 'moscow(2,68)', 'moscow(2,69)', 'moscow(2,70)', 'moscow(2,71)', 'moscow(2,72)', 'moscow(2,73)', 'moscow(2,74)', 'moscow(2,75)', 'moscow(2,76)', 'moscow(2,77)', 'moscow(2,78)', 'moscow(2,79)', 'moscow(2,80)', 'moscow(2,81)', 'moscow(2,82)', 'moscow(2,83)', 'moscow(2,84)', 'moscow(2,85)', 'moscow(2,86)', 'moscow(2,87)', 'moscow(2,88)', 'moscow(2,89)', 'moscow(2,90)', 'moscow(2,91)', 'moscow(2,92)', 'moscow(2,93)', 'moscow(2,94)', 'moscow(2,95)', 'moscow(2,96)', 'moscow(2,97)', 'moscow(2,98)', 'moscow(2,99)', 'moscow(2,100)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)', 'moscow(3,5)', 'moscow(3,6)', 'moscow(3,7)', 'moscow(3,8)', 'moscow(3,9)', 'moscow(3,10)', 'moscow(3,11)', 'moscow(3,12)', 'moscow(3,13)', 'moscow(3,14)', 'moscow(3,15)', 'moscow(3,16)', 'moscow(3,17)', 'moscow(3,18)', 'moscow(3,19)', 'moscow(3,20)', 'moscow(3,21)', 'moscow(3,22)', 'moscow(3,23)', 'moscow(3,24)', 'moscow(3,25)', 'moscow(3,26)', 'moscow(3,27)', 'moscow(3,28)', 'moscow(3,29)', 'moscow(3,30)', 'moscow(3,31)', 'moscow(3,32)', 'moscow(3,33)', 'moscow(3,34)', 'moscow(3,35)', 'moscow(3,36)', 'moscow(3,37)', 'moscow(3,38)', 'moscow(3,39)', 'moscow(3,40)', 'moscow(3,41)', 'moscow(3,42)', 'moscow(3,43)', 'moscow(3,44)', 'moscow(3,45)', 'moscow(3,46)', 'moscow(3,47)', 'moscow(3,48)', 'moscow(3,49)', 'moscow(3,50)', 'moscow(3,51)', 'moscow(3,52)', 'moscow(3,53)', 'moscow(3,54)', 'moscow(3,55)', 'moscow(3,56)', 'moscow(3,57)', 'moscow(3,58)', 'moscow(3,59)', 'moscow(3,60)', 'moscow(3,61)', 'moscow(3,62)', 'moscow(3,63)', 'moscow(3,64)', 'moscow(3,65)', 'moscow(3,66)', 'moscow(3,67)', 'moscow(3,68)', 'moscow(3,69)', 'moscow(3,70)', 'moscow(3,71)', 'moscow(3,72)', 'moscow(3,73)', 'moscow(3,74)', 'moscow(3,75)', 'moscow(3,76)', 'moscow(3,77)', 'moscow(3,78)', 'moscow(3,79)', 'moscow(3,80)', 'moscow(3,81)', 'moscow(3,82)', 'moscow(3,83)', 'moscow(3,84)', 'moscow(3,85)', 'moscow(3,86)', 'moscow(3,87)', 'moscow(3,88)', 'moscow(3,89)', 'moscow(3,90)', 'moscow(3,91)', 'moscow(3,92)', 'moscow(3,93)', 'moscow(3,94)', 'moscow(3,95)', 'moscow(3,96)', 'moscow(3,97)', 'moscow(3,98)', 'moscow(3,99)', 'moscow(3,100)', 'select(1)', 'select(2)', 'select(3)']]


675
assignment

question: 
Formulate an ASP program that links each element, as identified by the predicate "chair", with one label from "laptop","quality","strength".

answer from file: 
assign(X,"laptop")|assign(X,"quality")|assign(X,"strength"):-chair(X).

parsed from model: 
assign(X,"laptop")|assign(X,"quality")|assign(X,"strength"):-chair(X).

facts: 
chair(1..5).

generated: 
Formulate an ASP program that links each element, as identified by the predicate "chair", with one label from "laptop","quality","strength".
Answer: assign(X,"laptop")|assign(X,"quality")|assign(X,"strength"):-chair(X).
assign(X,"laptop")|assign(X,"quality"):- felicità(X).
assign(X,"strength"):-city(X).
 felicità(X):-city(X).
city(X):-name(X).
name(X):-city(X).
name(X):-description(X).
description(X):-city(X).
description(X):-name(X).
name(X):-description(X).
description(X):-author(X).
author(X):-description(X).


unique_rules: 
['assign(X,"laptop")|assign(X,"quality")|assign(X,"strength"):-chair(X).', 'assign(X,"laptop")|assign(X,"quality"):- felicità(X).', 'assign(X,"strength"):-city(X).', 'felicità(X):-city(X).', 'city(X):-name(X).', 'name(X):-city(X).', 'name(X):-description(X).', 'description(X):-city(X).', 'description(X):-name(X).', 'description(X):-author(X).', 'author(X):-description(X).']

jaccard: 1.0

AS desired: [['chair(1)', 'chair(2)', 'chair(3)', 'chair(4)', 'chair(5)', 'assign(1,"strength")', 'assign(2,"strength")', 'assign(3,"strength")', 'assign(4,"strength")', 'assign(5,"strength")']]
\AS obtained: [['chair(1)', 'chair(2)', 'chair(3)', 'chair(4)', 'chair(5)', 'assign(1,"strength")', 'assign(2,"strength")', 'assign(3,"strength")', 'assign(4,"strength")', 'assign(5,"strength")']]


676
constraint

question: 
Formulate an ASP script to ensure the "owner" predicate having value 9 is not associated with the label "cairo".

answer from file: 
:-assign(9,cairo).

parsed from model: 
:-assign(9,cairo).

facts: 
owner(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-owner(X).

generated: 
Formulate an ASP script to ensure the "owner" predicate having value 9 is not associated with the label "cairo".
Answer: :-assign(9,cairo).
assign(9,city).
The predicate "city" has fields "ID","author","city","name","description","author","age","city","description","name","height","description","city","name","age","description","author","height","city","description","name","height","description","city","name","age","description","author","height","city","description","name","height","description","city","name","age","description","author","height","city","description","name","height","description","city","name","age","description","author","height","city","description","name","height","description","city","name","age","description","author","height","

unique_rules: 
[':-assign(9,cairo).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'owner(5)', 'owner(6)', 'owner(7)', 'owner(8)', 'owner(9)', 'owner(10)', 'owner(11)', 'owner(12)', 'owner(13)', 'owner(14)', 'owner(15)', 'owner(16)', 'owner(17)', 'owner(18)', 'owner(19)', 'owner(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'owner(5)', 'owner(6)', 'owner(7)', 'owner(8)', 'owner(9)', 'owner(10)', 'owner(11)', 'owner(12)', 'owner(13)', 'owner(14)', 'owner(15)', 'owner(16)', 'owner(17)', 'owner(18)', 'owner(19)', 'owner(20)']]


677
combination

question: 
Write an ASP application that finds all pairings of elements from the sets defined by the predicates "moscow" and "flower".

answer from file: 
combination(X,Y):-moscow(X),flower(Y).

parsed from model: 
combination(X,Y):-moscow(X),flower(Y).

facts: 
moscow(1..4).flower(1..5).

generated: 
Write an ASP application that finds all pairings of elements from the sets defined by the predicates "moscow" and "flower".
Answer: combination(X,Y):-moscow(X),flower(Y).
combination(X,Y):-moscow(X),not flower(Y).
combination(X,Y):-not moscow(X),flower(Y).

unique_rules: 
['combination(X,Y):-moscow(X),flower(Y).', 'combination(X,Y):-moscow(X),not flower(Y).', 'combination(X,Y):-not moscow(X),flower(Y).']

jaccard: 1.0

AS desired: [['flower(1)', 'flower(2)', 'flower(3)', 'flower(4)', 'flower(5)', 'moscow(1)', 'moscow(2)', 'moscow(3)', 'moscow(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['flower(1)', 'flower(2)', 'flower(3)', 'flower(4)', 'flower(5)', 'moscow(1)', 'moscow(2)', 'moscow(3)', 'moscow(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


678
join

question: 
Compose an ASP script that addresses the problem by defining the predicate "cloud_cairo" which links each cloud to the surname of cairo", with "cloud" having fields "ID","strength","weight","cairoID" and "cairo" having fields "ID","surname","strength".

answer from file: 
cloud_cairo(X,Z):-cloud(X,_,_,Y),cairo(Y,Z,_).

parsed from model: 
cloud_cairo(X,Z):-cloud(X,_,_,Y),cairo(Y,Z,_).

facts: 
cloud("ID","strength","weight","cairoID").cairo("ID","surname","strength").

generated: 
Compose an ASP script that addresses the problem by defining the predicate "cloud_cairo" which links each cloud to the surname of cairo", with "cloud" having fields "ID","strength","weight","cairoID" and "cairo" having fields "ID","surname","strength". Define the predicate "cloud_cairo" which links each cloud to the surname of cairo".
Answer: cloud_cairo(X,Z):-cloud(X,_,_,Y),cairo(Y,Z,_).
cloud_cairo(X,Z):-cloud(X,_,_,Y),not cairo(Y,Z,_).
cloud(X,_,_,Y):-not cloud(X,_,_,Y).

unique_rules: 
['cloud_cairo(X,Z):-cloud(X,_,_,Y),cairo(Y,Z,_).', 'cloud_cairo(X,Z):-cloud(X,_,_,Y),not cairo(Y,Z,_).', 'cloud(X,_,_,Y):-not cloud(X,_,_,Y).']

jaccard: 1.0

AS desired: [['cloud("ID","strength","weight","cairoID")', 'cairo("ID","surname","strength")']]
\AS obtained: [['cloud("ID","strength","weight","cairoID")', 'cairo("ID","surname","strength")']]


679
closure

question: 
Formulate an ASP code snippet to establish the "family" predicate by computing the transitive closure of the "storm" predicate.

answer from file: 
family(X,Y):-storm(X,Y).
family(X,Y):-storm(X,Z),family(Z,Y).

parsed from model: 
family(X,Y):-storm(X,Y).
family(X,Y):-storm(X,Z),family(Z,Y).

facts: 
storm(1..3, 1..4).

generated: 
Formulate an ASP code snippet to establish the "family" predicate by computing the transitive closure of the "storm" predicate.
Answer: family(X,Y):-storm(X,Y).
family(X,Y):-storm(X,Z),family(Z,Y).
family(X,Y):-storm(X,Z),not family(Z,Y).
family(X,Y):-not storm(X,Y).
family(X,Y):-X=Y.
family(X,Y):-X!=Y.

unique_rules: 
['family(X,Y):-storm(X,Y).', 'family(X,Y):-storm(X,Z),family(Z,Y).', 'family(X,Y):-storm(X,Z),not family(Z,Y).', 'family(X,Y):-not storm(X,Y).', 'family(X,Y):-X=Y.', 'family(X,Y):-X!=Y.']

jaccard: 1.0

AS desired: [['storm(1,1)', 'storm(1,2)', 'storm(1,3)', 'storm(1,4)', 'storm(2,1)', 'storm(2,2)', 'storm(2,3)', 'storm(2,4)', 'storm(3,1)', 'storm(3,2)', 'storm(3,3)', 'storm(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]
\AS obtained: [['storm(1,1)', 'storm(1,2)', 'storm(1,3)', 'storm(1,4)', 'storm(2,1)', 'storm(2,2)', 'storm(2,3)', 'storm(2,4)', 'storm(3,1)', 'storm(3,2)', 'storm(3,3)', 'storm(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]


680
preference

question: 
Generate an ASP script to ensure the "flower" predicate with value "19" is not linked to "owner". Any occurrence incurs a cost of "1" at level "1".

answer from file: 
:~assign(19,"owner").[1@1]

parsed from model: 
:~assign(19,"owner").[1@1]

facts: 
flower(1..20).

generated: 
Generate an ASP script to ensure the "flower" predicate with value "19" is not linked to "owner". Any occurrence incurs a cost of "1" at level "1".
Answer: :~assign(19,"owner").[1@1]
The predicate "florence" includes fields "ID","city","author","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author

unique_rules: 
[':~assign(19,"owner").[1@1]']

jaccard: 1.0

AS desired: [['flower(1)', 'flower(2)', 'flower(3)', 'flower(4)', 'flower(5)', 'flower(6)', 'flower(7)', 'flower(8)', 'flower(9)', 'flower(10)', 'flower(11)', 'flower(12)', 'flower(13)', 'flower(14)', 'flower(15)', 'flower(16)', 'flower(17)', 'flower(18)', 'flower(19)', 'flower(20)']]
\AS obtained: [['flower(1)', 'flower(2)', 'flower(3)', 'flower(4)', 'flower(5)', 'flower(6)', 'flower(7)', 'flower(8)', 'flower(9)', 'flower(10)', 'flower(11)', 'flower(12)', 'flower(13)', 'flower(14)', 'flower(15)', 'flower(16)', 'flower(17)', 'flower(18)', 'flower(19)', 'flower(20)']]


681
filtering

question: 
Craft an ASP code snippet to capture all relevant values for the "surname" label within the "white" predicate.

answer from file: 
select(X):-white(X,"surname").

parsed from model: 
select(X):-white(X,"description").

facts: 
white(1..5, "surname").

generated: 
Craft an ASP code snippet to capture all relevant values for the "surname" label within the "white" predicate.
Answer: select(X):-white(X,"description").
select(X):-white(X,"author").
select(X):-white(X,"city").
select(X):-white(X,"description","author").
select(X):-white(X,"description","city").
select(X):-white(X,"description","author","city").
```

unique_rules: 
['select(X):-white(X,"description").', 'select(X):-white(X,"author").', 'select(X):-white(X,"city").', 'select(X):-white(X,"description","author").', 'select(X):-white(X,"description","city").', 'select(X):-white(X,"description","author","city").']

jaccard: 0.0

AS desired: [['white(1,"surname")', 'white(2,"surname")', 'white(3,"surname")', 'white(4,"surname")', 'white(5,"surname")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['white(1,"surname")', 'white(2,"surname")', 'white(3,"surname")', 'white(4,"surname")', 'white(5,"surname")']]


682
negative_filtering

question: 
Write an ASP script to select values connected to the predicate "cloud" but not associated with the predicate "darkmagenta" and labeled "singapore".

answer from file: 
select(X):-cloud(X),not darkmagenta(X,"singapore").

parsed from model: 
select(X):-cloud(X),not darkmagenta(X,"singapore").

facts: 
cloud(1..3).darkmagenta(1,"barcelona").darkmagenta(2,"storm").darkmagenta(3,"singapore").

generated: 
Write an ASP script to select values connected to the predicate "cloud" but not associated with the predicate "darkmagenta" and labeled "singapore".
Answer: select(X):-cloud(X),not darkmagenta(X,"singapore").

unique_rules: 
['select(X):-cloud(X),not darkmagenta(X,"singapore").']

jaccard: 1.0

AS desired: [['cloud(1)', 'cloud(2)', 'cloud(3)', 'darkmagenta(1,"barcelona")', 'darkmagenta(2,"storm")', 'darkmagenta(3,"singapore")', 'select(1)', 'select(2)']]
\AS obtained: [['cloud(1)', 'cloud(2)', 'cloud(3)', 'darkmagenta(1,"barcelona")', 'darkmagenta(2,"storm")', 'darkmagenta(3,"singapore")', 'select(1)', 'select(2)']]


683
numeric_filtering

question: 
Craft an ASP program to fetch values linked to the predicate "moscow" with a value different than 50.

answer from file: 
select(X):-moscow(X,C),C!=50.

parsed from model: 
select(X):-moscow(X,C),C!=50.

facts: 
moscow(1..3, 1..100).

generated: 
Craft an ASP program to fetch values linked to the predicate "moscow" with a value different than 50.
Answer: select(X):-moscow(X,C),C!=50.
select(X):-moscow(X,C),C==50.

unique_rules: 
['select(X):-moscow(X,C),C!=50.', 'select(X):-moscow(X,C),C==50.']

jaccard: 1.0

AS desired: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(1,5)', 'moscow(1,6)', 'moscow(1,7)', 'moscow(1,8)', 'moscow(1,9)', 'moscow(1,10)', 'moscow(1,11)', 'moscow(1,12)', 'moscow(1,13)', 'moscow(1,14)', 'moscow(1,15)', 'moscow(1,16)', 'moscow(1,17)', 'moscow(1,18)', 'moscow(1,19)', 'moscow(1,20)', 'moscow(1,21)', 'moscow(1,22)', 'moscow(1,23)', 'moscow(1,24)', 'moscow(1,25)', 'moscow(1,26)', 'moscow(1,27)', 'moscow(1,28)', 'moscow(1,29)', 'moscow(1,30)', 'moscow(1,31)', 'moscow(1,32)', 'moscow(1,33)', 'moscow(1,34)', 'moscow(1,35)', 'moscow(1,36)', 'moscow(1,37)', 'moscow(1,38)', 'moscow(1,39)', 'moscow(1,40)', 'moscow(1,41)', 'moscow(1,42)', 'moscow(1,43)', 'moscow(1,44)', 'moscow(1,45)', 'moscow(1,46)', 'moscow(1,47)', 'moscow(1,48)', 'moscow(1,49)', 'moscow(1,50)', 'moscow(1,51)', 'moscow(1,52)', 'moscow(1,53)', 'moscow(1,54)', 'moscow(1,55)', 'moscow(1,56)', 'moscow(1,57)', 'moscow(1,58)', 'moscow(1,59)', 'moscow(1,60)', 'moscow(1,61)', 'moscow(1,62)', 'moscow(1,63)', 'moscow(1,64)', 'moscow(1,65)', 'moscow(1,66)', 'moscow(1,67)', 'moscow(1,68)', 'moscow(1,69)', 'moscow(1,70)', 'moscow(1,71)', 'moscow(1,72)', 'moscow(1,73)', 'moscow(1,74)', 'moscow(1,75)', 'moscow(1,76)', 'moscow(1,77)', 'moscow(1,78)', 'moscow(1,79)', 'moscow(1,80)', 'moscow(1,81)', 'moscow(1,82)', 'moscow(1,83)', 'moscow(1,84)', 'moscow(1,85)', 'moscow(1,86)', 'moscow(1,87)', 'moscow(1,88)', 'moscow(1,89)', 'moscow(1,90)', 'moscow(1,91)', 'moscow(1,92)', 'moscow(1,93)', 'moscow(1,94)', 'moscow(1,95)', 'moscow(1,96)', 'moscow(1,97)', 'moscow(1,98)', 'moscow(1,99)', 'moscow(1,100)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(2,5)', 'moscow(2,6)', 'moscow(2,7)', 'moscow(2,8)', 'moscow(2,9)', 'moscow(2,10)', 'moscow(2,11)', 'moscow(2,12)', 'moscow(2,13)', 'moscow(2,14)', 'moscow(2,15)', 'moscow(2,16)', 'moscow(2,17)', 'moscow(2,18)', 'moscow(2,19)', 'moscow(2,20)', 'moscow(2,21)', 'moscow(2,22)', 'moscow(2,23)', 'moscow(2,24)', 'moscow(2,25)', 'moscow(2,26)', 'moscow(2,27)', 'moscow(2,28)', 'moscow(2,29)', 'moscow(2,30)', 'moscow(2,31)', 'moscow(2,32)', 'moscow(2,33)', 'moscow(2,34)', 'moscow(2,35)', 'moscow(2,36)', 'moscow(2,37)', 'moscow(2,38)', 'moscow(2,39)', 'moscow(2,40)', 'moscow(2,41)', 'moscow(2,42)', 'moscow(2,43)', 'moscow(2,44)', 'moscow(2,45)', 'moscow(2,46)', 'moscow(2,47)', 'moscow(2,48)', 'moscow(2,49)', 'moscow(2,50)', 'moscow(2,51)', 'moscow(2,52)', 'moscow(2,53)', 'moscow(2,54)', 'moscow(2,55)', 'moscow(2,56)', 'moscow(2,57)', 'moscow(2,58)', 'moscow(2,59)', 'moscow(2,60)', 'moscow(2,61)', 'moscow(2,62)', 'moscow(2,63)', 'moscow(2,64)', 'moscow(2,65)', 'moscow(2,66)', 'moscow(2,67)', 'moscow(2,68)', 'moscow(2,69)', 'moscow(2,70)', 'moscow(2,71)', 'moscow(2,72)', 'moscow(2,73)', 'moscow(2,74)', 'moscow(2,75)', 'moscow(2,76)', 'moscow(2,77)', 'moscow(2,78)', 'moscow(2,79)', 'moscow(2,80)', 'moscow(2,81)', 'moscow(2,82)', 'moscow(2,83)', 'moscow(2,84)', 'moscow(2,85)', 'moscow(2,86)', 'moscow(2,87)', 'moscow(2,88)', 'moscow(2,89)', 'moscow(2,90)', 'moscow(2,91)', 'moscow(2,92)', 'moscow(2,93)', 'moscow(2,94)', 'moscow(2,95)', 'moscow(2,96)', 'moscow(2,97)', 'moscow(2,98)', 'moscow(2,99)', 'moscow(2,100)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)', 'moscow(3,5)', 'moscow(3,6)', 'moscow(3,7)', 'moscow(3,8)', 'moscow(3,9)', 'moscow(3,10)', 'moscow(3,11)', 'moscow(3,12)', 'moscow(3,13)', 'moscow(3,14)', 'moscow(3,15)', 'moscow(3,16)', 'moscow(3,17)', 'moscow(3,18)', 'moscow(3,19)', 'moscow(3,20)', 'moscow(3,21)', 'moscow(3,22)', 'moscow(3,23)', 'moscow(3,24)', 'moscow(3,25)', 'moscow(3,26)', 'moscow(3,27)', 'moscow(3,28)', 'moscow(3,29)', 'moscow(3,30)', 'moscow(3,31)', 'moscow(3,32)', 'moscow(3,33)', 'moscow(3,34)', 'moscow(3,35)', 'moscow(3,36)', 'moscow(3,37)', 'moscow(3,38)', 'moscow(3,39)', 'moscow(3,40)', 'moscow(3,41)', 'moscow(3,42)', 'moscow(3,43)', 'moscow(3,44)', 'moscow(3,45)', 'moscow(3,46)', 'moscow(3,47)', 'moscow(3,48)', 'moscow(3,49)', 'moscow(3,50)', 'moscow(3,51)', 'moscow(3,52)', 'moscow(3,53)', 'moscow(3,54)', 'moscow(3,55)', 'moscow(3,56)', 'moscow(3,57)', 'moscow(3,58)', 'moscow(3,59)', 'moscow(3,60)', 'moscow(3,61)', 'moscow(3,62)', 'moscow(3,63)', 'moscow(3,64)', 'moscow(3,65)', 'moscow(3,66)', 'moscow(3,67)', 'moscow(3,68)', 'moscow(3,69)', 'moscow(3,70)', 'moscow(3,71)', 'moscow(3,72)', 'moscow(3,73)', 'moscow(3,74)', 'moscow(3,75)', 'moscow(3,76)', 'moscow(3,77)', 'moscow(3,78)', 'moscow(3,79)', 'moscow(3,80)', 'moscow(3,81)', 'moscow(3,82)', 'moscow(3,83)', 'moscow(3,84)', 'moscow(3,85)', 'moscow(3,86)', 'moscow(3,87)', 'moscow(3,88)', 'moscow(3,89)', 'moscow(3,90)', 'moscow(3,91)', 'moscow(3,92)', 'moscow(3,93)', 'moscow(3,94)', 'moscow(3,95)', 'moscow(3,96)', 'moscow(3,97)', 'moscow(3,98)', 'moscow(3,99)', 'moscow(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(1,5)', 'moscow(1,6)', 'moscow(1,7)', 'moscow(1,8)', 'moscow(1,9)', 'moscow(1,10)', 'moscow(1,11)', 'moscow(1,12)', 'moscow(1,13)', 'moscow(1,14)', 'moscow(1,15)', 'moscow(1,16)', 'moscow(1,17)', 'moscow(1,18)', 'moscow(1,19)', 'moscow(1,20)', 'moscow(1,21)', 'moscow(1,22)', 'moscow(1,23)', 'moscow(1,24)', 'moscow(1,25)', 'moscow(1,26)', 'moscow(1,27)', 'moscow(1,28)', 'moscow(1,29)', 'moscow(1,30)', 'moscow(1,31)', 'moscow(1,32)', 'moscow(1,33)', 'moscow(1,34)', 'moscow(1,35)', 'moscow(1,36)', 'moscow(1,37)', 'moscow(1,38)', 'moscow(1,39)', 'moscow(1,40)', 'moscow(1,41)', 'moscow(1,42)', 'moscow(1,43)', 'moscow(1,44)', 'moscow(1,45)', 'moscow(1,46)', 'moscow(1,47)', 'moscow(1,48)', 'moscow(1,49)', 'moscow(1,50)', 'moscow(1,51)', 'moscow(1,52)', 'moscow(1,53)', 'moscow(1,54)', 'moscow(1,55)', 'moscow(1,56)', 'moscow(1,57)', 'moscow(1,58)', 'moscow(1,59)', 'moscow(1,60)', 'moscow(1,61)', 'moscow(1,62)', 'moscow(1,63)', 'moscow(1,64)', 'moscow(1,65)', 'moscow(1,66)', 'moscow(1,67)', 'moscow(1,68)', 'moscow(1,69)', 'moscow(1,70)', 'moscow(1,71)', 'moscow(1,72)', 'moscow(1,73)', 'moscow(1,74)', 'moscow(1,75)', 'moscow(1,76)', 'moscow(1,77)', 'moscow(1,78)', 'moscow(1,79)', 'moscow(1,80)', 'moscow(1,81)', 'moscow(1,82)', 'moscow(1,83)', 'moscow(1,84)', 'moscow(1,85)', 'moscow(1,86)', 'moscow(1,87)', 'moscow(1,88)', 'moscow(1,89)', 'moscow(1,90)', 'moscow(1,91)', 'moscow(1,92)', 'moscow(1,93)', 'moscow(1,94)', 'moscow(1,95)', 'moscow(1,96)', 'moscow(1,97)', 'moscow(1,98)', 'moscow(1,99)', 'moscow(1,100)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(2,5)', 'moscow(2,6)', 'moscow(2,7)', 'moscow(2,8)', 'moscow(2,9)', 'moscow(2,10)', 'moscow(2,11)', 'moscow(2,12)', 'moscow(2,13)', 'moscow(2,14)', 'moscow(2,15)', 'moscow(2,16)', 'moscow(2,17)', 'moscow(2,18)', 'moscow(2,19)', 'moscow(2,20)', 'moscow(2,21)', 'moscow(2,22)', 'moscow(2,23)', 'moscow(2,24)', 'moscow(2,25)', 'moscow(2,26)', 'moscow(2,27)', 'moscow(2,28)', 'moscow(2,29)', 'moscow(2,30)', 'moscow(2,31)', 'moscow(2,32)', 'moscow(2,33)', 'moscow(2,34)', 'moscow(2,35)', 'moscow(2,36)', 'moscow(2,37)', 'moscow(2,38)', 'moscow(2,39)', 'moscow(2,40)', 'moscow(2,41)', 'moscow(2,42)', 'moscow(2,43)', 'moscow(2,44)', 'moscow(2,45)', 'moscow(2,46)', 'moscow(2,47)', 'moscow(2,48)', 'moscow(2,49)', 'moscow(2,50)', 'moscow(2,51)', 'moscow(2,52)', 'moscow(2,53)', 'moscow(2,54)', 'moscow(2,55)', 'moscow(2,56)', 'moscow(2,57)', 'moscow(2,58)', 'moscow(2,59)', 'moscow(2,60)', 'moscow(2,61)', 'moscow(2,62)', 'moscow(2,63)', 'moscow(2,64)', 'moscow(2,65)', 'moscow(2,66)', 'moscow(2,67)', 'moscow(2,68)', 'moscow(2,69)', 'moscow(2,70)', 'moscow(2,71)', 'moscow(2,72)', 'moscow(2,73)', 'moscow(2,74)', 'moscow(2,75)', 'moscow(2,76)', 'moscow(2,77)', 'moscow(2,78)', 'moscow(2,79)', 'moscow(2,80)', 'moscow(2,81)', 'moscow(2,82)', 'moscow(2,83)', 'moscow(2,84)', 'moscow(2,85)', 'moscow(2,86)', 'moscow(2,87)', 'moscow(2,88)', 'moscow(2,89)', 'moscow(2,90)', 'moscow(2,91)', 'moscow(2,92)', 'moscow(2,93)', 'moscow(2,94)', 'moscow(2,95)', 'moscow(2,96)', 'moscow(2,97)', 'moscow(2,98)', 'moscow(2,99)', 'moscow(2,100)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)', 'moscow(3,5)', 'moscow(3,6)', 'moscow(3,7)', 'moscow(3,8)', 'moscow(3,9)', 'moscow(3,10)', 'moscow(3,11)', 'moscow(3,12)', 'moscow(3,13)', 'moscow(3,14)', 'moscow(3,15)', 'moscow(3,16)', 'moscow(3,17)', 'moscow(3,18)', 'moscow(3,19)', 'moscow(3,20)', 'moscow(3,21)', 'moscow(3,22)', 'moscow(3,23)', 'moscow(3,24)', 'moscow(3,25)', 'moscow(3,26)', 'moscow(3,27)', 'moscow(3,28)', 'moscow(3,29)', 'moscow(3,30)', 'moscow(3,31)', 'moscow(3,32)', 'moscow(3,33)', 'moscow(3,34)', 'moscow(3,35)', 'moscow(3,36)', 'moscow(3,37)', 'moscow(3,38)', 'moscow(3,39)', 'moscow(3,40)', 'moscow(3,41)', 'moscow(3,42)', 'moscow(3,43)', 'moscow(3,44)', 'moscow(3,45)', 'moscow(3,46)', 'moscow(3,47)', 'moscow(3,48)', 'moscow(3,49)', 'moscow(3,50)', 'moscow(3,51)', 'moscow(3,52)', 'moscow(3,53)', 'moscow(3,54)', 'moscow(3,55)', 'moscow(3,56)', 'moscow(3,57)', 'moscow(3,58)', 'moscow(3,59)', 'moscow(3,60)', 'moscow(3,61)', 'moscow(3,62)', 'moscow(3,63)', 'moscow(3,64)', 'moscow(3,65)', 'moscow(3,66)', 'moscow(3,67)', 'moscow(3,68)', 'moscow(3,69)', 'moscow(3,70)', 'moscow(3,71)', 'moscow(3,72)', 'moscow(3,73)', 'moscow(3,74)', 'moscow(3,75)', 'moscow(3,76)', 'moscow(3,77)', 'moscow(3,78)', 'moscow(3,79)', 'moscow(3,80)', 'moscow(3,81)', 'moscow(3,82)', 'moscow(3,83)', 'moscow(3,84)', 'moscow(3,85)', 'moscow(3,86)', 'moscow(3,87)', 'moscow(3,88)', 'moscow(3,89)', 'moscow(3,90)', 'moscow(3,91)', 'moscow(3,92)', 'moscow(3,93)', 'moscow(3,94)', 'moscow(3,95)', 'moscow(3,96)', 'moscow(3,97)', 'moscow(3,98)', 'moscow(3,99)', 'moscow(3,100)', 'select(1)', 'select(2)', 'select(3)']]


684
assignment

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate singapore. The labels are "chair","storm","lake","black","white".

answer from file: 
assign(X,"chair")|assign(X,"storm")|assign(X,"lake")|assign(X,"black")|assign(X,"white"):-singapore(X).

parsed from model: 
assign(X,"chair")|assign(X,"storm")|assign(X,"lake")|assign(X,"black")|assign(X,"white"):- arrivant(X).

facts: 
singapore(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate singapore. The labels are "chair","storm","lake","black","white".
Answer: assign(X,"chair")|assign(X,"storm")|assign(X,"lake")|assign(X,"black")|assign(X,"white"):- arrivant(X).
assign(X,"chair"):-dubai(X).
assign(X,"storm"):-dubai(X).
assign(X,"lake"):-dubai(X).
assign(X,"black"):-dubai(X).
assign(X,"white"):-dubai(X).
where DUBBI(X) means that the predicate "dubai" with value "X" has the label "table".
The predicate " arrivant" has fields "ID","height","city","author","name","description","city","

unique_rules: 
['assign(X,"chair")|assign(X,"storm")|assign(X,"lake")|assign(X,"black")|assign(X,"white"):- arrivant(X).', 'assign(X,"chair"):-dubai(X).', 'assign(X,"storm"):-dubai(X).', 'assign(X,"lake"):-dubai(X).', 'assign(X,"black"):-dubai(X).', 'assign(X,"white"):-dubai(X).']

jaccard: 0.0

AS desired: [['singapore(1)', 'singapore(2)', 'singapore(3)', 'singapore(4)', 'singapore(5)', 'assign(1,"white")', 'assign(2,"white")', 'assign(3,"white")', 'assign(4,"white")', 'assign(5,"white")']]
\AS obtained: [['singapore(1)', 'singapore(2)', 'singapore(3)', 'singapore(4)', 'singapore(5)']]


685
constraint

question: 
Create an ASP code snippet to ensure the "cairo" predicate with a value of 10 is not linked to the label "laptop".

answer from file: 
:-assign(10,laptop).

parsed from model: 
:-assign(10,laptop).

facts: 
cairo(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-cairo(X).

generated: 
Create an ASP code snippet to ensure the "cairo" predicate with a value of 10 is not linked to the label "laptop".
Answer: :-assign(10,laptop).
Explanation: The predicate "city" includes a "city" label for the "shangai" value, and the predicate "shangai" contains the "city" label for the "height" value. If the "city" label is assigned to the "height" value, it violates the "city" label constraint.

unique_rules: 
[':-assign(10,laptop).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'cairo(1)', 'cairo(2)', 'cairo(3)', 'cairo(4)', 'cairo(5)', 'cairo(6)', 'cairo(7)', 'cairo(8)', 'cairo(9)', 'cairo(10)', 'cairo(11)', 'cairo(12)', 'cairo(13)', 'cairo(14)', 'cairo(15)', 'cairo(16)', 'cairo(17)', 'cairo(18)', 'cairo(19)', 'cairo(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'cairo(1)', 'cairo(2)', 'cairo(3)', 'cairo(4)', 'cairo(5)', 'cairo(6)', 'cairo(7)', 'cairo(8)', 'cairo(9)', 'cairo(10)', 'cairo(11)', 'cairo(12)', 'cairo(13)', 'cairo(14)', 'cairo(15)', 'cairo(16)', 'cairo(17)', 'cairo(18)', 'cairo(19)', 'cairo(20)']]


686
combination

question: 
Develop an ASP code snippet to produce all valid combinations of elements from the "lightblue" and "lake" sets.

answer from file: 
combination(X,Y):-lightblue(X),lake(Y).

parsed from model: 
combination(X,Y):-lightblue(X),lake(Y).

facts: 
lightblue(1..4).lake(1..5).

generated: 
Develop an ASP code snippet to produce all valid combinations of elements from the "lightblue" and "lake" sets.
Answer: combination(X,Y):-lightblue(X),lake(Y).
combination(X,Y):-lightblue(X),not lake(Y).
combination(X,Y):-not lightblue(X),lake(Y).
combination(X,Y):-not lightblue(X),not lake(Y).

unique_rules: 
['combination(X,Y):-lightblue(X),lake(Y).', 'combination(X,Y):-lightblue(X),not lake(Y).', 'combination(X,Y):-not lightblue(X),lake(Y).', 'combination(X,Y):-not lightblue(X),not lake(Y).']

jaccard: 1.0

AS desired: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'lightblue(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'lightblue(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


687
join

question: 
Develop an ASP solution that defines the predicate "lake_storm" to link each lake to the surname of storm, with "lake" having fields "ID","stormID","owner","weight","lake" and "storm" having fields "ID","surname","owner".

answer from file: 
lake_storm(X,Z):-lake(X,Y,_,_,_),storm(Y,Z,_).

parsed from model: 
lake_storm(X,Z):-lake(X,Y,_,_,_),storm(Y,Z,_).

facts: 
lake("ID","stormID","owner","weight","lake").storm("ID","surname","owner").

generated: 
Develop an ASP solution that defines the predicate "lake_storm" to link each lake to the surname of storm, with "lake" having fields "ID","stormID","owner","weight","lake" and "storm" having fields "ID","surname","owner". Define the predicate "lake_storm" that links each lake to the surname of storm.
Answer: lake_storm(X,Z):-lake(X,Y,_,_,_),storm(Y,Z,_).
lake_storm(X,Z):-lake(X,Y,_,_,Z),storm(Y,_,Z).

unique_rules: 
['lake_storm(X,Z):-lake(X,Y,_,_,_),storm(Y,Z,_).', 'lake_storm(X,Z):-lake(X,Y,_,_,Z),storm(Y,_,Z).']

jaccard: 1.0

AS desired: [['lake("ID","stormID","owner","weight","lake")', 'storm("ID","surname","owner")']]
\AS obtained: [['lake("ID","stormID","owner","weight","lake")', 'storm("ID","surname","owner")']]


688
closure

question: 
Create an ASP solution that establishes the transitive closure of the "moscow" predicate, defined as "loops".

answer from file: 
loops(X,Y):-moscow(X,Y).
loops(X,Y):-moscow(X,Z),loops(Z,Y).

parsed from model: 


facts: 
moscow(1..3, 1..4).

generated: 
Create an ASP solution that establishes the transitive closure of the "moscow" predicate, defined as "loops".
Answer: closure(loops)
closure(loops) = {X|X∈loops}.
closure(loops) = loops.
closure(loops) = closure(loops(X))|X∈loops.
closure(loops) = closure(loops(X))|X∈loops.

unique_rules: 
[]

jaccard: 0.0

AS desired: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]
\AS obtained: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)']]


689
preference

question: 
Craft an ASP solution to prevent the linking of the "quality" predicate with value "5" to "quality". Any link incurs a cost of "1" at level "1".

answer from file: 
:~assign(5,"quality").[1@1]

parsed from model: 
:~assign(5,"quality").[1@1]

facts: 
quality(1..20).

generated: 
Craft an ASP solution to prevent the linking of the "quality" predicate with value "5" to "quality". Any link incurs a cost of "1" at level "1".
Answer: :~assign(5,"quality").[1@1]
Explanation: The predicate "quality" includes a link with a cost of "1" at level "1". The predicate "city" prevents the linking of the "quality" predicate with value "5" to "quality".

unique_rules: 
[':~assign(5,"quality").[1@1]']

jaccard: 1.0

AS desired: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'quality(6)', 'quality(7)', 'quality(8)', 'quality(9)', 'quality(10)', 'quality(11)', 'quality(12)', 'quality(13)', 'quality(14)', 'quality(15)', 'quality(16)', 'quality(17)', 'quality(18)', 'quality(19)', 'quality(20)']]
\AS obtained: [['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'quality(6)', 'quality(7)', 'quality(8)', 'quality(9)', 'quality(10)', 'quality(11)', 'quality(12)', 'quality(13)', 'quality(14)', 'quality(15)', 'quality(16)', 'quality(17)', 'quality(18)', 'quality(19)', 'quality(20)']]


690
filtering

question: 
Write an ASP script to collect values associated with the "surname" label from the "strength" predicate.

answer from file: 
select(X):-strength(X,"surname").

parsed from model: 
select(X):-strength(X,"description").

facts: 
strength(1..5, "surname").

generated: 
Write an ASP script to collect values associated with the "surname" label from the "strength" predicate.
Answer: select(X):-strength(X,"description").
select(X):-strength(X,"author").
select(X):-strength(X,"description","author").
strength(X,"description").
strength(X,"author").
strength(X,"description","author").

unique_rules: 
['select(X):-strength(X,"description").', 'select(X):-strength(X,"author").', 'select(X):-strength(X,"description","author").']

jaccard: 0.0

AS desired: [['strength(1,"surname")', 'strength(2,"surname")', 'strength(3,"surname")', 'strength(4,"surname")', 'strength(5,"surname")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['strength(1,"surname")', 'strength(2,"surname")', 'strength(3,"surname")', 'strength(4,"surname")', 'strength(5,"surname")']]


691
negative_filtering

question: 
Develop an ASP script to collect values tied to the predicate "flower" but not linked to the predicate "owner" and labeled "butterfly".

answer from file: 
select(X):-flower(X),not owner(X,"butterfly").

parsed from model: 
select(X):-flower(X),not owner(X,"butterfly").

facts: 
flower(1..3).owner(1,"surname").owner(2,"quality").owner(3,"black").

generated: 
Develop an ASP script to collect values tied to the predicate "flower" but not linked to the predicate "owner" and labeled "butterfly".
Answer: select(X):-flower(X),not owner(X,"butterfly").

unique_rules: 
['select(X):-flower(X),not owner(X,"butterfly").']

jaccard: 1.0

AS desired: [['flower(1)', 'flower(2)', 'flower(3)', 'owner(1,"surname")', 'owner(2,"quality")', 'owner(3,"black")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['flower(1)', 'flower(2)', 'flower(3)', 'owner(1,"surname")', 'owner(2,"quality")', 'owner(3,"black")', 'select(1)', 'select(2)', 'select(3)']]


692
numeric_filtering

question: 
Produce an ASP script to retrieve values associated with the predicate "flower" with a value different than 47.

answer from file: 
select(X):-flower(X,C),C!=47.

parsed from model: 
select(X):-flower(X,C),C!=47.

facts: 
flower(1..3, 1..100).

generated: 
Produce an ASP script to retrieve values associated with the predicate "flower" with a value different than 47.
Answer: select(X):-flower(X,C),C!=47.
select(X):-flower(X,C),C==47.

unique_rules: 
['select(X):-flower(X,C),C!=47.', 'select(X):-flower(X,C),C==47.']

jaccard: 1.0

AS desired: [['flower(1,1)', 'flower(1,2)', 'flower(1,3)', 'flower(1,4)', 'flower(1,5)', 'flower(1,6)', 'flower(1,7)', 'flower(1,8)', 'flower(1,9)', 'flower(1,10)', 'flower(1,11)', 'flower(1,12)', 'flower(1,13)', 'flower(1,14)', 'flower(1,15)', 'flower(1,16)', 'flower(1,17)', 'flower(1,18)', 'flower(1,19)', 'flower(1,20)', 'flower(1,21)', 'flower(1,22)', 'flower(1,23)', 'flower(1,24)', 'flower(1,25)', 'flower(1,26)', 'flower(1,27)', 'flower(1,28)', 'flower(1,29)', 'flower(1,30)', 'flower(1,31)', 'flower(1,32)', 'flower(1,33)', 'flower(1,34)', 'flower(1,35)', 'flower(1,36)', 'flower(1,37)', 'flower(1,38)', 'flower(1,39)', 'flower(1,40)', 'flower(1,41)', 'flower(1,42)', 'flower(1,43)', 'flower(1,44)', 'flower(1,45)', 'flower(1,46)', 'flower(1,47)', 'flower(1,48)', 'flower(1,49)', 'flower(1,50)', 'flower(1,51)', 'flower(1,52)', 'flower(1,53)', 'flower(1,54)', 'flower(1,55)', 'flower(1,56)', 'flower(1,57)', 'flower(1,58)', 'flower(1,59)', 'flower(1,60)', 'flower(1,61)', 'flower(1,62)', 'flower(1,63)', 'flower(1,64)', 'flower(1,65)', 'flower(1,66)', 'flower(1,67)', 'flower(1,68)', 'flower(1,69)', 'flower(1,70)', 'flower(1,71)', 'flower(1,72)', 'flower(1,73)', 'flower(1,74)', 'flower(1,75)', 'flower(1,76)', 'flower(1,77)', 'flower(1,78)', 'flower(1,79)', 'flower(1,80)', 'flower(1,81)', 'flower(1,82)', 'flower(1,83)', 'flower(1,84)', 'flower(1,85)', 'flower(1,86)', 'flower(1,87)', 'flower(1,88)', 'flower(1,89)', 'flower(1,90)', 'flower(1,91)', 'flower(1,92)', 'flower(1,93)', 'flower(1,94)', 'flower(1,95)', 'flower(1,96)', 'flower(1,97)', 'flower(1,98)', 'flower(1,99)', 'flower(1,100)', 'flower(2,1)', 'flower(2,2)', 'flower(2,3)', 'flower(2,4)', 'flower(2,5)', 'flower(2,6)', 'flower(2,7)', 'flower(2,8)', 'flower(2,9)', 'flower(2,10)', 'flower(2,11)', 'flower(2,12)', 'flower(2,13)', 'flower(2,14)', 'flower(2,15)', 'flower(2,16)', 'flower(2,17)', 'flower(2,18)', 'flower(2,19)', 'flower(2,20)', 'flower(2,21)', 'flower(2,22)', 'flower(2,23)', 'flower(2,24)', 'flower(2,25)', 'flower(2,26)', 'flower(2,27)', 'flower(2,28)', 'flower(2,29)', 'flower(2,30)', 'flower(2,31)', 'flower(2,32)', 'flower(2,33)', 'flower(2,34)', 'flower(2,35)', 'flower(2,36)', 'flower(2,37)', 'flower(2,38)', 'flower(2,39)', 'flower(2,40)', 'flower(2,41)', 'flower(2,42)', 'flower(2,43)', 'flower(2,44)', 'flower(2,45)', 'flower(2,46)', 'flower(2,47)', 'flower(2,48)', 'flower(2,49)', 'flower(2,50)', 'flower(2,51)', 'flower(2,52)', 'flower(2,53)', 'flower(2,54)', 'flower(2,55)', 'flower(2,56)', 'flower(2,57)', 'flower(2,58)', 'flower(2,59)', 'flower(2,60)', 'flower(2,61)', 'flower(2,62)', 'flower(2,63)', 'flower(2,64)', 'flower(2,65)', 'flower(2,66)', 'flower(2,67)', 'flower(2,68)', 'flower(2,69)', 'flower(2,70)', 'flower(2,71)', 'flower(2,72)', 'flower(2,73)', 'flower(2,74)', 'flower(2,75)', 'flower(2,76)', 'flower(2,77)', 'flower(2,78)', 'flower(2,79)', 'flower(2,80)', 'flower(2,81)', 'flower(2,82)', 'flower(2,83)', 'flower(2,84)', 'flower(2,85)', 'flower(2,86)', 'flower(2,87)', 'flower(2,88)', 'flower(2,89)', 'flower(2,90)', 'flower(2,91)', 'flower(2,92)', 'flower(2,93)', 'flower(2,94)', 'flower(2,95)', 'flower(2,96)', 'flower(2,97)', 'flower(2,98)', 'flower(2,99)', 'flower(2,100)', 'flower(3,1)', 'flower(3,2)', 'flower(3,3)', 'flower(3,4)', 'flower(3,5)', 'flower(3,6)', 'flower(3,7)', 'flower(3,8)', 'flower(3,9)', 'flower(3,10)', 'flower(3,11)', 'flower(3,12)', 'flower(3,13)', 'flower(3,14)', 'flower(3,15)', 'flower(3,16)', 'flower(3,17)', 'flower(3,18)', 'flower(3,19)', 'flower(3,20)', 'flower(3,21)', 'flower(3,22)', 'flower(3,23)', 'flower(3,24)', 'flower(3,25)', 'flower(3,26)', 'flower(3,27)', 'flower(3,28)', 'flower(3,29)', 'flower(3,30)', 'flower(3,31)', 'flower(3,32)', 'flower(3,33)', 'flower(3,34)', 'flower(3,35)', 'flower(3,36)', 'flower(3,37)', 'flower(3,38)', 'flower(3,39)', 'flower(3,40)', 'flower(3,41)', 'flower(3,42)', 'flower(3,43)', 'flower(3,44)', 'flower(3,45)', 'flower(3,46)', 'flower(3,47)', 'flower(3,48)', 'flower(3,49)', 'flower(3,50)', 'flower(3,51)', 'flower(3,52)', 'flower(3,53)', 'flower(3,54)', 'flower(3,55)', 'flower(3,56)', 'flower(3,57)', 'flower(3,58)', 'flower(3,59)', 'flower(3,60)', 'flower(3,61)', 'flower(3,62)', 'flower(3,63)', 'flower(3,64)', 'flower(3,65)', 'flower(3,66)', 'flower(3,67)', 'flower(3,68)', 'flower(3,69)', 'flower(3,70)', 'flower(3,71)', 'flower(3,72)', 'flower(3,73)', 'flower(3,74)', 'flower(3,75)', 'flower(3,76)', 'flower(3,77)', 'flower(3,78)', 'flower(3,79)', 'flower(3,80)', 'flower(3,81)', 'flower(3,82)', 'flower(3,83)', 'flower(3,84)', 'flower(3,85)', 'flower(3,86)', 'flower(3,87)', 'flower(3,88)', 'flower(3,89)', 'flower(3,90)', 'flower(3,91)', 'flower(3,92)', 'flower(3,93)', 'flower(3,94)', 'flower(3,95)', 'flower(3,96)', 'flower(3,97)', 'flower(3,98)', 'flower(3,99)', 'flower(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['flower(1,1)', 'flower(1,2)', 'flower(1,3)', 'flower(1,4)', 'flower(1,5)', 'flower(1,6)', 'flower(1,7)', 'flower(1,8)', 'flower(1,9)', 'flower(1,10)', 'flower(1,11)', 'flower(1,12)', 'flower(1,13)', 'flower(1,14)', 'flower(1,15)', 'flower(1,16)', 'flower(1,17)', 'flower(1,18)', 'flower(1,19)', 'flower(1,20)', 'flower(1,21)', 'flower(1,22)', 'flower(1,23)', 'flower(1,24)', 'flower(1,25)', 'flower(1,26)', 'flower(1,27)', 'flower(1,28)', 'flower(1,29)', 'flower(1,30)', 'flower(1,31)', 'flower(1,32)', 'flower(1,33)', 'flower(1,34)', 'flower(1,35)', 'flower(1,36)', 'flower(1,37)', 'flower(1,38)', 'flower(1,39)', 'flower(1,40)', 'flower(1,41)', 'flower(1,42)', 'flower(1,43)', 'flower(1,44)', 'flower(1,45)', 'flower(1,46)', 'flower(1,47)', 'flower(1,48)', 'flower(1,49)', 'flower(1,50)', 'flower(1,51)', 'flower(1,52)', 'flower(1,53)', 'flower(1,54)', 'flower(1,55)', 'flower(1,56)', 'flower(1,57)', 'flower(1,58)', 'flower(1,59)', 'flower(1,60)', 'flower(1,61)', 'flower(1,62)', 'flower(1,63)', 'flower(1,64)', 'flower(1,65)', 'flower(1,66)', 'flower(1,67)', 'flower(1,68)', 'flower(1,69)', 'flower(1,70)', 'flower(1,71)', 'flower(1,72)', 'flower(1,73)', 'flower(1,74)', 'flower(1,75)', 'flower(1,76)', 'flower(1,77)', 'flower(1,78)', 'flower(1,79)', 'flower(1,80)', 'flower(1,81)', 'flower(1,82)', 'flower(1,83)', 'flower(1,84)', 'flower(1,85)', 'flower(1,86)', 'flower(1,87)', 'flower(1,88)', 'flower(1,89)', 'flower(1,90)', 'flower(1,91)', 'flower(1,92)', 'flower(1,93)', 'flower(1,94)', 'flower(1,95)', 'flower(1,96)', 'flower(1,97)', 'flower(1,98)', 'flower(1,99)', 'flower(1,100)', 'flower(2,1)', 'flower(2,2)', 'flower(2,3)', 'flower(2,4)', 'flower(2,5)', 'flower(2,6)', 'flower(2,7)', 'flower(2,8)', 'flower(2,9)', 'flower(2,10)', 'flower(2,11)', 'flower(2,12)', 'flower(2,13)', 'flower(2,14)', 'flower(2,15)', 'flower(2,16)', 'flower(2,17)', 'flower(2,18)', 'flower(2,19)', 'flower(2,20)', 'flower(2,21)', 'flower(2,22)', 'flower(2,23)', 'flower(2,24)', 'flower(2,25)', 'flower(2,26)', 'flower(2,27)', 'flower(2,28)', 'flower(2,29)', 'flower(2,30)', 'flower(2,31)', 'flower(2,32)', 'flower(2,33)', 'flower(2,34)', 'flower(2,35)', 'flower(2,36)', 'flower(2,37)', 'flower(2,38)', 'flower(2,39)', 'flower(2,40)', 'flower(2,41)', 'flower(2,42)', 'flower(2,43)', 'flower(2,44)', 'flower(2,45)', 'flower(2,46)', 'flower(2,47)', 'flower(2,48)', 'flower(2,49)', 'flower(2,50)', 'flower(2,51)', 'flower(2,52)', 'flower(2,53)', 'flower(2,54)', 'flower(2,55)', 'flower(2,56)', 'flower(2,57)', 'flower(2,58)', 'flower(2,59)', 'flower(2,60)', 'flower(2,61)', 'flower(2,62)', 'flower(2,63)', 'flower(2,64)', 'flower(2,65)', 'flower(2,66)', 'flower(2,67)', 'flower(2,68)', 'flower(2,69)', 'flower(2,70)', 'flower(2,71)', 'flower(2,72)', 'flower(2,73)', 'flower(2,74)', 'flower(2,75)', 'flower(2,76)', 'flower(2,77)', 'flower(2,78)', 'flower(2,79)', 'flower(2,80)', 'flower(2,81)', 'flower(2,82)', 'flower(2,83)', 'flower(2,84)', 'flower(2,85)', 'flower(2,86)', 'flower(2,87)', 'flower(2,88)', 'flower(2,89)', 'flower(2,90)', 'flower(2,91)', 'flower(2,92)', 'flower(2,93)', 'flower(2,94)', 'flower(2,95)', 'flower(2,96)', 'flower(2,97)', 'flower(2,98)', 'flower(2,99)', 'flower(2,100)', 'flower(3,1)', 'flower(3,2)', 'flower(3,3)', 'flower(3,4)', 'flower(3,5)', 'flower(3,6)', 'flower(3,7)', 'flower(3,8)', 'flower(3,9)', 'flower(3,10)', 'flower(3,11)', 'flower(3,12)', 'flower(3,13)', 'flower(3,14)', 'flower(3,15)', 'flower(3,16)', 'flower(3,17)', 'flower(3,18)', 'flower(3,19)', 'flower(3,20)', 'flower(3,21)', 'flower(3,22)', 'flower(3,23)', 'flower(3,24)', 'flower(3,25)', 'flower(3,26)', 'flower(3,27)', 'flower(3,28)', 'flower(3,29)', 'flower(3,30)', 'flower(3,31)', 'flower(3,32)', 'flower(3,33)', 'flower(3,34)', 'flower(3,35)', 'flower(3,36)', 'flower(3,37)', 'flower(3,38)', 'flower(3,39)', 'flower(3,40)', 'flower(3,41)', 'flower(3,42)', 'flower(3,43)', 'flower(3,44)', 'flower(3,45)', 'flower(3,46)', 'flower(3,47)', 'flower(3,48)', 'flower(3,49)', 'flower(3,50)', 'flower(3,51)', 'flower(3,52)', 'flower(3,53)', 'flower(3,54)', 'flower(3,55)', 'flower(3,56)', 'flower(3,57)', 'flower(3,58)', 'flower(3,59)', 'flower(3,60)', 'flower(3,61)', 'flower(3,62)', 'flower(3,63)', 'flower(3,64)', 'flower(3,65)', 'flower(3,66)', 'flower(3,67)', 'flower(3,68)', 'flower(3,69)', 'flower(3,70)', 'flower(3,71)', 'flower(3,72)', 'flower(3,73)', 'flower(3,74)', 'flower(3,75)', 'flower(3,76)', 'flower(3,77)', 'flower(3,78)', 'flower(3,79)', 'flower(3,80)', 'flower(3,81)', 'flower(3,82)', 'flower(3,83)', 'flower(3,84)', 'flower(3,85)', 'flower(3,86)', 'flower(3,87)', 'flower(3,88)', 'flower(3,89)', 'flower(3,90)', 'flower(3,91)', 'flower(3,92)', 'flower(3,93)', 'flower(3,94)', 'flower(3,95)', 'flower(3,96)', 'flower(3,97)', 'flower(3,98)', 'flower(3,99)', 'flower(3,100)', 'select(1)', 'select(2)', 'select(3)']]


693
assignment

question: 
Design an ASP script to connect each element, as determined by the predicate "butterfly", with one label from "owner","mumbai","toronto","cosenza","lake","weight","desk","chair".

answer from file: 
assign(X,"owner")|assign(X,"mumbai")|assign(X,"toronto")|assign(X,"cosenza")|assign(X,"lake")|assign(X,"weight")|assign(X,"desk")|assign(X,"chair"):-butterfly(X).

parsed from model: 
assign(X,"owner")|assign(X,"mumbai")|assign(X,"toronto")|assign(X,"cosenza")|assign(X,"lake")|assign(X,"weight")|assign(X,"desk")|assign(X,"chair"):- arrivant(X).

facts: 
butterfly(1..5).

generated: 
Design an ASP script to connect each element, as determined by the predicate "butterfly", with one label from "owner","mumbai","toronto","cosenza","lake","weight","desk","chair".
Answer: assign(X,"owner")|assign(X,"mumbai")|assign(X,"toronto")|assign(X,"cosenza")|assign(X,"lake")|assign(X,"weight")|assign(X,"desk")|assign(X,"chair"):- arrivant(X).
assign(X,"city")|assign(X,"rome")|assign(X,"florence","city","rome","florence","city","description","rome","florence","description","rome","description","city","description","rome","description","city","description","rome","description","city","description","rome","description","city","description","rome","description","city","description","rome","description","city

unique_rules: 
['assign(X,"owner")|assign(X,"mumbai")|assign(X,"toronto")|assign(X,"cosenza")|assign(X,"lake")|assign(X,"weight")|assign(X,"desk")|assign(X,"chair"):- arrivant(X).']

jaccard: 0.0

AS desired: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)', 'assign(1,"chair")', 'assign(2,"chair")', 'assign(3,"desk")', 'assign(4,"chair")', 'assign(5,"chair")']]
\AS obtained: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)']]


694
constraint

question: 
Draft an ASP program to disallow assigning the predicate "wall" with value 12 to the label "black".

answer from file: 
:-assign(12,black).

parsed from model: 
:-assign(12,black).

facts: 
wall(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-wall(X).

generated: 
Draft an ASP program to disallow assigning the predicate "wall" with value 12 to the label "black".
Answer: :-assign(12,black).
Explanation: The predicate "wall" includes the value 12, and the label "black" is not assigned to it.

unique_rules: 
[':-assign(12,black).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'wall(1)', 'wall(2)', 'wall(3)', 'wall(4)', 'wall(5)', 'wall(6)', 'wall(7)', 'wall(8)', 'wall(9)', 'wall(10)', 'wall(11)', 'wall(12)', 'wall(13)', 'wall(14)', 'wall(15)', 'wall(16)', 'wall(17)', 'wall(18)', 'wall(19)', 'wall(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'wall(1)', 'wall(2)', 'wall(3)', 'wall(4)', 'wall(5)', 'wall(6)', 'wall(7)', 'wall(8)', 'wall(9)', 'wall(10)', 'wall(11)', 'wall(12)', 'wall(13)', 'wall(14)', 'wall(15)', 'wall(16)', 'wall(17)', 'wall(18)', 'wall(19)', 'wall(20)']]


695
combination

question: 
Develop an ASP solution that finds all pairings of elements from the predicates "toronto" and "desk".

answer from file: 
combination(X,Y):-toronto(X),desk(Y).

parsed from model: 
combination(X,Y):-toronto(X),desk(Y).

facts: 
toronto(1..4).desk(1..5).

generated: 
Develop an ASP solution that finds all pairings of elements from the predicates "toronto" and "desk".
Answer: combination(X,Y):-toronto(X),desk(Y).
combination(X,Y):-toronto(X),not desk(Y).
combination(X,Y):-not toronto(X),desk(Y).
combination(X,Y):-not toronto(X),not desk(Y).

unique_rules: 
['combination(X,Y):-toronto(X),desk(Y).', 'combination(X,Y):-toronto(X),not desk(Y).', 'combination(X,Y):-not toronto(X),desk(Y).', 'combination(X,Y):-not toronto(X),not desk(Y).']

jaccard: 1.0

AS desired: [['desk(1)', 'desk(2)', 'desk(3)', 'desk(4)', 'desk(5)', 'toronto(1)', 'toronto(2)', 'toronto(3)', 'toronto(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['desk(1)', 'desk(2)', 'desk(3)', 'desk(4)', 'desk(5)', 'toronto(1)', 'toronto(2)', 'toronto(3)', 'toronto(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


696
join

question: 
Design an ASP application to solve the problem by defining the predicate "flower_strength" which links each flower to the surname of strength, given "flower" has fields "ID","strengthID","owner","lake","quality" and "strength" has fields "ID","weight","surname","lake".

answer from file: 
flower_strength(X,Z):-flower(X,Y,_,_,_),strength(Y,_,Z,_).

parsed from model: 
flower_strength(X,Z):-flower(X,Y,_,_,_),strength(Y,Z,_,_).

facts: 
flower("ID","strengthID","owner","lake","quality").strength("ID","weight","surname","lake").

generated: 
Design an ASP application to solve the problem by defining the predicate "flower_strength" which links each flower to the surname of strength, given "flower" has fields "ID","strengthID","owner","lake","quality" and "strength" has fields "ID","weight","surname","lake". Define the predicate "flower_strength" which links each flower to the weight of strength.
Answer: flower_strength(X,Z):-flower(X,Y,_,_,_),strength(Y,Z,_,_).
flower_strength(X,Z):-flower(X,Y,_,_,Z).
flower_strength(X,Z):-flower(X,Y,_,_),not strength(Y,Z,_,_).

unique_rules: 
['flower_strength(X,Z):-flower(X,Y,_,_,_),strength(Y,Z,_,_).', 'flower_strength(X,Z):-flower(X,Y,_,_,Z).', 'flower_strength(X,Z):-flower(X,Y,_,_),not strength(Y,Z,_,_).']

jaccard: 1.0

AS desired: [['flower("ID","strengthID","owner","lake","quality")', 'strength("ID","weight","surname","lake")']]
\AS obtained: [['flower("ID","strengthID","owner","lake","quality")', 'strength("ID","weight","surname","lake")']]


697
closure

question: 
Create an ASP code snippet to determine the transitive closure of the "butterfly" predicate, resulting in the predicate "trains".

answer from file: 
trains(X,Y):-butterfly(X,Y).
trains(X,Y):-butterfly(X,Z),trains(Z,Y).

parsed from model: 
trains(X,Y):-butterfly(X,Y).
trains(X,Y):- arrivant(X,Y).

facts: 
butterfly(1..3, 1..4).

generated: 
Create an ASP code snippet to determine the transitive closure of the "butterfly" predicate, resulting in the predicate "trains".
Answer: trains(X,Y):-butterfly(X,Y).
trains(X,Y):- arrivant(X,Y).
trains(X,Y):-bike(X,Y).
trains(X,Y):-city(X,Y).
 arrivant(X,Y):-city(X,Y).
bike(X,Y):-city(X,Y).
city(X,Y):-bike(X,Y).

unique_rules: 
['trains(X,Y):-butterfly(X,Y).', 'trains(X,Y):- arrivant(X,Y).', 'trains(X,Y):-bike(X,Y).', 'trains(X,Y):-city(X,Y).', 'arrivant(X,Y):-city(X,Y).', 'bike(X,Y):-city(X,Y).', 'city(X,Y):-bike(X,Y).']

jaccard: 1.0

AS desired: [['butterfly(1,1)', 'butterfly(1,2)', 'butterfly(1,3)', 'butterfly(1,4)', 'butterfly(2,1)', 'butterfly(2,2)', 'butterfly(2,3)', 'butterfly(2,4)', 'butterfly(3,1)', 'butterfly(3,2)', 'butterfly(3,3)', 'butterfly(3,4)', 'trains(1,1)', 'trains(1,2)', 'trains(1,3)', 'trains(1,4)', 'trains(2,1)', 'trains(2,2)', 'trains(2,3)', 'trains(2,4)', 'trains(3,1)', 'trains(3,2)', 'trains(3,3)', 'trains(3,4)']]
\AS obtained: [['butterfly(1,1)', 'butterfly(1,2)', 'butterfly(1,3)', 'butterfly(1,4)', 'butterfly(2,1)', 'butterfly(2,2)', 'butterfly(2,3)', 'butterfly(2,4)', 'butterfly(3,1)', 'butterfly(3,2)', 'butterfly(3,3)', 'butterfly(3,4)', 'trains(1,1)', 'trains(1,2)', 'trains(1,3)', 'trains(1,4)', 'trains(2,1)', 'trains(2,2)', 'trains(2,3)', 'trains(2,4)', 'trains(3,1)', 'trains(3,2)', 'trains(3,3)', 'trains(3,4)']]


698
preference

question: 
Write an ASP program for the following problem. I would prefer that predicate "lake" with value "13" is not associated with "mumbai". If this occurs, it costs "1" at level "1".

answer from file: 
:~assign(13,"mumbai").[1@1]

parsed from model: 
:~assign(13,"mumbai").[1@1]

facts: 
lake(1..20).

generated: 
Write an ASP program for the following problem. I would prefer that predicate "lake" with value "13" is not associated with "mumbai". If this occurs, it costs "1" at level "1".
Answer: :~assign(13,"mumbai").[1@1]
The predicate "bike" includes fields "ID","city","author","name","price","description","author","city","name","price","description","author","city","name","price","description","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city

unique_rules: 
[':~assign(13,"mumbai").[1@1]']

jaccard: 1.0

AS desired: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lake(6)', 'lake(7)', 'lake(8)', 'lake(9)', 'lake(10)', 'lake(11)', 'lake(12)', 'lake(13)', 'lake(14)', 'lake(15)', 'lake(16)', 'lake(17)', 'lake(18)', 'lake(19)', 'lake(20)']]
\AS obtained: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lake(6)', 'lake(7)', 'lake(8)', 'lake(9)', 'lake(10)', 'lake(11)', 'lake(12)', 'lake(13)', 'lake(14)', 'lake(15)', 'lake(16)', 'lake(17)', 'lake(18)', 'lake(19)', 'lake(20)']]


699
filtering

question: 
Write an ASP application to collect values linked to the predicate "chair" and labeled as "hair".

answer from file: 
select(X):-chair(X,"hair").

parsed from model: 
select(X):-chair(X,"hair").

facts: 
chair(1..5, "hair").

generated: 
Write an ASP application to collect values linked to the predicate "chair" and labeled as "hair".
Answer: select(X):-chair(X,"hair").
chair(X,Z):- felicità(X,Z).
 felicità(X,Z):-height(X,Z).
height(X,Z):-age(X,Z).

unique_rules: 
['select(X):-chair(X,"hair").', 'chair(X,Z):- felicità(X,Z).', 'felicità(X,Z):-height(X,Z).', 'height(X,Z):-age(X,Z).']

jaccard: 1.0

AS desired: [['chair(1,"hair")', 'chair(2,"hair")', 'chair(3,"hair")', 'chair(4,"hair")', 'chair(5,"hair")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['chair(1,"hair")', 'chair(2,"hair")', 'chair(3,"hair")', 'chair(4,"hair")', 'chair(5,"hair")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


700
negative_filtering

question: 
Draft an ASP program to retrieve values tied to the predicate "owner" but not associated with the predicate "roof" and labeled "roof".

answer from file: 
select(X):-owner(X),not roof(X,"roof").

parsed from model: 
select(X):-owner(X),not roof(X,"roof").

facts: 
owner(1..3).roof(1,"black").roof(2,"pink").roof(3,"cosenza").

generated: 
Draft an ASP program to retrieve values tied to the predicate "owner" but not associated with the predicate "roof" and labeled "roof".
Answer: select(X):-owner(X),not roof(X,"roof").
Explanation: The predicate "owner" associates a single label from "author","shangai","florence","rome","color","dubai","moto","amsterdam","city","description","height","moto","author","shangai","florence","rome","color","dubai","moto","amsterdam","city","description","height","moto","author","shangai","florence","rome","color","dubai","moto","amsterdam","city","description","height","moto","author","shangai","florence","rome","color","dubai","moto","amsterdam","city","description","height","moto","author","shangai","florence","rome","

unique_rules: 
['select(X):-owner(X),not roof(X,"roof").']

jaccard: 1.0

AS desired: [['owner(1)', 'owner(2)', 'owner(3)', 'roof(1,"black")', 'roof(2,"pink")', 'roof(3,"cosenza")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['owner(1)', 'owner(2)', 'owner(3)', 'roof(1,"black")', 'roof(2,"pink")', 'roof(3,"cosenza")', 'select(1)', 'select(2)', 'select(3)']]


701
numeric_filtering

question: 
Develop an ASP program to gather all values linked to the predicate "weight" with a value different than 61.

answer from file: 
select(X):-weight(X,C),C!=61.

parsed from model: 
select(X):-weight(X,C),C!=61.

facts: 
weight(1..3, 1..100).

generated: 
Develop an ASP program to gather all values linked to the predicate "weight" with a value different than 61.
Answer: select(X):-weight(X,C),C!=61.
select(X):-weight(X,C),C==61.

unique_rules: 
['select(X):-weight(X,C),C!=61.', 'select(X):-weight(X,C),C==61.']

jaccard: 1.0

AS desired: [['weight(1,1)', 'weight(1,2)', 'weight(1,3)', 'weight(1,4)', 'weight(1,5)', 'weight(1,6)', 'weight(1,7)', 'weight(1,8)', 'weight(1,9)', 'weight(1,10)', 'weight(1,11)', 'weight(1,12)', 'weight(1,13)', 'weight(1,14)', 'weight(1,15)', 'weight(1,16)', 'weight(1,17)', 'weight(1,18)', 'weight(1,19)', 'weight(1,20)', 'weight(1,21)', 'weight(1,22)', 'weight(1,23)', 'weight(1,24)', 'weight(1,25)', 'weight(1,26)', 'weight(1,27)', 'weight(1,28)', 'weight(1,29)', 'weight(1,30)', 'weight(1,31)', 'weight(1,32)', 'weight(1,33)', 'weight(1,34)', 'weight(1,35)', 'weight(1,36)', 'weight(1,37)', 'weight(1,38)', 'weight(1,39)', 'weight(1,40)', 'weight(1,41)', 'weight(1,42)', 'weight(1,43)', 'weight(1,44)', 'weight(1,45)', 'weight(1,46)', 'weight(1,47)', 'weight(1,48)', 'weight(1,49)', 'weight(1,50)', 'weight(1,51)', 'weight(1,52)', 'weight(1,53)', 'weight(1,54)', 'weight(1,55)', 'weight(1,56)', 'weight(1,57)', 'weight(1,58)', 'weight(1,59)', 'weight(1,60)', 'weight(1,61)', 'weight(1,62)', 'weight(1,63)', 'weight(1,64)', 'weight(1,65)', 'weight(1,66)', 'weight(1,67)', 'weight(1,68)', 'weight(1,69)', 'weight(1,70)', 'weight(1,71)', 'weight(1,72)', 'weight(1,73)', 'weight(1,74)', 'weight(1,75)', 'weight(1,76)', 'weight(1,77)', 'weight(1,78)', 'weight(1,79)', 'weight(1,80)', 'weight(1,81)', 'weight(1,82)', 'weight(1,83)', 'weight(1,84)', 'weight(1,85)', 'weight(1,86)', 'weight(1,87)', 'weight(1,88)', 'weight(1,89)', 'weight(1,90)', 'weight(1,91)', 'weight(1,92)', 'weight(1,93)', 'weight(1,94)', 'weight(1,95)', 'weight(1,96)', 'weight(1,97)', 'weight(1,98)', 'weight(1,99)', 'weight(1,100)', 'weight(2,1)', 'weight(2,2)', 'weight(2,3)', 'weight(2,4)', 'weight(2,5)', 'weight(2,6)', 'weight(2,7)', 'weight(2,8)', 'weight(2,9)', 'weight(2,10)', 'weight(2,11)', 'weight(2,12)', 'weight(2,13)', 'weight(2,14)', 'weight(2,15)', 'weight(2,16)', 'weight(2,17)', 'weight(2,18)', 'weight(2,19)', 'weight(2,20)', 'weight(2,21)', 'weight(2,22)', 'weight(2,23)', 'weight(2,24)', 'weight(2,25)', 'weight(2,26)', 'weight(2,27)', 'weight(2,28)', 'weight(2,29)', 'weight(2,30)', 'weight(2,31)', 'weight(2,32)', 'weight(2,33)', 'weight(2,34)', 'weight(2,35)', 'weight(2,36)', 'weight(2,37)', 'weight(2,38)', 'weight(2,39)', 'weight(2,40)', 'weight(2,41)', 'weight(2,42)', 'weight(2,43)', 'weight(2,44)', 'weight(2,45)', 'weight(2,46)', 'weight(2,47)', 'weight(2,48)', 'weight(2,49)', 'weight(2,50)', 'weight(2,51)', 'weight(2,52)', 'weight(2,53)', 'weight(2,54)', 'weight(2,55)', 'weight(2,56)', 'weight(2,57)', 'weight(2,58)', 'weight(2,59)', 'weight(2,60)', 'weight(2,61)', 'weight(2,62)', 'weight(2,63)', 'weight(2,64)', 'weight(2,65)', 'weight(2,66)', 'weight(2,67)', 'weight(2,68)', 'weight(2,69)', 'weight(2,70)', 'weight(2,71)', 'weight(2,72)', 'weight(2,73)', 'weight(2,74)', 'weight(2,75)', 'weight(2,76)', 'weight(2,77)', 'weight(2,78)', 'weight(2,79)', 'weight(2,80)', 'weight(2,81)', 'weight(2,82)', 'weight(2,83)', 'weight(2,84)', 'weight(2,85)', 'weight(2,86)', 'weight(2,87)', 'weight(2,88)', 'weight(2,89)', 'weight(2,90)', 'weight(2,91)', 'weight(2,92)', 'weight(2,93)', 'weight(2,94)', 'weight(2,95)', 'weight(2,96)', 'weight(2,97)', 'weight(2,98)', 'weight(2,99)', 'weight(2,100)', 'weight(3,1)', 'weight(3,2)', 'weight(3,3)', 'weight(3,4)', 'weight(3,5)', 'weight(3,6)', 'weight(3,7)', 'weight(3,8)', 'weight(3,9)', 'weight(3,10)', 'weight(3,11)', 'weight(3,12)', 'weight(3,13)', 'weight(3,14)', 'weight(3,15)', 'weight(3,16)', 'weight(3,17)', 'weight(3,18)', 'weight(3,19)', 'weight(3,20)', 'weight(3,21)', 'weight(3,22)', 'weight(3,23)', 'weight(3,24)', 'weight(3,25)', 'weight(3,26)', 'weight(3,27)', 'weight(3,28)', 'weight(3,29)', 'weight(3,30)', 'weight(3,31)', 'weight(3,32)', 'weight(3,33)', 'weight(3,34)', 'weight(3,35)', 'weight(3,36)', 'weight(3,37)', 'weight(3,38)', 'weight(3,39)', 'weight(3,40)', 'weight(3,41)', 'weight(3,42)', 'weight(3,43)', 'weight(3,44)', 'weight(3,45)', 'weight(3,46)', 'weight(3,47)', 'weight(3,48)', 'weight(3,49)', 'weight(3,50)', 'weight(3,51)', 'weight(3,52)', 'weight(3,53)', 'weight(3,54)', 'weight(3,55)', 'weight(3,56)', 'weight(3,57)', 'weight(3,58)', 'weight(3,59)', 'weight(3,60)', 'weight(3,61)', 'weight(3,62)', 'weight(3,63)', 'weight(3,64)', 'weight(3,65)', 'weight(3,66)', 'weight(3,67)', 'weight(3,68)', 'weight(3,69)', 'weight(3,70)', 'weight(3,71)', 'weight(3,72)', 'weight(3,73)', 'weight(3,74)', 'weight(3,75)', 'weight(3,76)', 'weight(3,77)', 'weight(3,78)', 'weight(3,79)', 'weight(3,80)', 'weight(3,81)', 'weight(3,82)', 'weight(3,83)', 'weight(3,84)', 'weight(3,85)', 'weight(3,86)', 'weight(3,87)', 'weight(3,88)', 'weight(3,89)', 'weight(3,90)', 'weight(3,91)', 'weight(3,92)', 'weight(3,93)', 'weight(3,94)', 'weight(3,95)', 'weight(3,96)', 'weight(3,97)', 'weight(3,98)', 'weight(3,99)', 'weight(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['weight(1,1)', 'weight(1,2)', 'weight(1,3)', 'weight(1,4)', 'weight(1,5)', 'weight(1,6)', 'weight(1,7)', 'weight(1,8)', 'weight(1,9)', 'weight(1,10)', 'weight(1,11)', 'weight(1,12)', 'weight(1,13)', 'weight(1,14)', 'weight(1,15)', 'weight(1,16)', 'weight(1,17)', 'weight(1,18)', 'weight(1,19)', 'weight(1,20)', 'weight(1,21)', 'weight(1,22)', 'weight(1,23)', 'weight(1,24)', 'weight(1,25)', 'weight(1,26)', 'weight(1,27)', 'weight(1,28)', 'weight(1,29)', 'weight(1,30)', 'weight(1,31)', 'weight(1,32)', 'weight(1,33)', 'weight(1,34)', 'weight(1,35)', 'weight(1,36)', 'weight(1,37)', 'weight(1,38)', 'weight(1,39)', 'weight(1,40)', 'weight(1,41)', 'weight(1,42)', 'weight(1,43)', 'weight(1,44)', 'weight(1,45)', 'weight(1,46)', 'weight(1,47)', 'weight(1,48)', 'weight(1,49)', 'weight(1,50)', 'weight(1,51)', 'weight(1,52)', 'weight(1,53)', 'weight(1,54)', 'weight(1,55)', 'weight(1,56)', 'weight(1,57)', 'weight(1,58)', 'weight(1,59)', 'weight(1,60)', 'weight(1,61)', 'weight(1,62)', 'weight(1,63)', 'weight(1,64)', 'weight(1,65)', 'weight(1,66)', 'weight(1,67)', 'weight(1,68)', 'weight(1,69)', 'weight(1,70)', 'weight(1,71)', 'weight(1,72)', 'weight(1,73)', 'weight(1,74)', 'weight(1,75)', 'weight(1,76)', 'weight(1,77)', 'weight(1,78)', 'weight(1,79)', 'weight(1,80)', 'weight(1,81)', 'weight(1,82)', 'weight(1,83)', 'weight(1,84)', 'weight(1,85)', 'weight(1,86)', 'weight(1,87)', 'weight(1,88)', 'weight(1,89)', 'weight(1,90)', 'weight(1,91)', 'weight(1,92)', 'weight(1,93)', 'weight(1,94)', 'weight(1,95)', 'weight(1,96)', 'weight(1,97)', 'weight(1,98)', 'weight(1,99)', 'weight(1,100)', 'weight(2,1)', 'weight(2,2)', 'weight(2,3)', 'weight(2,4)', 'weight(2,5)', 'weight(2,6)', 'weight(2,7)', 'weight(2,8)', 'weight(2,9)', 'weight(2,10)', 'weight(2,11)', 'weight(2,12)', 'weight(2,13)', 'weight(2,14)', 'weight(2,15)', 'weight(2,16)', 'weight(2,17)', 'weight(2,18)', 'weight(2,19)', 'weight(2,20)', 'weight(2,21)', 'weight(2,22)', 'weight(2,23)', 'weight(2,24)', 'weight(2,25)', 'weight(2,26)', 'weight(2,27)', 'weight(2,28)', 'weight(2,29)', 'weight(2,30)', 'weight(2,31)', 'weight(2,32)', 'weight(2,33)', 'weight(2,34)', 'weight(2,35)', 'weight(2,36)', 'weight(2,37)', 'weight(2,38)', 'weight(2,39)', 'weight(2,40)', 'weight(2,41)', 'weight(2,42)', 'weight(2,43)', 'weight(2,44)', 'weight(2,45)', 'weight(2,46)', 'weight(2,47)', 'weight(2,48)', 'weight(2,49)', 'weight(2,50)', 'weight(2,51)', 'weight(2,52)', 'weight(2,53)', 'weight(2,54)', 'weight(2,55)', 'weight(2,56)', 'weight(2,57)', 'weight(2,58)', 'weight(2,59)', 'weight(2,60)', 'weight(2,61)', 'weight(2,62)', 'weight(2,63)', 'weight(2,64)', 'weight(2,65)', 'weight(2,66)', 'weight(2,67)', 'weight(2,68)', 'weight(2,69)', 'weight(2,70)', 'weight(2,71)', 'weight(2,72)', 'weight(2,73)', 'weight(2,74)', 'weight(2,75)', 'weight(2,76)', 'weight(2,77)', 'weight(2,78)', 'weight(2,79)', 'weight(2,80)', 'weight(2,81)', 'weight(2,82)', 'weight(2,83)', 'weight(2,84)', 'weight(2,85)', 'weight(2,86)', 'weight(2,87)', 'weight(2,88)', 'weight(2,89)', 'weight(2,90)', 'weight(2,91)', 'weight(2,92)', 'weight(2,93)', 'weight(2,94)', 'weight(2,95)', 'weight(2,96)', 'weight(2,97)', 'weight(2,98)', 'weight(2,99)', 'weight(2,100)', 'weight(3,1)', 'weight(3,2)', 'weight(3,3)', 'weight(3,4)', 'weight(3,5)', 'weight(3,6)', 'weight(3,7)', 'weight(3,8)', 'weight(3,9)', 'weight(3,10)', 'weight(3,11)', 'weight(3,12)', 'weight(3,13)', 'weight(3,14)', 'weight(3,15)', 'weight(3,16)', 'weight(3,17)', 'weight(3,18)', 'weight(3,19)', 'weight(3,20)', 'weight(3,21)', 'weight(3,22)', 'weight(3,23)', 'weight(3,24)', 'weight(3,25)', 'weight(3,26)', 'weight(3,27)', 'weight(3,28)', 'weight(3,29)', 'weight(3,30)', 'weight(3,31)', 'weight(3,32)', 'weight(3,33)', 'weight(3,34)', 'weight(3,35)', 'weight(3,36)', 'weight(3,37)', 'weight(3,38)', 'weight(3,39)', 'weight(3,40)', 'weight(3,41)', 'weight(3,42)', 'weight(3,43)', 'weight(3,44)', 'weight(3,45)', 'weight(3,46)', 'weight(3,47)', 'weight(3,48)', 'weight(3,49)', 'weight(3,50)', 'weight(3,51)', 'weight(3,52)', 'weight(3,53)', 'weight(3,54)', 'weight(3,55)', 'weight(3,56)', 'weight(3,57)', 'weight(3,58)', 'weight(3,59)', 'weight(3,60)', 'weight(3,61)', 'weight(3,62)', 'weight(3,63)', 'weight(3,64)', 'weight(3,65)', 'weight(3,66)', 'weight(3,67)', 'weight(3,68)', 'weight(3,69)', 'weight(3,70)', 'weight(3,71)', 'weight(3,72)', 'weight(3,73)', 'weight(3,74)', 'weight(3,75)', 'weight(3,76)', 'weight(3,77)', 'weight(3,78)', 'weight(3,79)', 'weight(3,80)', 'weight(3,81)', 'weight(3,82)', 'weight(3,83)', 'weight(3,84)', 'weight(3,85)', 'weight(3,86)', 'weight(3,87)', 'weight(3,88)', 'weight(3,89)', 'weight(3,90)', 'weight(3,91)', 'weight(3,92)', 'weight(3,93)', 'weight(3,94)', 'weight(3,95)', 'weight(3,96)', 'weight(3,97)', 'weight(3,98)', 'weight(3,99)', 'weight(3,100)', 'select(1)', 'select(2)', 'select(3)']]


702
assignment

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are "delhi","laptop","butterfly","barcelona","lake","desk","white","cosenza".

answer from file: 
assign(X,"delhi")|assign(X,"laptop")|assign(X,"butterfly")|assign(X,"barcelona")|assign(X,"lake")|assign(X,"desk")|assign(X,"white")|assign(X,"cosenza"):-lake(X).

parsed from model: 
assign(X,"delhi")|assign(X,"laptop")|assign(X," arrivant")|assign(X,"shangai")|assign(X,"lake")|assign(X,"desk")|assign(X,"white")|assign(X,"cosenza"):-lake(X).

facts: 
lake(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are "delhi","laptop","butterfly","barcelona","lake","desk","white","cosenza".
Answer: assign(X,"delhi")|assign(X,"laptop")|assign(X," arrivant")|assign(X,"shangai")|assign(X,"lake")|assign(X,"desk")|assign(X,"white")|assign(X,"cosenza"):-lake(X).
assign(X,"shangai"):-bike(X).
assign(X,"dubai"):-moto(X).
assign(X,"moto"):-bike(X).
assign(X,"bike"):-moto(X).
assign(X,"dubai"):-moto(X).
assign(X,"moto"):-bike(X).
assign(X,"bike"):-moto(X

unique_rules: 
['assign(X,"delhi")|assign(X,"laptop")|assign(X," arrivant")|assign(X,"shangai")|assign(X,"lake")|assign(X,"desk")|assign(X,"white")|assign(X,"cosenza"):-lake(X).', 'assign(X,"shangai"):-bike(X).', 'assign(X,"dubai"):-moto(X).', 'assign(X,"moto"):-bike(X).', 'assign(X,"bike"):-moto(X).', 'assign(X,"bike"):-moto(X']

jaccard: 1.0

AS desired: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'assign(1,"cosenza")', 'assign(2,"cosenza")', 'assign(3,"white")', 'assign(4,"cosenza")', 'assign(5,"cosenza")']]
\AS obtained: [['lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'assign(1,"cosenza")', 'assign(2,"cosenza")', 'assign(3,"white")', 'assign(4,"cosenza")', 'assign(5,"cosenza")']]


703
constraint

question: 
Write an ASP application that excludes the "flower" predicate with value 15 from being assigned to the label "wall".

answer from file: 
:-assign(15,wall).

parsed from model: 
:-assign(15,wall).

facts: 
flower(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-flower(X).

generated: 
Write an ASP application that excludes the "flower" predicate with value 15 from being assigned to the label "wall".
Answer: :-assign(15,wall).
Explanation: The predicate "street" includes the "city" label, and the predicate "florence" includes the "description" label.
The predicate "bike" includes the "description" label, and the predicate "moto" includes the "city" label.
The predicate "author" includes the "description" label, and the predicate "rome" includes the "city" label.
The predicate "green" includes the "description" label, and the predicate "moto" includes the "city" label.
The predicate "city" includes the "description" label, and the predicate "florence" includes the "description" label.
The predicate "bike

unique_rules: 
[':-assign(15,wall).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'flower(1)', 'flower(2)', 'flower(3)', 'flower(4)', 'flower(5)', 'flower(6)', 'flower(7)', 'flower(8)', 'flower(9)', 'flower(10)', 'flower(11)', 'flower(12)', 'flower(13)', 'flower(14)', 'flower(15)', 'flower(16)', 'flower(17)', 'flower(18)', 'flower(19)', 'flower(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'flower(1)', 'flower(2)', 'flower(3)', 'flower(4)', 'flower(5)', 'flower(6)', 'flower(7)', 'flower(8)', 'flower(9)', 'flower(10)', 'flower(11)', 'flower(12)', 'flower(13)', 'flower(14)', 'flower(15)', 'flower(16)', 'flower(17)', 'flower(18)', 'flower(19)', 'flower(20)']]


704
combination

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "delhi" and "chicago".

answer from file: 
combination(X,Y):-delhi(X),chicago(Y).

parsed from model: 
combination(X,Y):-delhi(X),chicago(Y).

facts: 
delhi(1..4).chicago(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "delhi" and "chicago".
Answer: combination(X,Y):-delhi(X),chicago(Y).
combination(X,Y):-delhi(X),not chicago(Y).
combination(X,Y):-not delhi(X),chicago(Y).
combination(X,Y):-not delhi(X),not chicago(Y).
combination(X,Y):-delhi(X),chicago(Y).

unique_rules: 
['combination(X,Y):-delhi(X),chicago(Y).', 'combination(X,Y):-delhi(X),not chicago(Y).', 'combination(X,Y):-not delhi(X),chicago(Y).', 'combination(X,Y):-not delhi(X),not chicago(Y).']

jaccard: 1.0

AS desired: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'chicago(5)', 'delhi(1)', 'delhi(2)', 'delhi(3)', 'delhi(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'chicago(5)', 'delhi(1)', 'delhi(2)', 'delhi(3)', 'delhi(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


705
join

question: 
Create an ASP solution to define the predicate "storm_surname" that links each storm to the weight of surname, given "storm" has fields "ID","surnameID","weight","hair","quality" and "surname" has fields "ID","weight","surname".

answer from file: 
storm_surname(X,Z):-storm(X,Y,_,_,_),surname(Y,Z,_).

parsed from model: 
storm_surname(X,Z):-storm(X,Y,_,_,_),surname(Y,Z,_).

facts: 
storm("ID","surnameID","weight","hair","quality").surname("ID","weight","surname").

generated: 
Create an ASP solution to define the predicate "storm_surname" that links each storm to the weight of surname, given "storm" has fields "ID","surnameID","weight","hair","quality" and "surname" has fields "ID","weight","surname". Define the predicate "storm_surname" that links each storm to the weight of surname of "surname".
Answer: storm_surname(X,Z):-storm(X,Y,_,_,_),surname(Y,Z,_).
storm_surname(X,Z):-storm(X,Y,Z,_,_),surname(Y,Z,Z).

unique_rules: 
['storm_surname(X,Z):-storm(X,Y,_,_,_),surname(Y,Z,_).', 'storm_surname(X,Z):-storm(X,Y,Z,_,_),surname(Y,Z,Z).']

jaccard: 1.0

AS desired: [['storm("ID","surnameID","weight","hair","quality")', 'surname("ID","weight","surname")']]
\AS obtained: [['storm("ID","surnameID","weight","hair","quality")', 'surname("ID","weight","surname")']]


706
closure

question: 
Generate an ASP program to construct the "journey" predicate based on the transitive closure of the "moscow" predicate.

answer from file: 
journey(X,Y):-moscow(X,Y).
journey(X,Y):-moscow(X,Z),journey(Z,Y).

parsed from model: 
journey(X,Y):-moscow(X,Y).
journey(X,Y):-moscow(X,Z),journey(Z,Y).

facts: 
moscow(1..3, 1..4).

generated: 
Generate an ASP program to construct the "journey" predicate based on the transitive closure of the "moscow" predicate.
Answer: journey(X,Y):-moscow(X,Y).
journey(X,Y):-moscow(X,Z),journey(Z,Y).
journey(X,Y):-not moscow(X,Y).
journey(X,Y):-city(X,Y).
city(X,Y):-city(X,Z),city(Z,Y).
city(X,Y):-city(X,Y).

unique_rules: 
['journey(X,Y):-moscow(X,Y).', 'journey(X,Y):-moscow(X,Z),journey(Z,Y).', 'journey(X,Y):-not moscow(X,Y).', 'journey(X,Y):-city(X,Y).', 'city(X,Y):-city(X,Z),city(Z,Y).', 'city(X,Y):-city(X,Y).']

jaccard: 1.0

AS desired: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)', 'journey(1,1)', 'journey(1,2)', 'journey(1,3)', 'journey(1,4)', 'journey(2,1)', 'journey(2,2)', 'journey(2,3)', 'journey(2,4)', 'journey(3,1)', 'journey(3,2)', 'journey(3,3)', 'journey(3,4)']]
\AS obtained: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)', 'journey(1,1)', 'journey(1,2)', 'journey(1,3)', 'journey(1,4)', 'journey(2,1)', 'journey(2,2)', 'journey(2,3)', 'journey(2,4)', 'journey(3,1)', 'journey(3,2)', 'journey(3,3)', 'journey(3,4)']]


707
preference

question: 
Develop an ASP application to avoid the "strength" predicate with value "19" being associated with "pink", incurring a cost of "1" at level "1" if found.

answer from file: 
:~assign(19,"pink").[1@1]

parsed from model: 
:~assign(19,"pink").[1@1]

facts: 
strength(1..20).

generated: 
Develop an ASP application to avoid the "strength" predicate with value "19" being associated with "pink", incurring a cost of "1" at level "1" if found.
Answer: :~assign(19,"pink").[1@1]
The predicate "height" includes fields "ID","city","author","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","

unique_rules: 
[':~assign(19,"pink").[1@1]']

jaccard: 1.0

AS desired: [['strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'strength(6)', 'strength(7)', 'strength(8)', 'strength(9)', 'strength(10)', 'strength(11)', 'strength(12)', 'strength(13)', 'strength(14)', 'strength(15)', 'strength(16)', 'strength(17)', 'strength(18)', 'strength(19)', 'strength(20)']]
\AS obtained: [['strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'strength(6)', 'strength(7)', 'strength(8)', 'strength(9)', 'strength(10)', 'strength(11)', 'strength(12)', 'strength(13)', 'strength(14)', 'strength(15)', 'strength(16)', 'strength(17)', 'strength(18)', 'strength(19)', 'strength(20)']]


708
filtering

question: 
Craft an ASP application to fetch all values linked to the "chair" label in the context of the "weight" predicate.

answer from file: 
select(X):-weight(X,"chair").

parsed from model: 
select(X):-weight(X,"chair").

facts: 
weight(1..5, "chair").

generated: 
Craft an ASP application to fetch all values linked to the "chair" label in the context of the "weight" predicate.
Answer: select(X):-weight(X,"chair").
weight(X,"chair"):-weight(X,"description").

unique_rules: 
['select(X):-weight(X,"chair").', 'weight(X,"chair"):-weight(X,"description").']

jaccard: 1.0

AS desired: [['weight(1,"chair")', 'weight(2,"chair")', 'weight(3,"chair")', 'weight(4,"chair")', 'weight(5,"chair")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['weight(1,"chair")', 'weight(2,"chair")', 'weight(3,"chair")', 'weight(4,"chair")', 'weight(5,"chair")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


709
negative_filtering

question: 
Generate an ASP script to gather values linked to the predicate "butterfly" but not to the predicate "chicago" and labeled "weight".

answer from file: 
select(X):-butterfly(X),not chicago(X,"weight").

parsed from model: 
select(X):-butterfly(X),not chicago(X,"weight").

facts: 
butterfly(1..3).chicago(1,"singapore").chicago(2,"cosenza").chicago(3,"desk").

generated: 
Generate an ASP script to gather values linked to the predicate "butterfly" but not to the predicate "chicago" and labeled "weight".
Answer: select(X):-butterfly(X),not chicago(X,"weight").

unique_rules: 
['select(X):-butterfly(X),not chicago(X,"weight").']

jaccard: 1.0

AS desired: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'chicago(1,"singapore")', 'chicago(2,"cosenza")', 'chicago(3,"desk")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'chicago(1,"singapore")', 'chicago(2,"cosenza")', 'chicago(3,"desk")', 'select(1)', 'select(2)', 'select(3)']]


710
numeric_filtering

question: 
Produce an ASP script to retrieve values associated with the predicate "black" with a value different than 73.

answer from file: 
select(X):-black(X,C),C!=73.

parsed from model: 
select(X):-black(X,C),C!=73.

facts: 
black(1..3, 1..100).

generated: 
Produce an ASP script to retrieve values associated with the predicate "black" with a value different than 73.
Answer: select(X):-black(X,C),C!=73.
black(X,C):-black(X,C),C==73.

unique_rules: 
['select(X):-black(X,C),C!=73.', 'black(X,C):-black(X,C),C==73.']

jaccard: 1.0

AS desired: [['black(1,1)', 'black(1,2)', 'black(1,3)', 'black(1,4)', 'black(1,5)', 'black(1,6)', 'black(1,7)', 'black(1,8)', 'black(1,9)', 'black(1,10)', 'black(1,11)', 'black(1,12)', 'black(1,13)', 'black(1,14)', 'black(1,15)', 'black(1,16)', 'black(1,17)', 'black(1,18)', 'black(1,19)', 'black(1,20)', 'black(1,21)', 'black(1,22)', 'black(1,23)', 'black(1,24)', 'black(1,25)', 'black(1,26)', 'black(1,27)', 'black(1,28)', 'black(1,29)', 'black(1,30)', 'black(1,31)', 'black(1,32)', 'black(1,33)', 'black(1,34)', 'black(1,35)', 'black(1,36)', 'black(1,37)', 'black(1,38)', 'black(1,39)', 'black(1,40)', 'black(1,41)', 'black(1,42)', 'black(1,43)', 'black(1,44)', 'black(1,45)', 'black(1,46)', 'black(1,47)', 'black(1,48)', 'black(1,49)', 'black(1,50)', 'black(1,51)', 'black(1,52)', 'black(1,53)', 'black(1,54)', 'black(1,55)', 'black(1,56)', 'black(1,57)', 'black(1,58)', 'black(1,59)', 'black(1,60)', 'black(1,61)', 'black(1,62)', 'black(1,63)', 'black(1,64)', 'black(1,65)', 'black(1,66)', 'black(1,67)', 'black(1,68)', 'black(1,69)', 'black(1,70)', 'black(1,71)', 'black(1,72)', 'black(1,73)', 'black(1,74)', 'black(1,75)', 'black(1,76)', 'black(1,77)', 'black(1,78)', 'black(1,79)', 'black(1,80)', 'black(1,81)', 'black(1,82)', 'black(1,83)', 'black(1,84)', 'black(1,85)', 'black(1,86)', 'black(1,87)', 'black(1,88)', 'black(1,89)', 'black(1,90)', 'black(1,91)', 'black(1,92)', 'black(1,93)', 'black(1,94)', 'black(1,95)', 'black(1,96)', 'black(1,97)', 'black(1,98)', 'black(1,99)', 'black(1,100)', 'black(2,1)', 'black(2,2)', 'black(2,3)', 'black(2,4)', 'black(2,5)', 'black(2,6)', 'black(2,7)', 'black(2,8)', 'black(2,9)', 'black(2,10)', 'black(2,11)', 'black(2,12)', 'black(2,13)', 'black(2,14)', 'black(2,15)', 'black(2,16)', 'black(2,17)', 'black(2,18)', 'black(2,19)', 'black(2,20)', 'black(2,21)', 'black(2,22)', 'black(2,23)', 'black(2,24)', 'black(2,25)', 'black(2,26)', 'black(2,27)', 'black(2,28)', 'black(2,29)', 'black(2,30)', 'black(2,31)', 'black(2,32)', 'black(2,33)', 'black(2,34)', 'black(2,35)', 'black(2,36)', 'black(2,37)', 'black(2,38)', 'black(2,39)', 'black(2,40)', 'black(2,41)', 'black(2,42)', 'black(2,43)', 'black(2,44)', 'black(2,45)', 'black(2,46)', 'black(2,47)', 'black(2,48)', 'black(2,49)', 'black(2,50)', 'black(2,51)', 'black(2,52)', 'black(2,53)', 'black(2,54)', 'black(2,55)', 'black(2,56)', 'black(2,57)', 'black(2,58)', 'black(2,59)', 'black(2,60)', 'black(2,61)', 'black(2,62)', 'black(2,63)', 'black(2,64)', 'black(2,65)', 'black(2,66)', 'black(2,67)', 'black(2,68)', 'black(2,69)', 'black(2,70)', 'black(2,71)', 'black(2,72)', 'black(2,73)', 'black(2,74)', 'black(2,75)', 'black(2,76)', 'black(2,77)', 'black(2,78)', 'black(2,79)', 'black(2,80)', 'black(2,81)', 'black(2,82)', 'black(2,83)', 'black(2,84)', 'black(2,85)', 'black(2,86)', 'black(2,87)', 'black(2,88)', 'black(2,89)', 'black(2,90)', 'black(2,91)', 'black(2,92)', 'black(2,93)', 'black(2,94)', 'black(2,95)', 'black(2,96)', 'black(2,97)', 'black(2,98)', 'black(2,99)', 'black(2,100)', 'black(3,1)', 'black(3,2)', 'black(3,3)', 'black(3,4)', 'black(3,5)', 'black(3,6)', 'black(3,7)', 'black(3,8)', 'black(3,9)', 'black(3,10)', 'black(3,11)', 'black(3,12)', 'black(3,13)', 'black(3,14)', 'black(3,15)', 'black(3,16)', 'black(3,17)', 'black(3,18)', 'black(3,19)', 'black(3,20)', 'black(3,21)', 'black(3,22)', 'black(3,23)', 'black(3,24)', 'black(3,25)', 'black(3,26)', 'black(3,27)', 'black(3,28)', 'black(3,29)', 'black(3,30)', 'black(3,31)', 'black(3,32)', 'black(3,33)', 'black(3,34)', 'black(3,35)', 'black(3,36)', 'black(3,37)', 'black(3,38)', 'black(3,39)', 'black(3,40)', 'black(3,41)', 'black(3,42)', 'black(3,43)', 'black(3,44)', 'black(3,45)', 'black(3,46)', 'black(3,47)', 'black(3,48)', 'black(3,49)', 'black(3,50)', 'black(3,51)', 'black(3,52)', 'black(3,53)', 'black(3,54)', 'black(3,55)', 'black(3,56)', 'black(3,57)', 'black(3,58)', 'black(3,59)', 'black(3,60)', 'black(3,61)', 'black(3,62)', 'black(3,63)', 'black(3,64)', 'black(3,65)', 'black(3,66)', 'black(3,67)', 'black(3,68)', 'black(3,69)', 'black(3,70)', 'black(3,71)', 'black(3,72)', 'black(3,73)', 'black(3,74)', 'black(3,75)', 'black(3,76)', 'black(3,77)', 'black(3,78)', 'black(3,79)', 'black(3,80)', 'black(3,81)', 'black(3,82)', 'black(3,83)', 'black(3,84)', 'black(3,85)', 'black(3,86)', 'black(3,87)', 'black(3,88)', 'black(3,89)', 'black(3,90)', 'black(3,91)', 'black(3,92)', 'black(3,93)', 'black(3,94)', 'black(3,95)', 'black(3,96)', 'black(3,97)', 'black(3,98)', 'black(3,99)', 'black(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['black(1,1)', 'black(1,2)', 'black(1,3)', 'black(1,4)', 'black(1,5)', 'black(1,6)', 'black(1,7)', 'black(1,8)', 'black(1,9)', 'black(1,10)', 'black(1,11)', 'black(1,12)', 'black(1,13)', 'black(1,14)', 'black(1,15)', 'black(1,16)', 'black(1,17)', 'black(1,18)', 'black(1,19)', 'black(1,20)', 'black(1,21)', 'black(1,22)', 'black(1,23)', 'black(1,24)', 'black(1,25)', 'black(1,26)', 'black(1,27)', 'black(1,28)', 'black(1,29)', 'black(1,30)', 'black(1,31)', 'black(1,32)', 'black(1,33)', 'black(1,34)', 'black(1,35)', 'black(1,36)', 'black(1,37)', 'black(1,38)', 'black(1,39)', 'black(1,40)', 'black(1,41)', 'black(1,42)', 'black(1,43)', 'black(1,44)', 'black(1,45)', 'black(1,46)', 'black(1,47)', 'black(1,48)', 'black(1,49)', 'black(1,50)', 'black(1,51)', 'black(1,52)', 'black(1,53)', 'black(1,54)', 'black(1,55)', 'black(1,56)', 'black(1,57)', 'black(1,58)', 'black(1,59)', 'black(1,60)', 'black(1,61)', 'black(1,62)', 'black(1,63)', 'black(1,64)', 'black(1,65)', 'black(1,66)', 'black(1,67)', 'black(1,68)', 'black(1,69)', 'black(1,70)', 'black(1,71)', 'black(1,72)', 'black(1,73)', 'black(1,74)', 'black(1,75)', 'black(1,76)', 'black(1,77)', 'black(1,78)', 'black(1,79)', 'black(1,80)', 'black(1,81)', 'black(1,82)', 'black(1,83)', 'black(1,84)', 'black(1,85)', 'black(1,86)', 'black(1,87)', 'black(1,88)', 'black(1,89)', 'black(1,90)', 'black(1,91)', 'black(1,92)', 'black(1,93)', 'black(1,94)', 'black(1,95)', 'black(1,96)', 'black(1,97)', 'black(1,98)', 'black(1,99)', 'black(1,100)', 'black(2,1)', 'black(2,2)', 'black(2,3)', 'black(2,4)', 'black(2,5)', 'black(2,6)', 'black(2,7)', 'black(2,8)', 'black(2,9)', 'black(2,10)', 'black(2,11)', 'black(2,12)', 'black(2,13)', 'black(2,14)', 'black(2,15)', 'black(2,16)', 'black(2,17)', 'black(2,18)', 'black(2,19)', 'black(2,20)', 'black(2,21)', 'black(2,22)', 'black(2,23)', 'black(2,24)', 'black(2,25)', 'black(2,26)', 'black(2,27)', 'black(2,28)', 'black(2,29)', 'black(2,30)', 'black(2,31)', 'black(2,32)', 'black(2,33)', 'black(2,34)', 'black(2,35)', 'black(2,36)', 'black(2,37)', 'black(2,38)', 'black(2,39)', 'black(2,40)', 'black(2,41)', 'black(2,42)', 'black(2,43)', 'black(2,44)', 'black(2,45)', 'black(2,46)', 'black(2,47)', 'black(2,48)', 'black(2,49)', 'black(2,50)', 'black(2,51)', 'black(2,52)', 'black(2,53)', 'black(2,54)', 'black(2,55)', 'black(2,56)', 'black(2,57)', 'black(2,58)', 'black(2,59)', 'black(2,60)', 'black(2,61)', 'black(2,62)', 'black(2,63)', 'black(2,64)', 'black(2,65)', 'black(2,66)', 'black(2,67)', 'black(2,68)', 'black(2,69)', 'black(2,70)', 'black(2,71)', 'black(2,72)', 'black(2,73)', 'black(2,74)', 'black(2,75)', 'black(2,76)', 'black(2,77)', 'black(2,78)', 'black(2,79)', 'black(2,80)', 'black(2,81)', 'black(2,82)', 'black(2,83)', 'black(2,84)', 'black(2,85)', 'black(2,86)', 'black(2,87)', 'black(2,88)', 'black(2,89)', 'black(2,90)', 'black(2,91)', 'black(2,92)', 'black(2,93)', 'black(2,94)', 'black(2,95)', 'black(2,96)', 'black(2,97)', 'black(2,98)', 'black(2,99)', 'black(2,100)', 'black(3,1)', 'black(3,2)', 'black(3,3)', 'black(3,4)', 'black(3,5)', 'black(3,6)', 'black(3,7)', 'black(3,8)', 'black(3,9)', 'black(3,10)', 'black(3,11)', 'black(3,12)', 'black(3,13)', 'black(3,14)', 'black(3,15)', 'black(3,16)', 'black(3,17)', 'black(3,18)', 'black(3,19)', 'black(3,20)', 'black(3,21)', 'black(3,22)', 'black(3,23)', 'black(3,24)', 'black(3,25)', 'black(3,26)', 'black(3,27)', 'black(3,28)', 'black(3,29)', 'black(3,30)', 'black(3,31)', 'black(3,32)', 'black(3,33)', 'black(3,34)', 'black(3,35)', 'black(3,36)', 'black(3,37)', 'black(3,38)', 'black(3,39)', 'black(3,40)', 'black(3,41)', 'black(3,42)', 'black(3,43)', 'black(3,44)', 'black(3,45)', 'black(3,46)', 'black(3,47)', 'black(3,48)', 'black(3,49)', 'black(3,50)', 'black(3,51)', 'black(3,52)', 'black(3,53)', 'black(3,54)', 'black(3,55)', 'black(3,56)', 'black(3,57)', 'black(3,58)', 'black(3,59)', 'black(3,60)', 'black(3,61)', 'black(3,62)', 'black(3,63)', 'black(3,64)', 'black(3,65)', 'black(3,66)', 'black(3,67)', 'black(3,68)', 'black(3,69)', 'black(3,70)', 'black(3,71)', 'black(3,72)', 'black(3,73)', 'black(3,74)', 'black(3,75)', 'black(3,76)', 'black(3,77)', 'black(3,78)', 'black(3,79)', 'black(3,80)', 'black(3,81)', 'black(3,82)', 'black(3,83)', 'black(3,84)', 'black(3,85)', 'black(3,86)', 'black(3,87)', 'black(3,88)', 'black(3,89)', 'black(3,90)', 'black(3,91)', 'black(3,92)', 'black(3,93)', 'black(3,94)', 'black(3,95)', 'black(3,96)', 'black(3,97)', 'black(3,98)', 'black(3,99)', 'black(3,100)', 'select(1)', 'select(2)', 'select(3)']]


711
assignment

question: 
Create an ASP script that maps a single label from "chicago","black","strength","cosenza","chair","laptop","singapore" to a collection of elements specified by the predicate "pink".

answer from file: 
assign(X,"chicago")|assign(X,"black")|assign(X,"strength")|assign(X,"cosenza")|assign(X,"chair")|assign(X,"laptop")|assign(X,"singapore"):-pink(X).

parsed from model: 
assign(X,"chicago")|assign(X,"black")|assign(X,"strength")|assign(X,"cosenza")|assign(X,"chair")|assign(X,"laptop")|assign(X,"singapore"):-pink(X).

facts: 
pink(1..5).

generated: 
Create an ASP script that maps a single label from "chicago","black","strength","cosenza","chair","laptop","singapore" to a collection of elements specified by the predicate "pink".
Answer: assign(X,"chicago")|assign(X,"black")|assign(X,"strength")|assign(X,"cosenza")|assign(X,"chair")|assign(X,"laptop")|assign(X,"singapore"):-pink(X).
assign(X,"city")|assign(X,"author")|assign(X,"moto","height","description","city","author","moto","height","description","city","author","moto","height","description","city","author","moto","height","description","city","author","moto","height","description","city","author","moto","height","description","city","author","moto","height","description","city","author","moto","height

unique_rules: 
['assign(X,"chicago")|assign(X,"black")|assign(X,"strength")|assign(X,"cosenza")|assign(X,"chair")|assign(X,"laptop")|assign(X,"singapore"):-pink(X).']

jaccard: 1.0

AS desired: [['pink(1)', 'pink(2)', 'pink(3)', 'pink(4)', 'pink(5)', 'assign(1,"singapore")', 'assign(2,"singapore")', 'assign(3,"singapore")', 'assign(4,"singapore")', 'assign(5,"singapore")']]
\AS obtained: [['pink(1)', 'pink(2)', 'pink(3)', 'pink(4)', 'pink(5)', 'assign(1,"singapore")', 'assign(2,"singapore")', 'assign(3,"singapore")', 'assign(4,"singapore")', 'assign(5,"singapore")']]


712
constraint

question: 
Generate an ASP code to exclude linking the "strength" predicate with value 3 to the label "cairo".

answer from file: 
:-assign(3,cairo).

parsed from model: 
:-assign(3,cairo).

facts: 
strength(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-strength(X).

generated: 
Generate an ASP code to exclude linking the "strength" predicate with value 3 to the label "cairo".
Answer: :-assign(3,cairo).
Explanation: The predicate "street" includes a "city" label for values 1,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84

unique_rules: 
[':-assign(3,cairo).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'strength(6)', 'strength(7)', 'strength(8)', 'strength(9)', 'strength(10)', 'strength(11)', 'strength(12)', 'strength(13)', 'strength(14)', 'strength(15)', 'strength(16)', 'strength(17)', 'strength(18)', 'strength(19)', 'strength(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'strength(6)', 'strength(7)', 'strength(8)', 'strength(9)', 'strength(10)', 'strength(11)', 'strength(12)', 'strength(13)', 'strength(14)', 'strength(15)', 'strength(16)', 'strength(17)', 'strength(18)', 'strength(19)', 'strength(20)']]


713
combination

question: 
Design an ASP solution to compute all possible pairings of elements from two sets defined by the predicates "chair" and "delhi".

answer from file: 
combination(X,Y):-chair(X),delhi(Y).

parsed from model: 
combination(X,Y):-chair(X),delhi(Y).

facts: 
chair(1..4).delhi(1..5).

generated: 
Design an ASP solution to compute all possible pairings of elements from two sets defined by the predicates "chair" and "delhi".
Answer: combination(X,Y):-chair(X),delhi(Y).
combination(X,Y):-chair(X),not delhi(Y).
combination(X,Y):-delhi(Y),not chair(X).
combination(X,Y):-not chair(X),delhi(Y).

unique_rules: 
['combination(X,Y):-chair(X),delhi(Y).', 'combination(X,Y):-chair(X),not delhi(Y).', 'combination(X,Y):-delhi(Y),not chair(X).', 'combination(X,Y):-not chair(X),delhi(Y).']

jaccard: 1.0

AS desired: [['delhi(1)', 'delhi(2)', 'delhi(3)', 'delhi(4)', 'delhi(5)', 'chair(1)', 'chair(2)', 'chair(3)', 'chair(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['delhi(1)', 'delhi(2)', 'delhi(3)', 'delhi(4)', 'delhi(5)', 'chair(1)', 'chair(2)', 'chair(3)', 'chair(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


714
join

question: 
Write an ASP program for the following problem. Consider predicate "pink" having fields "ID","chairID","hair","quality","lake", and the predicate "chair" having fields "ID","lake","owner". Define a predicate "pink_chair" that associates to each "pink" the "lake" of "chair".

answer from file: 
pink_chair(X,Z):-pink(X,Y,_,_,_),chair(Y,Z,_).

parsed from model: 
pink_chair(X,Z):-pink(X,Y,_,_,Z),chair(Y,Z,_).

facts: 
pink("ID","chairID","hair","quality","lake").chair("ID","lake","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "pink" having fields "ID","chairID","hair","quality","lake", and the predicate "chair" having fields "ID","lake","owner". Define a predicate "pink_chair" that associates to each "pink" the "lake" of "chair".
Answer: pink_chair(X,Z):-pink(X,Y,_,_,Z),chair(Y,Z,_).
pink_chair(X,Z):-pink(X,Y,_,_,Z),not chair(Y,Z,_).
pink_chair(X,Z):-not pink(X,Y,_,_,Z),chair(Y,Z,_).

unique_rules: 
['pink_chair(X,Z):-pink(X,Y,_,_,Z),chair(Y,Z,_).', 'pink_chair(X,Z):-pink(X,Y,_,_,Z),not chair(Y,Z,_).', 'pink_chair(X,Z):-not pink(X,Y,_,_,Z),chair(Y,Z,_).']

jaccard: 1.0

AS desired: [['pink("ID","chairID","hair","quality","lake")', 'chair("ID","lake","owner")']]
\AS obtained: [['pink("ID","chairID","hair","quality","lake")', 'chair("ID","lake","owner")']]


715
closure

question: 
Create an ASP code snippet to determine the transitive closure of the "storm" predicate, resulting in the predicate "family".

answer from file: 
family(X,Y):-storm(X,Y).
family(X,Y):-storm(X,Z),family(Z,Y).

parsed from model: 
family(X,Y):-storm(X,Y).
family(X,Y):-storm(X,Z),family(Z,Y).

facts: 
storm(1..3, 1..4).

generated: 
Create an ASP code snippet to determine the transitive closure of the "storm" predicate, resulting in the predicate "family".
Answer: family(X,Y):-storm(X,Y).
family(X,Y):-storm(X,Z),family(Z,Y).
family(X,Y):-storm(X,Z),not family(Z,Y).
family(X,Y):-not storm(X,Y).
family(X,Y):-X,Y.
family(X,Y):-not X,not Y.

unique_rules: 
['family(X,Y):-storm(X,Y).', 'family(X,Y):-storm(X,Z),family(Z,Y).', 'family(X,Y):-storm(X,Z),not family(Z,Y).', 'family(X,Y):-not storm(X,Y).', 'family(X,Y):-X,Y.', 'family(X,Y):-not X,not Y.']

jaccard: 1.0

AS desired: [['storm(1,1)', 'storm(1,2)', 'storm(1,3)', 'storm(1,4)', 'storm(2,1)', 'storm(2,2)', 'storm(2,3)', 'storm(2,4)', 'storm(3,1)', 'storm(3,2)', 'storm(3,3)', 'storm(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]
\AS obtained: [['storm(1,1)', 'storm(1,2)', 'storm(1,3)', 'storm(1,4)', 'storm(2,1)', 'storm(2,2)', 'storm(2,3)', 'storm(2,4)', 'storm(3,1)', 'storm(3,2)', 'storm(3,3)', 'storm(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]


716
preference

question: 
Compose an ASP script to ensure the "butterfly" predicate with value "15" does not link to "laptop". If this connection happens, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(15,"laptop").[1@1]

parsed from model: 
:~assign(15,"laptop").[1@1]

facts: 
butterfly(1..20).

generated: 
Compose an ASP script to ensure the "butterfly" predicate with value "15" does not link to "laptop". If this connection happens, it incurs a cost of "1" at level "1".
Answer: :~assign(15,"laptop").[1@1]
This script uses the "assign" predicate to link the " arrivant" label to the "city" relation.
The "city" relation is defined as the transitive closure of the "street" relation.
The " arrivant" label is defined as the transitive closure of the "moto" label.
The "moto" label is defined as the transitive closure of the "author" label.
The cost of the "author" label is "1" at level "1".
The "city" label is defined as the transitive closure of the "moto" label.

unique_rules: 
[':~assign(15,"laptop").[1@1]']

jaccard: 1.0

AS desired: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)', 'butterfly(6)', 'butterfly(7)', 'butterfly(8)', 'butterfly(9)', 'butterfly(10)', 'butterfly(11)', 'butterfly(12)', 'butterfly(13)', 'butterfly(14)', 'butterfly(15)', 'butterfly(16)', 'butterfly(17)', 'butterfly(18)', 'butterfly(19)', 'butterfly(20)']]
\AS obtained: [['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)', 'butterfly(6)', 'butterfly(7)', 'butterfly(8)', 'butterfly(9)', 'butterfly(10)', 'butterfly(11)', 'butterfly(12)', 'butterfly(13)', 'butterfly(14)', 'butterfly(15)', 'butterfly(16)', 'butterfly(17)', 'butterfly(18)', 'butterfly(19)', 'butterfly(20)']]


717
filtering

question: 
Create an ASP code to retrieve values associated with the label "owner" within the "moscow" predicate.

answer from file: 
select(X):-moscow(X,"owner").

parsed from model: 
select(X):-moscow(X,"owner").

facts: 
moscow(1..5, "owner").

generated: 
Create an ASP code to retrieve values associated with the label "owner" within the "moscow" predicate.
Answer: select(X):-moscow(X,"owner").
moscow(X,Z):- felicità(X,Z).
 felicità(X,Z):-city(X,Z).

unique_rules: 
['select(X):-moscow(X,"owner").', 'moscow(X,Z):- felicità(X,Z).', 'felicità(X,Z):-city(X,Z).']

jaccard: 1.0

AS desired: [['moscow(1,"owner")', 'moscow(2,"owner")', 'moscow(3,"owner")', 'moscow(4,"owner")', 'moscow(5,"owner")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['moscow(1,"owner")', 'moscow(2,"owner")', 'moscow(3,"owner")', 'moscow(4,"owner")', 'moscow(5,"owner")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


718
negative_filtering

question: 
Generate an ASP code snippet to retrieve values linked to the predicate "chicago" but not to the predicate "storm" and labeled "storm".

answer from file: 
select(X):-chicago(X),not storm(X,"storm").

parsed from model: 
select(X):-chicago(X),not storm(X,"storm").

facts: 
chicago(1..3).storm(1,"mumbai").storm(2,"storm").storm(3,"white").

generated: 
Generate an ASP code snippet to retrieve values linked to the predicate "chicago" but not to the predicate "storm" and labeled "storm".
Answer: select(X):-chicago(X),not storm(X,"storm").
Explanation: The predicate "chicago" links values to the predicate "author" with a value greater than 17.
The predicate "storm" links values to the predicate "author" with a value greater than 17.
The predicate "author" links values to the predicate "city" with a value greater than 17.
The predicate "city" links values to the predicate "author" with a value greater than 17.
The predicate "author" links values to the predicate "rome" with a value greater than 17.
The predicate "rome" links values to the predicate "author" with

unique_rules: 
['select(X):-chicago(X),not storm(X,"storm").']

jaccard: 1.0

AS desired: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'storm(1,"mumbai")', 'storm(2,"storm")', 'storm(3,"white")', 'select(1)', 'select(3)']]
\AS obtained: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'storm(1,"mumbai")', 'storm(2,"storm")', 'storm(3,"white")', 'select(1)', 'select(3)']]


719
numeric_filtering

question: 
Compose an ASP program to fetch values associated with the predicate "moscow" with a value different than 48.

answer from file: 
select(X):-moscow(X,C),C!=48.

parsed from model: 
select(X):-moscow(X,C),C!=48.

facts: 
moscow(1..3, 1..100).

generated: 
Compose an ASP program to fetch values associated with the predicate "moscow" with a value different than 48.
Answer: select(X):-moscow(X,C),C!=48.
moscow(X,C):-moscow(X,C),C==48.

unique_rules: 
['select(X):-moscow(X,C),C!=48.', 'moscow(X,C):-moscow(X,C),C==48.']

jaccard: 1.0

AS desired: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(1,5)', 'moscow(1,6)', 'moscow(1,7)', 'moscow(1,8)', 'moscow(1,9)', 'moscow(1,10)', 'moscow(1,11)', 'moscow(1,12)', 'moscow(1,13)', 'moscow(1,14)', 'moscow(1,15)', 'moscow(1,16)', 'moscow(1,17)', 'moscow(1,18)', 'moscow(1,19)', 'moscow(1,20)', 'moscow(1,21)', 'moscow(1,22)', 'moscow(1,23)', 'moscow(1,24)', 'moscow(1,25)', 'moscow(1,26)', 'moscow(1,27)', 'moscow(1,28)', 'moscow(1,29)', 'moscow(1,30)', 'moscow(1,31)', 'moscow(1,32)', 'moscow(1,33)', 'moscow(1,34)', 'moscow(1,35)', 'moscow(1,36)', 'moscow(1,37)', 'moscow(1,38)', 'moscow(1,39)', 'moscow(1,40)', 'moscow(1,41)', 'moscow(1,42)', 'moscow(1,43)', 'moscow(1,44)', 'moscow(1,45)', 'moscow(1,46)', 'moscow(1,47)', 'moscow(1,48)', 'moscow(1,49)', 'moscow(1,50)', 'moscow(1,51)', 'moscow(1,52)', 'moscow(1,53)', 'moscow(1,54)', 'moscow(1,55)', 'moscow(1,56)', 'moscow(1,57)', 'moscow(1,58)', 'moscow(1,59)', 'moscow(1,60)', 'moscow(1,61)', 'moscow(1,62)', 'moscow(1,63)', 'moscow(1,64)', 'moscow(1,65)', 'moscow(1,66)', 'moscow(1,67)', 'moscow(1,68)', 'moscow(1,69)', 'moscow(1,70)', 'moscow(1,71)', 'moscow(1,72)', 'moscow(1,73)', 'moscow(1,74)', 'moscow(1,75)', 'moscow(1,76)', 'moscow(1,77)', 'moscow(1,78)', 'moscow(1,79)', 'moscow(1,80)', 'moscow(1,81)', 'moscow(1,82)', 'moscow(1,83)', 'moscow(1,84)', 'moscow(1,85)', 'moscow(1,86)', 'moscow(1,87)', 'moscow(1,88)', 'moscow(1,89)', 'moscow(1,90)', 'moscow(1,91)', 'moscow(1,92)', 'moscow(1,93)', 'moscow(1,94)', 'moscow(1,95)', 'moscow(1,96)', 'moscow(1,97)', 'moscow(1,98)', 'moscow(1,99)', 'moscow(1,100)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(2,5)', 'moscow(2,6)', 'moscow(2,7)', 'moscow(2,8)', 'moscow(2,9)', 'moscow(2,10)', 'moscow(2,11)', 'moscow(2,12)', 'moscow(2,13)', 'moscow(2,14)', 'moscow(2,15)', 'moscow(2,16)', 'moscow(2,17)', 'moscow(2,18)', 'moscow(2,19)', 'moscow(2,20)', 'moscow(2,21)', 'moscow(2,22)', 'moscow(2,23)', 'moscow(2,24)', 'moscow(2,25)', 'moscow(2,26)', 'moscow(2,27)', 'moscow(2,28)', 'moscow(2,29)', 'moscow(2,30)', 'moscow(2,31)', 'moscow(2,32)', 'moscow(2,33)', 'moscow(2,34)', 'moscow(2,35)', 'moscow(2,36)', 'moscow(2,37)', 'moscow(2,38)', 'moscow(2,39)', 'moscow(2,40)', 'moscow(2,41)', 'moscow(2,42)', 'moscow(2,43)', 'moscow(2,44)', 'moscow(2,45)', 'moscow(2,46)', 'moscow(2,47)', 'moscow(2,48)', 'moscow(2,49)', 'moscow(2,50)', 'moscow(2,51)', 'moscow(2,52)', 'moscow(2,53)', 'moscow(2,54)', 'moscow(2,55)', 'moscow(2,56)', 'moscow(2,57)', 'moscow(2,58)', 'moscow(2,59)', 'moscow(2,60)', 'moscow(2,61)', 'moscow(2,62)', 'moscow(2,63)', 'moscow(2,64)', 'moscow(2,65)', 'moscow(2,66)', 'moscow(2,67)', 'moscow(2,68)', 'moscow(2,69)', 'moscow(2,70)', 'moscow(2,71)', 'moscow(2,72)', 'moscow(2,73)', 'moscow(2,74)', 'moscow(2,75)', 'moscow(2,76)', 'moscow(2,77)', 'moscow(2,78)', 'moscow(2,79)', 'moscow(2,80)', 'moscow(2,81)', 'moscow(2,82)', 'moscow(2,83)', 'moscow(2,84)', 'moscow(2,85)', 'moscow(2,86)', 'moscow(2,87)', 'moscow(2,88)', 'moscow(2,89)', 'moscow(2,90)', 'moscow(2,91)', 'moscow(2,92)', 'moscow(2,93)', 'moscow(2,94)', 'moscow(2,95)', 'moscow(2,96)', 'moscow(2,97)', 'moscow(2,98)', 'moscow(2,99)', 'moscow(2,100)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)', 'moscow(3,5)', 'moscow(3,6)', 'moscow(3,7)', 'moscow(3,8)', 'moscow(3,9)', 'moscow(3,10)', 'moscow(3,11)', 'moscow(3,12)', 'moscow(3,13)', 'moscow(3,14)', 'moscow(3,15)', 'moscow(3,16)', 'moscow(3,17)', 'moscow(3,18)', 'moscow(3,19)', 'moscow(3,20)', 'moscow(3,21)', 'moscow(3,22)', 'moscow(3,23)', 'moscow(3,24)', 'moscow(3,25)', 'moscow(3,26)', 'moscow(3,27)', 'moscow(3,28)', 'moscow(3,29)', 'moscow(3,30)', 'moscow(3,31)', 'moscow(3,32)', 'moscow(3,33)', 'moscow(3,34)', 'moscow(3,35)', 'moscow(3,36)', 'moscow(3,37)', 'moscow(3,38)', 'moscow(3,39)', 'moscow(3,40)', 'moscow(3,41)', 'moscow(3,42)', 'moscow(3,43)', 'moscow(3,44)', 'moscow(3,45)', 'moscow(3,46)', 'moscow(3,47)', 'moscow(3,48)', 'moscow(3,49)', 'moscow(3,50)', 'moscow(3,51)', 'moscow(3,52)', 'moscow(3,53)', 'moscow(3,54)', 'moscow(3,55)', 'moscow(3,56)', 'moscow(3,57)', 'moscow(3,58)', 'moscow(3,59)', 'moscow(3,60)', 'moscow(3,61)', 'moscow(3,62)', 'moscow(3,63)', 'moscow(3,64)', 'moscow(3,65)', 'moscow(3,66)', 'moscow(3,67)', 'moscow(3,68)', 'moscow(3,69)', 'moscow(3,70)', 'moscow(3,71)', 'moscow(3,72)', 'moscow(3,73)', 'moscow(3,74)', 'moscow(3,75)', 'moscow(3,76)', 'moscow(3,77)', 'moscow(3,78)', 'moscow(3,79)', 'moscow(3,80)', 'moscow(3,81)', 'moscow(3,82)', 'moscow(3,83)', 'moscow(3,84)', 'moscow(3,85)', 'moscow(3,86)', 'moscow(3,87)', 'moscow(3,88)', 'moscow(3,89)', 'moscow(3,90)', 'moscow(3,91)', 'moscow(3,92)', 'moscow(3,93)', 'moscow(3,94)', 'moscow(3,95)', 'moscow(3,96)', 'moscow(3,97)', 'moscow(3,98)', 'moscow(3,99)', 'moscow(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['moscow(1,1)', 'moscow(1,2)', 'moscow(1,3)', 'moscow(1,4)', 'moscow(1,5)', 'moscow(1,6)', 'moscow(1,7)', 'moscow(1,8)', 'moscow(1,9)', 'moscow(1,10)', 'moscow(1,11)', 'moscow(1,12)', 'moscow(1,13)', 'moscow(1,14)', 'moscow(1,15)', 'moscow(1,16)', 'moscow(1,17)', 'moscow(1,18)', 'moscow(1,19)', 'moscow(1,20)', 'moscow(1,21)', 'moscow(1,22)', 'moscow(1,23)', 'moscow(1,24)', 'moscow(1,25)', 'moscow(1,26)', 'moscow(1,27)', 'moscow(1,28)', 'moscow(1,29)', 'moscow(1,30)', 'moscow(1,31)', 'moscow(1,32)', 'moscow(1,33)', 'moscow(1,34)', 'moscow(1,35)', 'moscow(1,36)', 'moscow(1,37)', 'moscow(1,38)', 'moscow(1,39)', 'moscow(1,40)', 'moscow(1,41)', 'moscow(1,42)', 'moscow(1,43)', 'moscow(1,44)', 'moscow(1,45)', 'moscow(1,46)', 'moscow(1,47)', 'moscow(1,48)', 'moscow(1,49)', 'moscow(1,50)', 'moscow(1,51)', 'moscow(1,52)', 'moscow(1,53)', 'moscow(1,54)', 'moscow(1,55)', 'moscow(1,56)', 'moscow(1,57)', 'moscow(1,58)', 'moscow(1,59)', 'moscow(1,60)', 'moscow(1,61)', 'moscow(1,62)', 'moscow(1,63)', 'moscow(1,64)', 'moscow(1,65)', 'moscow(1,66)', 'moscow(1,67)', 'moscow(1,68)', 'moscow(1,69)', 'moscow(1,70)', 'moscow(1,71)', 'moscow(1,72)', 'moscow(1,73)', 'moscow(1,74)', 'moscow(1,75)', 'moscow(1,76)', 'moscow(1,77)', 'moscow(1,78)', 'moscow(1,79)', 'moscow(1,80)', 'moscow(1,81)', 'moscow(1,82)', 'moscow(1,83)', 'moscow(1,84)', 'moscow(1,85)', 'moscow(1,86)', 'moscow(1,87)', 'moscow(1,88)', 'moscow(1,89)', 'moscow(1,90)', 'moscow(1,91)', 'moscow(1,92)', 'moscow(1,93)', 'moscow(1,94)', 'moscow(1,95)', 'moscow(1,96)', 'moscow(1,97)', 'moscow(1,98)', 'moscow(1,99)', 'moscow(1,100)', 'moscow(2,1)', 'moscow(2,2)', 'moscow(2,3)', 'moscow(2,4)', 'moscow(2,5)', 'moscow(2,6)', 'moscow(2,7)', 'moscow(2,8)', 'moscow(2,9)', 'moscow(2,10)', 'moscow(2,11)', 'moscow(2,12)', 'moscow(2,13)', 'moscow(2,14)', 'moscow(2,15)', 'moscow(2,16)', 'moscow(2,17)', 'moscow(2,18)', 'moscow(2,19)', 'moscow(2,20)', 'moscow(2,21)', 'moscow(2,22)', 'moscow(2,23)', 'moscow(2,24)', 'moscow(2,25)', 'moscow(2,26)', 'moscow(2,27)', 'moscow(2,28)', 'moscow(2,29)', 'moscow(2,30)', 'moscow(2,31)', 'moscow(2,32)', 'moscow(2,33)', 'moscow(2,34)', 'moscow(2,35)', 'moscow(2,36)', 'moscow(2,37)', 'moscow(2,38)', 'moscow(2,39)', 'moscow(2,40)', 'moscow(2,41)', 'moscow(2,42)', 'moscow(2,43)', 'moscow(2,44)', 'moscow(2,45)', 'moscow(2,46)', 'moscow(2,47)', 'moscow(2,48)', 'moscow(2,49)', 'moscow(2,50)', 'moscow(2,51)', 'moscow(2,52)', 'moscow(2,53)', 'moscow(2,54)', 'moscow(2,55)', 'moscow(2,56)', 'moscow(2,57)', 'moscow(2,58)', 'moscow(2,59)', 'moscow(2,60)', 'moscow(2,61)', 'moscow(2,62)', 'moscow(2,63)', 'moscow(2,64)', 'moscow(2,65)', 'moscow(2,66)', 'moscow(2,67)', 'moscow(2,68)', 'moscow(2,69)', 'moscow(2,70)', 'moscow(2,71)', 'moscow(2,72)', 'moscow(2,73)', 'moscow(2,74)', 'moscow(2,75)', 'moscow(2,76)', 'moscow(2,77)', 'moscow(2,78)', 'moscow(2,79)', 'moscow(2,80)', 'moscow(2,81)', 'moscow(2,82)', 'moscow(2,83)', 'moscow(2,84)', 'moscow(2,85)', 'moscow(2,86)', 'moscow(2,87)', 'moscow(2,88)', 'moscow(2,89)', 'moscow(2,90)', 'moscow(2,91)', 'moscow(2,92)', 'moscow(2,93)', 'moscow(2,94)', 'moscow(2,95)', 'moscow(2,96)', 'moscow(2,97)', 'moscow(2,98)', 'moscow(2,99)', 'moscow(2,100)', 'moscow(3,1)', 'moscow(3,2)', 'moscow(3,3)', 'moscow(3,4)', 'moscow(3,5)', 'moscow(3,6)', 'moscow(3,7)', 'moscow(3,8)', 'moscow(3,9)', 'moscow(3,10)', 'moscow(3,11)', 'moscow(3,12)', 'moscow(3,13)', 'moscow(3,14)', 'moscow(3,15)', 'moscow(3,16)', 'moscow(3,17)', 'moscow(3,18)', 'moscow(3,19)', 'moscow(3,20)', 'moscow(3,21)', 'moscow(3,22)', 'moscow(3,23)', 'moscow(3,24)', 'moscow(3,25)', 'moscow(3,26)', 'moscow(3,27)', 'moscow(3,28)', 'moscow(3,29)', 'moscow(3,30)', 'moscow(3,31)', 'moscow(3,32)', 'moscow(3,33)', 'moscow(3,34)', 'moscow(3,35)', 'moscow(3,36)', 'moscow(3,37)', 'moscow(3,38)', 'moscow(3,39)', 'moscow(3,40)', 'moscow(3,41)', 'moscow(3,42)', 'moscow(3,43)', 'moscow(3,44)', 'moscow(3,45)', 'moscow(3,46)', 'moscow(3,47)', 'moscow(3,48)', 'moscow(3,49)', 'moscow(3,50)', 'moscow(3,51)', 'moscow(3,52)', 'moscow(3,53)', 'moscow(3,54)', 'moscow(3,55)', 'moscow(3,56)', 'moscow(3,57)', 'moscow(3,58)', 'moscow(3,59)', 'moscow(3,60)', 'moscow(3,61)', 'moscow(3,62)', 'moscow(3,63)', 'moscow(3,64)', 'moscow(3,65)', 'moscow(3,66)', 'moscow(3,67)', 'moscow(3,68)', 'moscow(3,69)', 'moscow(3,70)', 'moscow(3,71)', 'moscow(3,72)', 'moscow(3,73)', 'moscow(3,74)', 'moscow(3,75)', 'moscow(3,76)', 'moscow(3,77)', 'moscow(3,78)', 'moscow(3,79)', 'moscow(3,80)', 'moscow(3,81)', 'moscow(3,82)', 'moscow(3,83)', 'moscow(3,84)', 'moscow(3,85)', 'moscow(3,86)', 'moscow(3,87)', 'moscow(3,88)', 'moscow(3,89)', 'moscow(3,90)', 'moscow(3,91)', 'moscow(3,92)', 'moscow(3,93)', 'moscow(3,94)', 'moscow(3,95)', 'moscow(3,96)', 'moscow(3,97)', 'moscow(3,98)', 'moscow(3,99)', 'moscow(3,100)', 'select(1)', 'select(2)', 'select(3)']]


720
assignment

question: 
Draft an ASP code that connects a single label from the set "weight","cloud","desk","cairo","quality","barcelona","hair","mumbai","surname" to elements specified by the predicate "surname".

answer from file: 
assign(X,"weight")|assign(X,"cloud")|assign(X,"desk")|assign(X,"cairo")|assign(X,"quality")|assign(X,"barcelona")|assign(X,"hair")|assign(X,"mumbai")|assign(X,"surname"):-surname(X).

parsed from model: 
assign(X,"weight")|assign(X,"cloud")|assign(X,"desk")|assign(X,"cairo")|assign(X,"quality")|assign(X,"barcelona")|assign(X,"hair")|assign(X,"mumbai")|assign(X,"surname"):-surname(X).

facts: 
surname(1..5).

generated: 
Draft an ASP code that connects a single label from the set "weight","cloud","desk","cairo","quality","barcelona","hair","mumbai","surname" to elements specified by the predicate "surname".
Answer: assign(X,"weight")|assign(X,"cloud")|assign(X,"desk")|assign(X,"cairo")|assign(X,"quality")|assign(X,"barcelona")|assign(X,"hair")|assign(X,"mumbai")|assign(X,"surname"):-surname(X).
assign(X,"city")|assign(X,"author")|assign(X,"description","city"):-surname(X).
```

unique_rules: 
['assign(X,"weight")|assign(X,"cloud")|assign(X,"desk")|assign(X,"cairo")|assign(X,"quality")|assign(X,"barcelona")|assign(X,"hair")|assign(X,"mumbai")|assign(X,"surname"):-surname(X).', 'assign(X,"city")|assign(X,"author")|assign(X,"description","city"):-surname(X).']

jaccard: 1.0

AS desired: [['surname(1)', 'surname(2)', 'surname(3)', 'surname(4)', 'surname(5)', 'assign(1,"surname")', 'assign(2,"surname")', 'assign(3,"surname")', 'assign(4,"surname")', 'assign(5,"surname")']]
\AS obtained: [['surname(1)', 'surname(2)', 'surname(3)', 'surname(4)', 'surname(5)', 'assign(1,"surname")', 'assign(2,"surname")', 'assign(3,"surname")', 'assign(4,"surname")', 'assign(5,"surname")']]


721
constraint

question: 
Develop an ASP application that avoids the predicate "laptop" with a value of 5 being linked to the label "lightblue".

answer from file: 
:-assign(5,lightblue).

parsed from model: 
:-assign(5,lightblue).

facts: 
laptop(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-laptop(X).

generated: 
Develop an ASP application that avoids the predicate "laptop" with a value of 5 being linked to the label "lightblue".
Answer: :-assign(5,lightblue).
Explanation: The predicate "lightblue" includes values linked to the label "lightblue", and the predicate "laptop" contains values linked to the label "lightblue". The predicate "assign" avoids linking the value 5 to the label "lightblue".

unique_rules: 
[':-assign(5,lightblue).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'laptop(1)', 'laptop(2)', 'laptop(3)', 'laptop(4)', 'laptop(5)', 'laptop(6)', 'laptop(7)', 'laptop(8)', 'laptop(9)', 'laptop(10)', 'laptop(11)', 'laptop(12)', 'laptop(13)', 'laptop(14)', 'laptop(15)', 'laptop(16)', 'laptop(17)', 'laptop(18)', 'laptop(19)', 'laptop(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'laptop(1)', 'laptop(2)', 'laptop(3)', 'laptop(4)', 'laptop(5)', 'laptop(6)', 'laptop(7)', 'laptop(8)', 'laptop(9)', 'laptop(10)', 'laptop(11)', 'laptop(12)', 'laptop(13)', 'laptop(14)', 'laptop(15)', 'laptop(16)', 'laptop(17)', 'laptop(18)', 'laptop(19)', 'laptop(20)']]


722
combination

question: 
Generate an ASP code to compute the cross-product of elements in the sets defined by "storm" and "chicago".

answer from file: 
combination(X,Y):-storm(X),chicago(Y).

parsed from model: 
cross_product(X,Y):-storm(X),chicago(Y).

facts: 
storm(1..4).chicago(1..5).

generated: 
Generate an ASP code to compute the cross-product of elements in the sets defined by "storm" and "chicago".
Answer: cross_product(X,Y):-storm(X),chicago(Y).
cross_product(X,Y):-storm(X),not chicago(Y).
cross_product(X,Y):-not storm(X),chicago(Y).

unique_rules: 
['cross_product(X,Y):-storm(X),chicago(Y).', 'cross_product(X,Y):-storm(X),not chicago(Y).', 'cross_product(X,Y):-not storm(X),chicago(Y).']

jaccard: 0.0

AS desired: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'chicago(5)', 'storm(1)', 'storm(2)', 'storm(3)', 'storm(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'chicago(5)', 'storm(1)', 'storm(2)', 'storm(3)', 'storm(4)', 'cross_product(1,1)', 'cross_product(1,2)', 'cross_product(1,3)', 'cross_product(1,4)', 'cross_product(1,5)', 'cross_product(2,1)', 'cross_product(2,2)', 'cross_product(2,3)', 'cross_product(2,4)', 'cross_product(2,5)', 'cross_product(3,1)', 'cross_product(3,2)', 'cross_product(3,3)', 'cross_product(3,4)', 'cross_product(3,5)', 'cross_product(4,1)', 'cross_product(4,2)', 'cross_product(4,3)', 'cross_product(4,4)', 'cross_product(4,5)']]


723
join

question: 
Create an ASP solution to define the predicate "butterfly_chair" that links each butterfly to the lake of chair, given "butterfly" has fields "ID","quality","chairID" and "chair" has fields "ID","strength","lake".

answer from file: 
butterfly_chair(X,Z):-butterfly(X,_,Y),chair(Y,_,Z).

parsed from model: 
butterfly_chair(X,Z):-butterfly(X,_,Y),chair(Y,_,Z).

facts: 
butterfly("ID","quality","chairID").chair("ID","strength","lake").

generated: 
Create an ASP solution to define the predicate "butterfly_chair" that links each butterfly to the lake of chair, given "butterfly" has fields "ID","quality","chairID" and "chair" has fields "ID","strength","lake". Define the predicate "butterfly_chair" that links each butterfly to the lake of chair.
Answer: butterfly_chair(X,Z):-butterfly(X,_,Y),chair(Y,_,Z).
butterfly_chair(X,Z):- arrivant(X,_,Y), assurent(Y,_,Z).
 arrivant(X,_,Y):-bike(X,_,Y).
 assurent(X,_,Z):-bike(X,_,Z).

unique_rules: 
['butterfly_chair(X,Z):-butterfly(X,_,Y),chair(Y,_,Z).', 'butterfly_chair(X,Z):- arrivant(X,_,Y), assurent(Y,_,Z).', 'arrivant(X,_,Y):-bike(X,_,Y).', 'assurent(X,_,Z):-bike(X,_,Z).']

jaccard: 1.0

AS desired: [['butterfly("ID","quality","chairID")', 'chair("ID","strength","lake")']]
\AS obtained: [['butterfly("ID","quality","chairID")', 'chair("ID","strength","lake")']]


724
closure

question: 
Craft an ASP script that infers the "trains" predicate by computing the transitive closure of the "chicago" predicate.

answer from file: 
trains(X,Y):-chicago(X,Y).
trains(X,Y):-chicago(X,Z),trains(Z,Y).

parsed from model: 
trains(X,Y):-chicago(X,Y).
trains(X,Y):-chicago(X,Z),trains(Z,Y).

facts: 
chicago(1..3, 1..4).

generated: 
Craft an ASP script that infers the "trains" predicate by computing the transitive closure of the "chicago" predicate.
Answer: trains(X,Y):-chicago(X,Y).
trains(X,Y):-chicago(X,Z),trains(Z,Y).
trains(X,Y):-chicago(X,Z),not trains(Z,Y).
chicago(X,Y):-city(X,Y).
city(X,Y):-bike(X,Y).
bike(X,Y):-city(X,Y).

unique_rules: 
['trains(X,Y):-chicago(X,Y).', 'trains(X,Y):-chicago(X,Z),trains(Z,Y).', 'trains(X,Y):-chicago(X,Z),not trains(Z,Y).', 'chicago(X,Y):-city(X,Y).', 'city(X,Y):-bike(X,Y).', 'bike(X,Y):-city(X,Y).']

jaccard: 1.0

AS desired: [['chicago(1,1)', 'chicago(1,2)', 'chicago(1,3)', 'chicago(1,4)', 'chicago(2,1)', 'chicago(2,2)', 'chicago(2,3)', 'chicago(2,4)', 'chicago(3,1)', 'chicago(3,2)', 'chicago(3,3)', 'chicago(3,4)', 'trains(1,1)', 'trains(1,2)', 'trains(1,3)', 'trains(1,4)', 'trains(2,1)', 'trains(2,2)', 'trains(2,3)', 'trains(2,4)', 'trains(3,1)', 'trains(3,2)', 'trains(3,3)', 'trains(3,4)']]
\AS obtained: [['chicago(1,1)', 'chicago(1,2)', 'chicago(1,3)', 'chicago(1,4)', 'chicago(2,1)', 'chicago(2,2)', 'chicago(2,3)', 'chicago(2,4)', 'chicago(3,1)', 'chicago(3,2)', 'chicago(3,3)', 'chicago(3,4)', 'trains(1,1)', 'trains(1,2)', 'trains(1,3)', 'trains(1,4)', 'trains(2,1)', 'trains(2,2)', 'trains(2,3)', 'trains(2,4)', 'trains(3,1)', 'trains(3,2)', 'trains(3,3)', 'trains(3,4)']]


725
preference

question: 
Compose an ASP program to keep the predicate "darkmagenta" with value "5" separate from "mumbai". If this association occurs, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(5,"mumbai").[1@1]

parsed from model: 
:~assign(5,"mumbai").[1@1]

facts: 
darkmagenta(1..20).

generated: 
Compose an ASP program to keep the predicate "darkmagenta" with value "5" separate from "mumbai". If this association occurs, it incurs a cost of "1" at level "1".
Answer: :~assign(5,"mumbai").[1@1]
This predicate ensures that the association between "5" and "mumbai" is not established.
The predicate "gray" with value "1" at level "1" is used to enforce this separation.
The predicate "darkmagenta" with value "5" at level "1" is the one that incurs the cost specified by the predicate "gray".

unique_rules: 
[':~assign(5,"mumbai").[1@1]']

jaccard: 1.0

AS desired: [['darkmagenta(1)', 'darkmagenta(2)', 'darkmagenta(3)', 'darkmagenta(4)', 'darkmagenta(5)', 'darkmagenta(6)', 'darkmagenta(7)', 'darkmagenta(8)', 'darkmagenta(9)', 'darkmagenta(10)', 'darkmagenta(11)', 'darkmagenta(12)', 'darkmagenta(13)', 'darkmagenta(14)', 'darkmagenta(15)', 'darkmagenta(16)', 'darkmagenta(17)', 'darkmagenta(18)', 'darkmagenta(19)', 'darkmagenta(20)']]
\AS obtained: [['darkmagenta(1)', 'darkmagenta(2)', 'darkmagenta(3)', 'darkmagenta(4)', 'darkmagenta(5)', 'darkmagenta(6)', 'darkmagenta(7)', 'darkmagenta(8)', 'darkmagenta(9)', 'darkmagenta(10)', 'darkmagenta(11)', 'darkmagenta(12)', 'darkmagenta(13)', 'darkmagenta(14)', 'darkmagenta(15)', 'darkmagenta(16)', 'darkmagenta(17)', 'darkmagenta(18)', 'darkmagenta(19)', 'darkmagenta(20)']]


726
filtering

question: 
Draft an ASP code to retrieve values associated with the predicate "black" and the label "roof".

answer from file: 
select(X):-black(X,"roof").

parsed from model: 
select(X):-black(X,"roof").

facts: 
black(1..5, "roof").

generated: 
Draft an ASP code to retrieve values associated with the predicate "black" and the label "roof".
Answer: select(X):-black(X,"roof").
black(X,Z):-black(X,Z).
black(X,C):-not black(X,C).

unique_rules: 
['select(X):-black(X,"roof").', 'black(X,Z):-black(X,Z).', 'black(X,C):-not black(X,C).']

jaccard: 1.0

AS desired: [['black(1,"roof")', 'black(2,"roof")', 'black(3,"roof")', 'black(4,"roof")', 'black(5,"roof")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['black(1,"roof")', 'black(2,"roof")', 'black(3,"roof")', 'black(4,"roof")', 'black(5,"roof")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


727
negative_filtering

question: 
Write an ASP script to select values connected to the predicate "pink" but not associated with the predicate "white" and labeled "lightblue".

answer from file: 
select(X):-pink(X),not white(X,"lightblue").

parsed from model: 
select(X):-pink(X),not white(X,"lightblue").

facts: 
pink(1..3).white(1,"black").white(2,"lightblue").white(3,"chair").

generated: 
Write an ASP script to select values connected to the predicate "pink" but not associated with the predicate "white" and labeled "lightblue".
Answer: select(X):-pink(X),not white(X,"lightblue").
```
select(X):-pink(X),not white(X,"lightblue").
```

unique_rules: 
['select(X):-pink(X),not white(X,"lightblue").']

jaccard: 1.0

AS desired: [['pink(1)', 'pink(2)', 'pink(3)', 'white(1,"black")', 'white(2,"lightblue")', 'white(3,"chair")', 'select(1)', 'select(3)']]
\AS obtained: [['pink(1)', 'pink(2)', 'pink(3)', 'white(1,"black")', 'white(2,"lightblue")', 'white(3,"chair")', 'select(1)', 'select(3)']]


728
numeric_filtering

question: 
Draft an ASP code snippet to identify values linked to the predicate "surname" with a value different than 9.

answer from file: 
select(X):-surname(X,C),C!=9.

parsed from model: 
select(X):-surname(X,C),C!=9.

facts: 
surname(1..3, 1..100).

generated: 
Draft an ASP code snippet to identify values linked to the predicate "surname" with a value different than 9.
Answer: select(X):-surname(X,C),C!=9.
```
The predicate "name" includes fields "ID","height","author","city","description","name","price","author","city","description","name","height","author","city","description","price","author","city","description","name","height","author","city","description","price","author","city","description","name","height","author","city","description","price","author","city","description","name","height","author","city","description","price","author","city","description","name","height","author","city","description","price","author","city","description","name","height","author","city","description","price","

unique_rules: 
['select(X):-surname(X,C),C!=9.']

jaccard: 1.0

AS desired: [['surname(1,1)', 'surname(1,2)', 'surname(1,3)', 'surname(1,4)', 'surname(1,5)', 'surname(1,6)', 'surname(1,7)', 'surname(1,8)', 'surname(1,9)', 'surname(1,10)', 'surname(1,11)', 'surname(1,12)', 'surname(1,13)', 'surname(1,14)', 'surname(1,15)', 'surname(1,16)', 'surname(1,17)', 'surname(1,18)', 'surname(1,19)', 'surname(1,20)', 'surname(1,21)', 'surname(1,22)', 'surname(1,23)', 'surname(1,24)', 'surname(1,25)', 'surname(1,26)', 'surname(1,27)', 'surname(1,28)', 'surname(1,29)', 'surname(1,30)', 'surname(1,31)', 'surname(1,32)', 'surname(1,33)', 'surname(1,34)', 'surname(1,35)', 'surname(1,36)', 'surname(1,37)', 'surname(1,38)', 'surname(1,39)', 'surname(1,40)', 'surname(1,41)', 'surname(1,42)', 'surname(1,43)', 'surname(1,44)', 'surname(1,45)', 'surname(1,46)', 'surname(1,47)', 'surname(1,48)', 'surname(1,49)', 'surname(1,50)', 'surname(1,51)', 'surname(1,52)', 'surname(1,53)', 'surname(1,54)', 'surname(1,55)', 'surname(1,56)', 'surname(1,57)', 'surname(1,58)', 'surname(1,59)', 'surname(1,60)', 'surname(1,61)', 'surname(1,62)', 'surname(1,63)', 'surname(1,64)', 'surname(1,65)', 'surname(1,66)', 'surname(1,67)', 'surname(1,68)', 'surname(1,69)', 'surname(1,70)', 'surname(1,71)', 'surname(1,72)', 'surname(1,73)', 'surname(1,74)', 'surname(1,75)', 'surname(1,76)', 'surname(1,77)', 'surname(1,78)', 'surname(1,79)', 'surname(1,80)', 'surname(1,81)', 'surname(1,82)', 'surname(1,83)', 'surname(1,84)', 'surname(1,85)', 'surname(1,86)', 'surname(1,87)', 'surname(1,88)', 'surname(1,89)', 'surname(1,90)', 'surname(1,91)', 'surname(1,92)', 'surname(1,93)', 'surname(1,94)', 'surname(1,95)', 'surname(1,96)', 'surname(1,97)', 'surname(1,98)', 'surname(1,99)', 'surname(1,100)', 'surname(2,1)', 'surname(2,2)', 'surname(2,3)', 'surname(2,4)', 'surname(2,5)', 'surname(2,6)', 'surname(2,7)', 'surname(2,8)', 'surname(2,9)', 'surname(2,10)', 'surname(2,11)', 'surname(2,12)', 'surname(2,13)', 'surname(2,14)', 'surname(2,15)', 'surname(2,16)', 'surname(2,17)', 'surname(2,18)', 'surname(2,19)', 'surname(2,20)', 'surname(2,21)', 'surname(2,22)', 'surname(2,23)', 'surname(2,24)', 'surname(2,25)', 'surname(2,26)', 'surname(2,27)', 'surname(2,28)', 'surname(2,29)', 'surname(2,30)', 'surname(2,31)', 'surname(2,32)', 'surname(2,33)', 'surname(2,34)', 'surname(2,35)', 'surname(2,36)', 'surname(2,37)', 'surname(2,38)', 'surname(2,39)', 'surname(2,40)', 'surname(2,41)', 'surname(2,42)', 'surname(2,43)', 'surname(2,44)', 'surname(2,45)', 'surname(2,46)', 'surname(2,47)', 'surname(2,48)', 'surname(2,49)', 'surname(2,50)', 'surname(2,51)', 'surname(2,52)', 'surname(2,53)', 'surname(2,54)', 'surname(2,55)', 'surname(2,56)', 'surname(2,57)', 'surname(2,58)', 'surname(2,59)', 'surname(2,60)', 'surname(2,61)', 'surname(2,62)', 'surname(2,63)', 'surname(2,64)', 'surname(2,65)', 'surname(2,66)', 'surname(2,67)', 'surname(2,68)', 'surname(2,69)', 'surname(2,70)', 'surname(2,71)', 'surname(2,72)', 'surname(2,73)', 'surname(2,74)', 'surname(2,75)', 'surname(2,76)', 'surname(2,77)', 'surname(2,78)', 'surname(2,79)', 'surname(2,80)', 'surname(2,81)', 'surname(2,82)', 'surname(2,83)', 'surname(2,84)', 'surname(2,85)', 'surname(2,86)', 'surname(2,87)', 'surname(2,88)', 'surname(2,89)', 'surname(2,90)', 'surname(2,91)', 'surname(2,92)', 'surname(2,93)', 'surname(2,94)', 'surname(2,95)', 'surname(2,96)', 'surname(2,97)', 'surname(2,98)', 'surname(2,99)', 'surname(2,100)', 'surname(3,1)', 'surname(3,2)', 'surname(3,3)', 'surname(3,4)', 'surname(3,5)', 'surname(3,6)', 'surname(3,7)', 'surname(3,8)', 'surname(3,9)', 'surname(3,10)', 'surname(3,11)', 'surname(3,12)', 'surname(3,13)', 'surname(3,14)', 'surname(3,15)', 'surname(3,16)', 'surname(3,17)', 'surname(3,18)', 'surname(3,19)', 'surname(3,20)', 'surname(3,21)', 'surname(3,22)', 'surname(3,23)', 'surname(3,24)', 'surname(3,25)', 'surname(3,26)', 'surname(3,27)', 'surname(3,28)', 'surname(3,29)', 'surname(3,30)', 'surname(3,31)', 'surname(3,32)', 'surname(3,33)', 'surname(3,34)', 'surname(3,35)', 'surname(3,36)', 'surname(3,37)', 'surname(3,38)', 'surname(3,39)', 'surname(3,40)', 'surname(3,41)', 'surname(3,42)', 'surname(3,43)', 'surname(3,44)', 'surname(3,45)', 'surname(3,46)', 'surname(3,47)', 'surname(3,48)', 'surname(3,49)', 'surname(3,50)', 'surname(3,51)', 'surname(3,52)', 'surname(3,53)', 'surname(3,54)', 'surname(3,55)', 'surname(3,56)', 'surname(3,57)', 'surname(3,58)', 'surname(3,59)', 'surname(3,60)', 'surname(3,61)', 'surname(3,62)', 'surname(3,63)', 'surname(3,64)', 'surname(3,65)', 'surname(3,66)', 'surname(3,67)', 'surname(3,68)', 'surname(3,69)', 'surname(3,70)', 'surname(3,71)', 'surname(3,72)', 'surname(3,73)', 'surname(3,74)', 'surname(3,75)', 'surname(3,76)', 'surname(3,77)', 'surname(3,78)', 'surname(3,79)', 'surname(3,80)', 'surname(3,81)', 'surname(3,82)', 'surname(3,83)', 'surname(3,84)', 'surname(3,85)', 'surname(3,86)', 'surname(3,87)', 'surname(3,88)', 'surname(3,89)', 'surname(3,90)', 'surname(3,91)', 'surname(3,92)', 'surname(3,93)', 'surname(3,94)', 'surname(3,95)', 'surname(3,96)', 'surname(3,97)', 'surname(3,98)', 'surname(3,99)', 'surname(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['surname(1,1)', 'surname(1,2)', 'surname(1,3)', 'surname(1,4)', 'surname(1,5)', 'surname(1,6)', 'surname(1,7)', 'surname(1,8)', 'surname(1,9)', 'surname(1,10)', 'surname(1,11)', 'surname(1,12)', 'surname(1,13)', 'surname(1,14)', 'surname(1,15)', 'surname(1,16)', 'surname(1,17)', 'surname(1,18)', 'surname(1,19)', 'surname(1,20)', 'surname(1,21)', 'surname(1,22)', 'surname(1,23)', 'surname(1,24)', 'surname(1,25)', 'surname(1,26)', 'surname(1,27)', 'surname(1,28)', 'surname(1,29)', 'surname(1,30)', 'surname(1,31)', 'surname(1,32)', 'surname(1,33)', 'surname(1,34)', 'surname(1,35)', 'surname(1,36)', 'surname(1,37)', 'surname(1,38)', 'surname(1,39)', 'surname(1,40)', 'surname(1,41)', 'surname(1,42)', 'surname(1,43)', 'surname(1,44)', 'surname(1,45)', 'surname(1,46)', 'surname(1,47)', 'surname(1,48)', 'surname(1,49)', 'surname(1,50)', 'surname(1,51)', 'surname(1,52)', 'surname(1,53)', 'surname(1,54)', 'surname(1,55)', 'surname(1,56)', 'surname(1,57)', 'surname(1,58)', 'surname(1,59)', 'surname(1,60)', 'surname(1,61)', 'surname(1,62)', 'surname(1,63)', 'surname(1,64)', 'surname(1,65)', 'surname(1,66)', 'surname(1,67)', 'surname(1,68)', 'surname(1,69)', 'surname(1,70)', 'surname(1,71)', 'surname(1,72)', 'surname(1,73)', 'surname(1,74)', 'surname(1,75)', 'surname(1,76)', 'surname(1,77)', 'surname(1,78)', 'surname(1,79)', 'surname(1,80)', 'surname(1,81)', 'surname(1,82)', 'surname(1,83)', 'surname(1,84)', 'surname(1,85)', 'surname(1,86)', 'surname(1,87)', 'surname(1,88)', 'surname(1,89)', 'surname(1,90)', 'surname(1,91)', 'surname(1,92)', 'surname(1,93)', 'surname(1,94)', 'surname(1,95)', 'surname(1,96)', 'surname(1,97)', 'surname(1,98)', 'surname(1,99)', 'surname(1,100)', 'surname(2,1)', 'surname(2,2)', 'surname(2,3)', 'surname(2,4)', 'surname(2,5)', 'surname(2,6)', 'surname(2,7)', 'surname(2,8)', 'surname(2,9)', 'surname(2,10)', 'surname(2,11)', 'surname(2,12)', 'surname(2,13)', 'surname(2,14)', 'surname(2,15)', 'surname(2,16)', 'surname(2,17)', 'surname(2,18)', 'surname(2,19)', 'surname(2,20)', 'surname(2,21)', 'surname(2,22)', 'surname(2,23)', 'surname(2,24)', 'surname(2,25)', 'surname(2,26)', 'surname(2,27)', 'surname(2,28)', 'surname(2,29)', 'surname(2,30)', 'surname(2,31)', 'surname(2,32)', 'surname(2,33)', 'surname(2,34)', 'surname(2,35)', 'surname(2,36)', 'surname(2,37)', 'surname(2,38)', 'surname(2,39)', 'surname(2,40)', 'surname(2,41)', 'surname(2,42)', 'surname(2,43)', 'surname(2,44)', 'surname(2,45)', 'surname(2,46)', 'surname(2,47)', 'surname(2,48)', 'surname(2,49)', 'surname(2,50)', 'surname(2,51)', 'surname(2,52)', 'surname(2,53)', 'surname(2,54)', 'surname(2,55)', 'surname(2,56)', 'surname(2,57)', 'surname(2,58)', 'surname(2,59)', 'surname(2,60)', 'surname(2,61)', 'surname(2,62)', 'surname(2,63)', 'surname(2,64)', 'surname(2,65)', 'surname(2,66)', 'surname(2,67)', 'surname(2,68)', 'surname(2,69)', 'surname(2,70)', 'surname(2,71)', 'surname(2,72)', 'surname(2,73)', 'surname(2,74)', 'surname(2,75)', 'surname(2,76)', 'surname(2,77)', 'surname(2,78)', 'surname(2,79)', 'surname(2,80)', 'surname(2,81)', 'surname(2,82)', 'surname(2,83)', 'surname(2,84)', 'surname(2,85)', 'surname(2,86)', 'surname(2,87)', 'surname(2,88)', 'surname(2,89)', 'surname(2,90)', 'surname(2,91)', 'surname(2,92)', 'surname(2,93)', 'surname(2,94)', 'surname(2,95)', 'surname(2,96)', 'surname(2,97)', 'surname(2,98)', 'surname(2,99)', 'surname(2,100)', 'surname(3,1)', 'surname(3,2)', 'surname(3,3)', 'surname(3,4)', 'surname(3,5)', 'surname(3,6)', 'surname(3,7)', 'surname(3,8)', 'surname(3,9)', 'surname(3,10)', 'surname(3,11)', 'surname(3,12)', 'surname(3,13)', 'surname(3,14)', 'surname(3,15)', 'surname(3,16)', 'surname(3,17)', 'surname(3,18)', 'surname(3,19)', 'surname(3,20)', 'surname(3,21)', 'surname(3,22)', 'surname(3,23)', 'surname(3,24)', 'surname(3,25)', 'surname(3,26)', 'surname(3,27)', 'surname(3,28)', 'surname(3,29)', 'surname(3,30)', 'surname(3,31)', 'surname(3,32)', 'surname(3,33)', 'surname(3,34)', 'surname(3,35)', 'surname(3,36)', 'surname(3,37)', 'surname(3,38)', 'surname(3,39)', 'surname(3,40)', 'surname(3,41)', 'surname(3,42)', 'surname(3,43)', 'surname(3,44)', 'surname(3,45)', 'surname(3,46)', 'surname(3,47)', 'surname(3,48)', 'surname(3,49)', 'surname(3,50)', 'surname(3,51)', 'surname(3,52)', 'surname(3,53)', 'surname(3,54)', 'surname(3,55)', 'surname(3,56)', 'surname(3,57)', 'surname(3,58)', 'surname(3,59)', 'surname(3,60)', 'surname(3,61)', 'surname(3,62)', 'surname(3,63)', 'surname(3,64)', 'surname(3,65)', 'surname(3,66)', 'surname(3,67)', 'surname(3,68)', 'surname(3,69)', 'surname(3,70)', 'surname(3,71)', 'surname(3,72)', 'surname(3,73)', 'surname(3,74)', 'surname(3,75)', 'surname(3,76)', 'surname(3,77)', 'surname(3,78)', 'surname(3,79)', 'surname(3,80)', 'surname(3,81)', 'surname(3,82)', 'surname(3,83)', 'surname(3,84)', 'surname(3,85)', 'surname(3,86)', 'surname(3,87)', 'surname(3,88)', 'surname(3,89)', 'surname(3,90)', 'surname(3,91)', 'surname(3,92)', 'surname(3,93)', 'surname(3,94)', 'surname(3,95)', 'surname(3,96)', 'surname(3,97)', 'surname(3,98)', 'surname(3,99)', 'surname(3,100)', 'select(1)', 'select(2)', 'select(3)']]


729
assignment

question: 
Design an ASP application to assign one label from "darkmagenta","surname","strength","owner","barcelona","hair","toronto","white","lake" to every element specified by the predicate "storm".

answer from file: 
assign(X,"darkmagenta")|assign(X,"surname")|assign(X,"strength")|assign(X,"owner")|assign(X,"barcelona")|assign(X,"hair")|assign(X,"toronto")|assign(X,"white")|assign(X,"lake"):-storm(X).

parsed from model: 
assign(X,"darkmagenta")|assign(X,"surname")|assign(X,"strength")|assign(X,"owner")|assign(X,"barcelona")|assign(X,"hair")|assign(X,"toronto")|assign(X,"white")|assign(X,"lake"):-storm(X).

facts: 
storm(1..5).

generated: 
Design an ASP application to assign one label from "darkmagenta","surname","strength","owner","barcelona","hair","toronto","white","lake" to every element specified by the predicate "storm".
Answer: assign(X,"darkmagenta")|assign(X,"surname")|assign(X,"strength")|assign(X,"owner")|assign(X,"barcelona")|assign(X,"hair")|assign(X,"toronto")|assign(X,"white")|assign(X,"lake"):-storm(X).
assign(X,"darkmagenta")|assign(X,"surname")|assign(X,"strength")|assign(X,"owner")|assign(X,"barcelona")|assign(X,"hair")|assign(X,"toronto")|assign(X,"white")|assign(X,"lake"):-storm(X).

unique_rules: 
['assign(X,"darkmagenta")|assign(X,"surname")|assign(X,"strength")|assign(X,"owner")|assign(X,"barcelona")|assign(X,"hair")|assign(X,"toronto")|assign(X,"white")|assign(X,"lake"):-storm(X).']

jaccard: 1.0

AS desired: [['storm(1)', 'storm(2)', 'storm(3)', 'storm(4)', 'storm(5)', 'assign(1,"lake")', 'assign(2,"lake")', 'assign(3,"lake")', 'assign(4,"lake")', 'assign(5,"lake")']]
\AS obtained: [['storm(1)', 'storm(2)', 'storm(3)', 'storm(4)', 'storm(5)', 'assign(1,"lake")', 'assign(2,"lake")', 'assign(3,"lake")', 'assign(4,"lake")', 'assign(5,"lake")']]


730
constraint

question: 
Compose an ASP solution to ensure the "strength" predicate with value 13 is not associated with the label "cairo".

answer from file: 
:-assign(13,cairo).

parsed from model: 
:-assign(13,cairo).

facts: 
strength(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-strength(X).

generated: 
Compose an ASP solution to ensure the "strength" predicate with value 13 is not associated with the label "cairo".
Answer: :-assign(13,cairo).
Explanation: The predicate "street" includes values associated with the label "city","height","moto","rome","shangai","description","author","city","height","moto","description","author","rome","city","height","description","author","shangai","height","description","author","rome","city","height","description","author","shangai","height","description","author","rome","city","height","description","author","shangai","height","description","author","rome","city","height","description","author","shangai","height","description","author","rome","city","height","description","author","shangai","height","description","author","rome","city","

unique_rules: 
[':-assign(13,cairo).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'strength(6)', 'strength(7)', 'strength(8)', 'strength(9)', 'strength(10)', 'strength(11)', 'strength(12)', 'strength(13)', 'strength(14)', 'strength(15)', 'strength(16)', 'strength(17)', 'strength(18)', 'strength(19)', 'strength(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'strength(6)', 'strength(7)', 'strength(8)', 'strength(9)', 'strength(10)', 'strength(11)', 'strength(12)', 'strength(13)', 'strength(14)', 'strength(15)', 'strength(16)', 'strength(17)', 'strength(18)', 'strength(19)', 'strength(20)']]


731
combination

question: 
Craft an ASP application to list valid combinations of elements between the predicates "quality" and "lightblue".

answer from file: 
combination(X,Y):-quality(X),lightblue(Y).

parsed from model: 
combination(X,Y):-quality(X),lightblue(Y).

facts: 
quality(1..4).lightblue(1..5).

generated: 
Craft an ASP application to list valid combinations of elements between the predicates "quality" and "lightblue".
Answer: combination(X,Y):-quality(X),lightblue(Y).
combination(X,Y):-quality(X),not lightblue(Y).
combination(X,Y):-lightblue(Y),not quality(X).

unique_rules: 
['combination(X,Y):-quality(X),lightblue(Y).', 'combination(X,Y):-quality(X),not lightblue(Y).', 'combination(X,Y):-lightblue(Y),not quality(X).']

jaccard: 1.0

AS desired: [['lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'lightblue(4)', 'lightblue(5)', 'quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'lightblue(4)', 'lightblue(5)', 'quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


732
join

question: 
Write an ASP program to solve the problem by defining the predicate "mumbai_singapore" which associates each mumbai to the hair of singapore, using the fields "ID","strength","quality","singaporeID" of "mumbai" and the fields "ID","hair","weight" of "singapore".

answer from file: 
mumbai_singapore(X,Z):-mumbai(X,_,_,Y),singapore(Y,Z,_).

parsed from model: 
mumbai_singapore(X,Z):-mumbai(X,_,_,Y),singapore(Y,_,Z).

facts: 
mumbai("ID","strength","quality","singaporeID").singapore("ID","hair","weight").

generated: 
Write an ASP program to solve the problem by defining the predicate "mumbai_singapore" which associates each mumbai to the hair of singapore, using the fields "ID","strength","quality","singaporeID" of "mumbai" and the fields "ID","hair","weight" of "singapore". Define the predicate "mumbai_singapore" which associates each mumbai to the weight of singapore.
Answer: mumbai_singapore(X,Z):-mumbai(X,_,_,Y),singapore(Y,_,Z).
mumbai_singapore(X,Z):-mumbai(X,_,_,Y),singapore(Y,_,Z).
mumbai(X,_,_,Y):-mumbai(X,strength,quality,Y).
singapore(Y,_,Z):-singapore(Y,hair,Z).

unique_rules: 
['mumbai_singapore(X,Z):-mumbai(X,_,_,Y),singapore(Y,_,Z).', 'mumbai(X,_,_,Y):-mumbai(X,strength,quality,Y).', 'singapore(Y,_,Z):-singapore(Y,hair,Z).']

jaccard: 1.0

AS desired: [['mumbai("ID","strength","quality","singaporeID")', 'singapore("ID","hair","weight")']]
\AS obtained: [['mumbai("ID","strength","quality","singaporeID")', 'singapore("ID","hair","weight")']]


733
closure

question: 
Create an ASP code snippet to determine the transitive closure of the "butterfly" predicate, resulting in the predicate "trains".

answer from file: 
trains(X,Y):-butterfly(X,Y).
trains(X,Y):-butterfly(X,Z),trains(Z,Y).

parsed from model: 
trains(X,Y):-butterfly(X,Y).
trains(X,Y):- arrivant(X,Y).

facts: 
butterfly(1..3, 1..4).

generated: 
Create an ASP code snippet to determine the transitive closure of the "butterfly" predicate, resulting in the predicate "trains".
Answer: trains(X,Y):-butterfly(X,Y).
trains(X,Y):- arrivant(X,Y).
trains(X,Y):-bike(X,Y).
trains(X,Y):-city(X,Y).
 arrivant(X,Y):-city(X,Y).
bike(X,Y):-city(X,Y).
city(X,Y):-bike(X,Y).

unique_rules: 
['trains(X,Y):-butterfly(X,Y).', 'trains(X,Y):- arrivant(X,Y).', 'trains(X,Y):-bike(X,Y).', 'trains(X,Y):-city(X,Y).', 'arrivant(X,Y):-city(X,Y).', 'bike(X,Y):-city(X,Y).', 'city(X,Y):-bike(X,Y).']

jaccard: 1.0

AS desired: [['butterfly(1,1)', 'butterfly(1,2)', 'butterfly(1,3)', 'butterfly(1,4)', 'butterfly(2,1)', 'butterfly(2,2)', 'butterfly(2,3)', 'butterfly(2,4)', 'butterfly(3,1)', 'butterfly(3,2)', 'butterfly(3,3)', 'butterfly(3,4)', 'trains(1,1)', 'trains(1,2)', 'trains(1,3)', 'trains(1,4)', 'trains(2,1)', 'trains(2,2)', 'trains(2,3)', 'trains(2,4)', 'trains(3,1)', 'trains(3,2)', 'trains(3,3)', 'trains(3,4)']]
\AS obtained: [['butterfly(1,1)', 'butterfly(1,2)', 'butterfly(1,3)', 'butterfly(1,4)', 'butterfly(2,1)', 'butterfly(2,2)', 'butterfly(2,3)', 'butterfly(2,4)', 'butterfly(3,1)', 'butterfly(3,2)', 'butterfly(3,3)', 'butterfly(3,4)', 'trains(1,1)', 'trains(1,2)', 'trains(1,3)', 'trains(1,4)', 'trains(2,1)', 'trains(2,2)', 'trains(2,3)', 'trains(2,4)', 'trains(3,1)', 'trains(3,2)', 'trains(3,3)', 'trains(3,4)']]


734
preference

question: 
Compose an ASP program to keep the predicate "mumbai" with value "19" separate from "wall". If this association occurs, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(19,"wall").[1@1]

parsed from model: 
:~assign(19,"wall").[1@1]

facts: 
mumbai(1..20).

generated: 
Compose an ASP program to keep the predicate "mumbai" with value "19" separate from "wall". If this association occurs, it incurs a cost of "1" at level "1".
Answer: :~assign(19,"wall").[1@1]
This predicate ensures that the association between "19" and "wall" incurs a cost of "1" at level "1".

unique_rules: 
[':~assign(19,"wall").[1@1]']

jaccard: 1.0

AS desired: [['mumbai(1)', 'mumbai(2)', 'mumbai(3)', 'mumbai(4)', 'mumbai(5)', 'mumbai(6)', 'mumbai(7)', 'mumbai(8)', 'mumbai(9)', 'mumbai(10)', 'mumbai(11)', 'mumbai(12)', 'mumbai(13)', 'mumbai(14)', 'mumbai(15)', 'mumbai(16)', 'mumbai(17)', 'mumbai(18)', 'mumbai(19)', 'mumbai(20)']]
\AS obtained: [['mumbai(1)', 'mumbai(2)', 'mumbai(3)', 'mumbai(4)', 'mumbai(5)', 'mumbai(6)', 'mumbai(7)', 'mumbai(8)', 'mumbai(9)', 'mumbai(10)', 'mumbai(11)', 'mumbai(12)', 'mumbai(13)', 'mumbai(14)', 'mumbai(15)', 'mumbai(16)', 'mumbai(17)', 'mumbai(18)', 'mumbai(19)', 'mumbai(20)']]


735
filtering

question: 
Compose an ASP program to identify values labeled as "quality" within the predicate "flower".

answer from file: 
select(X):-flower(X,"quality").

parsed from model: 
select(X):-flower(X,"quality").

facts: 
flower(1..5, "quality").

generated: 
Compose an ASP program to identify values labeled as "quality" within the predicate "flower".
Answer: select(X):-flower(X,"quality").
select(X):-flower(X,"city").
select(X):-flower(X,"author").
select(X):-flower(X,"description").
```

unique_rules: 
['select(X):-flower(X,"quality").', 'select(X):-flower(X,"city").', 'select(X):-flower(X,"author").', 'select(X):-flower(X,"description").']

jaccard: 1.0

AS desired: [['flower(1,"quality")', 'flower(2,"quality")', 'flower(3,"quality")', 'flower(4,"quality")', 'flower(5,"quality")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['flower(1,"quality")', 'flower(2,"quality")', 'flower(3,"quality")', 'flower(4,"quality")', 'flower(5,"quality")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


736
negative_filtering

question: 
Design an ASP solution to capture values associated with the predicate "quality" but not tied to the predicate "black" and labeled "chicago".

answer from file: 
select(X):-quality(X),not black(X,"chicago").

parsed from model: 
select(X):-quality(X),not black(X,"chicago").

facts: 
quality(1..3).black(1,"quality").black(2,"lightblue").black(3,"mumbai").

generated: 
Design an ASP solution to capture values associated with the predicate "quality" but not tied to the predicate "black" and labeled "chicago".
Answer: select(X):-quality(X),not black(X,"chicago").
select(X):-black(X,"chicago").
The predicate "quality" includes fields "ID","height","author","city","name","description","price","author","city","name","description","height","name","city","price","author","city","name","description","height","name","city","price","author","city","name","description","height","name","city","price","author","city","name","description","height","name","city","price","author","city","name","description","height","name","city","price","author","city","name","description","height","name","city","price","author","

unique_rules: 
['select(X):-quality(X),not black(X,"chicago").', 'select(X):-black(X,"chicago").']

jaccard: 1.0

AS desired: [['quality(1)', 'quality(2)', 'quality(3)', 'black(1,"quality")', 'black(2,"lightblue")', 'black(3,"mumbai")', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['quality(1)', 'quality(2)', 'quality(3)', 'black(1,"quality")', 'black(2,"lightblue")', 'black(3,"mumbai")', 'select(1)', 'select(2)', 'select(3)']]


737
numeric_filtering

question: 
Generate an ASP code to capture values associated with the predicate "surname" with a value different than 9.

answer from file: 
select(X):-surname(X,C),C!=9.

parsed from model: 
select(X):-surname(X,C),C!=9.

facts: 
surname(1..3, 1..100).

generated: 
Generate an ASP code to capture values associated with the predicate "surname" with a value different than 9.
Answer: select(X):-surname(X,C),C!=9.
capture(X,C):-surname(X,C),C==9.
capture(X,C):-not(surname(X,C)).

unique_rules: 
['select(X):-surname(X,C),C!=9.', 'capture(X,C):-surname(X,C),C==9.', 'capture(X,C):-not(surname(X,C)).']

jaccard: 1.0

AS desired: [['surname(1,1)', 'surname(1,2)', 'surname(1,3)', 'surname(1,4)', 'surname(1,5)', 'surname(1,6)', 'surname(1,7)', 'surname(1,8)', 'surname(1,9)', 'surname(1,10)', 'surname(1,11)', 'surname(1,12)', 'surname(1,13)', 'surname(1,14)', 'surname(1,15)', 'surname(1,16)', 'surname(1,17)', 'surname(1,18)', 'surname(1,19)', 'surname(1,20)', 'surname(1,21)', 'surname(1,22)', 'surname(1,23)', 'surname(1,24)', 'surname(1,25)', 'surname(1,26)', 'surname(1,27)', 'surname(1,28)', 'surname(1,29)', 'surname(1,30)', 'surname(1,31)', 'surname(1,32)', 'surname(1,33)', 'surname(1,34)', 'surname(1,35)', 'surname(1,36)', 'surname(1,37)', 'surname(1,38)', 'surname(1,39)', 'surname(1,40)', 'surname(1,41)', 'surname(1,42)', 'surname(1,43)', 'surname(1,44)', 'surname(1,45)', 'surname(1,46)', 'surname(1,47)', 'surname(1,48)', 'surname(1,49)', 'surname(1,50)', 'surname(1,51)', 'surname(1,52)', 'surname(1,53)', 'surname(1,54)', 'surname(1,55)', 'surname(1,56)', 'surname(1,57)', 'surname(1,58)', 'surname(1,59)', 'surname(1,60)', 'surname(1,61)', 'surname(1,62)', 'surname(1,63)', 'surname(1,64)', 'surname(1,65)', 'surname(1,66)', 'surname(1,67)', 'surname(1,68)', 'surname(1,69)', 'surname(1,70)', 'surname(1,71)', 'surname(1,72)', 'surname(1,73)', 'surname(1,74)', 'surname(1,75)', 'surname(1,76)', 'surname(1,77)', 'surname(1,78)', 'surname(1,79)', 'surname(1,80)', 'surname(1,81)', 'surname(1,82)', 'surname(1,83)', 'surname(1,84)', 'surname(1,85)', 'surname(1,86)', 'surname(1,87)', 'surname(1,88)', 'surname(1,89)', 'surname(1,90)', 'surname(1,91)', 'surname(1,92)', 'surname(1,93)', 'surname(1,94)', 'surname(1,95)', 'surname(1,96)', 'surname(1,97)', 'surname(1,98)', 'surname(1,99)', 'surname(1,100)', 'surname(2,1)', 'surname(2,2)', 'surname(2,3)', 'surname(2,4)', 'surname(2,5)', 'surname(2,6)', 'surname(2,7)', 'surname(2,8)', 'surname(2,9)', 'surname(2,10)', 'surname(2,11)', 'surname(2,12)', 'surname(2,13)', 'surname(2,14)', 'surname(2,15)', 'surname(2,16)', 'surname(2,17)', 'surname(2,18)', 'surname(2,19)', 'surname(2,20)', 'surname(2,21)', 'surname(2,22)', 'surname(2,23)', 'surname(2,24)', 'surname(2,25)', 'surname(2,26)', 'surname(2,27)', 'surname(2,28)', 'surname(2,29)', 'surname(2,30)', 'surname(2,31)', 'surname(2,32)', 'surname(2,33)', 'surname(2,34)', 'surname(2,35)', 'surname(2,36)', 'surname(2,37)', 'surname(2,38)', 'surname(2,39)', 'surname(2,40)', 'surname(2,41)', 'surname(2,42)', 'surname(2,43)', 'surname(2,44)', 'surname(2,45)', 'surname(2,46)', 'surname(2,47)', 'surname(2,48)', 'surname(2,49)', 'surname(2,50)', 'surname(2,51)', 'surname(2,52)', 'surname(2,53)', 'surname(2,54)', 'surname(2,55)', 'surname(2,56)', 'surname(2,57)', 'surname(2,58)', 'surname(2,59)', 'surname(2,60)', 'surname(2,61)', 'surname(2,62)', 'surname(2,63)', 'surname(2,64)', 'surname(2,65)', 'surname(2,66)', 'surname(2,67)', 'surname(2,68)', 'surname(2,69)', 'surname(2,70)', 'surname(2,71)', 'surname(2,72)', 'surname(2,73)', 'surname(2,74)', 'surname(2,75)', 'surname(2,76)', 'surname(2,77)', 'surname(2,78)', 'surname(2,79)', 'surname(2,80)', 'surname(2,81)', 'surname(2,82)', 'surname(2,83)', 'surname(2,84)', 'surname(2,85)', 'surname(2,86)', 'surname(2,87)', 'surname(2,88)', 'surname(2,89)', 'surname(2,90)', 'surname(2,91)', 'surname(2,92)', 'surname(2,93)', 'surname(2,94)', 'surname(2,95)', 'surname(2,96)', 'surname(2,97)', 'surname(2,98)', 'surname(2,99)', 'surname(2,100)', 'surname(3,1)', 'surname(3,2)', 'surname(3,3)', 'surname(3,4)', 'surname(3,5)', 'surname(3,6)', 'surname(3,7)', 'surname(3,8)', 'surname(3,9)', 'surname(3,10)', 'surname(3,11)', 'surname(3,12)', 'surname(3,13)', 'surname(3,14)', 'surname(3,15)', 'surname(3,16)', 'surname(3,17)', 'surname(3,18)', 'surname(3,19)', 'surname(3,20)', 'surname(3,21)', 'surname(3,22)', 'surname(3,23)', 'surname(3,24)', 'surname(3,25)', 'surname(3,26)', 'surname(3,27)', 'surname(3,28)', 'surname(3,29)', 'surname(3,30)', 'surname(3,31)', 'surname(3,32)', 'surname(3,33)', 'surname(3,34)', 'surname(3,35)', 'surname(3,36)', 'surname(3,37)', 'surname(3,38)', 'surname(3,39)', 'surname(3,40)', 'surname(3,41)', 'surname(3,42)', 'surname(3,43)', 'surname(3,44)', 'surname(3,45)', 'surname(3,46)', 'surname(3,47)', 'surname(3,48)', 'surname(3,49)', 'surname(3,50)', 'surname(3,51)', 'surname(3,52)', 'surname(3,53)', 'surname(3,54)', 'surname(3,55)', 'surname(3,56)', 'surname(3,57)', 'surname(3,58)', 'surname(3,59)', 'surname(3,60)', 'surname(3,61)', 'surname(3,62)', 'surname(3,63)', 'surname(3,64)', 'surname(3,65)', 'surname(3,66)', 'surname(3,67)', 'surname(3,68)', 'surname(3,69)', 'surname(3,70)', 'surname(3,71)', 'surname(3,72)', 'surname(3,73)', 'surname(3,74)', 'surname(3,75)', 'surname(3,76)', 'surname(3,77)', 'surname(3,78)', 'surname(3,79)', 'surname(3,80)', 'surname(3,81)', 'surname(3,82)', 'surname(3,83)', 'surname(3,84)', 'surname(3,85)', 'surname(3,86)', 'surname(3,87)', 'surname(3,88)', 'surname(3,89)', 'surname(3,90)', 'surname(3,91)', 'surname(3,92)', 'surname(3,93)', 'surname(3,94)', 'surname(3,95)', 'surname(3,96)', 'surname(3,97)', 'surname(3,98)', 'surname(3,99)', 'surname(3,100)', 'select(1)', 'select(2)', 'select(3)']]
\AS obtained: [['surname(1,1)', 'surname(1,2)', 'surname(1,3)', 'surname(1,4)', 'surname(1,5)', 'surname(1,6)', 'surname(1,7)', 'surname(1,8)', 'surname(1,9)', 'surname(1,10)', 'surname(1,11)', 'surname(1,12)', 'surname(1,13)', 'surname(1,14)', 'surname(1,15)', 'surname(1,16)', 'surname(1,17)', 'surname(1,18)', 'surname(1,19)', 'surname(1,20)', 'surname(1,21)', 'surname(1,22)', 'surname(1,23)', 'surname(1,24)', 'surname(1,25)', 'surname(1,26)', 'surname(1,27)', 'surname(1,28)', 'surname(1,29)', 'surname(1,30)', 'surname(1,31)', 'surname(1,32)', 'surname(1,33)', 'surname(1,34)', 'surname(1,35)', 'surname(1,36)', 'surname(1,37)', 'surname(1,38)', 'surname(1,39)', 'surname(1,40)', 'surname(1,41)', 'surname(1,42)', 'surname(1,43)', 'surname(1,44)', 'surname(1,45)', 'surname(1,46)', 'surname(1,47)', 'surname(1,48)', 'surname(1,49)', 'surname(1,50)', 'surname(1,51)', 'surname(1,52)', 'surname(1,53)', 'surname(1,54)', 'surname(1,55)', 'surname(1,56)', 'surname(1,57)', 'surname(1,58)', 'surname(1,59)', 'surname(1,60)', 'surname(1,61)', 'surname(1,62)', 'surname(1,63)', 'surname(1,64)', 'surname(1,65)', 'surname(1,66)', 'surname(1,67)', 'surname(1,68)', 'surname(1,69)', 'surname(1,70)', 'surname(1,71)', 'surname(1,72)', 'surname(1,73)', 'surname(1,74)', 'surname(1,75)', 'surname(1,76)', 'surname(1,77)', 'surname(1,78)', 'surname(1,79)', 'surname(1,80)', 'surname(1,81)', 'surname(1,82)', 'surname(1,83)', 'surname(1,84)', 'surname(1,85)', 'surname(1,86)', 'surname(1,87)', 'surname(1,88)', 'surname(1,89)', 'surname(1,90)', 'surname(1,91)', 'surname(1,92)', 'surname(1,93)', 'surname(1,94)', 'surname(1,95)', 'surname(1,96)', 'surname(1,97)', 'surname(1,98)', 'surname(1,99)', 'surname(1,100)', 'surname(2,1)', 'surname(2,2)', 'surname(2,3)', 'surname(2,4)', 'surname(2,5)', 'surname(2,6)', 'surname(2,7)', 'surname(2,8)', 'surname(2,9)', 'surname(2,10)', 'surname(2,11)', 'surname(2,12)', 'surname(2,13)', 'surname(2,14)', 'surname(2,15)', 'surname(2,16)', 'surname(2,17)', 'surname(2,18)', 'surname(2,19)', 'surname(2,20)', 'surname(2,21)', 'surname(2,22)', 'surname(2,23)', 'surname(2,24)', 'surname(2,25)', 'surname(2,26)', 'surname(2,27)', 'surname(2,28)', 'surname(2,29)', 'surname(2,30)', 'surname(2,31)', 'surname(2,32)', 'surname(2,33)', 'surname(2,34)', 'surname(2,35)', 'surname(2,36)', 'surname(2,37)', 'surname(2,38)', 'surname(2,39)', 'surname(2,40)', 'surname(2,41)', 'surname(2,42)', 'surname(2,43)', 'surname(2,44)', 'surname(2,45)', 'surname(2,46)', 'surname(2,47)', 'surname(2,48)', 'surname(2,49)', 'surname(2,50)', 'surname(2,51)', 'surname(2,52)', 'surname(2,53)', 'surname(2,54)', 'surname(2,55)', 'surname(2,56)', 'surname(2,57)', 'surname(2,58)', 'surname(2,59)', 'surname(2,60)', 'surname(2,61)', 'surname(2,62)', 'surname(2,63)', 'surname(2,64)', 'surname(2,65)', 'surname(2,66)', 'surname(2,67)', 'surname(2,68)', 'surname(2,69)', 'surname(2,70)', 'surname(2,71)', 'surname(2,72)', 'surname(2,73)', 'surname(2,74)', 'surname(2,75)', 'surname(2,76)', 'surname(2,77)', 'surname(2,78)', 'surname(2,79)', 'surname(2,80)', 'surname(2,81)', 'surname(2,82)', 'surname(2,83)', 'surname(2,84)', 'surname(2,85)', 'surname(2,86)', 'surname(2,87)', 'surname(2,88)', 'surname(2,89)', 'surname(2,90)', 'surname(2,91)', 'surname(2,92)', 'surname(2,93)', 'surname(2,94)', 'surname(2,95)', 'surname(2,96)', 'surname(2,97)', 'surname(2,98)', 'surname(2,99)', 'surname(2,100)', 'surname(3,1)', 'surname(3,2)', 'surname(3,3)', 'surname(3,4)', 'surname(3,5)', 'surname(3,6)', 'surname(3,7)', 'surname(3,8)', 'surname(3,9)', 'surname(3,10)', 'surname(3,11)', 'surname(3,12)', 'surname(3,13)', 'surname(3,14)', 'surname(3,15)', 'surname(3,16)', 'surname(3,17)', 'surname(3,18)', 'surname(3,19)', 'surname(3,20)', 'surname(3,21)', 'surname(3,22)', 'surname(3,23)', 'surname(3,24)', 'surname(3,25)', 'surname(3,26)', 'surname(3,27)', 'surname(3,28)', 'surname(3,29)', 'surname(3,30)', 'surname(3,31)', 'surname(3,32)', 'surname(3,33)', 'surname(3,34)', 'surname(3,35)', 'surname(3,36)', 'surname(3,37)', 'surname(3,38)', 'surname(3,39)', 'surname(3,40)', 'surname(3,41)', 'surname(3,42)', 'surname(3,43)', 'surname(3,44)', 'surname(3,45)', 'surname(3,46)', 'surname(3,47)', 'surname(3,48)', 'surname(3,49)', 'surname(3,50)', 'surname(3,51)', 'surname(3,52)', 'surname(3,53)', 'surname(3,54)', 'surname(3,55)', 'surname(3,56)', 'surname(3,57)', 'surname(3,58)', 'surname(3,59)', 'surname(3,60)', 'surname(3,61)', 'surname(3,62)', 'surname(3,63)', 'surname(3,64)', 'surname(3,65)', 'surname(3,66)', 'surname(3,67)', 'surname(3,68)', 'surname(3,69)', 'surname(3,70)', 'surname(3,71)', 'surname(3,72)', 'surname(3,73)', 'surname(3,74)', 'surname(3,75)', 'surname(3,76)', 'surname(3,77)', 'surname(3,78)', 'surname(3,79)', 'surname(3,80)', 'surname(3,81)', 'surname(3,82)', 'surname(3,83)', 'surname(3,84)', 'surname(3,85)', 'surname(3,86)', 'surname(3,87)', 'surname(3,88)', 'surname(3,89)', 'surname(3,90)', 'surname(3,91)', 'surname(3,92)', 'surname(3,93)', 'surname(3,94)', 'surname(3,95)', 'surname(3,96)', 'surname(3,97)', 'surname(3,98)', 'surname(3,99)', 'surname(3,100)', 'select(1)', 'select(2)', 'select(3)']]


738
assignment

question: 
Compose an ASP program that maps a single label from the set "quality","barcelona","moscow","white","pink" to elements determined by the predicate "laptop".

answer from file: 
assign(X,"quality")|assign(X,"barcelona")|assign(X,"moscow")|assign(X,"white")|assign(X,"pink"):-laptop(X).

parsed from model: 
assign(X,"quality")|assign(X,"barcelona")|assign(X,"moscow")|assign(X,"white")|assign(X,"pink"):-laptop(X).

facts: 
laptop(1..5).

generated: 
Compose an ASP program that maps a single label from the set "quality","barcelona","moscow","white","pink" to elements determined by the predicate "laptop".
Answer: assign(X,"quality")|assign(X,"barcelona")|assign(X,"moscow")|assign(X,"white")|assign(X,"pink"):-laptop(X).
Explanation: The predicate "laptop" includes elements determined by the predicate "city".
The predicate "city" includes elements determined by the predicate "author".
The predicate "author" includes elements determined by the predicate "moto".
The predicate "moto" includes elements determined by the predicate "rome".
The predicate "rome" includes elements determined by the predicate "description".
The predicate "description" includes elements determined by the predicate "city".
The predicate "city" includes elements determined by the predicate "author".

unique_rules: 
['assign(X,"quality")|assign(X,"barcelona")|assign(X,"moscow")|assign(X,"white")|assign(X,"pink"):-laptop(X).']

jaccard: 1.0

AS desired: [['laptop(1)', 'laptop(2)', 'laptop(3)', 'laptop(4)', 'laptop(5)', 'assign(1,"pink")', 'assign(2,"pink")', 'assign(3,"pink")', 'assign(4,"pink")', 'assign(5,"pink")']]
\AS obtained: [['laptop(1)', 'laptop(2)', 'laptop(3)', 'laptop(4)', 'laptop(5)', 'assign(1,"pink")', 'assign(2,"pink")', 'assign(3,"pink")', 'assign(4,"pink")', 'assign(5,"pink")']]


739
constraint

question: 
Write an ASP program for the following problem. Prevent the predicate "owner" with value "7" from having label "laptop".

answer from file: 
:-assign(7,laptop).

parsed from model: 
:-assign(7,laptop).

facts: 
owner(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-owner(X).

generated: 
Write an ASP program for the following problem. Prevent the predicate "owner" with value "7" from having label "laptop".
Answer: :-assign(7,laptop).
Explanation: The predicate "author" includes fields "ID","height","city","name","description","author","age","city","description","name","price","author","height","city","description","name","age","city","description","name","price","author","height","city","description","name","age","city","description","name","price","author","height","city","description","name","age","city","description","name","price","author","height","city","description","name","age","city","description","name","price","author","height","city","description","name","age","city","description","name","price","author","height","city","description

unique_rules: 
[':-assign(7,laptop).']

jaccard: 1.0

AS desired: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'owner(5)', 'owner(6)', 'owner(7)', 'owner(8)', 'owner(9)', 'owner(10)', 'owner(11)', 'owner(12)', 'owner(13)', 'owner(14)', 'owner(15)', 'owner(16)', 'owner(17)', 'owner(18)', 'owner(19)', 'owner(20)']]
\AS obtained: [['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'owner(5)', 'owner(6)', 'owner(7)', 'owner(8)', 'owner(9)', 'owner(10)', 'owner(11)', 'owner(12)', 'owner(13)', 'owner(14)', 'owner(15)', 'owner(16)', 'owner(17)', 'owner(18)', 'owner(19)', 'owner(20)']]


740
combination

question: 
Compose an ASP script to calculate the Cartesian product of elements represented by the predicates "darkmagenta" and "laptop".

answer from file: 
combination(X,Y):-darkmagenta(X),laptop(Y).

parsed from model: 
combination(X,Y):-darkmagenta(X),laptop(Y).

facts: 
darkmagenta(1..4).laptop(1..5).

generated: 
Compose an ASP script to calculate the Cartesian product of elements represented by the predicates "darkmagenta" and "laptop".
Answer: combination(X,Y):-darkmagenta(X),laptop(Y).
combination(X,Y):-darkmagenta(X),not laptop(Y).
combination(X,Y):-not darkmagenta(X),laptop(Y).
combination(X,Y):-darkmagenta(X),laptop(Y).

unique_rules: 
['combination(X,Y):-darkmagenta(X),laptop(Y).', 'combination(X,Y):-darkmagenta(X),not laptop(Y).', 'combination(X,Y):-not darkmagenta(X),laptop(Y).']

jaccard: 1.0

AS desired: [['laptop(1)', 'laptop(2)', 'laptop(3)', 'laptop(4)', 'laptop(5)', 'darkmagenta(1)', 'darkmagenta(2)', 'darkmagenta(3)', 'darkmagenta(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
\AS obtained: [['laptop(1)', 'laptop(2)', 'laptop(3)', 'laptop(4)', 'laptop(5)', 'darkmagenta(1)', 'darkmagenta(2)', 'darkmagenta(3)', 'darkmagenta(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


741
join

question: 
Create an ASP script to define the predicate "roof_black" that links each roof to the weight of black, given that "roof" has fields "ID","strength","weight","blackID" and "black" has fields "ID","surname","weight".

answer from file: 
roof_black(X,Z):-roof(X,_,_,Y),black(Y,_,Z).

parsed from model: 
roof_black(X,Z):-roof(X,_,_,Y),black(Y,_,Z).

facts: 
roof("ID","strength","weight","blackID").black("ID","surname","weight").

generated: 
Create an ASP script to define the predicate "roof_black" that links each roof to the weight of black, given that "roof" has fields "ID","strength","weight","blackID" and "black" has fields "ID","surname","weight". Define the predicate "roof_black" that links each roof to the weight of black.
Answer: roof_black(X,Z):-roof(X,_,_,Y),black(Y,_,Z).
roof_black(X,Z):-roof(X,_,_,Y),black(Y,_,Z).

unique_rules: 
['roof_black(X,Z):-roof(X,_,_,Y),black(Y,_,Z).']

jaccard: 1.0

AS desired: [['roof("ID","strength","weight","blackID")', 'black("ID","surname","weight")']]
\AS obtained: [['roof("ID","strength","weight","blackID")', 'black("ID","surname","weight")']]


742
closure

question: 
Formulate an ASP code snippet to establish the "loops" predicate by computing the transitive closure of the "cosenza" predicate.

answer from file: 
loops(X,Y):-cosenza(X,Y).
loops(X,Y):-cosenza(X,Z),loops(Z,Y).

parsed from model: 
loops(X,Y):-cosenza(X,Y).
loops(X,Y):-cosenza(X,Z),loops(Z,Y).

facts: 
cosenza(1..3, 1..4).

generated: 
Formulate an ASP code snippet to establish the "loops" predicate by computing the transitive closure of the "cosenza" predicate.
Answer: loops(X,Y):-cosenza(X,Y).
loops(X,Y):-cosenza(X,Z),loops(Z,Y).
loops(X,Y):-cosenza(X,Z),not(Z=Y).
```

unique_rules: 
['loops(X,Y):-cosenza(X,Y).', 'loops(X,Y):-cosenza(X,Z),loops(Z,Y).', 'loops(X,Y):-cosenza(X,Z),not(Z=Y).']

jaccard: 1.0

AS desired: [['cosenza(1,1)', 'cosenza(1,2)', 'cosenza(1,3)', 'cosenza(1,4)', 'cosenza(2,1)', 'cosenza(2,2)', 'cosenza(2,3)', 'cosenza(2,4)', 'cosenza(3,1)', 'cosenza(3,2)', 'cosenza(3,3)', 'cosenza(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]
\AS obtained: [['cosenza(1,1)', 'cosenza(1,2)', 'cosenza(1,3)', 'cosenza(1,4)', 'cosenza(2,1)', 'cosenza(2,2)', 'cosenza(2,3)', 'cosenza(2,4)', 'cosenza(3,1)', 'cosenza(3,2)', 'cosenza(3,3)', 'cosenza(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]


743
preference

question: 
Compose an ASP script to ensure the "chicago" predicate with value "16" does not link to "quality". If this connection happens, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(16,"quality").[1@1]

parsed from model: 
:~assign(16,"quality").[1@1]

facts: 
chicago(1..20).

generated: 
Compose an ASP script to ensure the "chicago" predicate with value "16" does not link to "quality". If this connection happens, it incurs a cost of "1" at level "1".
Answer: :~assign(16,"quality").[1@1]
This script uses the "assign" predicate to check the connection between the "16" and "quality" labels. If the connection is found, it incurs a cost of "1" at level "1".
The predicate "city" includes fields "ID","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description","author","city","name","price","description

unique_rules: 
[':~assign(16,"quality").[1@1]']

jaccard: 1.0

AS desired: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'chicago(5)', 'chicago(6)', 'chicago(7)', 'chicago(8)', 'chicago(9)', 'chicago(10)', 'chicago(11)', 'chicago(12)', 'chicago(13)', 'chicago(14)', 'chicago(15)', 'chicago(16)', 'chicago(17)', 'chicago(18)', 'chicago(19)', 'chicago(20)']]
\AS obtained: [['chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'chicago(5)', 'chicago(6)', 'chicago(7)', 'chicago(8)', 'chicago(9)', 'chicago(10)', 'chicago(11)', 'chicago(12)', 'chicago(13)', 'chicago(14)', 'chicago(15)', 'chicago(16)', 'chicago(17)', 'chicago(18)', 'chicago(19)', 'chicago(20)']]


744
filtering

question: 
Formulate an ASP script that extracts values related to the "darkmagenta" label within the context of the "cloud" predicate.

answer from file: 
select(X):-cloud(X,"darkmagenta").

parsed from model: 
select(X):-cloud(X,"darkmagenta").

facts: 
cloud(1..5, "darkmagenta").

generated: 
Formulate an ASP script that extracts values related to the "darkmagenta" label within the context of the "cloud" predicate.
Answer: select(X):-cloud(X,"darkmagenta").
select(X):-cloud(X,"gray").
cloud(X,"darkmagenta").
cloud(X,"gray").
```

unique_rules: 
['select(X):-cloud(X,"darkmagenta").', 'select(X):-cloud(X,"gray").']

jaccard: 1.0

AS desired: [['cloud(1,"darkmagenta")', 'cloud(2,"darkmagenta")', 'cloud(3,"darkmagenta")', 'cloud(4,"darkmagenta")', 'cloud(5,"darkmagenta")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
\AS obtained: [['cloud(1,"darkmagenta")', 'cloud(2,"darkmagenta")', 'cloud(3,"darkmagenta")', 'cloud(4,"darkmagenta")', 'cloud(5,"darkmagenta")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


