
0
assignment

question: 
Compose an ASP program that maps a single label from the set "chicago","storm","singapore","black","roof","wall","strength","hair","desk" to elements determined by the predicate "toronto".

answer from file: 
assign(X,"chicago")|assign(X,"storm")|assign(X,"singapore")|assign(X,"black")|assign(X,"roof")|assign(X,"wall")|assign(X,"strength")|assign(X,"hair")|assign(X,"desk"):-toronto(X).

parsed from model: 
assign(X,"chicago")|assign(X,"storm")|assign(X,"singapore")|assign(X,"black")|assign(X,"roof")|assign(X,"wall")|assign(X,"strength")|assign(X,"hair")|assign(X,"desk"):-toronto(X).

facts: 
toronto(1..5).

generated: 
Compose an ASP program that maps a single label from the set "chicago","storm","singapore","black","roof","wall","strength","hair","desk" to elements determined by the predicate "toronto".
Answer: assign(X,"chicago")|assign(X,"storm")|assign(X,"singapore")|assign(X,"black")|assign(X,"roof")|assign(X,"wall")|assign(X,"strength")|assign(X,"hair")|assign(X,"desk"):-toronto(X).
:-assign(X,C),assign(C,X).
:-assign(X,C),C="rome".
:-assign(X,C),C="bike".
:-assign(X,C),C="table".
:-assign(X,C),C="tree".
:-assign(X,C),C="bike".
:-assign(X

unique_rules: 
['assign(X,"chicago")|assign(X,"storm")|assign(X,"singapore")|assign(X,"black")|assign(X,"roof")|assign(X,"wall")|assign(X,"strength")|assign(X,"hair")|assign(X,"desk"):-toronto(X).', ':-assign(X,C),assign(C,X).', ':-assign(X,C),C="rome".', ':-assign(X,C),C="bike".', ':-assign(X,C),C="table".', ':-assign(X,C),C="tree".', ':-assign(X']

jaccard: 1.0

AS desired:	[['toronto(1)', 'toronto(2)', 'toronto(3)', 'toronto(4)', 'toronto(5)', 'assign(1,"desk")', 'assign(2,"desk")', 'assign(3,"desk")', 'assign(4,"desk")', 'assign(5,"desk")']]
AS obtained:	[['toronto(1)', 'toronto(2)', 'toronto(3)', 'toronto(4)', 'toronto(5)', 'assign(1,"desk")', 'assign(2,"desk")', 'assign(3,"desk")', 'assign(4,"desk")', 'assign(5,"desk")']]


1
constraint

question: 
Develop an ASP application that avoids the predicate "quality" with a value of 15 being linked to the label "cairo".

answer from file: 
:-assign(15,cairo).

parsed from model: 
:-assign(15,C),c(C,"cairo").

facts: 
quality(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-quality(X).

generated: 
Develop an ASP application that avoids the predicate "quality" with a value of 15 being linked to the label "cairo".
Answer: :-assign(15,C),c(C,"cairo").
:-assign(15,C),not(c(C,"cairo")).
:-assign(15,C),c(C,"table").
:-assign(15,C),not(c(C,"table")).
:-assign(15,C),c(C,"bike").
:-assign(15,C),not(c(C,"bike")).
:-assign(15,C),c(C,"person").
:-assign(15,C),not(c(C,"person")).
:-assign(15,C),c(C,"table").
:-assign(1

unique_rules: 
[':-assign(15,C),c(C,"cairo").', ':-assign(15,C),not(c(C,"cairo")).', ':-assign(15,C),c(C,"table").', ':-assign(15,C),not(c(C,"table")).', ':-assign(15,C),c(C,"bike").', ':-assign(15,C),not(c(C,"bike")).', ':-assign(15,C),c(C,"person").', ':-assign(15,C),not(c(C,"person")).', ':-assign(1']

jaccard: 1.0

AS desired:	[['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'quality(6)', 'quality(7)', 'quality(8)', 'quality(9)', 'quality(10)', 'quality(11)', 'quality(12)', 'quality(13)', 'quality(14)', 'quality(15)', 'quality(16)', 'quality(17)', 'quality(18)', 'quality(19)', 'quality(20)']]
AS obtained:	[['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'quality(6)', 'quality(7)', 'quality(8)', 'quality(9)', 'quality(10)', 'quality(11)', 'quality(12)', 'quality(13)', 'quality(14)', 'quality(15)', 'quality(16)', 'quality(17)', 'quality(18)', 'quality(19)', 'quality(20)']]


2
combination

question: 
Compose an ASP script that generates the cross-product of elements between the predicates "flower" and "strength".

answer from file: 
combination(X,Y):-flower(X),strength(Y).

parsed from model: 
combination(X,Y):-flower(X,C),strength(Y,C).

facts: 
flower(1..4).strength(1..5).

generated: 
Compose an ASP script that generates the cross-product of elements between the predicates "flower" and "strength".
Answer: combination(X,Y):-flower(X,C),strength(Y,C).
combination(X,Y):-flower(X,C),strength(Y,C).
combination(X,Y):-flower(X,C),strength(Y,C).
combination(X,Y):-flower(X,C),strength(Y,C).
combination(X,Y):-flower(X,C),strength(Y,C).

unique_rules: 
['combination(X,Y):-flower(X,C),strength(Y,C).']

jaccard: 0.0

AS desired:	[['strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'flower(1)', 'flower(2)', 'flower(3)', 'flower(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
AS obtained:	[['flower(1)', 'flower(2)', 'flower(3)', 'flower(4)', 'strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)']]


3
join

question: 
Write an ASP program for the following problem. Consider predicate "moscow" having fields "ID","flowerID","strength","lake", and the predicate "flower" having fields "ID","lake","owner","strength". Define a predicate "moscow_flower" that associates to each "moscow" the "lake" of "flower".

answer from file: 
moscow_flower(X,Z):-moscow(X,Y,_,_),flower(Y,Z,_,_).

parsed from model: 
"moscow_flower(X,Z):-moscow(X,Y,_,_),flower(Y,Z,_,Y).

facts: 
moscow("ID","flowerID","strength","lake").flower("ID","lake","owner","strength").

generated: 
Write an ASP program for the following problem. Consider predicate "moscow" having fields "ID","flowerID","strength","lake", and the predicate "flower" having fields "ID","lake","owner","strength". Define a predicate "moscow_flower" that associates to each "moscow" the "lake" of "flower".
Answer: "moscow_flower(X,Z):-moscow(X,Y,_,_),flower(Y,Z,_,Y).
moscow_flower(X,Z):-moscow(X,Y,_,_),flower(Y,Z,_,Y).
```
Sure, here is the ASP program for the problem:

```
define(moscow(ID,Y,_,_),ID,Y,_,_),
define(flower(ID,Z,_,_),ID,Z,_,_).
define(moscow_flower(X,Z),moscow(X,Y,_,_),flower(Y,Z,_,Y).
```

unique_rules: 
['"moscow_flower(X,Z):-moscow(X,Y,_,_),flower(Y,Z,_,Y).', 'moscow_flower(X,Z):-moscow(X,Y,_,_),flower(Y,Z,_,Y).']

jaccard: 0.0

AS desired:	[['moscow("ID","flowerID","strength","lake")', 'flower("ID","lake","owner","strength")']]
AS obtained:	['error']


4
closure

question: 
Create an ASP solution that establishes the predicate "loops" through the transitive closure of the predicate "darkmagenta".

answer from file: 
loops(X,Y):-darkmagenta(X,Y).
loops(X,Y):-darkmagenta(X,Z),loops(Z,Y).

parsed from model: 
loops(X,Y):-darkmagenta(X,Y).
loops(X,Y):-darkmagenta(X,Z),loops(Z,Y).

facts: 
darkmagenta(1..3, 1..4).

generated: 
Create an ASP solution that establishes the predicate "loops" through the transitive closure of the predicate "darkmagenta".
Answer: loops(X,Y):-darkmagenta(X,Y).
loops(X,Y):-darkmagenta(X,Z),loops(Z,Y).
:-loops(X,Y).
:-loops(X,Y),darkmagenta(X,Z).
:-loops(X,Y),darkmagenta(X,Z),loops(Z,Y).
:-loops(X,Y),darkmagenta(X,Z),darkmagenta(Z,Y).

unique_rules: 
['loops(X,Y):-darkmagenta(X,Y).', 'loops(X,Y):-darkmagenta(X,Z),loops(Z,Y).', ':-loops(X,Y).', ':-loops(X,Y),darkmagenta(X,Z).', ':-loops(X,Y),darkmagenta(X,Z),loops(Z,Y).', ':-loops(X,Y),darkmagenta(X,Z),darkmagenta(Z,Y).']

jaccard: 1.0

AS desired:	[['darkmagenta(1,1)', 'darkmagenta(1,2)', 'darkmagenta(1,3)', 'darkmagenta(1,4)', 'darkmagenta(2,1)', 'darkmagenta(2,2)', 'darkmagenta(2,3)', 'darkmagenta(2,4)', 'darkmagenta(3,1)', 'darkmagenta(3,2)', 'darkmagenta(3,3)', 'darkmagenta(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]
AS obtained:	[['darkmagenta(1,1)', 'darkmagenta(1,2)', 'darkmagenta(1,3)', 'darkmagenta(1,4)', 'darkmagenta(2,1)', 'darkmagenta(2,2)', 'darkmagenta(2,3)', 'darkmagenta(2,4)', 'darkmagenta(3,1)', 'darkmagenta(3,2)', 'darkmagenta(3,3)', 'darkmagenta(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]


5
preference

question: 
Craft an ASP program to ensure that the predicate "chair" with value "4" is not associated with "storm", incurring a cost of "2" at level "1" if it does.

answer from file: 
:~assign(4,"storm").[2@1]

parsed from model: 
:~assign(4,"4").

facts: 
chair(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-chair(X).

generated: 
Craft an ASP program to ensure that the predicate "chair" with value "4" is not associated with "storm", incurring a cost of "2" at level "1" if it does.
Answer: :~assign(4,"4").
:-assign(2,1,"1").
:-assign(4, "storm").
[~assign(4, "storm", C), C == 2 @ 1]
:-assign(4, "storm", C), C == 2 @ 1.
:-assign(4, "storm", C), C == 2 @ 1.
:-assign(4, "storm", C), C == 2 @ 1.
:-assign(4, "storm", C), C == 2 @ 1.
:-assign(4, "storm", C), C == 2 @ 1.
:-assign(4

unique_rules: 
[':~assign(4,"4").', ':-assign(2,1,"1").', ':-assign(4, "storm").', ':-assign(4, "storm", C), C == 2 @ 1.', ':-assign(4']

jaccard: 0.0

AS desired:	[['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'chair(1)', 'chair(2)', 'chair(3)', 'chair(4)', 'chair(5)', 'chair(6)', 'chair(7)', 'chair(8)', 'chair(9)', 'chair(10)', 'chair(11)', 'chair(12)', 'chair(13)', 'chair(14)', 'chair(15)', 'chair(16)', 'chair(17)', 'chair(18)', 'chair(19)', 'chair(20)'], ['assign(1,"quality")', 'assign(2,"strength")', 'assign(3,"strength")', 'assign(4,"strength")', 'assign(5,"strength")', 'assign(6,"strength")', 'assign(7,"strength")', 'assign(8,"strength")', 'assign(9,"strength")', 'assign(10,"strength")', 'assign(11,"strength")', 'assign(12,"strength")', 'assign(13,"strength")', 'assign(14,"strength")', 'assign(15,"strength")', 'assign(16,"strength")', 'assign(17,"strength")', 'assign(18,"strength")', 'assign(19,"strength")', 'assign(20,"strength")', 'chair(1)', 'chair(2)', 'chair(3)', 'chair(4)', 'chair(5)', 'chair(6)', 'chair(7)', 'chair(8)', 'chair(9)', 'chair(10)', 'chair(11)', 'chair(12)', 'chair(13)', 'chair(14)', 'chair(15)', 'chair(16)', 'chair(17)', 'chair(18)', 'chair(19)', 'chair(20)']]
AS obtained:	['error']


6
filtering

question: 
Design an ASP application to fetch values tied to the label "chicago" within the context of the predicate "pink".

answer from file: 
select(X):-pink(X,"chicago").

parsed from model: 
select(X):-pink(X,"chicago").

facts: 
pink(1..5, "chicago").

generated: 
Design an ASP application to fetch values tied to the label "chicago" within the context of the predicate "pink".
Answer: select(X):-pink(X,"chicago").
select(X):-pink(X,"city").
select(X):-pink(X,"bike").
select(X):-pink(X,"table").
select(X):-pink(X,"person").
select(X):-pink(X,"food").
select(X):-pink(X,"bike").
select(X):-pink(X,"table").
select(X):-pink(X,"person").
select(X):-pink(X,"food").
select(X):-pink(X,"bike").
select(X):-pink(X,"table").
select(X):-pink(X,"person").
select(X):-

unique_rules: 
['select(X):-pink(X,"chicago").', 'select(X):-pink(X,"city").', 'select(X):-pink(X,"bike").', 'select(X):-pink(X,"table").', 'select(X):-pink(X,"person").', 'select(X):-pink(X,"food").', 'select(X):-']

jaccard: 1.0

AS desired:	[['pink(1,"chicago")', 'pink(2,"chicago")', 'pink(3,"chicago")', 'pink(4,"chicago")', 'pink(5,"chicago")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
AS obtained:	[['pink(1,"chicago")', 'pink(2,"chicago")', 'pink(3,"chicago")', 'pink(4,"chicago")', 'pink(5,"chicago")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


7
negative_filtering

question: 
Create an ASP application to fetch values associated with the predicate "desk" but not linked to the predicate "singapore" and labeled "storm".

answer from file: 
select(X):-desk(X),not singapore(X,"storm").

parsed from model: 
select(X):-desk(X),not singapore(X,"storm").

facts: 
desk(1..3).singapore(1,"storm").singapore(2,"desk").singapore(3,"lightblue").

generated: 
Create an ASP application to fetch values associated with the predicate "desk" but not linked to the predicate "singapore" and labeled "storm".
Answer: select(X):-desk(X),not singapore(X,"storm").
select(X):-select(X,_),not singapore(X,"storm").
select(X):-desk(X),not singapore(X,"storm").
select(X):-desk(X,C),not singapore(C, "storm").
select(X):-desk(X,C),not singapore(C, "rome").
select(X):-desk(X,C),not singapore(C, "bike").
select(X):-desk(X,C),not singapore(C, "table").
select(X):-desk(X,C),not singapore(C, "person").
select(X

unique_rules: 
['select(X):-desk(X),not singapore(X,"storm").', 'select(X):-select(X,_),not singapore(X,"storm").', 'select(X):-desk(X,C),not singapore(C, "storm").', 'select(X):-desk(X,C),not singapore(C, "rome").', 'select(X):-desk(X,C),not singapore(C, "bike").', 'select(X):-desk(X,C),not singapore(C, "table").', 'select(X):-desk(X,C),not singapore(C, "person").']

jaccard: 1.0

AS desired:	[['desk(1)', 'desk(2)', 'desk(3)', 'singapore(1,"storm")', 'singapore(2,"desk")', 'singapore(3,"lightblue")', 'select(2)', 'select(3)']]
AS obtained:	[['desk(1)', 'desk(2)', 'desk(3)', 'singapore(1,"storm")', 'singapore(2,"desk")', 'singapore(3,"lightblue")', 'select(2)', 'select(3)']]


8
numeric_filtering

question: 
Write an ASP solution to identify values tied to the predicate "cosenza" with a value different than 37.

answer from file: 
select(X):-cosenza(X,C),C!=37.

parsed from model: 
select(X):-cosenza(X,C),C!=37.

facts: 
cosenza(1..3, 1..100).

generated: 
Write an ASP solution to identify values tied to the predicate "cosenza" with a value different than 37.
Answer: select(X):-cosenza(X,C),C!=37.
select(X):-cosenza(X,C),C=37.
:-select(X).
:-select(X):-cosenza(X,C),C<37.
:-select(X).
:-select(X):-cosenza(X,C),C>37.
:-select(X).
:-select(X):-cosenza(X,C),C==37.
:-select(X).
:-select(X).
:-select(X).
:-select(X).
:-select(X).
:-select(X).
:-select(X).

unique_rules: 
['select(X):-cosenza(X,C),C!=37.', 'select(X):-cosenza(X,C),C=37.', ':-select(X).', ':-select(X):-cosenza(X,C),C<37.', ':-select(X):-cosenza(X,C),C>37.', ':-select(X):-cosenza(X,C),C==37.']

jaccard: 1.0

AS desired:	[['cosenza(1,1)', 'cosenza(1,2)', 'cosenza(1,3)', 'cosenza(1,4)', 'cosenza(1,5)', 'cosenza(1,6)', 'cosenza(1,7)', 'cosenza(1,8)', 'cosenza(1,9)', 'cosenza(1,10)', 'cosenza(1,11)', 'cosenza(1,12)', 'cosenza(1,13)', 'cosenza(1,14)', 'cosenza(1,15)', 'cosenza(1,16)', 'cosenza(1,17)', 'cosenza(1,18)', 'cosenza(1,19)', 'cosenza(1,20)', 'cosenza(1,21)', 'cosenza(1,22)', 'cosenza(1,23)', 'cosenza(1,24)', 'cosenza(1,25)', 'cosenza(1,26)', 'cosenza(1,27)', 'cosenza(1,28)', 'cosenza(1,29)', 'cosenza(1,30)', 'cosenza(1,31)', 'cosenza(1,32)', 'cosenza(1,33)', 'cosenza(1,34)', 'cosenza(1,35)', 'cosenza(1,36)', 'cosenza(1,37)', 'cosenza(1,38)', 'cosenza(1,39)', 'cosenza(1,40)', 'cosenza(1,41)', 'cosenza(1,42)', 'cosenza(1,43)', 'cosenza(1,44)', 'cosenza(1,45)', 'cosenza(1,46)', 'cosenza(1,47)', 'cosenza(1,48)', 'cosenza(1,49)', 'cosenza(1,50)', 'cosenza(1,51)', 'cosenza(1,52)', 'cosenza(1,53)', 'cosenza(1,54)', 'cosenza(1,55)', 'cosenza(1,56)', 'cosenza(1,57)', 'cosenza(1,58)', 'cosenza(1,59)', 'cosenza(1,60)', 'cosenza(1,61)', 'cosenza(1,62)', 'cosenza(1,63)', 'cosenza(1,64)', 'cosenza(1,65)', 'cosenza(1,66)', 'cosenza(1,67)', 'cosenza(1,68)', 'cosenza(1,69)', 'cosenza(1,70)', 'cosenza(1,71)', 'cosenza(1,72)', 'cosenza(1,73)', 'cosenza(1,74)', 'cosenza(1,75)', 'cosenza(1,76)', 'cosenza(1,77)', 'cosenza(1,78)', 'cosenza(1,79)', 'cosenza(1,80)', 'cosenza(1,81)', 'cosenza(1,82)', 'cosenza(1,83)', 'cosenza(1,84)', 'cosenza(1,85)', 'cosenza(1,86)', 'cosenza(1,87)', 'cosenza(1,88)', 'cosenza(1,89)', 'cosenza(1,90)', 'cosenza(1,91)', 'cosenza(1,92)', 'cosenza(1,93)', 'cosenza(1,94)', 'cosenza(1,95)', 'cosenza(1,96)', 'cosenza(1,97)', 'cosenza(1,98)', 'cosenza(1,99)', 'cosenza(1,100)', 'cosenza(2,1)', 'cosenza(2,2)', 'cosenza(2,3)', 'cosenza(2,4)', 'cosenza(2,5)', 'cosenza(2,6)', 'cosenza(2,7)', 'cosenza(2,8)', 'cosenza(2,9)', 'cosenza(2,10)', 'cosenza(2,11)', 'cosenza(2,12)', 'cosenza(2,13)', 'cosenza(2,14)', 'cosenza(2,15)', 'cosenza(2,16)', 'cosenza(2,17)', 'cosenza(2,18)', 'cosenza(2,19)', 'cosenza(2,20)', 'cosenza(2,21)', 'cosenza(2,22)', 'cosenza(2,23)', 'cosenza(2,24)', 'cosenza(2,25)', 'cosenza(2,26)', 'cosenza(2,27)', 'cosenza(2,28)', 'cosenza(2,29)', 'cosenza(2,30)', 'cosenza(2,31)', 'cosenza(2,32)', 'cosenza(2,33)', 'cosenza(2,34)', 'cosenza(2,35)', 'cosenza(2,36)', 'cosenza(2,37)', 'cosenza(2,38)', 'cosenza(2,39)', 'cosenza(2,40)', 'cosenza(2,41)', 'cosenza(2,42)', 'cosenza(2,43)', 'cosenza(2,44)', 'cosenza(2,45)', 'cosenza(2,46)', 'cosenza(2,47)', 'cosenza(2,48)', 'cosenza(2,49)', 'cosenza(2,50)', 'cosenza(2,51)', 'cosenza(2,52)', 'cosenza(2,53)', 'cosenza(2,54)', 'cosenza(2,55)', 'cosenza(2,56)', 'cosenza(2,57)', 'cosenza(2,58)', 'cosenza(2,59)', 'cosenza(2,60)', 'cosenza(2,61)', 'cosenza(2,62)', 'cosenza(2,63)', 'cosenza(2,64)', 'cosenza(2,65)', 'cosenza(2,66)', 'cosenza(2,67)', 'cosenza(2,68)', 'cosenza(2,69)', 'cosenza(2,70)', 'cosenza(2,71)', 'cosenza(2,72)', 'cosenza(2,73)', 'cosenza(2,74)', 'cosenza(2,75)', 'cosenza(2,76)', 'cosenza(2,77)', 'cosenza(2,78)', 'cosenza(2,79)', 'cosenza(2,80)', 'cosenza(2,81)', 'cosenza(2,82)', 'cosenza(2,83)', 'cosenza(2,84)', 'cosenza(2,85)', 'cosenza(2,86)', 'cosenza(2,87)', 'cosenza(2,88)', 'cosenza(2,89)', 'cosenza(2,90)', 'cosenza(2,91)', 'cosenza(2,92)', 'cosenza(2,93)', 'cosenza(2,94)', 'cosenza(2,95)', 'cosenza(2,96)', 'cosenza(2,97)', 'cosenza(2,98)', 'cosenza(2,99)', 'cosenza(2,100)', 'cosenza(3,1)', 'cosenza(3,2)', 'cosenza(3,3)', 'cosenza(3,4)', 'cosenza(3,5)', 'cosenza(3,6)', 'cosenza(3,7)', 'cosenza(3,8)', 'cosenza(3,9)', 'cosenza(3,10)', 'cosenza(3,11)', 'cosenza(3,12)', 'cosenza(3,13)', 'cosenza(3,14)', 'cosenza(3,15)', 'cosenza(3,16)', 'cosenza(3,17)', 'cosenza(3,18)', 'cosenza(3,19)', 'cosenza(3,20)', 'cosenza(3,21)', 'cosenza(3,22)', 'cosenza(3,23)', 'cosenza(3,24)', 'cosenza(3,25)', 'cosenza(3,26)', 'cosenza(3,27)', 'cosenza(3,28)', 'cosenza(3,29)', 'cosenza(3,30)', 'cosenza(3,31)', 'cosenza(3,32)', 'cosenza(3,33)', 'cosenza(3,34)', 'cosenza(3,35)', 'cosenza(3,36)', 'cosenza(3,37)', 'cosenza(3,38)', 'cosenza(3,39)', 'cosenza(3,40)', 'cosenza(3,41)', 'cosenza(3,42)', 'cosenza(3,43)', 'cosenza(3,44)', 'cosenza(3,45)', 'cosenza(3,46)', 'cosenza(3,47)', 'cosenza(3,48)', 'cosenza(3,49)', 'cosenza(3,50)', 'cosenza(3,51)', 'cosenza(3,52)', 'cosenza(3,53)', 'cosenza(3,54)', 'cosenza(3,55)', 'cosenza(3,56)', 'cosenza(3,57)', 'cosenza(3,58)', 'cosenza(3,59)', 'cosenza(3,60)', 'cosenza(3,61)', 'cosenza(3,62)', 'cosenza(3,63)', 'cosenza(3,64)', 'cosenza(3,65)', 'cosenza(3,66)', 'cosenza(3,67)', 'cosenza(3,68)', 'cosenza(3,69)', 'cosenza(3,70)', 'cosenza(3,71)', 'cosenza(3,72)', 'cosenza(3,73)', 'cosenza(3,74)', 'cosenza(3,75)', 'cosenza(3,76)', 'cosenza(3,77)', 'cosenza(3,78)', 'cosenza(3,79)', 'cosenza(3,80)', 'cosenza(3,81)', 'cosenza(3,82)', 'cosenza(3,83)', 'cosenza(3,84)', 'cosenza(3,85)', 'cosenza(3,86)', 'cosenza(3,87)', 'cosenza(3,88)', 'cosenza(3,89)', 'cosenza(3,90)', 'cosenza(3,91)', 'cosenza(3,92)', 'cosenza(3,93)', 'cosenza(3,94)', 'cosenza(3,95)', 'cosenza(3,96)', 'cosenza(3,97)', 'cosenza(3,98)', 'cosenza(3,99)', 'cosenza(3,100)', 'select(1)', 'select(2)', 'select(3)']]
AS obtained:	[['cosenza(1,1)', 'cosenza(1,2)', 'cosenza(1,3)', 'cosenza(1,4)', 'cosenza(1,5)', 'cosenza(1,6)', 'cosenza(1,7)', 'cosenza(1,8)', 'cosenza(1,9)', 'cosenza(1,10)', 'cosenza(1,11)', 'cosenza(1,12)', 'cosenza(1,13)', 'cosenza(1,14)', 'cosenza(1,15)', 'cosenza(1,16)', 'cosenza(1,17)', 'cosenza(1,18)', 'cosenza(1,19)', 'cosenza(1,20)', 'cosenza(1,21)', 'cosenza(1,22)', 'cosenza(1,23)', 'cosenza(1,24)', 'cosenza(1,25)', 'cosenza(1,26)', 'cosenza(1,27)', 'cosenza(1,28)', 'cosenza(1,29)', 'cosenza(1,30)', 'cosenza(1,31)', 'cosenza(1,32)', 'cosenza(1,33)', 'cosenza(1,34)', 'cosenza(1,35)', 'cosenza(1,36)', 'cosenza(1,37)', 'cosenza(1,38)', 'cosenza(1,39)', 'cosenza(1,40)', 'cosenza(1,41)', 'cosenza(1,42)', 'cosenza(1,43)', 'cosenza(1,44)', 'cosenza(1,45)', 'cosenza(1,46)', 'cosenza(1,47)', 'cosenza(1,48)', 'cosenza(1,49)', 'cosenza(1,50)', 'cosenza(1,51)', 'cosenza(1,52)', 'cosenza(1,53)', 'cosenza(1,54)', 'cosenza(1,55)', 'cosenza(1,56)', 'cosenza(1,57)', 'cosenza(1,58)', 'cosenza(1,59)', 'cosenza(1,60)', 'cosenza(1,61)', 'cosenza(1,62)', 'cosenza(1,63)', 'cosenza(1,64)', 'cosenza(1,65)', 'cosenza(1,66)', 'cosenza(1,67)', 'cosenza(1,68)', 'cosenza(1,69)', 'cosenza(1,70)', 'cosenza(1,71)', 'cosenza(1,72)', 'cosenza(1,73)', 'cosenza(1,74)', 'cosenza(1,75)', 'cosenza(1,76)', 'cosenza(1,77)', 'cosenza(1,78)', 'cosenza(1,79)', 'cosenza(1,80)', 'cosenza(1,81)', 'cosenza(1,82)', 'cosenza(1,83)', 'cosenza(1,84)', 'cosenza(1,85)', 'cosenza(1,86)', 'cosenza(1,87)', 'cosenza(1,88)', 'cosenza(1,89)', 'cosenza(1,90)', 'cosenza(1,91)', 'cosenza(1,92)', 'cosenza(1,93)', 'cosenza(1,94)', 'cosenza(1,95)', 'cosenza(1,96)', 'cosenza(1,97)', 'cosenza(1,98)', 'cosenza(1,99)', 'cosenza(1,100)', 'cosenza(2,1)', 'cosenza(2,2)', 'cosenza(2,3)', 'cosenza(2,4)', 'cosenza(2,5)', 'cosenza(2,6)', 'cosenza(2,7)', 'cosenza(2,8)', 'cosenza(2,9)', 'cosenza(2,10)', 'cosenza(2,11)', 'cosenza(2,12)', 'cosenza(2,13)', 'cosenza(2,14)', 'cosenza(2,15)', 'cosenza(2,16)', 'cosenza(2,17)', 'cosenza(2,18)', 'cosenza(2,19)', 'cosenza(2,20)', 'cosenza(2,21)', 'cosenza(2,22)', 'cosenza(2,23)', 'cosenza(2,24)', 'cosenza(2,25)', 'cosenza(2,26)', 'cosenza(2,27)', 'cosenza(2,28)', 'cosenza(2,29)', 'cosenza(2,30)', 'cosenza(2,31)', 'cosenza(2,32)', 'cosenza(2,33)', 'cosenza(2,34)', 'cosenza(2,35)', 'cosenza(2,36)', 'cosenza(2,37)', 'cosenza(2,38)', 'cosenza(2,39)', 'cosenza(2,40)', 'cosenza(2,41)', 'cosenza(2,42)', 'cosenza(2,43)', 'cosenza(2,44)', 'cosenza(2,45)', 'cosenza(2,46)', 'cosenza(2,47)', 'cosenza(2,48)', 'cosenza(2,49)', 'cosenza(2,50)', 'cosenza(2,51)', 'cosenza(2,52)', 'cosenza(2,53)', 'cosenza(2,54)', 'cosenza(2,55)', 'cosenza(2,56)', 'cosenza(2,57)', 'cosenza(2,58)', 'cosenza(2,59)', 'cosenza(2,60)', 'cosenza(2,61)', 'cosenza(2,62)', 'cosenza(2,63)', 'cosenza(2,64)', 'cosenza(2,65)', 'cosenza(2,66)', 'cosenza(2,67)', 'cosenza(2,68)', 'cosenza(2,69)', 'cosenza(2,70)', 'cosenza(2,71)', 'cosenza(2,72)', 'cosenza(2,73)', 'cosenza(2,74)', 'cosenza(2,75)', 'cosenza(2,76)', 'cosenza(2,77)', 'cosenza(2,78)', 'cosenza(2,79)', 'cosenza(2,80)', 'cosenza(2,81)', 'cosenza(2,82)', 'cosenza(2,83)', 'cosenza(2,84)', 'cosenza(2,85)', 'cosenza(2,86)', 'cosenza(2,87)', 'cosenza(2,88)', 'cosenza(2,89)', 'cosenza(2,90)', 'cosenza(2,91)', 'cosenza(2,92)', 'cosenza(2,93)', 'cosenza(2,94)', 'cosenza(2,95)', 'cosenza(2,96)', 'cosenza(2,97)', 'cosenza(2,98)', 'cosenza(2,99)', 'cosenza(2,100)', 'cosenza(3,1)', 'cosenza(3,2)', 'cosenza(3,3)', 'cosenza(3,4)', 'cosenza(3,5)', 'cosenza(3,6)', 'cosenza(3,7)', 'cosenza(3,8)', 'cosenza(3,9)', 'cosenza(3,10)', 'cosenza(3,11)', 'cosenza(3,12)', 'cosenza(3,13)', 'cosenza(3,14)', 'cosenza(3,15)', 'cosenza(3,16)', 'cosenza(3,17)', 'cosenza(3,18)', 'cosenza(3,19)', 'cosenza(3,20)', 'cosenza(3,21)', 'cosenza(3,22)', 'cosenza(3,23)', 'cosenza(3,24)', 'cosenza(3,25)', 'cosenza(3,26)', 'cosenza(3,27)', 'cosenza(3,28)', 'cosenza(3,29)', 'cosenza(3,30)', 'cosenza(3,31)', 'cosenza(3,32)', 'cosenza(3,33)', 'cosenza(3,34)', 'cosenza(3,35)', 'cosenza(3,36)', 'cosenza(3,37)', 'cosenza(3,38)', 'cosenza(3,39)', 'cosenza(3,40)', 'cosenza(3,41)', 'cosenza(3,42)', 'cosenza(3,43)', 'cosenza(3,44)', 'cosenza(3,45)', 'cosenza(3,46)', 'cosenza(3,47)', 'cosenza(3,48)', 'cosenza(3,49)', 'cosenza(3,50)', 'cosenza(3,51)', 'cosenza(3,52)', 'cosenza(3,53)', 'cosenza(3,54)', 'cosenza(3,55)', 'cosenza(3,56)', 'cosenza(3,57)', 'cosenza(3,58)', 'cosenza(3,59)', 'cosenza(3,60)', 'cosenza(3,61)', 'cosenza(3,62)', 'cosenza(3,63)', 'cosenza(3,64)', 'cosenza(3,65)', 'cosenza(3,66)', 'cosenza(3,67)', 'cosenza(3,68)', 'cosenza(3,69)', 'cosenza(3,70)', 'cosenza(3,71)', 'cosenza(3,72)', 'cosenza(3,73)', 'cosenza(3,74)', 'cosenza(3,75)', 'cosenza(3,76)', 'cosenza(3,77)', 'cosenza(3,78)', 'cosenza(3,79)', 'cosenza(3,80)', 'cosenza(3,81)', 'cosenza(3,82)', 'cosenza(3,83)', 'cosenza(3,84)', 'cosenza(3,85)', 'cosenza(3,86)', 'cosenza(3,87)', 'cosenza(3,88)', 'cosenza(3,89)', 'cosenza(3,90)', 'cosenza(3,91)', 'cosenza(3,92)', 'cosenza(3,93)', 'cosenza(3,94)', 'cosenza(3,95)', 'cosenza(3,96)', 'cosenza(3,97)', 'cosenza(3,98)', 'cosenza(3,99)', 'cosenza(3,100)', 'select(1)', 'select(2)', 'select(3)']]


9
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "pink" having fields "ID","strength","wallID", and the predicate "wall" having fields "ID","strength". Define a predicate "pink_wall" that associates to each pink the attribute strength of wall. In addition, select all values associated to the predicate "pink_wall" with label "moscow".

answer from file: 
pink_wall(X,Z):-pink(X,_,Y),wall(Y,Z).
select(X):-pink_wall(X,"moscow").

parsed from model: 
pink_wall(X,Z):-pink(X,_,Y),wall(Y,Z).
select(X):-pink_wall(X,"moscow").

facts: 
pink(0..3,"barcelona",0..4).wall(0..2,"roof").wall(2..4,"moscow").

generated: 
Write an ASP program for the following problem. Consider predicate "pink" having fields "ID","strength","wallID", and the predicate "wall" having fields "ID","strength". Define a predicate "pink_wall" that associates to each pink the attribute strength of wall. In addition, select all values associated to the predicate "pink_wall" with label "moscow".
Answer: pink_wall(X,Z):-pink(X,_,Y),wall(Y,Z).
select(X):-pink_wall(X,"moscow").
```
Sure, here is the ASP program for the problem:

```
pink(X,Y,Z):-pink(X,_,Y),wall(Y,Z).
select(X):-pink_wall(X,"moscow").
```

unique_rules: 
['pink_wall(X,Z):-pink(X,_,Y),wall(Y,Z).', 'select(X):-pink_wall(X,"moscow").', 'pink(X,Y,Z):-pink(X,_,Y),wall(Y,Z).']

jaccard: 1.0

AS desired:	[['wall(2,"moscow")', 'wall(3,"moscow")', 'wall(4,"moscow")', 'wall(0,"roof")', 'wall(1,"roof")', 'wall(2,"roof")', 'pink_wall(0,"roof")', 'pink_wall(0,"moscow")', 'pink_wall(1,"roof")', 'pink_wall(1,"moscow")', 'pink_wall(2,"roof")', 'pink_wall(2,"moscow")', 'pink_wall(3,"roof")', 'pink_wall(3,"moscow")', 'select(0)', 'select(1)', 'select(2)', 'select(3)', 'pink(0,"barcelona",0)', 'pink(0,"barcelona",1)', 'pink(0,"barcelona",2)', 'pink(0,"barcelona",3)', 'pink(0,"barcelona",4)', 'pink(1,"barcelona",0)', 'pink(1,"barcelona",1)', 'pink(1,"barcelona",2)', 'pink(1,"barcelona",3)', 'pink(1,"barcelona",4)', 'pink(2,"barcelona",0)', 'pink(2,"barcelona",1)', 'pink(2,"barcelona",2)', 'pink(2,"barcelona",3)', 'pink(2,"barcelona",4)', 'pink(3,"barcelona",0)', 'pink(3,"barcelona",1)', 'pink(3,"barcelona",2)', 'pink(3,"barcelona",3)', 'pink(3,"barcelona",4)']]
AS obtained:	[['wall(2,"moscow")', 'wall(3,"moscow")', 'wall(4,"moscow")', 'wall(0,"roof")', 'wall(1,"roof")', 'wall(2,"roof")', 'pink_wall(0,"roof")', 'pink_wall(0,"moscow")', 'pink_wall(1,"roof")', 'pink_wall(1,"moscow")', 'pink_wall(2,"roof")', 'pink_wall(2,"moscow")', 'pink_wall(3,"roof")', 'pink_wall(3,"moscow")', 'select(0)', 'select(1)', 'select(2)', 'select(3)', 'pink(0,"barcelona",0)', 'pink(0,"barcelona",1)', 'pink(0,"barcelona",2)', 'pink(0,"barcelona",3)', 'pink(0,"barcelona",4)', 'pink(1,"barcelona",0)', 'pink(1,"barcelona",1)', 'pink(1,"barcelona",2)', 'pink(1,"barcelona",3)', 'pink(1,"barcelona",4)', 'pink(2,"barcelona",0)', 'pink(2,"barcelona",1)', 'pink(2,"barcelona",2)', 'pink(2,"barcelona",3)', 'pink(2,"barcelona",4)', 'pink(3,"barcelona",0)', 'pink(3,"barcelona",1)', 'pink(3,"barcelona",2)', 'pink(3,"barcelona",3)', 'pink(3,"barcelona",4)']]


10
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate white. The labels are flower,butterfly. Then prevent the predicate "white" with value "9" from having label "butterfly".

answer from file: 
assign(X,"flower")|assign(X,"butterfly"):-white(X).
:-assign(9, "butterfly").

parsed from model: 
assign(X,"flower")|assign(X,"butterfly"):-white(X).
:-assign(9, "butterfly").

facts: 
white(1..20).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate white. The labels are flower,butterfly. Then prevent the predicate "white" with value "9" from having label "butterfly".
Answer: assign(X,"flower")|assign(X,"butterfly"):-white(X).
:-assign(9, "butterfly").
:-assign(X, "flower"):-white(X).
:-assign(X, "butterfly"):-white(X).
:-assign(X, "bike"):-white(X).
:-assign(X, "bike"):-white(X).
:-assign(X, "bike"):-white(X).
:-assign(X, "bike"):-white(X).
:-assign(X, "bike"):-white(X).
:-assign(X, "bike"):-white(X).
:-assign(X, "bike

unique_rules: 
['assign(X,"flower")|assign(X,"butterfly"):-white(X).', ':-assign(9, "butterfly").', ':-assign(X, "flower"):-white(X).', ':-assign(X, "butterfly"):-white(X).', ':-assign(X, "bike"):-white(X).', ':-assign(X, "bike']

jaccard: 1.0

AS desired:	[['white(1)', 'white(2)', 'white(3)', 'white(4)', 'white(5)', 'white(6)', 'white(7)', 'white(8)', 'white(9)', 'white(10)', 'white(11)', 'white(12)', 'white(13)', 'white(14)', 'white(15)', 'white(16)', 'white(17)', 'white(18)', 'white(19)', 'white(20)', 'assign(1,"butterfly")', 'assign(2,"flower")', 'assign(3,"flower")', 'assign(4,"flower")', 'assign(5,"flower")', 'assign(6,"flower")', 'assign(7,"flower")', 'assign(8,"butterfly")', 'assign(9,"flower")', 'assign(10,"flower")', 'assign(11,"flower")', 'assign(12,"flower")', 'assign(13,"flower")', 'assign(14,"flower")', 'assign(15,"flower")', 'assign(16,"flower")', 'assign(17,"butterfly")', 'assign(18,"flower")', 'assign(19,"flower")', 'assign(20,"flower")']]
AS obtained:	[['white(1)', 'white(2)', 'white(3)', 'white(4)', 'white(5)', 'white(6)', 'white(7)', 'white(8)', 'white(9)', 'white(10)', 'white(11)', 'white(12)', 'white(13)', 'white(14)', 'white(15)', 'white(16)', 'white(17)', 'white(18)', 'white(19)', 'white(20)', 'assign(1,"butterfly")', 'assign(2,"flower")', 'assign(3,"flower")', 'assign(4,"flower")', 'assign(5,"flower")', 'assign(6,"flower")', 'assign(7,"flower")', 'assign(8,"butterfly")', 'assign(9,"flower")', 'assign(10,"flower")', 'assign(11,"flower")', 'assign(12,"flower")', 'assign(13,"flower")', 'assign(14,"flower")', 'assign(15,"flower")', 'assign(16,"flower")', 'assign(17,"butterfly")', 'assign(18,"flower")', 'assign(19,"flower")', 'assign(20,"flower")']]


11
combination_negative_filtering

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "darkmagenta" and "mumbai". In addition, select all values associated with predicate combination but not associated with predicate "lake" and label "storm".

answer from file: 
combination(X,Y):-darkmagenta(X),mumbai(Y).
select(X):-combination(X,_), not lake(X, "storm").

parsed from model: 
combination(X,Y):-darkmagenta(X),mumbai(Y).
select(X,Y):-combination(X,Y), not lake(X, "storm").

facts: 
darkmagenta(1..4).mumbai(1..5).lake(0..1,"storm").lake(2..3,"cloud").lake(2..3,"roof").

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "darkmagenta" and "mumbai". In addition, select all values associated with predicate combination but not associated with predicate "lake" and label "storm".
Answer: combination(X,Y):-darkmagenta(X),mumbai(Y).
select(X,Y):-combination(X,Y), not lake(X, "storm").
combination(X,Y):-darkmagenta(X), not mumbai(Y).
select(X,Y):-combination(X,Y), not lake(X, "storm").
combination(X,Y):-darkmagenta(X), mumbai(Y).
select(X,Y):-combination(X,Y), not lake(X, "storm").
```

unique_rules: 
['combination(X,Y):-darkmagenta(X),mumbai(Y).', 'select(X,Y):-combination(X,Y), not lake(X, "storm").', 'combination(X,Y):-darkmagenta(X), not mumbai(Y).', 'combination(X,Y):-darkmagenta(X), mumbai(Y).']

jaccard: 0.0

AS desired:	[['mumbai(1)', 'mumbai(2)', 'mumbai(3)', 'mumbai(4)', 'mumbai(5)', 'darkmagenta(1)', 'darkmagenta(2)', 'darkmagenta(3)', 'darkmagenta(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)', 'lake(2,"roof")', 'lake(3,"roof")', 'lake(2,"cloud")', 'lake(3,"cloud")', 'lake(0,"storm")', 'lake(1,"storm")', 'select(2)', 'select(3)', 'select(4)']]
AS obtained:	[['mumbai(1)', 'mumbai(2)', 'mumbai(3)', 'mumbai(4)', 'mumbai(5)', 'darkmagenta(1)', 'darkmagenta(2)', 'darkmagenta(3)', 'darkmagenta(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)', 'lake(2,"roof")', 'lake(3,"roof")', 'lake(2,"cloud")', 'lake(3,"cloud")', 'lake(0,"storm")', 'lake(1,"storm")', 'select(2,1)', 'select(2,2)', 'select(2,3)', 'select(2,4)', 'select(2,5)', 'select(3,1)', 'select(3,2)', 'select(3,3)', 'select(3,4)', 'select(3,5)', 'select(4,1)', 'select(4,2)', 'select(4,3)', 'select(4,4)', 'select(4,5)']]


12
assignment

question: 
Design an ASP script to connect each element, as determined by the predicate "quality", with one label from "barcelona","darkmagenta","quality","delhi","hair","weight","chicago","lake".

answer from file: 
assign(X,"barcelona")|assign(X,"darkmagenta")|assign(X,"quality")|assign(X,"delhi")|assign(X,"hair")|assign(X,"weight")|assign(X,"chicago")|assign(X,"lake"):-quality(X).

parsed from model: 
assign(X,"barcelona")|assign(X,"darkmagenta")|assign(X,"quality")|assign(X,"delhi")|assign(X,"hair")|assign(X,"weight")|assign(X,"chicago")|assign(X,"lake"):-quality(X).

facts: 
quality(1..5).

generated: 
Design an ASP script to connect each element, as determined by the predicate "quality", with one label from "barcelona","darkmagenta","quality","delhi","hair","weight","chicago","lake".
Answer: assign(X,"barcelona")|assign(X,"darkmagenta")|assign(X,"quality")|assign(X,"delhi")|assign(X,"hair")|assign(X,"weight")|assign(X,"chicago")|assign(X,"lake"):-quality(X).
:-assign(X,C),C=assign(X,"bike").
:-assign(X,C),C=assign(X,"car").
:-assign(X,C),C=assign(X,"bike").
:-assign(X,C),C=assign(X,"table").
:-assign(X,C),C=assign(X,"table").
:-assign(X

unique_rules: 
['assign(X,"barcelona")|assign(X,"darkmagenta")|assign(X,"quality")|assign(X,"delhi")|assign(X,"hair")|assign(X,"weight")|assign(X,"chicago")|assign(X,"lake"):-quality(X).', ':-assign(X,C),C=assign(X,"bike").', ':-assign(X,C),C=assign(X,"car").', ':-assign(X,C),C=assign(X,"table").', ':-assign(X']

jaccard: 1.0

AS desired:	[['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'assign(1,"lake")', 'assign(2,"lake")', 'assign(3,"chicago")', 'assign(4,"lake")', 'assign(5,"lake")']]
AS obtained:	[['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'assign(1,"lake")', 'assign(2,"lake")', 'assign(3,"chicago")', 'assign(4,"lake")', 'assign(5,"lake")']]


13
constraint

question: 
Formulate an ASP code that ensures the predicate "lake" having value 9 is not connected to the label "strength".

answer from file: 
:-assign(9,strength).

parsed from model: 
:-assign(9,C).[C="strength"].

facts: 
lake(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-lake(X).

generated: 
Formulate an ASP code that ensures the predicate "lake" having value 9 is not connected to the label "strength".
Answer: :-assign(9,C).[C="strength"].
:-assign(9,C).[C="bike"].
:-assign(9,C).[C="table"].
:-assign(9,C).[C="person"].
:-assign(9,C).[C="food"].
:-assign(9,C).[C="bike"].
:-assign(9,C).[C="table"].
:-assign(9,C).[C="person"].
:-assign(9,C).[C="food"].
:-assign(9,C).[C="bike"].
:-assign(9,C).[C="table"].
:-assign(9

unique_rules: 
[':-assign(9,C).[C="strength"].', ':-assign(9,C).[C="bike"].', ':-assign(9,C).[C="table"].', ':-assign(9,C).[C="person"].', ':-assign(9,C).[C="food"].', ':-assign(9']

jaccard: 0.0

AS desired:	[['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lake(6)', 'lake(7)', 'lake(8)', 'lake(9)', 'lake(10)', 'lake(11)', 'lake(12)', 'lake(13)', 'lake(14)', 'lake(15)', 'lake(16)', 'lake(17)', 'lake(18)', 'lake(19)', 'lake(20)']]
AS obtained:	['error']


14
combination

question: 
Compose an ASP script to calculate the Cartesian product of elements represented by the predicates "white" and "butterfly".

answer from file: 
combination(X,Y):-white(X),butterfly(Y).

parsed from model: 
combination(X,Y):-white(X),butterfly(Y).

facts: 
white(1..4).butterfly(1..5).

generated: 
Compose an ASP script to calculate the Cartesian product of elements represented by the predicates "white" and "butterfly".
Answer: combination(X,Y):-white(X),butterfly(Y).
combination(X,Y):-white(X),Y(Y).
combination(X,Y):-Y(X),white(Y).

unique_rules: 
['combination(X,Y):-white(X),butterfly(Y).', 'combination(X,Y):-white(X),Y(Y).', 'combination(X,Y):-Y(X),white(Y).']

jaccard: 1.0

AS desired:	[['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)', 'white(1)', 'white(2)', 'white(3)', 'white(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
AS obtained:	[['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)', 'white(1)', 'white(2)', 'white(3)', 'white(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


15
join

question: 
Write an ASP application to address the problem where the predicate "singapore" has fields "ID","laptopID","owner","lake","hair", and the predicate "laptop" has fields "ID","weight","strength","quality". Define the predicate "singapore_laptop" that associates each singapore with the weight of laptop.

answer from file: 
singapore_laptop(X,Z):-singapore(X,Y,_,_,_),laptop(Y,Z,_,_).

parsed from model: 
singapore_laptop(X,Z):-singapore(X,Y,_,_,_),laptop(Y,Z,_,_,_).

facts: 
singapore("ID","laptopID","owner","lake","hair").laptop("ID","weight","strength","quality").

generated: 
Write an ASP application to address the problem where the predicate "singapore" has fields "ID","laptopID","owner","lake","hair", and the predicate "laptop" has fields "ID","weight","strength","quality". Define the predicate "singapore_laptop" that associates each singapore with the weight of laptop.
Answer: singapore_laptop(X,Z):-singapore(X,Y,_,_,_),laptop(Y,Z,_,_,_).
singapore_laptop(X,Z):-singapore(X,Y,_,_,_),laptop(Y,Z,_,_,_).
```
Sure, here is the ASP application to address the problem:

```
# Define the predicate "singapore"
singapore(X,Y,_,_,_) :-
    ID(X,Y,_),
    laptop(Y,_,_,_,_).

# Define the predicate "laptop"
laptop(X,Y,_,_,_) :-
    ID(X,Y,_),
    weight

unique_rules: 
['singapore_laptop(X,Z):-singapore(X,Y,_,_,_),laptop(Y,Z,_,_,_).', 'singapore(X,Y,_,_,_) :-', 'laptop(X,Y,_,_,_) :-']

jaccard: 1.0

AS desired:	[['singapore("ID","laptopID","owner","lake","hair")', 'laptop("ID","weight","strength","quality")']]
AS obtained:	[['singapore("ID","laptopID","owner","lake","hair")', 'laptop("ID","weight","strength","quality")']]


16
closure

question: 
Formulate an ASP solution to establish the transitive closure of the predicate "toronto", defined as "loops".

answer from file: 
loops(X,Y):-toronto(X,Y).
loops(X,Y):-toronto(X,Z),loops(Z,Y).

parsed from model: 


facts: 
toronto(1..3, 1..4).

generated: 
Formulate an ASP solution to establish the transitive closure of the predicate "toronto", defined as "loops".
Answer: transitive closure of "loops" = "loops".
Explanation: A transitive closure of a predicate is a predicate that is a subset of the transitive closure of the predicate. In this case, the transitive closure of "loops" is "loops". This is because if a set of elements is loops, then the transitive closure of that set is also loops.

unique_rules: 
[]

jaccard: 0.0

AS desired:	[['toronto(1,1)', 'toronto(1,2)', 'toronto(1,3)', 'toronto(1,4)', 'toronto(2,1)', 'toronto(2,2)', 'toronto(2,3)', 'toronto(2,4)', 'toronto(3,1)', 'toronto(3,2)', 'toronto(3,3)', 'toronto(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]
AS obtained:	[['toronto(1,1)', 'toronto(1,2)', 'toronto(1,3)', 'toronto(1,4)', 'toronto(2,1)', 'toronto(2,2)', 'toronto(2,3)', 'toronto(2,4)', 'toronto(3,1)', 'toronto(3,2)', 'toronto(3,3)', 'toronto(3,4)']]


17
preference

question: 
Develop an ASP script to keep the predicate "strength" with value "8" unlinked from "butterfly". Any occurrence incurs a cost of "2" at level "2".

answer from file: 
:~assign(8,"butterfly").[2@2]

parsed from model: 
:~assign(8,"8").

facts: 
strength(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-strength(X).

generated: 
Develop an ASP script to keep the predicate "strength" with value "8" unlinked from "butterfly". Any occurrence incurs a cost of "2" at level "2".
Answer: :~assign(8,"8").
:-assign(8, "butterfly").
[assign(X,2,Y,2)].
:-assign(X, "butterfly").
[X=Y].
:-assign(8, "butterfly").
[X=2].
:-assign(8, "butterfly").
[X=2].
:-end.

unique_rules: 
[':~assign(8,"8").', ':-assign(8, "butterfly").', ':-assign(X, "butterfly").', ':-end.']

jaccard: 0.0

AS desired:	[['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'strength(6)', 'strength(7)', 'strength(8)', 'strength(9)', 'strength(10)', 'strength(11)', 'strength(12)', 'strength(13)', 'strength(14)', 'strength(15)', 'strength(16)', 'strength(17)', 'strength(18)', 'strength(19)', 'strength(20)'], ['assign(1,"quality")', 'assign(2,"strength")', 'assign(3,"strength")', 'assign(4,"strength")', 'assign(5,"strength")', 'assign(6,"strength")', 'assign(7,"strength")', 'assign(8,"strength")', 'assign(9,"strength")', 'assign(10,"strength")', 'assign(11,"strength")', 'assign(12,"strength")', 'assign(13,"strength")', 'assign(14,"strength")', 'assign(15,"strength")', 'assign(16,"strength")', 'assign(17,"strength")', 'assign(18,"strength")', 'assign(19,"strength")', 'assign(20,"strength")', 'strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'strength(6)', 'strength(7)', 'strength(8)', 'strength(9)', 'strength(10)', 'strength(11)', 'strength(12)', 'strength(13)', 'strength(14)', 'strength(15)', 'strength(16)', 'strength(17)', 'strength(18)', 'strength(19)', 'strength(20)']]
AS obtained:	['error']


18
filtering

question: 
Produce an ASP program to gather and retrieve values linked to the label "owner" in the predicate "owner".

answer from file: 
select(X):-owner(X,"owner").

parsed from model: 
select(X):-owner(X,"owner").

facts: 
owner(1..5, "owner").

generated: 
Produce an ASP program to gather and retrieve values linked to the label "owner" in the predicate "owner".
Answer: select(X):-owner(X,"owner").
select(X):-owner(X,"creator").
select(X):-owner(X,"bike").
select(X):-owner(X,"table").
select(X):-owner(X,"person").
select(X):-owner(X,"bike").
select(X):-owner(X,"table").
select(X):-owner(X,"person").
select(X):-owner(X,"bike").
select(X):-owner(X,"table").
select(X):-owner(X,"person").
select(X):-owner(X,"bike").
select(X):-owner(X,"table").
select(X):-

unique_rules: 
['select(X):-owner(X,"owner").', 'select(X):-owner(X,"creator").', 'select(X):-owner(X,"bike").', 'select(X):-owner(X,"table").', 'select(X):-owner(X,"person").', 'select(X):-']

jaccard: 1.0

AS desired:	[['owner(1,"owner")', 'owner(2,"owner")', 'owner(3,"owner")', 'owner(4,"owner")', 'owner(5,"owner")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
AS obtained:	[['owner(1,"owner")', 'owner(2,"owner")', 'owner(3,"owner")', 'owner(4,"owner")', 'owner(5,"owner")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


19
negative_filtering

question: 
Draft an ASP solution to identify values associated with the predicate "barcelona" but not tied to the predicate "barcelona" and labeled "chicago".

answer from file: 
select(X):-barcelona(X),not barcelona(X,"chicago").

parsed from model: 
select(X):-barcelona(X,C),not barcelona(X,"chicago").

facts: 
barcelona(1..3).barcelona(1,"chicago").barcelona(2,"flower").barcelona(3,"surname").

generated: 
Draft an ASP solution to identify values associated with the predicate "barcelona" but not tied to the predicate "barcelona" and labeled "chicago".
Answer: select(X):-barcelona(X,C),not barcelona(X,"chicago").
select(X):-barcelona(X,"chicago").
select(X):-not barcelona(X,"chicago").
select(X):-barcelona(X,C),not barcelona(X,"chicago").
select(X):-not barcelona(X,"chicago").
select(X):-not barcelona(X,"chicago").
select(X):-not barcelona(X,"chicago").
select(X):-not barcelona(X,"chicago").
select(X):-not barcelona(X,"chicago").
select(X):-not barcelona(X,"chicago").
select(X):-not barcelona(X,"chicago").
select(X):-

unique_rules: 
['select(X):-barcelona(X,C),not barcelona(X,"chicago").', 'select(X):-barcelona(X,"chicago").', 'select(X):-not barcelona(X,"chicago").', 'select(X):-']

jaccard: 1.0

AS desired:	[['barcelona(1)', 'barcelona(2)', 'barcelona(3)', 'barcelona(1,"chicago")', 'barcelona(2,"flower")', 'barcelona(3,"surname")', 'select(2)', 'select(3)']]
AS obtained:	[['barcelona(1,"chicago")', 'barcelona(2,"flower")', 'barcelona(3,"surname")', 'select(2)', 'select(3)', 'barcelona(1)', 'barcelona(2)', 'barcelona(3)']]


20
numeric_filtering

question: 
Craft an ASP code to retrieve values connected to the predicate "desk" with a value different than 12.

answer from file: 
select(X):-desk(X,C),C!=12.

parsed from model: 
select(X):-desk(X,C),C!=12.

facts: 
desk(1..3, 1..100).

generated: 
Craft an ASP code to retrieve values connected to the predicate "desk" with a value different than 12.
Answer: select(X):-desk(X,C),C!=12.
select(X):-desk(X,C),C==12.
select(X):-desk(X,_),_==12.
select(X):-desk(X,_),_!=12.
select(X):-desk(X,_),C<12.
select(X):-desk(X,_),C>12.

unique_rules: 
['select(X):-desk(X,C),C!=12.', 'select(X):-desk(X,C),C==12.', 'select(X):-desk(X,_),_==12.', 'select(X):-desk(X,_),_!=12.', 'select(X):-desk(X,_),C<12.', 'select(X):-desk(X,_),C>12.']

jaccard: 1.0

AS desired:	[['desk(1,1)', 'desk(1,2)', 'desk(1,3)', 'desk(1,4)', 'desk(1,5)', 'desk(1,6)', 'desk(1,7)', 'desk(1,8)', 'desk(1,9)', 'desk(1,10)', 'desk(1,11)', 'desk(1,12)', 'desk(1,13)', 'desk(1,14)', 'desk(1,15)', 'desk(1,16)', 'desk(1,17)', 'desk(1,18)', 'desk(1,19)', 'desk(1,20)', 'desk(1,21)', 'desk(1,22)', 'desk(1,23)', 'desk(1,24)', 'desk(1,25)', 'desk(1,26)', 'desk(1,27)', 'desk(1,28)', 'desk(1,29)', 'desk(1,30)', 'desk(1,31)', 'desk(1,32)', 'desk(1,33)', 'desk(1,34)', 'desk(1,35)', 'desk(1,36)', 'desk(1,37)', 'desk(1,38)', 'desk(1,39)', 'desk(1,40)', 'desk(1,41)', 'desk(1,42)', 'desk(1,43)', 'desk(1,44)', 'desk(1,45)', 'desk(1,46)', 'desk(1,47)', 'desk(1,48)', 'desk(1,49)', 'desk(1,50)', 'desk(1,51)', 'desk(1,52)', 'desk(1,53)', 'desk(1,54)', 'desk(1,55)', 'desk(1,56)', 'desk(1,57)', 'desk(1,58)', 'desk(1,59)', 'desk(1,60)', 'desk(1,61)', 'desk(1,62)', 'desk(1,63)', 'desk(1,64)', 'desk(1,65)', 'desk(1,66)', 'desk(1,67)', 'desk(1,68)', 'desk(1,69)', 'desk(1,70)', 'desk(1,71)', 'desk(1,72)', 'desk(1,73)', 'desk(1,74)', 'desk(1,75)', 'desk(1,76)', 'desk(1,77)', 'desk(1,78)', 'desk(1,79)', 'desk(1,80)', 'desk(1,81)', 'desk(1,82)', 'desk(1,83)', 'desk(1,84)', 'desk(1,85)', 'desk(1,86)', 'desk(1,87)', 'desk(1,88)', 'desk(1,89)', 'desk(1,90)', 'desk(1,91)', 'desk(1,92)', 'desk(1,93)', 'desk(1,94)', 'desk(1,95)', 'desk(1,96)', 'desk(1,97)', 'desk(1,98)', 'desk(1,99)', 'desk(1,100)', 'desk(2,1)', 'desk(2,2)', 'desk(2,3)', 'desk(2,4)', 'desk(2,5)', 'desk(2,6)', 'desk(2,7)', 'desk(2,8)', 'desk(2,9)', 'desk(2,10)', 'desk(2,11)', 'desk(2,12)', 'desk(2,13)', 'desk(2,14)', 'desk(2,15)', 'desk(2,16)', 'desk(2,17)', 'desk(2,18)', 'desk(2,19)', 'desk(2,20)', 'desk(2,21)', 'desk(2,22)', 'desk(2,23)', 'desk(2,24)', 'desk(2,25)', 'desk(2,26)', 'desk(2,27)', 'desk(2,28)', 'desk(2,29)', 'desk(2,30)', 'desk(2,31)', 'desk(2,32)', 'desk(2,33)', 'desk(2,34)', 'desk(2,35)', 'desk(2,36)', 'desk(2,37)', 'desk(2,38)', 'desk(2,39)', 'desk(2,40)', 'desk(2,41)', 'desk(2,42)', 'desk(2,43)', 'desk(2,44)', 'desk(2,45)', 'desk(2,46)', 'desk(2,47)', 'desk(2,48)', 'desk(2,49)', 'desk(2,50)', 'desk(2,51)', 'desk(2,52)', 'desk(2,53)', 'desk(2,54)', 'desk(2,55)', 'desk(2,56)', 'desk(2,57)', 'desk(2,58)', 'desk(2,59)', 'desk(2,60)', 'desk(2,61)', 'desk(2,62)', 'desk(2,63)', 'desk(2,64)', 'desk(2,65)', 'desk(2,66)', 'desk(2,67)', 'desk(2,68)', 'desk(2,69)', 'desk(2,70)', 'desk(2,71)', 'desk(2,72)', 'desk(2,73)', 'desk(2,74)', 'desk(2,75)', 'desk(2,76)', 'desk(2,77)', 'desk(2,78)', 'desk(2,79)', 'desk(2,80)', 'desk(2,81)', 'desk(2,82)', 'desk(2,83)', 'desk(2,84)', 'desk(2,85)', 'desk(2,86)', 'desk(2,87)', 'desk(2,88)', 'desk(2,89)', 'desk(2,90)', 'desk(2,91)', 'desk(2,92)', 'desk(2,93)', 'desk(2,94)', 'desk(2,95)', 'desk(2,96)', 'desk(2,97)', 'desk(2,98)', 'desk(2,99)', 'desk(2,100)', 'desk(3,1)', 'desk(3,2)', 'desk(3,3)', 'desk(3,4)', 'desk(3,5)', 'desk(3,6)', 'desk(3,7)', 'desk(3,8)', 'desk(3,9)', 'desk(3,10)', 'desk(3,11)', 'desk(3,12)', 'desk(3,13)', 'desk(3,14)', 'desk(3,15)', 'desk(3,16)', 'desk(3,17)', 'desk(3,18)', 'desk(3,19)', 'desk(3,20)', 'desk(3,21)', 'desk(3,22)', 'desk(3,23)', 'desk(3,24)', 'desk(3,25)', 'desk(3,26)', 'desk(3,27)', 'desk(3,28)', 'desk(3,29)', 'desk(3,30)', 'desk(3,31)', 'desk(3,32)', 'desk(3,33)', 'desk(3,34)', 'desk(3,35)', 'desk(3,36)', 'desk(3,37)', 'desk(3,38)', 'desk(3,39)', 'desk(3,40)', 'desk(3,41)', 'desk(3,42)', 'desk(3,43)', 'desk(3,44)', 'desk(3,45)', 'desk(3,46)', 'desk(3,47)', 'desk(3,48)', 'desk(3,49)', 'desk(3,50)', 'desk(3,51)', 'desk(3,52)', 'desk(3,53)', 'desk(3,54)', 'desk(3,55)', 'desk(3,56)', 'desk(3,57)', 'desk(3,58)', 'desk(3,59)', 'desk(3,60)', 'desk(3,61)', 'desk(3,62)', 'desk(3,63)', 'desk(3,64)', 'desk(3,65)', 'desk(3,66)', 'desk(3,67)', 'desk(3,68)', 'desk(3,69)', 'desk(3,70)', 'desk(3,71)', 'desk(3,72)', 'desk(3,73)', 'desk(3,74)', 'desk(3,75)', 'desk(3,76)', 'desk(3,77)', 'desk(3,78)', 'desk(3,79)', 'desk(3,80)', 'desk(3,81)', 'desk(3,82)', 'desk(3,83)', 'desk(3,84)', 'desk(3,85)', 'desk(3,86)', 'desk(3,87)', 'desk(3,88)', 'desk(3,89)', 'desk(3,90)', 'desk(3,91)', 'desk(3,92)', 'desk(3,93)', 'desk(3,94)', 'desk(3,95)', 'desk(3,96)', 'desk(3,97)', 'desk(3,98)', 'desk(3,99)', 'desk(3,100)', 'select(1)', 'select(2)', 'select(3)']]
AS obtained:	[['desk(1,1)', 'desk(1,2)', 'desk(1,3)', 'desk(1,4)', 'desk(1,5)', 'desk(1,6)', 'desk(1,7)', 'desk(1,8)', 'desk(1,9)', 'desk(1,10)', 'desk(1,11)', 'desk(1,12)', 'desk(1,13)', 'desk(1,14)', 'desk(1,15)', 'desk(1,16)', 'desk(1,17)', 'desk(1,18)', 'desk(1,19)', 'desk(1,20)', 'desk(1,21)', 'desk(1,22)', 'desk(1,23)', 'desk(1,24)', 'desk(1,25)', 'desk(1,26)', 'desk(1,27)', 'desk(1,28)', 'desk(1,29)', 'desk(1,30)', 'desk(1,31)', 'desk(1,32)', 'desk(1,33)', 'desk(1,34)', 'desk(1,35)', 'desk(1,36)', 'desk(1,37)', 'desk(1,38)', 'desk(1,39)', 'desk(1,40)', 'desk(1,41)', 'desk(1,42)', 'desk(1,43)', 'desk(1,44)', 'desk(1,45)', 'desk(1,46)', 'desk(1,47)', 'desk(1,48)', 'desk(1,49)', 'desk(1,50)', 'desk(1,51)', 'desk(1,52)', 'desk(1,53)', 'desk(1,54)', 'desk(1,55)', 'desk(1,56)', 'desk(1,57)', 'desk(1,58)', 'desk(1,59)', 'desk(1,60)', 'desk(1,61)', 'desk(1,62)', 'desk(1,63)', 'desk(1,64)', 'desk(1,65)', 'desk(1,66)', 'desk(1,67)', 'desk(1,68)', 'desk(1,69)', 'desk(1,70)', 'desk(1,71)', 'desk(1,72)', 'desk(1,73)', 'desk(1,74)', 'desk(1,75)', 'desk(1,76)', 'desk(1,77)', 'desk(1,78)', 'desk(1,79)', 'desk(1,80)', 'desk(1,81)', 'desk(1,82)', 'desk(1,83)', 'desk(1,84)', 'desk(1,85)', 'desk(1,86)', 'desk(1,87)', 'desk(1,88)', 'desk(1,89)', 'desk(1,90)', 'desk(1,91)', 'desk(1,92)', 'desk(1,93)', 'desk(1,94)', 'desk(1,95)', 'desk(1,96)', 'desk(1,97)', 'desk(1,98)', 'desk(1,99)', 'desk(1,100)', 'desk(2,1)', 'desk(2,2)', 'desk(2,3)', 'desk(2,4)', 'desk(2,5)', 'desk(2,6)', 'desk(2,7)', 'desk(2,8)', 'desk(2,9)', 'desk(2,10)', 'desk(2,11)', 'desk(2,12)', 'desk(2,13)', 'desk(2,14)', 'desk(2,15)', 'desk(2,16)', 'desk(2,17)', 'desk(2,18)', 'desk(2,19)', 'desk(2,20)', 'desk(2,21)', 'desk(2,22)', 'desk(2,23)', 'desk(2,24)', 'desk(2,25)', 'desk(2,26)', 'desk(2,27)', 'desk(2,28)', 'desk(2,29)', 'desk(2,30)', 'desk(2,31)', 'desk(2,32)', 'desk(2,33)', 'desk(2,34)', 'desk(2,35)', 'desk(2,36)', 'desk(2,37)', 'desk(2,38)', 'desk(2,39)', 'desk(2,40)', 'desk(2,41)', 'desk(2,42)', 'desk(2,43)', 'desk(2,44)', 'desk(2,45)', 'desk(2,46)', 'desk(2,47)', 'desk(2,48)', 'desk(2,49)', 'desk(2,50)', 'desk(2,51)', 'desk(2,52)', 'desk(2,53)', 'desk(2,54)', 'desk(2,55)', 'desk(2,56)', 'desk(2,57)', 'desk(2,58)', 'desk(2,59)', 'desk(2,60)', 'desk(2,61)', 'desk(2,62)', 'desk(2,63)', 'desk(2,64)', 'desk(2,65)', 'desk(2,66)', 'desk(2,67)', 'desk(2,68)', 'desk(2,69)', 'desk(2,70)', 'desk(2,71)', 'desk(2,72)', 'desk(2,73)', 'desk(2,74)', 'desk(2,75)', 'desk(2,76)', 'desk(2,77)', 'desk(2,78)', 'desk(2,79)', 'desk(2,80)', 'desk(2,81)', 'desk(2,82)', 'desk(2,83)', 'desk(2,84)', 'desk(2,85)', 'desk(2,86)', 'desk(2,87)', 'desk(2,88)', 'desk(2,89)', 'desk(2,90)', 'desk(2,91)', 'desk(2,92)', 'desk(2,93)', 'desk(2,94)', 'desk(2,95)', 'desk(2,96)', 'desk(2,97)', 'desk(2,98)', 'desk(2,99)', 'desk(2,100)', 'desk(3,1)', 'desk(3,2)', 'desk(3,3)', 'desk(3,4)', 'desk(3,5)', 'desk(3,6)', 'desk(3,7)', 'desk(3,8)', 'desk(3,9)', 'desk(3,10)', 'desk(3,11)', 'desk(3,12)', 'desk(3,13)', 'desk(3,14)', 'desk(3,15)', 'desk(3,16)', 'desk(3,17)', 'desk(3,18)', 'desk(3,19)', 'desk(3,20)', 'desk(3,21)', 'desk(3,22)', 'desk(3,23)', 'desk(3,24)', 'desk(3,25)', 'desk(3,26)', 'desk(3,27)', 'desk(3,28)', 'desk(3,29)', 'desk(3,30)', 'desk(3,31)', 'desk(3,32)', 'desk(3,33)', 'desk(3,34)', 'desk(3,35)', 'desk(3,36)', 'desk(3,37)', 'desk(3,38)', 'desk(3,39)', 'desk(3,40)', 'desk(3,41)', 'desk(3,42)', 'desk(3,43)', 'desk(3,44)', 'desk(3,45)', 'desk(3,46)', 'desk(3,47)', 'desk(3,48)', 'desk(3,49)', 'desk(3,50)', 'desk(3,51)', 'desk(3,52)', 'desk(3,53)', 'desk(3,54)', 'desk(3,55)', 'desk(3,56)', 'desk(3,57)', 'desk(3,58)', 'desk(3,59)', 'desk(3,60)', 'desk(3,61)', 'desk(3,62)', 'desk(3,63)', 'desk(3,64)', 'desk(3,65)', 'desk(3,66)', 'desk(3,67)', 'desk(3,68)', 'desk(3,69)', 'desk(3,70)', 'desk(3,71)', 'desk(3,72)', 'desk(3,73)', 'desk(3,74)', 'desk(3,75)', 'desk(3,76)', 'desk(3,77)', 'desk(3,78)', 'desk(3,79)', 'desk(3,80)', 'desk(3,81)', 'desk(3,82)', 'desk(3,83)', 'desk(3,84)', 'desk(3,85)', 'desk(3,86)', 'desk(3,87)', 'desk(3,88)', 'desk(3,89)', 'desk(3,90)', 'desk(3,91)', 'desk(3,92)', 'desk(3,93)', 'desk(3,94)', 'desk(3,95)', 'desk(3,96)', 'desk(3,97)', 'desk(3,98)', 'desk(3,99)', 'desk(3,100)', 'select(1)', 'select(2)', 'select(3)']]


21
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "darkmagenta" having fields "ID","strengthID","lake", and the predicate "strength" having fields "ID","weight". Define a predicate "darkmagenta_strength" that associates to each darkmagenta the attribute weight of strength. In addition, select all values associated to the predicate "darkmagenta_strength" with label "delhi".

answer from file: 
darkmagenta_strength(X,Z):-darkmagenta(X,Y,_),strength(Y,Z).
select(X):-darkmagenta_strength(X,"delhi").

parsed from model: 
darkmagenta_strength(X,Z):-darkmagenta(X,Y,_),strength(Y,Z).
select(X):-darkmagenta_strength(X,"delhi").

facts: 
darkmagenta(0..3, 0..4,"mumbai").strength(0..2,"singapore").strength(2..4,"delhi").

generated: 
Write an ASP program for the following problem. Consider predicate "darkmagenta" having fields "ID","strengthID","lake", and the predicate "strength" having fields "ID","weight". Define a predicate "darkmagenta_strength" that associates to each darkmagenta the attribute weight of strength. In addition, select all values associated to the predicate "darkmagenta_strength" with label "delhi".
Answer: darkmagenta_strength(X,Z):-darkmagenta(X,Y,_),strength(Y,Z).
select(X):-darkmagenta_strength(X,"delhi").
:-darkmagenta(1,2,_),strength(2,3).
:-darkmagenta_strength(1,3).
:-select(X).
:-darkmagenta(1,2,_),strength(2,3).
:-darkmagenta_strength(1,3).
:-select(X).
:-darkmagenta(1,2,_),strength(2,3).
:-darkmagenta_strength(1,3).
:-select(X).
:-darkmagenta(1,2

unique_rules: 
['darkmagenta_strength(X,Z):-darkmagenta(X,Y,_),strength(Y,Z).', 'select(X):-darkmagenta_strength(X,"delhi").', ':-darkmagenta(1,2,_),strength(2,3).', ':-darkmagenta_strength(1,3).', ':-select(X).', ':-darkmagenta(1,2']

jaccard: 1.0

AS desired:	[['strength(2,"delhi")', 'strength(3,"delhi")', 'strength(4,"delhi")', 'strength(0,"singapore")', 'strength(1,"singapore")', 'strength(2,"singapore")', 'darkmagenta_strength(0,"singapore")', 'darkmagenta_strength(0,"delhi")', 'darkmagenta_strength(1,"singapore")', 'darkmagenta_strength(1,"delhi")', 'darkmagenta_strength(2,"singapore")', 'darkmagenta_strength(2,"delhi")', 'darkmagenta_strength(3,"singapore")', 'darkmagenta_strength(3,"delhi")', 'select(0)', 'select(1)', 'select(2)', 'select(3)', 'darkmagenta(0,0,"mumbai")', 'darkmagenta(0,1,"mumbai")', 'darkmagenta(0,2,"mumbai")', 'darkmagenta(0,3,"mumbai")', 'darkmagenta(0,4,"mumbai")', 'darkmagenta(1,0,"mumbai")', 'darkmagenta(1,1,"mumbai")', 'darkmagenta(1,2,"mumbai")', 'darkmagenta(1,3,"mumbai")', 'darkmagenta(1,4,"mumbai")', 'darkmagenta(2,0,"mumbai")', 'darkmagenta(2,1,"mumbai")', 'darkmagenta(2,2,"mumbai")', 'darkmagenta(2,3,"mumbai")', 'darkmagenta(2,4,"mumbai")', 'darkmagenta(3,0,"mumbai")', 'darkmagenta(3,1,"mumbai")', 'darkmagenta(3,2,"mumbai")', 'darkmagenta(3,3,"mumbai")', 'darkmagenta(3,4,"mumbai")']]
AS obtained:	[['strength(2,"delhi")', 'strength(3,"delhi")', 'strength(4,"delhi")', 'strength(0,"singapore")', 'strength(1,"singapore")', 'strength(2,"singapore")', 'darkmagenta_strength(0,"singapore")', 'darkmagenta_strength(0,"delhi")', 'darkmagenta_strength(1,"singapore")', 'darkmagenta_strength(1,"delhi")', 'darkmagenta_strength(2,"singapore")', 'darkmagenta_strength(2,"delhi")', 'darkmagenta_strength(3,"singapore")', 'darkmagenta_strength(3,"delhi")', 'select(0)', 'select(1)', 'select(2)', 'select(3)', 'darkmagenta(0,0,"mumbai")', 'darkmagenta(0,1,"mumbai")', 'darkmagenta(0,2,"mumbai")', 'darkmagenta(0,3,"mumbai")', 'darkmagenta(0,4,"mumbai")', 'darkmagenta(1,0,"mumbai")', 'darkmagenta(1,1,"mumbai")', 'darkmagenta(1,2,"mumbai")', 'darkmagenta(1,3,"mumbai")', 'darkmagenta(1,4,"mumbai")', 'darkmagenta(2,0,"mumbai")', 'darkmagenta(2,1,"mumbai")', 'darkmagenta(2,2,"mumbai")', 'darkmagenta(2,3,"mumbai")', 'darkmagenta(2,4,"mumbai")', 'darkmagenta(3,0,"mumbai")', 'darkmagenta(3,1,"mumbai")', 'darkmagenta(3,2,"mumbai")', 'darkmagenta(3,3,"mumbai")', 'darkmagenta(3,4,"mumbai")']]


22
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate cairo. The labels are butterfly,wall,flower,desk,cloud,roof,chair,storm. Then prevent the predicate "cairo" with value "4" from having label "butterfly".

answer from file: 
assign(X,"butterfly")|assign(X,"wall")|assign(X,"flower")|assign(X,"desk")|assign(X,"cloud")|assign(X,"roof")|assign(X,"chair")|assign(X,"storm"):-cairo(X).
:-assign(4, "butterfly").

parsed from model: 
assign(X,"butterfly")|assign(X,"wall")|assign(X,"flower")|assign(X,"desk")|assign(X,"cloud")|assign(X,"roof")|assign(X,"chair")|assign(X,"storm"):-cairo(X).
:-assign(4, "butterfly").

facts: 
cairo(1..20).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate cairo. The labels are butterfly,wall,flower,desk,cloud,roof,chair,storm. Then prevent the predicate "cairo" with value "4" from having label "butterfly".
Answer: assign(X,"butterfly")|assign(X,"wall")|assign(X,"flower")|assign(X,"desk")|assign(X,"cloud")|assign(X,"roof")|assign(X,"chair")|assign(X,"storm"):-cairo(X).
:-assign(4, "butterfly").
:-assign(4, "wall").
:-assign(4, "flower").
:-assign(4, "desk").
:-assign(4, "cloud").
:-assign(4, "roof").
:-assign(4, "chair").
:-assign(4, "storm").
```
assign(X, "bike")|assign(X,

unique_rules: 
['assign(X,"butterfly")|assign(X,"wall")|assign(X,"flower")|assign(X,"desk")|assign(X,"cloud")|assign(X,"roof")|assign(X,"chair")|assign(X,"storm"):-cairo(X).', ':-assign(4, "butterfly").', ':-assign(4, "wall").', ':-assign(4, "flower").', ':-assign(4, "desk").', ':-assign(4, "cloud").', ':-assign(4, "roof").', ':-assign(4, "chair").', ':-assign(4, "storm").']

jaccard: 1.0

AS desired:	[['cairo(1)', 'cairo(2)', 'cairo(3)', 'cairo(4)', 'cairo(5)', 'cairo(6)', 'cairo(7)', 'cairo(8)', 'cairo(9)', 'cairo(10)', 'cairo(11)', 'cairo(12)', 'cairo(13)', 'cairo(14)', 'cairo(15)', 'cairo(16)', 'cairo(17)', 'cairo(18)', 'cairo(19)', 'cairo(20)', 'assign(1,"chair")', 'assign(2,"chair")', 'assign(3,"storm")', 'assign(4,"wall")', 'assign(5,"storm")', 'assign(6,"storm")', 'assign(7,"storm")', 'assign(8,"storm")', 'assign(9,"storm")', 'assign(10,"storm")', 'assign(11,"storm")', 'assign(12,"storm")', 'assign(13,"storm")', 'assign(14,"storm")', 'assign(15,"storm")', 'assign(16,"storm")', 'assign(17,"storm")', 'assign(18,"storm")', 'assign(19,"storm")', 'assign(20,"storm")']]
AS obtained:	[['cairo(1)', 'cairo(2)', 'cairo(3)', 'cairo(4)', 'cairo(5)', 'cairo(6)', 'cairo(7)', 'cairo(8)', 'cairo(9)', 'cairo(10)', 'cairo(11)', 'cairo(12)', 'cairo(13)', 'cairo(14)', 'cairo(15)', 'cairo(16)', 'cairo(17)', 'cairo(18)', 'cairo(19)', 'cairo(20)', 'assign(1,"chair")', 'assign(2,"chair")', 'assign(3,"storm")', 'assign(4,"wall")', 'assign(5,"storm")', 'assign(6,"storm")', 'assign(7,"storm")', 'assign(8,"storm")', 'assign(9,"storm")', 'assign(10,"storm")', 'assign(11,"storm")', 'assign(12,"storm")', 'assign(13,"storm")', 'assign(14,"storm")', 'assign(15,"storm")', 'assign(16,"storm")', 'assign(17,"storm")', 'assign(18,"storm")', 'assign(19,"storm")', 'assign(20,"storm")']]


23
combination_negative_filtering

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "owner" and "surname". In addition, select all values associated with predicate combination but not associated with predicate "black" and label "roof".

answer from file: 
combination(X,Y):-owner(X),surname(Y).
select(X):-combination(X,_), not black(X, "roof").

parsed from model: 
combination(X,Y):-owner(X),surname(Y).
select(X,Y):-combination(X,Y), not black(X, "roof").

facts: 
owner(1..4).surname(1..5).black(0..1,"roof").black(2..3,"chair").black(2..3,"butterfly").

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "owner" and "surname". In addition, select all values associated with predicate combination but not associated with predicate "black" and label "roof".
Answer: combination(X,Y):-owner(X),surname(Y).
select(X,Y):-combination(X,Y), not black(X, "roof").
combination(X,Y):-owner(X), not surname(Y).
select(X,Y):-combination(X,Y), not black(X, "roof").
combination(X,Y):-owner(X), surname(Y).
select(X,Y):-combination(X,Y), not black(X, "roof").
```

unique_rules: 
['combination(X,Y):-owner(X),surname(Y).', 'select(X,Y):-combination(X,Y), not black(X, "roof").', 'combination(X,Y):-owner(X), not surname(Y).', 'combination(X,Y):-owner(X), surname(Y).']

jaccard: 0.0

AS desired:	[['surname(1)', 'surname(2)', 'surname(3)', 'surname(4)', 'surname(5)', 'owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)', 'black(2,"butterfly")', 'black(3,"butterfly")', 'black(2,"chair")', 'black(3,"chair")', 'black(0,"roof")', 'black(1,"roof")', 'select(2)', 'select(3)', 'select(4)']]
AS obtained:	[['surname(1)', 'surname(2)', 'surname(3)', 'surname(4)', 'surname(5)', 'owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)', 'black(2,"butterfly")', 'black(3,"butterfly")', 'black(2,"chair")', 'black(3,"chair")', 'black(0,"roof")', 'black(1,"roof")', 'select(2,1)', 'select(2,2)', 'select(2,3)', 'select(2,4)', 'select(2,5)', 'select(3,1)', 'select(3,2)', 'select(3,3)', 'select(3,4)', 'select(3,5)', 'select(4,1)', 'select(4,2)', 'select(4,3)', 'select(4,4)', 'select(4,5)']]


24
assignment

question: 
Craft an ASP solution that associates precisely one label from "delhi","wall","pink","toronto","flower" with elements specified by the predicate "white".

answer from file: 
assign(X,"delhi")|assign(X,"wall")|assign(X,"pink")|assign(X,"toronto")|assign(X,"flower"):-white(X).

parsed from model: 
assign(X,"delhi")|assign(X,"wall")|assign(X,"pink")|assign(X,"toronto")|assign(X,"flower"):-white(X).

facts: 
white(1..5).

generated: 
Craft an ASP solution that associates precisely one label from "delhi","wall","pink","toronto","flower" with elements specified by the predicate "white".
Answer: assign(X,"delhi")|assign(X,"wall")|assign(X,"pink")|assign(X,"toronto")|assign(X,"flower"):-white(X).
assign(X,"city"):-white(X).
:-assign(X,C),C=city.
:-assign(X,C),C=bike.
:-assign(X,C),C=table.
:-assign(X,C),C=bike.
:-assign(X,C),C=table.
:-assign(X,C),C=bike.
:-assign(X,C),C=table.
:-assign(X,C),C=bike

unique_rules: 
['assign(X,"delhi")|assign(X,"wall")|assign(X,"pink")|assign(X,"toronto")|assign(X,"flower"):-white(X).', 'assign(X,"city"):-white(X).', ':-assign(X,C),C=city.', ':-assign(X,C),C=bike.', ':-assign(X,C),C=table.', ':-assign(X,C),C=bike']

jaccard: 1.0

AS desired:	[['white(1)', 'white(2)', 'white(3)', 'white(4)', 'white(5)', 'assign(1,"flower")', 'assign(2,"flower")', 'assign(3,"flower")', 'assign(4,"flower")', 'assign(5,"flower")']]
AS obtained:	[['white(1)', 'white(2)', 'white(3)', 'white(4)', 'white(5)', 'assign(1,"flower")', 'assign(2,"flower")', 'assign(3,"flower")', 'assign(4,"flower")', 'assign(5,"flower")']]


25
constraint

question: 
Draft an ASP program to disallow assigning the predicate "surname" with value 6 to the label "darkmagenta".

answer from file: 
:-assign(6,darkmagenta).

parsed from model: 
:-assign(6,darkmagenta).

facts: 
surname(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-surname(X).

generated: 
Draft an ASP program to disallow assigning the predicate "surname" with value 6 to the label "darkmagenta".
Answer: :-assign(6,darkmagenta).
:-assign(6,darkmagenta).
:-assign(6,darkmagenta).
:-assign(6,darkmagenta).
:-assign(6,darkmagenta).
:-assign(6,darkmagenta).
:-assign(6,darkmagenta).
:-assign(6,darkmagenta).
:-assign(6,darkmagenta).
:-assign(6,darkmagenta).
:-assign(6,darkmagenta).
:-assign(6,darkmagenta).
:-assign(6,darkmagenta).
:-assign(6,darkmagenta).
:-assign(6,darkmagenta).
:-assign(6,darkmagenta).
:-assign(

unique_rules: 
[':-assign(6,darkmagenta).', ':-assign(']

jaccard: 1.0

AS desired:	[['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'surname(1)', 'surname(2)', 'surname(3)', 'surname(4)', 'surname(5)', 'surname(6)', 'surname(7)', 'surname(8)', 'surname(9)', 'surname(10)', 'surname(11)', 'surname(12)', 'surname(13)', 'surname(14)', 'surname(15)', 'surname(16)', 'surname(17)', 'surname(18)', 'surname(19)', 'surname(20)']]
AS obtained:	[['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'surname(1)', 'surname(2)', 'surname(3)', 'surname(4)', 'surname(5)', 'surname(6)', 'surname(7)', 'surname(8)', 'surname(9)', 'surname(10)', 'surname(11)', 'surname(12)', 'surname(13)', 'surname(14)', 'surname(15)', 'surname(16)', 'surname(17)', 'surname(18)', 'surname(19)', 'surname(20)']]


26
combination

question: 
Generate an ASP code to compute the cross-product of elements in the sets defined by "mumbai" and "owner".

answer from file: 
combination(X,Y):-mumbai(X),owner(Y).

parsed from model: 
combination(X,Y):-mumbai(X,C),owner(Y,C).

facts: 
mumbai(1..4).owner(1..5).

generated: 
Generate an ASP code to compute the cross-product of elements in the sets defined by "mumbai" and "owner".
Answer: combination(X,Y):-mumbai(X,C),owner(Y,C).
combination(X,Y):-mumbai(X,_),owner(Y,_).
combination(X,Y):-mumbai(X,C),owner(Y,C).
combination(X,Y):-mumbai(X,_),owner(Y,_).
combination(X,Y):-mumbai(X,C),owner(Y,C).
combination(X,Y):-mumbai(X,_),owner(Y,_).

unique_rules: 
['combination(X,Y):-mumbai(X,C),owner(Y,C).', 'combination(X,Y):-mumbai(X,_),owner(Y,_).']

jaccard: 0.0

AS desired:	[['owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'owner(5)', 'mumbai(1)', 'mumbai(2)', 'mumbai(3)', 'mumbai(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
AS obtained:	[['mumbai(1)', 'mumbai(2)', 'mumbai(3)', 'mumbai(4)', 'owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'owner(5)']]


27
join

question: 
Draft an ASP script to define the predicate "roof_hair" that associates each roof with the strength of hair, given "roof" has fields "ID","surname","hairID" and "hair" has fields "ID","hair","strength","weight".

answer from file: 
roof_hair(X,Z):-roof(X,_,Y),hair(Y,_,Z,_).

parsed from model: 
roof_hair(X,Z):-roof(X,_,Y,_),hair(Y,_,Z,_).

facts: 
roof("ID","surname","hairID").hair("ID","hair","strength","weight").

generated: 
Draft an ASP script to define the predicate "roof_hair" that associates each roof with the strength of hair, given "roof" has fields "ID","surname","hairID" and "hair" has fields "ID","hair","strength","weight".
Answer: roof_hair(X,Z):-roof(X,_,Y,_),hair(Y,_,Z,_).
roof_hair(X,Z):-roof(X,_,Y,_),hair(Y,_,Z,W),W==Z.
:-roof_hair(1,5).
:-roof_hair(2,7).
:-roof_hair(3,10).
:-roof_hair(4,12).
:-roof_hair(5,15).
:-roof_hair(6,18).
:-roof_hair(7,20).
:-roof_hair(8,22).
:-roof_hair(9

unique_rules: 
['roof_hair(X,Z):-roof(X,_,Y,_),hair(Y,_,Z,_).', 'roof_hair(X,Z):-roof(X,_,Y,_),hair(Y,_,Z,W),W==Z.', ':-roof_hair(1,5).', ':-roof_hair(2,7).', ':-roof_hair(3,10).', ':-roof_hair(4,12).', ':-roof_hair(5,15).', ':-roof_hair(6,18).', ':-roof_hair(7,20).', ':-roof_hair(8,22).', ':-roof_hair(9']

jaccard: 1.0

AS desired:	[['roof("ID","surname","hairID")', 'hair("ID","hair","strength","weight")']]
AS obtained:	[['hair("ID","hair","strength","weight")', 'roof("ID","surname","hairID")']]


28
closure

question: 
Develop an ASP script that derives the predicate "journey" through the transitive closure of the predicate "singapore".

answer from file: 
journey(X,Y):-singapore(X,Y).
journey(X,Y):-singapore(X,Z),journey(Z,Y).

parsed from model: 
journey(X,Y):-singapore(X,Z).
journey(X,Y):-singapore(X,Z),journey(Z,Y).

facts: 
singapore(1..3, 1..4).

generated: 
Develop an ASP script that derives the predicate "journey" through the transitive closure of the predicate "singapore".
Answer: journey(X,Y):-singapore(X,Z).
journey(X,Y):-singapore(X,Z),journey(Z,Y).
:-journey(X,Y).
:-singapore(X,Z),journey(Z,Y).
:-journey(X,Y).
:-journey(X,Y).
:-journey(X,Y).
:-journey(X,Y).
:-journey(X,Y).
:-journey(X,Y).
:-journey(X,Y).
:-journey(X,Y).
:-journey(X,Y).
:-journey(X,Y).
:-journey(X,Y).
:-journey

unique_rules: 
['journey(X,Y):-singapore(X,Z).', 'journey(X,Y):-singapore(X,Z),journey(Z,Y).', ':-journey(X,Y).', ':-singapore(X,Z),journey(Z,Y).', ':-journey']

jaccard: 0.0

AS desired:	[['singapore(1,1)', 'singapore(1,2)', 'singapore(1,3)', 'singapore(1,4)', 'singapore(2,1)', 'singapore(2,2)', 'singapore(2,3)', 'singapore(2,4)', 'singapore(3,1)', 'singapore(3,2)', 'singapore(3,3)', 'singapore(3,4)', 'journey(1,1)', 'journey(1,2)', 'journey(1,3)', 'journey(1,4)', 'journey(2,1)', 'journey(2,2)', 'journey(2,3)', 'journey(2,4)', 'journey(3,1)', 'journey(3,2)', 'journey(3,3)', 'journey(3,4)']]
AS obtained:	['error']


29
preference

question: 
Create an ASP program that keeps the predicate "owner" with value "11" unlinked from "lightblue". If linked, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(11,"lightblue").[1@1]

parsed from model: 
:~assign(11,"11").

facts: 
owner(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-owner(X).

generated: 
Create an ASP program that keeps the predicate "owner" with value "11" unlinked from "lightblue". If linked, it incurs a cost of "1" at level "1".
Answer: :~assign(11,"11").
:-assign(1,"lightblue").
[assign(1,C(1,1)),C(1,1)].
:-assign(1,C(1,1)).
:-cost(1,1,1,1).
:-level(1,1).
:-assign(11,"lightblue").
:-cost(1,1,1,1).
:-level(1,1).
:-assign(11,"lightblue").
:-cost(1,1,1,1).
:-level(1,1).
:-assign(11,"lightblue").
:-cost(1,1,

unique_rules: 
[':~assign(11,"11").', ':-assign(1,"lightblue").', ':-assign(1,C(1,1)).', ':-cost(1,1,1,1).', ':-level(1,1).', ':-assign(11,"lightblue").', ':-cost(1,1,']

jaccard: 0.0

AS desired:	[['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'owner(5)', 'owner(6)', 'owner(7)', 'owner(8)', 'owner(9)', 'owner(10)', 'owner(11)', 'owner(12)', 'owner(13)', 'owner(14)', 'owner(15)', 'owner(16)', 'owner(17)', 'owner(18)', 'owner(19)', 'owner(20)'], ['assign(1,"quality")', 'assign(2,"strength")', 'assign(3,"strength")', 'assign(4,"strength")', 'assign(5,"strength")', 'assign(6,"strength")', 'assign(7,"strength")', 'assign(8,"strength")', 'assign(9,"strength")', 'assign(10,"strength")', 'assign(11,"strength")', 'assign(12,"strength")', 'assign(13,"strength")', 'assign(14,"strength")', 'assign(15,"strength")', 'assign(16,"strength")', 'assign(17,"strength")', 'assign(18,"strength")', 'assign(19,"strength")', 'assign(20,"strength")', 'owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'owner(5)', 'owner(6)', 'owner(7)', 'owner(8)', 'owner(9)', 'owner(10)', 'owner(11)', 'owner(12)', 'owner(13)', 'owner(14)', 'owner(15)', 'owner(16)', 'owner(17)', 'owner(18)', 'owner(19)', 'owner(20)']]
AS obtained:	['error']


30
filtering

question: 
Write an ASP program for the following problem. Select all values associated to the predicate "lightblue" with label "moscow".

answer from file: 
select(X):-lightblue(X,"moscow").

parsed from model: 
select(X):-lightblue(X,"moscow").

facts: 
lightblue(1..5, "moscow").

generated: 
Write an ASP program for the following problem. Select all values associated to the predicate "lightblue" with label "moscow".
Answer: select(X):-lightblue(X,"moscow").
select(X):-lightblue(X,"tokyo").
select(X):-lightblue(X,"rome").
select(X):-lightblue(X,"dubai").
select(X):-lightblue(X,"london").
select(X):-lightblue(X,"rome").
select(X):-lightblue(X,"tokyo").
select(X):-lightblue(X,"dubai").
select(X):-lightblue(X,"london").
select(X):-lightblue(X,"rome").
select(X):-lightblue(X,"tokyo").
select(X):-lightblue(X,"dubai").
select(

unique_rules: 
['select(X):-lightblue(X,"moscow").', 'select(X):-lightblue(X,"tokyo").', 'select(X):-lightblue(X,"rome").', 'select(X):-lightblue(X,"dubai").', 'select(X):-lightblue(X,"london").']

jaccard: 1.0

AS desired:	[['lightblue(1,"moscow")', 'lightblue(2,"moscow")', 'lightblue(3,"moscow")', 'lightblue(4,"moscow")', 'lightblue(5,"moscow")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
AS obtained:	[['lightblue(1,"moscow")', 'lightblue(2,"moscow")', 'lightblue(3,"moscow")', 'lightblue(4,"moscow")', 'lightblue(5,"moscow")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


31
negative_filtering

question: 
Develop an ASP script to collect values tied to the predicate "chair" but not linked to the predicate "cloud" and labeled "roof".

answer from file: 
select(X):-chair(X),not cloud(X,"roof").

parsed from model: 
select(X):-chair(X,_),not cloud(X,"roof").

facts: 
chair(1..3).cloud(1,"cairo").cloud(2,"delhi").cloud(3,"roof").

generated: 
Develop an ASP script to collect values tied to the predicate "chair" but not linked to the predicate "cloud" and labeled "roof".
Answer: select(X):-chair(X,_),not cloud(X,"roof").
select(X):-chair(X,_),not cloud(X, "bike").
select(X):-chair(X,_),not cloud(X, "table").
select(X):-chair(X,_),not cloud(X, "person").
select(X):-chair(X,_),not cloud(X, "bike").
select(X):-chair(X,_),not cloud(X, "table").
select(X):-chair(X,_),not cloud(X, "person").
select(X):-chair(X,_),not cloud(X, "bike").
select(X):-

unique_rules: 
['select(X):-chair(X,_),not cloud(X,"roof").', 'select(X):-chair(X,_),not cloud(X, "bike").', 'select(X):-chair(X,_),not cloud(X, "table").', 'select(X):-chair(X,_),not cloud(X, "person").', 'select(X):-']

jaccard: 0.0

AS desired:	[['chair(1)', 'chair(2)', 'chair(3)', 'cloud(1,"cairo")', 'cloud(2,"delhi")', 'cloud(3,"roof")', 'select(1)', 'select(2)']]
AS obtained:	[['cloud(1,"cairo")', 'cloud(2,"delhi")', 'cloud(3,"roof")', 'chair(1)', 'chair(2)', 'chair(3)']]


32
numeric_filtering

question: 
Create an ASP application to select values connected to the predicate "pink" with a value different than 67.

answer from file: 
select(X):-pink(X,C),C!=67.

parsed from model: 
select(X):-pink(X,C),C!=67.

facts: 
pink(1..3, 1..100).

generated: 
Create an ASP application to select values connected to the predicate "pink" with a value different than 67.
Answer: select(X):-pink(X,C),C!=67.
select(X):-pink(X,C),C=67.
select(X):-pink(X,_),_!=67.
select(X):-pink(X,_),_==67.
select(X):-pink(X,_),C<67.

unique_rules: 
['select(X):-pink(X,C),C!=67.', 'select(X):-pink(X,C),C=67.', 'select(X):-pink(X,_),_!=67.', 'select(X):-pink(X,_),_==67.', 'select(X):-pink(X,_),C<67.']

jaccard: 1.0

AS desired:	[['pink(1,1)', 'pink(1,2)', 'pink(1,3)', 'pink(1,4)', 'pink(1,5)', 'pink(1,6)', 'pink(1,7)', 'pink(1,8)', 'pink(1,9)', 'pink(1,10)', 'pink(1,11)', 'pink(1,12)', 'pink(1,13)', 'pink(1,14)', 'pink(1,15)', 'pink(1,16)', 'pink(1,17)', 'pink(1,18)', 'pink(1,19)', 'pink(1,20)', 'pink(1,21)', 'pink(1,22)', 'pink(1,23)', 'pink(1,24)', 'pink(1,25)', 'pink(1,26)', 'pink(1,27)', 'pink(1,28)', 'pink(1,29)', 'pink(1,30)', 'pink(1,31)', 'pink(1,32)', 'pink(1,33)', 'pink(1,34)', 'pink(1,35)', 'pink(1,36)', 'pink(1,37)', 'pink(1,38)', 'pink(1,39)', 'pink(1,40)', 'pink(1,41)', 'pink(1,42)', 'pink(1,43)', 'pink(1,44)', 'pink(1,45)', 'pink(1,46)', 'pink(1,47)', 'pink(1,48)', 'pink(1,49)', 'pink(1,50)', 'pink(1,51)', 'pink(1,52)', 'pink(1,53)', 'pink(1,54)', 'pink(1,55)', 'pink(1,56)', 'pink(1,57)', 'pink(1,58)', 'pink(1,59)', 'pink(1,60)', 'pink(1,61)', 'pink(1,62)', 'pink(1,63)', 'pink(1,64)', 'pink(1,65)', 'pink(1,66)', 'pink(1,67)', 'pink(1,68)', 'pink(1,69)', 'pink(1,70)', 'pink(1,71)', 'pink(1,72)', 'pink(1,73)', 'pink(1,74)', 'pink(1,75)', 'pink(1,76)', 'pink(1,77)', 'pink(1,78)', 'pink(1,79)', 'pink(1,80)', 'pink(1,81)', 'pink(1,82)', 'pink(1,83)', 'pink(1,84)', 'pink(1,85)', 'pink(1,86)', 'pink(1,87)', 'pink(1,88)', 'pink(1,89)', 'pink(1,90)', 'pink(1,91)', 'pink(1,92)', 'pink(1,93)', 'pink(1,94)', 'pink(1,95)', 'pink(1,96)', 'pink(1,97)', 'pink(1,98)', 'pink(1,99)', 'pink(1,100)', 'pink(2,1)', 'pink(2,2)', 'pink(2,3)', 'pink(2,4)', 'pink(2,5)', 'pink(2,6)', 'pink(2,7)', 'pink(2,8)', 'pink(2,9)', 'pink(2,10)', 'pink(2,11)', 'pink(2,12)', 'pink(2,13)', 'pink(2,14)', 'pink(2,15)', 'pink(2,16)', 'pink(2,17)', 'pink(2,18)', 'pink(2,19)', 'pink(2,20)', 'pink(2,21)', 'pink(2,22)', 'pink(2,23)', 'pink(2,24)', 'pink(2,25)', 'pink(2,26)', 'pink(2,27)', 'pink(2,28)', 'pink(2,29)', 'pink(2,30)', 'pink(2,31)', 'pink(2,32)', 'pink(2,33)', 'pink(2,34)', 'pink(2,35)', 'pink(2,36)', 'pink(2,37)', 'pink(2,38)', 'pink(2,39)', 'pink(2,40)', 'pink(2,41)', 'pink(2,42)', 'pink(2,43)', 'pink(2,44)', 'pink(2,45)', 'pink(2,46)', 'pink(2,47)', 'pink(2,48)', 'pink(2,49)', 'pink(2,50)', 'pink(2,51)', 'pink(2,52)', 'pink(2,53)', 'pink(2,54)', 'pink(2,55)', 'pink(2,56)', 'pink(2,57)', 'pink(2,58)', 'pink(2,59)', 'pink(2,60)', 'pink(2,61)', 'pink(2,62)', 'pink(2,63)', 'pink(2,64)', 'pink(2,65)', 'pink(2,66)', 'pink(2,67)', 'pink(2,68)', 'pink(2,69)', 'pink(2,70)', 'pink(2,71)', 'pink(2,72)', 'pink(2,73)', 'pink(2,74)', 'pink(2,75)', 'pink(2,76)', 'pink(2,77)', 'pink(2,78)', 'pink(2,79)', 'pink(2,80)', 'pink(2,81)', 'pink(2,82)', 'pink(2,83)', 'pink(2,84)', 'pink(2,85)', 'pink(2,86)', 'pink(2,87)', 'pink(2,88)', 'pink(2,89)', 'pink(2,90)', 'pink(2,91)', 'pink(2,92)', 'pink(2,93)', 'pink(2,94)', 'pink(2,95)', 'pink(2,96)', 'pink(2,97)', 'pink(2,98)', 'pink(2,99)', 'pink(2,100)', 'pink(3,1)', 'pink(3,2)', 'pink(3,3)', 'pink(3,4)', 'pink(3,5)', 'pink(3,6)', 'pink(3,7)', 'pink(3,8)', 'pink(3,9)', 'pink(3,10)', 'pink(3,11)', 'pink(3,12)', 'pink(3,13)', 'pink(3,14)', 'pink(3,15)', 'pink(3,16)', 'pink(3,17)', 'pink(3,18)', 'pink(3,19)', 'pink(3,20)', 'pink(3,21)', 'pink(3,22)', 'pink(3,23)', 'pink(3,24)', 'pink(3,25)', 'pink(3,26)', 'pink(3,27)', 'pink(3,28)', 'pink(3,29)', 'pink(3,30)', 'pink(3,31)', 'pink(3,32)', 'pink(3,33)', 'pink(3,34)', 'pink(3,35)', 'pink(3,36)', 'pink(3,37)', 'pink(3,38)', 'pink(3,39)', 'pink(3,40)', 'pink(3,41)', 'pink(3,42)', 'pink(3,43)', 'pink(3,44)', 'pink(3,45)', 'pink(3,46)', 'pink(3,47)', 'pink(3,48)', 'pink(3,49)', 'pink(3,50)', 'pink(3,51)', 'pink(3,52)', 'pink(3,53)', 'pink(3,54)', 'pink(3,55)', 'pink(3,56)', 'pink(3,57)', 'pink(3,58)', 'pink(3,59)', 'pink(3,60)', 'pink(3,61)', 'pink(3,62)', 'pink(3,63)', 'pink(3,64)', 'pink(3,65)', 'pink(3,66)', 'pink(3,67)', 'pink(3,68)', 'pink(3,69)', 'pink(3,70)', 'pink(3,71)', 'pink(3,72)', 'pink(3,73)', 'pink(3,74)', 'pink(3,75)', 'pink(3,76)', 'pink(3,77)', 'pink(3,78)', 'pink(3,79)', 'pink(3,80)', 'pink(3,81)', 'pink(3,82)', 'pink(3,83)', 'pink(3,84)', 'pink(3,85)', 'pink(3,86)', 'pink(3,87)', 'pink(3,88)', 'pink(3,89)', 'pink(3,90)', 'pink(3,91)', 'pink(3,92)', 'pink(3,93)', 'pink(3,94)', 'pink(3,95)', 'pink(3,96)', 'pink(3,97)', 'pink(3,98)', 'pink(3,99)', 'pink(3,100)', 'select(1)', 'select(2)', 'select(3)']]
AS obtained:	[['pink(1,1)', 'pink(1,2)', 'pink(1,3)', 'pink(1,4)', 'pink(1,5)', 'pink(1,6)', 'pink(1,7)', 'pink(1,8)', 'pink(1,9)', 'pink(1,10)', 'pink(1,11)', 'pink(1,12)', 'pink(1,13)', 'pink(1,14)', 'pink(1,15)', 'pink(1,16)', 'pink(1,17)', 'pink(1,18)', 'pink(1,19)', 'pink(1,20)', 'pink(1,21)', 'pink(1,22)', 'pink(1,23)', 'pink(1,24)', 'pink(1,25)', 'pink(1,26)', 'pink(1,27)', 'pink(1,28)', 'pink(1,29)', 'pink(1,30)', 'pink(1,31)', 'pink(1,32)', 'pink(1,33)', 'pink(1,34)', 'pink(1,35)', 'pink(1,36)', 'pink(1,37)', 'pink(1,38)', 'pink(1,39)', 'pink(1,40)', 'pink(1,41)', 'pink(1,42)', 'pink(1,43)', 'pink(1,44)', 'pink(1,45)', 'pink(1,46)', 'pink(1,47)', 'pink(1,48)', 'pink(1,49)', 'pink(1,50)', 'pink(1,51)', 'pink(1,52)', 'pink(1,53)', 'pink(1,54)', 'pink(1,55)', 'pink(1,56)', 'pink(1,57)', 'pink(1,58)', 'pink(1,59)', 'pink(1,60)', 'pink(1,61)', 'pink(1,62)', 'pink(1,63)', 'pink(1,64)', 'pink(1,65)', 'pink(1,66)', 'pink(1,67)', 'pink(1,68)', 'pink(1,69)', 'pink(1,70)', 'pink(1,71)', 'pink(1,72)', 'pink(1,73)', 'pink(1,74)', 'pink(1,75)', 'pink(1,76)', 'pink(1,77)', 'pink(1,78)', 'pink(1,79)', 'pink(1,80)', 'pink(1,81)', 'pink(1,82)', 'pink(1,83)', 'pink(1,84)', 'pink(1,85)', 'pink(1,86)', 'pink(1,87)', 'pink(1,88)', 'pink(1,89)', 'pink(1,90)', 'pink(1,91)', 'pink(1,92)', 'pink(1,93)', 'pink(1,94)', 'pink(1,95)', 'pink(1,96)', 'pink(1,97)', 'pink(1,98)', 'pink(1,99)', 'pink(1,100)', 'pink(2,1)', 'pink(2,2)', 'pink(2,3)', 'pink(2,4)', 'pink(2,5)', 'pink(2,6)', 'pink(2,7)', 'pink(2,8)', 'pink(2,9)', 'pink(2,10)', 'pink(2,11)', 'pink(2,12)', 'pink(2,13)', 'pink(2,14)', 'pink(2,15)', 'pink(2,16)', 'pink(2,17)', 'pink(2,18)', 'pink(2,19)', 'pink(2,20)', 'pink(2,21)', 'pink(2,22)', 'pink(2,23)', 'pink(2,24)', 'pink(2,25)', 'pink(2,26)', 'pink(2,27)', 'pink(2,28)', 'pink(2,29)', 'pink(2,30)', 'pink(2,31)', 'pink(2,32)', 'pink(2,33)', 'pink(2,34)', 'pink(2,35)', 'pink(2,36)', 'pink(2,37)', 'pink(2,38)', 'pink(2,39)', 'pink(2,40)', 'pink(2,41)', 'pink(2,42)', 'pink(2,43)', 'pink(2,44)', 'pink(2,45)', 'pink(2,46)', 'pink(2,47)', 'pink(2,48)', 'pink(2,49)', 'pink(2,50)', 'pink(2,51)', 'pink(2,52)', 'pink(2,53)', 'pink(2,54)', 'pink(2,55)', 'pink(2,56)', 'pink(2,57)', 'pink(2,58)', 'pink(2,59)', 'pink(2,60)', 'pink(2,61)', 'pink(2,62)', 'pink(2,63)', 'pink(2,64)', 'pink(2,65)', 'pink(2,66)', 'pink(2,67)', 'pink(2,68)', 'pink(2,69)', 'pink(2,70)', 'pink(2,71)', 'pink(2,72)', 'pink(2,73)', 'pink(2,74)', 'pink(2,75)', 'pink(2,76)', 'pink(2,77)', 'pink(2,78)', 'pink(2,79)', 'pink(2,80)', 'pink(2,81)', 'pink(2,82)', 'pink(2,83)', 'pink(2,84)', 'pink(2,85)', 'pink(2,86)', 'pink(2,87)', 'pink(2,88)', 'pink(2,89)', 'pink(2,90)', 'pink(2,91)', 'pink(2,92)', 'pink(2,93)', 'pink(2,94)', 'pink(2,95)', 'pink(2,96)', 'pink(2,97)', 'pink(2,98)', 'pink(2,99)', 'pink(2,100)', 'pink(3,1)', 'pink(3,2)', 'pink(3,3)', 'pink(3,4)', 'pink(3,5)', 'pink(3,6)', 'pink(3,7)', 'pink(3,8)', 'pink(3,9)', 'pink(3,10)', 'pink(3,11)', 'pink(3,12)', 'pink(3,13)', 'pink(3,14)', 'pink(3,15)', 'pink(3,16)', 'pink(3,17)', 'pink(3,18)', 'pink(3,19)', 'pink(3,20)', 'pink(3,21)', 'pink(3,22)', 'pink(3,23)', 'pink(3,24)', 'pink(3,25)', 'pink(3,26)', 'pink(3,27)', 'pink(3,28)', 'pink(3,29)', 'pink(3,30)', 'pink(3,31)', 'pink(3,32)', 'pink(3,33)', 'pink(3,34)', 'pink(3,35)', 'pink(3,36)', 'pink(3,37)', 'pink(3,38)', 'pink(3,39)', 'pink(3,40)', 'pink(3,41)', 'pink(3,42)', 'pink(3,43)', 'pink(3,44)', 'pink(3,45)', 'pink(3,46)', 'pink(3,47)', 'pink(3,48)', 'pink(3,49)', 'pink(3,50)', 'pink(3,51)', 'pink(3,52)', 'pink(3,53)', 'pink(3,54)', 'pink(3,55)', 'pink(3,56)', 'pink(3,57)', 'pink(3,58)', 'pink(3,59)', 'pink(3,60)', 'pink(3,61)', 'pink(3,62)', 'pink(3,63)', 'pink(3,64)', 'pink(3,65)', 'pink(3,66)', 'pink(3,67)', 'pink(3,68)', 'pink(3,69)', 'pink(3,70)', 'pink(3,71)', 'pink(3,72)', 'pink(3,73)', 'pink(3,74)', 'pink(3,75)', 'pink(3,76)', 'pink(3,77)', 'pink(3,78)', 'pink(3,79)', 'pink(3,80)', 'pink(3,81)', 'pink(3,82)', 'pink(3,83)', 'pink(3,84)', 'pink(3,85)', 'pink(3,86)', 'pink(3,87)', 'pink(3,88)', 'pink(3,89)', 'pink(3,90)', 'pink(3,91)', 'pink(3,92)', 'pink(3,93)', 'pink(3,94)', 'pink(3,95)', 'pink(3,96)', 'pink(3,97)', 'pink(3,98)', 'pink(3,99)', 'pink(3,100)', 'select(1)', 'select(2)', 'select(3)']]


33
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "pink" having fields "ID","chairID","quality", and the predicate "chair" having fields "ID","surname". Define a predicate "pink_chair" that associates to each pink the attribute surname of chair. In addition, select all values associated to the predicate "pink_chair" with label "strength".

answer from file: 
pink_chair(X,Z):-pink(X,Y,_),chair(Y,Z).
select(X):-pink_chair(X,"strength").

parsed from model: 
pink_chair(X,Z):-pink(X,Y,_),chair(Y,Z).
select(X):-pink_chair(X,"strength").

facts: 
pink(0..3, 0..4,"darkmagenta").chair(0..2,"wall").chair(2..4,"strength").

generated: 
Write an ASP program for the following problem. Consider predicate "pink" having fields "ID","chairID","quality", and the predicate "chair" having fields "ID","surname". Define a predicate "pink_chair" that associates to each pink the attribute surname of chair. In addition, select all values associated to the predicate "pink_chair" with label "strength".
Answer: pink_chair(X,Z):-pink(X,Y,_),chair(Y,Z).
select(X):-pink_chair(X,"strength").

unique_rules: 
['pink_chair(X,Z):-pink(X,Y,_),chair(Y,Z).', 'select(X):-pink_chair(X,"strength").']

jaccard: 1.0

AS desired:	[['chair(2,"strength")', 'chair(3,"strength")', 'chair(4,"strength")', 'chair(0,"wall")', 'chair(1,"wall")', 'chair(2,"wall")', 'pink_chair(0,"wall")', 'pink_chair(0,"strength")', 'pink_chair(1,"wall")', 'pink_chair(1,"strength")', 'pink_chair(2,"wall")', 'pink_chair(2,"strength")', 'pink_chair(3,"wall")', 'pink_chair(3,"strength")', 'select(0)', 'select(1)', 'select(2)', 'select(3)', 'pink(0,0,"darkmagenta")', 'pink(0,1,"darkmagenta")', 'pink(0,2,"darkmagenta")', 'pink(0,3,"darkmagenta")', 'pink(0,4,"darkmagenta")', 'pink(1,0,"darkmagenta")', 'pink(1,1,"darkmagenta")', 'pink(1,2,"darkmagenta")', 'pink(1,3,"darkmagenta")', 'pink(1,4,"darkmagenta")', 'pink(2,0,"darkmagenta")', 'pink(2,1,"darkmagenta")', 'pink(2,2,"darkmagenta")', 'pink(2,3,"darkmagenta")', 'pink(2,4,"darkmagenta")', 'pink(3,0,"darkmagenta")', 'pink(3,1,"darkmagenta")', 'pink(3,2,"darkmagenta")', 'pink(3,3,"darkmagenta")', 'pink(3,4,"darkmagenta")']]
AS obtained:	[['chair(2,"strength")', 'chair(3,"strength")', 'chair(4,"strength")', 'chair(0,"wall")', 'chair(1,"wall")', 'chair(2,"wall")', 'pink_chair(0,"wall")', 'pink_chair(0,"strength")', 'pink_chair(1,"wall")', 'pink_chair(1,"strength")', 'pink_chair(2,"wall")', 'pink_chair(2,"strength")', 'pink_chair(3,"wall")', 'pink_chair(3,"strength")', 'select(0)', 'select(1)', 'select(2)', 'select(3)', 'pink(0,0,"darkmagenta")', 'pink(0,1,"darkmagenta")', 'pink(0,2,"darkmagenta")', 'pink(0,3,"darkmagenta")', 'pink(0,4,"darkmagenta")', 'pink(1,0,"darkmagenta")', 'pink(1,1,"darkmagenta")', 'pink(1,2,"darkmagenta")', 'pink(1,3,"darkmagenta")', 'pink(1,4,"darkmagenta")', 'pink(2,0,"darkmagenta")', 'pink(2,1,"darkmagenta")', 'pink(2,2,"darkmagenta")', 'pink(2,3,"darkmagenta")', 'pink(2,4,"darkmagenta")', 'pink(3,0,"darkmagenta")', 'pink(3,1,"darkmagenta")', 'pink(3,2,"darkmagenta")', 'pink(3,3,"darkmagenta")', 'pink(3,4,"darkmagenta")']]


34
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate weight. The labels are wall,storm,laptop,desk,butterfly,roof. Then prevent the predicate "weight" with value "18" from having label "wall".

answer from file: 
assign(X,"wall")|assign(X,"storm")|assign(X,"laptop")|assign(X,"desk")|assign(X,"butterfly")|assign(X,"roof"):-weight(X).
:-assign(18, "wall").

parsed from model: 
assign(X,"wall")|assign(X,"storm")|assign(X,"laptop")|assign(X,"desk")|assign(X,"butterfly")|assign(X,"roof"):-weight(X).
:-assign(18, "wall").

facts: 
weight(1..20).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate weight. The labels are wall,storm,laptop,desk,butterfly,roof. Then prevent the predicate "weight" with value "18" from having label "wall".
Answer: assign(X,"wall")|assign(X,"storm")|assign(X,"laptop")|assign(X,"desk")|assign(X,"butterfly")|assign(X,"roof"):-weight(X).
:-assign(18, "wall").
:-assign(18, "bike").
:-assign(18, "bike").
:-assign(18, "bike").
:-assign(18, "bike").
:-assign(18, "bike").
:-assign(18, "bike").
:-assign(18, "bike").
:-assign(18, "bike").
:-assign(18, "bike").


unique_rules: 
['assign(X,"wall")|assign(X,"storm")|assign(X,"laptop")|assign(X,"desk")|assign(X,"butterfly")|assign(X,"roof"):-weight(X).', ':-assign(18, "wall").', ':-assign(18, "bike").']

jaccard: 1.0

AS desired:	[['weight(1)', 'weight(2)', 'weight(3)', 'weight(4)', 'weight(5)', 'weight(6)', 'weight(7)', 'weight(8)', 'weight(9)', 'weight(10)', 'weight(11)', 'weight(12)', 'weight(13)', 'weight(14)', 'weight(15)', 'weight(16)', 'weight(17)', 'weight(18)', 'weight(19)', 'weight(20)', 'assign(1,"roof")', 'assign(2,"laptop")', 'assign(3,"roof")', 'assign(4,"roof")', 'assign(5,"roof")', 'assign(6,"roof")', 'assign(7,"roof")', 'assign(8,"roof")', 'assign(9,"roof")', 'assign(10,"roof")', 'assign(11,"roof")', 'assign(12,"roof")', 'assign(13,"roof")', 'assign(14,"roof")', 'assign(15,"roof")', 'assign(16,"roof")', 'assign(17,"roof")', 'assign(18,"butterfly")', 'assign(19,"roof")', 'assign(20,"roof")']]
AS obtained:	[['weight(1)', 'weight(2)', 'weight(3)', 'weight(4)', 'weight(5)', 'weight(6)', 'weight(7)', 'weight(8)', 'weight(9)', 'weight(10)', 'weight(11)', 'weight(12)', 'weight(13)', 'weight(14)', 'weight(15)', 'weight(16)', 'weight(17)', 'weight(18)', 'weight(19)', 'weight(20)', 'assign(1,"roof")', 'assign(2,"laptop")', 'assign(3,"roof")', 'assign(4,"roof")', 'assign(5,"roof")', 'assign(6,"roof")', 'assign(7,"roof")', 'assign(8,"roof")', 'assign(9,"roof")', 'assign(10,"roof")', 'assign(11,"roof")', 'assign(12,"roof")', 'assign(13,"roof")', 'assign(14,"roof")', 'assign(15,"roof")', 'assign(16,"roof")', 'assign(17,"roof")', 'assign(18,"butterfly")', 'assign(19,"roof")', 'assign(20,"roof")']]


35
combination_negative_filtering

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "roof" and "wall". In addition, select all values associated with predicate combination but not associated with predicate "mumbai" and label "roof".

answer from file: 
combination(X,Y):-roof(X),wall(Y).
select(X):-combination(X,_), not mumbai(X, "roof").

parsed from model: 
combination(X,Y):-roof(X),wall(Y).
select(X,Y):-combination(X,Y), not mumbai(X, "roof").

facts: 
roof(1..4).wall(1..5).mumbai(0..1,"roof").mumbai(2..3,"flower").mumbai(2..3,"chair").

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "roof" and "wall". In addition, select all values associated with predicate combination but not associated with predicate "mumbai" and label "roof".
Answer: combination(X,Y):-roof(X),wall(Y).
select(X,Y):-combination(X,Y), not mumbai(X, "roof").
combination(X,Y):-roof(X), not wall(Y).
select(X,Y):-combination(X,Y), not mumbai(X, "bike").
combination(X,Y):-wall(X), not roof(Y).
select(X,Y):-combination(X,Y), not mumbai(X, "bike").
```

unique_rules: 
['combination(X,Y):-roof(X),wall(Y).', 'select(X,Y):-combination(X,Y), not mumbai(X, "roof").', 'combination(X,Y):-roof(X), not wall(Y).', 'select(X,Y):-combination(X,Y), not mumbai(X, "bike").', 'combination(X,Y):-wall(X), not roof(Y).']

jaccard: 0.0

AS desired:	[['wall(1)', 'wall(2)', 'wall(3)', 'wall(4)', 'wall(5)', 'roof(1)', 'roof(2)', 'roof(3)', 'roof(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)', 'mumbai(2,"chair")', 'mumbai(3,"chair")', 'mumbai(2,"flower")', 'mumbai(3,"flower")', 'mumbai(0,"roof")', 'mumbai(1,"roof")', 'select(2)', 'select(3)', 'select(4)']]
AS obtained:	[['wall(1)', 'wall(2)', 'wall(3)', 'wall(4)', 'wall(5)', 'roof(1)', 'roof(2)', 'roof(3)', 'roof(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)', 'mumbai(2,"chair")', 'mumbai(3,"chair")', 'mumbai(2,"flower")', 'mumbai(3,"flower")', 'mumbai(0,"roof")', 'mumbai(1,"roof")', 'select(2,1)', 'select(2,2)', 'select(2,3)', 'select(2,4)', 'select(2,5)', 'select(3,1)', 'select(3,2)', 'select(3,3)', 'select(3,4)', 'select(3,5)', 'select(4,1)', 'select(4,2)', 'select(4,3)', 'select(4,4)', 'select(4,5)']]


36
assignment

question: 
Write an ASP solution to connect each element defined by the predicate "chair" with a single label from "darkmagenta","cairo","laptop","wall","toronto","desk","weight","singapore".

answer from file: 
assign(X,"darkmagenta")|assign(X,"cairo")|assign(X,"laptop")|assign(X,"wall")|assign(X,"toronto")|assign(X,"desk")|assign(X,"weight")|assign(X,"singapore"):-chair(X).

parsed from model: 
assign(X,"darkmagenta")|assign(X,"cairo")|assign(X,"laptop")|assign(X,"wall")|assign(X,"toronto")|assign(X,"desk")|assign(X,"weight")|assign(X,"singapore"):-chair(X).

facts: 
chair(1..5).

generated: 
Write an ASP solution to connect each element defined by the predicate "chair" with a single label from "darkmagenta","cairo","laptop","wall","toronto","desk","weight","singapore".
Answer: assign(X,"darkmagenta")|assign(X,"cairo")|assign(X,"laptop")|assign(X,"wall")|assign(X,"toronto")|assign(X,"desk")|assign(X,"weight")|assign(X,"singapore"):-chair(X).
:-assign(X,C),C=assign(X,"darkmagenta")|C=assign(X,"cairo")|C=assign(X,"laptop")|C=assign(X,"wall")|C=assign(X,"toronto")|C=assign(X,"desk")|C=assign(X,"weight")|C=assign(X,"singapore").
:-assign(

unique_rules: 
['assign(X,"darkmagenta")|assign(X,"cairo")|assign(X,"laptop")|assign(X,"wall")|assign(X,"toronto")|assign(X,"desk")|assign(X,"weight")|assign(X,"singapore"):-chair(X).', ':-assign(X,C),C=assign(X,"darkmagenta")|C=assign(X,"cairo")|C=assign(X,"laptop")|C=assign(X,"wall")|C=assign(X,"toronto")|C=assign(X,"desk")|C=assign(X,"weight")|C=assign(X,"singapore").', ':-assign(']

jaccard: 1.0

AS desired:	[['chair(1)', 'chair(2)', 'chair(3)', 'chair(4)', 'chair(5)', 'assign(1,"singapore")', 'assign(2,"singapore")', 'assign(3,"weight")', 'assign(4,"singapore")', 'assign(5,"singapore")']]
AS obtained:	[['chair(1)', 'chair(2)', 'chair(3)', 'chair(4)', 'chair(5)', 'assign(1,"singapore")', 'assign(2,"singapore")', 'assign(3,"weight")', 'assign(4,"singapore")', 'assign(5,"singapore")']]


37
constraint

question: 
Create an ASP script that excludes the predicate "toronto" with value 14 from being mapped to the label "surname".

answer from file: 
:-assign(14,surname).

parsed from model: 
:-assign(14,C),assign(C,"surname").

facts: 
toronto(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-toronto(X).

generated: 
Create an ASP script that excludes the predicate "toronto" with value 14 from being mapped to the label "surname".
Answer: :-assign(14,C),assign(C,"surname").
:-assign(14,C),C="surname".
:-assign(14,C),C!= "surname".
:-assign(14,C),C="table".
:-assign(14,C),C!= "table".
:-assign(14,C),C="bike".
:-assign(14,C),C!= "bike".
:-assign(14,C),C="person".
:-assign(14,C),C!= "person".
:-assign(14,C),C="table".
:-assign(14,C),C!= "

unique_rules: 
[':-assign(14,C),assign(C,"surname").', ':-assign(14,C),C="surname".', ':-assign(14,C),C!= "surname".', ':-assign(14,C),C="table".', ':-assign(14,C),C!= "table".', ':-assign(14,C),C="bike".', ':-assign(14,C),C!= "bike".', ':-assign(14,C),C="person".', ':-assign(14,C),C!= "person".', ':-assign(14,C),C!= "']

jaccard: 1.0

AS desired:	[['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'toronto(1)', 'toronto(2)', 'toronto(3)', 'toronto(4)', 'toronto(5)', 'toronto(6)', 'toronto(7)', 'toronto(8)', 'toronto(9)', 'toronto(10)', 'toronto(11)', 'toronto(12)', 'toronto(13)', 'toronto(14)', 'toronto(15)', 'toronto(16)', 'toronto(17)', 'toronto(18)', 'toronto(19)', 'toronto(20)']]
AS obtained:	[['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'toronto(1)', 'toronto(2)', 'toronto(3)', 'toronto(4)', 'toronto(5)', 'toronto(6)', 'toronto(7)', 'toronto(8)', 'toronto(9)', 'toronto(10)', 'toronto(11)', 'toronto(12)', 'toronto(13)', 'toronto(14)', 'toronto(15)', 'toronto(16)', 'toronto(17)', 'toronto(18)', 'toronto(19)', 'toronto(20)']]


38
combination

question: 
Generate an ASP script to enumerate all possible pairings of elements from the sets "pink" and "storm".

answer from file: 
combination(X,Y):-pink(X),storm(Y).

parsed from model: 
combination(X,Y):-pink(X,C),storm(Y,D).

facts: 
pink(1..4).storm(1..5).

generated: 
Generate an ASP script to enumerate all possible pairings of elements from the sets "pink" and "storm".
Answer: combination(X,Y):-pink(X,C),storm(Y,D).
combination(X,Y):-pink(X,C),Y(C,D).
combination(X,Y):-pink(X,C),Y(C,D).
combination(X,Y):-pink(X,C),Y(C,D).
combination(X,Y):-pink(X,C),Y(C,D).
combination(X,Y):-pink(X,C),Y(C,D).
combination(X,Y):-pink(X,C),Y(C,D).
combination(X,Y):-pink(X,C),Y(

unique_rules: 
['combination(X,Y):-pink(X,C),storm(Y,D).', 'combination(X,Y):-pink(X,C),Y(C,D).', 'combination(X,Y):-pink(X,C),Y(']

jaccard: 0.0

AS desired:	[['storm(1)', 'storm(2)', 'storm(3)', 'storm(4)', 'storm(5)', 'pink(1)', 'pink(2)', 'pink(3)', 'pink(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
AS obtained:	[['pink(1)', 'pink(2)', 'pink(3)', 'pink(4)', 'storm(1)', 'storm(2)', 'storm(3)', 'storm(4)', 'storm(5)']]


39
join

question: 
Write an ASP program for the following problem. Consider predicate "butterfly" having fields "ID","darkmagentaID","lake","owner","quality", and the predicate "darkmagenta" having fields "ID","weight". Define a predicate "butterfly_darkmagenta" that associates to each "butterfly" the "weight" of "darkmagenta".

answer from file: 
butterfly_darkmagenta(X,Z):-butterfly(X,Y,_,_,_),darkmagenta(Y,Z).

parsed from model: 
butterfly_darkmagenta(X,Z):-butterfly(X,Y,_,_,_),darkmagenta(Y,Z).

facts: 
butterfly("ID","darkmagentaID","lake","owner","quality").darkmagenta("ID","weight").

generated: 
Write an ASP program for the following problem. Consider predicate "butterfly" having fields "ID","darkmagentaID","lake","owner","quality", and the predicate "darkmagenta" having fields "ID","weight". Define a predicate "butterfly_darkmagenta" that associates to each "butterfly" the "weight" of "darkmagenta".
Answer: butterfly_darkmagenta(X,Z):-butterfly(X,Y,_,_,_),darkmagenta(Y,Z).
butterfly_darkmagenta(X,Z):-butterfly(X,Y,_,_,_),darkmagenta(Y,Z).
```
Sure, here is the ASP program for the problem:

```
define butterfly(ID,darkmagentaID,lake,owner,quality):-
	ID,darkmagentaID,lake,owner,quality.
define darkmagenta(ID,weight):-
	ID,weight.
define butterfly_darkmagenta(X,Z):-
	butterfly(X,Y,_,_,_),darkmagenta(Y,Z).
```

unique_rules: 
['butterfly_darkmagenta(X,Z):-butterfly(X,Y,_,_,_),darkmagenta(Y,Z).', 'define butterfly(ID,darkmagentaID,lake,owner,quality):-', 'define darkmagenta(ID,weight):-', 'define butterfly_darkmagenta(X,Z):-']

jaccard: 1.0

AS desired:	[['darkmagenta("ID","weight")', 'butterfly("ID","darkmagentaID","lake","owner","quality")']]
AS obtained:	[['darkmagenta("ID","weight")', 'butterfly("ID","darkmagentaID","lake","owner","quality")']]


40
closure

question: 
Generate an ASP program to construct the predicate "journey" based on the transitive closure of the predicate "mumbai".

answer from file: 
journey(X,Y):-mumbai(X,Y).
journey(X,Y):-mumbai(X,Z),journey(Z,Y).

parsed from model: 
journey(X,Y):-mumbai(X,Y).
journey(X,Y):-mumbai(X,Z),journey(Z,Y).

facts: 
mumbai(1..3, 1..4).

generated: 
Generate an ASP program to construct the predicate "journey" based on the transitive closure of the predicate "mumbai".
Answer: journey(X,Y):-mumbai(X,Y).
journey(X,Y):-mumbai(X,Z),journey(Z,Y).
:-journey(1,2).
:-journey(2,3).
:-journey(3,4).
:-journey(4,5).
:-journey(5,6).
:-journey(6,7).
:-journey(7,8).
:-journey(8,9).
:-journey(9,10).
:-journey(10,11).
:-journey(11,12).
:-journey(12,13).
:-journey(13,14).


unique_rules: 
['journey(X,Y):-mumbai(X,Y).', 'journey(X,Y):-mumbai(X,Z),journey(Z,Y).', ':-journey(1,2).', ':-journey(2,3).', ':-journey(3,4).', ':-journey(4,5).', ':-journey(5,6).', ':-journey(6,7).', ':-journey(7,8).', ':-journey(8,9).', ':-journey(9,10).', ':-journey(10,11).', ':-journey(11,12).', ':-journey(12,13).', ':-journey(13,14).']

jaccard: 1.0

AS desired:	[['mumbai(1,1)', 'mumbai(1,2)', 'mumbai(1,3)', 'mumbai(1,4)', 'mumbai(2,1)', 'mumbai(2,2)', 'mumbai(2,3)', 'mumbai(2,4)', 'mumbai(3,1)', 'mumbai(3,2)', 'mumbai(3,3)', 'mumbai(3,4)', 'journey(1,1)', 'journey(1,2)', 'journey(1,3)', 'journey(1,4)', 'journey(2,1)', 'journey(2,2)', 'journey(2,3)', 'journey(2,4)', 'journey(3,1)', 'journey(3,2)', 'journey(3,3)', 'journey(3,4)']]
AS obtained:	[['mumbai(1,1)', 'mumbai(1,2)', 'mumbai(1,3)', 'mumbai(1,4)', 'mumbai(2,1)', 'mumbai(2,2)', 'mumbai(2,3)', 'mumbai(2,4)', 'mumbai(3,1)', 'mumbai(3,2)', 'mumbai(3,3)', 'mumbai(3,4)', 'journey(1,1)', 'journey(1,2)', 'journey(1,3)', 'journey(1,4)', 'journey(2,1)', 'journey(2,2)', 'journey(2,3)', 'journey(2,4)', 'journey(3,1)', 'journey(3,2)', 'journey(3,3)', 'journey(3,4)']]


41
preference

question: 
Develop an ASP script to keep the predicate "surname" with value "13" unlinked from "quality". Any occurrence incurs a cost of "2" at level "1".

answer from file: 
:~assign(13,"quality").[2@1]

parsed from model: 
:~assign(13,"13").:~assign(2,"2").[1@1]~:-assign(quality(X,C,L),X).

facts: 
surname(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-surname(X).

generated: 
Develop an ASP script to keep the predicate "surname" with value "13" unlinked from "quality". Any occurrence incurs a cost of "2" at level "1".
Answer: :~assign(13,"13").:~assign(2,"2").[1@1]~:-assign(quality(X,C,L),X).
:-assign(13, "13").
:-assign(2, "2").
:-assign(1, "1").
:-assign(quality(X,C,L),X).
:-assign(13, "13").
:-assign(2, "2").
:-assign(1, "1").
:-assign(quality(X,C,L),X).
:-assign(13, "13").
:-assign(2, "2").
:-assign(

unique_rules: 
[':~assign(13,"13").:~assign(2,"2").[1@1]~:-assign(quality(X,C,L),X).', ':-assign(13, "13").', ':-assign(2, "2").', ':-assign(1, "1").', ':-assign(quality(X,C,L),X).', ':-assign(']

jaccard: 0.0

AS desired:	[['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'surname(1)', 'surname(2)', 'surname(3)', 'surname(4)', 'surname(5)', 'surname(6)', 'surname(7)', 'surname(8)', 'surname(9)', 'surname(10)', 'surname(11)', 'surname(12)', 'surname(13)', 'surname(14)', 'surname(15)', 'surname(16)', 'surname(17)', 'surname(18)', 'surname(19)', 'surname(20)'], ['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"strength")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'surname(1)', 'surname(2)', 'surname(3)', 'surname(4)', 'surname(5)', 'surname(6)', 'surname(7)', 'surname(8)', 'surname(9)', 'surname(10)', 'surname(11)', 'surname(12)', 'surname(13)', 'surname(14)', 'surname(15)', 'surname(16)', 'surname(17)', 'surname(18)', 'surname(19)', 'surname(20)'], ['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"strength")', 'assign(14,"quality")', 'assign(15,"darkmagenta")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'surname(1)', 'surname(2)', 'surname(3)', 'surname(4)', 'surname(5)', 'surname(6)', 'surname(7)', 'surname(8)', 'surname(9)', 'surname(10)', 'surname(11)', 'surname(12)', 'surname(13)', 'surname(14)', 'surname(15)', 'surname(16)', 'surname(17)', 'surname(18)', 'surname(19)', 'surname(20)']]
AS obtained:	['error']


42
filtering

question: 
Design an ASP program to gather values tied to the label "quality" within the context of the predicate "cloud".

answer from file: 
select(X):-cloud(X,"quality").

parsed from model: 
select(X):-cloud(X,"quality").

facts: 
cloud(1..5, "quality").

generated: 
Design an ASP program to gather values tied to the label "quality" within the context of the predicate "cloud".
Answer: select(X):-cloud(X,"quality").
select(X):-cloud(X,"price").
select(X):-cloud(X,"description").
select(X):-cloud(X,"creator").
select(X):-cloud(X,"price").
select(X):-cloud(X,"description").
select(X):-cloud(X,"creator").
select(X):-cloud(X,"price").
select(X):-cloud(X,"creator").
select(X):-cloud(X,"description").
select(X):-cloud(X,"creator").
select(X):-cloud(X,"price").
select(X):-cloud(X,"description").
select(X):-

unique_rules: 
['select(X):-cloud(X,"quality").', 'select(X):-cloud(X,"price").', 'select(X):-cloud(X,"description").', 'select(X):-cloud(X,"creator").', 'select(X):-']

jaccard: 1.0

AS desired:	[['cloud(1,"quality")', 'cloud(2,"quality")', 'cloud(3,"quality")', 'cloud(4,"quality")', 'cloud(5,"quality")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
AS obtained:	[['cloud(1,"quality")', 'cloud(2,"quality")', 'cloud(3,"quality")', 'cloud(4,"quality")', 'cloud(5,"quality")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


43
negative_filtering

question: 
Compose an ASP application to find values connected to the predicate "lightblue" but not linked to the predicate "darkmagenta" and labeled "cosenza".

answer from file: 
select(X):-lightblue(X),not darkmagenta(X,"cosenza").

parsed from model: 
select(X):-lightblue(X,_),not darkmagenta(X,"cosenza").

facts: 
lightblue(1..3).darkmagenta(1,"weight").darkmagenta(2,"chicago").darkmagenta(3,"cosenza").

generated: 
Compose an ASP application to find values connected to the predicate "lightblue" but not linked to the predicate "darkmagenta" and labeled "cosenza".
Answer: select(X):-lightblue(X,_),not darkmagenta(X,"cosenza").
select(X):-lightblue(X,_),not darkmagenta(X,"table").
select(X):-lightblue(X,_),not darkmagenta(X,"bike").
select(X):-lightblue(X,_),not darkmagenta(X,"bike").
select(X):-lightblue(X,_),not darkmagenta(X,"table").
select(X):-lightblue(X,_),not darkmagenta(X,"bike").
select(X):-lightblue(X,_),not darkmagenta(X,"bike").
select(X):-lightblue(X,_),not darkmagenta

unique_rules: 
['select(X):-lightblue(X,_),not darkmagenta(X,"cosenza").', 'select(X):-lightblue(X,_),not darkmagenta(X,"table").', 'select(X):-lightblue(X,_),not darkmagenta(X,"bike").', 'select(X):-lightblue(X,_),not darkmagenta']

jaccard: 0.0

AS desired:	[['lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'darkmagenta(1,"weight")', 'darkmagenta(2,"chicago")', 'darkmagenta(3,"cosenza")', 'select(1)', 'select(2)']]
AS obtained:	[['darkmagenta(1,"weight")', 'darkmagenta(2,"chicago")', 'darkmagenta(3,"cosenza")', 'lightblue(1)', 'lightblue(2)', 'lightblue(3)']]


44
numeric_filtering

question: 
Write an ASP solution to select values associated with the predicate "owner" with a value different than 95.

answer from file: 
select(X):-owner(X,C),C!=95.

parsed from model: 
select(X):-owner(X,C),C!=95.

facts: 
owner(1..3, 1..100).

generated: 
Write an ASP solution to select values associated with the predicate "owner" with a value different than 95.
Answer: select(X):-owner(X,C),C!=95.
select(X):-owner(X,C),C=95.
select(X):-owner(X,_),_!=95.

unique_rules: 
['select(X):-owner(X,C),C!=95.', 'select(X):-owner(X,C),C=95.', 'select(X):-owner(X,_),_!=95.']

jaccard: 1.0

AS desired:	[['owner(1,1)', 'owner(1,2)', 'owner(1,3)', 'owner(1,4)', 'owner(1,5)', 'owner(1,6)', 'owner(1,7)', 'owner(1,8)', 'owner(1,9)', 'owner(1,10)', 'owner(1,11)', 'owner(1,12)', 'owner(1,13)', 'owner(1,14)', 'owner(1,15)', 'owner(1,16)', 'owner(1,17)', 'owner(1,18)', 'owner(1,19)', 'owner(1,20)', 'owner(1,21)', 'owner(1,22)', 'owner(1,23)', 'owner(1,24)', 'owner(1,25)', 'owner(1,26)', 'owner(1,27)', 'owner(1,28)', 'owner(1,29)', 'owner(1,30)', 'owner(1,31)', 'owner(1,32)', 'owner(1,33)', 'owner(1,34)', 'owner(1,35)', 'owner(1,36)', 'owner(1,37)', 'owner(1,38)', 'owner(1,39)', 'owner(1,40)', 'owner(1,41)', 'owner(1,42)', 'owner(1,43)', 'owner(1,44)', 'owner(1,45)', 'owner(1,46)', 'owner(1,47)', 'owner(1,48)', 'owner(1,49)', 'owner(1,50)', 'owner(1,51)', 'owner(1,52)', 'owner(1,53)', 'owner(1,54)', 'owner(1,55)', 'owner(1,56)', 'owner(1,57)', 'owner(1,58)', 'owner(1,59)', 'owner(1,60)', 'owner(1,61)', 'owner(1,62)', 'owner(1,63)', 'owner(1,64)', 'owner(1,65)', 'owner(1,66)', 'owner(1,67)', 'owner(1,68)', 'owner(1,69)', 'owner(1,70)', 'owner(1,71)', 'owner(1,72)', 'owner(1,73)', 'owner(1,74)', 'owner(1,75)', 'owner(1,76)', 'owner(1,77)', 'owner(1,78)', 'owner(1,79)', 'owner(1,80)', 'owner(1,81)', 'owner(1,82)', 'owner(1,83)', 'owner(1,84)', 'owner(1,85)', 'owner(1,86)', 'owner(1,87)', 'owner(1,88)', 'owner(1,89)', 'owner(1,90)', 'owner(1,91)', 'owner(1,92)', 'owner(1,93)', 'owner(1,94)', 'owner(1,95)', 'owner(1,96)', 'owner(1,97)', 'owner(1,98)', 'owner(1,99)', 'owner(1,100)', 'owner(2,1)', 'owner(2,2)', 'owner(2,3)', 'owner(2,4)', 'owner(2,5)', 'owner(2,6)', 'owner(2,7)', 'owner(2,8)', 'owner(2,9)', 'owner(2,10)', 'owner(2,11)', 'owner(2,12)', 'owner(2,13)', 'owner(2,14)', 'owner(2,15)', 'owner(2,16)', 'owner(2,17)', 'owner(2,18)', 'owner(2,19)', 'owner(2,20)', 'owner(2,21)', 'owner(2,22)', 'owner(2,23)', 'owner(2,24)', 'owner(2,25)', 'owner(2,26)', 'owner(2,27)', 'owner(2,28)', 'owner(2,29)', 'owner(2,30)', 'owner(2,31)', 'owner(2,32)', 'owner(2,33)', 'owner(2,34)', 'owner(2,35)', 'owner(2,36)', 'owner(2,37)', 'owner(2,38)', 'owner(2,39)', 'owner(2,40)', 'owner(2,41)', 'owner(2,42)', 'owner(2,43)', 'owner(2,44)', 'owner(2,45)', 'owner(2,46)', 'owner(2,47)', 'owner(2,48)', 'owner(2,49)', 'owner(2,50)', 'owner(2,51)', 'owner(2,52)', 'owner(2,53)', 'owner(2,54)', 'owner(2,55)', 'owner(2,56)', 'owner(2,57)', 'owner(2,58)', 'owner(2,59)', 'owner(2,60)', 'owner(2,61)', 'owner(2,62)', 'owner(2,63)', 'owner(2,64)', 'owner(2,65)', 'owner(2,66)', 'owner(2,67)', 'owner(2,68)', 'owner(2,69)', 'owner(2,70)', 'owner(2,71)', 'owner(2,72)', 'owner(2,73)', 'owner(2,74)', 'owner(2,75)', 'owner(2,76)', 'owner(2,77)', 'owner(2,78)', 'owner(2,79)', 'owner(2,80)', 'owner(2,81)', 'owner(2,82)', 'owner(2,83)', 'owner(2,84)', 'owner(2,85)', 'owner(2,86)', 'owner(2,87)', 'owner(2,88)', 'owner(2,89)', 'owner(2,90)', 'owner(2,91)', 'owner(2,92)', 'owner(2,93)', 'owner(2,94)', 'owner(2,95)', 'owner(2,96)', 'owner(2,97)', 'owner(2,98)', 'owner(2,99)', 'owner(2,100)', 'owner(3,1)', 'owner(3,2)', 'owner(3,3)', 'owner(3,4)', 'owner(3,5)', 'owner(3,6)', 'owner(3,7)', 'owner(3,8)', 'owner(3,9)', 'owner(3,10)', 'owner(3,11)', 'owner(3,12)', 'owner(3,13)', 'owner(3,14)', 'owner(3,15)', 'owner(3,16)', 'owner(3,17)', 'owner(3,18)', 'owner(3,19)', 'owner(3,20)', 'owner(3,21)', 'owner(3,22)', 'owner(3,23)', 'owner(3,24)', 'owner(3,25)', 'owner(3,26)', 'owner(3,27)', 'owner(3,28)', 'owner(3,29)', 'owner(3,30)', 'owner(3,31)', 'owner(3,32)', 'owner(3,33)', 'owner(3,34)', 'owner(3,35)', 'owner(3,36)', 'owner(3,37)', 'owner(3,38)', 'owner(3,39)', 'owner(3,40)', 'owner(3,41)', 'owner(3,42)', 'owner(3,43)', 'owner(3,44)', 'owner(3,45)', 'owner(3,46)', 'owner(3,47)', 'owner(3,48)', 'owner(3,49)', 'owner(3,50)', 'owner(3,51)', 'owner(3,52)', 'owner(3,53)', 'owner(3,54)', 'owner(3,55)', 'owner(3,56)', 'owner(3,57)', 'owner(3,58)', 'owner(3,59)', 'owner(3,60)', 'owner(3,61)', 'owner(3,62)', 'owner(3,63)', 'owner(3,64)', 'owner(3,65)', 'owner(3,66)', 'owner(3,67)', 'owner(3,68)', 'owner(3,69)', 'owner(3,70)', 'owner(3,71)', 'owner(3,72)', 'owner(3,73)', 'owner(3,74)', 'owner(3,75)', 'owner(3,76)', 'owner(3,77)', 'owner(3,78)', 'owner(3,79)', 'owner(3,80)', 'owner(3,81)', 'owner(3,82)', 'owner(3,83)', 'owner(3,84)', 'owner(3,85)', 'owner(3,86)', 'owner(3,87)', 'owner(3,88)', 'owner(3,89)', 'owner(3,90)', 'owner(3,91)', 'owner(3,92)', 'owner(3,93)', 'owner(3,94)', 'owner(3,95)', 'owner(3,96)', 'owner(3,97)', 'owner(3,98)', 'owner(3,99)', 'owner(3,100)', 'select(1)', 'select(2)', 'select(3)']]
AS obtained:	[['owner(1,1)', 'owner(1,2)', 'owner(1,3)', 'owner(1,4)', 'owner(1,5)', 'owner(1,6)', 'owner(1,7)', 'owner(1,8)', 'owner(1,9)', 'owner(1,10)', 'owner(1,11)', 'owner(1,12)', 'owner(1,13)', 'owner(1,14)', 'owner(1,15)', 'owner(1,16)', 'owner(1,17)', 'owner(1,18)', 'owner(1,19)', 'owner(1,20)', 'owner(1,21)', 'owner(1,22)', 'owner(1,23)', 'owner(1,24)', 'owner(1,25)', 'owner(1,26)', 'owner(1,27)', 'owner(1,28)', 'owner(1,29)', 'owner(1,30)', 'owner(1,31)', 'owner(1,32)', 'owner(1,33)', 'owner(1,34)', 'owner(1,35)', 'owner(1,36)', 'owner(1,37)', 'owner(1,38)', 'owner(1,39)', 'owner(1,40)', 'owner(1,41)', 'owner(1,42)', 'owner(1,43)', 'owner(1,44)', 'owner(1,45)', 'owner(1,46)', 'owner(1,47)', 'owner(1,48)', 'owner(1,49)', 'owner(1,50)', 'owner(1,51)', 'owner(1,52)', 'owner(1,53)', 'owner(1,54)', 'owner(1,55)', 'owner(1,56)', 'owner(1,57)', 'owner(1,58)', 'owner(1,59)', 'owner(1,60)', 'owner(1,61)', 'owner(1,62)', 'owner(1,63)', 'owner(1,64)', 'owner(1,65)', 'owner(1,66)', 'owner(1,67)', 'owner(1,68)', 'owner(1,69)', 'owner(1,70)', 'owner(1,71)', 'owner(1,72)', 'owner(1,73)', 'owner(1,74)', 'owner(1,75)', 'owner(1,76)', 'owner(1,77)', 'owner(1,78)', 'owner(1,79)', 'owner(1,80)', 'owner(1,81)', 'owner(1,82)', 'owner(1,83)', 'owner(1,84)', 'owner(1,85)', 'owner(1,86)', 'owner(1,87)', 'owner(1,88)', 'owner(1,89)', 'owner(1,90)', 'owner(1,91)', 'owner(1,92)', 'owner(1,93)', 'owner(1,94)', 'owner(1,95)', 'owner(1,96)', 'owner(1,97)', 'owner(1,98)', 'owner(1,99)', 'owner(1,100)', 'owner(2,1)', 'owner(2,2)', 'owner(2,3)', 'owner(2,4)', 'owner(2,5)', 'owner(2,6)', 'owner(2,7)', 'owner(2,8)', 'owner(2,9)', 'owner(2,10)', 'owner(2,11)', 'owner(2,12)', 'owner(2,13)', 'owner(2,14)', 'owner(2,15)', 'owner(2,16)', 'owner(2,17)', 'owner(2,18)', 'owner(2,19)', 'owner(2,20)', 'owner(2,21)', 'owner(2,22)', 'owner(2,23)', 'owner(2,24)', 'owner(2,25)', 'owner(2,26)', 'owner(2,27)', 'owner(2,28)', 'owner(2,29)', 'owner(2,30)', 'owner(2,31)', 'owner(2,32)', 'owner(2,33)', 'owner(2,34)', 'owner(2,35)', 'owner(2,36)', 'owner(2,37)', 'owner(2,38)', 'owner(2,39)', 'owner(2,40)', 'owner(2,41)', 'owner(2,42)', 'owner(2,43)', 'owner(2,44)', 'owner(2,45)', 'owner(2,46)', 'owner(2,47)', 'owner(2,48)', 'owner(2,49)', 'owner(2,50)', 'owner(2,51)', 'owner(2,52)', 'owner(2,53)', 'owner(2,54)', 'owner(2,55)', 'owner(2,56)', 'owner(2,57)', 'owner(2,58)', 'owner(2,59)', 'owner(2,60)', 'owner(2,61)', 'owner(2,62)', 'owner(2,63)', 'owner(2,64)', 'owner(2,65)', 'owner(2,66)', 'owner(2,67)', 'owner(2,68)', 'owner(2,69)', 'owner(2,70)', 'owner(2,71)', 'owner(2,72)', 'owner(2,73)', 'owner(2,74)', 'owner(2,75)', 'owner(2,76)', 'owner(2,77)', 'owner(2,78)', 'owner(2,79)', 'owner(2,80)', 'owner(2,81)', 'owner(2,82)', 'owner(2,83)', 'owner(2,84)', 'owner(2,85)', 'owner(2,86)', 'owner(2,87)', 'owner(2,88)', 'owner(2,89)', 'owner(2,90)', 'owner(2,91)', 'owner(2,92)', 'owner(2,93)', 'owner(2,94)', 'owner(2,95)', 'owner(2,96)', 'owner(2,97)', 'owner(2,98)', 'owner(2,99)', 'owner(2,100)', 'owner(3,1)', 'owner(3,2)', 'owner(3,3)', 'owner(3,4)', 'owner(3,5)', 'owner(3,6)', 'owner(3,7)', 'owner(3,8)', 'owner(3,9)', 'owner(3,10)', 'owner(3,11)', 'owner(3,12)', 'owner(3,13)', 'owner(3,14)', 'owner(3,15)', 'owner(3,16)', 'owner(3,17)', 'owner(3,18)', 'owner(3,19)', 'owner(3,20)', 'owner(3,21)', 'owner(3,22)', 'owner(3,23)', 'owner(3,24)', 'owner(3,25)', 'owner(3,26)', 'owner(3,27)', 'owner(3,28)', 'owner(3,29)', 'owner(3,30)', 'owner(3,31)', 'owner(3,32)', 'owner(3,33)', 'owner(3,34)', 'owner(3,35)', 'owner(3,36)', 'owner(3,37)', 'owner(3,38)', 'owner(3,39)', 'owner(3,40)', 'owner(3,41)', 'owner(3,42)', 'owner(3,43)', 'owner(3,44)', 'owner(3,45)', 'owner(3,46)', 'owner(3,47)', 'owner(3,48)', 'owner(3,49)', 'owner(3,50)', 'owner(3,51)', 'owner(3,52)', 'owner(3,53)', 'owner(3,54)', 'owner(3,55)', 'owner(3,56)', 'owner(3,57)', 'owner(3,58)', 'owner(3,59)', 'owner(3,60)', 'owner(3,61)', 'owner(3,62)', 'owner(3,63)', 'owner(3,64)', 'owner(3,65)', 'owner(3,66)', 'owner(3,67)', 'owner(3,68)', 'owner(3,69)', 'owner(3,70)', 'owner(3,71)', 'owner(3,72)', 'owner(3,73)', 'owner(3,74)', 'owner(3,75)', 'owner(3,76)', 'owner(3,77)', 'owner(3,78)', 'owner(3,79)', 'owner(3,80)', 'owner(3,81)', 'owner(3,82)', 'owner(3,83)', 'owner(3,84)', 'owner(3,85)', 'owner(3,86)', 'owner(3,87)', 'owner(3,88)', 'owner(3,89)', 'owner(3,90)', 'owner(3,91)', 'owner(3,92)', 'owner(3,93)', 'owner(3,94)', 'owner(3,95)', 'owner(3,96)', 'owner(3,97)', 'owner(3,98)', 'owner(3,99)', 'owner(3,100)', 'select(1)', 'select(2)', 'select(3)']]


45
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "desk" having fields "ID","qualityID","strength", and the predicate "quality" having fields "ID","quality". Define a predicate "desk_quality" that associates to each desk the attribute quality of quality. In addition, select all values associated to the predicate "desk_quality" with label "quality".

answer from file: 
desk_quality(X,Z):-desk(X,Y,_),quality(Y,Z).
select(X):-desk_quality(X,"quality").

parsed from model: 
desk_quality(X,Z):-desk(X,Y,_),quality(Y,Z).
select(X):-desk_quality(X,"quality").

facts: 
desk(0..3, 0..4,"moscow").quality(0..2,"chicago").quality(2..4,"quality").

generated: 
Write an ASP program for the following problem. Consider predicate "desk" having fields "ID","qualityID","strength", and the predicate "quality" having fields "ID","quality". Define a predicate "desk_quality" that associates to each desk the attribute quality of quality. In addition, select all values associated to the predicate "desk_quality" with label "quality".
Answer: desk_quality(X,Z):-desk(X,Y,_),quality(Y,Z).
select(X):-desk_quality(X,"quality").
```
Sure, here is the ASP program for the problem:

```
define(desk(ID,Y,S),-ID(X,Y,_),-ID(X,Y)).
define(quality(ID,Z)).
define(desk_quality(X,Z):-desk(X,Y,_),quality(Y,Z)).
select(X):-desk_quality(X,"quality").
```

unique_rules: 
['desk_quality(X,Z):-desk(X,Y,_),quality(Y,Z).', 'select(X):-desk_quality(X,"quality").', 'define(desk_quality(X,Z):-desk(X,Y,_),quality(Y,Z)).']

jaccard: 1.0

AS desired:	[['quality(2,"quality")', 'quality(3,"quality")', 'quality(4,"quality")', 'quality(0,"chicago")', 'quality(1,"chicago")', 'quality(2,"chicago")', 'desk_quality(0,"chicago")', 'desk_quality(0,"quality")', 'desk_quality(1,"chicago")', 'desk_quality(1,"quality")', 'desk_quality(2,"chicago")', 'desk_quality(2,"quality")', 'desk_quality(3,"chicago")', 'desk_quality(3,"quality")', 'select(0)', 'select(1)', 'select(2)', 'select(3)', 'desk(0,0,"moscow")', 'desk(0,1,"moscow")', 'desk(0,2,"moscow")', 'desk(0,3,"moscow")', 'desk(0,4,"moscow")', 'desk(1,0,"moscow")', 'desk(1,1,"moscow")', 'desk(1,2,"moscow")', 'desk(1,3,"moscow")', 'desk(1,4,"moscow")', 'desk(2,0,"moscow")', 'desk(2,1,"moscow")', 'desk(2,2,"moscow")', 'desk(2,3,"moscow")', 'desk(2,4,"moscow")', 'desk(3,0,"moscow")', 'desk(3,1,"moscow")', 'desk(3,2,"moscow")', 'desk(3,3,"moscow")', 'desk(3,4,"moscow")']]
AS obtained:	[['quality(2,"quality")', 'quality(3,"quality")', 'quality(4,"quality")', 'quality(0,"chicago")', 'quality(1,"chicago")', 'quality(2,"chicago")', 'desk_quality(0,"chicago")', 'desk_quality(0,"quality")', 'desk_quality(1,"chicago")', 'desk_quality(1,"quality")', 'desk_quality(2,"chicago")', 'desk_quality(2,"quality")', 'desk_quality(3,"chicago")', 'desk_quality(3,"quality")', 'select(0)', 'select(1)', 'select(2)', 'select(3)', 'desk(0,0,"moscow")', 'desk(0,1,"moscow")', 'desk(0,2,"moscow")', 'desk(0,3,"moscow")', 'desk(0,4,"moscow")', 'desk(1,0,"moscow")', 'desk(1,1,"moscow")', 'desk(1,2,"moscow")', 'desk(1,3,"moscow")', 'desk(1,4,"moscow")', 'desk(2,0,"moscow")', 'desk(2,1,"moscow")', 'desk(2,2,"moscow")', 'desk(2,3,"moscow")', 'desk(2,4,"moscow")', 'desk(3,0,"moscow")', 'desk(3,1,"moscow")', 'desk(3,2,"moscow")', 'desk(3,3,"moscow")', 'desk(3,4,"moscow")']]


46
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate cairo. The labels are butterfly,laptop,wall,roof,cloud,desk. Then prevent the predicate "cairo" with value "9" from having label "laptop".

answer from file: 
assign(X,"butterfly")|assign(X,"laptop")|assign(X,"wall")|assign(X,"roof")|assign(X,"cloud")|assign(X,"desk"):-cairo(X).
:-assign(9, "laptop").

parsed from model: 
assign(X,"butterfly")|assign(X,"laptop")|assign(X,"wall")|assign(X,"roof")|assign(X,"cloud")|assign(X,"desk"):-cairo(X).
:-assign(9, "laptop").

facts: 
cairo(1..20).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate cairo. The labels are butterfly,laptop,wall,roof,cloud,desk. Then prevent the predicate "cairo" with value "9" from having label "laptop".
Answer: assign(X,"butterfly")|assign(X,"laptop")|assign(X,"wall")|assign(X,"roof")|assign(X,"cloud")|assign(X,"desk"):-cairo(X).
:-assign(9, "laptop").
:-assign(c("rome","bike","table","bike","table","bike","table","bike","table","bike","table","bike","table","bike","table","bike","table","bike","table","bike","table","bike","table","bike","table","bike","table","bike","table","bike","table","bike","table","bike","table","bike","table","bike","table","bike","table","bike","table","

unique_rules: 
['assign(X,"butterfly")|assign(X,"laptop")|assign(X,"wall")|assign(X,"roof")|assign(X,"cloud")|assign(X,"desk"):-cairo(X).', ':-assign(9, "laptop").', ':-assign(c("rome","bike","table","bike","table","bike","table","bike","table","bike","table","bike","table","bike","table","bike","table","bike","table","bike","table","bike","table","bike","table","bike","table","bike","table","bike","table","bike","table","bike","table","bike","table","bike","table","bike","table","bike","table","']

jaccard: 1.0

AS desired:	[['cairo(1)', 'cairo(2)', 'cairo(3)', 'cairo(4)', 'cairo(5)', 'cairo(6)', 'cairo(7)', 'cairo(8)', 'cairo(9)', 'cairo(10)', 'cairo(11)', 'cairo(12)', 'cairo(13)', 'cairo(14)', 'cairo(15)', 'cairo(16)', 'cairo(17)', 'cairo(18)', 'cairo(19)', 'cairo(20)', 'assign(1,"desk")', 'assign(2,"wall")', 'assign(3,"desk")', 'assign(4,"desk")', 'assign(5,"desk")', 'assign(6,"desk")', 'assign(7,"desk")', 'assign(8,"desk")', 'assign(9,"desk")', 'assign(10,"desk")', 'assign(11,"desk")', 'assign(12,"desk")', 'assign(13,"cloud")', 'assign(14,"desk")', 'assign(15,"cloud")', 'assign(16,"desk")', 'assign(17,"desk")', 'assign(18,"desk")', 'assign(19,"desk")', 'assign(20,"desk")']]
AS obtained:	[['cairo(1)', 'cairo(2)', 'cairo(3)', 'cairo(4)', 'cairo(5)', 'cairo(6)', 'cairo(7)', 'cairo(8)', 'cairo(9)', 'cairo(10)', 'cairo(11)', 'cairo(12)', 'cairo(13)', 'cairo(14)', 'cairo(15)', 'cairo(16)', 'cairo(17)', 'cairo(18)', 'cairo(19)', 'cairo(20)', 'assign(1,"desk")', 'assign(2,"wall")', 'assign(3,"desk")', 'assign(4,"desk")', 'assign(5,"desk")', 'assign(6,"desk")', 'assign(7,"desk")', 'assign(8,"desk")', 'assign(9,"desk")', 'assign(10,"desk")', 'assign(11,"desk")', 'assign(12,"desk")', 'assign(13,"cloud")', 'assign(14,"desk")', 'assign(15,"cloud")', 'assign(16,"desk")', 'assign(17,"desk")', 'assign(18,"desk")', 'assign(19,"desk")', 'assign(20,"desk")']]


47
combination_negative_filtering

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "chicago" and "laptop". In addition, select all values associated with predicate combination but not associated with predicate "lightblue" and label "laptop".

answer from file: 
combination(X,Y):-chicago(X),laptop(Y).
select(X):-combination(X,_), not lightblue(X, "laptop").

parsed from model: 
combination(X,Y):-chicago(X),laptop(Y).
select(X,Y):-combination(X,Y), not lightblue(X, "laptop").

facts: 
chicago(1..4).laptop(1..5).lightblue(0..1,"laptop").lightblue(2..3,"desk").lightblue(2..3,"butterfly").

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "chicago" and "laptop". In addition, select all values associated with predicate combination but not associated with predicate "lightblue" and label "laptop".
Answer: combination(X,Y):-chicago(X),laptop(Y).
select(X,Y):-combination(X,Y), not lightblue(X, "laptop").
combination(X,Y):-chicago(X), not laptop(Y).
select(X,Y):-combination(X,Y), not lightblue(X, "laptop").
combination(X,Y):-chicago(X), laptop(Y).
select(X,Y):-combination(X,Y), not lightblue(X, "laptop").
```

unique_rules: 
['combination(X,Y):-chicago(X),laptop(Y).', 'select(X,Y):-combination(X,Y), not lightblue(X, "laptop").', 'combination(X,Y):-chicago(X), not laptop(Y).', 'combination(X,Y):-chicago(X), laptop(Y).']

jaccard: 0.0

AS desired:	[['laptop(1)', 'laptop(2)', 'laptop(3)', 'laptop(4)', 'laptop(5)', 'chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)', 'lightblue(2,"butterfly")', 'lightblue(3,"butterfly")', 'lightblue(2,"desk")', 'lightblue(3,"desk")', 'lightblue(0,"laptop")', 'lightblue(1,"laptop")', 'select(2)', 'select(3)', 'select(4)']]
AS obtained:	[['laptop(1)', 'laptop(2)', 'laptop(3)', 'laptop(4)', 'laptop(5)', 'chicago(1)', 'chicago(2)', 'chicago(3)', 'chicago(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)', 'lightblue(2,"butterfly")', 'lightblue(3,"butterfly")', 'lightblue(2,"desk")', 'lightblue(3,"desk")', 'lightblue(0,"laptop")', 'lightblue(1,"laptop")', 'select(2,1)', 'select(2,2)', 'select(2,3)', 'select(2,4)', 'select(2,5)', 'select(3,1)', 'select(3,2)', 'select(3,3)', 'select(3,4)', 'select(3,5)', 'select(4,1)', 'select(4,2)', 'select(4,3)', 'select(4,4)', 'select(4,5)']]


48
assignment

question: 
Design an ASP script to connect each element, as determined by the predicate "quality", with one label from "barcelona","darkmagenta","quality","delhi","hair","weight","chicago","lake".

answer from file: 
assign(X,"barcelona")|assign(X,"darkmagenta")|assign(X,"quality")|assign(X,"delhi")|assign(X,"hair")|assign(X,"weight")|assign(X,"chicago")|assign(X,"lake"):-quality(X).

parsed from model: 
assign(X,"barcelona")|assign(X,"darkmagenta")|assign(X,"quality")|assign(X,"delhi")|assign(X,"hair")|assign(X,"weight")|assign(X,"chicago")|assign(X,"lake"):-quality(X).

facts: 
quality(1..5).

generated: 
Design an ASP script to connect each element, as determined by the predicate "quality", with one label from "barcelona","darkmagenta","quality","delhi","hair","weight","chicago","lake".
Answer: assign(X,"barcelona")|assign(X,"darkmagenta")|assign(X,"quality")|assign(X,"delhi")|assign(X,"hair")|assign(X,"weight")|assign(X,"chicago")|assign(X,"lake"):-quality(X).
:-assign(X,C),C=assign(X,"bike").
:-assign(X,C),C=assign(X,"car").
:-assign(X,C),C=assign(X,"bike").
:-assign(X,C),C=assign(X,"table").
:-assign(X,C),C=assign(X,"table").
:-assign(X

unique_rules: 
['assign(X,"barcelona")|assign(X,"darkmagenta")|assign(X,"quality")|assign(X,"delhi")|assign(X,"hair")|assign(X,"weight")|assign(X,"chicago")|assign(X,"lake"):-quality(X).', ':-assign(X,C),C=assign(X,"bike").', ':-assign(X,C),C=assign(X,"car").', ':-assign(X,C),C=assign(X,"table").', ':-assign(X']

jaccard: 1.0

AS desired:	[['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'assign(1,"lake")', 'assign(2,"lake")', 'assign(3,"chicago")', 'assign(4,"lake")', 'assign(5,"lake")']]
AS obtained:	[['quality(1)', 'quality(2)', 'quality(3)', 'quality(4)', 'quality(5)', 'assign(1,"lake")', 'assign(2,"lake")', 'assign(3,"chicago")', 'assign(4,"lake")', 'assign(5,"lake")']]


49
constraint

question: 
Formulate an ASP code that ensures the predicate "lake" having value 9 is not connected to the label "strength".

answer from file: 
:-assign(9,strength).

parsed from model: 
:-assign(9,C).[C="strength"].

facts: 
lake(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-lake(X).

generated: 
Formulate an ASP code that ensures the predicate "lake" having value 9 is not connected to the label "strength".
Answer: :-assign(9,C).[C="strength"].
:-assign(9,C).[C="bike"].
:-assign(9,C).[C="table"].
:-assign(9,C).[C="person"].
:-assign(9,C).[C="tree"].
:-assign(9,C).[C="bike"].
:-assign(9,C).[C="table"].
:-assign(9,C).[C="person"].
:-assign(9,C).[C="tree"].
:-assign(9,C).[C="bike"].
:-assign(9,C).[C="table"].
:-assign(9

unique_rules: 
[':-assign(9,C).[C="strength"].', ':-assign(9,C).[C="bike"].', ':-assign(9,C).[C="table"].', ':-assign(9,C).[C="person"].', ':-assign(9,C).[C="tree"].', ':-assign(9']

jaccard: 0.0

AS desired:	[['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'lake(1)', 'lake(2)', 'lake(3)', 'lake(4)', 'lake(5)', 'lake(6)', 'lake(7)', 'lake(8)', 'lake(9)', 'lake(10)', 'lake(11)', 'lake(12)', 'lake(13)', 'lake(14)', 'lake(15)', 'lake(16)', 'lake(17)', 'lake(18)', 'lake(19)', 'lake(20)']]
AS obtained:	['error']


50
combination

question: 
Compose an ASP script to calculate the Cartesian product of elements represented by the predicates "white" and "butterfly".

answer from file: 
combination(X,Y):-white(X),butterfly(Y).

parsed from model: 
combination(X,Y):-white(X),butterfly(Y).

facts: 
white(1..4).butterfly(1..5).

generated: 
Compose an ASP script to calculate the Cartesian product of elements represented by the predicates "white" and "butterfly".
Answer: combination(X,Y):-white(X),butterfly(Y).
combination(X,Y):-white(X),Y(Y).
combination(X,Y):-Y(X),white(Y).

unique_rules: 
['combination(X,Y):-white(X),butterfly(Y).', 'combination(X,Y):-white(X),Y(Y).', 'combination(X,Y):-Y(X),white(Y).']

jaccard: 1.0

AS desired:	[['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)', 'white(1)', 'white(2)', 'white(3)', 'white(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
AS obtained:	[['butterfly(1)', 'butterfly(2)', 'butterfly(3)', 'butterfly(4)', 'butterfly(5)', 'white(1)', 'white(2)', 'white(3)', 'white(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]


51
join

question: 
Write an ASP application to address the problem where the predicate "singapore" has fields "ID","laptopID","owner","lake","hair", and the predicate "laptop" has fields "ID","weight","strength","quality". Define the predicate "singapore_laptop" that associates each singapore with the weight of laptop.

answer from file: 
singapore_laptop(X,Z):-singapore(X,Y,_,_,_),laptop(Y,Z,_,_).

parsed from model: 
singapore_laptop(X,Z):-singapore(X,Y,_,_,_),laptop(Y,Z,_,_,_).

facts: 
singapore("ID","laptopID","owner","lake","hair").laptop("ID","weight","strength","quality").

generated: 
Write an ASP application to address the problem where the predicate "singapore" has fields "ID","laptopID","owner","lake","hair", and the predicate "laptop" has fields "ID","weight","strength","quality". Define the predicate "singapore_laptop" that associates each singapore with the weight of laptop.
Answer: singapore_laptop(X,Z):-singapore(X,Y,_,_,_),laptop(Y,Z,_,_,_).
singapore_laptop(X,Z):-singapore(X,Y,_,_,_),laptop(Y,Z,_,_,_).
```
Sure, here is the ASP application to address the problem:

```
# Define the predicate "singapore"
singapore(X,Y,_,_,_) :-
    ID(X,Y,_),
    laptop(Y,_,_,_,_).

# Define the predicate "laptop"
laptop(X,Y,_,_,_) :-
    ID(X,Y,_),
    weight

unique_rules: 
['singapore_laptop(X,Z):-singapore(X,Y,_,_,_),laptop(Y,Z,_,_,_).', 'singapore(X,Y,_,_,_) :-', 'laptop(X,Y,_,_,_) :-']

jaccard: 1.0

AS desired:	[['singapore("ID","laptopID","owner","lake","hair")', 'laptop("ID","weight","strength","quality")']]
AS obtained:	[['singapore("ID","laptopID","owner","lake","hair")', 'laptop("ID","weight","strength","quality")']]


52
closure

question: 
Formulate an ASP solution to establish the transitive closure of the predicate "toronto", defined as "loops".

answer from file: 
loops(X,Y):-toronto(X,Y).
loops(X,Y):-toronto(X,Z),loops(Z,Y).

parsed from model: 


facts: 
toronto(1..3, 1..4).

generated: 
Formulate an ASP solution to establish the transitive closure of the predicate "toronto", defined as "loops".
Answer: transitive closure of "loops" = "loops".
Explanation: The transitive closure of a predicate is the predicate that is formed by combining the transitive closure of the predicate with itself. In this case, the transitive closure of "loops" is "loops". This is because if a set of elements is loops, then the transitive closure of that set is also loops.

unique_rules: 
[]

jaccard: 0.0

AS desired:	[['toronto(1,1)', 'toronto(1,2)', 'toronto(1,3)', 'toronto(1,4)', 'toronto(2,1)', 'toronto(2,2)', 'toronto(2,3)', 'toronto(2,4)', 'toronto(3,1)', 'toronto(3,2)', 'toronto(3,3)', 'toronto(3,4)', 'loops(1,1)', 'loops(1,2)', 'loops(1,3)', 'loops(1,4)', 'loops(2,1)', 'loops(2,2)', 'loops(2,3)', 'loops(2,4)', 'loops(3,1)', 'loops(3,2)', 'loops(3,3)', 'loops(3,4)']]
AS obtained:	[['toronto(1,1)', 'toronto(1,2)', 'toronto(1,3)', 'toronto(1,4)', 'toronto(2,1)', 'toronto(2,2)', 'toronto(2,3)', 'toronto(2,4)', 'toronto(3,1)', 'toronto(3,2)', 'toronto(3,3)', 'toronto(3,4)']]


53
preference

question: 
Develop an ASP script to keep the predicate "strength" with value "8" unlinked from "butterfly". Any occurrence incurs a cost of "2" at level "2".

answer from file: 
:~assign(8,"butterfly").[2@2]

parsed from model: 
:~assign(8,"8").

facts: 
strength(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-strength(X).

generated: 
Develop an ASP script to keep the predicate "strength" with value "8" unlinked from "butterfly". Any occurrence incurs a cost of "2" at level "2".
Answer: :~assign(8,"8").
:-assign(8, "butterfly").
[assign(X,2,Y,2)].
:-assign(X, "butterfly").
[X=Y].
:-assign(8, "butterfly").
[X=2].
:-assign(8, "butterfly").
[X=2].
:-end.

unique_rules: 
[':~assign(8,"8").', ':-assign(8, "butterfly").', ':-assign(X, "butterfly").', ':-end.']

jaccard: 0.0

AS desired:	[['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'strength(6)', 'strength(7)', 'strength(8)', 'strength(9)', 'strength(10)', 'strength(11)', 'strength(12)', 'strength(13)', 'strength(14)', 'strength(15)', 'strength(16)', 'strength(17)', 'strength(18)', 'strength(19)', 'strength(20)'], ['assign(1,"quality")', 'assign(2,"strength")', 'assign(3,"strength")', 'assign(4,"strength")', 'assign(5,"strength")', 'assign(6,"strength")', 'assign(7,"strength")', 'assign(8,"strength")', 'assign(9,"strength")', 'assign(10,"strength")', 'assign(11,"strength")', 'assign(12,"strength")', 'assign(13,"strength")', 'assign(14,"strength")', 'assign(15,"strength")', 'assign(16,"strength")', 'assign(17,"strength")', 'assign(18,"strength")', 'assign(19,"strength")', 'assign(20,"strength")', 'strength(1)', 'strength(2)', 'strength(3)', 'strength(4)', 'strength(5)', 'strength(6)', 'strength(7)', 'strength(8)', 'strength(9)', 'strength(10)', 'strength(11)', 'strength(12)', 'strength(13)', 'strength(14)', 'strength(15)', 'strength(16)', 'strength(17)', 'strength(18)', 'strength(19)', 'strength(20)']]
AS obtained:	['error']


54
filtering

question: 
Produce an ASP program to gather and retrieve values linked to the label "owner" in the predicate "owner".

answer from file: 
select(X):-owner(X,"owner").

parsed from model: 
select(X):-owner(X,"owner").

facts: 
owner(1..5, "owner").

generated: 
Produce an ASP program to gather and retrieve values linked to the label "owner" in the predicate "owner".
Answer: select(X):-owner(X,"owner").
select(X):-owner(X,"creator").
select(X):-owner(X,"bike").
select(X):-owner(X,"table").
select(X):-owner(X,"person").
select(X):-owner(X,"bike").
select(X):-owner(X,"table").
select(X):-owner(X,"person").
select(X):-owner(X,"bike").
select(X):-owner(X,"table").
select(X):-owner(X,"person").
select(X):-owner(X,"bike").
select(X):-owner(X,"table").
select(X):-

unique_rules: 
['select(X):-owner(X,"owner").', 'select(X):-owner(X,"creator").', 'select(X):-owner(X,"bike").', 'select(X):-owner(X,"table").', 'select(X):-owner(X,"person").', 'select(X):-']

jaccard: 1.0

AS desired:	[['owner(1,"owner")', 'owner(2,"owner")', 'owner(3,"owner")', 'owner(4,"owner")', 'owner(5,"owner")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
AS obtained:	[['owner(1,"owner")', 'owner(2,"owner")', 'owner(3,"owner")', 'owner(4,"owner")', 'owner(5,"owner")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


55
negative_filtering

question: 
Draft an ASP solution to identify values associated with the predicate "barcelona" but not tied to the predicate "barcelona" and labeled "chicago".

answer from file: 
select(X):-barcelona(X),not barcelona(X,"chicago").

parsed from model: 
select(X):-barcelona(X,C),not barcelona(X,"chicago").

facts: 
barcelona(1..3).barcelona(1,"chicago").barcelona(2,"flower").barcelona(3,"surname").

generated: 
Draft an ASP solution to identify values associated with the predicate "barcelona" but not tied to the predicate "barcelona" and labeled "chicago".
Answer: select(X):-barcelona(X,C),not barcelona(X,"chicago").
select(X):-barcelona(X,"chicago").
select(X):-not barcelona(X,"chicago").
select(X):-barcelona(X,C),not barcelona(X,"chicago").
select(X):-not barcelona(X,"chicago").
select(X):-not barcelona(X,"chicago").
select(X):-not barcelona(X,"chicago").
select(X):-not barcelona(X,"chicago").
select(X):-not barcelona(X,"chicago").
select(X):-not barcelona(X,"chicago").
select(X):-not barcelona(X,"chicago").
select(X):-

unique_rules: 
['select(X):-barcelona(X,C),not barcelona(X,"chicago").', 'select(X):-barcelona(X,"chicago").', 'select(X):-not barcelona(X,"chicago").', 'select(X):-']

jaccard: 1.0

AS desired:	[['barcelona(1)', 'barcelona(2)', 'barcelona(3)', 'barcelona(1,"chicago")', 'barcelona(2,"flower")', 'barcelona(3,"surname")', 'select(2)', 'select(3)']]
AS obtained:	[['barcelona(1,"chicago")', 'barcelona(2,"flower")', 'barcelona(3,"surname")', 'select(2)', 'select(3)', 'barcelona(1)', 'barcelona(2)', 'barcelona(3)']]


56
numeric_filtering

question: 
Craft an ASP code to retrieve values connected to the predicate "desk" with a value different than 12.

answer from file: 
select(X):-desk(X,C),C!=12.

parsed from model: 
select(X):-desk(X,C),C!=12.

facts: 
desk(1..3, 1..100).

generated: 
Craft an ASP code to retrieve values connected to the predicate "desk" with a value different than 12.
Answer: select(X):-desk(X,C),C!=12.
select(X):-desk(X,C),C==12.
select(X):-desk(X,_),_==12.
select(X):-desk(X,_),_!=12.
select(X):-desk(X,_),C<12.
select(X):-desk(X,_),C>12.

unique_rules: 
['select(X):-desk(X,C),C!=12.', 'select(X):-desk(X,C),C==12.', 'select(X):-desk(X,_),_==12.', 'select(X):-desk(X,_),_!=12.', 'select(X):-desk(X,_),C<12.', 'select(X):-desk(X,_),C>12.']

jaccard: 1.0

AS desired:	[['desk(1,1)', 'desk(1,2)', 'desk(1,3)', 'desk(1,4)', 'desk(1,5)', 'desk(1,6)', 'desk(1,7)', 'desk(1,8)', 'desk(1,9)', 'desk(1,10)', 'desk(1,11)', 'desk(1,12)', 'desk(1,13)', 'desk(1,14)', 'desk(1,15)', 'desk(1,16)', 'desk(1,17)', 'desk(1,18)', 'desk(1,19)', 'desk(1,20)', 'desk(1,21)', 'desk(1,22)', 'desk(1,23)', 'desk(1,24)', 'desk(1,25)', 'desk(1,26)', 'desk(1,27)', 'desk(1,28)', 'desk(1,29)', 'desk(1,30)', 'desk(1,31)', 'desk(1,32)', 'desk(1,33)', 'desk(1,34)', 'desk(1,35)', 'desk(1,36)', 'desk(1,37)', 'desk(1,38)', 'desk(1,39)', 'desk(1,40)', 'desk(1,41)', 'desk(1,42)', 'desk(1,43)', 'desk(1,44)', 'desk(1,45)', 'desk(1,46)', 'desk(1,47)', 'desk(1,48)', 'desk(1,49)', 'desk(1,50)', 'desk(1,51)', 'desk(1,52)', 'desk(1,53)', 'desk(1,54)', 'desk(1,55)', 'desk(1,56)', 'desk(1,57)', 'desk(1,58)', 'desk(1,59)', 'desk(1,60)', 'desk(1,61)', 'desk(1,62)', 'desk(1,63)', 'desk(1,64)', 'desk(1,65)', 'desk(1,66)', 'desk(1,67)', 'desk(1,68)', 'desk(1,69)', 'desk(1,70)', 'desk(1,71)', 'desk(1,72)', 'desk(1,73)', 'desk(1,74)', 'desk(1,75)', 'desk(1,76)', 'desk(1,77)', 'desk(1,78)', 'desk(1,79)', 'desk(1,80)', 'desk(1,81)', 'desk(1,82)', 'desk(1,83)', 'desk(1,84)', 'desk(1,85)', 'desk(1,86)', 'desk(1,87)', 'desk(1,88)', 'desk(1,89)', 'desk(1,90)', 'desk(1,91)', 'desk(1,92)', 'desk(1,93)', 'desk(1,94)', 'desk(1,95)', 'desk(1,96)', 'desk(1,97)', 'desk(1,98)', 'desk(1,99)', 'desk(1,100)', 'desk(2,1)', 'desk(2,2)', 'desk(2,3)', 'desk(2,4)', 'desk(2,5)', 'desk(2,6)', 'desk(2,7)', 'desk(2,8)', 'desk(2,9)', 'desk(2,10)', 'desk(2,11)', 'desk(2,12)', 'desk(2,13)', 'desk(2,14)', 'desk(2,15)', 'desk(2,16)', 'desk(2,17)', 'desk(2,18)', 'desk(2,19)', 'desk(2,20)', 'desk(2,21)', 'desk(2,22)', 'desk(2,23)', 'desk(2,24)', 'desk(2,25)', 'desk(2,26)', 'desk(2,27)', 'desk(2,28)', 'desk(2,29)', 'desk(2,30)', 'desk(2,31)', 'desk(2,32)', 'desk(2,33)', 'desk(2,34)', 'desk(2,35)', 'desk(2,36)', 'desk(2,37)', 'desk(2,38)', 'desk(2,39)', 'desk(2,40)', 'desk(2,41)', 'desk(2,42)', 'desk(2,43)', 'desk(2,44)', 'desk(2,45)', 'desk(2,46)', 'desk(2,47)', 'desk(2,48)', 'desk(2,49)', 'desk(2,50)', 'desk(2,51)', 'desk(2,52)', 'desk(2,53)', 'desk(2,54)', 'desk(2,55)', 'desk(2,56)', 'desk(2,57)', 'desk(2,58)', 'desk(2,59)', 'desk(2,60)', 'desk(2,61)', 'desk(2,62)', 'desk(2,63)', 'desk(2,64)', 'desk(2,65)', 'desk(2,66)', 'desk(2,67)', 'desk(2,68)', 'desk(2,69)', 'desk(2,70)', 'desk(2,71)', 'desk(2,72)', 'desk(2,73)', 'desk(2,74)', 'desk(2,75)', 'desk(2,76)', 'desk(2,77)', 'desk(2,78)', 'desk(2,79)', 'desk(2,80)', 'desk(2,81)', 'desk(2,82)', 'desk(2,83)', 'desk(2,84)', 'desk(2,85)', 'desk(2,86)', 'desk(2,87)', 'desk(2,88)', 'desk(2,89)', 'desk(2,90)', 'desk(2,91)', 'desk(2,92)', 'desk(2,93)', 'desk(2,94)', 'desk(2,95)', 'desk(2,96)', 'desk(2,97)', 'desk(2,98)', 'desk(2,99)', 'desk(2,100)', 'desk(3,1)', 'desk(3,2)', 'desk(3,3)', 'desk(3,4)', 'desk(3,5)', 'desk(3,6)', 'desk(3,7)', 'desk(3,8)', 'desk(3,9)', 'desk(3,10)', 'desk(3,11)', 'desk(3,12)', 'desk(3,13)', 'desk(3,14)', 'desk(3,15)', 'desk(3,16)', 'desk(3,17)', 'desk(3,18)', 'desk(3,19)', 'desk(3,20)', 'desk(3,21)', 'desk(3,22)', 'desk(3,23)', 'desk(3,24)', 'desk(3,25)', 'desk(3,26)', 'desk(3,27)', 'desk(3,28)', 'desk(3,29)', 'desk(3,30)', 'desk(3,31)', 'desk(3,32)', 'desk(3,33)', 'desk(3,34)', 'desk(3,35)', 'desk(3,36)', 'desk(3,37)', 'desk(3,38)', 'desk(3,39)', 'desk(3,40)', 'desk(3,41)', 'desk(3,42)', 'desk(3,43)', 'desk(3,44)', 'desk(3,45)', 'desk(3,46)', 'desk(3,47)', 'desk(3,48)', 'desk(3,49)', 'desk(3,50)', 'desk(3,51)', 'desk(3,52)', 'desk(3,53)', 'desk(3,54)', 'desk(3,55)', 'desk(3,56)', 'desk(3,57)', 'desk(3,58)', 'desk(3,59)', 'desk(3,60)', 'desk(3,61)', 'desk(3,62)', 'desk(3,63)', 'desk(3,64)', 'desk(3,65)', 'desk(3,66)', 'desk(3,67)', 'desk(3,68)', 'desk(3,69)', 'desk(3,70)', 'desk(3,71)', 'desk(3,72)', 'desk(3,73)', 'desk(3,74)', 'desk(3,75)', 'desk(3,76)', 'desk(3,77)', 'desk(3,78)', 'desk(3,79)', 'desk(3,80)', 'desk(3,81)', 'desk(3,82)', 'desk(3,83)', 'desk(3,84)', 'desk(3,85)', 'desk(3,86)', 'desk(3,87)', 'desk(3,88)', 'desk(3,89)', 'desk(3,90)', 'desk(3,91)', 'desk(3,92)', 'desk(3,93)', 'desk(3,94)', 'desk(3,95)', 'desk(3,96)', 'desk(3,97)', 'desk(3,98)', 'desk(3,99)', 'desk(3,100)', 'select(1)', 'select(2)', 'select(3)']]
AS obtained:	[['desk(1,1)', 'desk(1,2)', 'desk(1,3)', 'desk(1,4)', 'desk(1,5)', 'desk(1,6)', 'desk(1,7)', 'desk(1,8)', 'desk(1,9)', 'desk(1,10)', 'desk(1,11)', 'desk(1,12)', 'desk(1,13)', 'desk(1,14)', 'desk(1,15)', 'desk(1,16)', 'desk(1,17)', 'desk(1,18)', 'desk(1,19)', 'desk(1,20)', 'desk(1,21)', 'desk(1,22)', 'desk(1,23)', 'desk(1,24)', 'desk(1,25)', 'desk(1,26)', 'desk(1,27)', 'desk(1,28)', 'desk(1,29)', 'desk(1,30)', 'desk(1,31)', 'desk(1,32)', 'desk(1,33)', 'desk(1,34)', 'desk(1,35)', 'desk(1,36)', 'desk(1,37)', 'desk(1,38)', 'desk(1,39)', 'desk(1,40)', 'desk(1,41)', 'desk(1,42)', 'desk(1,43)', 'desk(1,44)', 'desk(1,45)', 'desk(1,46)', 'desk(1,47)', 'desk(1,48)', 'desk(1,49)', 'desk(1,50)', 'desk(1,51)', 'desk(1,52)', 'desk(1,53)', 'desk(1,54)', 'desk(1,55)', 'desk(1,56)', 'desk(1,57)', 'desk(1,58)', 'desk(1,59)', 'desk(1,60)', 'desk(1,61)', 'desk(1,62)', 'desk(1,63)', 'desk(1,64)', 'desk(1,65)', 'desk(1,66)', 'desk(1,67)', 'desk(1,68)', 'desk(1,69)', 'desk(1,70)', 'desk(1,71)', 'desk(1,72)', 'desk(1,73)', 'desk(1,74)', 'desk(1,75)', 'desk(1,76)', 'desk(1,77)', 'desk(1,78)', 'desk(1,79)', 'desk(1,80)', 'desk(1,81)', 'desk(1,82)', 'desk(1,83)', 'desk(1,84)', 'desk(1,85)', 'desk(1,86)', 'desk(1,87)', 'desk(1,88)', 'desk(1,89)', 'desk(1,90)', 'desk(1,91)', 'desk(1,92)', 'desk(1,93)', 'desk(1,94)', 'desk(1,95)', 'desk(1,96)', 'desk(1,97)', 'desk(1,98)', 'desk(1,99)', 'desk(1,100)', 'desk(2,1)', 'desk(2,2)', 'desk(2,3)', 'desk(2,4)', 'desk(2,5)', 'desk(2,6)', 'desk(2,7)', 'desk(2,8)', 'desk(2,9)', 'desk(2,10)', 'desk(2,11)', 'desk(2,12)', 'desk(2,13)', 'desk(2,14)', 'desk(2,15)', 'desk(2,16)', 'desk(2,17)', 'desk(2,18)', 'desk(2,19)', 'desk(2,20)', 'desk(2,21)', 'desk(2,22)', 'desk(2,23)', 'desk(2,24)', 'desk(2,25)', 'desk(2,26)', 'desk(2,27)', 'desk(2,28)', 'desk(2,29)', 'desk(2,30)', 'desk(2,31)', 'desk(2,32)', 'desk(2,33)', 'desk(2,34)', 'desk(2,35)', 'desk(2,36)', 'desk(2,37)', 'desk(2,38)', 'desk(2,39)', 'desk(2,40)', 'desk(2,41)', 'desk(2,42)', 'desk(2,43)', 'desk(2,44)', 'desk(2,45)', 'desk(2,46)', 'desk(2,47)', 'desk(2,48)', 'desk(2,49)', 'desk(2,50)', 'desk(2,51)', 'desk(2,52)', 'desk(2,53)', 'desk(2,54)', 'desk(2,55)', 'desk(2,56)', 'desk(2,57)', 'desk(2,58)', 'desk(2,59)', 'desk(2,60)', 'desk(2,61)', 'desk(2,62)', 'desk(2,63)', 'desk(2,64)', 'desk(2,65)', 'desk(2,66)', 'desk(2,67)', 'desk(2,68)', 'desk(2,69)', 'desk(2,70)', 'desk(2,71)', 'desk(2,72)', 'desk(2,73)', 'desk(2,74)', 'desk(2,75)', 'desk(2,76)', 'desk(2,77)', 'desk(2,78)', 'desk(2,79)', 'desk(2,80)', 'desk(2,81)', 'desk(2,82)', 'desk(2,83)', 'desk(2,84)', 'desk(2,85)', 'desk(2,86)', 'desk(2,87)', 'desk(2,88)', 'desk(2,89)', 'desk(2,90)', 'desk(2,91)', 'desk(2,92)', 'desk(2,93)', 'desk(2,94)', 'desk(2,95)', 'desk(2,96)', 'desk(2,97)', 'desk(2,98)', 'desk(2,99)', 'desk(2,100)', 'desk(3,1)', 'desk(3,2)', 'desk(3,3)', 'desk(3,4)', 'desk(3,5)', 'desk(3,6)', 'desk(3,7)', 'desk(3,8)', 'desk(3,9)', 'desk(3,10)', 'desk(3,11)', 'desk(3,12)', 'desk(3,13)', 'desk(3,14)', 'desk(3,15)', 'desk(3,16)', 'desk(3,17)', 'desk(3,18)', 'desk(3,19)', 'desk(3,20)', 'desk(3,21)', 'desk(3,22)', 'desk(3,23)', 'desk(3,24)', 'desk(3,25)', 'desk(3,26)', 'desk(3,27)', 'desk(3,28)', 'desk(3,29)', 'desk(3,30)', 'desk(3,31)', 'desk(3,32)', 'desk(3,33)', 'desk(3,34)', 'desk(3,35)', 'desk(3,36)', 'desk(3,37)', 'desk(3,38)', 'desk(3,39)', 'desk(3,40)', 'desk(3,41)', 'desk(3,42)', 'desk(3,43)', 'desk(3,44)', 'desk(3,45)', 'desk(3,46)', 'desk(3,47)', 'desk(3,48)', 'desk(3,49)', 'desk(3,50)', 'desk(3,51)', 'desk(3,52)', 'desk(3,53)', 'desk(3,54)', 'desk(3,55)', 'desk(3,56)', 'desk(3,57)', 'desk(3,58)', 'desk(3,59)', 'desk(3,60)', 'desk(3,61)', 'desk(3,62)', 'desk(3,63)', 'desk(3,64)', 'desk(3,65)', 'desk(3,66)', 'desk(3,67)', 'desk(3,68)', 'desk(3,69)', 'desk(3,70)', 'desk(3,71)', 'desk(3,72)', 'desk(3,73)', 'desk(3,74)', 'desk(3,75)', 'desk(3,76)', 'desk(3,77)', 'desk(3,78)', 'desk(3,79)', 'desk(3,80)', 'desk(3,81)', 'desk(3,82)', 'desk(3,83)', 'desk(3,84)', 'desk(3,85)', 'desk(3,86)', 'desk(3,87)', 'desk(3,88)', 'desk(3,89)', 'desk(3,90)', 'desk(3,91)', 'desk(3,92)', 'desk(3,93)', 'desk(3,94)', 'desk(3,95)', 'desk(3,96)', 'desk(3,97)', 'desk(3,98)', 'desk(3,99)', 'desk(3,100)', 'select(1)', 'select(2)', 'select(3)']]


57
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "darkmagenta" having fields "ID","strengthID","lake", and the predicate "strength" having fields "ID","weight". Define a predicate "darkmagenta_strength" that associates to each darkmagenta the attribute weight of strength. In addition, select all values associated to the predicate "darkmagenta_strength" with label "delhi".

answer from file: 
darkmagenta_strength(X,Z):-darkmagenta(X,Y,_),strength(Y,Z).
select(X):-darkmagenta_strength(X,"delhi").

parsed from model: 
darkmagenta_strength(X,Z):-darkmagenta(X,Y,_),strength(Y,Z).
select(X):-darkmagenta_strength(X,"delhi").

facts: 
darkmagenta(0..3, 0..4,"mumbai").strength(0..2,"singapore").strength(2..4,"delhi").

generated: 
Write an ASP program for the following problem. Consider predicate "darkmagenta" having fields "ID","strengthID","lake", and the predicate "strength" having fields "ID","weight". Define a predicate "darkmagenta_strength" that associates to each darkmagenta the attribute weight of strength. In addition, select all values associated to the predicate "darkmagenta_strength" with label "delhi".
Answer: darkmagenta_strength(X,Z):-darkmagenta(X,Y,_),strength(Y,Z).
select(X):-darkmagenta_strength(X,"delhi").
:-darkmagenta(1,2,_),strength(2,3).
:-darkmagenta_strength(1,3).
:-select(X).
:-darkmagenta(1,2,_),strength(2,3).
:-darkmagenta_strength(1,3).
:-select(X).
:-darkmagenta(1,2,_),strength(2,3).
:-darkmagenta_strength(1,3).
:-select(X).
:-darkmagenta(1,2

unique_rules: 
['darkmagenta_strength(X,Z):-darkmagenta(X,Y,_),strength(Y,Z).', 'select(X):-darkmagenta_strength(X,"delhi").', ':-darkmagenta(1,2,_),strength(2,3).', ':-darkmagenta_strength(1,3).', ':-select(X).', ':-darkmagenta(1,2']

jaccard: 1.0

AS desired:	[['strength(2,"delhi")', 'strength(3,"delhi")', 'strength(4,"delhi")', 'strength(0,"singapore")', 'strength(1,"singapore")', 'strength(2,"singapore")', 'darkmagenta_strength(0,"singapore")', 'darkmagenta_strength(0,"delhi")', 'darkmagenta_strength(1,"singapore")', 'darkmagenta_strength(1,"delhi")', 'darkmagenta_strength(2,"singapore")', 'darkmagenta_strength(2,"delhi")', 'darkmagenta_strength(3,"singapore")', 'darkmagenta_strength(3,"delhi")', 'select(0)', 'select(1)', 'select(2)', 'select(3)', 'darkmagenta(0,0,"mumbai")', 'darkmagenta(0,1,"mumbai")', 'darkmagenta(0,2,"mumbai")', 'darkmagenta(0,3,"mumbai")', 'darkmagenta(0,4,"mumbai")', 'darkmagenta(1,0,"mumbai")', 'darkmagenta(1,1,"mumbai")', 'darkmagenta(1,2,"mumbai")', 'darkmagenta(1,3,"mumbai")', 'darkmagenta(1,4,"mumbai")', 'darkmagenta(2,0,"mumbai")', 'darkmagenta(2,1,"mumbai")', 'darkmagenta(2,2,"mumbai")', 'darkmagenta(2,3,"mumbai")', 'darkmagenta(2,4,"mumbai")', 'darkmagenta(3,0,"mumbai")', 'darkmagenta(3,1,"mumbai")', 'darkmagenta(3,2,"mumbai")', 'darkmagenta(3,3,"mumbai")', 'darkmagenta(3,4,"mumbai")']]
AS obtained:	[['strength(2,"delhi")', 'strength(3,"delhi")', 'strength(4,"delhi")', 'strength(0,"singapore")', 'strength(1,"singapore")', 'strength(2,"singapore")', 'darkmagenta_strength(0,"singapore")', 'darkmagenta_strength(0,"delhi")', 'darkmagenta_strength(1,"singapore")', 'darkmagenta_strength(1,"delhi")', 'darkmagenta_strength(2,"singapore")', 'darkmagenta_strength(2,"delhi")', 'darkmagenta_strength(3,"singapore")', 'darkmagenta_strength(3,"delhi")', 'select(0)', 'select(1)', 'select(2)', 'select(3)', 'darkmagenta(0,0,"mumbai")', 'darkmagenta(0,1,"mumbai")', 'darkmagenta(0,2,"mumbai")', 'darkmagenta(0,3,"mumbai")', 'darkmagenta(0,4,"mumbai")', 'darkmagenta(1,0,"mumbai")', 'darkmagenta(1,1,"mumbai")', 'darkmagenta(1,2,"mumbai")', 'darkmagenta(1,3,"mumbai")', 'darkmagenta(1,4,"mumbai")', 'darkmagenta(2,0,"mumbai")', 'darkmagenta(2,1,"mumbai")', 'darkmagenta(2,2,"mumbai")', 'darkmagenta(2,3,"mumbai")', 'darkmagenta(2,4,"mumbai")', 'darkmagenta(3,0,"mumbai")', 'darkmagenta(3,1,"mumbai")', 'darkmagenta(3,2,"mumbai")', 'darkmagenta(3,3,"mumbai")', 'darkmagenta(3,4,"mumbai")']]


58
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate cairo. The labels are butterfly,wall,flower,desk,cloud,roof,chair,storm. Then prevent the predicate "cairo" with value "4" from having label "butterfly".

answer from file: 
assign(X,"butterfly")|assign(X,"wall")|assign(X,"flower")|assign(X,"desk")|assign(X,"cloud")|assign(X,"roof")|assign(X,"chair")|assign(X,"storm"):-cairo(X).
:-assign(4, "butterfly").

parsed from model: 
assign(X,"butterfly")|assign(X,"wall")|assign(X,"flower")|assign(X,"desk")|assign(X,"cloud")|assign(X,"roof")|assign(X,"chair")|assign(X,"storm"):-cairo(X).
:-assign(4, "butterfly").

facts: 
cairo(1..20).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate cairo. The labels are butterfly,wall,flower,desk,cloud,roof,chair,storm. Then prevent the predicate "cairo" with value "4" from having label "butterfly".
Answer: assign(X,"butterfly")|assign(X,"wall")|assign(X,"flower")|assign(X,"desk")|assign(X,"cloud")|assign(X,"roof")|assign(X,"chair")|assign(X,"storm"):-cairo(X).
:-assign(4, "butterfly").
:-assign(4, "wall").
:-assign(4, "flower").
:-assign(4, "desk").
:-assign(4, "cloud").
:-assign(4, "roof").
:-assign(4, "chair").
:-assign(4, "storm").
```
assign(X, "bike")|assign(X,

unique_rules: 
['assign(X,"butterfly")|assign(X,"wall")|assign(X,"flower")|assign(X,"desk")|assign(X,"cloud")|assign(X,"roof")|assign(X,"chair")|assign(X,"storm"):-cairo(X).', ':-assign(4, "butterfly").', ':-assign(4, "wall").', ':-assign(4, "flower").', ':-assign(4, "desk").', ':-assign(4, "cloud").', ':-assign(4, "roof").', ':-assign(4, "chair").', ':-assign(4, "storm").']

jaccard: 1.0

AS desired:	[['cairo(1)', 'cairo(2)', 'cairo(3)', 'cairo(4)', 'cairo(5)', 'cairo(6)', 'cairo(7)', 'cairo(8)', 'cairo(9)', 'cairo(10)', 'cairo(11)', 'cairo(12)', 'cairo(13)', 'cairo(14)', 'cairo(15)', 'cairo(16)', 'cairo(17)', 'cairo(18)', 'cairo(19)', 'cairo(20)', 'assign(1,"chair")', 'assign(2,"chair")', 'assign(3,"storm")', 'assign(4,"wall")', 'assign(5,"storm")', 'assign(6,"storm")', 'assign(7,"storm")', 'assign(8,"storm")', 'assign(9,"storm")', 'assign(10,"storm")', 'assign(11,"storm")', 'assign(12,"storm")', 'assign(13,"storm")', 'assign(14,"storm")', 'assign(15,"storm")', 'assign(16,"storm")', 'assign(17,"storm")', 'assign(18,"storm")', 'assign(19,"storm")', 'assign(20,"storm")']]
AS obtained:	[['cairo(1)', 'cairo(2)', 'cairo(3)', 'cairo(4)', 'cairo(5)', 'cairo(6)', 'cairo(7)', 'cairo(8)', 'cairo(9)', 'cairo(10)', 'cairo(11)', 'cairo(12)', 'cairo(13)', 'cairo(14)', 'cairo(15)', 'cairo(16)', 'cairo(17)', 'cairo(18)', 'cairo(19)', 'cairo(20)', 'assign(1,"chair")', 'assign(2,"chair")', 'assign(3,"storm")', 'assign(4,"wall")', 'assign(5,"storm")', 'assign(6,"storm")', 'assign(7,"storm")', 'assign(8,"storm")', 'assign(9,"storm")', 'assign(10,"storm")', 'assign(11,"storm")', 'assign(12,"storm")', 'assign(13,"storm")', 'assign(14,"storm")', 'assign(15,"storm")', 'assign(16,"storm")', 'assign(17,"storm")', 'assign(18,"storm")', 'assign(19,"storm")', 'assign(20,"storm")']]


59
combination_negative_filtering

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "owner" and "surname". In addition, select all values associated with predicate combination but not associated with predicate "black" and label "roof".

answer from file: 
combination(X,Y):-owner(X),surname(Y).
select(X):-combination(X,_), not black(X, "roof").

parsed from model: 
combination(X,Y):-owner(X),surname(Y).
select(X,Y):-combination(X,Y), not black(X, "roof").

facts: 
owner(1..4).surname(1..5).black(0..1,"roof").black(2..3,"chair").black(2..3,"butterfly").

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "owner" and "surname". In addition, select all values associated with predicate combination but not associated with predicate "black" and label "roof".
Answer: combination(X,Y):-owner(X),surname(Y).
select(X,Y):-combination(X,Y), not black(X, "roof").
combination(X,Y):-owner(X), not surname(Y).
select(X,Y):-combination(X,Y), not black(X, "roof").
combination(X,Y):-owner(X), surname(Y).
select(X,Y):-combination(X,Y), not black(X, "roof").


unique_rules: 
['combination(X,Y):-owner(X),surname(Y).', 'select(X,Y):-combination(X,Y), not black(X, "roof").', 'combination(X,Y):-owner(X), not surname(Y).', 'combination(X,Y):-owner(X), surname(Y).']

jaccard: 0.0

AS desired:	[['surname(1)', 'surname(2)', 'surname(3)', 'surname(4)', 'surname(5)', 'owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)', 'black(2,"butterfly")', 'black(3,"butterfly")', 'black(2,"chair")', 'black(3,"chair")', 'black(0,"roof")', 'black(1,"roof")', 'select(2)', 'select(3)', 'select(4)']]
AS obtained:	[['surname(1)', 'surname(2)', 'surname(3)', 'surname(4)', 'surname(5)', 'owner(1)', 'owner(2)', 'owner(3)', 'owner(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)', 'black(2,"butterfly")', 'black(3,"butterfly")', 'black(2,"chair")', 'black(3,"chair")', 'black(0,"roof")', 'black(1,"roof")', 'select(2,1)', 'select(2,2)', 'select(2,3)', 'select(2,4)', 'select(2,5)', 'select(3,1)', 'select(3,2)', 'select(3,3)', 'select(3,4)', 'select(3,5)', 'select(4,1)', 'select(4,2)', 'select(4,3)', 'select(4,4)', 'select(4,5)']]


60
assignment

question: 
Develop an ASP solution to map one specific label from "cloud","moscow","strength" to each element defined by the predicate "storm".

answer from file: 
assign(X,"cloud")|assign(X,"moscow")|assign(X,"strength"):-storm(X).

parsed from model: 
assign(X,"cloud")|assign(X,"moscow")|assign(X,"strength"):-storm(X).

facts: 
storm(1..5).

generated: 
Develop an ASP solution to map one specific label from "cloud","moscow","strength" to each element defined by the predicate "storm".
Answer: assign(X,"cloud")|assign(X,"moscow")|assign(X,"strength"):-storm(X).
assign(X,"tree"):-assign(X,"tree").
assign(X,"bike"):-assign(X,"bike").
assign(X,"car"):-assign(X,"car").
assign(X,"table"):-assign(X,"table").
assign(X,"person"):-assign(X,"person").
assign(X,"bike"):-assign(X,"bike").
assign(X,"tree"):-assign(X,"tree").
assign(X,"bike"):-assign(X,"bike").
assign(X,"car"):-assign

unique_rules: 
['assign(X,"cloud")|assign(X,"moscow")|assign(X,"strength"):-storm(X).', 'assign(X,"tree"):-assign(X,"tree").', 'assign(X,"bike"):-assign(X,"bike").', 'assign(X,"car"):-assign(X,"car").', 'assign(X,"table"):-assign(X,"table").', 'assign(X,"person"):-assign(X,"person").', 'assign(X,"car"):-assign']

jaccard: 1.0

AS desired:	[['storm(1)', 'storm(2)', 'storm(3)', 'storm(4)', 'storm(5)', 'assign(1,"strength")', 'assign(2,"strength")', 'assign(3,"strength")', 'assign(4,"strength")', 'assign(5,"strength")']]
AS obtained:	[['storm(1)', 'storm(2)', 'storm(3)', 'storm(4)', 'storm(5)', 'assign(1,"strength")', 'assign(2,"strength")', 'assign(3,"strength")', 'assign(4,"strength")', 'assign(5,"strength")']]


61
constraint

question: 
Create an ASP script that excludes the predicate "lightblue" with value 12 from being mapped to the label "delhi".

answer from file: 
:-assign(12,delhi).

parsed from model: 
:-assign(12,12).[assign(X,"delhi")|assign(X,"lightblue")].

facts: 
lightblue(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-lightblue(X).

generated: 
Create an ASP script that excludes the predicate "lightblue" with value 12 from being mapped to the label "delhi".
Answer: :-assign(12,12).[assign(X,"delhi")|assign(X,"lightblue")].
:-assign(12,12).[assign(X,"delhi")].
:-assign(12,12).[assign(X,"lightblue")].
:-assign(12,12).[assign(X,"bike")].
:-assign(12,12).[assign(X,"bike")].
:-assign(12,12).[assign(X,"bike")].
:-assign(12,12).[assign(X,"bike")].
:-assign(12,12).[

unique_rules: 
[':-assign(12,12).[assign(X,"delhi")|assign(X,"lightblue")].', ':-assign(12,12).[assign(X,"delhi")].', ':-assign(12,12).[assign(X,"lightblue")].', ':-assign(12,12).[assign(X,"bike")].', ':-assign(12,12).[']

jaccard: 0.0

AS desired:	[['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'lightblue(1)', 'lightblue(2)', 'lightblue(3)', 'lightblue(4)', 'lightblue(5)', 'lightblue(6)', 'lightblue(7)', 'lightblue(8)', 'lightblue(9)', 'lightblue(10)', 'lightblue(11)', 'lightblue(12)', 'lightblue(13)', 'lightblue(14)', 'lightblue(15)', 'lightblue(16)', 'lightblue(17)', 'lightblue(18)', 'lightblue(19)', 'lightblue(20)']]
AS obtained:	['error']


62
combination

question: 
Develop an ASP code snippet to produce all valid combinations of elements from the sets "black" and "singapore".

answer from file: 
combination(X,Y):-black(X),singapore(Y).

parsed from model: 
combination(X,Y):-black(X,C),singapore(Y,C).

facts: 
black(1..4).singapore(1..5).

generated: 
Develop an ASP code snippet to produce all valid combinations of elements from the sets "black" and "singapore".
Answer: combination(X,Y):-black(X,C),singapore(Y,C).
combination(X,Y):-black(X,C),not singapore(Y,C).
combination(X,Y):-not black(X,C),singapore(Y,C).

unique_rules: 
['combination(X,Y):-black(X,C),singapore(Y,C).', 'combination(X,Y):-black(X,C),not singapore(Y,C).', 'combination(X,Y):-not black(X,C),singapore(Y,C).']

jaccard: 0.0

AS desired:	[['singapore(1)', 'singapore(2)', 'singapore(3)', 'singapore(4)', 'singapore(5)', 'black(1)', 'black(2)', 'black(3)', 'black(4)', 'combination(1,1)', 'combination(1,2)', 'combination(1,3)', 'combination(1,4)', 'combination(1,5)', 'combination(2,1)', 'combination(2,2)', 'combination(2,3)', 'combination(2,4)', 'combination(2,5)', 'combination(3,1)', 'combination(3,2)', 'combination(3,3)', 'combination(3,4)', 'combination(3,5)', 'combination(4,1)', 'combination(4,2)', 'combination(4,3)', 'combination(4,4)', 'combination(4,5)']]
AS obtained:	[['black(1)', 'black(2)', 'black(3)', 'black(4)', 'singapore(1)', 'singapore(2)', 'singapore(3)', 'singapore(4)', 'singapore(5)']]


63
join

question: 
Generate an ASP program to create the predicate "cairo_black" that associates each cairo with the hair of black, with the fields "ID","quality","lake","blackID" of "cairo" and the fields "ID","hair","quality" of "black".

answer from file: 
cairo_black(X,Z):-cairo(X,_,_,Y),black(Y,Z,_).

parsed from model: 
cairo_black(X,Z,_,Y):-cairo(X,_,_,Y),black(Y,_,Z,_).

facts: 
cairo("ID","quality","lake","blackID").black("ID","hair","quality").

generated: 
Generate an ASP program to create the predicate "cairo_black" that associates each cairo with the hair of black, with the fields "ID","quality","lake","blackID" of "cairo" and the fields "ID","hair","quality" of "black".
Answer: cairo_black(X,Z,_,Y):-cairo(X,_,_,Y),black(Y,_,Z,_).
cairo_black(X,Z,_,Y):-black(Y,_,Z,_),cairo(X,_,_,Y).
```
Sure, here is the ASP program to create the predicate "cairo_black" that associates each cairo with the hair of black:

```
cairo_black(X,Z,_,Y):-
  cairo(X,_,_,Y),
  black(Y,_,Z,_).
```

unique_rules: 
['cairo_black(X,Z,_,Y):-cairo(X,_,_,Y),black(Y,_,Z,_).', 'cairo_black(X,Z,_,Y):-black(Y,_,Z,_),cairo(X,_,_,Y).', 'cairo_black(X,Z,_,Y):-']

jaccard: 0.0

AS desired:	[['cairo("ID","quality","lake","blackID")', 'black("ID","hair","quality")']]
AS obtained:	['error']


64
closure

question: 
Develop an ASP script that derives the predicate "family" through the transitive closure of the predicate "quality".

answer from file: 
family(X,Y):-quality(X,Y).
family(X,Y):-quality(X,Z),family(Z,Y).

parsed from model: 
family(X,Y):-quality(X,Y).
family(X,Y):-quality(X,Z),family(Z,Y).

facts: 
quality(1..3, 1..4).

generated: 
Develop an ASP script that derives the predicate "family" through the transitive closure of the predicate "quality".
Answer: family(X,Y):-quality(X,Y).
family(X,Y):-quality(X,Z),family(Z,Y).
:-family(X,Y).
:-family(X,Y),quality(X,Z).
:-family(X,Y),quality(X,Z),family(Z,Y).
:-family(X,Y),quality(X,Z),quality(Z,Y).
:-family(X,Y).
:-family(X,Y),quality(X,Z),quality(Z,Y).
:-family(X,Y).
:-family(X,Y),quality(X,Z),quality(Z,

unique_rules: 
['family(X,Y):-quality(X,Y).', 'family(X,Y):-quality(X,Z),family(Z,Y).', ':-family(X,Y).', ':-family(X,Y),quality(X,Z).', ':-family(X,Y),quality(X,Z),family(Z,Y).', ':-family(X,Y),quality(X,Z),quality(Z,Y).', ':-family(X,Y),quality(X,Z),quality(Z,']

jaccard: 1.0

AS desired:	[['quality(1,1)', 'quality(1,2)', 'quality(1,3)', 'quality(1,4)', 'quality(2,1)', 'quality(2,2)', 'quality(2,3)', 'quality(2,4)', 'quality(3,1)', 'quality(3,2)', 'quality(3,3)', 'quality(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]
AS obtained:	[['quality(1,1)', 'quality(1,2)', 'quality(1,3)', 'quality(1,4)', 'quality(2,1)', 'quality(2,2)', 'quality(2,3)', 'quality(2,4)', 'quality(3,1)', 'quality(3,2)', 'quality(3,3)', 'quality(3,4)', 'family(1,1)', 'family(1,2)', 'family(1,3)', 'family(1,4)', 'family(2,1)', 'family(2,2)', 'family(2,3)', 'family(2,4)', 'family(3,1)', 'family(3,2)', 'family(3,3)', 'family(3,4)']]


65
preference

question: 
Create an ASP program that keeps the predicate "weight" with value "2" unlinked from "weight". If linked, it incurs a cost of "1" at level "1".

answer from file: 
:~assign(2,"weight").[1@1]

parsed from model: 
:~assign(2,"2").

facts: 
weight(1..20).assign(X,"pink")|assign(X,"white")|assign(X,"black")|assign(X,"darkmagenta")|assign(X,"lightblue")|assign(X,"cosenza")|assign(X,"delhi")|assign(X,"cairo")|assign(X,"mumbai")|assign(X,"moscow")|assign(X,"singapore")|assign(X,"chicago")|assign(X,"toronto")|assign(X,"barcelona")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"surname")|assign(X,"owner")|assign(X,"lake")|assign(X,"hair")|assign(X,"weight")|assign(X,"strength")|assign(X,"quality"):-weight(X).

generated: 
Create an ASP program that keeps the predicate "weight" with value "2" unlinked from "weight". If linked, it incurs a cost of "1" at level "1".
Answer: :~assign(2,"2").
:-assign(1, "1").
:-assign(1, "1").
:-[assign(X, "2"), assign(X, "weight")](1, "1").
:-[assign(X, "2"), assign(X, "weight")](1, "1").
:-[assign(X, "2"), assign(X, "weight")](1, "1").
:-[assign(X, "2"), assign(X, "weight")](1, "1").
:-[assign(X, "2"), assign(X, "weight")](1, "1").
:-[assign(X

unique_rules: 
[':~assign(2,"2").', ':-assign(1, "1").', ':-[assign(X, "2"), assign(X, "weight")](1, "1").', ':-[assign(X']

jaccard: 0.0

AS desired:	[['assign(1,"quality")', 'assign(2,"quality")', 'assign(3,"quality")', 'assign(4,"quality")', 'assign(5,"quality")', 'assign(6,"quality")', 'assign(7,"quality")', 'assign(8,"quality")', 'assign(9,"quality")', 'assign(10,"quality")', 'assign(11,"quality")', 'assign(12,"quality")', 'assign(13,"quality")', 'assign(14,"quality")', 'assign(15,"quality")', 'assign(16,"quality")', 'assign(17,"quality")', 'assign(18,"quality")', 'assign(19,"quality")', 'assign(20,"quality")', 'weight(1)', 'weight(2)', 'weight(3)', 'weight(4)', 'weight(5)', 'weight(6)', 'weight(7)', 'weight(8)', 'weight(9)', 'weight(10)', 'weight(11)', 'weight(12)', 'weight(13)', 'weight(14)', 'weight(15)', 'weight(16)', 'weight(17)', 'weight(18)', 'weight(19)', 'weight(20)'], ['assign(1,"quality")', 'assign(2,"strength")', 'assign(3,"strength")', 'assign(4,"strength")', 'assign(5,"strength")', 'assign(6,"strength")', 'assign(7,"strength")', 'assign(8,"strength")', 'assign(9,"strength")', 'assign(10,"strength")', 'assign(11,"strength")', 'assign(12,"strength")', 'assign(13,"strength")', 'assign(14,"strength")', 'assign(15,"strength")', 'assign(16,"strength")', 'assign(17,"strength")', 'assign(18,"strength")', 'assign(19,"strength")', 'assign(20,"strength")', 'weight(1)', 'weight(2)', 'weight(3)', 'weight(4)', 'weight(5)', 'weight(6)', 'weight(7)', 'weight(8)', 'weight(9)', 'weight(10)', 'weight(11)', 'weight(12)', 'weight(13)', 'weight(14)', 'weight(15)', 'weight(16)', 'weight(17)', 'weight(18)', 'weight(19)', 'weight(20)']]
AS obtained:	['error']


66
filtering

question: 
Generate an ASP code snippet to capture values related to the label "delhi" in the predicate "strength".

answer from file: 
select(X):-strength(X,"delhi").

parsed from model: 
select(X):-strength(X,"delhi").

facts: 
strength(1..5, "delhi").

generated: 
Generate an ASP code snippet to capture values related to the label "delhi" in the predicate "strength".
Answer: select(X):-strength(X,"delhi").
select(X):-strength(X,"creator").
select(X):-strength(X,"bike").
select(X):-strength(X,"table").
select(X):-strength(X,"bike").
select(X):-strength(X,"creator").
select(X):-strength(X,"table").
select(X):-strength(X,"bike").
select(X):-strength(X,"creator").
select(X):-strength(X,"table").
select(X):-strength(X,"bike").
select(X):-strength(X,"creator").
select(X):-strength(X,"table").
select(X

unique_rules: 
['select(X):-strength(X,"delhi").', 'select(X):-strength(X,"creator").', 'select(X):-strength(X,"bike").', 'select(X):-strength(X,"table").']

jaccard: 1.0

AS desired:	[['strength(1,"delhi")', 'strength(2,"delhi")', 'strength(3,"delhi")', 'strength(4,"delhi")', 'strength(5,"delhi")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]
AS obtained:	[['strength(1,"delhi")', 'strength(2,"delhi")', 'strength(3,"delhi")', 'strength(4,"delhi")', 'strength(5,"delhi")', 'select(1)', 'select(2)', 'select(3)', 'select(4)', 'select(5)']]


67
negative_filtering

question: 
Draft an ASP solution to identify values associated with the predicate "chicago" but not tied to the predicate "cairo" and labeled "laptop".

answer from file: 
select(X):-chicago(X),not cairo(X,"laptop").

parsed from model: 
select(X):-chicago(X,_),not cairo(X,"laptop").

facts: 
chicago(1..3).cairo(1,"mumbai").cairo(2,"hair").cairo(3,"laptop").

generated: 
Draft an ASP solution to identify values associated with the predicate "chicago" but not tied to the predicate "cairo" and labeled "laptop".
Answer: select(X):-chicago(X,_),not cairo(X,"laptop").
select(X):-chicago(X,_),not cairo(X,"bike").
select(X):-chicago(X,_),not cairo(X,"table").
select(X):-chicago(X,_),not cairo(X,"person").
select(X):-chicago(X,_),not cairo(X,"food").
select(X):-chicago(X,_),not cairo(X,"car").
select(X):-chicago(X,_),not cairo(X,"bike").
select(X):-chicago(X,_),not cairo(X,"tree").
select(X

unique_rules: 
['select(X):-chicago(X,_),not cairo(X,"laptop").', 'select(X):-chicago(X,_),not cairo(X,"bike").', 'select(X):-chicago(X,_),not cairo(X,"table").', 'select(X):-chicago(X,_),not cairo(X,"person").', 'select(X):-chicago(X,_),not cairo(X,"food").', 'select(X):-chicago(X,_),not cairo(X,"car").', 'select(X):-chicago(X,_),not cairo(X,"tree").']

jaccard: 0.0

AS desired:	[['chicago(1)', 'chicago(2)', 'chicago(3)', 'cairo(1,"mumbai")', 'cairo(2,"hair")', 'cairo(3,"laptop")', 'select(1)', 'select(2)']]
AS obtained:	[['cairo(1,"mumbai")', 'cairo(2,"hair")', 'cairo(3,"laptop")', 'chicago(1)', 'chicago(2)', 'chicago(3)']]


68
numeric_filtering

question: 
Craft an ASP code to retrieve values connected to the predicate "mumbai" with a value different than 35.

answer from file: 
select(X):-mumbai(X,C),C!=35.

parsed from model: 
select(X):-mumbai(X,C),C!=35.

facts: 
mumbai(1..3, 1..100).

generated: 
Craft an ASP code to retrieve values connected to the predicate "mumbai" with a value different than 35.
Answer: select(X):-mumbai(X,C),C!=35.
select(X):-mumbai(X,C),C=35.
select(X):-mumbai(X,C),C<35.

unique_rules: 
['select(X):-mumbai(X,C),C!=35.', 'select(X):-mumbai(X,C),C=35.', 'select(X):-mumbai(X,C),C<35.']

jaccard: 1.0

AS desired:	[['mumbai(1,1)', 'mumbai(1,2)', 'mumbai(1,3)', 'mumbai(1,4)', 'mumbai(1,5)', 'mumbai(1,6)', 'mumbai(1,7)', 'mumbai(1,8)', 'mumbai(1,9)', 'mumbai(1,10)', 'mumbai(1,11)', 'mumbai(1,12)', 'mumbai(1,13)', 'mumbai(1,14)', 'mumbai(1,15)', 'mumbai(1,16)', 'mumbai(1,17)', 'mumbai(1,18)', 'mumbai(1,19)', 'mumbai(1,20)', 'mumbai(1,21)', 'mumbai(1,22)', 'mumbai(1,23)', 'mumbai(1,24)', 'mumbai(1,25)', 'mumbai(1,26)', 'mumbai(1,27)', 'mumbai(1,28)', 'mumbai(1,29)', 'mumbai(1,30)', 'mumbai(1,31)', 'mumbai(1,32)', 'mumbai(1,33)', 'mumbai(1,34)', 'mumbai(1,35)', 'mumbai(1,36)', 'mumbai(1,37)', 'mumbai(1,38)', 'mumbai(1,39)', 'mumbai(1,40)', 'mumbai(1,41)', 'mumbai(1,42)', 'mumbai(1,43)', 'mumbai(1,44)', 'mumbai(1,45)', 'mumbai(1,46)', 'mumbai(1,47)', 'mumbai(1,48)', 'mumbai(1,49)', 'mumbai(1,50)', 'mumbai(1,51)', 'mumbai(1,52)', 'mumbai(1,53)', 'mumbai(1,54)', 'mumbai(1,55)', 'mumbai(1,56)', 'mumbai(1,57)', 'mumbai(1,58)', 'mumbai(1,59)', 'mumbai(1,60)', 'mumbai(1,61)', 'mumbai(1,62)', 'mumbai(1,63)', 'mumbai(1,64)', 'mumbai(1,65)', 'mumbai(1,66)', 'mumbai(1,67)', 'mumbai(1,68)', 'mumbai(1,69)', 'mumbai(1,70)', 'mumbai(1,71)', 'mumbai(1,72)', 'mumbai(1,73)', 'mumbai(1,74)', 'mumbai(1,75)', 'mumbai(1,76)', 'mumbai(1,77)', 'mumbai(1,78)', 'mumbai(1,79)', 'mumbai(1,80)', 'mumbai(1,81)', 'mumbai(1,82)', 'mumbai(1,83)', 'mumbai(1,84)', 'mumbai(1,85)', 'mumbai(1,86)', 'mumbai(1,87)', 'mumbai(1,88)', 'mumbai(1,89)', 'mumbai(1,90)', 'mumbai(1,91)', 'mumbai(1,92)', 'mumbai(1,93)', 'mumbai(1,94)', 'mumbai(1,95)', 'mumbai(1,96)', 'mumbai(1,97)', 'mumbai(1,98)', 'mumbai(1,99)', 'mumbai(1,100)', 'mumbai(2,1)', 'mumbai(2,2)', 'mumbai(2,3)', 'mumbai(2,4)', 'mumbai(2,5)', 'mumbai(2,6)', 'mumbai(2,7)', 'mumbai(2,8)', 'mumbai(2,9)', 'mumbai(2,10)', 'mumbai(2,11)', 'mumbai(2,12)', 'mumbai(2,13)', 'mumbai(2,14)', 'mumbai(2,15)', 'mumbai(2,16)', 'mumbai(2,17)', 'mumbai(2,18)', 'mumbai(2,19)', 'mumbai(2,20)', 'mumbai(2,21)', 'mumbai(2,22)', 'mumbai(2,23)', 'mumbai(2,24)', 'mumbai(2,25)', 'mumbai(2,26)', 'mumbai(2,27)', 'mumbai(2,28)', 'mumbai(2,29)', 'mumbai(2,30)', 'mumbai(2,31)', 'mumbai(2,32)', 'mumbai(2,33)', 'mumbai(2,34)', 'mumbai(2,35)', 'mumbai(2,36)', 'mumbai(2,37)', 'mumbai(2,38)', 'mumbai(2,39)', 'mumbai(2,40)', 'mumbai(2,41)', 'mumbai(2,42)', 'mumbai(2,43)', 'mumbai(2,44)', 'mumbai(2,45)', 'mumbai(2,46)', 'mumbai(2,47)', 'mumbai(2,48)', 'mumbai(2,49)', 'mumbai(2,50)', 'mumbai(2,51)', 'mumbai(2,52)', 'mumbai(2,53)', 'mumbai(2,54)', 'mumbai(2,55)', 'mumbai(2,56)', 'mumbai(2,57)', 'mumbai(2,58)', 'mumbai(2,59)', 'mumbai(2,60)', 'mumbai(2,61)', 'mumbai(2,62)', 'mumbai(2,63)', 'mumbai(2,64)', 'mumbai(2,65)', 'mumbai(2,66)', 'mumbai(2,67)', 'mumbai(2,68)', 'mumbai(2,69)', 'mumbai(2,70)', 'mumbai(2,71)', 'mumbai(2,72)', 'mumbai(2,73)', 'mumbai(2,74)', 'mumbai(2,75)', 'mumbai(2,76)', 'mumbai(2,77)', 'mumbai(2,78)', 'mumbai(2,79)', 'mumbai(2,80)', 'mumbai(2,81)', 'mumbai(2,82)', 'mumbai(2,83)', 'mumbai(2,84)', 'mumbai(2,85)', 'mumbai(2,86)', 'mumbai(2,87)', 'mumbai(2,88)', 'mumbai(2,89)', 'mumbai(2,90)', 'mumbai(2,91)', 'mumbai(2,92)', 'mumbai(2,93)', 'mumbai(2,94)', 'mumbai(2,95)', 'mumbai(2,96)', 'mumbai(2,97)', 'mumbai(2,98)', 'mumbai(2,99)', 'mumbai(2,100)', 'mumbai(3,1)', 'mumbai(3,2)', 'mumbai(3,3)', 'mumbai(3,4)', 'mumbai(3,5)', 'mumbai(3,6)', 'mumbai(3,7)', 'mumbai(3,8)', 'mumbai(3,9)', 'mumbai(3,10)', 'mumbai(3,11)', 'mumbai(3,12)', 'mumbai(3,13)', 'mumbai(3,14)', 'mumbai(3,15)', 'mumbai(3,16)', 'mumbai(3,17)', 'mumbai(3,18)', 'mumbai(3,19)', 'mumbai(3,20)', 'mumbai(3,21)', 'mumbai(3,22)', 'mumbai(3,23)', 'mumbai(3,24)', 'mumbai(3,25)', 'mumbai(3,26)', 'mumbai(3,27)', 'mumbai(3,28)', 'mumbai(3,29)', 'mumbai(3,30)', 'mumbai(3,31)', 'mumbai(3,32)', 'mumbai(3,33)', 'mumbai(3,34)', 'mumbai(3,35)', 'mumbai(3,36)', 'mumbai(3,37)', 'mumbai(3,38)', 'mumbai(3,39)', 'mumbai(3,40)', 'mumbai(3,41)', 'mumbai(3,42)', 'mumbai(3,43)', 'mumbai(3,44)', 'mumbai(3,45)', 'mumbai(3,46)', 'mumbai(3,47)', 'mumbai(3,48)', 'mumbai(3,49)', 'mumbai(3,50)', 'mumbai(3,51)', 'mumbai(3,52)', 'mumbai(3,53)', 'mumbai(3,54)', 'mumbai(3,55)', 'mumbai(3,56)', 'mumbai(3,57)', 'mumbai(3,58)', 'mumbai(3,59)', 'mumbai(3,60)', 'mumbai(3,61)', 'mumbai(3,62)', 'mumbai(3,63)', 'mumbai(3,64)', 'mumbai(3,65)', 'mumbai(3,66)', 'mumbai(3,67)', 'mumbai(3,68)', 'mumbai(3,69)', 'mumbai(3,70)', 'mumbai(3,71)', 'mumbai(3,72)', 'mumbai(3,73)', 'mumbai(3,74)', 'mumbai(3,75)', 'mumbai(3,76)', 'mumbai(3,77)', 'mumbai(3,78)', 'mumbai(3,79)', 'mumbai(3,80)', 'mumbai(3,81)', 'mumbai(3,82)', 'mumbai(3,83)', 'mumbai(3,84)', 'mumbai(3,85)', 'mumbai(3,86)', 'mumbai(3,87)', 'mumbai(3,88)', 'mumbai(3,89)', 'mumbai(3,90)', 'mumbai(3,91)', 'mumbai(3,92)', 'mumbai(3,93)', 'mumbai(3,94)', 'mumbai(3,95)', 'mumbai(3,96)', 'mumbai(3,97)', 'mumbai(3,98)', 'mumbai(3,99)', 'mumbai(3,100)', 'select(1)', 'select(2)', 'select(3)']]
AS obtained:	[['mumbai(1,1)', 'mumbai(1,2)', 'mumbai(1,3)', 'mumbai(1,4)', 'mumbai(1,5)', 'mumbai(1,6)', 'mumbai(1,7)', 'mumbai(1,8)', 'mumbai(1,9)', 'mumbai(1,10)', 'mumbai(1,11)', 'mumbai(1,12)', 'mumbai(1,13)', 'mumbai(1,14)', 'mumbai(1,15)', 'mumbai(1,16)', 'mumbai(1,17)', 'mumbai(1,18)', 'mumbai(1,19)', 'mumbai(1,20)', 'mumbai(1,21)', 'mumbai(1,22)', 'mumbai(1,23)', 'mumbai(1,24)', 'mumbai(1,25)', 'mumbai(1,26)', 'mumbai(1,27)', 'mumbai(1,28)', 'mumbai(1,29)', 'mumbai(1,30)', 'mumbai(1,31)', 'mumbai(1,32)', 'mumbai(1,33)', 'mumbai(1,34)', 'mumbai(1,35)', 'mumbai(1,36)', 'mumbai(1,37)', 'mumbai(1,38)', 'mumbai(1,39)', 'mumbai(1,40)', 'mumbai(1,41)', 'mumbai(1,42)', 'mumbai(1,43)', 'mumbai(1,44)', 'mumbai(1,45)', 'mumbai(1,46)', 'mumbai(1,47)', 'mumbai(1,48)', 'mumbai(1,49)', 'mumbai(1,50)', 'mumbai(1,51)', 'mumbai(1,52)', 'mumbai(1,53)', 'mumbai(1,54)', 'mumbai(1,55)', 'mumbai(1,56)', 'mumbai(1,57)', 'mumbai(1,58)', 'mumbai(1,59)', 'mumbai(1,60)', 'mumbai(1,61)', 'mumbai(1,62)', 'mumbai(1,63)', 'mumbai(1,64)', 'mumbai(1,65)', 'mumbai(1,66)', 'mumbai(1,67)', 'mumbai(1,68)', 'mumbai(1,69)', 'mumbai(1,70)', 'mumbai(1,71)', 'mumbai(1,72)', 'mumbai(1,73)', 'mumbai(1,74)', 'mumbai(1,75)', 'mumbai(1,76)', 'mumbai(1,77)', 'mumbai(1,78)', 'mumbai(1,79)', 'mumbai(1,80)', 'mumbai(1,81)', 'mumbai(1,82)', 'mumbai(1,83)', 'mumbai(1,84)', 'mumbai(1,85)', 'mumbai(1,86)', 'mumbai(1,87)', 'mumbai(1,88)', 'mumbai(1,89)', 'mumbai(1,90)', 'mumbai(1,91)', 'mumbai(1,92)', 'mumbai(1,93)', 'mumbai(1,94)', 'mumbai(1,95)', 'mumbai(1,96)', 'mumbai(1,97)', 'mumbai(1,98)', 'mumbai(1,99)', 'mumbai(1,100)', 'mumbai(2,1)', 'mumbai(2,2)', 'mumbai(2,3)', 'mumbai(2,4)', 'mumbai(2,5)', 'mumbai(2,6)', 'mumbai(2,7)', 'mumbai(2,8)', 'mumbai(2,9)', 'mumbai(2,10)', 'mumbai(2,11)', 'mumbai(2,12)', 'mumbai(2,13)', 'mumbai(2,14)', 'mumbai(2,15)', 'mumbai(2,16)', 'mumbai(2,17)', 'mumbai(2,18)', 'mumbai(2,19)', 'mumbai(2,20)', 'mumbai(2,21)', 'mumbai(2,22)', 'mumbai(2,23)', 'mumbai(2,24)', 'mumbai(2,25)', 'mumbai(2,26)', 'mumbai(2,27)', 'mumbai(2,28)', 'mumbai(2,29)', 'mumbai(2,30)', 'mumbai(2,31)', 'mumbai(2,32)', 'mumbai(2,33)', 'mumbai(2,34)', 'mumbai(2,35)', 'mumbai(2,36)', 'mumbai(2,37)', 'mumbai(2,38)', 'mumbai(2,39)', 'mumbai(2,40)', 'mumbai(2,41)', 'mumbai(2,42)', 'mumbai(2,43)', 'mumbai(2,44)', 'mumbai(2,45)', 'mumbai(2,46)', 'mumbai(2,47)', 'mumbai(2,48)', 'mumbai(2,49)', 'mumbai(2,50)', 'mumbai(2,51)', 'mumbai(2,52)', 'mumbai(2,53)', 'mumbai(2,54)', 'mumbai(2,55)', 'mumbai(2,56)', 'mumbai(2,57)', 'mumbai(2,58)', 'mumbai(2,59)', 'mumbai(2,60)', 'mumbai(2,61)', 'mumbai(2,62)', 'mumbai(2,63)', 'mumbai(2,64)', 'mumbai(2,65)', 'mumbai(2,66)', 'mumbai(2,67)', 'mumbai(2,68)', 'mumbai(2,69)', 'mumbai(2,70)', 'mumbai(2,71)', 'mumbai(2,72)', 'mumbai(2,73)', 'mumbai(2,74)', 'mumbai(2,75)', 'mumbai(2,76)', 'mumbai(2,77)', 'mumbai(2,78)', 'mumbai(2,79)', 'mumbai(2,80)', 'mumbai(2,81)', 'mumbai(2,82)', 'mumbai(2,83)', 'mumbai(2,84)', 'mumbai(2,85)', 'mumbai(2,86)', 'mumbai(2,87)', 'mumbai(2,88)', 'mumbai(2,89)', 'mumbai(2,90)', 'mumbai(2,91)', 'mumbai(2,92)', 'mumbai(2,93)', 'mumbai(2,94)', 'mumbai(2,95)', 'mumbai(2,96)', 'mumbai(2,97)', 'mumbai(2,98)', 'mumbai(2,99)', 'mumbai(2,100)', 'mumbai(3,1)', 'mumbai(3,2)', 'mumbai(3,3)', 'mumbai(3,4)', 'mumbai(3,5)', 'mumbai(3,6)', 'mumbai(3,7)', 'mumbai(3,8)', 'mumbai(3,9)', 'mumbai(3,10)', 'mumbai(3,11)', 'mumbai(3,12)', 'mumbai(3,13)', 'mumbai(3,14)', 'mumbai(3,15)', 'mumbai(3,16)', 'mumbai(3,17)', 'mumbai(3,18)', 'mumbai(3,19)', 'mumbai(3,20)', 'mumbai(3,21)', 'mumbai(3,22)', 'mumbai(3,23)', 'mumbai(3,24)', 'mumbai(3,25)', 'mumbai(3,26)', 'mumbai(3,27)', 'mumbai(3,28)', 'mumbai(3,29)', 'mumbai(3,30)', 'mumbai(3,31)', 'mumbai(3,32)', 'mumbai(3,33)', 'mumbai(3,34)', 'mumbai(3,35)', 'mumbai(3,36)', 'mumbai(3,37)', 'mumbai(3,38)', 'mumbai(3,39)', 'mumbai(3,40)', 'mumbai(3,41)', 'mumbai(3,42)', 'mumbai(3,43)', 'mumbai(3,44)', 'mumbai(3,45)', 'mumbai(3,46)', 'mumbai(3,47)', 'mumbai(3,48)', 'mumbai(3,49)', 'mumbai(3,50)', 'mumbai(3,51)', 'mumbai(3,52)', 'mumbai(3,53)', 'mumbai(3,54)', 'mumbai(3,55)', 'mumbai(3,56)', 'mumbai(3,57)', 'mumbai(3,58)', 'mumbai(3,59)', 'mumbai(3,60)', 'mumbai(3,61)', 'mumbai(3,62)', 'mumbai(3,63)', 'mumbai(3,64)', 'mumbai(3,65)', 'mumbai(3,66)', 'mumbai(3,67)', 'mumbai(3,68)', 'mumbai(3,69)', 'mumbai(3,70)', 'mumbai(3,71)', 'mumbai(3,72)', 'mumbai(3,73)', 'mumbai(3,74)', 'mumbai(3,75)', 'mumbai(3,76)', 'mumbai(3,77)', 'mumbai(3,78)', 'mumbai(3,79)', 'mumbai(3,80)', 'mumbai(3,81)', 'mumbai(3,82)', 'mumbai(3,83)', 'mumbai(3,84)', 'mumbai(3,85)', 'mumbai(3,86)', 'mumbai(3,87)', 'mumbai(3,88)', 'mumbai(3,89)', 'mumbai(3,90)', 'mumbai(3,91)', 'mumbai(3,92)', 'mumbai(3,93)', 'mumbai(3,94)', 'mumbai(3,95)', 'mumbai(3,96)', 'mumbai(3,97)', 'mumbai(3,98)', 'mumbai(3,99)', 'mumbai(3,100)', 'select(1)', 'select(2)', 'select(3)']]


69
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "cosenza" having fields "ID","delhiID","surname", and the predicate "delhi" having fields "ID","quality". Define a predicate "cosenza_delhi" that associates to each cosenza the attribute quality of delhi. In addition, select all values associated to the predicate "cosenza_delhi" with label "chair".

answer from file: 
cosenza_delhi(X,Z):-cosenza(X,Y,_),delhi(Y,Z).
select(X):-cosenza_delhi(X,"chair").

parsed from model: 
cosenza_delhi(X,Z):-cosenza(X,Y,_),delhi(Y,Z).
select(X):-cosenza_delhi(X,"chair").

facts: 
cosenza(0..3, 0..4,"moscow").delhi(0..2,"roof").delhi(2..4,"chair").

generated: 
Write an ASP program for the following problem. Consider predicate "cosenza" having fields "ID","delhiID","surname", and the predicate "delhi" having fields "ID","quality". Define a predicate "cosenza_delhi" that associates to each cosenza the attribute quality of delhi. In addition, select all values associated to the predicate "cosenza_delhi" with label "chair".
Answer: cosenza_delhi(X,Z):-cosenza(X,Y,_),delhi(Y,Z).
select(X):-cosenza_delhi(X,"chair").
```
Sure, here is the ASP program for the problem:

```asp
# Define the predicate "cosenza_delhi"
cosenza_delhi(X,Z):-cosenza(X,Y,_),delhi(Y,Z).

# Select all values associated to the predicate "cosenza_delhi" with label "chair"
select(X):-cosenza_delhi(X,"chair").
```

unique_rules: 
['cosenza_delhi(X,Z):-cosenza(X,Y,_),delhi(Y,Z).', 'select(X):-cosenza_delhi(X,"chair").']

jaccard: 1.0

AS desired:	[['delhi(2,"chair")', 'delhi(3,"chair")', 'delhi(4,"chair")', 'delhi(0,"roof")', 'delhi(1,"roof")', 'delhi(2,"roof")', 'cosenza_delhi(0,"roof")', 'cosenza_delhi(0,"chair")', 'cosenza_delhi(1,"roof")', 'cosenza_delhi(1,"chair")', 'cosenza_delhi(2,"roof")', 'cosenza_delhi(2,"chair")', 'cosenza_delhi(3,"roof")', 'cosenza_delhi(3,"chair")', 'select(0)', 'select(1)', 'select(2)', 'select(3)', 'cosenza(0,0,"moscow")', 'cosenza(0,1,"moscow")', 'cosenza(0,2,"moscow")', 'cosenza(0,3,"moscow")', 'cosenza(0,4,"moscow")', 'cosenza(1,0,"moscow")', 'cosenza(1,1,"moscow")', 'cosenza(1,2,"moscow")', 'cosenza(1,3,"moscow")', 'cosenza(1,4,"moscow")', 'cosenza(2,0,"moscow")', 'cosenza(2,1,"moscow")', 'cosenza(2,2,"moscow")', 'cosenza(2,3,"moscow")', 'cosenza(2,4,"moscow")', 'cosenza(3,0,"moscow")', 'cosenza(3,1,"moscow")', 'cosenza(3,2,"moscow")', 'cosenza(3,3,"moscow")', 'cosenza(3,4,"moscow")']]
AS obtained:	[['delhi(2,"chair")', 'delhi(3,"chair")', 'delhi(4,"chair")', 'delhi(0,"roof")', 'delhi(1,"roof")', 'delhi(2,"roof")', 'cosenza_delhi(0,"roof")', 'cosenza_delhi(0,"chair")', 'cosenza_delhi(1,"roof")', 'cosenza_delhi(1,"chair")', 'cosenza_delhi(2,"roof")', 'cosenza_delhi(2,"chair")', 'cosenza_delhi(3,"roof")', 'cosenza_delhi(3,"chair")', 'select(0)', 'select(1)', 'select(2)', 'select(3)', 'cosenza(0,0,"moscow")', 'cosenza(0,1,"moscow")', 'cosenza(0,2,"moscow")', 'cosenza(0,3,"moscow")', 'cosenza(0,4,"moscow")', 'cosenza(1,0,"moscow")', 'cosenza(1,1,"moscow")', 'cosenza(1,2,"moscow")', 'cosenza(1,3,"moscow")', 'cosenza(1,4,"moscow")', 'cosenza(2,0,"moscow")', 'cosenza(2,1,"moscow")', 'cosenza(2,2,"moscow")', 'cosenza(2,3,"moscow")', 'cosenza(2,4,"moscow")', 'cosenza(3,0,"moscow")', 'cosenza(3,1,"moscow")', 'cosenza(3,2,"moscow")', 'cosenza(3,3,"moscow")', 'cosenza(3,4,"moscow")']]


