
0
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "black" having fields "ID","strength","strengthID", and the predicate "strength" having fields "ID","lake". Define a predicate "black_strength" that associates to each "black" the "lake" of "strength" only where "lake" is different than 80.

answer from file: 
black_strength(X,Z):-black(X,_,Y),strength(Y,Z), Z!=80.

facts: 
black("ID","strength","strengthID").strength("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "black" having fields "ID","strength","strengthID", and the predicate "strength" having fields "ID","lake". Define a predicate "black_strength" that associates to each "black" the "lake" of "strength" only where "lake" is different than 80.
Answer: black_strength(X,Z):-black(X,_,Y),strength(Y,Z), Z!=80.
black_strength(X,_,Y):-black(X,_,Y),strength(Y,Z), Z==80.
assign(X,"lake")|assign(X,"height")|assign(X,"age")|assign(X,"name")|assign(X,"description")|assign(X,"price")|assign(X,"author")|assign(X,"city")|assign(X,"shape")|assign(X,"description_name")|assign(X,"description_price")|assign(X,"description_author")|assign(

unique_rules: 
['black_strength(X,Z):-black(X,_,Y),strength(Y,Z), Z!=80.', 'black_strength(X,_,Y):-black(X,_,Y),strength(Y,Z), Z==80.']

parsed: 
black_strength(X,Z):-black(X,_,Y),strength(Y,Z), Z!=80.

jaccard: 1.0


1
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "chicago" having fields "ID","weight","singaporeID", and the predicate "singapore" having fields "ID","owner". Define a predicate "chicago_singapore" that associates to each "chicago", not associated with label "flower", the attribute "owner" of "singapore".

answer from file: 
chicago_singapore(X,Z):-chicago(X,_,Y),singapore(Y,Z),not chicago(X,flower,_).

facts: 
chicago("ID","weight","singaporeID").singapore("ID","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "chicago" having fields "ID","weight","singaporeID", and the predicate "singapore" having fields "ID","owner". Define a predicate "chicago_singapore" that associates to each "chicago", not associated with label "flower", the attribute "owner" of "singapore".
Answer: chicago_singapore(X,Z):-chicago(X,_,Y),singapore(Y,Z),not chicago(X,flower,_).
 quí Âge: chicago_singapore(X,Y),where(Y!=1).
 quí Âge: chicago_singapore(X,Y),where(Y==1).
 quí Âge: not chicago_singapore(X,_,Y).
 quí Âge: not chicago_singapore(X,_,1).
 quí Âge: not chicago_singapore(X,_,2).
 quí Âge: not chicago_singapore(X,_,3).
 quí Âge: not chicago_singapore(X,_,4).
 quí Âge

unique_rules: 
['chicago_singapore(X,Z):-chicago(X,_,Y),singapore(Y,Z),not chicago(X,flower,_).']

parsed: 
chicago_singapore(X,Z):-chicago(X,_,Y),singapore(Y,Z),not chicago(X,flower,_).

jaccard: 1.0


2
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "cairo" as the transitive closure of predicate "chair". Then, assign exactly one label from the set storm,laptop,desk,chair,flower,roof,cloud,wall to each element in "cairo".

answer from file: 
cairo(X,Y):-chair(X,Y).
cairo(X,Y):-chair(X,Z),cairo(Z,Y).
assign(X,"storm")|assign(X,"laptop")|assign(X,"desk")|assign(X,"chair")|assign(X,"flower")|assign(X,"roof")|assign(X,"cloud")|assign(X,"wall"):-cairo(X,_).

facts: 
chair(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "cairo" as the transitive closure of predicate "chair". Then, assign exactly one label from the set storm,laptop,desk,chair,flower,roof,cloud,wall to each element in "cairo".
Answer: cairo(X,Y):-chair(X,Y).
cairo(X,Y):-chair(X,Z),cairo(Z,Y).
assign(X,"storm")|assign(X,"laptop")|assign(X,"desk")|assign(X,"chair")|assign(X,"flower")|assign(X,"roof")|assign(X,"cloud")|assign(X,"wall"):-cairo(X,_).
retum:
assign(X,"city")|assign(X,"age")|assign(X,"name")|assign(X,"price")|assign(X,"description")|assign(X,"author")|assign(X,"creator")|

unique_rules: 
['cairo(X,Y):-chair(X,Y).', 'cairo(X,Y):-chair(X,Z),cairo(Z,Y).', 'assign(X,"storm")|assign(X,"laptop")|assign(X,"desk")|assign(X,"chair")|assign(X,"flower")|assign(X,"roof")|assign(X,"cloud")|assign(X,"wall"):-cairo(X,_).']

parsed: 
cairo(X,Y):-chair(X,Y).
cairo(X,Y):-chair(X,Z),cairo(Z,Y).
assign(X,"storm")|assign(X,"laptop")|assign(X,"desk")|assign(X,"chair")|assign(X,"flower")|assign(X,"roof")|assign(X,"cloud")|assign(X,"wall"):-cairo(X,_).

jaccard: 1.0


3
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate roof. The labels are desk,chair. Consider only the predicate roof not associated with label "cloud".

answer from file: 
assign(X,"desk")|assign(X,"chair"):-roof(X, _), not roof(X, cloud).

facts: 
roof(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate roof. The labels are desk,chair. Consider only the predicate roof not associated with label "cloud".
Answer: assign(X," felicità")|assign(X,"creator")|assign(X,"city")|assign(X,"age")|assign(X,"name")|assign(X,"price")|assign(X,"author")|assign(X,"description")|assign(X,"height")|retum(X, _), not roof(X, _).
 köp(X, Y), Y!=cloud .
```
 köp(X, Y), Y!=cloud.
assign(X, " felicità")|assign(X, "creator")|assign(X, "city")|assign(X, "age")|assign(X, "name")|assign(X, "price

unique_rules: 
[]

parsed: 


jaccard: 0.0


4
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate singapore and labels weight, hair having label hair different than 62. The labels are flower,roof,cloud,desk,laptop.

answer from file: 
assign(X,"flower")|assign(X,"roof")|assign(X,"cloud")|assign(X,"desk")|assign(X,"laptop"):-singapore(X, Y), Y!=62 .

facts: 
singapore(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate singapore and labels weight, hair having label hair different than 62. The labels are flower,roof,cloud,desk,laptop.
Answer: assign(X,"flower")|assign(X,"roof")|assign(X,"cloud")|assign(X,"desk")|assign(X,"laptop"):- ángulo(X, Y), Y!=62 .
```
 ángulo(X, Y):-assign(X, "height").
 ángulo(X, Y):-assign(X, "price").
 ángulo(X, Y):-assign(X, "age").
 ángulo(X, Y):-assign(X, "name").
 ángulo(X, Y):-assign(X, "city").
 ángulo(X, Y):-assign(X, "description").
 ángulo(X, Y):-

unique_rules: 
['assign(X,"flower")|assign(X,"roof")|assign(X,"cloud")|assign(X,"desk")|assign(X,"laptop"):- ángulo(X, Y), Y!=62 .', 'ángulo(X, Y):-assign(X, "height").', 'ángulo(X, Y):-assign(X, "price").', 'ángulo(X, Y):-assign(X, "age").', 'ángulo(X, Y):-assign(X, "name").', 'ángulo(X, Y):-assign(X, "city").', 'ángulo(X, Y):-assign(X, "description").', 'ángulo(X, Y):-.']

parsed: 
assign(X,"flower")|assign(X,"roof")|assign(X,"cloud")|assign(X,"desk")|assign(X,"laptop"):- ángulo(X, Y), Y!=62 .

jaccard: 0.0


5
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate flower. The labels are cloud,flower,storm,roof,wall,desk,laptop.  Then, filter and return only the elements assigned to label laptop.".

answer from file: 
assign(X,"cloud")|assign(X,"flower")|assign(X,"storm")|assign(X,"roof")|assign(X,"wall")|assign(X,"desk")|assign(X,"laptop"):-flower(X).
select(X):-assign(X, "laptop").

facts: 
flower(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate flower. The labels are cloud,flower,storm,roof,wall,desk,laptop.  Then, filter and return only the elements assigned to label laptop.".
Answer: assign(X,"cloud")|assign(X,"flower")|assign(X,"storm")|assign(X,"roof")|assign(X,"wall")|assign(X,"desk")|assign(X,"laptop"):-flower(X).
select(X):-assign(X, "laptop").
```
The predicate flower returns all the elements associated with label "moto".
Then, select only the elements assigned to label "moto".
The result is a set of elements expressed by predicate moto.
The predicate moto has label "moto", so only the elements associated with label "moto" are selected.
The result is a set of elements expressed by predicate moto.

unique_rules: 
['assign(X,"cloud")|assign(X,"flower")|assign(X,"storm")|assign(X,"roof")|assign(X,"wall")|assign(X,"desk")|assign(X,"laptop"):-flower(X).', 'select(X):-assign(X, "laptop").']

parsed: 
assign(X,"cloud")|assign(X,"flower")|assign(X,"storm")|assign(X,"roof")|assign(X,"wall")|assign(X,"desk")|assign(X,"laptop"):-flower(X).
select(X):-assign(X, "laptop").

jaccard: 1.0


6
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "strength" and "barcelona". However, avoid any combination where predicate "strength" has label "storm".

answer from file: 
combination(X,Y):-strength(X, _),barcelona(Y), not strength(X, storm).

facts: 
strength(1..4, 1..4).barcelona(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "strength" and "barcelona". However, avoid any combination where predicate "strength" has label "storm".
Answer: combination(X,Y):-strength(X, _),barcelona(Y), not strength(X, storm).
combination(X,Y):-strength(X, _),barcelona(Y).
combination(X,Y):-strength(X, _),barcelona(Y), label(X, "age").
assign(X, Y)
retum(X, Y).
retum(X, Y), label(X, "age").
retum(X, Y), label(X, "name").
retum(X, Y), label(X, "price").
retum(X, Y), label(X, "description").
retum(X, Y), label(X, "city

unique_rules: 
['combination(X,Y):-strength(X, _),barcelona(Y), not strength(X, storm).', 'combination(X,Y):-strength(X, _),barcelona(Y).', 'combination(X,Y):-strength(X, _),barcelona(Y), label(X, "age").']

parsed: 
combination(X,Y):-strength(X, _),barcelona(Y), not strength(X, storm).

jaccard: 1.0


7
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "barcelona" having fields "ID","strength","darkmagentaID", and the predicate "darkmagenta" having fields "ID","lake". Define a predicate "barcelona_darkmagenta" that associates to each "barcelona" the "lake" of "darkmagenta" only where "lake" is different than 36.

answer from file: 
barcelona_darkmagenta(X,Z):-barcelona(X,_,Y),darkmagenta(Y,Z), Z!=36.

facts: 
barcelona("ID","strength","darkmagentaID").darkmagenta("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "barcelona" having fields "ID","strength","darkmagentaID", and the predicate "darkmagenta" having fields "ID","lake". Define a predicate "barcelona_darkmagenta" that associates to each "barcelona" the "lake" of "darkmagenta" only where "lake" is different than 36.
Answer: barcelona_darkmagenta(X,Z):-barcelona(X,_,Y),darkmagenta(Y,Z), Z!=36.
 ángulo_darkmagenta(X,Z):-shangai(X,Z),Z!=36.
 ángulo_darkmagenta(X,Z):-shangai(X,Z),Z==36.
 ángulo_darkmagenta(X,Z):-shangai(X,Z),Z==42.
 ángulo_darkmagenta(X,Z):-shangai(X,Z),Z==50.
 ángulo_darkmagenta(X,Z):-shangai(X,Z),Z==51.
 ángulo_

unique_rules: 
['barcelona_darkmagenta(X,Z):-barcelona(X,_,Y),darkmagenta(Y,Z), Z!=36.', 'ángulo_darkmagenta(X,Z):-shangai(X,Z),Z!=36.', 'ángulo_darkmagenta(X,Z):-shangai(X,Z),Z==36.', 'ángulo_darkmagenta(X,Z):-shangai(X,Z),Z==42.', 'ángulo_darkmagenta(X,Z):-shangai(X,Z),Z==50.', 'ángulo_darkmagenta(X,Z):-shangai(X,Z),Z==51.']

parsed: 
barcelona_darkmagenta(X,Z):-barcelona(X,_,Y),darkmagenta(Y,Z), Z!=36.

jaccard: 1.0


8
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "roof" having fields "ID","surname","butterflyID", and the predicate "butterfly" having fields "ID","owner". Define a predicate "roof_butterfly" that associates to each "roof", not associated with label "roof", the attribute "owner" of "butterfly".

answer from file: 
roof_butterfly(X,Z):-roof(X,_,Y),butterfly(Y,Z),not roof(X,roof,_).

facts: 
roof("ID","surname","butterflyID").butterfly("ID","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "roof" having fields "ID","surname","butterflyID", and the predicate "butterfly" having fields "ID","owner". Define a predicate "roof_butterfly" that associates to each "roof", not associated with label "roof", the attribute "owner" of "butterfly".
Answer: roof_ bréeder(X,Z):-roof(X,_,Y),butterfly(Y,Z),not roof(X,_,_).
 ángulo(X,Y):-roof(X,_,Y).
 ángulo(X,Y,Z):-roof(X,_,Z), ángulo(X,_,_).
 ángulo(X,_,_):-roof(X,_,_), ángulo(X,_,_).
 ángulo(X,_,_):-roof(X,_,_), nôbre(X,_,_).
 ángulo(X,_,_):-roof(X,_,_), age(X,_,_), nôbre(X,_,_).
 áng

unique_rules: 
['roof_ bréeder(X,Z):-roof(X,_,Y),butterfly(Y,Z),not roof(X,_,_).', 'ángulo(X,Y):-roof(X,_,Y).', 'ángulo(X,Y,Z):-roof(X,_,Z), ángulo(X,_,_).', 'ángulo(X,_,_):-roof(X,_,_), ángulo(X,_,_).', 'ángulo(X,_,_):-roof(X,_,_), nôbre(X,_,_).', 'ángulo(X,_,_):-roof(X,_,_), age(X,_,_), nôbre(X,_,_).']

parsed: 
roof_ bréeder(X,Z):-roof(X,_,Y),butterfly(Y,Z),not roof(X,_,_).

jaccard: 0.0


9
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "cairo" as the transitive closure of predicate "surname". Then, assign exactly one label from the set desk,flower to each element in "cairo".

answer from file: 
cairo(X,Y):-surname(X,Y).
cairo(X,Y):-surname(X,Z),cairo(Z,Y).
assign(X,"desk")|assign(X,"flower"):-cairo(X,_).

facts: 
surname(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "cairo" as the transitive closure of predicate "surname". Then, assign exactly one label from the set desk,flower to each element in "cairo".
Answer: cairo(X,Y):-surname(X,Y).
cairo(X,Y):-surname(X,Z),cairo(Z,Y).
assign(X,"desk")|assign(X,"flower"):-cairo(X,_).
retum(X,Y):-assign(X,Y).
retum(X,Y):-assign(X,Z),retum(Z,Y).
retum(X,Y):-assign(X,Z),retum(Z,Y).
retum(X,Y):-assign(X,Z),retum(Z,Y),retum(Y,X).
retum(X,Y):-assign(X,Z),retum(Z,Y),

unique_rules: 
['cairo(X,Y):-surname(X,Y).', 'cairo(X,Y):-surname(X,Z),cairo(Z,Y).', 'assign(X,"desk")|assign(X,"flower"):-cairo(X,_).', 'retum(X,Y):-assign(X,Y).', 'retum(X,Y):-assign(X,Z),retum(Z,Y).', 'retum(X,Y):-assign(X,Z),retum(Z,Y),retum(Y,X).', 'retum(X,Y):-assign(X,Z),retum(Z,Y),.']

parsed: 
cairo(X,Y):-surname(X,Y).
cairo(X,Y):-surname(X,Z),cairo(Z,Y).
assign(X,"desk")|assign(X,"flower"):-cairo(X,_).

jaccard: 1.0


10
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate flower. The labels are chair,flower,laptop,butterfly. Consider only the predicate flower not associated with label "cloud".

answer from file: 
assign(X,"chair")|assign(X,"flower")|assign(X,"laptop")|assign(X,"butterfly"):-flower(X, _), not flower(X, cloud).

facts: 
flower(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate flower. The labels are chair,flower,laptop,butterfly. Consider only the predicate flower not associated with label "cloud".
Answer: assign(X,"chair")|assign(X,"flower")|assign(X,"laptop")|assign(X," arrivant")|retum(X, _), not flower(X, _).
retum(X, _), not flower(X, _).
 köp(X, Y), Y!=cloud .
assign(X, Y), not flower(X, Y).
 kollek(X), not flower(X, _).
 kollek(X, _), not flower(X, _).
 kollek(X, _), not flower(X, _).
 kollek(X, _), not flower(X, _).
 kollek(X, _), not flower(X, _

unique_rules: 
[]

parsed: 


jaccard: 0.0


11
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate barcelona and labels surname, lake having label lake different than 28. The labels are laptop,desk,wall,cloud,roof,flower,chair,butterfly.

answer from file: 
assign(X,"laptop")|assign(X,"desk")|assign(X,"wall")|assign(X,"cloud")|assign(X,"roof")|assign(X,"flower")|assign(X,"chair")|assign(X,"butterfly"):-barcelona(X, Y), Y!=28 .

facts: 
barcelona(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate barcelona and labels surname, lake having label lake different than 28. The labels are laptop,desk,wall,cloud,roof,flower,chair,butterfly.
Answer: assign(X,"laptop")|assign(X,"desk")|assign(X,"wall")|assign(X,"cloud")|assign(X,"roof")|assign(X,"flower")|assign(X,"chair")|assign(X," arrivant")|assign(X,"height"), Y)
retum(Y, 28).
```
retum(Y, 28)
==>assign(X,"height").
```
The predicate barcelona has label "height", and the predicate "height" has label "price". So, the predicate " bré" associates to each "height" the "price" of "height".
The predicate " bré" has label "price", and

unique_rules: 
[]

parsed: 


jaccard: 0.0


12
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate quality. The labels are cloud,desk,storm,flower,butterfly,laptop,roof,chair,wall.  Then, filter and return only the elements assigned to label cloud.".

answer from file: 
assign(X,"cloud")|assign(X,"desk")|assign(X,"storm")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"roof")|assign(X,"chair")|assign(X,"wall"):-quality(X).
select(X):-assign(X, "cloud").

facts: 
quality(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate quality. The labels are cloud,desk,storm,flower,butterfly,laptop,roof,chair,wall.  Then, filter and return only the elements assigned to label cloud.".
Answer: assign(X,"cloud")|assign(X,"desk")|assign(X,"storm")|assign(X,"flower")|assign(X," arrivant")|assign(X," felicità")|assign(X,"shape")|assign(X,"city")|assign(X,"name")|retum(X).
select(X):-assign(X, "cloud").
retum(X).
```
Assign(X,"cloud")|Assign(X,"desk")|Assign(X,"storm")|Assign(X,"flower")|Assign(X," arrivant")|Assign(X," felicità")|Assign(X,"shape")|Assign(X,"city")|Assign(X,"

unique_rules: 
['select(X):-assign(X, "cloud").']

parsed: 
select(X):-assign(X, "cloud").

jaccard: 0.0


13
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "moscow" and "lake". However, avoid any combination where predicate "moscow" has label "laptop".

answer from file: 
combination(X,Y):-moscow(X, _),lake(Y), not moscow(X, laptop).

facts: 
moscow(1..4, 1..4).lake(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "moscow" and "lake". However, avoid any combination where predicate "moscow" has label "laptop".
Answer: combination(X,Y):-moscow(X, _),lake(Y), not moscow(X, laptop).
combination(X,Y):-moscow(X, _),lake(Y).
combination(X,Y):-moscow(X, _),lake(Y), label("moto").
assign(X, Y)
retum(X, Y).
retum(X, Y), label("moto").
retum(X, Y), label("city").
retum(X, Y), label("price").
retum(X, Y), label("age").
retum(X, Y), label("description").
retum(X, Y), label("height").
retum

unique_rules: 
['combination(X,Y):-moscow(X, _),lake(Y), not moscow(X, laptop).', 'combination(X,Y):-moscow(X, _),lake(Y).', 'combination(X,Y):-moscow(X, _),lake(Y), label("moto").']

parsed: 
combination(X,Y):-moscow(X, _),lake(Y), not moscow(X, laptop).

jaccard: 1.0


14
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "cosenza" having fields "ID","owner","weightID", and the predicate "weight" having fields "ID","surname". Define a predicate "cosenza_weight" that associates to each "cosenza" the "surname" of "weight" only where "surname" is different than 37.

answer from file: 
cosenza_weight(X,Z):-cosenza(X,_,Y),weight(Y,Z), Z!=37.

facts: 
cosenza("ID","owner","weightID").weight("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "cosenza" having fields "ID","owner","weightID", and the predicate "weight" having fields "ID","surname". Define a predicate "cosenza_weight" that associates to each "cosenza" the "surname" of "weight" only where "surname" is different than 37.
Answer: cosenza_weight(X,Z):-cosenza(X,_,Y),weight(Y,Z), Z!=37.
cosenza_weight(X,_,Y):-cosenza(X,_,Y),weight(Y,Z), Z==37.
assign(X,"name")|assign(X,"description")|assign(X,"price"):-cosenza_weight(X,_,Y).
retum(X,Y),where(Y!=37).
retum(X,Y),where(Y==37).
retum(X,_,Y),where(Y!=37).
retum(X,_,Y),where(Y==37

unique_rules: 
['cosenza_weight(X,Z):-cosenza(X,_,Y),weight(Y,Z), Z!=37.', 'cosenza_weight(X,_,Y):-cosenza(X,_,Y),weight(Y,Z), Z==37.', 'assign(X,"name")|assign(X,"description")|assign(X,"price"):-cosenza_weight(X,_,Y).']

parsed: 
cosenza_weight(X,Z):-cosenza(X,_,Y),weight(Y,Z), Z!=37.

jaccard: 1.0


15
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "storm" having fields "ID","pinkID","strength", and the predicate "pink" having fields "ID","lake". Define a predicate "storm_pink" that associates to each "storm", not associated with label "cloud", the attribute "lake" of "pink".

answer from file: 
storm_pink(X,Z):-storm(X,Y,_),pink(Y,Z),not storm(X,_,cloud).

facts: 
storm("ID","pinkID","strength").pink("ID","lake").

generated: 
Write an ASP program for the following problem. Consider predicate "storm" having fields "ID","pinkID","strength", and the predicate "pink" having fields "ID","lake". Define a predicate "storm_pink" that associates to each "storm", not associated with label "cloud", the attribute "lake" of "pink".
Result: storm_pink(X,Z):-storm(X,Y,_),pink(Y,Z),not storm(X,_,cloud).
 ángulo(X,Y,Z):-storm(X,Y,_),pink(Y,Z),not storm(X,_,cloud).
 ángulo(X,Y,Z):-storm(X,_,_),_,pink(Y,Z).
 ángulo(X,Y,Z):-storm(X,_,_),_,_,pink(Y,Z).
 ángulo(X,Y,Z):-storm(X,_,_),_,_,_,pink(Y,Z).
assign(X,Y),not storm(X,_,cloud).

unique_rules: 
['Result: storm_pink(X,Z):-storm(X,Y,_),pink(Y,Z),not storm(X,_,cloud).', 'ángulo(X,Y,Z):-storm(X,Y,_),pink(Y,Z),not storm(X,_,cloud).', 'ángulo(X,Y,Z):-storm(X,_,_),_,pink(Y,Z).', 'ángulo(X,Y,Z):-storm(X,_,_),_,_,pink(Y,Z).', 'ángulo(X,Y,Z):-storm(X,_,_),_,_,_,pink(Y,Z).']

parsed: 
Result: storm_pink(X,Z):-storm(X,Y,_),pink(Y,Z),not storm(X,_,cloud).

jaccard: 0.0


16
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "barcelona" as the transitive closure of predicate "flower". Then, assign exactly one label from the set chair,roof,desk to each element in "barcelona".

answer from file: 
barcelona(X,Y):-flower(X,Y).
barcelona(X,Y):-flower(X,Z),barcelona(Z,Y).
assign(X,"chair")|assign(X,"roof")|assign(X,"desk"):-barcelona(X,_).

facts: 
flower(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "barcelona" as the transitive closure of predicate "flower". Then, assign exactly one label from the set chair,roof,desk to each element in "barcelona".
Answer: barcelona(X,Y):-flower(X,Y).
 ánguel(X,Y):-flower(X,Y).
assign(X,"chair")|assign(X,"roof")|assign(X,"desk"):-barcelona(X).
 ánguel(X,Y):-bike(X,Y).
assign(X,"bike"):- ánguel(X,Y).
 kollektive(X,Y):-bike(X,Y).
 kollektive(X,Y):- ánguel(X,Y).
 kollektive(X,Y):-bike(X,Y),description(X,Y).
 kollektive(X,Y):-bike(X,Y),description(X

unique_rules: 
['barcelona(X,Y):-flower(X,Y).', 'ánguel(X,Y):-flower(X,Y).', 'assign(X,"chair")|assign(X,"roof")|assign(X,"desk"):-barcelona(X).', 'ánguel(X,Y):-bike(X,Y).', 'assign(X,"bike"):- ánguel(X,Y).', 'kollektive(X,Y):-bike(X,Y).', 'kollektive(X,Y):- ánguel(X,Y).', 'kollektive(X,Y):-bike(X,Y),description(X,Y).', 'kollektive(X,Y):-bike(X,Y),description(X.']

parsed: 
barcelona(X,Y):-flower(X,Y).
ánguel(X,Y):-flower(X,Y).
assign(X,"chair")|assign(X,"roof")|assign(X,"desk"):-barcelona(X).

jaccard: 0.0


17
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate weight. The labels are storm,laptop,roof,flower,chair,wall,desk. Consider only the predicate weight not associated with label "storm".

answer from file: 
assign(X,"storm")|assign(X,"laptop")|assign(X,"roof")|assign(X,"flower")|assign(X,"chair")|assign(X,"wall")|assign(X,"desk"):-weight(X, _), not weight(X, storm).

facts: 
weight(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate weight. The labels are storm,laptop,roof,flower,chair,wall,desk. Consider only the predicate weight not associated with label "storm".
Answer: assign(X," peines")|assign(X," arrivant")|assign(X,"height")|assign(X,"age")|assign(X,"name")|assign(X,"city")|assign(X,"description")|assign(X,"author")|assign(X,"price") : weight(X, _), not weight(X, storm).
assign(X,"description")
==> for (X|weight(X, _), not weight(X, storm)) do
    assign(X,"author")
    retum(X)
    retum(X)
    retum(X)
    retum(X)
    retum(X)
    retum(X)

unique_rules: 
[]

parsed: 


jaccard: 0.0


18
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate desk and labels weight, strength having label strength different than 82. The labels are storm,cloud,butterfly,wall,chair,desk.

answer from file: 
assign(X,"storm")|assign(X,"cloud")|assign(X,"butterfly")|assign(X,"wall")|assign(X,"chair")|assign(X,"desk"):-desk(X, Y), Y!=82 .

facts: 
desk(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate desk and labels weight, strength having label strength different than 82. The labels are storm,cloud,butterfly,wall,chair,desk.
Answer: assign(X,"storm")|assign(X,"cloud")|assign(X," felicità")|assign(X,"wall")|assign(X,"chair")|assign(X,"desk"):-desk(X, Y), Y!=82 .
```
Assign(X," felicità")|Assign(X,"wall")|Assign(X,"age")|Assign(X,"height"):-bike(X).
```
The predicate bike has label height, and the labels are age,description,price,city,shape,name,author,height,age,description,price,city,shape,name,author,height,age,description,price,city,shape,name,author

unique_rules: 
['assign(X,"storm")|assign(X,"cloud")|assign(X," felicità")|assign(X,"wall")|assign(X,"chair")|assign(X,"desk"):-desk(X, Y), Y!=82 .', 'Assign(X," felicità")|Assign(X,"wall")|Assign(X,"age")|Assign(X,"height"):-bike(X).']

parsed: 
assign(X,"storm")|assign(X,"cloud")|assign(X," felicità")|assign(X,"wall")|assign(X,"chair")|assign(X,"desk"):-desk(X, Y), Y!=82 .

jaccard: 1.0


19
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate butterfly. The labels are cloud,chair,desk,butterfly,laptop,storm,flower.  Then, filter and return only the elements assigned to label chair.".

answer from file: 
assign(X,"cloud")|assign(X,"chair")|assign(X,"desk")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"storm")|assign(X,"flower"):-butterfly(X).
select(X):-assign(X, "chair").

facts: 
butterfly(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate butterfly. The labels are cloud,chair,desk,butterfly,laptop,storm,flower.  Then, filter and return only the elements assigned to label chair.".
Answer: assign(X,"cloud")|assign(X,"chair")|assign(X,"desk")|assign(X," arrivant")|assign(X,"height")|assign(X,"shape")|assign(X,"city")|assign(X,"name")|assign(X,"age")|retum(X, "chair").
select(X):-assign(X, "chair").
```
The predicate "moto" has label "name", but not "age".
So, the predicate "retum" has label "name" only where "name" is lower than 75.
The predicate "assign" has label "name" only where "name" is lower than 75

unique_rules: 
['select(X):-assign(X, "chair").']

parsed: 
select(X):-assign(X, "chair").

jaccard: 0.0


20
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "wall" and "darkmagenta". However, avoid any combination where predicate "wall" has label "cloud".

answer from file: 
combination(X,Y):-wall(X, _),darkmagenta(Y), not wall(X, cloud).

facts: 
wall(1..4, 1..4).darkmagenta(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "wall" and "darkmagenta". However, avoid any combination where predicate "wall" has label "cloud".
Answer: combination(X,Y):-wall(X, _),darkmagenta(Y), not wall(X, cloud).
combination(X,Y):-wall(X, _),darkmagenta(Y).
combination(X,Y):-wall(X, _),darkmagenta(Y), label("city").
assign(X, Y)
retum(X, Y).
retum(X, Y), label("city").
retum(X, Y), label("price").
retum(X, Y), label("age").
retum(X, Y), label("description").
retum(X, Y), label("height").
retum(X, Y), label("author").
retum(

unique_rules: 
['combination(X,Y):-wall(X, _),darkmagenta(Y), not wall(X, cloud).', 'combination(X,Y):-wall(X, _),darkmagenta(Y).', 'combination(X,Y):-wall(X, _),darkmagenta(Y), label("city").']

parsed: 
combination(X,Y):-wall(X, _),darkmagenta(Y), not wall(X, cloud).

jaccard: 1.0


21
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "butterfly" having fields "ID","hair","darkmagentaID", and the predicate "darkmagenta" having fields "ID","hair". Define a predicate "butterfly_darkmagenta" that associates to each "butterfly" the "hair" of "darkmagenta" only where "hair" is different than 65.

answer from file: 
butterfly_darkmagenta(X,Z):-butterfly(X,_,Y),darkmagenta(Y,Z), Z!=65.

facts: 
butterfly("ID","hair","darkmagentaID").darkmagenta("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "butterfly" having fields "ID","hair","darkmagentaID", and the predicate "darkmagenta" having fields "ID","hair". Define a predicate "butterfly_darkmagenta" that associates to each "butterfly" the "hair" of "darkmagenta" only where "hair" is different than 65.
Answer: butterfly_darkmagenta(X,Z):- ↔florence(X,Y),darkmagenta(Y,Z), Z!=65.
 ángulo(X,Y),_assign(X,Z), Z!=65.
 ángulo(X,Y),_assign(X,Z), Z==65.
 ángulo(X,Y),_assign(X,Z), Z==71.
 ángulo(X,Y),_assign(X,Z), Z==72.
 ángulo(X,Y),_assign(X,Z), Z==73.
 ángulo(X,Y),_assign(X,Z), Z==7

unique_rules: 
['butterfly_darkmagenta(X,Z):- ↔florence(X,Y),darkmagenta(Y,Z), Z!=65.']

parsed: 
butterfly_darkmagenta(X,Z):- ↔florence(X,Y),darkmagenta(Y,Z), Z!=65.

jaccard: 0.0


22
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "black" having fields "ID","singaporeID","strength", and the predicate "singapore" having fields "ID","weight". Define a predicate "black_singapore" that associates to each "black", not associated with label "roof", the attribute "weight" of "singapore".

answer from file: 
black_singapore(X,Z):-black(X,Y,_),singapore(Y,Z),not black(X,_,roof).

facts: 
black("ID","singaporeID","strength").singapore("ID","weight").

generated: 
Write an ASP program for the following problem. Consider predicate "black" having fields "ID","singaporeID","strength", and the predicate "singapore" having fields "ID","weight". Define a predicate "black_singapore" that associates to each "black", not associated with label "roof", the attribute "weight" of "singapore".
Answer: black_singapore(X,Z):-black(X,Y,_),singapore(Y,Z),not black(X,_,roof).
black_singapore(X,Y,_),_,Z:-black(X,_,_),singapore(Y,Z).
assign(X,Z):-black_singapore(X,_,Z).
retum(X,_,Z),not black(X,_,roof).
retum(X,_,Z),black(X,Y,_) .
_ID,Z,_ID,_,_ are all attributes of "black".
Z is not 14.
_ID,Z,_ID,_,_ are all attributes of "

unique_rules: 
['black_singapore(X,Z):-black(X,Y,_),singapore(Y,Z),not black(X,_,roof).', 'black_singapore(X,Y,_),_,Z:-black(X,_,_),singapore(Y,Z).', 'assign(X,Z):-black_singapore(X,_,Z).']

parsed: 
black_singapore(X,Z):-black(X,Y,_),singapore(Y,Z),not black(X,_,roof).

jaccard: 1.0


23
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "darkmagenta" as the transitive closure of predicate "desk". Then, assign exactly one label from the set chair,cloud,flower to each element in "darkmagenta".

answer from file: 
darkmagenta(X,Y):-desk(X,Y).
darkmagenta(X,Y):-desk(X,Z),darkmagenta(Z,Y).
assign(X,"chair")|assign(X,"cloud")|assign(X,"flower"):-darkmagenta(X,_).

facts: 
desk(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "darkmagenta" as the transitive closure of predicate "desk". Then, assign exactly one label from the set chair,cloud,flower to each element in "darkmagenta".
Answer: darkMagenta(X,Y):-desk(X,Y).
darkMagenta(X,Y):-desk(X,Z),darkMagenta(Z,Y).
assign(X,"chair")|assign(X,"cloud")|assign(X,"flower"):-darkMagenta(X,_).
retum(X,Y):-darkMagenta(X,Y).
retum(X,Y):-darkMagenta(X,Z),retum(Z,Y).
retum(X,Y):-darkMagenta(X,Z),retum(Z,Y).
retum(X,Y):-darkMagenta(X,Z),retum(Z,Y),retum(Y,Y).
retum(X,

unique_rules: 
['darkMagenta(X,Y):-desk(X,Y).', 'darkMagenta(X,Y):-desk(X,Z),darkMagenta(Z,Y).', 'assign(X,"chair")|assign(X,"cloud")|assign(X,"flower"):-darkMagenta(X,_).', 'retum(X,Y):-darkMagenta(X,Y).', 'retum(X,Y):-darkMagenta(X,Z),retum(Z,Y).', 'retum(X,Y):-darkMagenta(X,Z),retum(Z,Y),retum(Y,Y).']

parsed: 
darkMagenta(X,Y):-desk(X,Y).
darkMagenta(X,Y):-desk(X,Z),darkMagenta(Z,Y).
assign(X,"chair")|assign(X,"cloud")|assign(X,"flower"):-darkMagenta(X,_).

jaccard: 0.0


24
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate cloud. The labels are butterfly,storm,chair,desk,roof,flower. Consider only the predicate cloud not associated with label "wall".

answer from file: 
assign(X,"butterfly")|assign(X,"storm")|assign(X,"chair")|assign(X,"desk")|assign(X,"roof")|assign(X,"flower"):-cloud(X, _), not cloud(X, wall).

facts: 
cloud(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate cloud. The labels are butterfly,storm,chair,desk,roof,flower. Consider only the predicate cloud not associated with label "wall".
Answer: assign(X," originaux")|assign(X,"description")|assign(X,"city")|assign(X,"name")|assign(X,"price")|assign(X,"age")| espressione(X, Y), Y!=wall .
retum(X, Y), Y!=wall .
```
 espressione(X, Y), Y!=wall .
```
The predicate "cloud" has label "description", but not associated with label "wall".
The "retum" predicate associates to each "cloud" the "description" of "description".
The "description" is not associated with label "wall".
The " felicità" predicate associates to each "description" the "name" of

unique_rules: 
[]

parsed: 


jaccard: 0.0


25
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate delhi and labels hair, weight having label weight different than 8. The labels are butterfly,laptop,wall,storm,flower.

answer from file: 
assign(X,"butterfly")|assign(X,"laptop")|assign(X,"wall")|assign(X,"storm")|assign(X,"flower"):-delhi(X, Y), Y!=8 .

facts: 
delhi(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate delhi and labels hair, weight having label weight different than 8. The labels are butterfly,laptop,wall,storm,flower.
Answer: assign(X," lavorato")|assign(X,"height")|assign(X,"price")|assign(X,"author")|assign(X,"city")|assign(X,"description")|retum(X, Y), Y!=8 .
 köp(X, Y), Y!=8 .
```
 köp(X, Y), Y!=8 .
assign(X," lavorato")|assign(X,"height")|assign(X,"price")|assign(X,"author")|assign(X,"city")|assign(X,"description")|retum(X, Y), Y!=8 .
 köp(X, Y), Y==8 .
retum(X, Y),

unique_rules: 
[]

parsed: 


jaccard: 0.0


26
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate chair. The labels are storm,laptop,cloud,desk,wall,chair,butterfly.  Then, filter and return only the elements assigned to label laptop.".

answer from file: 
assign(X,"storm")|assign(X,"laptop")|assign(X,"cloud")|assign(X,"desk")|assign(X,"wall")|assign(X,"chair")|assign(X,"butterfly"):-chair(X).
select(X):-assign(X, "laptop").

facts: 
chair(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate chair. The labels are storm,laptop,cloud,desk,wall,chair,butterfly.  Then, filter and return only the elements assigned to label laptop.".
Answer: assign(X," cœurs")|assign(X,"florence")|assign(X,"city")|assign(X,"description")|assign(X,"price")|assign(X,"author")|assign(X,"age")|retum(X, "florence").
select(X):-assign(X, "florence").
retum(X, "description").
 köp.
 papiers.
age.
author.
description.
florence.
city,price,name,age,description,author,height,shape,creator,height,price,age,description,city,name,height,shape,creator,height,price,age,description,author,height,

unique_rules: 
['select(X):-assign(X, "florence").']

parsed: 
select(X):-assign(X, "florence").

jaccard: 0.0


27
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "desk" and "lake". However, avoid any combination where predicate "desk" has label "roof".

answer from file: 
combination(X,Y):-desk(X, _),lake(Y), not desk(X, roof).

facts: 
desk(1..4, 1..4).lake(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "desk" and "lake". However, avoid any combination where predicate "desk" has label "roof".
Answer: combination(X,Y):-desk(X, _),lake(Y), not desk(X, roof).
combination(X,Y):-desk(X, _),lake(Y).
combination(X,Y):-desk(X, _),lake(Y), roof.
```
Combinations are expressed by predicate "combination".
The predicate "desk" has label "height", and the predicate "lake" has label "age".
However, avoid any combination where predicate "desk" has label "height".
So, the predicate "combination" has label "age".
```
 ángulo(X,Y):-combination(X,Y).
 ángulo(X,Y):-combination

unique_rules: 
['combination(X,Y):-desk(X, _),lake(Y), not desk(X, roof).', 'combination(X,Y):-desk(X, _),lake(Y).', 'combination(X,Y):-desk(X, _),lake(Y), roof.', 'ángulo(X,Y):-combination(X,Y).', 'ángulo(X,Y):-combination.']

parsed: 
combination(X,Y):-desk(X, _),lake(Y), not desk(X, roof).

jaccard: 1.0


28
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "barcelona" having fields "ID","strength","darkmagentaID", and the predicate "darkmagenta" having fields "ID","lake". Define a predicate "barcelona_darkmagenta" that associates to each "barcelona" the "lake" of "darkmagenta" only where "lake" is different than 36.

answer from file: 
barcelona_darkmagenta(X,Z):-barcelona(X,_,Y),darkmagenta(Y,Z), Z!=36.

facts: 
barcelona("ID","strength","darkmagentaID").darkmagenta("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "barcelona" having fields "ID","strength","darkmagentaID", and the predicate "darkmagenta" having fields "ID","lake". Define a predicate "barcelona_darkmagenta" that associates to each "barcelona" the "lake" of "darkmagenta" only where "lake" is different than 36.
Answer: barcelona_darkmagenta(X,Z):-barcelona(X,_,Y),darkmagenta(Y,Z), Z!=36.
 ángulo_darkmagenta(X,Z):-barcelona(X,_,Y),darkmagenta(Y,Z), Z==36.
 ángulo_darkmagenta(X,Z):-barcelona(X,_,Y),darkmagenta(Y,Z), Z==1.
 ángulo_darkmagenta(X,Z):-barcelona(X,_,Y),darkmagenta(Y,Z), Z==2.
 ángulo_darkmagenta(X,Z):-barcelona(X,_,Y),darkmagenta(Y,Z), Z==4.
 áng

unique_rules: 
['barcelona_darkmagenta(X,Z):-barcelona(X,_,Y),darkmagenta(Y,Z), Z!=36.', 'ángulo_darkmagenta(X,Z):-barcelona(X,_,Y),darkmagenta(Y,Z), Z==36.', 'ángulo_darkmagenta(X,Z):-barcelona(X,_,Y),darkmagenta(Y,Z), Z==1.', 'ángulo_darkmagenta(X,Z):-barcelona(X,_,Y),darkmagenta(Y,Z), Z==2.', 'ángulo_darkmagenta(X,Z):-barcelona(X,_,Y),darkmagenta(Y,Z), Z==4.']

parsed: 
barcelona_darkmagenta(X,Z):-barcelona(X,_,Y),darkmagenta(Y,Z), Z!=36.

jaccard: 1.0


29
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "roof" having fields "ID","surname","butterflyID", and the predicate "butterfly" having fields "ID","owner". Define a predicate "roof_butterfly" that associates to each "roof", not associated with label "roof", the attribute "owner" of "butterfly".

answer from file: 
roof_butterfly(X,Z):-roof(X,_,Y),butterfly(Y,Z),not roof(X,roof,_).

facts: 
roof("ID","surname","butterflyID").butterfly("ID","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "roof" having fields "ID","surname","butterflyID", and the predicate "butterfly" having fields "ID","owner". Define a predicate "roof_butterfly" that associates to each "roof", not associated with label "roof", the attribute "owner" of "butterfly".
Answer: roof_ bréeder(X,Z):-roof(X,_,Y),butterfly(Y,Z),not roof(X,_,_).
 ángulo(X,Y):-roof(X,_,Y).
 ángulo(X,Y):-roof(X,_,Z), ángulo(Z,_,Y).
 ángulo(X,Y):-roof(X,_,Z),not ángulo(Z,_,Y).
 ángulo(X,Y):-roof(X,_,Z),creator(Z,Y).
 ángulo(X,Y):-creator(Z,Y),not roof(X,_,Z).
 ángulo(X,Y):-creator(Z,

unique_rules: 
['roof_ bréeder(X,Z):-roof(X,_,Y),butterfly(Y,Z),not roof(X,_,_).', 'ángulo(X,Y):-roof(X,_,Y).', 'ángulo(X,Y):-roof(X,_,Z), ángulo(Z,_,Y).', 'ángulo(X,Y):-roof(X,_,Z),not ángulo(Z,_,Y).', 'ángulo(X,Y):-roof(X,_,Z),creator(Z,Y).', 'ángulo(X,Y):-creator(Z,Y),not roof(X,_,Z).', 'ángulo(X,Y):-creator(Z,.']

parsed: 
roof_ bréeder(X,Z):-roof(X,_,Y),butterfly(Y,Z),not roof(X,_,_).

jaccard: 0.0


30
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "cairo" as the transitive closure of predicate "surname". Then, assign exactly one label from the set desk,flower to each element in "cairo".

answer from file: 
cairo(X,Y):-surname(X,Y).
cairo(X,Y):-surname(X,Z),cairo(Z,Y).
assign(X,"desk")|assign(X,"flower"):-cairo(X,_).

facts: 
surname(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "cairo" as the transitive closure of predicate "surname". Then, assign exactly one label from the set desk,flower to each element in "cairo".
Answer: cairo(X,Y):-surname(X,Y).
cairo(X,Y):-surname(X,Z),cairo(Z,Y).
assign(X,"desk")|assign(X,"flower"):-cairo(X,_).
retum(X,Y):-assign(X,Y).
retum(X,Y):-assign(X,Z),retum(Z,Y).
retum(X,Y):-assign(X,Z),retum(Z,Y).
retum(X,Y):-assign(X,Z),retum(Z,Y),creator(X,Y).
creator(X,Y):-assign(X,Y),creator(Y,Z),

unique_rules: 
['cairo(X,Y):-surname(X,Y).', 'cairo(X,Y):-surname(X,Z),cairo(Z,Y).', 'assign(X,"desk")|assign(X,"flower"):-cairo(X,_).', 'retum(X,Y):-assign(X,Y).', 'retum(X,Y):-assign(X,Z),retum(Z,Y).', 'retum(X,Y):-assign(X,Z),retum(Z,Y),creator(X,Y).', 'creator(X,Y):-assign(X,Y),creator(Y,Z),.']

parsed: 
cairo(X,Y):-surname(X,Y).
cairo(X,Y):-surname(X,Z),cairo(Z,Y).
assign(X,"desk")|assign(X,"flower"):-cairo(X,_).

jaccard: 1.0


31
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate flower. The labels are chair,flower,laptop,butterfly. Consider only the predicate flower not associated with label "cloud".

answer from file: 
assign(X,"chair")|assign(X,"flower")|assign(X,"laptop")|assign(X,"butterfly"):-flower(X, _), not flower(X, cloud).

facts: 
flower(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate flower. The labels are chair,flower,laptop,butterfly. Consider only the predicate flower not associated with label "cloud".
Answer: assign(X,"chair")|assign(X,"flower")|assign(X," arrivant")|assign(X," bré")
retum(X, _), flower(X, _), not flower(X, cloud).
```
retum(X, _), flower(X, _), not flower(X, cloud).
```
Explanation:
- The predicate flower has label "height", but not "cloud".
- The predicate flower not associated with label "cloud" has label "height".
- The predicateretum associates to each element, not associated with label "height", the label "height".
- The predicateretum associates to each element, not associated with label "height", the label

unique_rules: 
[]

parsed: 


jaccard: 0.0


32
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate barcelona and labels surname, lake having label lake different than 28. The labels are laptop,desk,wall,cloud,roof,flower,chair,butterfly.

answer from file: 
assign(X,"laptop")|assign(X,"desk")|assign(X,"wall")|assign(X,"cloud")|assign(X,"roof")|assign(X,"flower")|assign(X,"chair")|assign(X,"butterfly"):-barcelona(X, Y), Y!=28 .

facts: 
barcelona(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate barcelona and labels surname, lake having label lake different than 28. The labels are laptop,desk,wall,cloud,roof,flower,chair,butterfly.
Answer: assign(X,"laptop")|assign(X,"desk")|assign(X,"wall")|assign(X,"cloud")|assign(X,"roof")|assign(X,"flower")|assign(X,"chair")|assign(X," arrivant")|assign(X," bré").
retum(X, Y), Y!=28 .
```
The predicate barcelona has label "description", and the predicate " bré" has label "price".
So, the predicate "assign" has label "description" only where "description" is different than 28.
The predicate "retum" has label "price" only where "price" is different than 28.
Then,

unique_rules: 
[]

parsed: 


jaccard: 0.0


33
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate quality. The labels are cloud,desk,storm,flower,butterfly,laptop,roof,chair,wall.  Then, filter and return only the elements assigned to label cloud.".

answer from file: 
assign(X,"cloud")|assign(X,"desk")|assign(X,"storm")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"roof")|assign(X,"chair")|assign(X,"wall"):-quality(X).
select(X):-assign(X, "cloud").

facts: 
quality(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate quality. The labels are cloud,desk,storm,flower,butterfly,laptop,roof,chair,wall.  Then, filter and return only the elements assigned to label cloud.".
Answer: assign(X,"cloud")|assign(X,"desk")|assign(X,"storm")|assign(X,"flower")|assign(X," arrivant")|assign(X," felicità")|assign(X,"shape")|assign(X,"city")|assign(X,"name")|retum(X).
select(X):-assign(X, "cloud").
retum(X).
```
Assign(X,"cloud")|Assign(X,"desk")|Assign(X,"storm")|Assign(X,"flower")|Assign(X," arrivant")|Assign(X," felicità")|Assign(X,"shape")|Assign(X,"city")|Assign(X,"

unique_rules: 
['select(X):-assign(X, "cloud").']

parsed: 
select(X):-assign(X, "cloud").

jaccard: 0.0


34
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "moscow" and "lake". However, avoid any combination where predicate "moscow" has label "laptop".

answer from file: 
combination(X,Y):-moscow(X, _),lake(Y), not moscow(X, laptop).

facts: 
moscow(1..4, 1..4).lake(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "moscow" and "lake". However, avoid any combination where predicate "moscow" has label "laptop".
Answer: combination(X,Y):-moscow(X, _),lake(Y), not moscow(X, laptop).
combination(X,Y):-moscow(X, _),lake(Y).
combination(X,Y):-moscow(X, _),lake(Y), label("moto").
assign(X, Y)
retum(X, Y).
retum(X, Y), label("moto").
retum(X, Y), label("city").
retum(X, Y), label("price").
retum(X, Y), label("age").
retum(X, Y), label("description").
retum(X, Y), label("height").
retum

unique_rules: 
['combination(X,Y):-moscow(X, _),lake(Y), not moscow(X, laptop).', 'combination(X,Y):-moscow(X, _),lake(Y).', 'combination(X,Y):-moscow(X, _),lake(Y), label("moto").']

parsed: 
combination(X,Y):-moscow(X, _),lake(Y), not moscow(X, laptop).

jaccard: 1.0


35
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "desk" having fields "ID","roofID","quality", and the predicate "roof" having fields "ID","surname". Define a predicate "desk_roof" that associates to each "desk" the "surname" of "roof" only where "surname" is different than 9.

answer from file: 
desk_roof(X,Z):-desk(X,Y,_),roof(Y,Z), Z!=9.

facts: 
desk("ID","roofID","quality").roof("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "desk" having fields "ID","roofID","quality", and the predicate "roof" having fields "ID","surname". Define a predicate "desk_roof" that associates to each "desk" the "surname" of "roof" only where "surname" is different than 9.
Answer: desk_roof(X,Z):-desk(X,Y,_),roof(Y,Z), Z!=9.
 espressione(X,Z):-desk(X,Y,_),roof(Y,Z), Z==9.
 espressione(X,Z):-desk(X,Y,_),roof(Y,Z), Z==8.
 espressione(X,Z):-desk(X,Y,_),roof(Y,Z), Z==7.
 espressione(X,Z):-desk(X,Y,_),roof(Y,Z), Z==6.
 espressione(X,Z):-desk(X,Y,_),roof(Y,Z), Z==5.
 espressione

unique_rules: 
['desk_roof(X,Z):-desk(X,Y,_),roof(Y,Z), Z!=9.', 'espressione(X,Z):-desk(X,Y,_),roof(Y,Z), Z==9.', 'espressione(X,Z):-desk(X,Y,_),roof(Y,Z), Z==8.', 'espressione(X,Z):-desk(X,Y,_),roof(Y,Z), Z==7.', 'espressione(X,Z):-desk(X,Y,_),roof(Y,Z), Z==6.', 'espressione(X,Z):-desk(X,Y,_),roof(Y,Z), Z==5.']

parsed: 
desk_roof(X,Z):-desk(X,Y,_),roof(Y,Z), Z!=9.

jaccard: 1.0


36
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "quality" having fields "ID","surnameID","hair", and the predicate "surname" having fields "ID","owner". Define a predicate "quality_surname" that associates to each "quality", not associated with label "roof", the attribute "owner" of "surname".

answer from file: 
quality_surname(X,Z):-quality(X,Y,_),surname(Y,Z),not quality(X,_,roof).

facts: 
quality("ID","surnameID","hair").surname("ID","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "quality" having fields "ID","surnameID","hair", and the predicate "surname" having fields "ID","owner". Define a predicate "quality_surname" that associates to each "quality", not associated with label "roof", the attribute "owner" of "surname".
Answer: quality_surname(X,Z):-quality(X,Y,_),surname(Y,Z),not quality(X,_,roof).
 ángulo(X,Y,Z):-quality(X,Y,_),name(Y,Z),not quality(X,_,roof).
 ángulo(X,Y,Z):-quality(X,Y,_),name(Y,Z),price(X,_,Z).
 ángulo(X,Y,Z):-quality(X,Y,_),name(Y,Z),city(X,_,Z).
 ángulo(X,Y,Z):-quality(X,Y,_),name(Y,Z),description(X,

unique_rules: 
['quality_surname(X,Z):-quality(X,Y,_),surname(Y,Z),not quality(X,_,roof).', 'ángulo(X,Y,Z):-quality(X,Y,_),name(Y,Z),not quality(X,_,roof).', 'ángulo(X,Y,Z):-quality(X,Y,_),name(Y,Z),price(X,_,Z).', 'ángulo(X,Y,Z):-quality(X,Y,_),name(Y,Z),city(X,_,Z).', 'ángulo(X,Y,Z):-quality(X,Y,_),name(Y,Z),description(X,.']

parsed: 
quality_surname(X,Z):-quality(X,Y,_),surname(Y,Z),not quality(X,_,roof).

jaccard: 1.0


37
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "toronto" as the transitive closure of predicate "black". Then, assign exactly one label from the set laptop,roof,butterfly,cloud,wall to each element in "toronto".

answer from file: 
toronto(X,Y):-black(X,Y).
toronto(X,Y):-black(X,Z),toronto(Z,Y).
assign(X,"laptop")|assign(X,"roof")|assign(X,"butterfly")|assign(X,"cloud")|assign(X,"wall"):-toronto(X,_).

facts: 
black(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "toronto" as the transitive closure of predicate "black". Then, assign exactly one label from the set laptop,roof,butterfly,cloud,wall to each element in "toronto".
Answer: toronto(X,Y):-black(X,Y).
toronto(X,Y):-black(X,Z),toronto(Z,Y).
assign(X,"laptop")|assign(X,"roof")|assign(X," épar quí")|assign(X,"cloud")|assign(X,"wall"):-toronto(X,_).
retum:
assign(X,"city")|assign(X,"age")|assign(X,"description")|assign(X,"price")|assign(X,"name")|assign(X,"shape").
retum(X,Y):-black(X,Y).
retum(X,Y):-black(X,Z),retum(Z

unique_rules: 
['toronto(X,Y):-black(X,Y).', 'toronto(X,Y):-black(X,Z),toronto(Z,Y).', 'assign(X,"laptop")|assign(X,"roof")|assign(X," épar quí")|assign(X,"cloud")|assign(X,"wall"):-toronto(X,_).', 'retum(X,Y):-black(X,Y).', 'retum(X,Y):-black(X,Z),retum(Z.']

parsed: 
toronto(X,Y):-black(X,Y).
toronto(X,Y):-black(X,Z),toronto(Z,Y).
assign(X,"laptop")|assign(X,"roof")|assign(X," épar quí")|assign(X,"cloud")|assign(X,"wall"):-toronto(X,_).

jaccard: 1.0


38
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate laptop. The labels are flower,wall,desk,butterfly,laptop. Consider only the predicate laptop not associated with label "wall".

answer from file: 
assign(X,"flower")|assign(X,"wall")|assign(X,"desk")|assign(X,"butterfly")|assign(X,"laptop"):-laptop(X, _), not laptop(X, wall).

facts: 
laptop(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate laptop. The labels are flower,wall,desk,butterfly,laptop. Consider only the predicate laptop not associated with label "wall".
Answer: assign(X,"flower")|assign(X,"wall")|assign(X,"desk")|assign(X," arrivant")|assign(X,"name")|assign(X,"city"):-laptop(X, _), not laptop(X, wall).
```
assign(X,"name")|assign(X,"city"):-laptop(X, _).
```
Explanation:
The predicate "moto" has label "name", and the predicate "description" has label "city". So, the predicate "moto" is not associated with label "city".
The predicate "description" has label "city", and the predicate "moto" has label "name". So, the predicate "

unique_rules: 
['assign(X,"flower")|assign(X,"wall")|assign(X,"desk")|assign(X," arrivant")|assign(X,"name")|assign(X,"city"):-laptop(X, _), not laptop(X, wall).', 'assign(X,"name")|assign(X,"city"):-laptop(X, _).']

parsed: 
assign(X,"flower")|assign(X,"wall")|assign(X,"desk")|assign(X," arrivant")|assign(X,"name")|assign(X,"city"):-laptop(X, _), not laptop(X, wall).

jaccard: 0.0


39
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate pink and labels hair, hair having label hair different than 5. The labels are storm,roof,chair.

answer from file: 
assign(X,"storm")|assign(X,"roof")|assign(X,"chair"):-pink(X, Y), Y!=5 .

facts: 
pink(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate pink and labels hair, hair having label hair different than 5. The labels are storm,roof,chair.
Answer: assign(X," peines")|assign(X,"florence")|assign(X,"height") :-pink(X, Y), Y!=5 .
Assign(X,"florence")|assign(X,"height") :-pink(X, Y), Y==5 .
 köp.
Result: assign(X,"florence")|assign(X,"height")|assign(X," peines") .
Name: assign
Description: Assign exactly a label among a given set of labels to a set of elements expressed by predicate pink and labels price, description having label description lower or equal than 70.
 beden.
Result: assign(X,"florence")|assign(X

unique_rules: 
['assign(X," peines")|assign(X,"florence")|assign(X,"height") :-pink(X, Y), Y!=5 .', 'Assign(X,"florence")|assign(X,"height") :-pink(X, Y), Y==5 .']

parsed: 
assign(X," peines")|assign(X,"florence")|assign(X,"height") :-pink(X, Y), Y!=5 .

jaccard: 0.0


40
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate strength. The labels are flower,chair,butterfly,roof,laptop.  Then, filter and return only the elements assigned to label laptop.".

answer from file: 
assign(X,"flower")|assign(X,"chair")|assign(X,"butterfly")|assign(X,"roof")|assign(X,"laptop"):-strength(X).
select(X):-assign(X, "laptop").

facts: 
strength(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate strength. The labels are flower,chair,butterfly,roof,laptop.  Then, filter and return only the elements assigned to label laptop.".
Answer: assign(X,"flower")|assign(X,"chair")|assign(X," arrivant")|assign(X,"roof")|assign(X," arrivant")|assign(X,"shape")
retum(X):-assign(X, "laptop").
retum(X):-assign(X, "shape").
retum(X):-assign(X, "city").
retum(X):-assign(X, "description").
retum(X):-assign(X, "price").
retum(X):-assign(X, "age").
retum(X):-assign(X, "name").
retum(X):-assign(X, "height").
retum(X):-assign(X, "

unique_rules: 
['retum(X):-assign(X, "laptop").', 'retum(X):-assign(X, "shape").', 'retum(X):-assign(X, "city").', 'retum(X):-assign(X, "description").', 'retum(X):-assign(X, "price").', 'retum(X):-assign(X, "age").', 'retum(X):-assign(X, "name").', 'retum(X):-assign(X, "height").', 'retum(X):-assign(X, ".']

parsed: 
retum(X):-assign(X, "laptop").
retum(X):-assign(X, "shape").

jaccard: 0.0


41
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "barcelona" and "darkmagenta". However, avoid any combination where predicate "barcelona" has label "roof".

answer from file: 
combination(X,Y):-barcelona(X, _),darkmagenta(Y), not barcelona(X, roof).

facts: 
barcelona(1..4, 1..4).darkmagenta(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "barcelona" and "darkmagenta". However, avoid any combination where predicate "barcelona" has label "roof".
Answer: combination(X,Y):-barcelona(X, _),darkmagenta(Y), not barcelona(X, roof).
combination(X,Y):-barcelona(X, _),darkmagenta(Y).
combination(X,Y):-barcelona(X, _),darkmagenta(Y), roof.
```
Combinations are expressed by predicate "combination".
However, avoid any combination where predicate "rome" has label "object".
```
result: combination(X,Y):-combination(X,Y).
result: combination(X,Y):-rome(X, object).
```
Then, filter and return only the combinations where predicate "rome" has label "object".
```
result

unique_rules: 
['combination(X,Y):-barcelona(X, _),darkmagenta(Y), not barcelona(X, roof).', 'combination(X,Y):-barcelona(X, _),darkmagenta(Y).', 'combination(X,Y):-barcelona(X, _),darkmagenta(Y), roof.', 'result: combination(X,Y):-combination(X,Y).', 'result: combination(X,Y):-rome(X, object).']

parsed: 
combination(X,Y):-barcelona(X, _),darkmagenta(Y), not barcelona(X, roof).

jaccard: 1.0


42
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "cloud" having fields "ID","surname","whiteID", and the predicate "white" having fields "ID","surname". Define a predicate "cloud_white" that associates to each "cloud" the "surname" of "white" only where "surname" is different than 34.

answer from file: 
cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34.

facts: 
cloud("ID","surname","whiteID").white("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "cloud" having fields "ID","surname","whiteID", and the predicate "white" having fields "ID","surname". Define a predicate "cloud_white" that associates to each "cloud" the "surname" of "white" only where "surname" is different than 34.
Answer: cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34.
cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z==34.

unique_rules: 
['cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34.', 'cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z==34.']

parsed: 
cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34.

jaccard: 1.0


43
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "black" having fields "ID","quality","lakeID", and the predicate "lake" having fields "ID","owner". Define a predicate "black_lake" that associates to each "black", not associated with label "laptop", the attribute "owner" of "lake".

answer from file: 
black_lake(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).

facts: 
black("ID","quality","lakeID").lake("ID","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "black" having fields "ID","quality","lakeID", and the predicate "lake" having fields "ID","owner". Define a predicate "black_lake" that associates to each "black", not associated with label "laptop", the attribute "owner" of "lake".
Answer: black_lake(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).
black_lake(X,Z):-black(X,_,Y),lake(Y,Z),label(X,laptop).
assign(X,Z):-black_lake(X,Z).
retum(X,Z),not black(X,_,_).
retum(X,Z),black(X,_,_).
 quíname(X,Z),not black(X,_,_).
 quíname(X,Z),black(X,_,_).
 quíname(X,Z),label(X,moto).


unique_rules: 
['black_lake(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).', 'black_lake(X,Z):-black(X,_,Y),lake(Y,Z),label(X,laptop).', 'assign(X,Z):-black_lake(X,Z).']

parsed: 
black_lake(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).

jaccard: 1.0


44
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "storm" as the transitive closure of predicate "white". Then, assign exactly one label from the set chair,roof,flower,desk,wall,laptop,storm,cloud to each element in "storm".

answer from file: 
storm(X,Y):-white(X,Y).
storm(X,Y):-white(X,Z),storm(Z,Y).
assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk")|assign(X,"wall")|assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud"):-storm(X,_).

facts: 
white(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "storm" as the transitive closure of predicate "white". Then, assign exactly one label from the set chair,roof,flower,desk,wall,laptop,storm,cloud to each element in "storm".
Answer: storm(X,Y):-white(X,Y).
storm(X,Y):-white(X,Z),storm(Z,Y).
assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk")|assign(X,"wall")|assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud"):-storm(X,_).
retum:
assign(X,"city")|assign(X,"age")|assign(X,"name")|assign(X,"price")|assign(X,"description")|assign(X,"author")|assign(X,"creator")|assign

unique_rules: 
['storm(X,Y):-white(X,Y).', 'storm(X,Y):-white(X,Z),storm(Z,Y).', 'assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk")|assign(X,"wall")|assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud"):-storm(X,_).']

parsed: 
storm(X,Y):-white(X,Y).
storm(X,Y):-white(X,Z),storm(Z,Y).
assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk")|assign(X,"wall")|assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud"):-storm(X,_).

jaccard: 1.0


45
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate moscow. The labels are desk,butterfly,cloud,flower,wall. Consider only the predicate moscow not associated with label "roof".

answer from file: 
assign(X,"desk")|assign(X,"butterfly")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-moscow(X, _), not moscow(X, roof).

facts: 
moscow(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate moscow. The labels are desk,butterfly,cloud,flower,wall. Consider only the predicate moscow not associated with label "roof".
Answer: assign(X,"desk")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-moscow(X, _), not moscow(X, roof).
```
assign(X,"description")|assign(X,"height")|assign(X,"price")|assign(X,"age"):- felicità(X).
```
The predicate felicità has label "description".
The predicate moscow has label "description".
So, assign(X,"description") is valid.
Assign(X,"height") is not valid.
Assign(X,"price") is not valid.
Assign(X,"age")

unique_rules: 
['assign(X,"desk")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-moscow(X, _), not moscow(X, roof).', 'assign(X,"description")|assign(X,"height")|assign(X,"price")|assign(X,"age"):- felicità(X).']

parsed: 
assign(X,"desk")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-moscow(X, _), not moscow(X, roof).

jaccard: 1.0


46
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate darkmagenta and labels strength, weight having label weight different than 20. The labels are wall,butterfly.

answer from file: 
assign(X,"wall")|assign(X,"butterfly"):-darkmagenta(X, Y), Y!=20 .

facts: 
darkmagenta(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate darkmagenta and labels strength, weight having label weight different than 20. The labels are wall,butterfly.
Answer: assign(X,"wall")|assign(X," ABE")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"author")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"author") :-darkMagenta(X, Y), Y!=20 .
```
The predicate darkMagenta has fields name,description,price,author,height,city,description,age,author,shape,price,height,description,author

unique_rules: 
['assign(X,"wall")|assign(X," ABE")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"author")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"author") :-darkMagenta(X, Y), Y!=20 .']

parsed: 
assign(X,"wall")|assign(X," ABE")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"author")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"author") :-darkMagenta(X, Y), Y!=20 .

jaccard: 0.0


47
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate desk. The labels are desk,storm,wall,butterfly,chair,laptop,flower,roof,cloud.  Then, filter and return only the elements assigned to label chair.".

answer from file: 
assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X,"butterfly")|assign(X,"chair")|assign(X,"laptop")|assign(X,"flower")|assign(X,"roof")|assign(X,"cloud"):-desk(X).
select(X):-assign(X, "chair").

facts: 
desk(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate desk. The labels are desk,storm,wall,butterfly,chair,laptop,flower,roof,cloud.  Then, filter and return only the elements assigned to label chair.".
Answer: assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X," éparror")|assign(X,"chair")|assign(X," arrivant")|assign(X,"florence")|assign(X,"roof")|assign(X,"cloud"):-desk(X).
select(X):-assign(X, "chair").
```
The predicate desk has label "florence", and the predicate chair has label "city". So, the predicate assign has label "florence" only where "florence" is lower than 70.
The predicate select has label "city" only where "city" is lower than 70.

unique_rules: 
['assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X," éparror")|assign(X,"chair")|assign(X," arrivant")|assign(X,"florence")|assign(X,"roof")|assign(X,"cloud"):-desk(X).', 'select(X):-assign(X, "chair").']

parsed: 
assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X," éparror")|assign(X,"chair")|assign(X," arrivant")|assign(X,"florence")|assign(X,"roof")|assign(X,"cloud"):-desk(X).
select(X):-assign(X, "chair").

jaccard: 1.0


48
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "singapore" and "delhi". However, avoid any combination where predicate "singapore" has label "butterfly".

answer from file: 
combination(X,Y):-singapore(X, _),delhi(Y), not singapore(X, butterfly).

facts: 
singapore(1..4, 1..4).delhi(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "singapore" and "delhi". However, avoid any combination where predicate "singapore" has label "butterfly".
Answer: combination(X,Y):-singapore(X, _),delhi(Y), not singapore(X, butterfly).
combination(X,Y):-singapore(X, _),delhi(Y).
combination(X,Y):-singapore(X, _),delhi(Y), label("color").
assign(X, Y)
retum(X, Y).
retum(X, Y), label("color").
retum(X, Y), label("age").
retum(X, Y), label("price").
retum(X, Y), label("description").
retum(X, Y), label("height").
retum(X, Y), label("author

unique_rules: 
['combination(X,Y):-singapore(X, _),delhi(Y), not singapore(X, butterfly).', 'combination(X,Y):-singapore(X, _),delhi(Y).', 'combination(X,Y):-singapore(X, _),delhi(Y), label("color").']

parsed: 
combination(X,Y):-singapore(X, _),delhi(Y), not singapore(X, butterfly).

jaccard: 1.0


49
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "cosenza" having fields "ID","pinkID","strength", and the predicate "pink" having fields "ID","weight". Define a predicate "cosenza_pink" that associates to each "cosenza" the "weight" of "pink" only where "weight" is different than 9.

answer from file: 
cosenza_pink(X,Z):-cosenza(X,Y,_),pink(Y,Z), Z!=9.

facts: 
cosenza("ID","pinkID","strength").pink("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "cosenza" having fields "ID","pinkID","strength", and the predicate "pink" having fields "ID","weight". Define a predicate "cosenza_pink" that associates to each "cosenza" the "weight" of "pink" only where "weight" is different than 9.
Answer: cosenza_pink(X,Z):-cosenza(X,Y,_),pink(Y,Z), Z!=9.
 ángulo(X,Y,Z):-cosenza(X,Y,_),pink(Y,Z), Z==9.
 ángulo(X,Y,Z):-cosenza(X,Y,_),pink(Y,Z), Z==8.
 ángulo(X,Y,Z):-cosenza(X,Y,_),pink(Y,Z), Z==7.
 ángulo(X,Y,Z):-cosenza(X,Y,_),pink(Y,Z), Z==6.
 ángulo(X,Y,

unique_rules: 
['cosenza_pink(X,Z):-cosenza(X,Y,_),pink(Y,Z), Z!=9.', 'ángulo(X,Y,Z):-cosenza(X,Y,_),pink(Y,Z), Z==9.', 'ángulo(X,Y,Z):-cosenza(X,Y,_),pink(Y,Z), Z==8.', 'ángulo(X,Y,Z):-cosenza(X,Y,_),pink(Y,Z), Z==7.', 'ángulo(X,Y,Z):-cosenza(X,Y,_),pink(Y,Z), Z==6.']

parsed: 
cosenza_pink(X,Z):-cosenza(X,Y,_),pink(Y,Z), Z!=9.

jaccard: 1.0


50
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "flower" having fields "ID","lightblueID","hair", and the predicate "lightblue" having fields "ID","quality". Define a predicate "flower_lightblue" that associates to each "flower", not associated with label "cloud", the attribute "quality" of "lightblue".

answer from file: 
flower_lightblue(X,Z):-flower(X,Y,_),lightblue(Y,Z),not flower(X,_,cloud).

facts: 
flower("ID","lightblueID","hair").lightblue("ID","quality").

generated: 
Write an ASP program for the following problem. Consider predicate "flower" having fields "ID","lightblueID","hair", and the predicate "lightblue" having fields "ID","quality". Define a predicate "flower_lightblue" that associates to each "flower", not associated with label "cloud", the attribute "quality" of "lightblue".
Answer: flower_lightblue(X,Z):-flower(X,Y,_),lightblue(Y,Z),not flower(X,_,cloud).
flower_lightblue(X,Z):-flower(X,Y,cloud).
 ángulo(X,Y,Z):-flower(X,Y,_),lightblue(Y,Z).
 ángulo(X,_,cloud):-flower(X,_,cloud).
 ángulo(X,Y,Z):-lightblue(Y,Z),not flower(X,_,cloud).
 ángulo(X,_,cloud):-lightblue(Y,Z),creator(X,_,cloud).
 ángulo(X,_,cloud):-creator

unique_rules: 
['flower_lightblue(X,Z):-flower(X,Y,_),lightblue(Y,Z),not flower(X,_,cloud).', 'flower_lightblue(X,Z):-flower(X,Y,cloud).', 'ángulo(X,Y,Z):-flower(X,Y,_),lightblue(Y,Z).', 'ángulo(X,_,cloud):-flower(X,_,cloud).', 'ángulo(X,Y,Z):-lightblue(Y,Z),not flower(X,_,cloud).', 'ángulo(X,_,cloud):-lightblue(Y,Z),creator(X,_,cloud).', 'ángulo(X,_,cloud):-creator.']

parsed: 
flower_lightblue(X,Z):-flower(X,Y,_),lightblue(Y,Z),not flower(X,_,cloud).

jaccard: 1.0


51
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "delhi" as the transitive closure of predicate "surname". Then, assign exactly one label from the set laptop,cloud,desk,butterfly,roof,wall,chair to each element in "delhi".

answer from file: 
delhi(X,Y):-surname(X,Y).
delhi(X,Y):-surname(X,Z),delhi(Z,Y).
assign(X,"laptop")|assign(X,"cloud")|assign(X,"desk")|assign(X,"butterfly")|assign(X,"roof")|assign(X,"wall")|assign(X,"chair"):-delhi(X,_).

facts: 
surname(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "delhi" as the transitive closure of predicate "surname". Then, assign exactly one label from the set laptop,cloud,desk,butterfly,roof,wall,chair to each element in "delhi".
Answer: delhi(X,Y):-surname(X,Y).
delhi(X,Y):-surname(X,Z),delhi(Z,Y).
assign(X,"laptop")|assign(X,"cloud")|assign(X,"desk")|assign(X," arrivant")|assign(X,"height")|assign(X,"wall")|assign(X,"chair"):-delhi(X,_).
retum(X,Y):-delhi(X,Y).
retum(X,Y):-delhi(X,Z),retum(Z,Y).
retum(X,Y):-delhi(X,Z),retum(Z,Y).
retum(

unique_rules: 
['delhi(X,Y):-surname(X,Y).', 'delhi(X,Y):-surname(X,Z),delhi(Z,Y).', 'assign(X,"laptop")|assign(X,"cloud")|assign(X,"desk")|assign(X," arrivant")|assign(X,"height")|assign(X,"wall")|assign(X,"chair"):-delhi(X,_).', 'retum(X,Y):-delhi(X,Y).', 'retum(X,Y):-delhi(X,Z),retum(Z,Y).']

parsed: 
delhi(X,Y):-surname(X,Y).
delhi(X,Y):-surname(X,Z),delhi(Z,Y).
assign(X,"laptop")|assign(X,"cloud")|assign(X,"desk")|assign(X," arrivant")|assign(X,"height")|assign(X,"wall")|assign(X,"chair"):-delhi(X,_).

jaccard: 1.0


52
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate mumbai. The labels are cloud,flower,wall. Consider only the predicate mumbai not associated with label "roof".

answer from file: 
assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-mumbai(X, _), not mumbai(X, roof).

facts: 
mumbai(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate mumbai. The labels are cloud,flower,wall. Consider only the predicate mumbai not associated with label "roof".
Answer: assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-mumbai(X, _), not mumbai(X, roof).
```
assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-mumbai(X, _), not mumbai(X, roof).
```

unique_rules: 
['assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-mumbai(X, _), not mumbai(X, roof).']

parsed: 
assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-mumbai(X, _), not mumbai(X, roof).

jaccard: 1.0


53
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate lightblue and labels hair, surname having label surname different than 83. The labels are roof,butterfly,flower,wall,laptop,desk.

answer from file: 
assign(X,"roof")|assign(X,"butterfly")|assign(X,"flower")|assign(X,"wall")|assign(X,"laptop")|assign(X,"desk"):-lightblue(X, Y), Y!=83 .

facts: 
lightblue(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate lightblue and labels hair, surname having label surname different than 83. The labels are roof,butterfly,flower,wall,laptop,desk.
Answer: assign(X," felicità")|assign(X,"height")|assign(X,"price")|assign(X,"creator")|assign(X,"age")|assign(X,"name")|assign(X,"city")|assign(X,"description")|assign(X,"author")|retum(X, Y), Y!=83 .
 köp(X, Y), Y!=83 .
```
 köp(X, Y), Y!=83 .
assign(X, " felicità")|assign(X, "height")|assign(X, "price")|assign(X, "creator")|assign(X, "age")|assign(X, "name

unique_rules: 
[]

parsed: 


jaccard: 0.0


54
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate mumbai. The labels are chair,storm,butterfly,cloud,flower,roof.  Then, filter and return only the elements assigned to label flower.".

answer from file: 
assign(X,"chair")|assign(X,"storm")|assign(X,"butterfly")|assign(X,"cloud")|assign(X,"flower")|assign(X,"roof"):-mumbai(X).
select(X):-assign(X, "flower").

facts: 
mumbai(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate mumbai. The labels are chair,storm,butterfly,cloud,flower,roof.  Then, filter and return only the elements assigned to label flower.".
Answer: assign(X,"chair")|assign(X,"storm")|assign(X," felicità")|assign(X,"cloud")|assign(X,"flower")|assign(X,"roof"):-tokyo(X).
select(X):-assign(X, "flower").
```
Assign(X,"chair")|Assign(X,"storm")|Assign(X," felicità")|Assign(X,"cloud")|Assign(X,"flower")|Assign(X,"roof"):-tokyo(X).
select(X):-assign(X, "flower").
retum(X).
```
The predicate tokyo has label "florence".
The predicate select has label "florence".


unique_rules: 
['assign(X,"chair")|assign(X,"storm")|assign(X," felicità")|assign(X,"cloud")|assign(X,"flower")|assign(X,"roof"):-tokyo(X).', 'select(X):-assign(X, "flower").', 'Assign(X,"chair")|Assign(X,"storm")|Assign(X," felicità")|Assign(X,"cloud")|Assign(X,"flower")|Assign(X,"roof"):-tokyo(X).']

parsed: 
assign(X,"chair")|assign(X,"storm")|assign(X," felicità")|assign(X,"cloud")|assign(X,"flower")|assign(X,"roof"):-tokyo(X).
select(X):-assign(X, "flower").

jaccard: 0.0


55
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "mumbai" and "storm". However, avoid any combination where predicate "mumbai" has label "cloud".

answer from file: 
combination(X,Y):-mumbai(X, _),storm(Y), not mumbai(X, cloud).

facts: 
mumbai(1..4, 1..4).storm(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "mumbai" and "storm". However, avoid any combination where predicate "mumbai" has label "cloud".
Answer: combination(X,Y):-mumbai(X, _),storm(Y), not mumbai(X, cloud).
combination(X,Y):-mumbai(X, _),storm(Y).
combination(X,Y):-mumbai(X, _),storm(Y), label("height").
assign(X, Y)
retum(X, Y).
retum(X, Y), label("height").
retum(X, Y), label("price").
retum(X, Y), label("age").
retum(X, Y), label("description").
retum(X, Y), label("city").
retum(X, Y), label("shape").
retum

unique_rules: 
['combination(X,Y):-mumbai(X, _),storm(Y), not mumbai(X, cloud).', 'combination(X,Y):-mumbai(X, _),storm(Y).', 'combination(X,Y):-mumbai(X, _),storm(Y), label("height").']

parsed: 
combination(X,Y):-mumbai(X, _),storm(Y), not mumbai(X, cloud).

jaccard: 1.0


56
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "desk" having fields "ID","roofID","quality", and the predicate "roof" having fields "ID","surname". Define a predicate "desk_roof" that associates to each "desk" the "surname" of "roof" only where "surname" is different than 9.

answer from file: 
desk_roof(X,Z):-desk(X,Y,_),roof(Y,Z), Z!=9.

facts: 
desk("ID","roofID","quality").roof("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "desk" having fields "ID","roofID","quality", and the predicate "roof" having fields "ID","surname". Define a predicate "desk_roof" that associates to each "desk" the "surname" of "roof" only where "surname" is different than 9.
Answer: desk_roof(X,Z):-desk(X,Y,_),roof(Y,Z), Z!=9.
 espressione(X,Z):-desk(X,Y,_),roof(Y,Z), Z==9.
 espressione(X,Z):-desk(X,Y,_),roof(Y,Z), Z==8.
 espressione(X,Z):-desk(X,Y,_),roof(Y,Z), Z==7.
 espressione(X,Z):-desk(X,Y,_),roof(Y,Z), Z==6.
 espressione(X,Z):-desk(X,Y,_),roof(Y,Z), Z==5.
 espressione

unique_rules: 
['desk_roof(X,Z):-desk(X,Y,_),roof(Y,Z), Z!=9.', 'espressione(X,Z):-desk(X,Y,_),roof(Y,Z), Z==9.', 'espressione(X,Z):-desk(X,Y,_),roof(Y,Z), Z==8.', 'espressione(X,Z):-desk(X,Y,_),roof(Y,Z), Z==7.', 'espressione(X,Z):-desk(X,Y,_),roof(Y,Z), Z==6.', 'espressione(X,Z):-desk(X,Y,_),roof(Y,Z), Z==5.']

parsed: 
desk_roof(X,Z):-desk(X,Y,_),roof(Y,Z), Z!=9.

jaccard: 1.0


57
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "quality" having fields "ID","surnameID","hair", and the predicate "surname" having fields "ID","owner". Define a predicate "quality_surname" that associates to each "quality", not associated with label "roof", the attribute "owner" of "surname".

answer from file: 
quality_surname(X,Z):-quality(X,Y,_),surname(Y,Z),not quality(X,_,roof).

facts: 
quality("ID","surnameID","hair").surname("ID","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "quality" having fields "ID","surnameID","hair", and the predicate "surname" having fields "ID","owner". Define a predicate "quality_surname" that associates to each "quality", not associated with label "roof", the attribute "owner" of "surname".
Answer: quality_surname(X,Z):-quality(X,Y,_),surname(Y,Z),not quality(X,_,roof).
 ángulo(X,Y,Z):-quality(X,Y,_),name(Y,Z),not quality(X,_,roof).
 ángulo(X,Y,Z):-quality(X,Y,_),name(Y,Z),creator(Z).
 ángulo(X,Y,Z):-quality(X,Y,_),name(Y,Z),price(Z).
 ángulo(X,Y,Z):-quality(X,Y,_),name(Y,Z),city(Z).
 ángulo(X,

unique_rules: 
['quality_surname(X,Z):-quality(X,Y,_),surname(Y,Z),not quality(X,_,roof).', 'ángulo(X,Y,Z):-quality(X,Y,_),name(Y,Z),not quality(X,_,roof).', 'ángulo(X,Y,Z):-quality(X,Y,_),name(Y,Z),creator(Z).', 'ángulo(X,Y,Z):-quality(X,Y,_),name(Y,Z),price(Z).', 'ángulo(X,Y,Z):-quality(X,Y,_),name(Y,Z),city(Z).']

parsed: 
quality_surname(X,Z):-quality(X,Y,_),surname(Y,Z),not quality(X,_,roof).

jaccard: 1.0


58
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "toronto" as the transitive closure of predicate "black". Then, assign exactly one label from the set laptop,roof,butterfly,cloud,wall to each element in "toronto".

answer from file: 
toronto(X,Y):-black(X,Y).
toronto(X,Y):-black(X,Z),toronto(Z,Y).
assign(X,"laptop")|assign(X,"roof")|assign(X,"butterfly")|assign(X,"cloud")|assign(X,"wall"):-toronto(X,_).

facts: 
black(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "toronto" as the transitive closure of predicate "black". Then, assign exactly one label from the set laptop,roof,butterfly,cloud,wall to each element in "toronto".
Answer: toronto(X,Y):-black(X,Y).
toronto(X,Y):-black(X,Z),toronto(Z,Y).
assign(X,"laptop")|assign(X,"roof")|assign(X," épar quí")|assign(X,"cloud")|assign(X,"wall"):-toronto(X,_).
retum:
assign(X,"city")|assign(X,"age")|assign(X,"name")|assign(X,"price")|assign(X,"description"):-toronto(X,Y).
retum:
assign(X,"description")|assign(X,"price")|assign(X,"age")|assign(X,"

unique_rules: 
['toronto(X,Y):-black(X,Y).', 'toronto(X,Y):-black(X,Z),toronto(Z,Y).', 'assign(X,"laptop")|assign(X,"roof")|assign(X," épar quí")|assign(X,"cloud")|assign(X,"wall"):-toronto(X,_).', 'assign(X,"city")|assign(X,"age")|assign(X,"name")|assign(X,"price")|assign(X,"description"):-toronto(X,Y).']

parsed: 
toronto(X,Y):-black(X,Y).
toronto(X,Y):-black(X,Z),toronto(Z,Y).
assign(X,"laptop")|assign(X,"roof")|assign(X," épar quí")|assign(X,"cloud")|assign(X,"wall"):-toronto(X,_).

jaccard: 1.0


59
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate laptop. The labels are flower,wall,desk,butterfly,laptop. Consider only the predicate laptop not associated with label "wall".

answer from file: 
assign(X,"flower")|assign(X,"wall")|assign(X,"desk")|assign(X,"butterfly")|assign(X,"laptop"):-laptop(X, _), not laptop(X, wall).

facts: 
laptop(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate laptop. The labels are flower,wall,desk,butterfly,laptop. Consider only the predicate laptop not associated with label "wall".
Answer: assign(X,"flower")|assign(X,"wall")|assign(X,"desk")|assign(X," arrivant")|assign(X,"name")|assign(X,"city"):-laptop(X, _), not laptop(X, wall).
``` italienne
assign(X,"name")|assign(X,"city"):-laptop(X, _), not laptop(X, wall).
```

unique_rules: 
['assign(X,"flower")|assign(X,"wall")|assign(X,"desk")|assign(X," arrivant")|assign(X,"name")|assign(X,"city"):-laptop(X, _), not laptop(X, wall).', 'assign(X,"name")|assign(X,"city"):-laptop(X, _), not laptop(X, wall).']

parsed: 
assign(X,"flower")|assign(X,"wall")|assign(X,"desk")|assign(X," arrivant")|assign(X,"name")|assign(X,"city"):-laptop(X, _), not laptop(X, wall).

jaccard: 0.0


60
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate pink and labels hair, hair having label hair different than 5. The labels are storm,roof,chair.

answer from file: 
assign(X,"storm")|assign(X,"roof")|assign(X,"chair"):-pink(X, Y), Y!=5 .

facts: 
pink(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate pink and labels hair, hair having label hair different than 5. The labels are storm,roof,chair.
Answer: assign(X," peines")|assign(X,"florence")|assign(X,"height") :-pink(X, Y), Y!=5 .
Assign(X,"florence")|assign(X,"height") :-pink(X, Y), Y==5 .
Assign(X,"height") :-pink(X, Y), Y==6 .
 köp.
Result: assign(X, "florence")|assign(X, "height")|assign(X, "shape") .
Name: assign.
Description: Assign exactly a label among a given set of labels to a set of elements expressed by predicate pink and labels price, description having label description lower or

unique_rules: 
['assign(X," peines")|assign(X,"florence")|assign(X,"height") :-pink(X, Y), Y!=5 .', 'Assign(X,"florence")|assign(X,"height") :-pink(X, Y), Y==5 .', 'Assign(X,"height") :-pink(X, Y), Y==6 .']

parsed: 
assign(X," peines")|assign(X,"florence")|assign(X,"height") :-pink(X, Y), Y!=5 .

jaccard: 0.0


61
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate strength. The labels are flower,chair,butterfly,roof,laptop.  Then, filter and return only the elements assigned to label laptop.".

answer from file: 
assign(X,"flower")|assign(X,"chair")|assign(X,"butterfly")|assign(X,"roof")|assign(X,"laptop"):-strength(X).
select(X):-assign(X, "laptop").

facts: 
strength(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate strength. The labels are flower,chair,butterfly,roof,laptop.  Then, filter and return only the elements assigned to label laptop.".
Answer: assign(X,"flower")|assign(X,"chair")|assign(X," arrivant")|assign(X," felicità")|assign(X,"shape")|assign(X,"city")|retum(X).
select(X):-assign(X, "laptop").
retum(X).
 köp:assign(X,"city").
 köp:retum(X).
 köp:select(X).
 köp:retum(X).
 köp:select(X).
 köp:retum(X).
 köp:select(X).
 köp:retum(X).
 köp:select(X).
 köp:retum(X).
 köp:select(X).
 köp:retum(

unique_rules: 
['select(X):-assign(X, "laptop").']

parsed: 
select(X):-assign(X, "laptop").

jaccard: 0.0


62
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "barcelona" and "darkmagenta". However, avoid any combination where predicate "barcelona" has label "roof".

answer from file: 
combination(X,Y):-barcelona(X, _),darkmagenta(Y), not barcelona(X, roof).

facts: 
barcelona(1..4, 1..4).darkmagenta(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "barcelona" and "darkmagenta". However, avoid any combination where predicate "barcelona" has label "roof".
Answer: combination(X,Y):-barcelona(X, _),darkmagenta(Y), not barcelona(X, roof).
combination(X,Y):-barcelona(X, _),darkmagenta(Y).
combination(X,Y):-barcelona(X, _),darkmagenta(Y), roof.
```
Combinations are expressed by predicate "combination".
However, avoid any combination where predicate "rome" has label "object".
```
result: combination(X,Y):-rome(X, _),darkmagenta(Y), not rome(X, object).
```
The two sets are expressed by predicates "rome" and "darkmagenta".
However, avoid any combination where predicate "rome

unique_rules: 
['combination(X,Y):-barcelona(X, _),darkmagenta(Y), not barcelona(X, roof).', 'combination(X,Y):-barcelona(X, _),darkmagenta(Y).', 'combination(X,Y):-barcelona(X, _),darkmagenta(Y), roof.', 'result: combination(X,Y):-rome(X, _),darkmagenta(Y), not rome(X, object).']

parsed: 
combination(X,Y):-barcelona(X, _),darkmagenta(Y), not barcelona(X, roof).

jaccard: 1.0


63
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "barcelona" having fields "ID","strength","darkmagentaID", and the predicate "darkmagenta" having fields "ID","lake". Define a predicate "barcelona_darkmagenta" that associates to each "barcelona" the "lake" of "darkmagenta" only where "lake" is different than 36.

answer from file: 
barcelona_darkmagenta(X,Z):-barcelona(X,_,Y),darkmagenta(Y,Z), Z!=36.

facts: 
barcelona("ID","strength","darkmagentaID").darkmagenta("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "barcelona" having fields "ID","strength","darkmagentaID", and the predicate "darkmagenta" having fields "ID","lake". Define a predicate "barcelona_darkmagenta" that associates to each "barcelona" the "lake" of "darkmagenta" only where "lake" is different than 36.
Answer: barcelona_darkmagenta(X,Z):-barcelona(X,_,Y),darkmagenta(Y,Z), Z!=36.
 ángulo_darkmagenta(X,Z):-barcelona(X,_,Y),darkmagenta(Y,Z), Z==36.
 ángulo_darkmagenta(X,Z):-barcelona(X,_,Y),darkmagenta(Y,Z), Z==1.
 ángulo_darkmagenta(X,Z):-barcelona(X,_,Y),darkmagenta(Y,Z), Z==2.
 ángulo_darkmagenta(X,Z):-barcelona(X,_,Y),darkmagenta(Y,Z), Z==4.
 áng

unique_rules: 
['barcelona_darkmagenta(X,Z):-barcelona(X,_,Y),darkmagenta(Y,Z), Z!=36.', 'ángulo_darkmagenta(X,Z):-barcelona(X,_,Y),darkmagenta(Y,Z), Z==36.', 'ángulo_darkmagenta(X,Z):-barcelona(X,_,Y),darkmagenta(Y,Z), Z==1.', 'ángulo_darkmagenta(X,Z):-barcelona(X,_,Y),darkmagenta(Y,Z), Z==2.', 'ángulo_darkmagenta(X,Z):-barcelona(X,_,Y),darkmagenta(Y,Z), Z==4.']

parsed: 
barcelona_darkmagenta(X,Z):-barcelona(X,_,Y),darkmagenta(Y,Z), Z!=36.

jaccard: 1.0


64
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "roof" having fields "ID","surname","butterflyID", and the predicate "butterfly" having fields "ID","owner". Define a predicate "roof_butterfly" that associates to each "roof", not associated with label "roof", the attribute "owner" of "butterfly".

answer from file: 
roof_butterfly(X,Z):-roof(X,_,Y),butterfly(Y,Z),not roof(X,roof,_).

facts: 
roof("ID","surname","butterflyID").butterfly("ID","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "roof" having fields "ID","surname","butterflyID", and the predicate "butterfly" having fields "ID","owner". Define a predicate "roof_butterfly" that associates to each "roof", not associated with label "roof", the attribute "owner" of "butterfly".
Result: roof_ bréeder(X,Z):-roof(X,_,Y),butterfly(Y,Z),not roof(X,_,_).
 ángulo(X,Y):-roof(X,_,Y).
 ángulo(X,Y):-roof(X,_,Z), ángulo(Z,_,Y).
 ángulo(X,Y):-roof(X,_,Z),not ángulo(Z,_,Y).
 ángulo(X,Y):-roof(X,_,Z),creator(Z,Y).
creator(X,Y):- ángulo(X,_,Y).
creator(X,Y):- ángulo(X,_,Z),creator(Z,

unique_rules: 
['Result: roof_ bréeder(X,Z):-roof(X,_,Y),butterfly(Y,Z),not roof(X,_,_).', 'ángulo(X,Y):-roof(X,_,Y).', 'ángulo(X,Y):-roof(X,_,Z), ángulo(Z,_,Y).', 'ángulo(X,Y):-roof(X,_,Z),not ángulo(Z,_,Y).', 'ángulo(X,Y):-roof(X,_,Z),creator(Z,Y).', 'creator(X,Y):- ángulo(X,_,Y).', 'creator(X,Y):- ángulo(X,_,Z),creator(Z,.']

parsed: 
Result: roof_ bréeder(X,Z):-roof(X,_,Y),butterfly(Y,Z),not roof(X,_,_).

jaccard: 0.0


65
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "cairo" as the transitive closure of predicate "surname". Then, assign exactly one label from the set desk,flower to each element in "cairo".

answer from file: 
cairo(X,Y):-surname(X,Y).
cairo(X,Y):-surname(X,Z),cairo(Z,Y).
assign(X,"desk")|assign(X,"flower"):-cairo(X,_).

facts: 
surname(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "cairo" as the transitive closure of predicate "surname". Then, assign exactly one label from the set desk,flower to each element in "cairo".
Answer: cairo(X,Y):-surname(X,Y).
cairo(X,Y):-surname(X,Z),cairo(Z,Y).
assign(X,"desk")|assign(X,"flower"):-cairo(X,_).
retum(X,Y):-assign(X,Y).
retum(X,Y):-assign(X,Z),retum(Z,Y).
retum(X,Y):-assign(X,Z),retum(Z,Y).
retum(X,Y):-assign(X,Z),retum(Z,Y),creator(X,Y).
creator(X,Y):-assign(X,Y),creator(Y,Z),

unique_rules: 
['cairo(X,Y):-surname(X,Y).', 'cairo(X,Y):-surname(X,Z),cairo(Z,Y).', 'assign(X,"desk")|assign(X,"flower"):-cairo(X,_).', 'retum(X,Y):-assign(X,Y).', 'retum(X,Y):-assign(X,Z),retum(Z,Y).', 'retum(X,Y):-assign(X,Z),retum(Z,Y),creator(X,Y).', 'creator(X,Y):-assign(X,Y),creator(Y,Z),.']

parsed: 
cairo(X,Y):-surname(X,Y).
cairo(X,Y):-surname(X,Z),cairo(Z,Y).
assign(X,"desk")|assign(X,"flower"):-cairo(X,_).

jaccard: 1.0


66
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate flower. The labels are chair,flower,laptop,butterfly. Consider only the predicate flower not associated with label "cloud".

answer from file: 
assign(X,"chair")|assign(X,"flower")|assign(X,"laptop")|assign(X,"butterfly"):-flower(X, _), not flower(X, cloud).

facts: 
flower(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate flower. The labels are chair,flower,laptop,butterfly. Consider only the predicate flower not associated with label "cloud".
Answer: assign(X,"chair")|assign(X,"flower")|assign(X," arrivant")|assign(X," bré")
retum(X, _), flower(X, _), not flower(X, cloud).
```
retum(X, _), flower(X, _), not flower(X, cloud).
```
Explanation:
The predicate flower has label "height", and not "cloud".
The predicate flower not associated with label "cloud" has label "height".
So, the predicate flower not associated with label "cloud" has label "height".
The predicateretum associates to each element the label "height" only where "height" is not associated with label "cloud

unique_rules: 
[]

parsed: 


jaccard: 0.0


67
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate barcelona and labels surname, lake having label lake different than 28. The labels are laptop,desk,wall,cloud,roof,flower,chair,butterfly.

answer from file: 
assign(X,"laptop")|assign(X,"desk")|assign(X,"wall")|assign(X,"cloud")|assign(X,"roof")|assign(X,"flower")|assign(X,"chair")|assign(X,"butterfly"):-barcelona(X, Y), Y!=28 .

facts: 
barcelona(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate barcelona and labels surname, lake having label lake different than 28. The labels are laptop,desk,wall,cloud,roof,flower,chair,butterfly.
Answer: assign(X,"laptop")|assign(X,"desk")|assign(X,"wall")|assign(X,"cloud")|assign(X,"roof")|assign(X,"flower")|assign(X,"chair")|assign(X," arrivant")|assign(X," bré").
retum(X, Y), Y!=28 .
```
Assign(X," arrivant")|Assign(X," bré"):-barcelona(X, Y), Y!=28 .
```
The predicate barcelona has label "description", and the predicate " bré" has label "price".
So, the predicate "assign" associates to each "description" the "price" of " bré".


unique_rules: 
['Assign(X," arrivant")|Assign(X," bré"):-barcelona(X, Y), Y!=28 .']

parsed: 
Assign(X," arrivant")|Assign(X," bré"):-barcelona(X, Y), Y!=28 .

jaccard: 0.0


68
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate quality. The labels are cloud,desk,storm,flower,butterfly,laptop,roof,chair,wall.  Then, filter and return only the elements assigned to label cloud.".

answer from file: 
assign(X,"cloud")|assign(X,"desk")|assign(X,"storm")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"roof")|assign(X,"chair")|assign(X,"wall"):-quality(X).
select(X):-assign(X, "cloud").

facts: 
quality(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate quality. The labels are cloud,desk,storm,flower,butterfly,laptop,roof,chair,wall.  Then, filter and return only the elements assigned to label cloud.".
Answer: assign(X,"cloud")|assign(X,"desk")|assign(X,"storm")|assign(X,"flower")|assign(X," arrivant")|assign(X," felicità")|assign(X,"shape")|assign(X,"city")|assign(X,"name")|retum(X).
select(X):-assign(X, "cloud").
retum(X).
```
Assign(X,"cloud")|Assign(X,"desk")|Assign(X,"storm")|Assign(X,"flower")|Assign(X," arrivant")|Assign(X," felicità")|Assign(X,"shape")|Assign(X,"city")|Assign(X,"

unique_rules: 
['select(X):-assign(X, "cloud").']

parsed: 
select(X):-assign(X, "cloud").

jaccard: 0.0


69
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "moscow" and "lake". However, avoid any combination where predicate "moscow" has label "laptop".

answer from file: 
combination(X,Y):-moscow(X, _),lake(Y), not moscow(X, laptop).

facts: 
moscow(1..4, 1..4).lake(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "moscow" and "lake". However, avoid any combination where predicate "moscow" has label "laptop".
Answer: combination(X,Y):-moscow(X, _),lake(Y), not moscow(X, _).
combination(X,Y):-moscow(X, _),lake(Y).
```
Combinations are expressed by predicate "combination". However, avoid any combination where predicate "moscow" has label "laptop".
```
result(X,Y):-combination(X,Y).
result(X,Y):-combination(X,Y), label(X, "moto").
```
The label "moto" is not associated with "description", so it is not considered for the "moto" predicate.
```
moto(X, Y):-description(X, Y

unique_rules: 
['combination(X,Y):-moscow(X, _),lake(Y), not moscow(X, _).', 'combination(X,Y):-moscow(X, _),lake(Y).', 'result(X,Y):-combination(X,Y).', 'result(X,Y):-combination(X,Y), label(X, "moto").', 'moto(X, Y):-description(X, Y.']

parsed: 
combination(X,Y):-moscow(X, _),lake(Y), not moscow(X, _).

jaccard: 0.0


70
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "cloud" having fields "ID","surname","whiteID", and the predicate "white" having fields "ID","surname". Define a predicate "cloud_white" that associates to each "cloud" the "surname" of "white" only where "surname" is different than 34.

answer from file: 
cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34.

facts: 
cloud("ID","surname","whiteID").white("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "cloud" having fields "ID","surname","whiteID", and the predicate "white" having fields "ID","surname". Define a predicate "cloud_white" that associates to each "cloud" the "surname" of "white" only where "surname" is different than 34.
Answer: cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34.
cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z==34.
retum(X,Z):-cloud(X,_,Y),white(Y,Z).
retum(X,Z):-cloud(X,_,Y),white(Y,Z), Z==34.
retum(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34,shape(X,Z).
retum(X,Z):-cloud(X,_,Y),white(Y,

unique_rules: 
['cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34.', 'cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z==34.', 'retum(X,Z):-cloud(X,_,Y),white(Y,Z).', 'retum(X,Z):-cloud(X,_,Y),white(Y,Z), Z==34.', 'retum(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34,shape(X,Z).', 'retum(X,Z):-cloud(X,_,Y),white(Y,.']

parsed: 
cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34.

jaccard: 1.0


71
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "black" having fields "ID","quality","lakeID", and the predicate "lake" having fields "ID","owner". Define a predicate "black_lake" that associates to each "black", not associated with label "laptop", the attribute "owner" of "lake".

answer from file: 
black_lake(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).

facts: 
black("ID","quality","lakeID").lake("ID","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "black" having fields "ID","quality","lakeID", and the predicate "lake" having fields "ID","owner". Define a predicate "black_lake" that associates to each "black", not associated with label "laptop", the attribute "owner" of "lake".
Answer: black_lake(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).
black_lake(X,Z):-black(X,_,Y),lake(Y,Z),label(X,laptop).
assign(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).
black_lake(X,Z):-black(X,_,Y),lake(Y,Z),label(X,height).
retum(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,height,_,_).
retum(X

unique_rules: 
['black_lake(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).', 'black_lake(X,Z):-black(X,_,Y),lake(Y,Z),label(X,laptop).', 'assign(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).', 'black_lake(X,Z):-black(X,_,Y),lake(Y,Z),label(X,height).', 'retum(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,height,_,_).']

parsed: 
black_lake(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).

jaccard: 1.0


72
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "storm" as the transitive closure of predicate "white". Then, assign exactly one label from the set chair,roof,flower,desk,wall,laptop,storm,cloud to each element in "storm".

answer from file: 
storm(X,Y):-white(X,Y).
storm(X,Y):-white(X,Z),storm(Z,Y).
assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk")|assign(X,"wall")|assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud"):-storm(X,_).

facts: 
white(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "storm" as the transitive closure of predicate "white". Then, assign exactly one label from the set chair,roof,flower,desk,wall,laptop,storm,cloud to each element in "storm".
Answer: storm(X,Y):-white(X,Y).
storm(X,Y):-white(X,Z),storm(Z,Y).
assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk")|assign(X,"wall")|assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud"):-storm(X,_).
retum:
assign(X,"city")|assign(X,"age")|assign(X,"name")|assign(X,"price")|assign(X,"description")|assign(X,"author")|assign(X,"creator")|assign

unique_rules: 
['storm(X,Y):-white(X,Y).', 'storm(X,Y):-white(X,Z),storm(Z,Y).', 'assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk")|assign(X,"wall")|assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud"):-storm(X,_).']

parsed: 
storm(X,Y):-white(X,Y).
storm(X,Y):-white(X,Z),storm(Z,Y).
assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk")|assign(X,"wall")|assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud"):-storm(X,_).

jaccard: 1.0


73
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate moscow. The labels are desk,butterfly,cloud,flower,wall. Consider only the predicate moscow not associated with label "roof".

answer from file: 
assign(X,"desk")|assign(X,"butterfly")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-moscow(X, _), not moscow(X, roof).

facts: 
moscow(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate moscow. The labels are desk,butterfly,cloud,flower,wall. Consider only the predicate moscow not associated with label "roof".
Answer: assign(X,"desk")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-moscow(X, _), not moscow(X, roof).
```
assign(X,"description")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"name"):-moscow(X, _).
```
The predicate moscow has label "description", and the predicate price has label "height". So, the predicate moscow is not associated with label "description".
The predicate price has label "height", so the predicate price is not associated with

unique_rules: 
['assign(X,"desk")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-moscow(X, _), not moscow(X, roof).', 'assign(X,"description")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"name"):-moscow(X, _).']

parsed: 
assign(X,"desk")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-moscow(X, _), not moscow(X, roof).

jaccard: 1.0


74
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate darkmagenta and labels strength, weight having label weight different than 20. The labels are wall,butterfly.

answer from file: 
assign(X,"wall")|assign(X,"butterfly"):-darkmagenta(X, Y), Y!=20 .

facts: 
darkmagenta(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate darkmagenta and labels strength, weight having label weight different than 20. The labels are wall,butterfly.
Answer: assign(X,"wall")|assign(X," arrivant")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"author")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"author") :-darkMagenta(X, Y), Y!=20 .
```
The predicate darkMagenta has label "description", and the labels are price,age,author,city,description,height,shape,name,creator,age,

unique_rules: 
['assign(X,"wall")|assign(X," arrivant")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"author")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"author") :-darkMagenta(X, Y), Y!=20 .']

parsed: 
assign(X,"wall")|assign(X," arrivant")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"author")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"author") :-darkMagenta(X, Y), Y!=20 .

jaccard: 0.0


75
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate desk. The labels are desk,storm,wall,butterfly,chair,laptop,flower,roof,cloud.  Then, filter and return only the elements assigned to label chair.".

answer from file: 
assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X,"butterfly")|assign(X,"chair")|assign(X,"laptop")|assign(X,"flower")|assign(X,"roof")|assign(X,"cloud"):-desk(X).
select(X):-assign(X, "chair").

facts: 
desk(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate desk. The labels are desk,storm,wall,butterfly,chair,laptop,flower,roof,cloud.  Then, filter and return only the elements assigned to label chair.".
Answer: assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X," arrivant")|assign(X,"chair")|assign(X," cœurs")|assign(X,"florence")|assign(X,"roof")|assign(X,"cloud"):-desk(X).
select(X):-assign(X, "chair").
```
The predicate desk has label "description", and the predicate chair has label "price".
So, the predicate assign has label "description" only where "description" is lower than 75.
Then, select only the elements assigned to label "description".
The predicate select has label "description" only where

unique_rules: 
['assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X," arrivant")|assign(X,"chair")|assign(X," cœurs")|assign(X,"florence")|assign(X,"roof")|assign(X,"cloud"):-desk(X).', 'select(X):-assign(X, "chair").']

parsed: 
assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X," arrivant")|assign(X,"chair")|assign(X," cœurs")|assign(X,"florence")|assign(X,"roof")|assign(X,"cloud"):-desk(X).
select(X):-assign(X, "chair").

jaccard: 1.0


76
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "singapore" and "delhi". However, avoid any combination where predicate "singapore" has label "butterfly".

answer from file: 
combination(X,Y):-singapore(X, _),delhi(Y), not singapore(X, butterfly).

facts: 
singapore(1..4, 1..4).delhi(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "singapore" and "delhi". However, avoid any combination where predicate "singapore" has label "butterfly".
Answer: combination(X,Y):-singapore(X, _),delhi(Y), not singapore(X, butterfly).
combination(X,Y):-singapore(X, _),delhi(Y).
combination(X,Y):-singapore(X, _),delhi(Y), label("color").
assign(X, Y)
retum(X, Y).
retum(X, Y), label("color").
retum(X, Y), label("age").
retum(X, Y), label("description").
retum(X, Y), label("height").
retum(X, Y), label("price").
retum(X, Y), label("author

unique_rules: 
['combination(X,Y):-singapore(X, _),delhi(Y), not singapore(X, butterfly).', 'combination(X,Y):-singapore(X, _),delhi(Y).', 'combination(X,Y):-singapore(X, _),delhi(Y), label("color").']

parsed: 
combination(X,Y):-singapore(X, _),delhi(Y), not singapore(X, butterfly).

jaccard: 1.0


77
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "laptop" having fields "ID","surname","butterflyID", and the predicate "butterfly" having fields "ID","hair". Define a predicate "laptop_butterfly" that associates to each "laptop" the "hair" of "butterfly" only where "hair" is different than 64.

answer from file: 
laptop_butterfly(X,Z):-laptop(X,_,Y),butterfly(Y,Z), Z!=64.

facts: 
laptop("ID","surname","butterflyID").butterfly("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "laptop" having fields "ID","surname","butterflyID", and the predicate "butterfly" having fields "ID","hair". Define a predicate "laptop_butterfly" that associates to each "laptop" the "hair" of "butterfly" only where "hair" is different than 64.
Answer: laptop_ bréeder(X,Z):-laptop(X,_,Y),butterfly(Y,Z), Z!=64.
 assurent(X,Z):-laptop(X,_,Y),creator(Y,Z), Z!=64.
 auxquels(X,Z):-laptop(X,_,Y),creator(Y,Z), Z!=64.
retum(X,Z):-laptop(X,_,Y),creator(Y,Z), Z==64.
retum(X,Z):-creator(Y,Z), Z==64.
retum(X,Z):-creator(Y,Z), Z!=64,shape(X,Z).
retum(

unique_rules: 
['laptop_ bréeder(X,Z):-laptop(X,_,Y),butterfly(Y,Z), Z!=64.', 'assurent(X,Z):-laptop(X,_,Y),creator(Y,Z), Z!=64.', 'auxquels(X,Z):-laptop(X,_,Y),creator(Y,Z), Z!=64.', 'retum(X,Z):-laptop(X,_,Y),creator(Y,Z), Z==64.', 'retum(X,Z):-creator(Y,Z), Z==64.', 'retum(X,Z):-creator(Y,Z), Z!=64,shape(X,Z).']

parsed: 
laptop_ bréeder(X,Z):-laptop(X,_,Y),butterfly(Y,Z), Z!=64.

jaccard: 0.0


78
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "desk" having fields "ID","owner","strengthID", and the predicate "strength" having fields "ID","lake". Define a predicate "desk_strength" that associates to each "desk", not associated with label "butterfly", the attribute "lake" of "strength".

answer from file: 
desk_strength(X,Z):-desk(X,_,Y),strength(Y,Z),not desk(X,butterfly,_).

facts: 
desk("ID","owner","strengthID").strength("ID","lake").

generated: 
Write an ASP program for the following problem. Consider predicate "desk" having fields "ID","owner","strengthID", and the predicate "strength" having fields "ID","lake". Define a predicate "desk_strength" that associates to each "desk", not associated with label "butterfly", the attribute "lake" of "strength".
Result: desk_strength(X,Z):-desk(X,_,Y),strength(Y,Z),not desk(X,_,_).
 espressione(X,Z):-desk(X,_,Y),strength(Y,Z).
 espressione(X,_,Z):-desk(X,_,Y),not strength(Y,Z).
 ángulo(X,Z):-desk_strength(X,Z).
 ángulo(X,Z):-desk(X,_,Y),strength(Y,Z).
 ángulo(X,Z):-desk(X,_,Y),not strength(Y,Z).
 ángulo(X,Z):-desk(X,_,Y),strength(

unique_rules: 
['Result: desk_strength(X,Z):-desk(X,_,Y),strength(Y,Z),not desk(X,_,_).', 'espressione(X,Z):-desk(X,_,Y),strength(Y,Z).', 'espressione(X,_,Z):-desk(X,_,Y),not strength(Y,Z).', 'ángulo(X,Z):-desk_strength(X,Z).', 'ángulo(X,Z):-desk(X,_,Y),strength(Y,Z).', 'ángulo(X,Z):-desk(X,_,Y),not strength(Y,Z).', 'ángulo(X,Z):-desk(X,_,Y),strength(.']

parsed: 
Result: desk_strength(X,Z):-desk(X,_,Y),strength(Y,Z),not desk(X,_,_).

jaccard: 0.0


79
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "black" as the transitive closure of predicate "mumbai". Then, assign exactly one label from the set wall,roof,cloud,chair,storm,flower to each element in "black".

answer from file: 
black(X,Y):-mumbai(X,Y).
black(X,Y):-mumbai(X,Z),black(Z,Y).
assign(X,"wall")|assign(X,"roof")|assign(X,"cloud")|assign(X,"chair")|assign(X,"storm")|assign(X,"flower"):-black(X,_).

facts: 
mumbai(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "black" as the transitive closure of predicate "mumbai". Then, assign exactly one label from the set wall,roof,cloud,chair,storm,flower to each element in "black".
Answer: black(X,Y):-mumbai(X,Y).
black(X,Y):-mumbai(X,Z),black(Z,Y).
assign(X,"wall")|assign(X,"roof")|assign(X,"cloud")|assign(X,"chair")|assign(X,"storm")|assign(X,"florence"):-black(X,_).
retum:assign(X,"florence")|retum:assign(X,"city").
retum:retum(X,Y),assign(Y,"florence").
retum:retum(X,Y),assign(Y,"city").
retum:retum(X,Y),assign(Y,"name").

unique_rules: 
['black(X,Y):-mumbai(X,Y).', 'black(X,Y):-mumbai(X,Z),black(Z,Y).', 'assign(X,"wall")|assign(X,"roof")|assign(X,"cloud")|assign(X,"chair")|assign(X,"storm")|assign(X,"florence"):-black(X,_).']

parsed: 
black(X,Y):-mumbai(X,Y).
black(X,Y):-mumbai(X,Z),black(Z,Y).
assign(X,"wall")|assign(X,"roof")|assign(X,"cloud")|assign(X,"chair")|assign(X,"storm")|assign(X,"florence"):-black(X,_).

jaccard: 0.0


80
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate cosenza. The labels are desk,storm,wall,roof,laptop,butterfly,flower,cloud. Consider only the predicate cosenza not associated with label "butterfly".

answer from file: 
assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X,"roof")|assign(X,"laptop")|assign(X,"butterfly")|assign(X,"flower")|assign(X,"cloud"):-cosenza(X, _), not cosenza(X, butterfly).

facts: 
cosenza(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate cosenza. The labels are desk,storm,wall,roof,laptop,butterfly,flower,cloud. Consider only the predicate cosenza not associated with label "butterfly".
Answer: assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X,"roof")|assign(X,"laptop")|assign(X," arrivant")|assign(X,"author")|assign(X,"city")|assign(X,"description"):-cosenza(X, _), not cosenza(X, butterfly).
``` italienne
assign(X,"description") :
for (X, Y) in cosenza(X, _), not cosenza(X, butterfly):
    Y=description.
```

unique_rules: 
['assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X,"roof")|assign(X,"laptop")|assign(X," arrivant")|assign(X,"author")|assign(X,"city")|assign(X,"description"):-cosenza(X, _), not cosenza(X, butterfly).']

parsed: 
assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X,"roof")|assign(X,"laptop")|assign(X," arrivant")|assign(X,"author")|assign(X,"city")|assign(X,"description"):-cosenza(X, _), not cosenza(X, butterfly).

jaccard: 0.0


81
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate lake and labels weight, quality having label quality different than 65. The labels are chair,desk,storm,flower,cloud.

answer from file: 
assign(X,"chair")|assign(X,"desk")|assign(X,"storm")|assign(X,"flower")|assign(X,"cloud"):-lake(X, Y), Y!=65 .

facts: 
lake(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate lake and labels weight, quality having label quality different than 65. The labels are chair,desk,storm,flower,cloud.
Answer: assign(X,"chair")|assign(X,"desk")|assign(X,"storm")|assign(X,"flower")|assign(X,"cloud"):-lake(X, Y), Y!=65 .
```
 köp:assign(X,"name")| köp:assign(X,"price")| köp:assign(X,"age")| köp:assign(X,"description"):-price(X, Y), Y!=65 .
```
The predicate "price" has label "description", but not label "age".
The labels are description,city,price,age,name,shape,height,author,creator,age,description,city,name,price,

unique_rules: 
['assign(X,"chair")|assign(X,"desk")|assign(X,"storm")|assign(X,"flower")|assign(X,"cloud"):-lake(X, Y), Y!=65 .', 'köp:assign(X,"name")| köp:assign(X,"price")| köp:assign(X,"age")| köp:assign(X,"description"):-price(X, Y), Y!=65 .']

parsed: 
assign(X,"chair")|assign(X,"desk")|assign(X,"storm")|assign(X,"flower")|assign(X,"cloud"):-lake(X, Y), Y!=65 .

jaccard: 1.0


82
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate darkmagenta. The labels are storm,desk,laptop,butterfly,wall,cloud,flower,chair,roof.  Then, filter and return only the elements assigned to label butterfly.".

answer from file: 
assign(X,"storm")|assign(X,"desk")|assign(X,"laptop")|assign(X,"butterfly")|assign(X,"wall")|assign(X,"cloud")|assign(X,"flower")|assign(X,"chair")|assign(X,"roof"):-darkmagenta(X).
select(X):-assign(X, "butterfly").

facts: 
darkmagenta(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate darkmagenta. The labels are storm,desk,laptop,butterfly,wall,cloud,flower,chair,roof.  Then, filter and return only the elements assigned to label butterfly.".
Answer: assign(X,"storm")|assign(X,"desk")|assign(X,"laptop")|assign(X," arrivant")|assign(X,"wall")|assign(X,"cloud")|assign(X,"flower")|assign(X,"chair")|assign(X,"roof"):-darkMagenta(X).
select(X):-assign(X, " arrivant").
retum(X):-assign(X, "florence").
retum(X):-assign(X, "city").
retum(X):-assign(X, "name").
retum(X):-assign(X, "age").
retum(X):-assign(X, "description").
retum(X):-assign

unique_rules: 
['assign(X,"storm")|assign(X,"desk")|assign(X,"laptop")|assign(X," arrivant")|assign(X,"wall")|assign(X,"cloud")|assign(X,"flower")|assign(X,"chair")|assign(X,"roof"):-darkMagenta(X).', 'select(X):-assign(X, " arrivant").', 'retum(X):-assign(X, "florence").', 'retum(X):-assign(X, "city").', 'retum(X):-assign(X, "name").', 'retum(X):-assign(X, "age").', 'retum(X):-assign(X, "description").', 'retum(X):-assign.']

parsed: 
assign(X,"storm")|assign(X,"desk")|assign(X,"laptop")|assign(X," arrivant")|assign(X,"wall")|assign(X,"cloud")|assign(X,"flower")|assign(X,"chair")|assign(X,"roof"):-darkMagenta(X).
select(X):-assign(X, " arrivant").

jaccard: 0.0


83
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "quality" and "delhi". However, avoid any combination where predicate "quality" has label "laptop".

answer from file: 
combination(X,Y):-quality(X, _),delhi(Y), not quality(X, laptop).

facts: 
quality(1..4, 1..4).delhi(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "quality" and "delhi". However, avoid any combination where predicate "quality" has label "laptop".
Answer: combination(X,Y):-quality(X, _),delhi(Y), not quality(X, _).
combination(X,Y):-quality(X, _),delhi(Y).
assign(X, Y)
combination(X, Y).
retum.
assign(X, Y),
retum.
 espressione(X, Y).
retum.
 quíntuple(X, Y),
retum.
 bleue(X, Y),
retum.
shape(X, Y),
retum.
city(X, Y),
retum.
age(X, Y),
retum.
name(X, Y),
retum.
price(X, Y

unique_rules: 
['combination(X,Y):-quality(X, _),delhi(Y), not quality(X, _).', 'combination(X,Y):-quality(X, _),delhi(Y).']

parsed: 
combination(X,Y):-quality(X, _),delhi(Y), not quality(X, _).

jaccard: 0.0


84
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "cloud" having fields "ID","surname","whiteID", and the predicate "white" having fields "ID","surname". Define a predicate "cloud_white" that associates to each "cloud" the "surname" of "white" only where "surname" is different than 34.

answer from file: 
cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34.

facts: 
cloud("ID","surname","whiteID").white("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "cloud" having fields "ID","surname","whiteID", and the predicate "white" having fields "ID","surname". Define a predicate "cloud_white" that associates to each "cloud" the "surname" of "white" only where "surname" is different than 34.
Answer: cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34.
cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z==34.

unique_rules: 
['cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34.', 'cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z==34.']

parsed: 
cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34.

jaccard: 1.0


85
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "black" having fields "ID","quality","lakeID", and the predicate "lake" having fields "ID","owner". Define a predicate "black_lake" that associates to each "black", not associated with label "laptop", the attribute "owner" of "lake".

answer from file: 
black_lake(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).

facts: 
black("ID","quality","lakeID").lake("ID","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "black" having fields "ID","quality","lakeID", and the predicate "lake" having fields "ID","owner". Define a predicate "black_lake" that associates to each "black", not associated with label "laptop", the attribute "owner" of "lake".
Answer: black_lake(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).
black_lake(X,Z):-black(X,_,Y),lake(Y,Z),label(X,laptop).
assign(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).
black_lake(X,Z):-black(X,_,Y),lake(Y,Z),label(X,height).
retum(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,height,_,_).
retum(X

unique_rules: 
['black_lake(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).', 'black_lake(X,Z):-black(X,_,Y),lake(Y,Z),label(X,laptop).', 'assign(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).', 'black_lake(X,Z):-black(X,_,Y),lake(Y,Z),label(X,height).', 'retum(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,height,_,_).']

parsed: 
black_lake(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).

jaccard: 1.0


86
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "storm" as the transitive closure of predicate "white". Then, assign exactly one label from the set chair,roof,flower,desk,wall,laptop,storm,cloud to each element in "storm".

answer from file: 
storm(X,Y):-white(X,Y).
storm(X,Y):-white(X,Z),storm(Z,Y).
assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk")|assign(X,"wall")|assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud"):-storm(X,_).

facts: 
white(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "storm" as the transitive closure of predicate "white". Then, assign exactly one label from the set chair,roof,flower,desk,wall,laptop,storm,cloud to each element in "storm".
Answer: storm(X,Y):-white(X,Y).
storm(X,Y):-white(X,Z),storm(Z,Y).
assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk")|assign(X,"wall")|assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud"):-storm(X,_).
retum:
assign(X,"city")|assign(X,"age")|assign(X,"description")|assign(X,"price")|assign(X,"name")|assign(X,"shape")|assign(X,"author")|assign

unique_rules: 
['storm(X,Y):-white(X,Y).', 'storm(X,Y):-white(X,Z),storm(Z,Y).', 'assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk")|assign(X,"wall")|assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud"):-storm(X,_).']

parsed: 
storm(X,Y):-white(X,Y).
storm(X,Y):-white(X,Z),storm(Z,Y).
assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk")|assign(X,"wall")|assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud"):-storm(X,_).

jaccard: 1.0


87
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate moscow. The labels are desk,butterfly,cloud,flower,wall. Consider only the predicate moscow not associated with label "roof".

answer from file: 
assign(X,"desk")|assign(X,"butterfly")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-moscow(X, _), not moscow(X, roof).

facts: 
moscow(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate moscow. The labels are desk,butterfly,cloud,flower,wall. Consider only the predicate moscow not associated with label "roof".
Answer: assign(X,"desk")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-moscow(X, _), not moscow(X, roof).
```
assign(X,"description")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"name"):-moscow(X, _).
```
The predicate moscow has label "description", and the predicate description has label "height". So, the predicate moscow is not associated with label "height".
The labels are description,height,price,age,name,city,shape

unique_rules: 
['assign(X,"desk")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-moscow(X, _), not moscow(X, roof).', 'assign(X,"description")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"name"):-moscow(X, _).']

parsed: 
assign(X,"desk")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-moscow(X, _), not moscow(X, roof).

jaccard: 1.0


88
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate darkmagenta and labels strength, weight having label weight different than 20. The labels are wall,butterfly.

answer from file: 
assign(X,"wall")|assign(X,"butterfly"):-darkmagenta(X, Y), Y!=20 .

facts: 
darkmagenta(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate darkmagenta and labels strength, weight having label weight different than 20. The labels are wall,butterfly.
Answer: assign(X,"wall")|assign(X," ABE")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"author")|assign(X,"name")|assign(X,"shape")|assign(X,"price")|assign(X,"age")|assign(X,"description")|assign(X,"author")|assign(X,"name")|assign(X,"shape") :-darkMagenta(X, Y), Y!=20 .
```
The predicate darkMagenta has label "description", and the labels are price,age,shape,

unique_rules: 
['assign(X,"wall")|assign(X," ABE")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"author")|assign(X,"name")|assign(X,"shape")|assign(X,"price")|assign(X,"age")|assign(X,"description")|assign(X,"author")|assign(X,"name")|assign(X,"shape") :-darkMagenta(X, Y), Y!=20 .']

parsed: 
assign(X,"wall")|assign(X," ABE")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"author")|assign(X,"name")|assign(X,"shape")|assign(X,"price")|assign(X,"age")|assign(X,"description")|assign(X,"author")|assign(X,"name")|assign(X,"shape") :-darkMagenta(X, Y), Y!=20 .

jaccard: 0.0


89
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate desk. The labels are desk,storm,wall,butterfly,chair,laptop,flower,roof,cloud.  Then, filter and return only the elements assigned to label chair.".

answer from file: 
assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X,"butterfly")|assign(X,"chair")|assign(X,"laptop")|assign(X,"flower")|assign(X,"roof")|assign(X,"cloud"):-desk(X).
select(X):-assign(X, "chair").

facts: 
desk(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate desk. The labels are desk,storm,wall,butterfly,chair,laptop,flower,roof,cloud.  Then, filter and return only the elements assigned to label chair.".
Answer: assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X," épar")|assign(X,"chair")|assign(X," arrivant")|assign(X,"florence")|assign(X,"roof")|assign(X,"cloud"):-desk(X).
select(X):-assign(X, "chair").
```
The predicate desk has label "description", and the predicate chair has label "shape". So, the predicate assign has label "description" only where "description" is lower than 75.
Then, select only the elements assigned to label "description".
The predicate select has label "description" only where "

unique_rules: 
['assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X," épar")|assign(X,"chair")|assign(X," arrivant")|assign(X,"florence")|assign(X,"roof")|assign(X,"cloud"):-desk(X).', 'select(X):-assign(X, "chair").']

parsed: 
assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X," épar")|assign(X,"chair")|assign(X," arrivant")|assign(X,"florence")|assign(X,"roof")|assign(X,"cloud"):-desk(X).
select(X):-assign(X, "chair").

jaccard: 1.0


90
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "singapore" and "delhi". However, avoid any combination where predicate "singapore" has label "butterfly".

answer from file: 
combination(X,Y):-singapore(X, _),delhi(Y), not singapore(X, butterfly).

facts: 
singapore(1..4, 1..4).delhi(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "singapore" and "delhi". However, avoid any combination where predicate "singapore" has label "butterfly".
Answer: combination(X,Y):-singapore(X, _),delhi(Y), not singapore(X, butterfly).
combination(X,Y):-singapore(X, _),delhi(Y).
combination(X,Y):-singapore(X, _),delhi(Y), label("color").
assign(X, Y)
retum(X, Y).
retum(X, Y), label("color").
retum(X, Y), label("age").
retum(X, Y), label("description").
retum(X, Y), label("height").
retum(X, Y), label("price").
retum(X, Y), label("shape

unique_rules: 
['combination(X,Y):-singapore(X, _),delhi(Y), not singapore(X, butterfly).', 'combination(X,Y):-singapore(X, _),delhi(Y).', 'combination(X,Y):-singapore(X, _),delhi(Y), label("color").']

parsed: 
combination(X,Y):-singapore(X, _),delhi(Y), not singapore(X, butterfly).

jaccard: 1.0


91
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "hair" having fields "ID","cloudID","surname", and the predicate "cloud" having fields "ID","quality". Define a predicate "hair_cloud" that associates to each "hair" the "quality" of "cloud" only where "quality" is different than 63.

answer from file: 
hair_cloud(X,Z):-hair(X,Y,_),cloud(Y,Z), Z!=63.

facts: 
hair("ID","cloudID","surname").cloud("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "hair" having fields "ID","cloudID","surname", and the predicate "cloud" having fields "ID","quality". Define a predicate "hair_cloud" that associates to each "hair" the "quality" of "cloud" only where "quality" is different than 63.
Answer: hair_cloud(X,Z):-hair(X,Y,_),cloud(Y,Z), Z!=63.
hair_cloud(X,Y,_):-hair(X,Y,_),cloud(Y,Z), Z==63.
 áng=hair_cloud(X,Y,_).
 áng.name=X, áng.price=Y, áng.description=Z, áng.creator=63.
 áng.name=X, áng.price=Y, áng.description=Z, áng.creator=72.
 áng.name=X, áng.price=Y, áng.description=Z, áng.creator=81.
 áng.

unique_rules: 
['hair_cloud(X,Z):-hair(X,Y,_),cloud(Y,Z), Z!=63.', 'hair_cloud(X,Y,_):-hair(X,Y,_),cloud(Y,Z), Z==63.']

parsed: 
hair_cloud(X,Z):-hair(X,Y,_),cloud(Y,Z), Z!=63.

jaccard: 1.0


92
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "quality" having fields "ID","delhiID","quality", and the predicate "delhi" having fields "ID","owner". Define a predicate "quality_delhi" that associates to each "quality", not associated with label "laptop", the attribute "owner" of "delhi".

answer from file: 
quality_delhi(X,Z):-quality(X,Y,_),delhi(Y,Z),not quality(X,_,laptop).

facts: 
quality("ID","delhiID","quality").delhi("ID","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "quality" having fields "ID","delhiID","quality", and the predicate "delhi" having fields "ID","owner". Define a predicate "quality_delhi" that associates to each "quality", not associated with label "laptop", the attribute "owner" of "delhi".
Answer: quality_delhi(X,Z):-quality(X,Y,_),delhi(Y,Z),not quality(X,_,laptop).
 ángulo(X,Y,Z):-quality(X,Y,_),delhi(Y,Z),not quality(X,_,laptop).
 ángulo(X,Y,Z):-quality(X,Y,_),delhi(Y,Z),label(X,moto).
 ángulo(X,Y,Z):-quality(X,Y,_),delhi(Y,Z),not label(X,moto).
 ángulo(X,Y,Z):-quality(X,Y,_),delhi(Y,Z

unique_rules: 
['quality_delhi(X,Z):-quality(X,Y,_),delhi(Y,Z),not quality(X,_,laptop).', 'ángulo(X,Y,Z):-quality(X,Y,_),delhi(Y,Z),not quality(X,_,laptop).', 'ángulo(X,Y,Z):-quality(X,Y,_),delhi(Y,Z),label(X,moto).', 'ángulo(X,Y,Z):-quality(X,Y,_),delhi(Y,Z),not label(X,moto).', 'ángulo(X,Y,Z):-quality(X,Y,_),delhi(Y,Z.']

parsed: 
quality_delhi(X,Z):-quality(X,Y,_),delhi(Y,Z),not quality(X,_,laptop).

jaccard: 1.0


93
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "moscow" as the transitive closure of predicate "black". Then, assign exactly one label from the set laptop,storm to each element in "moscow".

answer from file: 
moscow(X,Y):-black(X,Y).
moscow(X,Y):-black(X,Z),moscow(Z,Y).
assign(X,"laptop")|assign(X,"storm"):-moscow(X,_).

facts: 
black(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "moscow" as the transitive closure of predicate "black". Then, assign exactly one label from the set laptop,storm to each element in "moscow".
Answer: moscow(X,Y):-black(X,Y).
moscow(X,Y):-black(X,Z),moscow(Z,Y).
assign(X,"laptop")|assign(X,"storm"):-moscow(X,_).
retum(X,Y):-assign(X,Y).
retum(X,Y):-assign(X,Z),retum(Z,Y).
retum(X,Y):-assign(X,Z),retum(Z,Y).
retum(X,Y):-assign(X,Z),retum(Z,Y),retum(Y,X).
retum(X,Y):-assign(X,Z),retum(Z

unique_rules: 
['moscow(X,Y):-black(X,Y).', 'moscow(X,Y):-black(X,Z),moscow(Z,Y).', 'assign(X,"laptop")|assign(X,"storm"):-moscow(X,_).', 'retum(X,Y):-assign(X,Y).', 'retum(X,Y):-assign(X,Z),retum(Z,Y).', 'retum(X,Y):-assign(X,Z),retum(Z,Y),retum(Y,X).', 'retum(X,Y):-assign(X,Z),retum(Z.']

parsed: 
moscow(X,Y):-black(X,Y).
moscow(X,Y):-black(X,Z),moscow(Z,Y).
assign(X,"laptop")|assign(X,"storm"):-moscow(X,_).

jaccard: 1.0


94
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate wall. The labels are butterfly,desk. Consider only the predicate wall not associated with label "chair".

answer from file: 
assign(X,"butterfly")|assign(X,"desk"):-wall(X, _), not wall(X, chair).

facts: 
wall(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate wall. The labels are butterfly,desk. Consider only the predicate wall not associated with label "chair".
Answer: assign(X," originaux")|assign(X,"description")|assign(X,"city")|assign(X,"name")|assign(X,"price")|assign(X,"age")|assign(X,"author")|assign(X,"city")|assign(X,"description"), wall(X, _), not wall(X, chair).
```
assign(X,"description") : wall(X, _), not wall(X, chair).
assign(X,"author") : wall(X, _), not wall(X, chair).
assign(X,"city") : wall(X, _), not wall(X, chair).
assign(X,"name")

unique_rules: 
[]

parsed: 


jaccard: 0.0


95
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate black and labels owner, quality having label quality different than 92. The labels are cloud,roof,laptop,butterfly,flower,chair,storm.

answer from file: 
assign(X,"cloud")|assign(X,"roof")|assign(X,"laptop")|assign(X,"butterfly")|assign(X,"flower")|assign(X,"chair")|assign(X,"storm"):-black(X, Y), Y!=92 .

facts: 
black(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate black and labels owner, quality having label quality different than 92. The labels are cloud,roof,laptop,butterfly,flower,chair,storm.
Answer: assign(X,"cloud")|assign(X,"roof")|assign(X,"laptop")|assign(X," arrivant")|assign(X,"florence")|assign(X,"chair")|assign(X,"storm"):-black(X, Y), Y!=92 .
```
Assign exactly a label among a given set of labels to a set of elements expressed by predicate black and labels price,creator,description,age,city,height,shape,name,author,price,age,description,height,city,name,shape,price,author,age,description,height,city,name,shape,price,author,age,description,height,city,name,

unique_rules: 
['assign(X,"cloud")|assign(X,"roof")|assign(X,"laptop")|assign(X," arrivant")|assign(X,"florence")|assign(X,"chair")|assign(X,"storm"):-black(X, Y), Y!=92 .']

parsed: 
assign(X,"cloud")|assign(X,"roof")|assign(X,"laptop")|assign(X," arrivant")|assign(X,"florence")|assign(X,"chair")|assign(X,"storm"):-black(X, Y), Y!=92 .

jaccard: 1.0


96
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate cairo. The labels are butterfly,roof,wall,flower,chair.  Then, filter and return only the elements assigned to label chair.".

answer from file: 
assign(X,"butterfly")|assign(X,"roof")|assign(X,"wall")|assign(X,"flower")|assign(X,"chair"):-cairo(X).
select(X):-assign(X, "chair").

facts: 
cairo(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate cairo. The labels are butterfly,roof,wall,flower,chair.  Then, filter and return only the elements assigned to label chair.".
Answer: assign(X," épar")|assign(X,"height")|assign(X,"price")|assign(X,"name")|assign(X,"city")|retum(X).
select(X):-assign(X, "chair").
```
 espressione: assign(X," épar")|assign(X,"height")|assign(X,"price")|assign(X,"name")|assign(X,"city").
retum(X):-assign(X, "chair").
select(X):-retum(X).
```

unique_rules: 
['select(X):-assign(X, "chair").', 'retum(X):-assign(X, "chair").', 'select(X):-retum(X).']

parsed: 
select(X):-assign(X, "chair").
retum(X):-assign(X, "chair").

jaccard: 0.0


97
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "owner" and "lake". However, avoid any combination where predicate "owner" has label "wall".

answer from file: 
combination(X,Y):-owner(X, _),lake(Y), not owner(X, wall).

facts: 
owner(1..4, 1..4).lake(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "owner" and "lake". However, avoid any combination where predicate "owner" has label "wall".
Answer: combination(X,Y):-owner(X, _),lake(Y), not owner(X, wall).
combination(X,Y):-owner(X, _),lake(Y).
combination(X,Y):-owner(X, _),lake(Y), label(X, "name").
assign(X, Y)
retum(X, Y).
retum(X, Y), label(X, "name").
retum(X, Y), label(X, "price").
retum(X, Y), label(X, "age").
retum(X, Y), label(X, "description").
retum(X, Y), label(X, "height

unique_rules: 
['combination(X,Y):-owner(X, _),lake(Y), not owner(X, wall).', 'combination(X,Y):-owner(X, _),lake(Y).', 'combination(X,Y):-owner(X, _),lake(Y), label(X, "name").']

parsed: 
combination(X,Y):-owner(X, _),lake(Y), not owner(X, wall).

jaccard: 1.0


98
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "laptop" having fields "ID","surname","butterflyID", and the predicate "butterfly" having fields "ID","hair". Define a predicate "laptop_butterfly" that associates to each "laptop" the "hair" of "butterfly" only where "hair" is different than 64.

answer from file: 
laptop_butterfly(X,Z):-laptop(X,_,Y),butterfly(Y,Z), Z!=64.

facts: 
laptop("ID","surname","butterflyID").butterfly("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "laptop" having fields "ID","surname","butterflyID", and the predicate "butterfly" having fields "ID","hair". Define a predicate "laptop_butterfly" that associates to each "laptop" the "hair" of "butterfly" only where "hair" is different than 64.
Answer: laptop_ bréeder(X,Z):-laptop(X,_,Y),butterfly(Y,Z), Z!=64.
 assurent(X,Z):-laptop(X,_,Y),creator(Y,Z), Z!=64.
 auxquels(X,Z):- arrivant(X,Z),creator(Y,Z), Z!=64.
retum(X,Z):- arrivant(X,Z),creator(Y,Z), Z==64.
retum(X,Z):- arrivant(X,Z),creator(Y,Z), Z==71.
retum(X,Z):- arrivant(X,Z),creator(Y,Z), Z==72

unique_rules: 
['laptop_ bréeder(X,Z):-laptop(X,_,Y),butterfly(Y,Z), Z!=64.', 'assurent(X,Z):-laptop(X,_,Y),creator(Y,Z), Z!=64.', 'auxquels(X,Z):- arrivant(X,Z),creator(Y,Z), Z!=64.', 'retum(X,Z):- arrivant(X,Z),creator(Y,Z), Z==64.', 'retum(X,Z):- arrivant(X,Z),creator(Y,Z), Z==71.', 'retum(X,Z):- arrivant(X,Z),creator(Y,Z), Z==72.']

parsed: 
laptop_ bréeder(X,Z):-laptop(X,_,Y),butterfly(Y,Z), Z!=64.

jaccard: 0.0


99
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "desk" having fields "ID","owner","strengthID", and the predicate "strength" having fields "ID","lake". Define a predicate "desk_strength" that associates to each "desk", not associated with label "butterfly", the attribute "lake" of "strength".

answer from file: 
desk_strength(X,Z):-desk(X,_,Y),strength(Y,Z),not desk(X,butterfly,_).

facts: 
desk("ID","owner","strengthID").strength("ID","lake").

generated: 
Write an ASP program for the following problem. Consider predicate "desk" having fields "ID","owner","strengthID", and the predicate "strength" having fields "ID","lake". Define a predicate "desk_strength" that associates to each "desk", not associated with label "butterfly", the attribute "lake" of "strength".
Answer: desk_strength(X,Z):-desk(X,_,Y),strength(Y,Z),not desk(X,_,_).
 espressione(X,Z):-desk(X,_,Y),strength(Y,Z).
 espressione(X,_,Z):-desk(X,_,Y),not strength(Y,Z).
table(X,Z):- espressione(X,Z).
table(X,_,Z):- espressione(X,Z).
table(X,_,Z):-desk(X,_,Y),strength(Y,Z).
table(X,_,Z):-desk(X,_,Y),not strength(Y,Z).
retum(X,Z

unique_rules: 
['desk_strength(X,Z):-desk(X,_,Y),strength(Y,Z),not desk(X,_,_).', 'espressione(X,Z):-desk(X,_,Y),strength(Y,Z).', 'espressione(X,_,Z):-desk(X,_,Y),not strength(Y,Z).', 'table(X,Z):- espressione(X,Z).', 'table(X,_,Z):- espressione(X,Z).', 'table(X,_,Z):-desk(X,_,Y),strength(Y,Z).', 'table(X,_,Z):-desk(X,_,Y),not strength(Y,Z).']

parsed: 
desk_strength(X,Z):-desk(X,_,Y),strength(Y,Z),not desk(X,_,_).

jaccard: 1.0


100
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "black" as the transitive closure of predicate "mumbai". Then, assign exactly one label from the set wall,roof,cloud,chair,storm,flower to each element in "black".

answer from file: 
black(X,Y):-mumbai(X,Y).
black(X,Y):-mumbai(X,Z),black(Z,Y).
assign(X,"wall")|assign(X,"roof")|assign(X,"cloud")|assign(X,"chair")|assign(X,"storm")|assign(X,"flower"):-black(X,_).

facts: 
mumbai(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "black" as the transitive closure of predicate "mumbai". Then, assign exactly one label from the set wall,roof,cloud,chair,storm,flower to each element in "black".
Answer: black(X,Y):-mumbai(X,Y).
black(X,Y):-mumbai(X,Z),black(Z,Y).
assign(X,"wall")|assign(X,"roof")|assign(X,"cloud")|assign(X,"chair")|assign(X,"storm")|assign(X,"florence"):-black(X,_).
retum:assign(X,"florence").
retum:assign(X,"city").
retum:assign(X,"age").
retum:assign(X,"name").
retum:assign(X,"price").
retum:assign(X,"description").
retum:assign(X,"shape").


unique_rules: 
['black(X,Y):-mumbai(X,Y).', 'black(X,Y):-mumbai(X,Z),black(Z,Y).', 'assign(X,"wall")|assign(X,"roof")|assign(X,"cloud")|assign(X,"chair")|assign(X,"storm")|assign(X,"florence"):-black(X,_).']

parsed: 
black(X,Y):-mumbai(X,Y).
black(X,Y):-mumbai(X,Z),black(Z,Y).
assign(X,"wall")|assign(X,"roof")|assign(X,"cloud")|assign(X,"chair")|assign(X,"storm")|assign(X,"florence"):-black(X,_).

jaccard: 0.0


101
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate cosenza. The labels are desk,storm,wall,roof,laptop,butterfly,flower,cloud. Consider only the predicate cosenza not associated with label "butterfly".

answer from file: 
assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X,"roof")|assign(X,"laptop")|assign(X,"butterfly")|assign(X,"flower")|assign(X,"cloud"):-cosenza(X, _), not cosenza(X, butterfly).

facts: 
cosenza(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate cosenza. The labels are desk,storm,wall,roof,laptop,butterfly,flower,cloud. Consider only the predicate cosenza not associated with label "butterfly".
Answer: assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X,"roof")|assign(X,"laptop")|assign(X," arrivant")|assign(X,"author")|assign(X,"city")|assign(X,"description"):-cosenza(X, _), not cosenza(X, butterfly).
```
assign(X,"description") :-cosenza(X, _), not cosenza(X, butterfly).
```
Explanation:
The predicate "cosenza" has label "description", but not associated with label "author".
The predicate "description" has label "description", but not associated with label "author

unique_rules: 
['assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X,"roof")|assign(X,"laptop")|assign(X," arrivant")|assign(X,"author")|assign(X,"city")|assign(X,"description"):-cosenza(X, _), not cosenza(X, butterfly).', 'assign(X,"description") :-cosenza(X, _), not cosenza(X, butterfly).']

parsed: 
assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X,"roof")|assign(X,"laptop")|assign(X," arrivant")|assign(X,"author")|assign(X,"city")|assign(X,"description"):-cosenza(X, _), not cosenza(X, butterfly).

jaccard: 0.0


102
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate lake and labels weight, quality having label quality different than 65. The labels are chair,desk,storm,flower,cloud.

answer from file: 
assign(X,"chair")|assign(X,"desk")|assign(X,"storm")|assign(X,"flower")|assign(X,"cloud"):-lake(X, Y), Y!=65 .

facts: 
lake(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate lake and labels weight, quality having label quality different than 65. The labels are chair,desk,storm,flower,cloud.
Answer: assign(X,"chair")|assign(X,"desk")|assign(X,"storm")|assign(X,"flower")|assign(X,"cloud"):-lake(X, Y), Y!=65 .
```
assign(X,"name")|assign(X,"price")|assign(X,"age")|assign(X,"description"):-florence(X).
```
The predicate florence has label description, and the labels are price,age,description,city,shape,height,author,name,creator,age,description,city,price,height,author,name,description,creator,age,description,city,price,height,author,name,

unique_rules: 
['assign(X,"chair")|assign(X,"desk")|assign(X,"storm")|assign(X,"flower")|assign(X,"cloud"):-lake(X, Y), Y!=65 .', 'assign(X,"name")|assign(X,"price")|assign(X,"age")|assign(X,"description"):-florence(X).']

parsed: 
assign(X,"chair")|assign(X,"desk")|assign(X,"storm")|assign(X,"flower")|assign(X,"cloud"):-lake(X, Y), Y!=65 .

jaccard: 1.0


103
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate darkmagenta. The labels are storm,desk,laptop,butterfly,wall,cloud,flower,chair,roof.  Then, filter and return only the elements assigned to label butterfly.".

answer from file: 
assign(X,"storm")|assign(X,"desk")|assign(X,"laptop")|assign(X,"butterfly")|assign(X,"wall")|assign(X,"cloud")|assign(X,"flower")|assign(X,"chair")|assign(X,"roof"):-darkmagenta(X).
select(X):-assign(X, "butterfly").

facts: 
darkmagenta(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate darkmagenta. The labels are storm,desk,laptop,butterfly,wall,cloud,flower,chair,roof.  Then, filter and return only the elements assigned to label butterfly.".
Answer: assign(X,"storm")|assign(X,"desk")|assign(X,"laptop")|assign(X," arrivant")|assign(X,"wall")|assign(X,"cloud")|assign(X,"flower")|assign(X,"chair")|assign(X,"roof"):-darkMagenta(X).
select(X):-assign(X, " arrivant").
retum(X):-assign(X, "florence").
retum(X):-assign(X, "city").
retum(X):-assign(X, "name").
retum(X):-assign(X, "age").
retum(X):-assign(X, "description").
retum(X):-assign

unique_rules: 
['assign(X,"storm")|assign(X,"desk")|assign(X,"laptop")|assign(X," arrivant")|assign(X,"wall")|assign(X,"cloud")|assign(X,"flower")|assign(X,"chair")|assign(X,"roof"):-darkMagenta(X).', 'select(X):-assign(X, " arrivant").', 'retum(X):-assign(X, "florence").', 'retum(X):-assign(X, "city").', 'retum(X):-assign(X, "name").', 'retum(X):-assign(X, "age").', 'retum(X):-assign(X, "description").', 'retum(X):-assign.']

parsed: 
assign(X,"storm")|assign(X,"desk")|assign(X,"laptop")|assign(X," arrivant")|assign(X,"wall")|assign(X,"cloud")|assign(X,"flower")|assign(X,"chair")|assign(X,"roof"):-darkMagenta(X).
select(X):-assign(X, " arrivant").

jaccard: 0.0


104
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "quality" and "delhi". However, avoid any combination where predicate "quality" has label "laptop".

answer from file: 
combination(X,Y):-quality(X, _),delhi(Y), not quality(X, laptop).

facts: 
quality(1..4, 1..4).delhi(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "quality" and "delhi". However, avoid any combination where predicate "quality" has label "laptop".
Answer: combination(X,Y):-quality(X, _),delhi(Y), not quality(X, _).
combination(X,Y):-quality(X, _),delhi(Y).
assign(X, Y)
combination(X, Y).
retum.
assign(X, Y), not quality(X, _).
retum.
assign(X, Y), not delhi(Y).
retum.
assign(X, Y), not (quality(X, _), delhi(Y)).
retum.
assign(X, Y), not (quality(X, _), _).
retum.
assign(X, Y), not (quality(X

unique_rules: 
['combination(X,Y):-quality(X, _),delhi(Y), not quality(X, _).', 'combination(X,Y):-quality(X, _),delhi(Y).']

parsed: 
combination(X,Y):-quality(X, _),delhi(Y), not quality(X, _).

jaccard: 0.0


105
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "hair" having fields "ID","lightblueID","strength", and the predicate "lightblue" having fields "ID","hair". Define a predicate "hair_lightblue" that associates to each "hair" the "hair" of "lightblue" only where "hair" is different than 8.

answer from file: 
hair_lightblue(X,Z):-hair(X,Y,_),lightblue(Y,Z), Z!=8.

facts: 
hair("ID","lightblueID","strength").lightblue("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "hair" having fields "ID","lightblueID","strength", and the predicate "lightblue" having fields "ID","hair". Define a predicate "hair_lightblue" that associates to each "hair" the "hair" of "lightblue" only where "hair" is different than 8.
Answer: hair_lightblue(X,Z):-hair(X,Y,_),lightblue(Y,Z), Z!=8.
hair_lightblue(X,Y,_):-hair(X,Y,Z),lightblue(Y,Z), Z==8.
assign(X,Z):-hair(X,Y,_),lightblue(Y,Z), Z!=8.
 assurent(X,Z):-hair(X,Y,_),lightblue(Y,Z), Z==8.
 quí_ assurent(X,Z):-hair(X,Y,_),lightblue(Y,Z), Z==8.
 quí_ assurent(X,Z):-hair(X,

unique_rules: 
['hair_lightblue(X,Z):-hair(X,Y,_),lightblue(Y,Z), Z!=8.', 'hair_lightblue(X,Y,_):-hair(X,Y,Z),lightblue(Y,Z), Z==8.', 'assign(X,Z):-hair(X,Y,_),lightblue(Y,Z), Z!=8.', 'assurent(X,Z):-hair(X,Y,_),lightblue(Y,Z), Z==8.', 'quí_ assurent(X,Z):-hair(X,Y,_),lightblue(Y,Z), Z==8.', 'quí_ assurent(X,Z):-hair(X,.']

parsed: 
hair_lightblue(X,Z):-hair(X,Y,_),lightblue(Y,Z), Z!=8.

jaccard: 1.0


106
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "strength" having fields "ID","quality","lakeID", and the predicate "lake" having fields "ID","weight". Define a predicate "strength_lake" that associates to each "strength", not associated with label "roof", the attribute "weight" of "lake".

answer from file: 
strength_lake(X,Z):-strength(X,_,Y),lake(Y,Z),not strength(X,roof,_).

facts: 
strength("ID","quality","lakeID").lake("ID","weight").

generated: 
Write an ASP program for the following problem. Consider predicate "strength" having fields "ID","quality","lakeID", and the predicate "lake" having fields "ID","weight". Define a predicate "strength_lake" that associates to each "strength", not associated with label "roof", the attribute "weight" of "lake".
Answer: strength_lake(X,Z):-strength(X,_,Y),lake(Y,Z),not strength(X,roof,_).
 ángulo(X,Y):-strength(X,_,Y),lake(Y,Z).
 ángulo(X,Y,_):-strength(X,_,Y),lake(Y,Z).
 ángulo(X,_,_),not strength(X,_,_).
 ángulo(X,_,_),not lake(Y,Z).
 ángulo(X,_,_),not strength(X,_,_).
 ángulo(X,_,_),not lake(Y,Z).
 ángulo(X,_,_),not strength(X,

unique_rules: 
['strength_lake(X,Z):-strength(X,_,Y),lake(Y,Z),not strength(X,roof,_).', 'ángulo(X,Y):-strength(X,_,Y),lake(Y,Z).', 'ángulo(X,Y,_):-strength(X,_,Y),lake(Y,Z).']

parsed: 
strength_lake(X,Z):-strength(X,_,Y),lake(Y,Z),not strength(X,roof,_).

jaccard: 1.0


107
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "laptop" as the transitive closure of predicate "strength". Then, assign exactly one label from the set laptop,storm,cloud,butterfly,chair,flower to each element in "laptop".

answer from file: 
laptop(X,Y):-strength(X,Y).
laptop(X,Y):-strength(X,Z),laptop(Z,Y).
assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud")|assign(X,"butterfly")|assign(X,"chair")|assign(X,"flower"):-laptop(X,_).

facts: 
strength(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "laptop" as the transitive closure of predicate "strength". Then, assign exactly one label from the set laptop,storm,cloud,butterfly,chair,flower to each element in "laptop".
Answer: " arrivant"
 beden(" arrivant","height","city","name","description","price","age","author","creator","shape","descriptionID","cityID","priceID","nameID","description", "height", "author", "creator", "shape", "descriptionID", "city", "price", "age", "author", "creator", "shape", "description", "height", "author", "creator", "shape", "descriptionID", "city", "price", "age", "author", "creator", "shape", "description", "height", "author", "creator", "shape", "descriptionID", "city", "price", "age", "author", "creator", "shape

unique_rules: 
[]

parsed: 


jaccard: 0.0


108
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate chicago. The labels are flower,cloud,roof,chair,laptop,storm,wall. Consider only the predicate chicago not associated with label "flower".

answer from file: 
assign(X,"flower")|assign(X,"cloud")|assign(X,"roof")|assign(X,"chair")|assign(X,"laptop")|assign(X,"storm")|assign(X,"wall"):-chicago(X, _), not chicago(X, flower).

facts: 
chicago(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate chicago. The labels are flower,cloud,roof,chair,laptop,storm,wall. Consider only the predicate chicago not associated with label "flower".
Answer: assign(X,"flower")|assign(X,"cloud")|assign(X,"roof")|assign(X,"chair")|assign(X,"laptop")|assign(X,"storm")|assign(X,"wall"):-chicago(X, _), not chicago(X, flower).
```
assign(X,"city")|assign(X,"description")|assign(X,"price")|assign(X,"age")|assign(X,"name")|assign(X,"shape")|assign(X,"height")|assign(X,"author"):-florence(X).
```
The predicate florence has label "author", but not "description".
So, the

unique_rules: 
['assign(X,"flower")|assign(X,"cloud")|assign(X,"roof")|assign(X,"chair")|assign(X,"laptop")|assign(X,"storm")|assign(X,"wall"):-chicago(X, _), not chicago(X, flower).', 'assign(X,"city")|assign(X,"description")|assign(X,"price")|assign(X,"age")|assign(X,"name")|assign(X,"shape")|assign(X,"height")|assign(X,"author"):-florence(X).']

parsed: 
assign(X,"flower")|assign(X,"cloud")|assign(X,"roof")|assign(X,"chair")|assign(X,"laptop")|assign(X,"storm")|assign(X,"wall"):-chicago(X, _), not chicago(X, flower).

jaccard: 1.0


109
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate roof and labels quality, weight having label weight different than 40. The labels are chair,laptop,flower,storm.

answer from file: 
assign(X,"chair")|assign(X,"laptop")|assign(X,"flower")|assign(X,"storm"):-roof(X, Y), Y!=40 .

facts: 
roof(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate roof and labels quality, weight having label weight different than 40. The labels are chair,laptop,flower,storm.
Answer: assign(X,"chair")|assign(X,"laptop")|assign(X,"flower")|assign(X,"storm"):-roof(X, Y), Y!=40 .
```
Assign(X,"chair")|Assign(X,"laptop")|Assign(X,"flower")|Assign(X,"storm"):-roof(X, Y), Y!=40 .
```
The predicate roof has label "height", and the labels are description,price,age,city,shape,author,name,creator,height,age,description,price,city,name,shape,author,height,description,creator,age,name,price,city,description,height,creator

unique_rules: 
['assign(X,"chair")|assign(X,"laptop")|assign(X,"flower")|assign(X,"storm"):-roof(X, Y), Y!=40 .', 'Assign(X,"chair")|Assign(X,"laptop")|Assign(X,"flower")|Assign(X,"storm"):-roof(X, Y), Y!=40 .']

parsed: 
assign(X,"chair")|assign(X,"laptop")|assign(X,"flower")|assign(X,"storm"):-roof(X, Y), Y!=40 .

jaccard: 1.0


110
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate hair. The labels are roof,wall,cloud,desk.  Then, filter and return only the elements assigned to label roof.".

answer from file: 
assign(X,"roof")|assign(X,"wall")|assign(X,"cloud")|assign(X,"desk"):-hair(X).
select(X):-assign(X, "roof").

facts: 
hair(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate hair. The labels are roof,wall,cloud,desk.  Then, filter and return only the elements assigned to label roof.".
Answer: assign(X," felicità")|assign(X,"city")|assign(X,"height")|assign(X,"price")|assign(X,"author")==>hair(X).
select(X):-assign(X, " felicità").
retum(X):-assign(X, " felicità").
retum(X):-assign(X, "city").
retum(X):-assign(X, "height").
retum(X):-assign(X, "price").
retum(X):-assign(X, "author").
retum(X):-assign(X, "city").
retum(X):-assign(X, "height").
retum(X):-assign(X, "price").

unique_rules: 
['select(X):-assign(X, " felicità").', 'retum(X):-assign(X, " felicità").', 'retum(X):-assign(X, "city").', 'retum(X):-assign(X, "height").', 'retum(X):-assign(X, "price").', 'retum(X):-assign(X, "author").']

parsed: 
select(X):-assign(X, " felicità").
retum(X):-assign(X, " felicità").

jaccard: 0.0


111
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "hair" and "weight". However, avoid any combination where predicate "hair" has label "butterfly".

answer from file: 
combination(X,Y):-hair(X, _),weight(Y), not hair(X, butterfly).

facts: 
hair(1..4, 1..4).weight(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "hair" and "weight". However, avoid any combination where predicate "hair" has label "butterfly".
Answer: combination(X,Y):-hair(X, _),weight(Y), not hair(X, butterfly).
combination(X,Y):-hair(X, _),weight(Y).
combination(X,Y):-hair(X, _),weight(Y), label(X, "color").
assign(X, Y)
retum.
assign(X, Y)
retum.
assign(X, Y)
retum.
retum.
 quíntuple(X,Y):-combination(X,Y).
 quíntuple(X,Y):-combination(X,Y), label(X, "color").
 quíntuple(X,Y):-combination(X,

unique_rules: 
['combination(X,Y):-hair(X, _),weight(Y), not hair(X, butterfly).', 'combination(X,Y):-hair(X, _),weight(Y).', 'combination(X,Y):-hair(X, _),weight(Y), label(X, "color").', 'quíntuple(X,Y):-combination(X,Y).', 'quíntuple(X,Y):-combination(X,Y), label(X, "color").', 'quíntuple(X,Y):-combination(X,.']

parsed: 
combination(X,Y):-hair(X, _),weight(Y), not hair(X, butterfly).

jaccard: 1.0


112
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "toronto" having fields "ID","surname","cosenzaID", and the predicate "cosenza" having fields "ID","weight". Define a predicate "toronto_cosenza" that associates to each "toronto" the "weight" of "cosenza" only where "weight" is different than 74.

answer from file: 
toronto_cosenza(X,Z):-toronto(X,_,Y),cosenza(Y,Z), Z!=74.

facts: 
toronto("ID","surname","cosenzaID").cosenza("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "toronto" having fields "ID","surname","cosenzaID", and the predicate "cosenza" having fields "ID","weight". Define a predicate "toronto_cosenza" that associates to each "toronto" the "weight" of "cosenza" only where "weight" is different than 74.
Answer: toronto_cosenza(X,Z):-toronto(X,_,Y),cosenza(Y,Z), Z!=74.
 assurent(X,Y):-toronto(X,_,Y),cosenza(Y,Z), Z==74.
 ángulo(X,Y):-toronto(X,_,Y),cosenza(Y,Z), Z!=74.
 ángulo(X,Y):-toronto(X,_,Y),cosenza(Y,Z), Z==74.
 ángulo(X,Y):-toronto(X,_,Y),cosenza(Y,Z), Z==75.
 ángulo(X,Y):-toronto(X,

unique_rules: 
['toronto_cosenza(X,Z):-toronto(X,_,Y),cosenza(Y,Z), Z!=74.', 'assurent(X,Y):-toronto(X,_,Y),cosenza(Y,Z), Z==74.', 'ángulo(X,Y):-toronto(X,_,Y),cosenza(Y,Z), Z!=74.', 'ángulo(X,Y):-toronto(X,_,Y),cosenza(Y,Z), Z==74.', 'ángulo(X,Y):-toronto(X,_,Y),cosenza(Y,Z), Z==75.', 'ángulo(X,Y):-toronto(X,.']

parsed: 
toronto_cosenza(X,Z):-toronto(X,_,Y),cosenza(Y,Z), Z!=74.

jaccard: 1.0


113
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "flower" having fields "ID","weight","stormID", and the predicate "storm" having fields "ID","owner". Define a predicate "flower_storm" that associates to each "flower", not associated with label "storm", the attribute "owner" of "storm".

answer from file: 
flower_storm(X,Z):-flower(X,_,Y),storm(Y,Z),not flower(X,storm,_).

facts: 
flower("ID","weight","stormID").storm("ID","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "flower" having fields "ID","weight","stormID", and the predicate "storm" having fields "ID","owner". Define a predicate "flower_storm" that associates to each "flower", not associated with label "storm", the attribute "owner" of "storm".
Answer: flower_storm(X,Z):-flower(X,_,Y),storm(Y,Z),not flower(X,storm,_).
 assurent(X,Y):-flower(X,_,Y),not flower(X,_,_).
 ángulo(X,Y):-flower(X,_,Y),not storm(Y,Z).
 ángulo(X,Y):-flower(X,_,Y),storm(Y,Z).
 ángulo(X,Y):-flower(X,_,Y),not flower(X,_,_).
 ángulo(X,Y):-flower(X,_,Y),name(X,_,Z),not flower(X,_,Z).

unique_rules: 
['flower_storm(X,Z):-flower(X,_,Y),storm(Y,Z),not flower(X,storm,_).', 'assurent(X,Y):-flower(X,_,Y),not flower(X,_,_).', 'ángulo(X,Y):-flower(X,_,Y),not storm(Y,Z).', 'ángulo(X,Y):-flower(X,_,Y),storm(Y,Z).', 'ángulo(X,Y):-flower(X,_,Y),not flower(X,_,_).', 'ángulo(X,Y):-flower(X,_,Y),name(X,_,Z),not flower(X,_,Z).']

parsed: 
flower_storm(X,Z):-flower(X,_,Y),storm(Y,Z),not flower(X,storm,_).

jaccard: 1.0


114
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "delhi" as the transitive closure of predicate "moscow". Then, assign exactly one label from the set cloud,flower,wall,butterfly,desk to each element in "delhi".

answer from file: 
delhi(X,Y):-moscow(X,Y).
delhi(X,Y):-moscow(X,Z),delhi(Z,Y).
assign(X,"cloud")|assign(X,"flower")|assign(X,"wall")|assign(X,"butterfly")|assign(X,"desk"):-delhi(X,_).

facts: 
moscow(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "delhi" as the transitive closure of predicate "moscow". Then, assign exactly one label from the set cloud,flower,wall,butterfly,desk to each element in "delhi".
Answer: delhi(X,Y):-moscow(X,Y).
delhi(X,Y):-moscow(X,Z),delhi(Z,Y).
assign(X,"cloud")|assign(X,"flower")|assign(X,"wall")|assign(X," épar")|assign(X,"desk"):-delhi(X,_).
retum(X,Y):-delhi(X,Y).
retum(X,Y):-delhi(X,Z),retum(Z,Y).
retum(X,Y):-delhi(X,Z),retum(Z,Y).
retum(X,Y):-delhi(X,Z),retum

unique_rules: 
['delhi(X,Y):-moscow(X,Y).', 'delhi(X,Y):-moscow(X,Z),delhi(Z,Y).', 'assign(X,"cloud")|assign(X,"flower")|assign(X,"wall")|assign(X," épar")|assign(X,"desk"):-delhi(X,_).', 'retum(X,Y):-delhi(X,Y).', 'retum(X,Y):-delhi(X,Z),retum(Z,Y).', 'retum(X,Y):-delhi(X,Z),retum.']

parsed: 
delhi(X,Y):-moscow(X,Y).
delhi(X,Y):-moscow(X,Z),delhi(Z,Y).
assign(X,"cloud")|assign(X,"flower")|assign(X,"wall")|assign(X," épar")|assign(X,"desk"):-delhi(X,_).

jaccard: 1.0


115
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate storm. The labels are flower,chair,roof,cloud,butterfly,storm,laptop,wall. Consider only the predicate storm not associated with label "wall".

answer from file: 
assign(X,"flower")|assign(X,"chair")|assign(X,"roof")|assign(X,"cloud")|assign(X,"butterfly")|assign(X,"storm")|assign(X,"laptop")|assign(X,"wall"):-storm(X, _), not storm(X, wall).

facts: 
storm(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate storm. The labels are flower,chair,roof,cloud,butterfly,storm,laptop,wall. Consider only the predicate storm not associated with label "wall".
Answer: assign(X,"flower")|assign(X,"chair")|assign(X,"roof")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"shape")|assign(X,"city")|assign(X,"description")|assign(X,"name")|assign(X,"age"):-storm(X, _), not storm(X, wall).
```
assign(X,"name")|assign(X,"age"):-storm(X, _), not storm(X, wall).
```
The predicate "florence" has label "description", but not "name".
The predicate "shape" has label "description", but not "name

unique_rules: 
['assign(X,"flower")|assign(X,"chair")|assign(X,"roof")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"shape")|assign(X,"city")|assign(X,"description")|assign(X,"name")|assign(X,"age"):-storm(X, _), not storm(X, wall).', 'assign(X,"name")|assign(X,"age"):-storm(X, _), not storm(X, wall).']

parsed: 
assign(X,"flower")|assign(X,"chair")|assign(X,"roof")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"shape")|assign(X,"city")|assign(X,"description")|assign(X,"name")|assign(X,"age"):-storm(X, _), not storm(X, wall).

jaccard: 0.0


116
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate flower and labels weight, owner having label owner different than 11. The labels are flower,chair,storm,butterfly,cloud.

answer from file: 
assign(X,"flower")|assign(X,"chair")|assign(X,"storm")|assign(X,"butterfly")|assign(X,"cloud"):-flower(X, Y), Y!=11 .

facts: 
flower(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate flower and labels weight, owner having label owner different than 11. The labels are flower,chair,storm,butterfly,cloud.
Answer: assign(X,"flower")|assign(X,"chair")|assign(X,"storm")|assign(X," arrivant")|assign(X,"cloud"):-flower(X, Y), Y!=11 .
```
Assign(X,"florence")|Assign(X,"price")|Assign(X,"city")|Assign(X,"age"):-florence(X, Y), Y!=11 .
```
The labels are description,price,age,city,author,height,name,shape,creator,age,description,price,city,name,height,author,shape,description,creator,age,description,price,city,name,height,author

unique_rules: 
['assign(X,"flower")|assign(X,"chair")|assign(X,"storm")|assign(X," arrivant")|assign(X,"cloud"):-flower(X, Y), Y!=11 .', 'Assign(X,"florence")|Assign(X,"price")|Assign(X,"city")|Assign(X,"age"):-florence(X, Y), Y!=11 .']

parsed: 
assign(X,"flower")|assign(X,"chair")|assign(X,"storm")|assign(X," arrivant")|assign(X,"cloud"):-flower(X, Y), Y!=11 .

jaccard: 1.0


117
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate pink. The labels are laptop,butterfly,storm,cloud.  Then, filter and return only the elements assigned to label storm.".

answer from file: 
assign(X,"laptop")|assign(X,"butterfly")|assign(X,"storm")|assign(X,"cloud"):-pink(X).
select(X):-assign(X, "storm").

facts: 
pink(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate pink. The labels are laptop,butterfly,storm,cloud.  Then, filter and return only the elements assigned to label storm.".
Answer: assign(X," arrivant")|assign(X,"height")|assign(X,"city")|assign(X,"name")|assign(X,"age")| espressione(X, "height")
select(X):-assign(X, "height").
retum(X):-assign(X, "height").
retum(X):-assign(X, "name").
retum(X):-assign(X, "age").
retum(X):-assign(X, "city").
 espressione(X, "height").
```
The predicate "pink" has label "height", and the predicate "retum" has label "height".
So, the predicate "retum" has label "height"

unique_rules: 
['select(X):-assign(X, "height").', 'retum(X):-assign(X, "height").', 'retum(X):-assign(X, "name").', 'retum(X):-assign(X, "age").', 'retum(X):-assign(X, "city").']

parsed: 
select(X):-assign(X, "height").
retum(X):-assign(X, "height").

jaccard: 0.0


118
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "cairo" and "delhi". However, avoid any combination where predicate "cairo" has label "wall".

answer from file: 
combination(X,Y):-cairo(X, _),delhi(Y), not cairo(X, wall).

facts: 
cairo(1..4, 1..4).delhi(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "cairo" and "delhi". However, avoid any combination where predicate "cairo" has label "wall".
Answer: combination(X,Y):-cairo(X, _),delhi(Y), not cairo(X, wall).
combination(X,Y):-cairo(X, _),delhi(Y).
combination(X,Y):-cairo(X, _),delhi(Y), label(X, "name").
assign(X, Y)
retum(X, Y).
retum(X, Y), label(X, "name").
retum(X, Y), label(X, "price").
retum(X, Y), label(X, "age").
retum(X, Y), label(X, "description").
retum(X, Y), label(

unique_rules: 
['combination(X,Y):-cairo(X, _),delhi(Y), not cairo(X, wall).', 'combination(X,Y):-cairo(X, _),delhi(Y).', 'combination(X,Y):-cairo(X, _),delhi(Y), label(X, "name").']

parsed: 
combination(X,Y):-cairo(X, _),delhi(Y), not cairo(X, wall).

jaccard: 1.0


119
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "desk" having fields "ID","roofID","quality", and the predicate "roof" having fields "ID","surname". Define a predicate "desk_roof" that associates to each "desk" the "surname" of "roof" only where "surname" is different than 9.

answer from file: 
desk_roof(X,Z):-desk(X,Y,_),roof(Y,Z), Z!=9.

facts: 
desk("ID","roofID","quality").roof("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "desk" having fields "ID","roofID","quality", and the predicate "roof" having fields "ID","surname". Define a predicate "desk_roof" that associates to each "desk" the "surname" of "roof" only where "surname" is different than 9.
Answer: desk_roof(X,Z):-desk(X,Y,_),roof(Y,Z), Z!=9.
 espressione(X,Z):-desk(X,Y,_),roof(Y,Z), Z==9.
 venant(X,Z):-desk(X,Y,_),roof(Y,Z).
 ángulo(X,Y,Z):-desk(X,Y,_),roof(Y,Z), Z!=9.
 ángulo(X,Y,Z):-desk(X,Y,_),roof(Y,Z), Z==9.
 ángulo(X,Y,Z):-desk(X,Y,_),roof(Y,Z), Z

unique_rules: 
['desk_roof(X,Z):-desk(X,Y,_),roof(Y,Z), Z!=9.', 'espressione(X,Z):-desk(X,Y,_),roof(Y,Z), Z==9.', 'venant(X,Z):-desk(X,Y,_),roof(Y,Z).', 'ángulo(X,Y,Z):-desk(X,Y,_),roof(Y,Z), Z!=9.', 'ángulo(X,Y,Z):-desk(X,Y,_),roof(Y,Z), Z==9.', 'ángulo(X,Y,Z):-desk(X,Y,_),roof(Y,Z), Z.']

parsed: 
desk_roof(X,Z):-desk(X,Y,_),roof(Y,Z), Z!=9.

jaccard: 1.0


120
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "quality" having fields "ID","surnameID","hair", and the predicate "surname" having fields "ID","owner". Define a predicate "quality_surname" that associates to each "quality", not associated with label "roof", the attribute "owner" of "surname".

answer from file: 
quality_surname(X,Z):-quality(X,Y,_),surname(Y,Z),not quality(X,_,roof).

facts: 
quality("ID","surnameID","hair").surname("ID","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "quality" having fields "ID","surnameID","hair", and the predicate "surname" having fields "ID","owner". Define a predicate "quality_surname" that associates to each "quality", not associated with label "roof", the attribute "owner" of "surname".
Answer: quality_name(X,Z):-quality(X,Y,_),surname(Y,Z),not quality(X,_,roof).
 ángulo(X,Y,Z):-quality(X,Y,_), ángulo(Y,_,Z).
 ángulo(X,Y,Z):-quality(X,_,_),creator(Y,Z).
 ángulo(X,Y,Z):-quality(X,_,_),creator(Y,Z),height(Z,1).
 ángulo(X,Y,Z):-quality(X,_,_),creator(Y,Z),height(Z,2).
 ángulo(X,Y,Z):-quality(X,_,

unique_rules: 
['quality_name(X,Z):-quality(X,Y,_),surname(Y,Z),not quality(X,_,roof).', 'ángulo(X,Y,Z):-quality(X,Y,_), ángulo(Y,_,Z).', 'ángulo(X,Y,Z):-quality(X,_,_),creator(Y,Z).', 'ángulo(X,Y,Z):-quality(X,_,_),creator(Y,Z),height(Z,1).', 'ángulo(X,Y,Z):-quality(X,_,_),creator(Y,Z),height(Z,2).', 'ángulo(X,Y,Z):-quality(X,_,.']

parsed: 
quality_name(X,Z):-quality(X,Y,_),surname(Y,Z),not quality(X,_,roof).

jaccard: 1.0


121
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "toronto" as the transitive closure of predicate "black". Then, assign exactly one label from the set laptop,roof,butterfly,cloud,wall to each element in "toronto".

answer from file: 
toronto(X,Y):-black(X,Y).
toronto(X,Y):-black(X,Z),toronto(Z,Y).
assign(X,"laptop")|assign(X,"roof")|assign(X,"butterfly")|assign(X,"cloud")|assign(X,"wall"):-toronto(X,_).

facts: 
black(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "toronto" as the transitive closure of predicate "black". Then, assign exactly one label from the set laptop,roof,butterfly,cloud,wall to each element in "toronto".
Answer: toronto(X,Y):-black(X,Y).
toronto(X,Y):-black(X,Z),toronto(Z,Y).
assign(X,"laptop")|assign(X,"roof")|assign(X," éparchement")|assign(X,"cloud")|assign(X,"wall"):-toronto(X,_).
retum(X,Y):-black(X,Y).
retum(X,Y):-black(X,Z),retum(Z,Y).
retum(X,Y):-black(X,Z),retum(Z,Y).
retum(X,Y):-black(X,Z),retum(Z,Y),city(X,

unique_rules: 
['toronto(X,Y):-black(X,Y).', 'toronto(X,Y):-black(X,Z),toronto(Z,Y).', 'assign(X,"laptop")|assign(X,"roof")|assign(X," éparchement")|assign(X,"cloud")|assign(X,"wall"):-toronto(X,_).', 'retum(X,Y):-black(X,Y).', 'retum(X,Y):-black(X,Z),retum(Z,Y).', 'retum(X,Y):-black(X,Z),retum(Z,Y),city(X,.']

parsed: 
toronto(X,Y):-black(X,Y).
toronto(X,Y):-black(X,Z),toronto(Z,Y).
assign(X,"laptop")|assign(X,"roof")|assign(X," éparchement")|assign(X,"cloud")|assign(X,"wall"):-toronto(X,_).

jaccard: 1.0


122
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate laptop. The labels are flower,wall,desk,butterfly,laptop. Consider only the predicate laptop not associated with label "wall".

answer from file: 
assign(X,"flower")|assign(X,"wall")|assign(X,"desk")|assign(X,"butterfly")|assign(X,"laptop"):-laptop(X, _), not laptop(X, wall).

facts: 
laptop(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate laptop. The labels are flower,wall,desk,butterfly,laptop. Consider only the predicate laptop not associated with label "wall".
Answer: assign(X,"flower")|assign(X,"wall")|assign(X,"desk")|assign(X," arrivant")|assign(X,"name")|assign(X,"city"):-laptop(X, _), not laptop(X, wall).
``` italienne
assign(X,"name")|assign(X,"city"):-laptop(X, _), not laptop(X, wall).
```

unique_rules: 
['assign(X,"flower")|assign(X,"wall")|assign(X,"desk")|assign(X," arrivant")|assign(X,"name")|assign(X,"city"):-laptop(X, _), not laptop(X, wall).', 'assign(X,"name")|assign(X,"city"):-laptop(X, _), not laptop(X, wall).']

parsed: 
assign(X,"flower")|assign(X,"wall")|assign(X,"desk")|assign(X," arrivant")|assign(X,"name")|assign(X,"city"):-laptop(X, _), not laptop(X, wall).

jaccard: 0.0


123
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate pink and labels hair, hair having label hair different than 5. The labels are storm,roof,chair.

answer from file: 
assign(X,"storm")|assign(X,"roof")|assign(X,"chair"):-pink(X, Y), Y!=5 .

facts: 
pink(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate pink and labels hair, hair having label hair different than 5. The labels are storm,roof,chair.
Answer: assign(X," peines")|assign(X,"florence")|assign(X,"height") :-pink(X, Y), Y!=5 .
Assign(X,"florence")|assign(X,"height")|assign(X,"price") :-florence(X).
Assign(X,"price")|assign(X,"height")|assign(X,"age") :-price(X).
Assign(X,"age")|assign(X,"price")|assign(X,"height") :-age(X).
Assign(X,"height")|assign(X,"price")|assign(X,"age") :-height(X).
Assign(X

unique_rules: 
['assign(X," peines")|assign(X,"florence")|assign(X,"height") :-pink(X, Y), Y!=5 .', 'Assign(X,"florence")|assign(X,"height")|assign(X,"price") :-florence(X).', 'Assign(X,"price")|assign(X,"height")|assign(X,"age") :-price(X).', 'Assign(X,"age")|assign(X,"price")|assign(X,"height") :-age(X).', 'Assign(X,"height")|assign(X,"price")|assign(X,"age") :-height(X).']

parsed: 
assign(X," peines")|assign(X,"florence")|assign(X,"height") :-pink(X, Y), Y!=5 .

jaccard: 0.0


124
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate strength. The labels are flower,chair,butterfly,roof,laptop.  Then, filter and return only the elements assigned to label laptop.".

answer from file: 
assign(X,"flower")|assign(X,"chair")|assign(X,"butterfly")|assign(X,"roof")|assign(X,"laptop"):-strength(X).
select(X):-assign(X, "laptop").

facts: 
strength(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate strength. The labels are flower,chair,butterfly,roof,laptop.  Then, filter and return only the elements assigned to label laptop.".
Answer: assign(X,"flower")|assign(X,"chair")|assign(X," arrivant")|assign(X," felicità")|assign(X,"shape")|assign(X,"city")|assign(X,"author")|retum(X, "laptop").
select(X):-assign(X, "author").
retum(X, "author").
```
The predicate "strength" has label "author", and the predicate "author" has label "author". So, the predicate "retum" has label "author".
The predicate "retum" has label "author", and the predicate "author" has label "author". So, the predicate "retum" has label "author".


unique_rules: 
['select(X):-assign(X, "author").']

parsed: 
select(X):-assign(X, "author").

jaccard: 0.0


125
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "barcelona" and "darkmagenta". However, avoid any combination where predicate "barcelona" has label "roof".

answer from file: 
combination(X,Y):-barcelona(X, _),darkmagenta(Y), not barcelona(X, roof).

facts: 
barcelona(1..4, 1..4).darkmagenta(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "barcelona" and "darkmagenta". However, avoid any combination where predicate "barcelona" has label "roof".
Answer: combination(X,Y):-barcelona(X, _),darkmagenta(Y), not barcelona(X, roof).
combination(X,Y):-barcelona(X, _),darkmagenta(Y).
combination(X,Y):-barcelona(X, _),darkmagenta(Y), roof.
```
Combinations are expressed by predicate "combination".
However, avoid any combination where predicate "rome" has label "height".
```
Combinations(X,Y):-combination(X,Y).
Combinations(X,Y):-combination(X,Y),height.
```
Then, filter and return only the combinations where predicate "rome" has label "height".
```
Combin

unique_rules: 
['combination(X,Y):-barcelona(X, _),darkmagenta(Y), not barcelona(X, roof).', 'combination(X,Y):-barcelona(X, _),darkmagenta(Y).', 'combination(X,Y):-barcelona(X, _),darkmagenta(Y), roof.', 'Combinations(X,Y):-combination(X,Y).', 'Combinations(X,Y):-combination(X,Y),height.']

parsed: 
combination(X,Y):-barcelona(X, _),darkmagenta(Y), not barcelona(X, roof).

jaccard: 1.0


126
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "lake" having fields "ID","hair","laptopID", and the predicate "laptop" having fields "ID","lake". Define a predicate "lake_laptop" that associates to each "lake" the "lake" of "laptop" only where "lake" is different than 35.

answer from file: 
lake_laptop(X,Z):-lake(X,_,Y),laptop(Y,Z), Z!=35.

facts: 
lake("ID","hair","laptopID").laptop("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "lake" having fields "ID","hair","laptopID", and the predicate "laptop" having fields "ID","lake". Define a predicate "lake_laptop" that associates to each "lake" the "lake" of "laptop" only where "lake" is different than 35.
Answer: lake_laptop(X,Z):-lake(X,_,Y),laptop(Y,Z), Z!=35.
lake_laptop(X,_,Y):-lake(X,Y,_),laptop(Y,Z), Z==35.
retum(X,Y):-lake(X,_,Y),age(Y,_,Z), Z!=35.
retum(X,Y,Z):-lake(X,_,Y),age(Y,_,Z), Z==35.
retum(X,_,Z):-lake(X,_,Y),age(Y,_,Z), Z==35.
retum(X,_,Z):-lake(X,

unique_rules: 
['lake_laptop(X,Z):-lake(X,_,Y),laptop(Y,Z), Z!=35.', 'lake_laptop(X,_,Y):-lake(X,Y,_),laptop(Y,Z), Z==35.', 'retum(X,Y):-lake(X,_,Y),age(Y,_,Z), Z!=35.', 'retum(X,Y,Z):-lake(X,_,Y),age(Y,_,Z), Z==35.', 'retum(X,_,Z):-lake(X,_,Y),age(Y,_,Z), Z==35.', 'retum(X,_,Z):-lake(X,.']

parsed: 
lake_laptop(X,Z):-lake(X,_,Y),laptop(Y,Z), Z!=35.

jaccard: 1.0


127
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "lightblue" having fields "ID","weight","butterflyID", and the predicate "butterfly" having fields "ID","strength". Define a predicate "lightblue_butterfly" that associates to each "lightblue", not associated with label "chair", the attribute "strength" of "butterfly".

answer from file: 
lightblue_butterfly(X,Z):-lightblue(X,_,Y),butterfly(Y,Z),not lightblue(X,chair,_).

facts: 
lightblue("ID","weight","butterflyID").butterfly("ID","strength").

generated: 
Write an ASP program for the following problem. Consider predicate "lightblue" having fields "ID","weight","butterflyID", and the predicate "butterfly" having fields "ID","strength". Define a predicate "lightblue_butterfly" that associates to each "lightblue", not associated with label "chair", the attribute "strength" of "butterfly".
Answer: lightblue_ bréeder(X,Z):-lightblue(X,_,Y),butterfly(Y,Z),not lightblue(X,chair,_).
lightblue_ bréeder(X,_,Y):-lightblue(X,_,Y),creator(Y,Z),not lightblue(X,chair,_).
assign(X,lightblue_ bréeder(X,_,Z))|assign(X,lightblue_ bréeder(X,_,Z)).
retum(X).
retum(X,chair,_).
retum(X,_,creator).
retum(X,_,Z),creator(Y,Z).
retum(X,_,_),creator(Y,

unique_rules: 
['lightblue_ bréeder(X,Z):-lightblue(X,_,Y),butterfly(Y,Z),not lightblue(X,chair,_).', 'lightblue_ bréeder(X,_,Y):-lightblue(X,_,Y),creator(Y,Z),not lightblue(X,chair,_).']

parsed: 
lightblue_ bréeder(X,Z):-lightblue(X,_,Y),butterfly(Y,Z),not lightblue(X,chair,_).

jaccard: 0.0


128
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "chicago" as the transitive closure of predicate "wall". Then, assign exactly one label from the set chair,storm to each element in "chicago".

answer from file: 
chicago(X,Y):-wall(X,Y).
chicago(X,Y):-wall(X,Z),chicago(Z,Y).
assign(X,"chair")|assign(X,"storm"):-chicago(X,_).

facts: 
wall(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "chicago" as the transitive closure of predicate "wall". Then, assign exactly one label from the set chair,storm to each element in "chicago".
Answer: chicago(X,Y):-wall(X,Y).
chicago(X,Y):-wall(X,Z),chicago(Z,Y).
assign(X,"chair")|assign(X,"storm"):-chicago(X,_).
retum(X,Y):-assign(X,Y).
retum(X,Y):-assign(X,Z),retum(Z,Y).
retum(X,Y):-assign(X,Z),retum(Z,Y).
retum(X,Y):-assign(X,Z),retum(Z,Y),creator(X,Y).
creator(X,Y):-assign(X,Y),creator(Y,Z),retum

unique_rules: 
['chicago(X,Y):-wall(X,Y).', 'chicago(X,Y):-wall(X,Z),chicago(Z,Y).', 'assign(X,"chair")|assign(X,"storm"):-chicago(X,_).', 'retum(X,Y):-assign(X,Y).', 'retum(X,Y):-assign(X,Z),retum(Z,Y).', 'retum(X,Y):-assign(X,Z),retum(Z,Y),creator(X,Y).', 'creator(X,Y):-assign(X,Y),creator(Y,Z),retum.']

parsed: 
chicago(X,Y):-wall(X,Y).
chicago(X,Y):-wall(X,Z),chicago(Z,Y).
assign(X,"chair")|assign(X,"storm"):-chicago(X,_).

jaccard: 1.0


129
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate quality. The labels are butterfly,laptop,storm,chair,cloud. Consider only the predicate quality not associated with label "desk".

answer from file: 
assign(X,"butterfly")|assign(X,"laptop")|assign(X,"storm")|assign(X,"chair")|assign(X,"cloud"):-quality(X, _), not quality(X, desk).

facts: 
quality(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate quality. The labels are butterfly,laptop,storm,chair,cloud. Consider only the predicate quality not associated with label "desk".
Answer: assign(X," originaux")|assign(X,"description")|assign(X,"city")|assign(X,"name")|assign(X,"price")|assign(X,"age")| espressione(X, Y), Y!=desk .
retum(X, Y), Y!=desk .
 köp(X, Y), Y!=desk .
assign(X,"description")|assign(X,"city")|assign(X,"name")|assign(X,"price")|assign(X,"age")| espressione(X, Y), Y!=desk .
retum(X, Y), Y!=desk .
 köp(X, Y), Y!=desk .
assign(X,"

unique_rules: 
[]

parsed: 


jaccard: 0.0


130
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate delhi and labels quality, lake having label lake different than 8. The labels are laptop,wall,chair,butterfly,cloud,desk,storm.

answer from file: 
assign(X,"laptop")|assign(X,"wall")|assign(X,"chair")|assign(X,"butterfly")|assign(X,"cloud")|assign(X,"desk")|assign(X,"storm"):-delhi(X, Y), Y!=8 .

facts: 
delhi(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate delhi and labels quality, lake having label lake different than 8. The labels are laptop,wall,chair,butterfly,cloud,desk,storm.
Answer: assign(X,"laptop")|assign(X,"wall")|assign(X,"chair")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"desk")|assign(X,"storm"):-tokyo(X, Y), Y!=8 .
Assign(X,"city")|Assign(X,"age")|Assign(X,"description"):-element(X, Y), Y!=8 .
The labels are description,price,city,age,shape,height,author,name,creator,age,description,price,city,height,name,shape,description,creator,age,description,price,city,height,name,shape,description,

unique_rules: 
['assign(X,"laptop")|assign(X,"wall")|assign(X,"chair")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"desk")|assign(X,"storm"):-tokyo(X, Y), Y!=8 .', 'Assign(X,"city")|Assign(X,"age")|Assign(X,"description"):-element(X, Y), Y!=8 .']

parsed: 
assign(X,"laptop")|assign(X,"wall")|assign(X,"chair")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"desk")|assign(X,"storm"):-tokyo(X, Y), Y!=8 .

jaccard: 0.0


131
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are desk,flower,laptop,storm.  Then, filter and return only the elements assigned to label desk.".

answer from file: 
assign(X,"desk")|assign(X,"flower")|assign(X,"laptop")|assign(X,"storm"):-lake(X).
select(X):-assign(X, "desk").

facts: 
lake(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are desk,flower,laptop,storm.  Then, filter and return only the elements assigned to label desk.".
Answer: assign(X,"desk")|assign(X,"flower")|assign(X,"laptop")|assign(X,"storm"):-lake(X).
select(X):-assign(X, "desk").
retum(X):-assign(X, "age").
retum(X):-assign(X, "description").
retum(X):-assign(X, "height").
retum(X):-assign(X, "price").
retum(X):-assign(X, "author").
retum(X):-assign(X, "city").
retum(X):-assign(X, "age").
retum(X):-assign(X, "description").
retum(X):-assign(

unique_rules: 
['assign(X,"desk")|assign(X,"flower")|assign(X,"laptop")|assign(X,"storm"):-lake(X).', 'select(X):-assign(X, "desk").', 'retum(X):-assign(X, "age").', 'retum(X):-assign(X, "description").', 'retum(X):-assign(X, "height").', 'retum(X):-assign(X, "price").', 'retum(X):-assign(X, "author").', 'retum(X):-assign(X, "city").', 'retum(X):-assign(.']

parsed: 
assign(X,"desk")|assign(X,"flower")|assign(X,"laptop")|assign(X,"storm"):-lake(X).
select(X):-assign(X, "desk").

jaccard: 1.0


132
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "white" and "cairo". However, avoid any combination where predicate "white" has label "wall".

answer from file: 
combination(X,Y):-white(X, _),cairo(Y), not white(X, wall).

facts: 
white(1..4, 1..4).cairo(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "white" and "cairo". However, avoid any combination where predicate "white" has label "wall".
Answer: combination(X,Y):-white(X),cairo(Y), not white(X,wall).
combination(X,Y):-white(X),cairo(Y).
combination(X,Y):-white(X),city(Y).
assign(X,Y):-white(X),city(Y), not white(X,wall).
assign(X,Y):-white(X),city(Y), label(X,moto).
assign(X,Y):-white(X),city(Y), label(X,price).
assign(X,Y):-white(X),city(Y), label(X,description).
retum(X,Y):-combination(X,

unique_rules: 
['combination(X,Y):-white(X),cairo(Y), not white(X,wall).', 'combination(X,Y):-white(X),cairo(Y).', 'combination(X,Y):-white(X),city(Y).', 'assign(X,Y):-white(X),city(Y), not white(X,wall).', 'assign(X,Y):-white(X),city(Y), label(X,moto).', 'assign(X,Y):-white(X),city(Y), label(X,price).', 'assign(X,Y):-white(X),city(Y), label(X,description).', 'retum(X,Y):-combination(X,.']

parsed: 
combination(X,Y):-white(X),cairo(Y), not white(X,wall).

jaccard: 0.0


133
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "laptop" having fields "ID","surname","butterflyID", and the predicate "butterfly" having fields "ID","hair". Define a predicate "laptop_butterfly" that associates to each "laptop" the "hair" of "butterfly" only where "hair" is different than 64.

answer from file: 
laptop_butterfly(X,Z):-laptop(X,_,Y),butterfly(Y,Z), Z!=64.

facts: 
laptop("ID","surname","butterflyID").butterfly("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "laptop" having fields "ID","surname","butterflyID", and the predicate "butterfly" having fields "ID","hair". Define a predicate "laptop_butterfly" that associates to each "laptop" the "hair" of "butterfly" only where "hair" is different than 64.
Answer: laptop_ bréeder(X,Z):-laptop(X,_,Y),butterfly(Y,Z), Z!=64.
 assurent(X,Z):-laptop(X,_,Y),creator(Y,Z), Z!=64.
 auxquels(X,Z):-laptop(X,_,Y),creator(Y,Z), Z!=64.
retum(X,Z):-laptop(X,_,Y),creator(Y,Z), Z==64.
retum(X,Z):-creator(Y,Z), Z==64.
retum(X,Z):-creator(Y,Z), Z!=64,shape(X,Z).
retum(

unique_rules: 
['laptop_ bréeder(X,Z):-laptop(X,_,Y),butterfly(Y,Z), Z!=64.', 'assurent(X,Z):-laptop(X,_,Y),creator(Y,Z), Z!=64.', 'auxquels(X,Z):-laptop(X,_,Y),creator(Y,Z), Z!=64.', 'retum(X,Z):-laptop(X,_,Y),creator(Y,Z), Z==64.', 'retum(X,Z):-creator(Y,Z), Z==64.', 'retum(X,Z):-creator(Y,Z), Z!=64,shape(X,Z).']

parsed: 
laptop_ bréeder(X,Z):-laptop(X,_,Y),butterfly(Y,Z), Z!=64.

jaccard: 0.0


134
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "desk" having fields "ID","owner","strengthID", and the predicate "strength" having fields "ID","lake". Define a predicate "desk_strength" that associates to each "desk", not associated with label "butterfly", the attribute "lake" of "strength".

answer from file: 
desk_strength(X,Z):-desk(X,_,Y),strength(Y,Z),not desk(X,butterfly,_).

facts: 
desk("ID","owner","strengthID").strength("ID","lake").

generated: 
Write an ASP program for the following problem. Consider predicate "desk" having fields "ID","owner","strengthID", and the predicate "strength" having fields "ID","lake". Define a predicate "desk_strength" that associates to each "desk", not associated with label "butterfly", the attribute "lake" of "strength".
Result: desk_strength(X,Z):-desk(X,_,Y),strength(Y,Z),not desk(X,_,_).
 espressione(X,Z):-desk(X,_,Y),strength(Y,Z).
 espressione(X,_,Z):-desk(X,_,Y),not strength(Y,Z).
table(X,Z):- espressione(X,Z).
table(X,_,Z):- espressione(X,Z).
table(X,_,Z):-desk(X,_,Y),strength(Y,Z).
table(X,_,Z):-desk(X,_,_),strength(Y,Z),not table(X,_,Z).

unique_rules: 
['Result: desk_strength(X,Z):-desk(X,_,Y),strength(Y,Z),not desk(X,_,_).', 'espressione(X,Z):-desk(X,_,Y),strength(Y,Z).', 'espressione(X,_,Z):-desk(X,_,Y),not strength(Y,Z).', 'table(X,Z):- espressione(X,Z).', 'table(X,_,Z):- espressione(X,Z).', 'table(X,_,Z):-desk(X,_,Y),strength(Y,Z).', 'table(X,_,Z):-desk(X,_,_),strength(Y,Z),not table(X,_,Z).']

parsed: 
Result: desk_strength(X,Z):-desk(X,_,Y),strength(Y,Z),not desk(X,_,_).

jaccard: 0.0


135
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "black" as the transitive closure of predicate "mumbai". Then, assign exactly one label from the set wall,roof,cloud,chair,storm,flower to each element in "black".

answer from file: 
black(X,Y):-mumbai(X,Y).
black(X,Y):-mumbai(X,Z),black(Z,Y).
assign(X,"wall")|assign(X,"roof")|assign(X,"cloud")|assign(X,"chair")|assign(X,"storm")|assign(X,"flower"):-black(X,_).

facts: 
mumbai(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "black" as the transitive closure of predicate "mumbai". Then, assign exactly one label from the set wall,roof,cloud,chair,storm,flower to each element in "black".
Answer: black(X,Y):-mumbai(X,Y).
black(X,Y):-mumbai(X,Z),black(Z,Y).
assign(X,"wall")|assign(X,"roof")|assign(X,"cloud")|assign(X,"chair")|assign(X,"storm")|assign(X,"florence"):-black(X,_).
retum:assign(X,"florence")|retum:assign(X,"city").
retum:assign(X,"age").
retum:assign(X,"name").
retum:assign(X,"price").
retum:assign(X,"description").
retum:assign(X,"shape").


unique_rules: 
['black(X,Y):-mumbai(X,Y).', 'black(X,Y):-mumbai(X,Z),black(Z,Y).', 'assign(X,"wall")|assign(X,"roof")|assign(X,"cloud")|assign(X,"chair")|assign(X,"storm")|assign(X,"florence"):-black(X,_).']

parsed: 
black(X,Y):-mumbai(X,Y).
black(X,Y):-mumbai(X,Z),black(Z,Y).
assign(X,"wall")|assign(X,"roof")|assign(X,"cloud")|assign(X,"chair")|assign(X,"storm")|assign(X,"florence"):-black(X,_).

jaccard: 0.0


136
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate cosenza. The labels are desk,storm,wall,roof,laptop,butterfly,flower,cloud. Consider only the predicate cosenza not associated with label "butterfly".

answer from file: 
assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X,"roof")|assign(X,"laptop")|assign(X,"butterfly")|assign(X,"flower")|assign(X,"cloud"):-cosenza(X, _), not cosenza(X, butterfly).

facts: 
cosenza(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate cosenza. The labels are desk,storm,wall,roof,laptop,butterfly,flower,cloud. Consider only the predicate cosenza not associated with label "butterfly".
Answer: assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X,"roof")|assign(X,"laptop")|assign(X," arrivant")|assign(X,"author")|assign(X,"city")|assign(X,"description") :-cosenza(X, _), not cosenza(X, butterfly).
```
assign(X,"description") :-cosenza(X, _), not cosenza(X, description).
```
Explanation:
The predicate "cosenza" has label "description", but not associated with label "author".
The predicate "description" has label "description", but not associated with label "

unique_rules: 
['assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X,"roof")|assign(X,"laptop")|assign(X," arrivant")|assign(X,"author")|assign(X,"city")|assign(X,"description") :-cosenza(X, _), not cosenza(X, butterfly).', 'assign(X,"description") :-cosenza(X, _), not cosenza(X, description).']

parsed: 
assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X,"roof")|assign(X,"laptop")|assign(X," arrivant")|assign(X,"author")|assign(X,"city")|assign(X,"description") :-cosenza(X, _), not cosenza(X, butterfly).

jaccard: 0.0


137
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate lake and labels weight, quality having label quality different than 65. The labels are chair,desk,storm,flower,cloud.

answer from file: 
assign(X,"chair")|assign(X,"desk")|assign(X,"storm")|assign(X,"flower")|assign(X,"cloud"):-lake(X, Y), Y!=65 .

facts: 
lake(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate lake and labels weight, quality having label quality different than 65. The labels are chair,desk,storm,flower,cloud.
Answer: assign(X,"chair")|assign(X,"desk")|assign(X,"storm")|assign(X,"flower")|assign(X,"cloud"):-lake(X, Y), Y!=65 .
```
assign(X,"name")|assign(X,"price")|assign(X,"age")|assign(X,"description"):-florence(X).
```
The predicate florence has label description, and the labels are price,age,description,city,shape,height,author,name,creator,age,description,city,price,height,author,name,description,creator,age,description,city,price,height,author,name,

unique_rules: 
['assign(X,"chair")|assign(X,"desk")|assign(X,"storm")|assign(X,"flower")|assign(X,"cloud"):-lake(X, Y), Y!=65 .', 'assign(X,"name")|assign(X,"price")|assign(X,"age")|assign(X,"description"):-florence(X).']

parsed: 
assign(X,"chair")|assign(X,"desk")|assign(X,"storm")|assign(X,"flower")|assign(X,"cloud"):-lake(X, Y), Y!=65 .

jaccard: 1.0


138
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate darkmagenta. The labels are storm,desk,laptop,butterfly,wall,cloud,flower,chair,roof.  Then, filter and return only the elements assigned to label butterfly.".

answer from file: 
assign(X,"storm")|assign(X,"desk")|assign(X,"laptop")|assign(X,"butterfly")|assign(X,"wall")|assign(X,"cloud")|assign(X,"flower")|assign(X,"chair")|assign(X,"roof"):-darkmagenta(X).
select(X):-assign(X, "butterfly").

facts: 
darkmagenta(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate darkmagenta. The labels are storm,desk,laptop,butterfly,wall,cloud,flower,chair,roof.  Then, filter and return only the elements assigned to label butterfly.".
Answer: assign(X," cœurs")|assign(X,"desk")|assign(X," arrivant")|assign(X," bréeder")|assign(X,"city")|assign(X,"name")|assign(X,"price")|assign(X,"author")|assign(X,"age")|retum(X, " bréeder").
select(X):-assign(X, " bréeder").
```
The predicate darkmagenta has label " bréeder", and the filter returns only the elements assigned to label " bréeder".
The labels are description,city,price,age,author,name,shape,height,creator,age,description,city,price,name,height,shape

unique_rules: 
['select(X):-assign(X, " bréeder").']

parsed: 
select(X):-assign(X, " bréeder").

jaccard: 0.0


139
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "quality" and "delhi". However, avoid any combination where predicate "quality" has label "laptop".

answer from file: 
combination(X,Y):-quality(X, _),delhi(Y), not quality(X, laptop).

facts: 
quality(1..4, 1..4).delhi(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "quality" and "delhi". However, avoid any combination where predicate "quality" has label "laptop".
Answer: combination(X,Y):-quality(X, _),delhi(Y), not quality(X, _).
combination(X,Y):-quality(X, _),delhi(Y).
assign(X, Y)
combination(X, Y).
retum.
assign(X, Y),
retum.
 espressione(X, Y).
retum.
 quíntuple(X, Y),
retum.
 bleue(X, Y),
retum.
shape(X, Y),
retum.
city(X, Y),
retum.
age(X, Y),
retum.
name(X, Y),
retum.
price(X, Y

unique_rules: 
['combination(X,Y):-quality(X, _),delhi(Y), not quality(X, _).', 'combination(X,Y):-quality(X, _),delhi(Y).']

parsed: 
combination(X,Y):-quality(X, _),delhi(Y), not quality(X, _).

jaccard: 0.0


140
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "cloud" having fields "ID","strength","chicagoID", and the predicate "chicago" having fields "ID","owner". Define a predicate "cloud_chicago" that associates to each "cloud" the "owner" of "chicago" only where "owner" is different than 33.

answer from file: 
cloud_chicago(X,Z):-cloud(X,_,Y),chicago(Y,Z), Z!=33.

facts: 
cloud("ID","strength","chicagoID").chicago("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "cloud" having fields "ID","strength","chicagoID", and the predicate "chicago" having fields "ID","owner". Define a predicate "cloud_chicago" that associates to each "cloud" the "owner" of "chicago" only where "owner" is different than 33.
Answer: cloud_chicago(X,Z):-cloud(X,_,Y),chicago(Y,Z), Z!=33.
cloud_chicago(X,_,Y):-cloud(X,_,Y),chicago(Y,Z), Z==33.
 ángulo(X,Y):-cloud(X,_,Y),chicago(Y,Z), Z!=33.
 ángulo(X,Y):-cloud(X,_,Y),chicago(Y,Z), Z==33.
 ángulo(X,Y):-cloud(X,_,Y),chicago(Y,Z), Z==1.
 ángulo(X,Y):-cloud(X,_,Y),chicago

unique_rules: 
['cloud_chicago(X,Z):-cloud(X,_,Y),chicago(Y,Z), Z!=33.', 'cloud_chicago(X,_,Y):-cloud(X,_,Y),chicago(Y,Z), Z==33.', 'ángulo(X,Y):-cloud(X,_,Y),chicago(Y,Z), Z!=33.', 'ángulo(X,Y):-cloud(X,_,Y),chicago(Y,Z), Z==33.', 'ángulo(X,Y):-cloud(X,_,Y),chicago(Y,Z), Z==1.', 'ángulo(X,Y):-cloud(X,_,Y),chicago.']

parsed: 
cloud_chicago(X,Z):-cloud(X,_,Y),chicago(Y,Z), Z!=33.

jaccard: 1.0


141
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "lake" having fields "ID","hair","hairID", and the predicate "hair" having fields "ID","hair". Define a predicate "lake_hair" that associates to each "lake", not associated with label "desk", the attribute "hair" of "hair".

answer from file: 
lake_hair(X,Z):-lake(X,_,Y),hair(Y,Z),not lake(X,desk,_).

facts: 
lake("ID","hair","hairID").hair("ID","hair").

generated: 
Write an ASP program for the following problem. Consider predicate "lake" having fields "ID","hair","hairID", and the predicate "hair" having fields "ID","hair". Define a predicate "lake_hair" that associates to each "lake", not associated with label "desk", the attribute "hair" of "hair".
Answer: lake_hair(X,Z):-lake(X,_,Y),hair(Y,Z),not lake(X,desk,_).
lake_hair(X,Z):-lake(X,_,Y),hair(Y,Z).
assign(X,lake_hair(X,Z)).
retum(X,Z).
retum(X,_,Y),assign(Y,hair(Y,Z)).
retum(X,_,Y),assign(Y,lake(Y,_,Z)).
retum(X,_,Y),assign(Y,name(Y,_,Z)).
retum(X,_,Y),assign(Y,age(Y,_,Z)).


unique_rules: 
['lake_hair(X,Z):-lake(X,_,Y),hair(Y,Z),not lake(X,desk,_).', 'lake_hair(X,Z):-lake(X,_,Y),hair(Y,Z).']

parsed: 
lake_hair(X,Z):-lake(X,_,Y),hair(Y,Z),not lake(X,desk,_).

jaccard: 1.0


142
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "singapore" as the transitive closure of predicate "black". Then, assign exactly one label from the set chair,wall,desk,roof,flower to each element in "singapore".

answer from file: 
singapore(X,Y):-black(X,Y).
singapore(X,Y):-black(X,Z),singapore(Z,Y).
assign(X,"chair")|assign(X,"wall")|assign(X,"desk")|assign(X,"roof")|assign(X,"flower"):-singapore(X,_).

facts: 
black(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "singapore" as the transitive closure of predicate "black". Then, assign exactly one label from the set chair,wall,desk,roof,flower to each element in "singapore".
Answer: singapore(X,Y):-black(X,Y).
 ángapore(X,Y):-black(X,Z), ángapore(Z,Y).
assign(X,"chair")|assign(X,"wall")|assign(X,"desk")|assign(X,"roof")|assign(X,"flower"):- ángapore(X,_).
 ángapore(X,Y):-black(X,Z),assign(Z,Y).
retum(X,Y):- ángapore(X,Y).
retum(X,Y):- ángapore(X,Z),retum(Z,Y).
retum(X,Y):- ángapore(X,Z),retum(Z,

unique_rules: 
['singapore(X,Y):-black(X,Y).', 'ángapore(X,Y):-black(X,Z), ángapore(Z,Y).', 'assign(X,"chair")|assign(X,"wall")|assign(X,"desk")|assign(X,"roof")|assign(X,"flower"):- ángapore(X,_).', 'ángapore(X,Y):-black(X,Z),assign(Z,Y).', 'retum(X,Y):- ángapore(X,Y).', 'retum(X,Y):- ángapore(X,Z),retum(Z,Y).', 'retum(X,Y):- ángapore(X,Z),retum(Z,.']

parsed: 
singapore(X,Y):-black(X,Y).
ángapore(X,Y):-black(X,Z), ángapore(Z,Y).
assign(X,"chair")|assign(X,"wall")|assign(X,"desk")|assign(X,"roof")|assign(X,"flower"):- ángapore(X,_).

jaccard: 0.0


143
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate cosenza. The labels are chair,laptop,storm. Consider only the predicate cosenza not associated with label "flower".

answer from file: 
assign(X,"chair")|assign(X,"laptop")|assign(X,"storm"):-cosenza(X, _), not cosenza(X, flower).

facts: 
cosenza(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate cosenza. The labels are chair,laptop,storm. Consider only the predicate cosenza not associated with label "flower".
Answer: assign(X,"chair")|assign(X," arrivant")|assign(X,"storm"):-cosenza(X, _), not cosenza(X, flower).
``` italienne
assign(X,"chair")|assign(X," arrivant")|assign(X,"storm"):-cosenza(X, _), not cosenza(X, flower).
```

unique_rules: 
['assign(X,"chair")|assign(X," arrivant")|assign(X,"storm"):-cosenza(X, _), not cosenza(X, flower).']

parsed: 
assign(X,"chair")|assign(X," arrivant")|assign(X,"storm"):-cosenza(X, _), not cosenza(X, flower).

jaccard: 1.0


144
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate weight and labels owner, quality having label quality different than 59. The labels are cloud,butterfly,laptop,storm,desk,wall,flower,chair.

answer from file: 
assign(X,"cloud")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"storm")|assign(X,"desk")|assign(X,"wall")|assign(X,"flower")|assign(X,"chair"):-weight(X, Y), Y!=59 .

facts: 
weight(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate weight and labels owner, quality having label quality different than 59. The labels are cloud,butterfly,laptop,storm,desk,wall,flower,chair.
Answer: assign(X,"cloud")|assign(X," arrivant")|assign(X," felicità")|assign(X,"shape")|assign(X,"city")|assign(X,"description")|assign(X,"name")|assign(X,"price")|assign(X,"age") : weight(X, Y), Y!=59 .
Assign(X,"description") where X is the set of elements expressed by predicate weight and Y is the set of labels.
The labels are description,price,age,city,name,shape,author,height,creator,description,age,price,name,city,description,height,creator,author,age,description,price,name

unique_rules: 
[]

parsed: 


jaccard: 0.0


145
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate flower. The labels are storm,roof,butterfly,laptop,chair.  Then, filter and return only the elements assigned to label roof.".

answer from file: 
assign(X,"storm")|assign(X,"roof")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"chair"):-flower(X).
select(X):-assign(X, "roof").

facts: 
flower(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate flower. The labels are storm,roof,butterfly,laptop,chair.  Then, filter and return only the elements assigned to label roof.".
Answer: assign(X," cœurs")|assign(X,"florence")|assign(X,"shape")|assign(X,"city")|assign(X,"price")|assign(X,"author")|retum(X, "florence").
select(X):-assign(X, "florence").
retum(X, "florence").
 köp:assign(X,"shape").
 köp:retum(X, "shape").
 köp:retum(X, "price").
 köp:retum(X, "author").
 quíntu(X, "florence").
 quíntu(X, "shape").
 quíntu(X, "price").
 quíntu(X, "

unique_rules: 
['select(X):-assign(X, "florence").']

parsed: 
select(X):-assign(X, "florence").

jaccard: 0.0


146
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "hair" and "chicago". However, avoid any combination where predicate "hair" has label "chair".

answer from file: 
combination(X,Y):-hair(X, _),chicago(Y), not hair(X, chair).

facts: 
hair(1..4, 1..4).chicago(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "hair" and "chicago". However, avoid any combination where predicate "hair" has label "chair".
Answer: combination(X,Y):-hair(X, _),chicago(Y), not hair(X, chair).
combination(X,Y):-hair(X, _),chicago(Y).
combination(X,Y):-hair(X, _),chicago(Y), label(X, chair).
```
Combinations are expressed by predicate "combination".
However, avoid any combination where predicate "hair" has label "chair".
The two sets are expressed by predicates "hair" and "chicago".
So, the predicate "combination" generates all the combinations of elements from the two sets.
The two sets are expressed by predicates "hair" and "tokyo".
But avoid any combination where predicate

unique_rules: 
['combination(X,Y):-hair(X, _),chicago(Y), not hair(X, chair).', 'combination(X,Y):-hair(X, _),chicago(Y).', 'combination(X,Y):-hair(X, _),chicago(Y), label(X, chair).']

parsed: 
combination(X,Y):-hair(X, _),chicago(Y), not hair(X, chair).

jaccard: 1.0


147
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "flower" having fields "ID","hairID","lake", and the predicate "hair" having fields "ID","surname". Define a predicate "flower_hair" that associates to each "flower" the "surname" of "hair" only where "surname" is different than 94.

answer from file: 
flower_hair(X,Z):-flower(X,Y,_),hair(Y,Z), Z!=94.

facts: 
flower("ID","hairID","lake").hair("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "flower" having fields "ID","hairID","lake", and the predicate "hair" having fields "ID","surname". Define a predicate "flower_hair" that associates to each "flower" the "surname" of "hair" only where "surname" is different than 94.
Answer: flower_hair(X,Z):-flower(X,Y,_),hair(Y,Z), Z!=94.
flower_hair(X,Y,_):-flower(X,Y,Z),Z==94.
 áng=flower_hair(X,Y,_).
 áng.shape= italienne.shape.name. merke
 áng.shape=shape.name.city.age
 respekt(X,Y,Z),Z!=94.
 respekt(X,Y,Z),Z==94.
 áng.shape= italienne.shape.name.city.age.height.name.description,height,age,price,city,description,name,shape

unique_rules: 
['flower_hair(X,Z):-flower(X,Y,_),hair(Y,Z), Z!=94.', 'flower_hair(X,Y,_):-flower(X,Y,Z),Z==94.']

parsed: 
flower_hair(X,Z):-flower(X,Y,_),hair(Y,Z), Z!=94.

jaccard: 1.0


148
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "hair" having fields "ID","surname","moscowID", and the predicate "moscow" having fields "ID","lake". Define a predicate "hair_moscow" that associates to each "hair", not associated with label "chair", the attribute "lake" of "moscow".

answer from file: 
hair_moscow(X,Z):-hair(X,_,Y),moscow(Y,Z),not hair(X,chair,_).

facts: 
hair("ID","surname","moscowID").moscow("ID","lake").

generated: 
Write an ASP program for the following problem. Consider predicate "hair" having fields "ID","surname","moscowID", and the predicate "moscow" having fields "ID","lake". Define a predicate "hair_moscow" that associates to each "hair", not associated with label "chair", the attribute "lake" of "moscow".
Answer: hair_moscow(X,Z):-hair(X,_,Y),moscow(Y,Z),not hair(X,chair,_).
hair_moscow(X,Z):-hair(X,_,Y),moscow(Y,Z),label(X,chair).
assign(X,Z):-hair_moscow(X,Z).
retum(X,Z),not hair(X,chair,_).
retum(X,Z),label(X,chair).
 quíname(X,Z):-hair(X,_,Y),moto(Y,Z).
 quíname(X,Z):-moto(Y,Z),label(X,chair).


unique_rules: 
['hair_moscow(X,Z):-hair(X,_,Y),moscow(Y,Z),not hair(X,chair,_).', 'hair_moscow(X,Z):-hair(X,_,Y),moscow(Y,Z),label(X,chair).', 'assign(X,Z):-hair_moscow(X,Z).', 'quíname(X,Z):-hair(X,_,Y),moto(Y,Z).', 'quíname(X,Z):-moto(Y,Z),label(X,chair).']

parsed: 
hair_moscow(X,Z):-hair(X,_,Y),moscow(Y,Z),not hair(X,chair,_).

jaccard: 1.0


149
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "cairo" as the transitive closure of predicate "lightblue". Then, assign exactly one label from the set chair,laptop,flower,desk,storm,butterfly to each element in "cairo".

answer from file: 
cairo(X,Y):-lightblue(X,Y).
cairo(X,Y):-lightblue(X,Z),cairo(Z,Y).
assign(X,"chair")|assign(X,"laptop")|assign(X,"flower")|assign(X,"desk")|assign(X,"storm")|assign(X,"butterfly"):-cairo(X,_).

facts: 
lightblue(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "cairo" as the transitive closure of predicate "lightblue". Then, assign exactly one label from the set chair,laptop,flower,desk,storm,butterfly to each element in "cairo".
Answer: cairo(X,Y):-lightblue(X,Y).
cairo(X,Y):-lightblue(X,Z),cairo(Z,Y).
assign(X,"chair")|assign(X," arrivant")|assign(X,"florence")|assign(X,"desk")|assign(X,"storm")|assign(X," arrivant")|assign(X,"florence"):-cairo(X,_).
retum:assign(X,"florence")|retum:assign(X," arrivant").
retum:assign(X,"florence").
retum:assign(X,"city").
retum:assign(X,"age").
retum:assign(X,"name").

unique_rules: 
['cairo(X,Y):-lightblue(X,Y).', 'cairo(X,Y):-lightblue(X,Z),cairo(Z,Y).', 'assign(X,"chair")|assign(X," arrivant")|assign(X,"florence")|assign(X,"desk")|assign(X,"storm")|assign(X," arrivant")|assign(X,"florence"):-cairo(X,_).']

parsed: 
cairo(X,Y):-lightblue(X,Y).
cairo(X,Y):-lightblue(X,Z),cairo(Z,Y).
assign(X,"chair")|assign(X," arrivant")|assign(X,"florence")|assign(X,"desk")|assign(X,"storm")|assign(X," arrivant")|assign(X,"florence"):-cairo(X,_).

jaccard: 0.0


150
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate white. The labels are laptop,chair,flower. Consider only the predicate white not associated with label "flower".

answer from file: 
assign(X,"laptop")|assign(X,"chair")|assign(X,"flower"):-white(X, _), not white(X, flower).

facts: 
white(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate white. The labels are laptop,chair,flower. Consider only the predicate white not associated with label "flower".
Answer: assign(X," arrivant")|assign(X,"chair")|assign(X,"flower"):-white(X, _), not white(X, flower).
```
assign(X," arrivant")|assign(X,"chair")|assign(X,"flower"):-white(X, _), not white(X, flower).
```

unique_rules: 
['assign(X," arrivant")|assign(X,"chair")|assign(X,"flower"):-white(X, _), not white(X, flower).']

parsed: 
assign(X," arrivant")|assign(X,"chair")|assign(X,"flower"):-white(X, _), not white(X, flower).

jaccard: 1.0


151
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate butterfly and labels quality, strength having label strength different than 2. The labels are laptop,cloud,desk,chair,storm,butterfly,flower,roof.

answer from file: 
assign(X,"laptop")|assign(X,"cloud")|assign(X,"desk")|assign(X,"chair")|assign(X,"storm")|assign(X,"butterfly")|assign(X,"flower")|assign(X,"roof"):-butterfly(X, Y), Y!=2 .

facts: 
butterfly(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate butterfly and labels quality, strength having label strength different than 2. The labels are laptop,cloud,desk,chair,storm,butterfly,flower,roof.
Answer: assign(X,"laptop")|assign(X,"cloud")|assign(X,"desk")|assign(X,"chair")|assign(X,"storm")|assign(X,"butterfly")|assign(X,"flower")|assign(X,"roof"):-butterfly(X, Y), Y!=2 .
```
 köp:assign(X,"car")|assign(X,"age")|assign(X,"name")|assign(X,"price")|assign(X,"description")|assign(X,"city")|assign(X,"height")|assign(X,"author")|assign(X,"shape").
```
The predicate "moto" has label "author",

unique_rules: 
['assign(X,"laptop")|assign(X,"cloud")|assign(X,"desk")|assign(X,"chair")|assign(X,"storm")|assign(X,"butterfly")|assign(X,"flower")|assign(X,"roof"):-butterfly(X, Y), Y!=2 .']

parsed: 
assign(X,"laptop")|assign(X,"cloud")|assign(X,"desk")|assign(X,"chair")|assign(X,"storm")|assign(X,"butterfly")|assign(X,"flower")|assign(X,"roof"):-butterfly(X, Y), Y!=2 .

jaccard: 1.0


152
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate singapore. The labels are desk,chair,storm,roof,wall,laptop,flower,butterfly,cloud.  Then, filter and return only the elements assigned to label storm.".

answer from file: 
assign(X,"desk")|assign(X,"chair")|assign(X,"storm")|assign(X,"roof")|assign(X,"wall")|assign(X,"laptop")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"cloud"):-singapore(X).
select(X):-assign(X, "storm").

facts: 
singapore(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate singapore. The labels are desk,chair,storm,roof,wall,laptop,flower,butterfly,cloud.  Then, filter and return only the elements assigned to label storm.".
Answer: assign(X,"desk")|assign(X,"chair")|assign(X,"storm")|assign(X,"roof")|assign(X,"wall")|assign(X,"laptop")|assign(X,"flower")|assign(X," arrivant")|assign(X,"cloud"):-florence(X).
select(X):-assign(X, "storm").
```
The predicate florence has label "description".
So, select(X):-assign(X, "description").
But, as label "description" has label "description", only the elements assigned to label "description" are returned.
The predicate assign has label "description", so the predicate select returns only the

unique_rules: 
['assign(X,"desk")|assign(X,"chair")|assign(X,"storm")|assign(X,"roof")|assign(X,"wall")|assign(X,"laptop")|assign(X,"flower")|assign(X," arrivant")|assign(X,"cloud"):-florence(X).', 'select(X):-assign(X, "storm").', 'So, select(X):-assign(X, "description").']

parsed: 
assign(X,"desk")|assign(X,"chair")|assign(X,"storm")|assign(X,"roof")|assign(X,"wall")|assign(X,"laptop")|assign(X,"flower")|assign(X," arrivant")|assign(X,"cloud"):-florence(X).
select(X):-assign(X, "storm").

jaccard: 0.0


153
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "butterfly" and "lightblue". However, avoid any combination where predicate "butterfly" has label "flower".

answer from file: 
combination(X,Y):-butterfly(X, _),lightblue(Y), not butterfly(X, flower).

facts: 
butterfly(1..4, 1..4).lightblue(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "butterfly" and "lightblue". However, avoid any combination where predicate "butterfly" has label "flower".
Answer: combination(X,Y):-florence(X),lightblue(Y), not florence(X,flower).
combination(X,Y):-florence(X),lightblue(Y), label(X,city).
assign(X, Y)
combination(X, Y).
retum(X, Y).
 quíntuple(X, Y):-florence(X),lightblue(Y), label(X,city).
 quíntuple(X, Y):-florence(X),lightblue(Y), height(X, Y).
retum(X, Y):-florence(X),lightblue(Y), height(X, Y), label(X,city).

unique_rules: 
['combination(X,Y):-florence(X),lightblue(Y), not florence(X,flower).', 'combination(X,Y):-florence(X),lightblue(Y), label(X,city).', 'quíntuple(X, Y):-florence(X),lightblue(Y), label(X,city).', 'quíntuple(X, Y):-florence(X),lightblue(Y), height(X, Y).', 'retum(X, Y):-florence(X),lightblue(Y), height(X, Y), label(X,city).']

parsed: 
combination(X,Y):-florence(X),lightblue(Y), not florence(X,flower).

jaccard: 0.0


154
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "lightblue" having fields "ID","hair","delhiID", and the predicate "delhi" having fields "ID","strength". Define a predicate "lightblue_delhi" that associates to each "lightblue" the "strength" of "delhi" only where "strength" is different than 97.

answer from file: 
lightblue_delhi(X,Z):-lightblue(X,_,Y),delhi(Y,Z), Z!=97.

facts: 
lightblue("ID","hair","delhiID").delhi("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "lightblue" having fields "ID","hair","delhiID", and the predicate "delhi" having fields "ID","strength". Define a predicate "lightblue_delhi" that associates to each "lightblue" the "strength" of "delhi" only where "strength" is different than 97.
Answer: lightblue_delhi(X,Z):-lightblue(X,_,Y),delhi(Y,Z), Z!=97.
lightblue_delhi(X,_,Y):-lightblue(X,_,Y),delhi(Y,Z), Z==97.
assign(X,"name")|assign(X,"price")|assign(X,"city")|assign(X,"description")|assign(X,"shape")|assign(X,"height")|retum(X,Y), Y!=97.
retum(X,Y), Y==97.
retum(X,_,Z), Z!=97.
retum(X,_,

unique_rules: 
['lightblue_delhi(X,Z):-lightblue(X,_,Y),delhi(Y,Z), Z!=97.', 'lightblue_delhi(X,_,Y):-lightblue(X,_,Y),delhi(Y,Z), Z==97.']

parsed: 
lightblue_delhi(X,Z):-lightblue(X,_,Y),delhi(Y,Z), Z!=97.

jaccard: 1.0


155
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "storm" having fields "ID","hair","chairID", and the predicate "chair" having fields "ID","lake". Define a predicate "storm_chair" that associates to each "storm", not associated with label "butterfly", the attribute "lake" of "chair".

answer from file: 
storm_chair(X,Z):-storm(X,_,Y),chair(Y,Z),not storm(X,butterfly,_).

facts: 
storm("ID","hair","chairID").chair("ID","lake").

generated: 
Write an ASP program for the following problem. Consider predicate "storm" having fields "ID","hair","chairID", and the predicate "chair" having fields "ID","lake". Define a predicate "storm_chair" that associates to each "storm", not associated with label "butterfly", the attribute "lake" of "chair".
Result: "storm_chair(X,Z):-storm(X,_,Y),chair(Y,Z),not storm(X,_,_).
 ángulo(X,Y):-storm(X,_,Y),not chair(Y,Z).
 ángulo(X,Y):-storm(X,_,Y),chair(Y,Z).
 ángulo(X,Y):-storm(X,_,_),chair(Y,Z),not name(X,creator).
 ángulo(X,Y):-name(X,creator),_,Y,Z.
 ángulo(X,Y):-name(X,creator),_,_,Z.
 ángulo(X,Y):-name(

unique_rules: 
['Result: "storm_chair(X,Z):-storm(X,_,Y),chair(Y,Z),not storm(X,_,_).', 'ángulo(X,Y):-storm(X,_,Y),not chair(Y,Z).', 'ángulo(X,Y):-storm(X,_,Y),chair(Y,Z).', 'ángulo(X,Y):-storm(X,_,_),chair(Y,Z),not name(X,creator).', 'ángulo(X,Y):-name(X,creator),_,Y,Z.', 'ángulo(X,Y):-name(X,creator),_,_,Z.', 'ángulo(X,Y):-name(.']

parsed: 
Result: "storm_chair(X,Z):-storm(X,_,Y),chair(Y,Z),not storm(X,_,_).

jaccard: 0.0


156
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "wall" as the transitive closure of predicate "surname". Then, assign exactly one label from the set desk,wall,flower,storm to each element in "wall".

answer from file: 
wall(X,Y):-surname(X,Y).
wall(X,Y):-surname(X,Z),wall(Z,Y).
assign(X,"desk")|assign(X,"wall")|assign(X,"flower")|assign(X,"storm"):-wall(X,_).

facts: 
surname(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "wall" as the transitive closure of predicate "surname". Then, assign exactly one label from the set desk,wall,flower,storm to each element in "wall".
Answer: wall(X,Y):-surname(X,Y).
wall(X,Y):-surname(X,Z),wall(Z,Y).
assign(X,"desk")|assign(X,"wall")|assign(X,"flower")|assign(X,"storm"):-wall(X,_).
retum(X,Y):-wall(X,Y).
retum(X,Y):-wall(X,Z),retum(Z,Y).
retum(X,Y):-wall(X,Z),retum(Z,Y).
retum(X,Y):-wall(X,Z),retum(Z,Y),retum(Y,Y).
retum(X,Y

unique_rules: 
['wall(X,Y):-surname(X,Y).', 'wall(X,Y):-surname(X,Z),wall(Z,Y).', 'assign(X,"desk")|assign(X,"wall")|assign(X,"flower")|assign(X,"storm"):-wall(X,_).', 'retum(X,Y):-wall(X,Y).', 'retum(X,Y):-wall(X,Z),retum(Z,Y).', 'retum(X,Y):-wall(X,Z),retum(Z,Y),retum(Y,Y).']

parsed: 
wall(X,Y):-surname(X,Y).
wall(X,Y):-surname(X,Z),wall(Z,Y).
assign(X,"desk")|assign(X,"wall")|assign(X,"flower")|assign(X,"storm"):-wall(X,_).

jaccard: 1.0


157
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate butterfly. The labels are cloud,storm. Consider only the predicate butterfly not associated with label "chair".

answer from file: 
assign(X,"cloud")|assign(X,"storm"):-butterfly(X, _), not butterfly(X, chair).

facts: 
butterfly(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate butterfly. The labels are cloud,storm. Consider only the predicate butterfly not associated with label "chair".
Answer: assign(X,"cloud")|assign(X,"storm"):-butterfly(X, _), not butterfly(X, chair).
```
assign(X,"cloud")|assign(X,"storm"):- éparchement(X).
```
Explanation:
The predicate " éparchement" associates to each "object" the "name" of "florence".
The predicate "assign" associates to each "object" the "name" of "city".
The predicate "florence" associates to each "object" the "name" of "age".
The predicate "age" associates to each "object" the "name" of "city".
The predicate "city" associates to each "

unique_rules: 
['assign(X,"cloud")|assign(X,"storm"):-butterfly(X, _), not butterfly(X, chair).', 'assign(X,"cloud")|assign(X,"storm"):- éparchement(X).']

parsed: 
assign(X,"cloud")|assign(X,"storm"):-butterfly(X, _), not butterfly(X, chair).

jaccard: 1.0


158
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate black and labels owner, hair having label hair different than 10. The labels are cloud,flower,roof,laptop,desk,storm,wall.

answer from file: 
assign(X,"cloud")|assign(X,"flower")|assign(X,"roof")|assign(X,"laptop")|assign(X,"desk")|assign(X,"storm")|assign(X,"wall"):-black(X, Y), Y!=10 .

facts: 
black(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate black and labels owner, hair having label hair different than 10. The labels are cloud,flower,roof,laptop,desk,storm,wall.
Answer: assign(X,"cloud")|assign(X,"flower")|assign(X,"roof")|assign(X,"laptop")|assign(X,"desk")|assign(X,"storm")|assign(X,"wall"):-black(X, Y), Y!=10 .
```
Assign exactly a label among a given set of labels to a set of elements expressed by predicate black and labels price,creator,description,age,city,height,name,shape,price,author,description,age,city,height,name,shape,price,author,description,age,city,height,name,shape,price,author,description,age,city,height,name,shape

unique_rules: 
['assign(X,"cloud")|assign(X,"flower")|assign(X,"roof")|assign(X,"laptop")|assign(X,"desk")|assign(X,"storm")|assign(X,"wall"):-black(X, Y), Y!=10 .']

parsed: 
assign(X,"cloud")|assign(X,"flower")|assign(X,"roof")|assign(X,"laptop")|assign(X,"desk")|assign(X,"storm")|assign(X,"wall"):-black(X, Y), Y!=10 .

jaccard: 1.0


159
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate owner. The labels are flower,cloud,wall,roof,storm,desk.  Then, filter and return only the elements assigned to label cloud.".

answer from file: 
assign(X,"flower")|assign(X,"cloud")|assign(X,"wall")|assign(X,"roof")|assign(X,"storm")|assign(X,"desk"):-owner(X).
select(X):-assign(X, "cloud").

facts: 
owner(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate owner. The labels are flower,cloud,wall,roof,storm,desk.  Then, filter and return only the elements assigned to label cloud.".
Answer: assign(X,"flower")|assign(X,"cloud")|assign(X,"wall")|assign(X,"roof")|assign(X,"storm")|assign(X,"desk"):-owner(X).
select(X):-assign(X, "cloud").
```
Assign(X,"florence")|Assign(X,"height")|Assign(X,"price")|Assign(X,"age")|Assign(X,"author")|Assign(X,"description"):-owner(X).
select(X):-assign(X, "description").
```
The predicate owner returns all the elements associated with label "description".
The predicate select returns only the elements assigned to label

unique_rules: 
['assign(X,"flower")|assign(X,"cloud")|assign(X,"wall")|assign(X,"roof")|assign(X,"storm")|assign(X,"desk"):-owner(X).', 'select(X):-assign(X, "cloud").', 'Assign(X,"florence")|Assign(X,"height")|Assign(X,"price")|Assign(X,"age")|Assign(X,"author")|Assign(X,"description"):-owner(X).', 'select(X):-assign(X, "description").']

parsed: 
assign(X,"flower")|assign(X,"cloud")|assign(X,"wall")|assign(X,"roof")|assign(X,"storm")|assign(X,"desk"):-owner(X).
select(X):-assign(X, "cloud").

jaccard: 1.0


160
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "barcelona" and "storm". However, avoid any combination where predicate "barcelona" has label "flower".

answer from file: 
combination(X,Y):-barcelona(X, _),storm(Y), not barcelona(X, flower).

facts: 
barcelona(1..4, 1..4).storm(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "barcelona" and "storm". However, avoid any combination where predicate "barcelona" has label "flower".
Answer: combination(X,Y):-barcelona(X, _),storm(Y), not barcelona(X, flower).
combination(X,Y):-barcelona(X, _),storm(Y).
combination(X,Y):-barcelona(X, _),storm(Y), biet(X, Y).
assign(X, Y)
retum(X, Y).
 quíntuple(X, Y):-combination(X, Y).
 quíntuple(X, Y):-combination(X, Y), biet(X, Y).
 quíntuple(X, Y):-combination(X, Y), biet(X, Y), desc(X, Y).
retum(X, Y),

unique_rules: 
['combination(X,Y):-barcelona(X, _),storm(Y), not barcelona(X, flower).', 'combination(X,Y):-barcelona(X, _),storm(Y).', 'combination(X,Y):-barcelona(X, _),storm(Y), biet(X, Y).', 'quíntuple(X, Y):-combination(X, Y).', 'quíntuple(X, Y):-combination(X, Y), biet(X, Y).', 'quíntuple(X, Y):-combination(X, Y), biet(X, Y), desc(X, Y).']

parsed: 
combination(X,Y):-barcelona(X, _),storm(Y), not barcelona(X, flower).

jaccard: 1.0


161
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "lightblue" having fields "ID","singaporeID","surname", and the predicate "singapore" having fields "ID","weight". Define a predicate "lightblue_singapore" that associates to each "lightblue" the "weight" of "singapore" only where "weight" is different than 50.

answer from file: 
lightblue_singapore(X,Z):-lightblue(X,Y,_),singapore(Y,Z), Z!=50.

facts: 
lightblue("ID","singaporeID","surname").singapore("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "lightblue" having fields "ID","singaporeID","surname", and the predicate "singapore" having fields "ID","weight". Define a predicate "lightblue_singapore" that associates to each "lightblue" the "weight" of "singapore" only where "weight" is different than 50.
Answer: lightblue_singapore(X,Z):-lightblue(X,Y,_),singapore(Y,Z), Z!=50.
lightblue_singapore(X,Y,_):-lightblue(X,Y,_),singapore(Y,Z), Z==50.
assign(X," kollektive")|assign(X,"name")|assign(X,"price")|assign(X,"description")|assign(X,"city")|assign(X,"author")|retum(X,Y,Z).
retum(X,Y,Z):-lightblue(X,Y,_),singapore(Y,Z), Z==50.
retum(X

unique_rules: 
['lightblue_singapore(X,Z):-lightblue(X,Y,_),singapore(Y,Z), Z!=50.', 'lightblue_singapore(X,Y,_):-lightblue(X,Y,_),singapore(Y,Z), Z==50.', 'retum(X,Y,Z):-lightblue(X,Y,_),singapore(Y,Z), Z==50.']

parsed: 
lightblue_singapore(X,Z):-lightblue(X,Y,_),singapore(Y,Z), Z!=50.

jaccard: 1.0


162
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "owner" having fields "ID","quality","cloudID", and the predicate "cloud" having fields "ID","owner". Define a predicate "owner_cloud" that associates to each "owner", not associated with label "flower", the attribute "owner" of "cloud".

answer from file: 
owner_cloud(X,Z):-owner(X,_,Y),cloud(Y,Z),not owner(X,flower,_).

facts: 
owner("ID","quality","cloudID").cloud("ID","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "owner" having fields "ID","quality","cloudID", and the predicate "cloud" having fields "ID","owner". Define a predicate "owner_cloud" that associates to each "owner", not associated with label "flower", the attribute "owner" of "cloud".
Answer: owner_cloud(X,Z):-owner(X,_,Y),cloud(Y,Z),not owner(X,flower,_).
owner_cloud(X,Z):-owner(X,_,Y),cloud(Y,Z),label(X,flower).
assign(X,Z):-owner_cloud(X,Z).
retum(X,Z),not owner(X,flower,_).
retum(X,Z),label(X,city).
 quíntu(X,Z),not owner(X,city,_).
 quíntu(X,Z),label(X,description).
 quíntu(X,Z),not owner(X,description,_).


unique_rules: 
['owner_cloud(X,Z):-owner(X,_,Y),cloud(Y,Z),not owner(X,flower,_).', 'owner_cloud(X,Z):-owner(X,_,Y),cloud(Y,Z),label(X,flower).', 'assign(X,Z):-owner_cloud(X,Z).']

parsed: 
owner_cloud(X,Z):-owner(X,_,Y),cloud(Y,Z),not owner(X,flower,_).

jaccard: 1.0


163
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "butterfly" as the transitive closure of predicate "pink". Then, assign exactly one label from the set chair,butterfly,laptop to each element in "butterfly".

answer from file: 
butterfly(X,Y):-pink(X,Y).
butterfly(X,Y):-pink(X,Z),butterfly(Z,Y).
assign(X,"chair")|assign(X,"butterfly")|assign(X,"laptop"):-butterfly(X,_).

facts: 
pink(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "butterfly" as the transitive closure of predicate "pink". Then, assign exactly one label from the set chair,butterfly,laptop to each element in "butterfly".
Answer: butterfly(X,Y):-pink(X,Y).
 écouter(X,Y):-pink(X,Y).
assign(X,"chair")|assign(X," arrivant")|assign(X,"height") :-butterfly(X,_).
assign(X,"height") :- écouter(X,_).
retum(X,Y):- écouter(X,Y).
retum(X,Y):-blue(X,Y).
retum(X,Y):-price(X,Y).
retum(X,Y):-age(X,Y).
retum(X,Y):-city(X,Y).
retum(X,Y):-name(X,Y).


unique_rules: 
['butterfly(X,Y):-pink(X,Y).', 'écouter(X,Y):-pink(X,Y).', 'assign(X,"chair")|assign(X," arrivant")|assign(X,"height") :-butterfly(X,_).', 'assign(X,"height") :- écouter(X,_).', 'retum(X,Y):- écouter(X,Y).', 'retum(X,Y):-blue(X,Y).', 'retum(X,Y):-price(X,Y).', 'retum(X,Y):-age(X,Y).', 'retum(X,Y):-city(X,Y).', 'retum(X,Y):-name(X,Y).']

parsed: 
butterfly(X,Y):-pink(X,Y).
écouter(X,Y):-pink(X,Y).
assign(X,"chair")|assign(X," arrivant")|assign(X,"height") :-butterfly(X,_).

jaccard: 0.0


164
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate darkmagenta. The labels are chair,butterfly,cloud,flower,desk,roof,wall. Consider only the predicate darkmagenta not associated with label "flower".

answer from file: 
assign(X,"chair")|assign(X,"butterfly")|assign(X,"cloud")|assign(X,"flower")|assign(X,"desk")|assign(X,"roof")|assign(X,"wall"):-darkmagenta(X, _), not darkmagenta(X, flower).

facts: 
darkmagenta(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate darkmagenta. The labels are chair,butterfly,cloud,flower,desk,roof,wall. Consider only the predicate darkmagenta not associated with label "flower".
Answer: assign(X,"chair")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"desk")|assign(X,"roof")|assign(X,"wall"):-darkmagenta(X, _), not darkmagenta(X, flower).
```
assign(X,"city")|assign(X,"age")|assign(X,"name")|assign(X,"price"):-darkmagenta(X, _).
```
The predicate darkmagenta has label "name", and the predicate name has label "price". So, assign(X,"price")only where predicate darkmagenta has label "name".
The labels are city,

unique_rules: 
['assign(X,"chair")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"desk")|assign(X,"roof")|assign(X,"wall"):-darkmagenta(X, _), not darkmagenta(X, flower).', 'assign(X,"city")|assign(X,"age")|assign(X,"name")|assign(X,"price"):-darkmagenta(X, _).']

parsed: 
assign(X,"chair")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"desk")|assign(X,"roof")|assign(X,"wall"):-darkmagenta(X, _), not darkmagenta(X, flower).

jaccard: 1.0


165
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate lake and labels hair, owner having label owner different than 15. The labels are laptop,butterfly,wall,flower,storm,desk,cloud.

answer from file: 
assign(X,"laptop")|assign(X,"butterfly")|assign(X,"wall")|assign(X,"flower")|assign(X,"storm")|assign(X,"desk")|assign(X,"cloud"):-lake(X, Y), Y!=15 .

facts: 
lake(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate lake and labels hair, owner having label owner different than 15. The labels are laptop,butterfly,wall,flower,storm,desk,cloud.
Answer: assign(X," arrivant")|assign(X,"height")|assign(X,"city")|assign(X,"name")|assign(X,"age")|assign(X,"description")|assign(X,"author")|assign(X,"price")|assign(X,"city"), X, Y), Y!=15 .
 köp(X, Y), Y!=15 .
```
 köp(X, Y), Y!=15 .
assign(X," arrivant")|assign(X,"height")|assign(X,"city")|assign(X,"name")|assign(X,"age")|assign(X,"description")|assign(X,"author")|

unique_rules: 
[]

parsed: 


jaccard: 0.0


166
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate storm. The labels are roof,butterfly,chair,desk,laptop,storm,cloud,wall,flower.  Then, filter and return only the elements assigned to label roof.".

answer from file: 
assign(X,"roof")|assign(X,"butterfly")|assign(X,"chair")|assign(X,"desk")|assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud")|assign(X,"wall")|assign(X,"flower"):-storm(X).
select(X):-assign(X, "roof").

facts: 
storm(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate storm. The labels are roof,butterfly,chair,desk,laptop,storm,cloud,wall,flower.  Then, filter and return only the elements assigned to label roof.".
Answer: assign(X," felicità")|assign(X,"creator")|assign(X,"city")|assign(X,"age")|assign(X,"name")|assign(X,"price")|assign(X,"description")|assign(X,"author")|assign(X,"height")|retum(X, " felicità").
select(X):-assign(X, " felicità").
retum(X, " felicità").
```
The predicate " felicità" has label "description", and the predicate "creator" has label "description".
So, the predicate "retum" associates to each " felicità" the "description" of "creator".
Then, "retum" only returns the elements assigned

unique_rules: 
['select(X):-assign(X, " felicità").']

parsed: 
select(X):-assign(X, " felicità").

jaccard: 0.0


167
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "darkmagenta" and "strength". However, avoid any combination where predicate "darkmagenta" has label "laptop".

answer from file: 
combination(X,Y):-darkmagenta(X, _),strength(Y), not darkmagenta(X, laptop).

facts: 
darkmagenta(1..4, 1..4).strength(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "darkmagenta" and "strength". However, avoid any combination where predicate "darkmagenta" has label "laptop".
Answer: combination(X,Y):-darkmagenta(X, _),strength(Y), not darkmagenta(X, _).
combination(X,Y):-darkmagenta(X, _),strength(Y).
assign(X, Y)
combination(X, Y).
retum.
assign(X, Y), not darkmagenta(X, _).
combination(X, Y).
retum.
assign(X, Y), not strength(Y).
combination(X, Y).
retum.
assign(X, Y), not darkmagenta(X, _).
combination(X, Y).
retum.
assign(X, Y), not strength(Y).
combination(

unique_rules: 
['combination(X,Y):-darkmagenta(X, _),strength(Y), not darkmagenta(X, _).', 'combination(X,Y):-darkmagenta(X, _),strength(Y).']

parsed: 
combination(X,Y):-darkmagenta(X, _),strength(Y), not darkmagenta(X, _).

jaccard: 0.0


168
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "cloud" having fields "ID","surname","whiteID", and the predicate "white" having fields "ID","surname". Define a predicate "cloud_white" that associates to each "cloud" the "surname" of "white" only where "surname" is different than 34.

answer from file: 
cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34.

facts: 
cloud("ID","surname","whiteID").white("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "cloud" having fields "ID","surname","whiteID", and the predicate "white" having fields "ID","surname". Define a predicate "cloud_white" that associates to each "cloud" the "surname" of "white" only where "surname" is different than 34.
Answer: cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34.
cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z==34.
 áng=cloud_white(X,Z), Z!=34.
 áng=cloud_white(X,Z), Z==34.
 áng=cloud(X,_,Y),white(Y,Z), Z==34.
 áng=cloud(X,_,Y),white(Y,Z), Z==12.
 áng=cloud(X,_,Y),white(Y,Z), Z==13

unique_rules: 
['cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34.', 'cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z==34.']

parsed: 
cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34.

jaccard: 1.0


169
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "black" having fields "ID","quality","lakeID", and the predicate "lake" having fields "ID","owner". Define a predicate "black_lake" that associates to each "black", not associated with label "laptop", the attribute "owner" of "lake".

answer from file: 
black_lake(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).

facts: 
black("ID","quality","lakeID").lake("ID","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "black" having fields "ID","quality","lakeID", and the predicate "lake" having fields "ID","owner". Define a predicate "black_lake" that associates to each "black", not associated with label "laptop", the attribute "owner" of "lake".
Answer: black_lake(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).
black_lake(X,Z):-black(X,_,Y),lake(Y,Z),label(X,laptop).
assign(X,Z):-black_lake(X,Z).
retum(X,Z),not black(X,_,_).
retum(X,Z),black(X,_,_).
 quíname(X,Z),not black(X,_,_).
 quíname(X,Z),black(X,_,_).
retum(X,Z),black(X,_,_).


unique_rules: 
['black_lake(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).', 'black_lake(X,Z):-black(X,_,Y),lake(Y,Z),label(X,laptop).', 'assign(X,Z):-black_lake(X,Z).']

parsed: 
black_lake(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).

jaccard: 1.0


170
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "storm" as the transitive closure of predicate "white". Then, assign exactly one label from the set chair,roof,flower,desk,wall,laptop,storm,cloud to each element in "storm".

answer from file: 
storm(X,Y):-white(X,Y).
storm(X,Y):-white(X,Z),storm(Z,Y).
assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk")|assign(X,"wall")|assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud"):-storm(X,_).

facts: 
white(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "storm" as the transitive closure of predicate "white". Then, assign exactly one label from the set chair,roof,flower,desk,wall,laptop,storm,cloud to each element in "storm".
Answer: storm(X,Y):-white(X,Y).
storm(X,Y):-white(X,Z),storm(Z,Y).
assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk")|assign(X,"wall")|assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud"):-storm(X,_).
retum:
assign(X,"city")|assign(X,"age")|assign(X,"name")|assign(X,"price")|assign(X,"description")|assign(X,"author")|assign(X,"height")|assign

unique_rules: 
['storm(X,Y):-white(X,Y).', 'storm(X,Y):-white(X,Z),storm(Z,Y).', 'assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk")|assign(X,"wall")|assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud"):-storm(X,_).']

parsed: 
storm(X,Y):-white(X,Y).
storm(X,Y):-white(X,Z),storm(Z,Y).
assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk")|assign(X,"wall")|assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud"):-storm(X,_).

jaccard: 1.0


171
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate moscow. The labels are desk,butterfly,cloud,flower,wall. Consider only the predicate moscow not associated with label "roof".

answer from file: 
assign(X,"desk")|assign(X,"butterfly")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-moscow(X, _), not moscow(X, roof).

facts: 
moscow(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate moscow. The labels are desk,butterfly,cloud,flower,wall. Consider only the predicate moscow not associated with label "roof".
Answer: assign(X,"desk")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-moscow(X, _), not moscow(X, roof).
```
assign(X,"description")|assign(X,"height")|assign(X,"price")|assign(X,"age"):-florence(X).
```
The predicate florence has label "description".
The labels are description,height,price,age,shape,city,author,name,age,price,description,creator,height,shape,city,name,age,price,description,author,age,description,creator

unique_rules: 
['assign(X,"desk")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-moscow(X, _), not moscow(X, roof).', 'assign(X,"description")|assign(X,"height")|assign(X,"price")|assign(X,"age"):-florence(X).']

parsed: 
assign(X,"desk")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-moscow(X, _), not moscow(X, roof).

jaccard: 1.0


172
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate darkmagenta and labels strength, weight having label weight different than 20. The labels are wall,butterfly.

answer from file: 
assign(X,"wall")|assign(X,"butterfly"):-darkmagenta(X, Y), Y!=20 .

facts: 
darkmagenta(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate darkmagenta and labels strength, weight having label weight different than 20. The labels are wall,butterfly.
Answer: assign(X,"wall")|assign(X," venant")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"author")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"author") :-darkMagenta(X, Y), Y!=20 .
```
The predicate darkMagenta has fields name,description,price,author,height,city,description,author,age,price,height,city,description,author

unique_rules: 
['assign(X,"wall")|assign(X," venant")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"author")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"author") :-darkMagenta(X, Y), Y!=20 .']

parsed: 
assign(X,"wall")|assign(X," venant")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"author")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"author") :-darkMagenta(X, Y), Y!=20 .

jaccard: 0.0


173
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate desk. The labels are desk,storm,wall,butterfly,chair,laptop,flower,roof,cloud.  Then, filter and return only the elements assigned to label chair.".

answer from file: 
assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X,"butterfly")|assign(X,"chair")|assign(X,"laptop")|assign(X,"flower")|assign(X,"roof")|assign(X,"cloud"):-desk(X).
select(X):-assign(X, "chair").

facts: 
desk(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate desk. The labels are desk,storm,wall,butterfly,chair,laptop,flower,roof,cloud.  Then, filter and return only the elements assigned to label chair.".
Answer: assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X," arrivant")|assign(X,"chair")|assign(X," cœurs")|assign(X,"florence")|assign(X,"roof")|assign(X,"cloud"):-desk(X).
select(X):-assign(X, "chair").
```
The predicate desk has label "description", and the predicate chair has label "shape". So, the predicate assign has label "description" only where "description" is lower than 75.
Then, select only the elements assigned to label "description".
The predicate select has label "description" only where "

unique_rules: 
['assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X," arrivant")|assign(X,"chair")|assign(X," cœurs")|assign(X,"florence")|assign(X,"roof")|assign(X,"cloud"):-desk(X).', 'select(X):-assign(X, "chair").']

parsed: 
assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X," arrivant")|assign(X,"chair")|assign(X," cœurs")|assign(X,"florence")|assign(X,"roof")|assign(X,"cloud"):-desk(X).
select(X):-assign(X, "chair").

jaccard: 1.0


174
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "singapore" and "delhi". However, avoid any combination where predicate "singapore" has label "butterfly".

answer from file: 
combination(X,Y):-singapore(X, _),delhi(Y), not singapore(X, butterfly).

facts: 
singapore(1..4, 1..4).delhi(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "singapore" and "delhi". However, avoid any combination where predicate "singapore" has label "butterfly".
Answer: combination(X,Y):-singapore(X, _),delhi(Y), not singapore(X, butterfly).
combination(X,Y):-singapore(X, _),delhi(Y).
assign(X, "element")|assign(X, "city")|assign(X, "description")|assign(X, "price")|assign(X, "age")|assign(X, "shape")|assign(X, "height")|assign(X, "author")|assign(X, "city_name")|assign(X, "description_name").
retum(X, Y), not combination(X, Y).
retum(X,

unique_rules: 
['combination(X,Y):-singapore(X, _),delhi(Y), not singapore(X, butterfly).', 'combination(X,Y):-singapore(X, _),delhi(Y).']

parsed: 
combination(X,Y):-singapore(X, _),delhi(Y), not singapore(X, butterfly).

jaccard: 1.0


175
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "white" having fields "ID","lake","roofID", and the predicate "roof" having fields "ID","surname". Define a predicate "white_roof" that associates to each "white" the "surname" of "roof" only where "surname" is different than 8.

answer from file: 
white_roof(X,Z):-white(X,_,Y),roof(Y,Z), Z!=8.

facts: 
white("ID","lake","roofID").roof("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "white" having fields "ID","lake","roofID", and the predicate "roof" having fields "ID","surname". Define a predicate "white_roof" that associates to each "white" the "surname" of "roof" only where "surname" is different than 8.
Answer: white_roof(X,Z):-white(X,_,Y),roof(Y,Z), Z!=8.
white_roof(X,_,Y):-white(X,_,Y),roof(Y,Z), Z==8.

unique_rules: 
['white_roof(X,Z):-white(X,_,Y),roof(Y,Z), Z!=8.', 'white_roof(X,_,Y):-white(X,_,Y),roof(Y,Z), Z==8.']

parsed: 
white_roof(X,Z):-white(X,_,Y),roof(Y,Z), Z!=8.

jaccard: 1.0


176
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "roof" having fields "ID","surname","stormID", and the predicate "storm" having fields "ID","hair". Define a predicate "roof_storm" that associates to each "roof", not associated with label "laptop", the attribute "hair" of "storm".

answer from file: 
roof_storm(X,Z):-roof(X,_,Y),storm(Y,Z),not roof(X,laptop,_).

facts: 
roof("ID","surname","stormID").storm("ID","hair").

generated: 
Write an ASP program for the following problem. Consider predicate "roof" having fields "ID","surname","stormID", and the predicate "storm" having fields "ID","hair". Define a predicate "roof_storm" that associates to each "roof", not associated with label "laptop", the attribute "hair" of "storm".
Answer: roof_storm(X,Z):-roof(X,_,Y),storm(Y,Z),not roof(X,laptop,_).
 ángulo(X,Y):-roof(X,_,Y),age(Y,_,Z),not roof(X,_,Z).
 ángulo(X,Y):-roof(X,_,Y),age(Y,_,Z),retum(Z).
 ángulo(X,Y):-roof(X,_,Y),age(Y,_,Z),name(Z).
 ángulo(X,Y):-roof(X,_,Y),age(Y,_,Z),price(Z).
 ángulo(X,Y):-roof(

unique_rules: 
['roof_storm(X,Z):-roof(X,_,Y),storm(Y,Z),not roof(X,laptop,_).', 'ángulo(X,Y):-roof(X,_,Y),age(Y,_,Z),not roof(X,_,Z).', 'ángulo(X,Y):-roof(X,_,Y),age(Y,_,Z),retum(Z).', 'ángulo(X,Y):-roof(X,_,Y),age(Y,_,Z),name(Z).', 'ángulo(X,Y):-roof(X,_,Y),age(Y,_,Z),price(Z).', 'ángulo(X,Y):-roof(.']

parsed: 
roof_storm(X,Z):-roof(X,_,Y),storm(Y,Z),not roof(X,laptop,_).

jaccard: 1.0


177
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "cloud" as the transitive closure of predicate "cairo". Then, assign exactly one label from the set chair,butterfly,cloud,flower,wall,laptop,desk,storm to each element in "cloud".

answer from file: 
cloud(X,Y):-cairo(X,Y).
cloud(X,Y):-cairo(X,Z),cloud(Z,Y).
assign(X,"chair")|assign(X,"butterfly")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall")|assign(X,"laptop")|assign(X,"desk")|assign(X,"storm"):-cloud(X,_).

facts: 
cairo(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "cloud" as the transitive closure of predicate "cairo". Then, assign exactly one label from the set chair,butterfly,cloud,flower,wall,laptop,desk,storm to each element in "cloud".
Answer: cloud(X,Y):-cairo(X,Y).
cloud(X,Y):-cairo(X,Z),cloud(Z,Y).
assign(X,"chair")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall")|assign(X,"desk")|assign(X,"storm"):-cloud(X,_).
retum:assign(X,"city").
retum:assign(X,"age").
retum:assign(X,"name").
retum:assign(X,"price").
retum:assign(X,"description").
retum:assign(X,"shape").
retum:assign(X,"

unique_rules: 
['cloud(X,Y):-cairo(X,Y).', 'cloud(X,Y):-cairo(X,Z),cloud(Z,Y).', 'assign(X,"chair")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall")|assign(X,"desk")|assign(X,"storm"):-cloud(X,_).']

parsed: 
cloud(X,Y):-cairo(X,Y).
cloud(X,Y):-cairo(X,Z),cloud(Z,Y).
assign(X,"chair")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall")|assign(X,"desk")|assign(X,"storm"):-cloud(X,_).

jaccard: 0.0


178
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate hair. The labels are chair,storm,desk. Consider only the predicate hair not associated with label "storm".

answer from file: 
assign(X,"chair")|assign(X,"storm")|assign(X,"desk"):-hair(X, _), not hair(X, storm).

facts: 
hair(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate hair. The labels are chair,storm,desk. Consider only the predicate hair not associated with label "storm".
Answer: assign(X,"chair")|assign(X,"storm")|assign(X,"desk"):-hair(X, _), not hair(X, storm).
```
assign(X," felicità")|assign(X,"city")|assign(X,"age"):-hair(X, _).
```
The predicate "hair" has label "age", and the predicate "city" has label "age". So, the predicate "assign" has label "age" only where "age" is not associated with label "city".

unique_rules: 
['assign(X,"chair")|assign(X,"storm")|assign(X,"desk"):-hair(X, _), not hair(X, storm).', 'assign(X," felicità")|assign(X,"city")|assign(X,"age"):-hair(X, _).']

parsed: 
assign(X,"chair")|assign(X,"storm")|assign(X,"desk"):-hair(X, _), not hair(X, storm).

jaccard: 1.0


179
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate chair and labels hair, owner having label owner different than 52. The labels are wall,storm.

answer from file: 
assign(X,"wall")|assign(X,"storm"):-chair(X, Y), Y!=52 .

facts: 
chair(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate chair and labels hair, owner having label owner different than 52. The labels are wall,storm.
Answer: assign(X,"wall")|assign(X,"storm"):-chair(X, Y), Y!=52 .
assign(X,"wall")|assign(X,"storm"):-chair(X, Y), Y==52 .
 köp.
``` italienne
assign(X,"wall")|assign(X,"storm"):-chair(X, Y), Y!=52 .
assign(X,"wall")|assign(X,"storm"):-chair(X, Y), Y==52 .
 köp.
```
The predicate "chair" has label "height", and the labels "height","price","age","description","author","city","name","shape","creator","

unique_rules: 
['assign(X,"wall")|assign(X,"storm"):-chair(X, Y), Y!=52 .', 'assign(X,"wall")|assign(X,"storm"):-chair(X, Y), Y==52 .']

parsed: 
assign(X,"wall")|assign(X,"storm"):-chair(X, Y), Y!=52 .

jaccard: 1.0


180
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate cairo. The labels are roof,storm,wall,flower,butterfly,cloud,laptop,desk.  Then, filter and return only the elements assigned to label wall.".

answer from file: 
assign(X,"roof")|assign(X,"storm")|assign(X,"wall")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"cloud")|assign(X,"laptop")|assign(X,"desk"):-cairo(X).
select(X):-assign(X, "wall").

facts: 
cairo(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate cairo. The labels are roof,storm,wall,flower,butterfly,cloud,laptop,desk.  Then, filter and return only the elements assigned to label wall.".
Answer: assign(X," felicità")|assign(X,"price")|assign(X,"city")|assign(X,"author")|assign(X,"description")|assign(X,"age")|assign(X,"name")|assign(X,"shape")|retum(X, "wall").
select(X):-assign(X, "wall").
```
The predicate cairo has label "description", and the label "description" has label "shape". So, the predicate cairo has label "shape" only where "shape" is lower than 75.
The predicateretum has label "shape" only where "shape" is lower than 75.
So, the predicate

unique_rules: 
['select(X):-assign(X, "wall").']

parsed: 
select(X):-assign(X, "wall").

jaccard: 0.0


181
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "delhi" and "lightblue". However, avoid any combination where predicate "delhi" has label "laptop".

answer from file: 
combination(X,Y):-delhi(X, _),lightblue(Y), not delhi(X, laptop).

facts: 
delhi(1..4, 1..4).lightblue(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "delhi" and "lightblue". However, avoid any combination where predicate "delhi" has label "laptop".
Answer: combination(X,Y):-delhi(X, _),lightblue(Y), not delhi(X, _).
combination(X,Y):-delhi(X, _),lightblue(Y).
```
Combinations are expressed by predicate "combination".
However, avoid any combination where predicate "delhi" has label "moto".
Result: combination(X,Y):-delhi(X, _),lightblue(Y), not delhi(X, moto).
combination(X,Y):-delhi(X, _),lightblue(Y).
```
The "not" predicate is used to avoid any combination where predicate "delhi" has label "moto".
The

unique_rules: 
['combination(X,Y):-delhi(X, _),lightblue(Y), not delhi(X, _).', 'combination(X,Y):-delhi(X, _),lightblue(Y).', 'Result: combination(X,Y):-delhi(X, _),lightblue(Y), not delhi(X, moto).']

parsed: 
combination(X,Y):-delhi(X, _),lightblue(Y), not delhi(X, _).

jaccard: 0.0


182
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "lightblue" having fields "ID","singaporeID","surname", and the predicate "singapore" having fields "ID","weight". Define a predicate "lightblue_singapore" that associates to each "lightblue" the "weight" of "singapore" only where "weight" is different than 50.

answer from file: 
lightblue_singapore(X,Z):-lightblue(X,Y,_),singapore(Y,Z), Z!=50.

facts: 
lightblue("ID","singaporeID","surname").singapore("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "lightblue" having fields "ID","singaporeID","surname", and the predicate "singapore" having fields "ID","weight". Define a predicate "lightblue_singapore" that associates to each "lightblue" the "weight" of "singapore" only where "weight" is different than 50.
Answer: lightblue_singapore(X,Z):-lightblue(X,Y,_),singapore(Y,Z), Z!=50.
lightblue_singapore(X,Y,_):-lightblue(X,Y,_),singapore(Y,Z), Z==50.
retum(X,Y,_),lightblue(X,Y,_),name(Y,_,Z), Z!=50.
retum(X,Y,_),lightblue(X,Y,_),name(Y,_,Z), Z==50.
retum(X,Y,_),lightblue(X,Y,_),name(Y,_,Z), Z==50.


unique_rules: 
['lightblue_singapore(X,Z):-lightblue(X,Y,_),singapore(Y,Z), Z!=50.', 'lightblue_singapore(X,Y,_):-lightblue(X,Y,_),singapore(Y,Z), Z==50.']

parsed: 
lightblue_singapore(X,Z):-lightblue(X,Y,_),singapore(Y,Z), Z!=50.

jaccard: 1.0


183
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "owner" having fields "ID","quality","cloudID", and the predicate "cloud" having fields "ID","owner". Define a predicate "owner_cloud" that associates to each "owner", not associated with label "flower", the attribute "owner" of "cloud".

answer from file: 
owner_cloud(X,Z):-owner(X,_,Y),cloud(Y,Z),not owner(X,flower,_).

facts: 
owner("ID","quality","cloudID").cloud("ID","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "owner" having fields "ID","quality","cloudID", and the predicate "cloud" having fields "ID","owner". Define a predicate "owner_cloud" that associates to each "owner", not associated with label "flower", the attribute "owner" of "cloud".
Answer: owner_cloud(X,Z):-owner(X,_,Y),cloud(Y,Z),not owner(X,flower,_).
owner_cloud(X,Z):-owner(X,_,Y),cloud(Y,Z),label(X,flower).
assign(X,Z):-owner_cloud(X,Z).
retum(X,Z),not owner(X,_,_).
retum(X,_,Y),owner(X,_,Z).
 quíname(X,Z),not owner(X,_,_).
 quíname(X,Z),label(X,height).
 quíname(X,Z),author(X,_,Z).

unique_rules: 
['owner_cloud(X,Z):-owner(X,_,Y),cloud(Y,Z),not owner(X,flower,_).', 'owner_cloud(X,Z):-owner(X,_,Y),cloud(Y,Z),label(X,flower).', 'assign(X,Z):-owner_cloud(X,Z).']

parsed: 
owner_cloud(X,Z):-owner(X,_,Y),cloud(Y,Z),not owner(X,flower,_).

jaccard: 1.0


184
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "butterfly" as the transitive closure of predicate "pink". Then, assign exactly one label from the set chair,butterfly,laptop to each element in "butterfly".

answer from file: 
butterfly(X,Y):-pink(X,Y).
butterfly(X,Y):-pink(X,Z),butterfly(Z,Y).
assign(X,"chair")|assign(X,"butterfly")|assign(X,"laptop"):-butterfly(X,_).

facts: 
pink(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "butterfly" as the transitive closure of predicate "pink". Then, assign exactly one label from the set chair,butterfly,laptop to each element in "butterfly".
Answer: butterfly(X,Y):-pink(X,Y).
 écouter(X,Y):-pink(X,Y).
assign(X,"chair")|assign(X," arrivant")|assign(X,"height") :-butterfly(X,_).
assign(X,"height") :-florence(X,Y),assign(Y,Z),retum(Z,X).
retum(X,Y):-florence(X,Y).
retum(X,Y):-florence(X,Z),assign(Z,Y).
retum(X,Y):-florence(X,Z),assign(Z,Y).
retum(X,Y):-florence(X,Z

unique_rules: 
['butterfly(X,Y):-pink(X,Y).', 'écouter(X,Y):-pink(X,Y).', 'assign(X,"chair")|assign(X," arrivant")|assign(X,"height") :-butterfly(X,_).', 'assign(X,"height") :-florence(X,Y),assign(Y,Z),retum(Z,X).', 'retum(X,Y):-florence(X,Y).', 'retum(X,Y):-florence(X,Z),assign(Z,Y).', 'retum(X,Y):-florence(X,Z.']

parsed: 
butterfly(X,Y):-pink(X,Y).
écouter(X,Y):-pink(X,Y).
assign(X,"chair")|assign(X," arrivant")|assign(X,"height") :-butterfly(X,_).

jaccard: 0.0


185
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate darkmagenta. The labels are chair,butterfly,cloud,flower,desk,roof,wall. Consider only the predicate darkmagenta not associated with label "flower".

answer from file: 
assign(X,"chair")|assign(X,"butterfly")|assign(X,"cloud")|assign(X,"flower")|assign(X,"desk")|assign(X,"roof")|assign(X,"wall"):-darkmagenta(X, _), not darkmagenta(X, flower).

facts: 
darkmagenta(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate darkmagenta. The labels are chair,butterfly,cloud,flower,desk,roof,wall. Consider only the predicate darkmagenta not associated with label "flower".
Answer: assign(X,"chair")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"desk")|assign(X,"roof")|assign(X,"wall"):-darkmagenta(X, _), not darkmagenta(X, flower).
``` italienne
assign(X,"chair")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"desk")|assign(X,"roof")|assign(X,"wall"):-darkmagenta(X, _), not darkmagenta(X, flower).
```

unique_rules: 
['assign(X,"chair")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"desk")|assign(X,"roof")|assign(X,"wall"):-darkmagenta(X, _), not darkmagenta(X, flower).']

parsed: 
assign(X,"chair")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"desk")|assign(X,"roof")|assign(X,"wall"):-darkmagenta(X, _), not darkmagenta(X, flower).

jaccard: 1.0


186
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate lake and labels hair, owner having label owner different than 15. The labels are laptop,butterfly,wall,flower,storm,desk,cloud.

answer from file: 
assign(X,"laptop")|assign(X,"butterfly")|assign(X,"wall")|assign(X,"flower")|assign(X,"storm")|assign(X,"desk")|assign(X,"cloud"):-lake(X, Y), Y!=15 .

facts: 
lake(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate lake and labels hair, owner having label owner different than 15. The labels are laptop,butterfly,wall,flower,storm,desk,cloud.
Answer: assign(X," arrivant")|assign(X," felicità")|assign(X,"wall")|assign(X,"florence")|assign(X,"storm")|assign(X,"desk")|assign(X,"cloud"):-lake(X, Y), Y!=15 .
``` italienne
assign(X," arrivant")|assign(X," felicità")|assign(X,"wall")|assign(X,"florence")|assign(X,"storm")|assign(X,"desk")|assign(X,"cloud"):-lake(X, Y), Y!=15 .
```

unique_rules: 
['assign(X," arrivant")|assign(X," felicità")|assign(X,"wall")|assign(X,"florence")|assign(X,"storm")|assign(X,"desk")|assign(X,"cloud"):-lake(X, Y), Y!=15 .']

parsed: 
assign(X," arrivant")|assign(X," felicità")|assign(X,"wall")|assign(X,"florence")|assign(X,"storm")|assign(X,"desk")|assign(X,"cloud"):-lake(X, Y), Y!=15 .

jaccard: 1.0


187
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate storm. The labels are roof,butterfly,chair,desk,laptop,storm,cloud,wall,flower.  Then, filter and return only the elements assigned to label roof.".

answer from file: 
assign(X,"roof")|assign(X,"butterfly")|assign(X,"chair")|assign(X,"desk")|assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud")|assign(X,"wall")|assign(X,"flower"):-storm(X).
select(X):-assign(X, "roof").

facts: 
storm(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate storm. The labels are roof,butterfly,chair,desk,laptop,storm,cloud,wall,flower.  Then, filter and return only the elements assigned to label roof.".
Answer: assign(X," felicità")|assign(X,"author")|assign(X,"city")|assign(X,"description")|assign(X,"price")|assign(X,"age")|assign(X,"name")|assign(X,"shape")|assign(X,"height")|retum(X, " felicità").
select(X):-assign(X, " felicità").
retum(X, " felicità").
 köp: for (X in storm) do assign(X, " felicità").
 köp: for (X in storm) doretum(X, " felicità").
 köp: for (X in storm) do assign(X, "author").
 köp: for (X

unique_rules: 
['select(X):-assign(X, " felicità").']

parsed: 
select(X):-assign(X, " felicità").

jaccard: 0.0


188
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "darkmagenta" and "strength". However, avoid any combination where predicate "darkmagenta" has label "laptop".

answer from file: 
combination(X,Y):-darkmagenta(X, _),strength(Y), not darkmagenta(X, laptop).

facts: 
darkmagenta(1..4, 1..4).strength(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "darkmagenta" and "strength". However, avoid any combination where predicate "darkmagenta" has label "laptop".
Answer: combination(X,Y):-darkmagenta(X, _),strength(Y), not darkmagenta(X, _).
combination(X,Y):-darkmagenta(X, _),strength(Y).
```
Combinations are expressed by predicate "combination".
However, avoid any combination where predicate "darkmagenta" has label "moto".
Result: combination(X,Y):-darkmagenta(X, _),strength(Y), not darkmagenta(X, moto).
combination(X,Y):-darkmagenta(X, _),strength(Y).
```
The "not darkmagenta(X, moto)" predicate ensures that only the combinations where "darkmagenta" has label "moto"

unique_rules: 
['combination(X,Y):-darkmagenta(X, _),strength(Y), not darkmagenta(X, _).', 'combination(X,Y):-darkmagenta(X, _),strength(Y).', 'Result: combination(X,Y):-darkmagenta(X, _),strength(Y), not darkmagenta(X, moto).']

parsed: 
combination(X,Y):-darkmagenta(X, _),strength(Y), not darkmagenta(X, _).

jaccard: 0.0


189
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "cosenza" having fields "ID","hair","chicagoID", and the predicate "chicago" having fields "ID","quality". Define a predicate "cosenza_chicago" that associates to each "cosenza" the "quality" of "chicago" only where "quality" is different than 68.

answer from file: 
cosenza_chicago(X,Z):-cosenza(X,_,Y),chicago(Y,Z), Z!=68.

facts: 
cosenza("ID","hair","chicagoID").chicago("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "cosenza" having fields "ID","hair","chicagoID", and the predicate "chicago" having fields "ID","quality". Define a predicate "cosenza_chicago" that associates to each "cosenza" the "quality" of "chicago" only where "quality" is different than 68.
Answer: cosenza_chicago(X,Z):-cosenza(X,_,Y),chicago(Y,Z), Z!=68.
cosenza_chicago(X,_,Y):-cosenza(X,_,Y),chicago(Y,Z), Z==68.
assign(X,"name")|assign(X,"price")|assign(X,"city")|assign(X,"description")|assign(X,"height")|assign(X,"age")|assign(X,"author")|assign(X,"creator")|assign(X,"descriptionID")|assign(X,"creatorID")|assign(X,"descriptionName")|assign(X,"creatorName")|

unique_rules: 
['cosenza_chicago(X,Z):-cosenza(X,_,Y),chicago(Y,Z), Z!=68.', 'cosenza_chicago(X,_,Y):-cosenza(X,_,Y),chicago(Y,Z), Z==68.']

parsed: 
cosenza_chicago(X,Z):-cosenza(X,_,Y),chicago(Y,Z), Z!=68.

jaccard: 1.0


190
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "cloud" having fields "ID","strength","darkmagentaID", and the predicate "darkmagenta" having fields "ID","strength". Define a predicate "cloud_darkmagenta" that associates to each "cloud", not associated with label "flower", the attribute "strength" of "darkmagenta".

answer from file: 
cloud_darkmagenta(X,Z):-cloud(X,_,Y),darkmagenta(Y,Z),not cloud(X,flower,_).

facts: 
cloud("ID","strength","darkmagentaID").darkmagenta("ID","strength").

generated: 
Write an ASP program for the following problem. Consider predicate "cloud" having fields "ID","strength","darkmagentaID", and the predicate "darkmagenta" having fields "ID","strength". Define a predicate "cloud_darkmagenta" that associates to each "cloud", not associated with label "flower", the attribute "strength" of "darkmagenta".
Answer: cloud_darkmagenta(X,Z):-cloud(X,_,Y),darkmagenta(Y,Z),not cloud(X,flower,_).
cloud_darkmagenta(X,Z):-cloud(X,_,Y),darkmagenta(Y,Z),cloud(X,flower,_) .
assign(X,Z):-cloud_darkmagenta(X,Z).
retum(X,Z):-cloud(X,_,Y),darkMagenta(Y,Z).
retum(X,Z):-cloud(X,_,Y),darkMagenta(Y,Z),not cloud(X,_,_),name(X,_,_).
assign(X,Z):-cloud(X,_,

unique_rules: 
['cloud_darkmagenta(X,Z):-cloud(X,_,Y),darkmagenta(Y,Z),not cloud(X,flower,_).', 'cloud_darkmagenta(X,Z):-cloud(X,_,Y),darkmagenta(Y,Z),cloud(X,flower,_) .', 'assign(X,Z):-cloud_darkmagenta(X,Z).', 'retum(X,Z):-cloud(X,_,Y),darkMagenta(Y,Z).', 'retum(X,Z):-cloud(X,_,Y),darkMagenta(Y,Z),not cloud(X,_,_),name(X,_,_).', 'assign(X,Z):-cloud(X,_,.']

parsed: 
cloud_darkmagenta(X,Z):-cloud(X,_,Y),darkmagenta(Y,Z),not cloud(X,flower,_).

jaccard: 1.0


191
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "surname" as the transitive closure of predicate "cloud". Then, assign exactly one label from the set desk,laptop,wall,cloud,butterfly,storm,chair,flower,roof to each element in "surname".

answer from file: 
surname(X,Y):-cloud(X,Y).
surname(X,Y):-cloud(X,Z),surname(Z,Y).
assign(X,"desk")|assign(X,"laptop")|assign(X,"wall")|assign(X,"cloud")|assign(X,"butterfly")|assign(X,"storm")|assign(X,"chair")|assign(X,"flower")|assign(X,"roof"):-surname(X,_).

facts: 
cloud(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "surname" as the transitive closure of predicate "cloud". Then, assign exactly one label from the set desk,laptop,wall,cloud,butterfly,storm,chair,flower,roof to each element in "surname".
Answer: surname(X,Y):-cloud(X,Y).
surname(X,Y):-cloud(X,Z),surname(Z,Y).
assign(X,"desk")|assign(X,"laptop")|assign(X,"wall")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"shape")|assign(X,"city")|assign(X,"name")|assign(X,"age"):-surname(X,_).
retum(X,Y):-assign(X,Y).
retum(X,Y):-assign(X,Z),retum(Z,Y).
retum(X,Y):-assign(X,Z),retum(

unique_rules: 
['surname(X,Y):-cloud(X,Y).', 'surname(X,Y):-cloud(X,Z),surname(Z,Y).', 'assign(X,"desk")|assign(X,"laptop")|assign(X,"wall")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"shape")|assign(X,"city")|assign(X,"name")|assign(X,"age"):-surname(X,_).', 'retum(X,Y):-assign(X,Y).', 'retum(X,Y):-assign(X,Z),retum(Z,Y).', 'retum(X,Y):-assign(X,Z),retum(.']

parsed: 
surname(X,Y):-cloud(X,Y).
surname(X,Y):-cloud(X,Z),surname(Z,Y).
assign(X,"desk")|assign(X,"laptop")|assign(X,"wall")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"shape")|assign(X,"city")|assign(X,"name")|assign(X,"age"):-surname(X,_).

jaccard: 0.0


192
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate storm. The labels are desk,wall,flower. Consider only the predicate storm not associated with label "chair".

answer from file: 
assign(X,"desk")|assign(X,"wall")|assign(X,"flower"):-storm(X, _), not storm(X, chair).

facts: 
storm(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate storm. The labels are desk,wall,flower. Consider only the predicate storm not associated with label "chair".
Answer: assign(X,"desk")|assign(X,"wall")|assign(X,"flower"):-storm(X, _), not storm(X, chair).
```
assign(X,"description")|assign(X,"height")|assign(X,"price"):-storm(X, _).
```
Explanation:
The predicate "florence" associates to each "description" the "price" of "height".
The predicate "price" associates to each "description" the "height" of "height".
The predicate "height" associates to each "description" the "price" of "description".
The predicate "description" associates to each "description" the "height" of

unique_rules: 
['assign(X,"desk")|assign(X,"wall")|assign(X,"flower"):-storm(X, _), not storm(X, chair).', 'assign(X,"description")|assign(X,"height")|assign(X,"price"):-storm(X, _).']

parsed: 
assign(X,"desk")|assign(X,"wall")|assign(X,"flower"):-storm(X, _), not storm(X, chair).

jaccard: 1.0


193
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate quality and labels hair, owner having label owner different than 84. The labels are roof,wall.

answer from file: 
assign(X,"roof")|assign(X,"wall"):-quality(X, Y), Y!=84 .

facts: 
quality(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate quality and labels hair, owner having label owner different than 84. The labels are roof,wall.
Answer: assign(X," felicità")|assign(X,"height")|assign(X,"price")|assign(X,"author")|assign(X,"city")|assign(X,"description")|assign(X,"age")|assign(X,"name")|assign(X,"shape")|assign(X,"height")|assign(X,"price")|assign(X,"author")|assign(X,"city")|assign(X,"description")|assign(X,"age")|assign(X,"name")|assign(X,"shape") :-quality(X, Y), Y!=84 .
 köp:assign(X," felicità")|assign(X,"height")

unique_rules: 
['assign(X," felicità")|assign(X,"height")|assign(X,"price")|assign(X,"author")|assign(X,"city")|assign(X,"description")|assign(X,"age")|assign(X,"name")|assign(X,"shape")|assign(X,"height")|assign(X,"price")|assign(X,"author")|assign(X,"city")|assign(X,"description")|assign(X,"age")|assign(X,"name")|assign(X,"shape") :-quality(X, Y), Y!=84 .']

parsed: 
assign(X," felicità")|assign(X,"height")|assign(X,"price")|assign(X,"author")|assign(X,"city")|assign(X,"description")|assign(X,"age")|assign(X,"name")|assign(X,"shape")|assign(X,"height")|assign(X,"price")|assign(X,"author")|assign(X,"city")|assign(X,"description")|assign(X,"age")|assign(X,"name")|assign(X,"shape") :-quality(X, Y), Y!=84 .

jaccard: 0.0


194
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate moscow. The labels are roof,chair,butterfly,wall,storm,laptop,desk.  Then, filter and return only the elements assigned to label storm.".

answer from file: 
assign(X,"roof")|assign(X,"chair")|assign(X,"butterfly")|assign(X,"wall")|assign(X,"storm")|assign(X,"laptop")|assign(X,"desk"):-moscow(X).
select(X):-assign(X, "storm").

facts: 
moscow(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate moscow. The labels are roof,chair,butterfly,wall,storm,laptop,desk.  Then, filter and return only the elements assigned to label storm.".
Answer: assign(X," felicità")|assign(X,"price")|assign(X,"author")|assign(X,"city")|assign(X,"description")|assign(X,"age")|assign(X,"name")|retum(X, "storm").
select(X):-assign(X, "description").
retum(X, "description").
```
Assign(X," felicità")|Assign(X,"price")|Assign(X,"author")|Assign(X,"city")|Assign(X,"description")|Assign(X,"age")|Assign(X,"name")|retum(X, "description").
select(X):-assign(X, "description").

unique_rules: 
['select(X):-assign(X, "description").']

parsed: 
select(X):-assign(X, "description").

jaccard: 0.0


195
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "surname" and "delhi". However, avoid any combination where predicate "surname" has label "flower".

answer from file: 
combination(X,Y):-surname(X, _),delhi(Y), not surname(X, flower).

facts: 
surname(1..4, 1..4).delhi(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "surname" and "delhi". However, avoid any combination where predicate "surname" has label "flower".
Answer: combination(X,Y):-surname(X, _),delhi(Y), not surname(X, flower).
combination(X,Y):-surname(X, _),delhi(Y).
combination(X,Y):-surname(X, _),delhi(Y), label("color").
assign(X, Y)
retum(X, Y).
retum(X, Y), label("color").
retum(X, Y), label("age").
retum(X, Y), label("description").
retum(X, Y), label("height").
retum(X, Y), label("price").
retum(X, Y), label("shape").
retum(

unique_rules: 
['combination(X,Y):-surname(X, _),delhi(Y), not surname(X, flower).', 'combination(X,Y):-surname(X, _),delhi(Y).', 'combination(X,Y):-surname(X, _),delhi(Y), label("color").']

parsed: 
combination(X,Y):-surname(X, _),delhi(Y), not surname(X, flower).

jaccard: 1.0


196
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "mumbai" having fields "ID","cosenzaID","hair", and the predicate "cosenza" having fields "ID","quality". Define a predicate "mumbai_cosenza" that associates to each "mumbai" the "quality" of "cosenza" only where "quality" is different than 18.

answer from file: 
mumbai_cosenza(X,Z):-mumbai(X,Y,_),cosenza(Y,Z), Z!=18.

facts: 
mumbai("ID","cosenzaID","hair").cosenza("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "mumbai" having fields "ID","cosenzaID","hair", and the predicate "cosenza" having fields "ID","quality". Define a predicate "mumbai_cosenza" that associates to each "mumbai" the "quality" of "cosenza" only where "quality" is different than 18.
Answer: mumbai_cosenza(X,Z):-mumbai(X,Y,_),cosenza(Y,Z), Z!=18.
 ángulo(X,Y,Z):-mumbai(X,Y,_),cosenza(Y,Z), Z==18.
 ángulo(X,Y,Z):-mumbai(X,Y,_),cosenza(Y,Z), Z==19.
 ángulo(X,Y,Z):-mumbai(X,Y,_),cosenza(Y,Z), Z==20.
 ángulo(X,Y,Z):-mumbai(X,Y,_),cosenza(Y,Z), Z==2

unique_rules: 
['mumbai_cosenza(X,Z):-mumbai(X,Y,_),cosenza(Y,Z), Z!=18.', 'ángulo(X,Y,Z):-mumbai(X,Y,_),cosenza(Y,Z), Z==18.', 'ángulo(X,Y,Z):-mumbai(X,Y,_),cosenza(Y,Z), Z==19.', 'ángulo(X,Y,Z):-mumbai(X,Y,_),cosenza(Y,Z), Z==20.', 'ángulo(X,Y,Z):-mumbai(X,Y,_),cosenza(Y,Z), Z==2.']

parsed: 
mumbai_cosenza(X,Z):-mumbai(X,Y,_),cosenza(Y,Z), Z!=18.

jaccard: 1.0


197
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "laptop" having fields "ID","chairID","owner", and the predicate "chair" having fields "ID","owner". Define a predicate "laptop_chair" that associates to each "laptop", not associated with label "wall", the attribute "owner" of "chair".

answer from file: 
laptop_chair(X,Z):-laptop(X,Y,_),chair(Y,Z),not laptop(X,_,wall).

facts: 
laptop("ID","chairID","owner").chair("ID","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "laptop" having fields "ID","chairID","owner", and the predicate "chair" having fields "ID","owner". Define a predicate "laptop_chair" that associates to each "laptop", not associated with label "wall", the attribute "owner" of "chair".
Result: "laptop_chair"(X,Z):-laptop(X,Y,_),chair(Y,Z),not laptop(X,_,wall).
```
 arrivant: " auxquels"
retum: " italienne"
 espressione: " italienne"
author: "author"
age: 12
description: "description"
city: "city"
name: "name"
price: 12
shape: "shape"
height: 12
ageID: 12
ageName: "age"
cityID: 12
cityName: "city"
descriptionID: 12
descriptionName: "description"
authorID: 1

unique_rules: 
['Result: "laptop_chair"(X,Z):-laptop(X,Y,_),chair(Y,Z),not laptop(X,_,wall).']

parsed: 
Result: "laptop_chair"(X,Z):-laptop(X,Y,_),chair(Y,Z),not laptop(X,_,wall).

jaccard: 0.0


198
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "laptop" as the transitive closure of predicate "mumbai". Then, assign exactly one label from the set storm,cloud,roof to each element in "laptop".

answer from file: 
laptop(X,Y):-mumbai(X,Y).
laptop(X,Y):-mumbai(X,Z),laptop(Z,Y).
assign(X,"storm")|assign(X,"cloud")|assign(X,"roof"):-laptop(X,_).

facts: 
mumbai(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "laptop" as the transitive closure of predicate "mumbai". Then, assign exactly one label from the set storm,cloud,roof to each element in "laptop".
Answer: " arrivant"
 beden: " felicità", "city", "name", "price", "age", "shape", "author", "description", "height", "city", "age", "name", "price", "description", "height", "shape", "author", "age", "description", "height", "city", "age", "name", "price", "description", "height", "shape", "author", "age", "description", "height", "city", "age", "name", "price", "description", "height", "shape", "author", "age", "description", "height", "city", "age", "name", "price", "description",

unique_rules: 
[]

parsed: 


jaccard: 0.0


199
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lightblue. The labels are butterfly,laptop,chair,roof,flower,wall. Consider only the predicate lightblue not associated with label "wall".

answer from file: 
assign(X,"butterfly")|assign(X,"laptop")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"wall"):-lightblue(X, _), not lightblue(X, wall).

facts: 
lightblue(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lightblue. The labels are butterfly,laptop,chair,roof,flower,wall. Consider only the predicate lightblue not associated with label "wall".
Answer: assign(X," épargnac")|assign(X,"height")|assign(X,"price")|assign(X,"author")|assign(X,"city")|assign(X,"description")|assign(X,"name")|retum(X, Y), Y!=wall .
assign(X, "description")
retum(X, Y), Y!=wall .
 köp(X, Y), Y!=wall .
retum(X, Y), Y!=wall .
 kollektive(X, Y), Y!=wall .
 kollektive(X, Y), Y!=wall .
 kollektive(X, Y), Y!=wall .
 kollektive(X, Y), Y!=

unique_rules: 
[]

parsed: 


jaccard: 0.0


200
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate lake and labels hair, owner having label owner different than 54. The labels are flower,butterfly.

answer from file: 
assign(X,"flower")|assign(X,"butterfly"):-lake(X, Y), Y!=54 .

facts: 
lake(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate lake and labels hair, owner having label owner different than 54. The labels are flower,butterfly.
Answer: assign(X,"flower")|assign(X," arrivant")|assign(X,"height")|assign(X,"author")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"name")|assign(X,"shape")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description"), Y)
where Y is different than 54.
 beden(X, Y) :-assign(X, "description").
 beden(X, Y) :-assign(X, "height").


unique_rules: 
['beden(X, Y) :-assign(X, "description").', 'beden(X, Y) :-assign(X, "height").']

parsed: 
beden(X, Y) :-assign(X, "description").

jaccard: 0.0


201
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate pink. The labels are flower,wall,laptop.  Then, filter and return only the elements assigned to label laptop.".

answer from file: 
assign(X,"flower")|assign(X,"wall")|assign(X,"laptop"):-pink(X).
select(X):-assign(X, "laptop").

facts: 
pink(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate pink. The labels are flower,wall,laptop.  Then, filter and return only the elements assigned to label laptop.".
Answer: assign(X,"flower")|assign(X,"wall")|assign(X,"laptop"):-pink(X).
select(X):-assign(X, "laptop").
retum(X).
```
Assign(X,"florence")|Assign(X,"wall")|Assign(X,"age"):-pink(X).
select(X):-assign(X, "age").
retum(X).
```
The two solutions are equivalent. The predicate "pink" has label "age", and the predicate "age" has label "florence". So, the two solutions assign exactly a label among a given set of labels to a set of elements expressed by predicate "pink".
The

unique_rules: 
['assign(X,"flower")|assign(X,"wall")|assign(X,"laptop"):-pink(X).', 'select(X):-assign(X, "laptop").', 'Assign(X,"florence")|Assign(X,"wall")|Assign(X,"age"):-pink(X).', 'select(X):-assign(X, "age").']

parsed: 
assign(X,"flower")|assign(X,"wall")|assign(X,"laptop"):-pink(X).
select(X):-assign(X, "laptop").

jaccard: 1.0


202
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "pink" and "wall". However, avoid any combination where predicate "pink" has label "chair".

answer from file: 
combination(X,Y):-pink(X, _),wall(Y), not pink(X, chair).

facts: 
pink(1..4, 1..4).wall(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "pink" and "wall". However, avoid any combination where predicate "pink" has label "chair".
Answer: combination(X,Y):-pink(X, _),wall(Y), not pink(X, chair).
combination(X,Y):-pink(X, _),wall(Y).
combination(X,Y):-pink(X, chair),wall(Y).
```
Combinations are expressed by predicate "combination".
However, avoid any combination where predicate "pink" has label "chair".
The two sets are expressed by predicates "pink" and "wall".
So, the predicate "combination" has label "object".
And, the label "object" is not associated with "name".
So, the predicate "combination" has label "object".
Combinations are expressed by

unique_rules: 
['combination(X,Y):-pink(X, _),wall(Y), not pink(X, chair).', 'combination(X,Y):-pink(X, _),wall(Y).', 'combination(X,Y):-pink(X, chair),wall(Y).']

parsed: 
combination(X,Y):-pink(X, _),wall(Y), not pink(X, chair).

jaccard: 1.0


203
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "laptop" having fields "ID","surname","butterflyID", and the predicate "butterfly" having fields "ID","hair". Define a predicate "laptop_butterfly" that associates to each "laptop" the "hair" of "butterfly" only where "hair" is different than 64.

answer from file: 
laptop_butterfly(X,Z):-laptop(X,_,Y),butterfly(Y,Z), Z!=64.

facts: 
laptop("ID","surname","butterflyID").butterfly("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "laptop" having fields "ID","surname","butterflyID", and the predicate "butterfly" having fields "ID","hair". Define a predicate "laptop_butterfly" that associates to each "laptop" the "hair" of "butterfly" only where "hair" is different than 64.
Answer: laptop_ bréeder(X,Z):-laptop(X,_,Y),butterfly(Y,Z), Z!=64.
 assurent(X,Z):-laptop(X,_,Y),creator(Y,Z), Z!=64.
 auxquels(X,Z):-laptop(X,_,Y),creator(Y,Z), Z!=64.
retum(X,Z):-laptop(X,_,Y),creator(Y,Z), Z==64.
retum(X,Z):-creator(Y,Z), Z==64.
retum(X,Z):-creator(Y,Z), Z!=64,shape(X,Z).
retum(

unique_rules: 
['laptop_ bréeder(X,Z):-laptop(X,_,Y),butterfly(Y,Z), Z!=64.', 'assurent(X,Z):-laptop(X,_,Y),creator(Y,Z), Z!=64.', 'auxquels(X,Z):-laptop(X,_,Y),creator(Y,Z), Z!=64.', 'retum(X,Z):-laptop(X,_,Y),creator(Y,Z), Z==64.', 'retum(X,Z):-creator(Y,Z), Z==64.', 'retum(X,Z):-creator(Y,Z), Z!=64,shape(X,Z).']

parsed: 
laptop_ bréeder(X,Z):-laptop(X,_,Y),butterfly(Y,Z), Z!=64.

jaccard: 0.0


204
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "desk" having fields "ID","owner","strengthID", and the predicate "strength" having fields "ID","lake". Define a predicate "desk_strength" that associates to each "desk", not associated with label "butterfly", the attribute "lake" of "strength".

answer from file: 
desk_strength(X,Z):-desk(X,_,Y),strength(Y,Z),not desk(X,butterfly,_).

facts: 
desk("ID","owner","strengthID").strength("ID","lake").

generated: 
Write an ASP program for the following problem. Consider predicate "desk" having fields "ID","owner","strengthID", and the predicate "strength" having fields "ID","lake". Define a predicate "desk_strength" that associates to each "desk", not associated with label "butterfly", the attribute "lake" of "strength".
Result: desk_strength(X,Z):-desk(X,_,Y),strength(Y,Z),not desk(X,_,_).
 espressione(X,Z):-desk(X,_,Y),strength(Y,Z).
 espressione(X,_,Z):-desk(X,_,Y),not strength(Y,Z).
table(X,Z):- espressione(X,Z).
table(X,_,Z):- espressione(X,Z).
table(X,_,Z):-desk(X,_,Y),strength(Y,Z).
table(X,_,Z):-desk(X,_,Y),not strength(Y,Z).
retum(X,Z

unique_rules: 
['Result: desk_strength(X,Z):-desk(X,_,Y),strength(Y,Z),not desk(X,_,_).', 'espressione(X,Z):-desk(X,_,Y),strength(Y,Z).', 'espressione(X,_,Z):-desk(X,_,Y),not strength(Y,Z).', 'table(X,Z):- espressione(X,Z).', 'table(X,_,Z):- espressione(X,Z).', 'table(X,_,Z):-desk(X,_,Y),strength(Y,Z).', 'table(X,_,Z):-desk(X,_,Y),not strength(Y,Z).']

parsed: 
Result: desk_strength(X,Z):-desk(X,_,Y),strength(Y,Z),not desk(X,_,_).

jaccard: 0.0


205
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "black" as the transitive closure of predicate "mumbai". Then, assign exactly one label from the set wall,roof,cloud,chair,storm,flower to each element in "black".

answer from file: 
black(X,Y):-mumbai(X,Y).
black(X,Y):-mumbai(X,Z),black(Z,Y).
assign(X,"wall")|assign(X,"roof")|assign(X,"cloud")|assign(X,"chair")|assign(X,"storm")|assign(X,"flower"):-black(X,_).

facts: 
mumbai(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "black" as the transitive closure of predicate "mumbai". Then, assign exactly one label from the set wall,roof,cloud,chair,storm,flower to each element in "black".
Answer: black(X,Y):-mumbai(X,Y).
black(X,Y):-mumbai(X,Z),black(Z,Y).
assign(X,"wall")|assign(X,"roof")|assign(X,"cloud")|assign(X,"chair")|assign(X,"storm")|assign(X,"florence"):-black(X,_).
retum:assign(X,"florence").
retum:assign(X,"city").
retum:assign(X,"age").
retum:assign(X,"name").
retum:assign(X,"price").
retum:assign(X,"description").
retum:assign(X,"shape").


unique_rules: 
['black(X,Y):-mumbai(X,Y).', 'black(X,Y):-mumbai(X,Z),black(Z,Y).', 'assign(X,"wall")|assign(X,"roof")|assign(X,"cloud")|assign(X,"chair")|assign(X,"storm")|assign(X,"florence"):-black(X,_).']

parsed: 
black(X,Y):-mumbai(X,Y).
black(X,Y):-mumbai(X,Z),black(Z,Y).
assign(X,"wall")|assign(X,"roof")|assign(X,"cloud")|assign(X,"chair")|assign(X,"storm")|assign(X,"florence"):-black(X,_).

jaccard: 0.0


206
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate cosenza. The labels are desk,storm,wall,roof,laptop,butterfly,flower,cloud. Consider only the predicate cosenza not associated with label "butterfly".

answer from file: 
assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X,"roof")|assign(X,"laptop")|assign(X,"butterfly")|assign(X,"flower")|assign(X,"cloud"):-cosenza(X, _), not cosenza(X, butterfly).

facts: 
cosenza(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate cosenza. The labels are desk,storm,wall,roof,laptop,butterfly,flower,cloud. Consider only the predicate cosenza not associated with label "butterfly".
Answer: assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X,"roof")|assign(X,"laptop")|assign(X," arrivant")|assign(X,"author")|assign(X,"city")|assign(X,"description") :-cosenza(X, _), not cosenza(X, butterfly).
```
assign(X,"description") :-cosenza(X, _), not cosenza(X, butterfly).
```
Explanation:
The predicate "cosenza" has label "description", but not associated with label "author".
The predicate "description" has label "description", but not associated with label "

unique_rules: 
['assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X,"roof")|assign(X,"laptop")|assign(X," arrivant")|assign(X,"author")|assign(X,"city")|assign(X,"description") :-cosenza(X, _), not cosenza(X, butterfly).', 'assign(X,"description") :-cosenza(X, _), not cosenza(X, butterfly).']

parsed: 
assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X,"roof")|assign(X,"laptop")|assign(X," arrivant")|assign(X,"author")|assign(X,"city")|assign(X,"description") :-cosenza(X, _), not cosenza(X, butterfly).

jaccard: 0.0


207
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate lake and labels weight, quality having label quality different than 65. The labels are chair,desk,storm,flower,cloud.

answer from file: 
assign(X,"chair")|assign(X,"desk")|assign(X,"storm")|assign(X,"flower")|assign(X,"cloud"):-lake(X, Y), Y!=65 .

facts: 
lake(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate lake and labels weight, quality having label quality different than 65. The labels are chair,desk,storm,flower,cloud.
Answer: assign(X,"chair")|assign(X,"desk")|assign(X,"storm")|assign(X,"flower")|assign(X,"cloud"):-lake(X, Y), Y!=65 .
```
 köp:assign(X,"name")| köp:assign(X,"price")| köp:assign(X,"age")| köp:assign(X,"description"):-price(X, Y), Y!=65 .
```
The predicate "price" has label "description", and the predicate "description" has label "age".
So, the predicate "assign" has label "age" only where "age" is different than 65.
The

unique_rules: 
['assign(X,"chair")|assign(X,"desk")|assign(X,"storm")|assign(X,"flower")|assign(X,"cloud"):-lake(X, Y), Y!=65 .', 'köp:assign(X,"name")| köp:assign(X,"price")| köp:assign(X,"age")| köp:assign(X,"description"):-price(X, Y), Y!=65 .']

parsed: 
assign(X,"chair")|assign(X,"desk")|assign(X,"storm")|assign(X,"flower")|assign(X,"cloud"):-lake(X, Y), Y!=65 .

jaccard: 1.0


208
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate darkmagenta. The labels are storm,desk,laptop,butterfly,wall,cloud,flower,chair,roof.  Then, filter and return only the elements assigned to label butterfly.".

answer from file: 
assign(X,"storm")|assign(X,"desk")|assign(X,"laptop")|assign(X,"butterfly")|assign(X,"wall")|assign(X,"cloud")|assign(X,"flower")|assign(X,"chair")|assign(X,"roof"):-darkmagenta(X).
select(X):-assign(X, "butterfly").

facts: 
darkmagenta(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate darkmagenta. The labels are storm,desk,laptop,butterfly,wall,cloud,flower,chair,roof.  Then, filter and return only the elements assigned to label butterfly.".
Answer: assign(X,"storm")|assign(X,"desk")|assign(X,"laptop")|assign(X," arrivant")|assign(X,"wall")|assign(X,"cloud")|assign(X,"flower")|assign(X,"chair")|assign(X,"roof"):-darkmagenta(X).
select(X):-assign(X, " arrivant").
retum(X):-assign(X, "florence").
retum(X):-assign(X, "city").
retum(X):-assign(X, "name").
retum(X):-assign(X, "price").
retum(X):-assign(X, "age").
retum(X):-assign

unique_rules: 
['assign(X,"storm")|assign(X,"desk")|assign(X,"laptop")|assign(X," arrivant")|assign(X,"wall")|assign(X,"cloud")|assign(X,"flower")|assign(X,"chair")|assign(X,"roof"):-darkmagenta(X).', 'select(X):-assign(X, " arrivant").', 'retum(X):-assign(X, "florence").', 'retum(X):-assign(X, "city").', 'retum(X):-assign(X, "name").', 'retum(X):-assign(X, "price").', 'retum(X):-assign(X, "age").', 'retum(X):-assign.']

parsed: 
assign(X,"storm")|assign(X,"desk")|assign(X,"laptop")|assign(X," arrivant")|assign(X,"wall")|assign(X,"cloud")|assign(X,"flower")|assign(X,"chair")|assign(X,"roof"):-darkmagenta(X).
select(X):-assign(X, " arrivant").

jaccard: 1.0


209
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "quality" and "delhi". However, avoid any combination where predicate "quality" has label "laptop".

answer from file: 
combination(X,Y):-quality(X, _),delhi(Y), not quality(X, laptop).

facts: 
quality(1..4, 1..4).delhi(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "quality" and "delhi". However, avoid any combination where predicate "quality" has label "laptop".
Answer: combination(X,Y):-quality(X, _),delhi(Y), not quality(X, _).
combination(X,Y):-quality(X, _),delhi(Y).
assign(X, Y)
combination(X, Y).
retum.
assign(X, Y),
retum.
 espressione(X, Y).
retum.
 quíntuple(X, Y),
retum.
 bleue(X, Y),
retum.
shape(X, Y),
retum.
city(X, Y),
retum.
age(X, Y),
retum.
name(X, Y),
retum.
price(X, Y

unique_rules: 
['combination(X,Y):-quality(X, _),delhi(Y), not quality(X, _).', 'combination(X,Y):-quality(X, _),delhi(Y).']

parsed: 
combination(X,Y):-quality(X, _),delhi(Y), not quality(X, _).

jaccard: 0.0


210
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "chicago" having fields "ID","ownerID","hair", and the predicate "owner" having fields "ID","quality". Define a predicate "chicago_owner" that associates to each "chicago" the "quality" of "owner" only where "quality" is different than 7.

answer from file: 
chicago_owner(X,Z):-chicago(X,Y,_),owner(Y,Z), Z!=7.

facts: 
chicago("ID","ownerID","hair").owner("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "chicago" having fields "ID","ownerID","hair", and the predicate "owner" having fields "ID","quality". Define a predicate "chicago_owner" that associates to each "chicago" the "quality" of "owner" only where "quality" is different than 7.
Answer: chicago_owner(X,Z):-chicago(X,Y,_),owner(Y,Z), Z!=7.
 ángulo(X,Y,Z):-chicago(X,Y,_),owner(Y,Z), Z==7.
 ángulo(X,Y,Z):-chicago(X,Y,_),owner(Y,Z), Z<7.
 ángulo(X,Y,Z):-chicago(X,Y,_),owner(Y,Z), Z==7.
 ángulo(X,Y,Z):-chicago(X,Y,_),owner(Y,Z), Z>7.
 ángulo(X,Y,Z):-chicago(X,

unique_rules: 
['chicago_owner(X,Z):-chicago(X,Y,_),owner(Y,Z), Z!=7.', 'ángulo(X,Y,Z):-chicago(X,Y,_),owner(Y,Z), Z==7.', 'ángulo(X,Y,Z):-chicago(X,Y,_),owner(Y,Z), Z<7.', 'ángulo(X,Y,Z):-chicago(X,Y,_),owner(Y,Z), Z>7.', 'ángulo(X,Y,Z):-chicago(X,.']

parsed: 
chicago_owner(X,Z):-chicago(X,Y,_),owner(Y,Z), Z!=7.

jaccard: 1.0


211
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "wall" having fields "ID","lake","roofID", and the predicate "roof" having fields "ID","strength". Define a predicate "wall_roof" that associates to each "wall", not associated with label "wall", the attribute "strength" of "roof".

answer from file: 
wall_roof(X,Z):-wall(X,_,Y),roof(Y,Z),not wall(X,wall,_).

facts: 
wall("ID","lake","roofID").roof("ID","strength").

generated: 
Write an ASP program for the following problem. Consider predicate "wall" having fields "ID","lake","roofID", and the predicate "roof" having fields "ID","strength". Define a predicate "wall_roof" that associates to each "wall", not associated with label "wall", the attribute "strength" of "roof".
Answer: wall_roof(X,Z):-wall(X,_,Y),roof(Y,Z),not wall(X,wall,_).
wall_roof(X,Z):-wall(X,_,Y),roof(Y,Z),label(X,wall).
assign(X,wall_roof(X,_)).
retum(X).
retum(Y):-wall(X,_,Y),roof(Y,Z),not label(X,wall).
retum(Y):-wall(X,_,Y),roof(Y,Z),label(X,wall).
retum(Y):-wall(X,_,Y),roof(Y,Z),label(X,name

unique_rules: 
['wall_roof(X,Z):-wall(X,_,Y),roof(Y,Z),not wall(X,wall,_).', 'wall_roof(X,Z):-wall(X,_,Y),roof(Y,Z),label(X,wall).', 'retum(Y):-wall(X,_,Y),roof(Y,Z),not label(X,wall).', 'retum(Y):-wall(X,_,Y),roof(Y,Z),label(X,wall).', 'retum(Y):-wall(X,_,Y),roof(Y,Z),label(X,name.']

parsed: 
wall_roof(X,Z):-wall(X,_,Y),roof(Y,Z),not wall(X,wall,_).

jaccard: 1.0


212
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "delhi" as the transitive closure of predicate "butterfly". Then, assign exactly one label from the set wall,cloud,storm,desk,laptop,flower,roof,chair,butterfly to each element in "delhi".

answer from file: 
delhi(X,Y):-butterfly(X,Y).
delhi(X,Y):-butterfly(X,Z),delhi(Z,Y).
assign(X,"wall")|assign(X,"cloud")|assign(X,"storm")|assign(X,"desk")|assign(X,"laptop")|assign(X,"flower")|assign(X,"roof")|assign(X,"chair")|assign(X,"butterfly"):-delhi(X,_).

facts: 
butterfly(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "delhi" as the transitive closure of predicate "butterfly". Then, assign exactly one label from the set wall,cloud,storm,desk,laptop,flower,roof,chair,butterfly to each element in "delhi".
Answer: delhi(X,Y):-butterfly(X,Y).
delhi(X,Y):-butterfly(X,Z),delhi(Z,Y).
assign(X,"wall")|assign(X,"cloud")|assign(X,"storm")|assign(X,"desk")|assign(X,"laptop")|assign(X,"flower")|assign(X,"roof")|assign(X,"chair")|assign(X," arrivant"):-delhi(X,_).
retum:assign(X,"city")|retum:assign(X,"age").
retum:retum(X,Y),assign(Y,"city").
retum:retum(X,Y),assign

unique_rules: 
['delhi(X,Y):-butterfly(X,Y).', 'delhi(X,Y):-butterfly(X,Z),delhi(Z,Y).', 'assign(X,"wall")|assign(X,"cloud")|assign(X,"storm")|assign(X,"desk")|assign(X,"laptop")|assign(X,"flower")|assign(X,"roof")|assign(X,"chair")|assign(X," arrivant"):-delhi(X,_).']

parsed: 
delhi(X,Y):-butterfly(X,Y).
delhi(X,Y):-butterfly(X,Z),delhi(Z,Y).
assign(X,"wall")|assign(X,"cloud")|assign(X,"storm")|assign(X,"desk")|assign(X,"laptop")|assign(X,"flower")|assign(X,"roof")|assign(X,"chair")|assign(X," arrivant"):-delhi(X,_).

jaccard: 0.0


213
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate cosenza. The labels are chair,storm,roof,flower,desk. Consider only the predicate cosenza not associated with label "flower".

answer from file: 
assign(X,"chair")|assign(X,"storm")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk"):-cosenza(X, _), not cosenza(X, flower).

facts: 
cosenza(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate cosenza. The labels are chair,storm,roof,flower,desk. Consider only the predicate cosenza not associated with label "flower".
Answer: assign(X,"chair")|assign(X,"storm")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk"):-cosenza(X, _), not cosenza(X, flower).
``` italienne
assign(X,"chair")|assign(X,"storm")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk"):-cosenza(X, _), not cosenza(X, flower).
```

unique_rules: 
['assign(X,"chair")|assign(X,"storm")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk"):-cosenza(X, _), not cosenza(X, flower).']

parsed: 
assign(X,"chair")|assign(X,"storm")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk"):-cosenza(X, _), not cosenza(X, flower).

jaccard: 1.0


214
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate black and labels strength, lake having label lake different than 62. The labels are roof,flower,butterfly,desk,storm,wall.

answer from file: 
assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"desk")|assign(X,"storm")|assign(X,"wall"):-black(X, Y), Y!=62 .

facts: 
black(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate black and labels strength, lake having label lake different than 62. The labels are roof,flower,butterfly,desk,storm,wall.
Answer: assign(X," felicità")|assign(X,"florence")|assign(X,"author")|assign(X,"description")|assign(X,"height")|assign(X,"price")|assign(X,"age")|retum(X, Y), Y!=62 .
Assign(X," felicità")|assign(X,"florence")|assign(X,"author")|assign(X,"description")|assign(X,"height")|assign(X,"price")|assign(X,"age")|retum(X, Y), Y!=62 .
Where:
retum(X, Y) : assign(X, Y).
 kollek(X, Y)

unique_rules: 
[]

parsed: 


jaccard: 0.0


215
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are wall,desk,butterfly.  Then, filter and return only the elements assigned to label butterfly.".

answer from file: 
assign(X,"wall")|assign(X,"desk")|assign(X,"butterfly"):-lake(X).
select(X):-assign(X, "butterfly").

facts: 
lake(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are wall,desk,butterfly.  Then, filter and return only the elements assigned to label butterfly.".
Answer: assign(X,"wall")|assign(X,"desk")|assign(X," venant") :- lake(X).
select(X):-assign(X, " venant").
retum(X).
 köp:assign(X," venant").
retum(X).
 quí.
 quí(X, " venant").
retum(X).
select(X).
retum(X).
 quí.
 quí(X, " venant").
retum(X).
 quí(X, " venant").
retum(X).
 quí(X, " venant").
retum(X).
 quí(X, " venant").
retum(X).
 quí(X, " venant").
retum

unique_rules: 
['assign(X,"wall")|assign(X,"desk")|assign(X," venant") :- lake(X).', 'select(X):-assign(X, " venant").']

parsed: 
assign(X,"wall")|assign(X,"desk")|assign(X," venant") :- lake(X).
select(X):-assign(X, " venant").

jaccard: 0.0


216
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "singapore" and "roof". However, avoid any combination where predicate "singapore" has label "cloud".

answer from file: 
combination(X,Y):-singapore(X, _),roof(Y), not singapore(X, cloud).

facts: 
singapore(1..4, 1..4).roof(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "singapore" and "roof". However, avoid any combination where predicate "singapore" has label "cloud".
Answer: combination(X,Y):-singapore(X, _),roof(Y), not singapore(X, cloud).
combination(X,Y):-singapore(X, _),roof(Y).
combination(X,Y):-singapore(X, _),roof(Y), label("city").
assign(X, Y)
retum(Y).
retum(X)
 quíntuple(X,Y):-assign(X, Y).
 quíntuple(X,Y):-assign(X, Y), label("city").
 quíntuple(X,Y):-assign(X, Y), label("price").
 quíntuple(X,Y):-assign(X

unique_rules: 
['combination(X,Y):-singapore(X, _),roof(Y), not singapore(X, cloud).', 'combination(X,Y):-singapore(X, _),roof(Y).', 'combination(X,Y):-singapore(X, _),roof(Y), label("city").', 'quíntuple(X,Y):-assign(X, Y).', 'quíntuple(X,Y):-assign(X, Y), label("city").', 'quíntuple(X,Y):-assign(X, Y), label("price").', 'quíntuple(X,Y):-assign(X.']

parsed: 
combination(X,Y):-singapore(X, _),roof(Y), not singapore(X, cloud).

jaccard: 1.0


217
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "lightblue" having fields "ID","wallID","owner", and the predicate "wall" having fields "ID","surname". Define a predicate "lightblue_wall" that associates to each "lightblue" the "surname" of "wall" only where "surname" is different than 87.

answer from file: 
lightblue_wall(X,Z):-lightblue(X,Y,_),wall(Y,Z), Z!=87.

facts: 
lightblue("ID","wallID","owner").wall("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "lightblue" having fields "ID","wallID","owner", and the predicate "wall" having fields "ID","surname". Define a predicate "lightblue_wall" that associates to each "lightblue" the "surname" of "wall" only where "surname" is different than 87.
Answer: lightblue_wall(X,Z):-lightblue(X,Y,_),wall(Y,Z), Z!=87.
lightblue_wall(X,Y,_):-lightblue(X,Y,_),wall(Y,Z), Z==87.
assign(X,"name")|assign(X,"description")|assign(X,"price"):-lightblue_wall(X,_,_).
retum(X,Y),Z!=87.
retum(X,_,87).
 quíname(X,Z), Z!=87.
 quíname(X,Z), Z==87.
 quíname(X,_,_).


unique_rules: 
['lightblue_wall(X,Z):-lightblue(X,Y,_),wall(Y,Z), Z!=87.', 'lightblue_wall(X,Y,_):-lightblue(X,Y,_),wall(Y,Z), Z==87.', 'assign(X,"name")|assign(X,"description")|assign(X,"price"):-lightblue_wall(X,_,_).']

parsed: 
lightblue_wall(X,Z):-lightblue(X,Y,_),wall(Y,Z), Z!=87.

jaccard: 1.0


218
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "chicago" having fields "ID","cosenzaID","quality", and the predicate "cosenza" having fields "ID","owner". Define a predicate "chicago_cosenza" that associates to each "chicago", not associated with label "butterfly", the attribute "owner" of "cosenza".

answer from file: 
chicago_cosenza(X,Z):-chicago(X,Y,_),cosenza(Y,Z),not chicago(X,_,butterfly).

facts: 
chicago("ID","cosenzaID","quality").cosenza("ID","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "chicago" having fields "ID","cosenzaID","quality", and the predicate "cosenza" having fields "ID","owner". Define a predicate "chicago_cosenza" that associates to each "chicago", not associated with label "butterfly", the attribute "owner" of "cosenza".
Result: chicago_cosenza(X,Z):-chicago(X,Y,_),cosenza(Y,Z),not chicago(X,_,butterfly).
 ángulo(X,Y,Z):-chicago(X,Y,_),cosenza(Y,Z),not chicago(X,_,creator).
 ángulo(X,Y,Z):-chicago(X,Y,_),creator(Y,Z),not chicago(X,_,name).
 ángulo(X,Y,Z):-chicago(X,Y,_),name(Y,Z),not chicago(X,_,description).
 ángulo(X,Y,Z):-chicago(X,Y,_),description(Y,Z

unique_rules: 
['Result: chicago_cosenza(X,Z):-chicago(X,Y,_),cosenza(Y,Z),not chicago(X,_,butterfly).', 'ángulo(X,Y,Z):-chicago(X,Y,_),cosenza(Y,Z),not chicago(X,_,creator).', 'ángulo(X,Y,Z):-chicago(X,Y,_),creator(Y,Z),not chicago(X,_,name).', 'ángulo(X,Y,Z):-chicago(X,Y,_),name(Y,Z),not chicago(X,_,description).', 'ángulo(X,Y,Z):-chicago(X,Y,_),description(Y,Z.']

parsed: 
Result: chicago_cosenza(X,Z):-chicago(X,Y,_),cosenza(Y,Z),not chicago(X,_,butterfly).

jaccard: 0.0


219
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "cloud" as the transitive closure of predicate "weight". Then, assign exactly one label from the set roof,butterfly,storm,laptop,chair,desk,wall to each element in "cloud".

answer from file: 
cloud(X,Y):-weight(X,Y).
cloud(X,Y):-weight(X,Z),cloud(Z,Y).
assign(X,"roof")|assign(X,"butterfly")|assign(X,"storm")|assign(X,"laptop")|assign(X,"chair")|assign(X,"desk")|assign(X,"wall"):-cloud(X,_).

facts: 
weight(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "cloud" as the transitive closure of predicate "weight". Then, assign exactly one label from the set roof,butterfly,storm,laptop,chair,desk,wall to each element in "cloud".
Answer: cloud(X,Y):-weight(X,Y).
cloud(X,Y):-weight(X,Z),cloud(Z,Y).
assign(X,"roof")|assign(X," arrivant")|assign(X,"height")|assign(X,"shape")|assign(X,"price")|assign(X,"age")|assign(X,"description")|assign(X,"city"):-cloud(X,_).
retum:assign(X,"description").
retum:assign(X,"city").
retum:assign(X,"description").
retum:assign(X,"price").
retum:assign(X,"age").
retum:assign(X,"description").

unique_rules: 
['cloud(X,Y):-weight(X,Y).', 'cloud(X,Y):-weight(X,Z),cloud(Z,Y).', 'assign(X,"roof")|assign(X," arrivant")|assign(X,"height")|assign(X,"shape")|assign(X,"price")|assign(X,"age")|assign(X,"description")|assign(X,"city"):-cloud(X,_).']

parsed: 
cloud(X,Y):-weight(X,Y).
cloud(X,Y):-weight(X,Z),cloud(Z,Y).
assign(X,"roof")|assign(X," arrivant")|assign(X,"height")|assign(X,"shape")|assign(X,"price")|assign(X,"age")|assign(X,"description")|assign(X,"city"):-cloud(X,_).

jaccard: 0.0


220
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are butterfly,roof,wall,cloud. Consider only the predicate lake not associated with label "butterfly".

answer from file: 
assign(X,"butterfly")|assign(X,"roof")|assign(X,"wall")|assign(X,"cloud"):-lake(X, _), not lake(X, butterfly).

facts: 
lake(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are butterfly,roof,wall,cloud. Consider only the predicate lake not associated with label "butterfly".
Answer: assign(X," épar")|assign(X,"height")|assign(X,"price")|assign(X,"author")|assign(X,"city")|assign(X,"description")|assign(X,"name")|retum(X), not lake(X, _), not description(X, _).
retum(X) :-assign(X, _), not description(X, _).
assign(X, "description") :-retum(X).
assign(X, "name") :-retum(X).
assign(X, "city") :-retum(X).
assign(X, "author") :-retum(X).
assign(X, "price") :-

unique_rules: 
['retum(X) :-assign(X, _), not description(X, _).', 'assign(X, "description") :-retum(X).', 'assign(X, "name") :-retum(X).', 'assign(X, "city") :-retum(X).', 'assign(X, "author") :-retum(X).', 'assign(X, "price") :-.']

parsed: 
retum(X) :-assign(X, _), not description(X, _).

jaccard: 0.0


221
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate pink and labels lake, hair having label hair different than 23. The labels are laptop,storm,chair,desk,flower,cloud,butterfly,roof.

answer from file: 
assign(X,"laptop")|assign(X,"storm")|assign(X,"chair")|assign(X,"desk")|assign(X,"flower")|assign(X,"cloud")|assign(X,"butterfly")|assign(X,"roof"):-pink(X, Y), Y!=23 .

facts: 
pink(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate pink and labels lake, hair having label hair different than 23. The labels are laptop,storm,chair,desk,flower,cloud,butterfly,roof.
Answer: assign(X,"laptop")|assign(X,"storm")|assign(X,"chair")|assign(X,"desk")|assign(X,"flower")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"roof"):-pink(X, Y), Y!=23 .
```
Assign(X," arrivant")|Assign(X," felicità")|Assign(X,"city")|Assign(X,"age")|Assign(X,"name")|Assign(X,"price")|Assign(X,"description")|Assign(X,"height")|Assign(X,"author"):-florence(X).
```
The predicate florence has label

unique_rules: 
['assign(X,"laptop")|assign(X,"storm")|assign(X,"chair")|assign(X,"desk")|assign(X,"flower")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"roof"):-pink(X, Y), Y!=23 .', 'Assign(X," arrivant")|Assign(X," felicità")|Assign(X,"city")|Assign(X,"age")|Assign(X,"name")|Assign(X,"price")|Assign(X,"description")|Assign(X,"height")|Assign(X,"author"):-florence(X).']

parsed: 
assign(X,"laptop")|assign(X,"storm")|assign(X,"chair")|assign(X,"desk")|assign(X,"flower")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"roof"):-pink(X, Y), Y!=23 .

jaccard: 0.0


222
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate pink. The labels are chair,cloud,wall,roof,butterfly.  Then, filter and return only the elements assigned to label cloud.".

answer from file: 
assign(X,"chair")|assign(X,"cloud")|assign(X,"wall")|assign(X,"roof")|assign(X,"butterfly"):-pink(X).
select(X):-assign(X, "cloud").

facts: 
pink(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate pink. The labels are chair,cloud,wall,roof,butterfly.  Then, filter and return only the elements assigned to label cloud.".
Answer: assign(X,"chair")|assign(X,"cloud")|assign(X,"wall")|assign(X,"roof")|assign(X," arrivant")
retum(X):-assign(X, "cloud").
retum(X):-assign(X, "city").
retum(X):-assign(X, "price").
retum(X):-assign(X, "age").
retum(X):-assign(X, "description").
retum(X):-assign(X, "height").
retum(X):-assign(X, "author").
retum(X):-assign(X, "city").
retum(X):-assign(X, "description").
retum(X):-

unique_rules: 
['retum(X):-assign(X, "cloud").', 'retum(X):-assign(X, "city").', 'retum(X):-assign(X, "price").', 'retum(X):-assign(X, "age").', 'retum(X):-assign(X, "description").', 'retum(X):-assign(X, "height").', 'retum(X):-assign(X, "author").', 'retum(X):-.']

parsed: 
retum(X):-assign(X, "cloud").
retum(X):-assign(X, "city").

jaccard: 0.0


223
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "chair" and "butterfly". However, avoid any combination where predicate "chair" has label "laptop".

answer from file: 
combination(X,Y):-chair(X, _),butterfly(Y), not chair(X, laptop).

facts: 
chair(1..4, 1..4).butterfly(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "chair" and "butterfly". However, avoid any combination where predicate "chair" has label "laptop".
Answer: combination(X,Y):-chair(X, _),butterfly(Y), not chair(X, laptop).
combination(X,Y):-chair(X, _),moto(Y).
combination(X,Y):-chair(X, _),age(Y).
combination(X,Y):-moto(X), age(Y).
combination(X,Y):-moto(X),description(Y).
combination(X,Y):-moto(X),shape(Y).
combination(X,Y):-moto(X),city(Y).
retum(X,Y):-combination(X,Y).
retum(X,Y):-combination(X,Y),description(X).

unique_rules: 
['combination(X,Y):-chair(X, _),butterfly(Y), not chair(X, laptop).', 'combination(X,Y):-chair(X, _),moto(Y).', 'combination(X,Y):-chair(X, _),age(Y).', 'combination(X,Y):-moto(X), age(Y).', 'combination(X,Y):-moto(X),description(Y).', 'combination(X,Y):-moto(X),shape(Y).', 'combination(X,Y):-moto(X),city(Y).', 'retum(X,Y):-combination(X,Y).', 'retum(X,Y):-combination(X,Y),description(X).']

parsed: 
combination(X,Y):-chair(X, _),butterfly(Y), not chair(X, laptop).

jaccard: 1.0


224
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "flower" having fields "ID","hairID","lake", and the predicate "hair" having fields "ID","surname". Define a predicate "flower_hair" that associates to each "flower" the "surname" of "hair" only where "surname" is different than 94.

answer from file: 
flower_hair(X,Z):-flower(X,Y,_),hair(Y,Z), Z!=94.

facts: 
flower("ID","hairID","lake").hair("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "flower" having fields "ID","hairID","lake", and the predicate "hair" having fields "ID","surname". Define a predicate "flower_hair" that associates to each "flower" the "surname" of "hair" only where "surname" is different than 94.
Answer: flower_hair(X,Z):-flower(X,Y,_),hair(Y,Z), Z!=94.
 ángulo(X,Y,Z):-flower(X,Y,_),hair(Y,Z), Z==94.
 ángulo(X,Y,Z):-flower(X,Y,_),hair(Y,Z), Z!=94.
 ángulo(X,Y,Z):-flower(X,Y,_),hair(Y,Z), Z==94.
 ángulo(X,Y,Z):-flower(X,Y,_),hair(Y,Z), Z==95.
 ángulo(X,Y,Z

unique_rules: 
['flower_hair(X,Z):-flower(X,Y,_),hair(Y,Z), Z!=94.', 'ángulo(X,Y,Z):-flower(X,Y,_),hair(Y,Z), Z==94.', 'ángulo(X,Y,Z):-flower(X,Y,_),hair(Y,Z), Z!=94.', 'ángulo(X,Y,Z):-flower(X,Y,_),hair(Y,Z), Z==95.']

parsed: 
flower_hair(X,Z):-flower(X,Y,_),hair(Y,Z), Z!=94.

jaccard: 1.0


225
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "hair" having fields "ID","surname","moscowID", and the predicate "moscow" having fields "ID","lake". Define a predicate "hair_moscow" that associates to each "hair", not associated with label "chair", the attribute "lake" of "moscow".

answer from file: 
hair_moscow(X,Z):-hair(X,_,Y),moscow(Y,Z),not hair(X,chair,_).

facts: 
hair("ID","surname","moscowID").moscow("ID","lake").

generated: 
Write an ASP program for the following problem. Consider predicate "hair" having fields "ID","surname","moscowID", and the predicate "moscow" having fields "ID","lake". Define a predicate "hair_moscow" that associates to each "hair", not associated with label "chair", the attribute "lake" of "moscow".
Answer: hair_moscow(X,Z):-hair(X,_,Y),moscow(Y,Z),not hair(X,chair,_).
hair_moscow(X,_,Y):-hair(X,_,Y),moscow(Y,Z),label(X,chair).
 áng=hair_moscow(X,_,Z),Z.
 áng=hair_moscow(X,_,Z),not Z.
 áng=hair(X,_,Y),not Z,label(X,shape).
 áng=hair(X,_,Y),not Z,label(X,height).
 áng=hair(X,_,Y),not Z,label(X

unique_rules: 
['hair_moscow(X,Z):-hair(X,_,Y),moscow(Y,Z),not hair(X,chair,_).', 'hair_moscow(X,_,Y):-hair(X,_,Y),moscow(Y,Z),label(X,chair).']

parsed: 
hair_moscow(X,Z):-hair(X,_,Y),moscow(Y,Z),not hair(X,chair,_).

jaccard: 1.0


226
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "cairo" as the transitive closure of predicate "lightblue". Then, assign exactly one label from the set chair,laptop,flower,desk,storm,butterfly to each element in "cairo".

answer from file: 
cairo(X,Y):-lightblue(X,Y).
cairo(X,Y):-lightblue(X,Z),cairo(Z,Y).
assign(X,"chair")|assign(X,"laptop")|assign(X,"flower")|assign(X,"desk")|assign(X,"storm")|assign(X,"butterfly"):-cairo(X,_).

facts: 
lightblue(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "cairo" as the transitive closure of predicate "lightblue". Then, assign exactly one label from the set chair,laptop,flower,desk,storm,butterfly to each element in "cairo".
Answer: cairo(X,Y):-lightblue(X,Y).
cairo(X,Y):-lightblue(X,Z),cairo(Z,Y).
assign(X,"chair")|assign(X," arrivant")|assign(X,"florence")|assign(X,"desk")|assign(X,"storm")|assign(X," venant") :-cairo(X,_).
retum(X,Y):-assign(X,Y).
retum(X,Y):-assign(X,Z),retum(Z,Y).
retum(X,Y):-assign(X,Z),retum(Z,Y).
retum(X,Y):-assign(X,Z

unique_rules: 
['cairo(X,Y):-lightblue(X,Y).', 'cairo(X,Y):-lightblue(X,Z),cairo(Z,Y).', 'assign(X,"chair")|assign(X," arrivant")|assign(X,"florence")|assign(X,"desk")|assign(X,"storm")|assign(X," venant") :-cairo(X,_).', 'retum(X,Y):-assign(X,Y).', 'retum(X,Y):-assign(X,Z),retum(Z,Y).', 'retum(X,Y):-assign(X,Z.']

parsed: 
cairo(X,Y):-lightblue(X,Y).
cairo(X,Y):-lightblue(X,Z),cairo(Z,Y).
assign(X,"chair")|assign(X," arrivant")|assign(X,"florence")|assign(X,"desk")|assign(X,"storm")|assign(X," venant") :-cairo(X,_).

jaccard: 0.0


227
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate white. The labels are laptop,chair,flower. Consider only the predicate white not associated with label "flower".

answer from file: 
assign(X,"laptop")|assign(X,"chair")|assign(X,"flower"):-white(X, _), not white(X, flower).

facts: 
white(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate white. The labels are laptop,chair,flower. Consider only the predicate white not associated with label "flower".
Answer: assign(X," arrivant")|assign(X,"chair")|assign(X,"flower"):-white(X, _), not white(X, flower).
```
assign(X," arrivant")|assign(X,"chair")|assign(X,"flower"):-white(X, _), not white(X, flower).
```

unique_rules: 
['assign(X," arrivant")|assign(X,"chair")|assign(X,"flower"):-white(X, _), not white(X, flower).']

parsed: 
assign(X," arrivant")|assign(X,"chair")|assign(X,"flower"):-white(X, _), not white(X, flower).

jaccard: 1.0


228
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate butterfly and labels quality, strength having label strength different than 2. The labels are laptop,cloud,desk,chair,storm,butterfly,flower,roof.

answer from file: 
assign(X,"laptop")|assign(X,"cloud")|assign(X,"desk")|assign(X,"chair")|assign(X,"storm")|assign(X,"butterfly")|assign(X,"flower")|assign(X,"roof"):-butterfly(X, Y), Y!=2 .

facts: 
butterfly(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate butterfly and labels quality, strength having label strength different than 2. The labels are laptop,cloud,desk,chair,storm,butterfly,flower,roof.
Answer: assign(X,"laptop")|assign(X,"cloud")|assign(X,"desk")|assign(X,"chair")|assign(X,"storm")|assign(X,"butterfly")|assign(X,"flower")|assign(X,"roof"):-butterfly(X, Y), Y!=2 .
```
 köp:assign(X,"car")| köp:assign(X,"age")| köp:assign(X,"name")| köp:assign(X,"price")| köp:assign(X,"description")| köp:assign(X,"city")| köp:assign(X,"shape")| köp:assign(X,"height")| köp:assign(X

unique_rules: 
['assign(X,"laptop")|assign(X,"cloud")|assign(X,"desk")|assign(X,"chair")|assign(X,"storm")|assign(X,"butterfly")|assign(X,"flower")|assign(X,"roof"):-butterfly(X, Y), Y!=2 .']

parsed: 
assign(X,"laptop")|assign(X,"cloud")|assign(X,"desk")|assign(X,"chair")|assign(X,"storm")|assign(X,"butterfly")|assign(X,"flower")|assign(X,"roof"):-butterfly(X, Y), Y!=2 .

jaccard: 1.0


229
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate singapore. The labels are desk,chair,storm,roof,wall,laptop,flower,butterfly,cloud.  Then, filter and return only the elements assigned to label storm.".

answer from file: 
assign(X,"desk")|assign(X,"chair")|assign(X,"storm")|assign(X,"roof")|assign(X,"wall")|assign(X,"laptop")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"cloud"):-singapore(X).
select(X):-assign(X, "storm").

facts: 
singapore(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate singapore. The labels are desk,chair,storm,roof,wall,laptop,flower,butterfly,cloud.  Then, filter and return only the elements assigned to label storm.".
Answer: assign(X,"desk")|assign(X,"chair")|assign(X,"storm")|assign(X,"roof")|assign(X,"wall")|assign(X,"laptop")|assign(X,"flower")|assign(X," arrivant")|assign(X,"cyan")==>florence(X).
select(X):-assign(X, "storm").
```
 köp:assign(X,"florence")|assign(X,"city").
retum:select(X).
retum(X):-assign(X, "city").
retum(X):-assign(X, "florence").
retum(X):-assign(X, "shape").
retum(X

unique_rules: 
['select(X):-assign(X, "storm").', 'retum(X):-assign(X, "city").', 'retum(X):-assign(X, "florence").', 'retum(X):-assign(X, "shape").']

parsed: 
select(X):-assign(X, "storm").
retum(X):-assign(X, "city").

jaccard: 0.0


230
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "butterfly" and "lightblue". However, avoid any combination where predicate "butterfly" has label "flower".

answer from file: 
combination(X,Y):-butterfly(X, _),lightblue(Y), not butterfly(X, flower).

facts: 
butterfly(1..4, 1..4).lightblue(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "butterfly" and "lightblue". However, avoid any combination where predicate "butterfly" has label "flower".
Answer: combination(X,Y):-florence(X),lightblue(Y), not florence(X,flower).
combination(X,Y):-florence(X),lightblue(Y), label(X,city).
assign(X, Y)
combination(X, Y).
retum(X, Y).
 quíntuple(X, Y):-florence(X),lightblue(Y), label(X,city).
 quíntuple(X, Y):-florence(X),lightblue(Y), height(X, Y).
retum(X, Y), height(X, Y).
 quíntuple(X, Y):-florence(X),lightblue

unique_rules: 
['combination(X,Y):-florence(X),lightblue(Y), not florence(X,flower).', 'combination(X,Y):-florence(X),lightblue(Y), label(X,city).', 'quíntuple(X, Y):-florence(X),lightblue(Y), label(X,city).', 'quíntuple(X, Y):-florence(X),lightblue(Y), height(X, Y).', 'quíntuple(X, Y):-florence(X),lightblue.']

parsed: 
combination(X,Y):-florence(X),lightblue(Y), not florence(X,flower).

jaccard: 0.0


231
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "singapore" having fields "ID","weight","lightblueID", and the predicate "lightblue" having fields "ID","lake". Define a predicate "singapore_lightblue" that associates to each "singapore" the "lake" of "lightblue" only where "lake" is different than 46.

answer from file: 
singapore_lightblue(X,Z):-singapore(X,_,Y),lightblue(Y,Z), Z!=46.

facts: 
singapore("ID","weight","lightblueID").lightblue("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "singapore" having fields "ID","weight","lightblueID", and the predicate "lightblue" having fields "ID","lake". Define a predicate "singapore_lightblue" that associates to each "singapore" the "lake" of "lightblue" only where "lake" is different than 46.
Answer: singapore_lightblue(X,Z):-singapore(X,_,Y),lightblue(Y,Z), Z!=46.
 ángulo(X,Y):-singapore(X,_,Y),lightblue(Y,Z), Z==46.
 ángulo(X,Y):-singapore(X,_,Y),lightblue(Y,Z), Z!=12.
 ángulo(X,Y):-singapore(X,_,Y),lightblue(Y,Z), Z==18.
 ángulo(X,Y):-singapore(X,_,Y),lightblue(Y,Z), Z==24.
 ángulo(X,

unique_rules: 
['singapore_lightblue(X,Z):-singapore(X,_,Y),lightblue(Y,Z), Z!=46.', 'ángulo(X,Y):-singapore(X,_,Y),lightblue(Y,Z), Z==46.', 'ángulo(X,Y):-singapore(X,_,Y),lightblue(Y,Z), Z!=12.', 'ángulo(X,Y):-singapore(X,_,Y),lightblue(Y,Z), Z==18.', 'ángulo(X,Y):-singapore(X,_,Y),lightblue(Y,Z), Z==24.']

parsed: 
singapore_lightblue(X,Z):-singapore(X,_,Y),lightblue(Y,Z), Z!=46.

jaccard: 1.0


232
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "strength" having fields "ID","weight","singaporeID", and the predicate "singapore" having fields "ID","surname". Define a predicate "strength_singapore" that associates to each "strength", not associated with label "wall", the attribute "surname" of "singapore".

answer from file: 
strength_singapore(X,Z):-strength(X,_,Y),singapore(Y,Z),not strength(X,wall,_).

facts: 
strength("ID","weight","singaporeID").singapore("ID","surname").

generated: 
Write an ASP program for the following problem. Consider predicate "strength" having fields "ID","weight","singaporeID", and the predicate "singapore" having fields "ID","surname". Define a predicate "strength_singapore" that associates to each "strength", not associated with label "wall", the attribute "surname" of "singapore".
Answer: strength_singapore(X,Z):-strength(X,_,Y),singapore(Y,Z),not strength(X,wall,_).
 ángulo(X,Y):-strength(X,_,Y), ángulo(Y,Z).
 ángulo(X,Y):-strength(X,_,Y),not ángulo(Y,Z).
 ángulo(X,Y):-strength(X,_,Y),description(X,Y).
description(X,Y):- ángulo(X,Y).
description(X,Y):- ángulo(X,Y),description(Y,Z).
description(X,Y):- ángulo(X,Y),description(

unique_rules: 
['strength_singapore(X,Z):-strength(X,_,Y),singapore(Y,Z),not strength(X,wall,_).', 'ángulo(X,Y):-strength(X,_,Y), ángulo(Y,Z).', 'ángulo(X,Y):-strength(X,_,Y),not ángulo(Y,Z).', 'ángulo(X,Y):-strength(X,_,Y),description(X,Y).', 'description(X,Y):- ángulo(X,Y).', 'description(X,Y):- ángulo(X,Y),description(Y,Z).', 'description(X,Y):- ángulo(X,Y),description(.']

parsed: 
strength_singapore(X,Z):-strength(X,_,Y),singapore(Y,Z),not strength(X,wall,_).

jaccard: 1.0


233
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "roof" as the transitive closure of predicate "wall". Then, assign exactly one label from the set roof,cloud,desk,laptop,flower,wall,chair,butterfly to each element in "roof".

answer from file: 
roof(X,Y):-wall(X,Y).
roof(X,Y):-wall(X,Z),roof(Z,Y).
assign(X,"roof")|assign(X,"cloud")|assign(X,"desk")|assign(X,"laptop")|assign(X,"flower")|assign(X,"wall")|assign(X,"chair")|assign(X,"butterfly"):-roof(X,_).

facts: 
wall(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "roof" as the transitive closure of predicate "wall". Then, assign exactly one label from the set roof,cloud,desk,laptop,flower,wall,chair,butterfly to each element in "roof".
Answer: roof(X,Y):-wall(X,Y).
roof(X,Y):-wall(X,Z),roof(Z,Y).
assign(X," felicità")|assign(X,"creator")|assign(X,"city")|assign(X,"age")|assign(X,"description")|assign(X,"height")|assign(X,"price")|assign(X,"author")|assign(X,"shape") :roof(X,_).
retum(X,Y):-wall(X,Y).
retum(X,Y):-wall(X,Z),roof(Z,Y).
retum(X,Y):-wall(X,Z),retum(

unique_rules: 
['roof(X,Y):-wall(X,Y).', 'roof(X,Y):-wall(X,Z),roof(Z,Y).', 'retum(X,Y):-wall(X,Y).', 'retum(X,Y):-wall(X,Z),roof(Z,Y).', 'retum(X,Y):-wall(X,Z),retum(.']

parsed: 
roof(X,Y):-wall(X,Y).
roof(X,Y):-wall(X,Z),roof(Z,Y).
retum(X,Y):-wall(X,Y).

jaccard: 0.0


234
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate white. The labels are laptop,desk,storm,wall,flower. Consider only the predicate white not associated with label "cloud".

answer from file: 
assign(X,"laptop")|assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X,"flower"):-white(X, _), not white(X, cloud).

facts: 
white(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate white. The labels are laptop,desk,storm,wall,flower. Consider only the predicate white not associated with label "cloud".
Answer: assign(X," arrivant")|assign(X,"desk")|assign(X," peines")|assign(X,"wall")|assign(X,"florence") :-white(X, _), not white(X, cloud).
assign(X,"florence") :-white(X, _).
retum.
retum(X, Y):-assign(X, Y).
retum(X, Y):-assign(X, _), Y!=cloud.
retum(X, Y):-assign(X, Y), Y==cloud.
retum(X, Y):-assign(X, Y), Y==florence.
retum(X, Y):-assign(X, Y), Y!=

unique_rules: 
['assign(X," arrivant")|assign(X,"desk")|assign(X," peines")|assign(X,"wall")|assign(X,"florence") :-white(X, _), not white(X, cloud).', 'assign(X,"florence") :-white(X, _).', 'retum(X, Y):-assign(X, Y).', 'retum(X, Y):-assign(X, _), Y!=cloud.', 'retum(X, Y):-assign(X, Y), Y==cloud.', 'retum(X, Y):-assign(X, Y), Y==florence.', 'retum(X, Y):-assign(X, Y), Y!=.']

parsed: 
assign(X," arrivant")|assign(X,"desk")|assign(X," peines")|assign(X,"wall")|assign(X,"florence") :-white(X, _), not white(X, cloud).

jaccard: 0.0


235
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate surname and labels weight, lake having label lake different than 14. The labels are laptop,desk.

answer from file: 
assign(X,"laptop")|assign(X,"desk"):-surname(X, Y), Y!=14 .

facts: 
surname(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate surname and labels weight, lake having label lake different than 14. The labels are laptop,desk.
Answer: assign(X,"laptop")|assign(X,"desk"):-surname(X, Y), Y!=14 .
assign(X,"bike")|assign(X,"age"):-name(X).
 köp: for(X, Y):-assign(X, Z), Z!=14 .
 köp: for(X, Y):-assign(X, Z), Z==14 .
 köp: for(X, Y):-assign(X, Z), Z!=14, Y!=14.
 köp: for(X, Y):-assign(X, Z), Z==14, Y!=14.
 köp: for(X, Y):-assign(X,

unique_rules: 
['assign(X,"laptop")|assign(X,"desk"):-surname(X, Y), Y!=14 .', 'assign(X,"bike")|assign(X,"age"):-name(X).', 'köp: for(X, Y):-assign(X, Z), Z!=14 .', 'köp: for(X, Y):-assign(X, Z), Z==14 .', 'köp: for(X, Y):-assign(X, Z), Z!=14, Y!=14.', 'köp: for(X, Y):-assign(X, Z), Z==14, Y!=14.', 'köp: for(X, Y):-assign(X,.']

parsed: 
assign(X,"laptop")|assign(X,"desk"):-surname(X, Y), Y!=14 .

jaccard: 1.0


236
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate weight. The labels are cloud,butterfly,chair,desk.  Then, filter and return only the elements assigned to label desk.".

answer from file: 
assign(X,"cloud")|assign(X,"butterfly")|assign(X,"chair")|assign(X,"desk"):-weight(X).
select(X):-assign(X, "desk").

facts: 
weight(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate weight. The labels are cloud,butterfly,chair,desk.  Then, filter and return only the elements assigned to label desk.".
Answer: assign(X,"cloud")|assign(X," felicità")|assign(X,"chair")|assign(X,"desk"):-weight(X).
select(X):-assign(X, "desk").
```
Assign(X,"cloud")|Assign(X," felicità")|Assign(X,"chair")|Assign(X,"desk"):-weight(X).
select(X):-assign(X, "desk").
retum(X).
```
The predicate "weight" returns only the elements where predicate "description" is lower than 75.
The predicate "retum" returns only the elements where predicate "description" is lower than 75 and label "description" is

unique_rules: 
['assign(X,"cloud")|assign(X," felicità")|assign(X,"chair")|assign(X,"desk"):-weight(X).', 'select(X):-assign(X, "desk").', 'Assign(X,"cloud")|Assign(X," felicità")|Assign(X,"chair")|Assign(X,"desk"):-weight(X).']

parsed: 
assign(X,"cloud")|assign(X," felicità")|assign(X,"chair")|assign(X,"desk"):-weight(X).
select(X):-assign(X, "desk").

jaccard: 1.0


237
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "cairo" and "singapore". However, avoid any combination where predicate "cairo" has label "roof".

answer from file: 
combination(X,Y):-cairo(X, _),singapore(Y), not cairo(X, roof).

facts: 
cairo(1..4, 1..4).singapore(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "cairo" and "singapore". However, avoid any combination where predicate "cairo" has label "roof".
Answer: combination(X,Y):-cairo(X, _),singapore(Y), not cairo(X, roof).
combination(X,Y):-cairo(X, _),singapore(Y).
combination(X,Y):-cairo(X, _),singapore(Y), label("object").
assign(X, Y)
retum(X, Y).
retum(X, Y), label("object").
retum(X, Y), label("price").
retum(X, Y), label("age").
retum(X, Y), label("description").
retum(X, Y), label("height").
retum(X, Y), label("author").
retum

unique_rules: 
['combination(X,Y):-cairo(X, _),singapore(Y), not cairo(X, roof).', 'combination(X,Y):-cairo(X, _),singapore(Y).', 'combination(X,Y):-cairo(X, _),singapore(Y), label("object").']

parsed: 
combination(X,Y):-cairo(X, _),singapore(Y), not cairo(X, roof).

jaccard: 1.0


238
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "cloud" having fields "ID","surname","whiteID", and the predicate "white" having fields "ID","surname". Define a predicate "cloud_white" that associates to each "cloud" the "surname" of "white" only where "surname" is different than 34.

answer from file: 
cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34.

facts: 
cloud("ID","surname","whiteID").white("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "cloud" having fields "ID","surname","whiteID", and the predicate "white" having fields "ID","surname". Define a predicate "cloud_white" that associates to each "cloud" the "surname" of "white" only where "surname" is different than 34.
Answer: cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34.
cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z==34.
 ángulo(X,Z):-cloud(X,_,Y),white(Y,Z).
 ángulo(X,Z):-cloud(X,_,Y),white(Y,Z), Z==34.
 ángulo(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34.
 ángulo(X,Z):-cloud(X,_,Y),white(Y,Z),

unique_rules: 
['cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34.', 'cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z==34.', 'ángulo(X,Z):-cloud(X,_,Y),white(Y,Z).', 'ángulo(X,Z):-cloud(X,_,Y),white(Y,Z), Z==34.', 'ángulo(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34.', 'ángulo(X,Z):-cloud(X,_,Y),white(Y,Z),.']

parsed: 
cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34.

jaccard: 1.0


239
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "black" having fields "ID","quality","lakeID", and the predicate "lake" having fields "ID","owner". Define a predicate "black_lake" that associates to each "black", not associated with label "laptop", the attribute "owner" of "lake".

answer from file: 
black_lake(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).

facts: 
black("ID","quality","lakeID").lake("ID","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "black" having fields "ID","quality","lakeID", and the predicate "lake" having fields "ID","owner". Define a predicate "black_lake" that associates to each "black", not associated with label "laptop", the attribute "owner" of "lake".
Answer: black_lake(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).
black_lake(X,_,Y):-black(X,_,Y),lake(Y,Z),label(X,laptop).
assign(X,black_lake(X,_,Y))|assign(X,lake(Y,Z)),not black(X,_,Y).
retum(X,Y):-black(X,_,Y),not label(X,moto).
retum(X,Y):-black(X,moto,_),not label(X,city).
retum(X,Y):-black(X,city,_),

unique_rules: 
['black_lake(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).', 'black_lake(X,_,Y):-black(X,_,Y),lake(Y,Z),label(X,laptop).', 'retum(X,Y):-black(X,_,Y),not label(X,moto).', 'retum(X,Y):-black(X,moto,_),not label(X,city).', 'retum(X,Y):-black(X,city,_),.']

parsed: 
black_lake(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).

jaccard: 1.0


240
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "storm" as the transitive closure of predicate "white". Then, assign exactly one label from the set chair,roof,flower,desk,wall,laptop,storm,cloud to each element in "storm".

answer from file: 
storm(X,Y):-white(X,Y).
storm(X,Y):-white(X,Z),storm(Z,Y).
assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk")|assign(X,"wall")|assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud"):-storm(X,_).

facts: 
white(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "storm" as the transitive closure of predicate "white". Then, assign exactly one label from the set chair,roof,flower,desk,wall,laptop,storm,cloud to each element in "storm".
Answer: storm(X,Y):-white(X,Y).
storm(X,Y):-white(X,Z),storm(Z,Y).
assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk")|assign(X,"wall")|assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud"):-storm(X,_).
retum:
assign(X,"city")|assign(X,"age")|assign(X,"name")|assign(X,"price")|assign(X,"description")|assign(X,"author")|assign(X,"creator")|assign

unique_rules: 
['storm(X,Y):-white(X,Y).', 'storm(X,Y):-white(X,Z),storm(Z,Y).', 'assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk")|assign(X,"wall")|assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud"):-storm(X,_).']

parsed: 
storm(X,Y):-white(X,Y).
storm(X,Y):-white(X,Z),storm(Z,Y).
assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk")|assign(X,"wall")|assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud"):-storm(X,_).

jaccard: 1.0


241
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate moscow. The labels are desk,butterfly,cloud,flower,wall. Consider only the predicate moscow not associated with label "roof".

answer from file: 
assign(X,"desk")|assign(X,"butterfly")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-moscow(X, _), not moscow(X, roof).

facts: 
moscow(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate moscow. The labels are desk,butterfly,cloud,flower,wall. Consider only the predicate moscow not associated with label "roof".
Answer: assign(X,"desk")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-moscow(X, _), not moscow(X, roof).
```
assign(X,"description")|assign(X,"height")|assign(X,"price")|assign(X,"age"):-moscow(X, _).
```
The predicate moscow has label "description", and the predicate price has label "height". So, the labels are description,height,price,age,name,city,age,shape,author,creator,description,price,height,name,city,age,shape

unique_rules: 
['assign(X,"desk")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-moscow(X, _), not moscow(X, roof).', 'assign(X,"description")|assign(X,"height")|assign(X,"price")|assign(X,"age"):-moscow(X, _).']

parsed: 
assign(X,"desk")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-moscow(X, _), not moscow(X, roof).

jaccard: 1.0


242
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate darkmagenta and labels strength, weight having label weight different than 20. The labels are wall,butterfly.

answer from file: 
assign(X,"wall")|assign(X,"butterfly"):-darkmagenta(X, Y), Y!=20 .

facts: 
darkmagenta(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate darkmagenta and labels strength, weight having label weight different than 20. The labels are wall,butterfly.
Answer: assign(X,"wall")|assign(X," arrivant")|assign(X,"height")|assign(X,"price")|assign(X,"city")|assign(X,"age")|assign(X,"name")|assign(X,"shape")|assign(X,"height"), Y)
where Y is different than 20.
XPath: assign(X,"height")|assign(X,"price")|assign(X,"shape")|assign(X,"age")|assign(X,"name"), Z)
where Z is different than 20.
XPath: assign(X,"city")|assign(X,"age")|assign(X,"name"), Z

unique_rules: 
[]

parsed: 


jaccard: 0.0


243
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate desk. The labels are desk,storm,wall,butterfly,chair,laptop,flower,roof,cloud.  Then, filter and return only the elements assigned to label chair.".

answer from file: 
assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X,"butterfly")|assign(X,"chair")|assign(X,"laptop")|assign(X,"flower")|assign(X,"roof")|assign(X,"cloud"):-desk(X).
select(X):-assign(X, "chair").

facts: 
desk(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate desk. The labels are desk,storm,wall,butterfly,chair,laptop,flower,roof,cloud.  Then, filter and return only the elements assigned to label chair.".
Answer: assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X," arrivant")|assign(X,"chair")|assign(X," cœurs")|assign(X,"florence")|assign(X,"roof")|assign(X,"cloud"):-desk(X).
select(X):-assign(X, "chair").
```
The predicate "desk" has label "description", and the predicate "chair" has label "shape".
So, the predicate "assign" has label "shape".
Then, "select" only the elements assigned to label "shape".
The result is "select(X):-assign(X, "shape

unique_rules: 
['assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X," arrivant")|assign(X,"chair")|assign(X," cœurs")|assign(X,"florence")|assign(X,"roof")|assign(X,"cloud"):-desk(X).', 'select(X):-assign(X, "chair").', 'The result is "select(X):-assign(X, "shape.']

parsed: 
assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X," arrivant")|assign(X,"chair")|assign(X," cœurs")|assign(X,"florence")|assign(X,"roof")|assign(X,"cloud"):-desk(X).
select(X):-assign(X, "chair").

jaccard: 1.0


244
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "singapore" and "delhi". However, avoid any combination where predicate "singapore" has label "butterfly".

answer from file: 
combination(X,Y):-singapore(X, _),delhi(Y), not singapore(X, butterfly).

facts: 
singapore(1..4, 1..4).delhi(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "singapore" and "delhi". However, avoid any combination where predicate "singapore" has label "butterfly".
Answer: combination(X,Y):-singapore(X, _),delhi(Y), not singapore(X, butterfly).
combination(X,Y):-singapore(X, _),delhi(Y).
assign(X, Y)
combination(X, Y).
retum(X, Y).
 quíntu(X, Y), not singapore(X, _).
 quíntu(X, Y), not delhi(Y).
 quíntu(X, Y), not (singapore(X, _), delhi(Y)).
 quíntu(X, Y), not (singapore(X, _), biet(Y).
 quíntu(X, Y),

unique_rules: 
['combination(X,Y):-singapore(X, _),delhi(Y), not singapore(X, butterfly).', 'combination(X,Y):-singapore(X, _),delhi(Y).']

parsed: 
combination(X,Y):-singapore(X, _),delhi(Y), not singapore(X, butterfly).

jaccard: 1.0


245
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "lightblue" having fields "ID","singaporeID","surname", and the predicate "singapore" having fields "ID","weight". Define a predicate "lightblue_singapore" that associates to each "lightblue" the "weight" of "singapore" only where "weight" is different than 50.

answer from file: 
lightblue_singapore(X,Z):-lightblue(X,Y,_),singapore(Y,Z), Z!=50.

facts: 
lightblue("ID","singaporeID","surname").singapore("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "lightblue" having fields "ID","singaporeID","surname", and the predicate "singapore" having fields "ID","weight". Define a predicate "lightblue_singapore" that associates to each "lightblue" the "weight" of "singapore" only where "weight" is different than 50.
Answer: lightblue_singapore(X,Z):-lightblue(X,Y,_),singapore(Y,Z), Z!=50.
lightblue_singapore(X,Y,_):-lightblue(X,Y,_),singapore(Y,Z), Z==50.
retum(X,Y,_),lightblue(X,Y,_),name(Y,_,Z), Z!=50.
retum(X,Y,_),lightblue(X,Y,_),name(Y,_,Z), Z==50.
 quíname(X,Y,Z),not lightblue(X,_,Z).
 quíname(X,Y,Z),

unique_rules: 
['lightblue_singapore(X,Z):-lightblue(X,Y,_),singapore(Y,Z), Z!=50.', 'lightblue_singapore(X,Y,_):-lightblue(X,Y,_),singapore(Y,Z), Z==50.']

parsed: 
lightblue_singapore(X,Z):-lightblue(X,Y,_),singapore(Y,Z), Z!=50.

jaccard: 1.0


246
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "owner" having fields "ID","quality","cloudID", and the predicate "cloud" having fields "ID","owner". Define a predicate "owner_cloud" that associates to each "owner", not associated with label "flower", the attribute "owner" of "cloud".

answer from file: 
owner_cloud(X,Z):-owner(X,_,Y),cloud(Y,Z),not owner(X,flower,_).

facts: 
owner("ID","quality","cloudID").cloud("ID","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "owner" having fields "ID","quality","cloudID", and the predicate "cloud" having fields "ID","owner". Define a predicate "owner_cloud" that associates to each "owner", not associated with label "flower", the attribute "owner" of "cloud".
Answer: owner_cloud(X,Z):-owner(X,_,Y),cloud(Y,Z),not owner(X,flower,_).
owner_cloud(X,Z):-owner(X,_,Y),cloud(Y,Z),label(X,flower).
assign(X,Z):-owner_cloud(X,Z).
retum(X,Z):-owner(X,_,Y),cloud(Y,Z),not label(X,age).
retum(X,Z):-owner(X,_,Y),cloud(Y,Z),label(X,height).
retum(X,Z):-owner(X,_,Y),cloud(Y,Z),label(

unique_rules: 
['owner_cloud(X,Z):-owner(X,_,Y),cloud(Y,Z),not owner(X,flower,_).', 'owner_cloud(X,Z):-owner(X,_,Y),cloud(Y,Z),label(X,flower).', 'assign(X,Z):-owner_cloud(X,Z).', 'retum(X,Z):-owner(X,_,Y),cloud(Y,Z),not label(X,age).', 'retum(X,Z):-owner(X,_,Y),cloud(Y,Z),label(X,height).', 'retum(X,Z):-owner(X,_,Y),cloud(Y,Z),label(.']

parsed: 
owner_cloud(X,Z):-owner(X,_,Y),cloud(Y,Z),not owner(X,flower,_).

jaccard: 1.0


247
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "butterfly" as the transitive closure of predicate "pink". Then, assign exactly one label from the set chair,butterfly,laptop to each element in "butterfly".

answer from file: 
butterfly(X,Y):-pink(X,Y).
butterfly(X,Y):-pink(X,Z),butterfly(Z,Y).
assign(X,"chair")|assign(X,"butterfly")|assign(X,"laptop"):-butterfly(X,_).

facts: 
pink(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "butterfly" as the transitive closure of predicate "pink". Then, assign exactly one label from the set chair,butterfly,laptop to each element in "butterfly".
Answer: butterfly(X,Y):-pink(X,Y).
 ánguel(X,Y):-pink(X,Y).
assign(X,"chair")|assign(X," arrivant")|assign(X,"height") :-butterfly(X,_).
assign(X,"height") :- ánguel(X,_).
retum(X,Y):- ánguel(X,Y).
retum(X,Y):-color(X,Y).
retum(X,Y):-color(X,Y),height(X,Y).
retum(X,Y):-color(X,Y),height(X,Y),price(X,Y).
retum(X,Y):-color(

unique_rules: 
['butterfly(X,Y):-pink(X,Y).', 'ánguel(X,Y):-pink(X,Y).', 'assign(X,"chair")|assign(X," arrivant")|assign(X,"height") :-butterfly(X,_).', 'assign(X,"height") :- ánguel(X,_).', 'retum(X,Y):- ánguel(X,Y).', 'retum(X,Y):-color(X,Y).', 'retum(X,Y):-color(X,Y),height(X,Y).', 'retum(X,Y):-color(X,Y),height(X,Y),price(X,Y).', 'retum(X,Y):-color(.']

parsed: 
butterfly(X,Y):-pink(X,Y).
ánguel(X,Y):-pink(X,Y).
assign(X,"chair")|assign(X," arrivant")|assign(X,"height") :-butterfly(X,_).

jaccard: 0.0


248
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate darkmagenta. The labels are chair,butterfly,cloud,flower,desk,roof,wall. Consider only the predicate darkmagenta not associated with label "flower".

answer from file: 
assign(X,"chair")|assign(X,"butterfly")|assign(X,"cloud")|assign(X,"flower")|assign(X,"desk")|assign(X,"roof")|assign(X,"wall"):-darkmagenta(X, _), not darkmagenta(X, flower).

facts: 
darkmagenta(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate darkmagenta. The labels are chair,butterfly,cloud,flower,desk,roof,wall. Consider only the predicate darkmagenta not associated with label "flower".
Answer: assign(X,"chair")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"desk")|assign(X,"roof")|assign(X,"wall"):-darkmagenta(X, _), not darkmagenta(X, flower).
``` italienne
assign(X,"chair")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"desk")|assign(X,"roof")|assign(X,"wall"):-darkmagenta(X, _), not darkmagenta(X, flower).
```

unique_rules: 
['assign(X,"chair")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"desk")|assign(X,"roof")|assign(X,"wall"):-darkmagenta(X, _), not darkmagenta(X, flower).']

parsed: 
assign(X,"chair")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"desk")|assign(X,"roof")|assign(X,"wall"):-darkmagenta(X, _), not darkmagenta(X, flower).

jaccard: 1.0


249
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate lake and labels hair, owner having label owner different than 15. The labels are laptop,butterfly,wall,flower,storm,desk,cloud.

answer from file: 
assign(X,"laptop")|assign(X,"butterfly")|assign(X,"wall")|assign(X,"flower")|assign(X,"storm")|assign(X,"desk")|assign(X,"cloud"):-lake(X, Y), Y!=15 .

facts: 
lake(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate lake and labels hair, owner having label owner different than 15. The labels are laptop,butterfly,wall,flower,storm,desk,cloud.
Answer: assign(X," arrivant")|assign(X," felicità")|assign(X,"wall")|assign(X,"florence")|assign(X,"storm")|assign(X,"desk")|assign(X,"cloud"):-lake(X, Y), Y!=15 .
```
Assign(X," arrivant")|Assign(X," felicità")|Assign(X,"wall")|Assign(X,"florence")|Assign(X,"storm")|Assign(X,"desk")|Assign(X,"cloud"):-lake(X, Y), Y!=15 .
```

unique_rules: 
['assign(X," arrivant")|assign(X," felicità")|assign(X,"wall")|assign(X,"florence")|assign(X,"storm")|assign(X,"desk")|assign(X,"cloud"):-lake(X, Y), Y!=15 .', 'Assign(X," arrivant")|Assign(X," felicità")|Assign(X,"wall")|Assign(X,"florence")|Assign(X,"storm")|Assign(X,"desk")|Assign(X,"cloud"):-lake(X, Y), Y!=15 .']

parsed: 
assign(X," arrivant")|assign(X," felicità")|assign(X,"wall")|assign(X,"florence")|assign(X,"storm")|assign(X,"desk")|assign(X,"cloud"):-lake(X, Y), Y!=15 .

jaccard: 1.0


250
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate storm. The labels are roof,butterfly,chair,desk,laptop,storm,cloud,wall,flower.  Then, filter and return only the elements assigned to label roof.".

answer from file: 
assign(X,"roof")|assign(X,"butterfly")|assign(X,"chair")|assign(X,"desk")|assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud")|assign(X,"wall")|assign(X,"flower"):-storm(X).
select(X):-assign(X, "roof").

facts: 
storm(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate storm. The labels are roof,butterfly,chair,desk,laptop,storm,cloud,wall,flower.  Then, filter and return only the elements assigned to label roof.".
Answer: assign(X," felicità")|assign(X,"creator")|assign(X,"city")|assign(X,"age")|assign(X,"name")|assign(X,"price")|assign(X,"description")|assign(X,"author")|assign(X,"height")|retum(X, " felicità").
select(X):-assign(X, " felicità").
retum(X, " felicità").
 köp: for (X in storm) do assign(X, " felicità").
 köp: for (X in storm) doretum(X, " felicità").
 köp: for (X in storm) do assign(X, "creator").
 köp: for (X

unique_rules: 
['select(X):-assign(X, " felicità").']

parsed: 
select(X):-assign(X, " felicità").

jaccard: 0.0


251
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "darkmagenta" and "strength". However, avoid any combination where predicate "darkmagenta" has label "laptop".

answer from file: 
combination(X,Y):-darkmagenta(X, _),strength(Y), not darkmagenta(X, laptop).

facts: 
darkmagenta(1..4, 1..4).strength(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "darkmagenta" and "strength". However, avoid any combination where predicate "darkmagenta" has label "laptop".
Answer: combination(X,Y):-darkmagenta(X, _),strength(Y), not darkmagenta(X, _).
combination(X,Y):-darkmagenta(X, _),strength(Y).
assign(X, Y)
combination(X, Y).
retum.
assign(X, Y),
retum.
 espressione(X, Y).
retum.
 quíntuple(X, Y),
retum.
 bleue(X, Y),
retum.
shape(X, Y),
retum.
city(X, Y),
retum.
age(X, Y),
retum.
name(X, Y),
retum.
price(X,

unique_rules: 
['combination(X,Y):-darkmagenta(X, _),strength(Y), not darkmagenta(X, _).', 'combination(X,Y):-darkmagenta(X, _),strength(Y).']

parsed: 
combination(X,Y):-darkmagenta(X, _),strength(Y), not darkmagenta(X, _).

jaccard: 0.0


252
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "lightblue" having fields "ID","hair","stormID", and the predicate "storm" having fields "ID","surname". Define a predicate "lightblue_storm" that associates to each "lightblue" the "surname" of "storm" only where "surname" is different than 1.

answer from file: 
lightblue_storm(X,Z):-lightblue(X,_,Y),storm(Y,Z), Z!=1.

facts: 
lightblue("ID","hair","stormID").storm("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "lightblue" having fields "ID","hair","stormID", and the predicate "storm" having fields "ID","surname". Define a predicate "lightblue_storm" that associates to each "lightblue" the "surname" of "storm" only where "surname" is different than 1.
Answer: lightblue_storm(X,Z):-lightblue(X,_,Y),storm(Y,Z), Z!=1.
lightblue_storm(X,_,Y):-lightblue(X,_,Y),storm(Y,Z), Z==1.

unique_rules: 
['lightblue_storm(X,Z):-lightblue(X,_,Y),storm(Y,Z), Z!=1.', 'lightblue_storm(X,_,Y):-lightblue(X,_,Y),storm(Y,Z), Z==1.']

parsed: 
lightblue_storm(X,Z):-lightblue(X,_,Y),storm(Y,Z), Z!=1.

jaccard: 1.0


253
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "cairo" having fields "ID","lake","wallID", and the predicate "wall" having fields "ID","quality". Define a predicate "cairo_wall" that associates to each "cairo", not associated with label "cloud", the attribute "quality" of "wall".

answer from file: 
cairo_wall(X,Z):-cairo(X,_,Y),wall(Y,Z),not cairo(X,cloud,_).

facts: 
cairo("ID","lake","wallID").wall("ID","quality").

generated: 
Write an ASP program for the following problem. Consider predicate "cairo" having fields "ID","lake","wallID", and the predicate "wall" having fields "ID","quality". Define a predicate "cairo_wall" that associates to each "cairo", not associated with label "cloud", the attribute "quality" of "wall".
Answer: cairo_wall(X,Z):-cairo(X,_,Y),wall(Y,Z),not cairo(X,cloud,_).
cario_wall(X,Z):-cairo(X,_,Y),wall(Y,Z),label "cloud".
cario_wall(X,Z):-cairo(X,cloud,_),wall(Y,Z).
cario_wall(X,Z):-cairo(X,_,Y),wall(Y,Z).
cario_wall(X,Z):-cairo(X,cloud,Y),wall(Y,Z).
cario_wall(X,Z):-cairo(X,_,Y),wall(

unique_rules: 
['cairo_wall(X,Z):-cairo(X,_,Y),wall(Y,Z),not cairo(X,cloud,_).', 'cario_wall(X,Z):-cairo(X,_,Y),wall(Y,Z),label "cloud".', 'cario_wall(X,Z):-cairo(X,cloud,_),wall(Y,Z).', 'cario_wall(X,Z):-cairo(X,_,Y),wall(Y,Z).', 'cario_wall(X,Z):-cairo(X,cloud,Y),wall(Y,Z).', 'cario_wall(X,Z):-cairo(X,_,Y),wall(.']

parsed: 
cairo_wall(X,Z):-cairo(X,_,Y),wall(Y,Z),not cairo(X,cloud,_).

jaccard: 1.0


254
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "cosenza" as the transitive closure of predicate "toronto". Then, assign exactly one label from the set cloud,chair,laptop,storm,roof,desk,butterfly,flower to each element in "cosenza".

answer from file: 
cosenza(X,Y):-toronto(X,Y).
cosenza(X,Y):-toronto(X,Z),cosenza(Z,Y).
assign(X,"cloud")|assign(X,"chair")|assign(X,"laptop")|assign(X,"storm")|assign(X,"roof")|assign(X,"desk")|assign(X,"butterfly")|assign(X,"flower"):-cosenza(X,_).

facts: 
toronto(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "cosenza" as the transitive closure of predicate "toronto". Then, assign exactly one label from the set cloud,chair,laptop,storm,roof,desk,butterfly,flower to each element in "cosenza".
Answer: cosenza(X,Y):-toronto(X,Y).
cosenza(X,Y):-toronto(X,Z),cosenza(Z,Y).
assign(X,"cloud")|assign(X,"chair")|assign(X," arrivant")|assign(X,"storm")|assign(X,"roof")|assign(X,"desk")|assign(X," arrivant")|assign(X,"height")|assign(X,"author"):-cosenza(X,_).
retum(X,Y):- coscienza(X,Y).
retum(X,Y):- coscienza(X,Z),retum(Z,Y).
retum(X,Y):- coscienza(X,

unique_rules: 
['cosenza(X,Y):-toronto(X,Y).', 'cosenza(X,Y):-toronto(X,Z),cosenza(Z,Y).', 'assign(X,"cloud")|assign(X,"chair")|assign(X," arrivant")|assign(X,"storm")|assign(X,"roof")|assign(X,"desk")|assign(X," arrivant")|assign(X,"height")|assign(X,"author"):-cosenza(X,_).', 'retum(X,Y):- coscienza(X,Y).', 'retum(X,Y):- coscienza(X,Z),retum(Z,Y).', 'retum(X,Y):- coscienza(X,.']

parsed: 
cosenza(X,Y):-toronto(X,Y).
cosenza(X,Y):-toronto(X,Z),cosenza(Z,Y).
assign(X,"cloud")|assign(X,"chair")|assign(X," arrivant")|assign(X,"storm")|assign(X,"roof")|assign(X,"desk")|assign(X," arrivant")|assign(X,"height")|assign(X,"author"):-cosenza(X,_).

jaccard: 0.0


255
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate darkmagenta. The labels are chair,wall,desk,flower,storm. Consider only the predicate darkmagenta not associated with label "laptop".

answer from file: 
assign(X,"chair")|assign(X,"wall")|assign(X,"desk")|assign(X,"flower")|assign(X,"storm"):-darkmagenta(X, _), not darkmagenta(X, laptop).

facts: 
darkmagenta(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate darkmagenta. The labels are chair,wall,desk,flower,storm. Consider only the predicate darkmagenta not associated with label "laptop".
Answer: assign(X,"chair")|assign(X,"wall")|assign(X,"desk")|assign(X,"flower")|assign(X,"storm"):-darkmagenta(X, _), not darkmagenta(X, laptop).
```
assign(X,"chair")|assign(X,"wall")|assign(X,"desk")|assign(X,"flower")|assign(X,"storm"):-darkmagenta(X, _).
```

unique_rules: 
['assign(X,"chair")|assign(X,"wall")|assign(X,"desk")|assign(X,"flower")|assign(X,"storm"):-darkmagenta(X, _), not darkmagenta(X, laptop).', 'assign(X,"chair")|assign(X,"wall")|assign(X,"desk")|assign(X,"flower")|assign(X,"storm"):-darkmagenta(X, _).']

parsed: 
assign(X,"chair")|assign(X,"wall")|assign(X,"desk")|assign(X,"flower")|assign(X,"storm"):-darkmagenta(X, _), not darkmagenta(X, laptop).

jaccard: 1.0


256
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate moscow and labels weight, hair having label hair different than 89. The labels are butterfly,wall,cloud,desk.

answer from file: 
assign(X,"butterfly")|assign(X,"wall")|assign(X,"cloud")|assign(X,"desk"):-moscow(X, Y), Y!=89 .

facts: 
moscow(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate moscow and labels weight, hair having label hair different than 89. The labels are butterfly,wall,cloud,desk.
Answer: assign(X," lavorato")|assign(X,"wall")|assign(X,"cloud")|assign(X,"desk"):-moscow(X, Y), Y!=89 .
```
assign(X," lavorato")|assign(X,"wall")|assign(X,"cloud")|assign(X,"desk"):-moscow(X, Y), Y!=89 .
```

unique_rules: 
['assign(X," lavorato")|assign(X,"wall")|assign(X,"cloud")|assign(X,"desk"):-moscow(X, Y), Y!=89 .']

parsed: 
assign(X," lavorato")|assign(X,"wall")|assign(X,"cloud")|assign(X,"desk"):-moscow(X, Y), Y!=89 .

jaccard: 1.0


257
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate quality. The labels are storm,flower,wall,laptop,chair,cloud,roof.  Then, filter and return only the elements assigned to label chair.".

answer from file: 
assign(X,"storm")|assign(X,"flower")|assign(X,"wall")|assign(X,"laptop")|assign(X,"chair")|assign(X,"cloud")|assign(X,"roof"):-quality(X).
select(X):-assign(X, "chair").

facts: 
quality(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate quality. The labels are storm,flower,wall,laptop,chair,cloud,roof.  Then, filter and return only the elements assigned to label chair.".
Answer: assign(X,"storm")|assign(X,"flower")|assign(X,"wall")|assign(X,"laptop")|assign(X,"chair")|assign(X,"cloud")|assign(X,"roof"):-quality(X).
select(X):-assign(X, "chair").
```
The predicate "assign" associates to each element the label among a set of labels expressed by "object".
Then, "select" returns only the elements assigned to label "chair".
The labels are "age","description","city","name","price","author","height","shape","creator","descriptionID","cityID","priceID","nameID","ageID","descriptionID","height

unique_rules: 
['assign(X,"storm")|assign(X,"flower")|assign(X,"wall")|assign(X,"laptop")|assign(X,"chair")|assign(X,"cloud")|assign(X,"roof"):-quality(X).', 'select(X):-assign(X, "chair").']

parsed: 
assign(X,"storm")|assign(X,"flower")|assign(X,"wall")|assign(X,"laptop")|assign(X,"chair")|assign(X,"cloud")|assign(X,"roof"):-quality(X).
select(X):-assign(X, "chair").

jaccard: 1.0


258
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "white" and "cosenza". However, avoid any combination where predicate "white" has label "flower".

answer from file: 
combination(X,Y):-white(X, _),cosenza(Y), not white(X, flower).

facts: 
white(1..4, 1..4).cosenza(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "white" and "cosenza". However, avoid any combination where predicate "white" has label "flower".
Answer: combination(X,Y):-white(X, _),cosenza(Y), not white(X, flower).
combination(X,Y):-white(X, _),cosenza(Y).
combination(X,Y):-white(X, _),cosenza(Y), label(X, flower).
```
Combinations are expressed by predicate "combination".
However, avoid any combination where predicate "white" has label "florence".
Combinations are expressed by predicate "combination".
But avoid any combination where predicate "white" has label "florence".
Result: combination(X,Y):-white(X, _),cosenza(Y), not white(X, flo

unique_rules: 
['combination(X,Y):-white(X, _),cosenza(Y), not white(X, flower).', 'combination(X,Y):-white(X, _),cosenza(Y).', 'combination(X,Y):-white(X, _),cosenza(Y), label(X, flower).', 'Result: combination(X,Y):-white(X, _),cosenza(Y), not white(X, flo.']

parsed: 
combination(X,Y):-white(X, _),cosenza(Y), not white(X, flower).

jaccard: 1.0


259
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "delhi" having fields "ID","whiteID","surname", and the predicate "white" having fields "ID","owner". Define a predicate "delhi_white" that associates to each "delhi" the "owner" of "white" only where "owner" is different than 71.

answer from file: 
delhi_white(X,Z):-delhi(X,Y,_),white(Y,Z), Z!=71.

facts: 
delhi("ID","whiteID","surname").white("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "delhi" having fields "ID","whiteID","surname", and the predicate "white" having fields "ID","owner". Define a predicate "delhi_white" that associates to each "delhi" the "owner" of "white" only where "owner" is different than 71.
Answer: delhi_white(X,Z):-delhi(X,Y,_),white(Y,Z), Z!=71.
delhi_white(X,Y,_):-delhi(X,Y,_),white(Y,Z), Z==71.
retum(X,Y,_),delhi(X,Y,_),white(Y,Z), Z!=71.
retum(X,Y,_),delhi(X,Y,_),white(Y,Z), Z==71.
 quíname(X,Y,_),retum(X,Y,Z), Z!=71.
 quíname(X,Y,_),retum(X,Y

unique_rules: 
['delhi_white(X,Z):-delhi(X,Y,_),white(Y,Z), Z!=71.', 'delhi_white(X,Y,_):-delhi(X,Y,_),white(Y,Z), Z==71.']

parsed: 
delhi_white(X,Z):-delhi(X,Y,_),white(Y,Z), Z!=71.

jaccard: 1.0


260
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "cosenza" having fields "ID","lake","chairID", and the predicate "chair" having fields "ID","hair". Define a predicate "cosenza_chair" that associates to each "cosenza", not associated with label "laptop", the attribute "hair" of "chair".

answer from file: 
cosenza_chair(X,Z):-cosenza(X,_,Y),chair(Y,Z),not cosenza(X,laptop,_).

facts: 
cosenza("ID","lake","chairID").chair("ID","hair").

generated: 
Write an ASP program for the following problem. Consider predicate "cosenza" having fields "ID","lake","chairID", and the predicate "chair" having fields "ID","hair". Define a predicate "cosenza_chair" that associates to each "cosenza", not associated with label "laptop", the attribute "hair" of "chair".
Answer: cosenza_chair(X,Z):-cosenza(X,_,Y),chair(Y,Z),not cosenza(X,laptop,_).
```
 espérate:
retum(X,Y):-cosenza(X,_,Y),chair(Y,Z).
retum(X,_,Y):-cosenza(X,_,Y),not chair(Y,Z).
```
Then, "retum" associates to each "cosenza", not associated with label "moto", the attribute "hair" of "chair".
Name:retum
Description: Associates to each "cosenza", not associated with label "moto", the attribute "hair" of "chair".
 beden(X

unique_rules: 
['cosenza_chair(X,Z):-cosenza(X,_,Y),chair(Y,Z),not cosenza(X,laptop,_).', 'retum(X,Y):-cosenza(X,_,Y),chair(Y,Z).', 'retum(X,_,Y):-cosenza(X,_,Y),not chair(Y,Z).']

parsed: 
cosenza_chair(X,Z):-cosenza(X,_,Y),chair(Y,Z),not cosenza(X,laptop,_).

jaccard: 1.0


261
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "hair" as the transitive closure of predicate "pink". Then, assign exactly one label from the set roof,laptop,storm,desk,cloud,chair,wall to each element in "hair".

answer from file: 
hair(X,Y):-pink(X,Y).
hair(X,Y):-pink(X,Z),hair(Z,Y).
assign(X,"roof")|assign(X,"laptop")|assign(X,"storm")|assign(X,"desk")|assign(X,"cloud")|assign(X,"chair")|assign(X,"wall"):-hair(X,_).

facts: 
pink(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "hair" as the transitive closure of predicate "pink". Then, assign exactly one label from the set roof,laptop,storm,desk,cloud,chair,wall to each element in "hair".
Answer: hair(X,Y):-pink(X,Y).
hair(X,Y):-pink(X,Z),hair(Z,Y).
assign(X,"roof")|assign(X,"laptop")|assign(X,"storm")|assign(X,"desk")|assign(X,"cloud")|assign(X,"chair")|assign(X,"wall"):-hair(X,_).
retum:
assign(X,"city")|assign(X,"age")|assign(X,"description")|assign(X,"price")|assign(X,"name")|assign(X,"shape")|assign(X,"author").
retum(X,Y):-hair(

unique_rules: 
['hair(X,Y):-pink(X,Y).', 'hair(X,Y):-pink(X,Z),hair(Z,Y).', 'assign(X,"roof")|assign(X,"laptop")|assign(X,"storm")|assign(X,"desk")|assign(X,"cloud")|assign(X,"chair")|assign(X,"wall"):-hair(X,_).', 'retum(X,Y):-hair(.']

parsed: 
hair(X,Y):-pink(X,Y).
hair(X,Y):-pink(X,Z),hair(Z,Y).
assign(X,"roof")|assign(X,"laptop")|assign(X,"storm")|assign(X,"desk")|assign(X,"cloud")|assign(X,"chair")|assign(X,"wall"):-hair(X,_).

jaccard: 1.0


262
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate pink. The labels are chair,butterfly,cloud,laptop,flower,storm,desk,roof,wall. Consider only the predicate pink not associated with label "laptop".

answer from file: 
assign(X,"chair")|assign(X,"butterfly")|assign(X,"cloud")|assign(X,"laptop")|assign(X,"flower")|assign(X,"storm")|assign(X,"desk")|assign(X,"roof")|assign(X,"wall"):-pink(X, _), not pink(X, laptop).

facts: 
pink(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate pink. The labels are chair,butterfly,cloud,laptop,flower,storm,desk,roof,wall. Consider only the predicate pink not associated with label "laptop".
Answer: assign(X,"chair")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"laptop")|assign(X,"flower")|assign(X,"storm")|assign(X,"desk")|assign(X,"roof")|assign(X,"wall"):-pink(X, _), not pink(X, laptop).
```
assign(X,"chair")|assign(X," arrivant")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"florence")|assign(X,"shape")|assign(X,"city")|assign(X,"name")|assign(X,"price"):-pink(X,

unique_rules: 
['assign(X,"chair")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"laptop")|assign(X,"flower")|assign(X,"storm")|assign(X,"desk")|assign(X,"roof")|assign(X,"wall"):-pink(X, _), not pink(X, laptop).', 'assign(X,"chair")|assign(X," arrivant")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"florence")|assign(X,"shape")|assign(X,"city")|assign(X,"name")|assign(X,"price"):-pink(X,.']

parsed: 
assign(X,"chair")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"laptop")|assign(X,"flower")|assign(X,"storm")|assign(X,"desk")|assign(X,"roof")|assign(X,"wall"):-pink(X, _), not pink(X, laptop).

jaccard: 1.0


263
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate toronto and labels lake, surname having label surname different than 29. The labels are laptop,storm,flower,desk,cloud,butterfly,chair,wall,roof.

answer from file: 
assign(X,"laptop")|assign(X,"storm")|assign(X,"flower")|assign(X,"desk")|assign(X,"cloud")|assign(X,"butterfly")|assign(X,"chair")|assign(X,"wall")|assign(X,"roof"):-toronto(X, Y), Y!=29 .

facts: 
toronto(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate toronto and labels lake, surname having label surname different than 29. The labels are laptop,storm,flower,desk,cloud,butterfly,chair,wall,roof.
Answer: assign(X," arrivant")|assign(X,"storm")|assign(X,"flower")|assign(X,"desk")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"florence")|assign(X,"chair")|assign(X,"wall")|assign(X,"roof"):-toronto(X, Y), Y!=29 .
```
Assign(X," arrivant")|Assign(X,"storm")|Assign(X,"flower")|Assign(X,"desk")|Assign(X,"cloud")|Assign(X," arrivant")|Assign(X,"florence")|Assign(X,"chair")|Assign(X,"wall

unique_rules: 
['assign(X," arrivant")|assign(X,"storm")|assign(X,"flower")|assign(X,"desk")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"florence")|assign(X,"chair")|assign(X,"wall")|assign(X,"roof"):-toronto(X, Y), Y!=29 .']

parsed: 
assign(X," arrivant")|assign(X,"storm")|assign(X,"flower")|assign(X,"desk")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"florence")|assign(X,"chair")|assign(X,"wall")|assign(X,"roof"):-toronto(X, Y), Y!=29 .

jaccard: 1.0


264
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate flower. The labels are storm,chair,desk,laptop,flower,wall,roof,cloud.  Then, filter and return only the elements assigned to label cloud.".

answer from file: 
assign(X,"storm")|assign(X,"chair")|assign(X,"desk")|assign(X,"laptop")|assign(X,"flower")|assign(X,"wall")|assign(X,"roof")|assign(X,"cloud"):-flower(X).
select(X):-assign(X, "cloud").

facts: 
flower(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate flower. The labels are storm,chair,desk,laptop,flower,wall,roof,cloud.  Then, filter and return only the elements assigned to label cloud.".
Answer: assign(X,"storm")|assign(X,"chair")|assign(X,"desk")|assign(X,"laptop")|assign(X,"florence")|assign(X,"wall")|assign(X,"roof")|assign(X,"cloud"):-flower(X).
select(X):-assign(X, "cloud").
```
The predicate flower returns all the elements associated with label "florence".
The predicate assign associates to each element, among a set of labels, a single label.
The predicate select returns only the elements assigned to label "florence".
The predicate filter returns only the elements assigned to label "florence".
The label "florence" is

unique_rules: 
['assign(X,"storm")|assign(X,"chair")|assign(X,"desk")|assign(X,"laptop")|assign(X,"florence")|assign(X,"wall")|assign(X,"roof")|assign(X,"cloud"):-flower(X).', 'select(X):-assign(X, "cloud").']

parsed: 
assign(X,"storm")|assign(X,"chair")|assign(X,"desk")|assign(X,"laptop")|assign(X,"florence")|assign(X,"wall")|assign(X,"roof")|assign(X,"cloud"):-flower(X).
select(X):-assign(X, "cloud").

jaccard: 1.0


265
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "moscow" and "owner". However, avoid any combination where predicate "moscow" has label "butterfly".

answer from file: 
combination(X,Y):-moscow(X, _),owner(Y), not moscow(X, butterfly).

facts: 
moscow(1..4, 1..4).owner(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "moscow" and "owner". However, avoid any combination where predicate "moscow" has label "butterfly".
Answer: combination(X,Y):-moscow(X, _),owner(Y), not moscow(X, butterfly).
combination(X,Y):-moscow(X, _),owner(Y).
```
Combinations are expressed by predicate "combination".
However, avoid any combination where predicate "moscow" has label "description".
Result: combination(X,Y):-description(X, Y).
combination(X,Y):-description(X, _),owner(Y).
combination(X,Y):-description(X, _),creator(Y).
combinations(X,Y):-description(X, Y).
```
The predicate "creator" has label "description

unique_rules: 
['combination(X,Y):-moscow(X, _),owner(Y), not moscow(X, butterfly).', 'combination(X,Y):-moscow(X, _),owner(Y).', 'Result: combination(X,Y):-description(X, Y).', 'combination(X,Y):-description(X, _),owner(Y).', 'combination(X,Y):-description(X, _),creator(Y).', 'combinations(X,Y):-description(X, Y).']

parsed: 
combination(X,Y):-moscow(X, _),owner(Y), not moscow(X, butterfly).

jaccard: 1.0


266
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "lightblue" having fields "ID","hair","stormID", and the predicate "storm" having fields "ID","surname". Define a predicate "lightblue_storm" that associates to each "lightblue" the "surname" of "storm" only where "surname" is different than 1.

answer from file: 
lightblue_storm(X,Z):-lightblue(X,_,Y),storm(Y,Z), Z!=1.

facts: 
lightblue("ID","hair","stormID").storm("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "lightblue" having fields "ID","hair","stormID", and the predicate "storm" having fields "ID","surname". Define a predicate "lightblue_storm" that associates to each "lightblue" the "surname" of "storm" only where "surname" is different than 1.
Answer: lightblue_storm(X,Z):-lightblue(X,_,Y),storm(Y,Z), Z!=1.
lightblue_storm(X,_,Y):-lightblue(X,_,Y),storm(Y,Z), Z==1.

unique_rules: 
['lightblue_storm(X,Z):-lightblue(X,_,Y),storm(Y,Z), Z!=1.', 'lightblue_storm(X,_,Y):-lightblue(X,_,Y),storm(Y,Z), Z==1.']

parsed: 
lightblue_storm(X,Z):-lightblue(X,_,Y),storm(Y,Z), Z!=1.

jaccard: 1.0


267
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "cairo" having fields "ID","lake","wallID", and the predicate "wall" having fields "ID","quality". Define a predicate "cairo_wall" that associates to each "cairo", not associated with label "cloud", the attribute "quality" of "wall".

answer from file: 
cairo_wall(X,Z):-cairo(X,_,Y),wall(Y,Z),not cairo(X,cloud,_).

facts: 
cairo("ID","lake","wallID").wall("ID","quality").

generated: 
Write an ASP program for the following problem. Consider predicate "cairo" having fields "ID","lake","wallID", and the predicate "wall" having fields "ID","quality". Define a predicate "cairo_wall" that associates to each "cairo", not associated with label "cloud", the attribute "quality" of "wall".
Answer: cairo_wall(X,Z):-cairo(X,_,Y),wall(Y,Z),not cairo(X,cloud,_).
cario_wall(X,Z):-cairo(X,_,Y),wall(Y,Z),label "cloud".
cario_wall(X,Z):-cairo(X,cloud,_),wall(Y,Z).
cario_wall(X,Z):-cairo(X,_,Y),wall(Y,Z).
cario_wall(X,Z):-cairo(X,cloud,Y),wall(Y,Z).
cario_wall(X,Z):-cairo(X,_,Y),wall(

unique_rules: 
['cairo_wall(X,Z):-cairo(X,_,Y),wall(Y,Z),not cairo(X,cloud,_).', 'cario_wall(X,Z):-cairo(X,_,Y),wall(Y,Z),label "cloud".', 'cario_wall(X,Z):-cairo(X,cloud,_),wall(Y,Z).', 'cario_wall(X,Z):-cairo(X,_,Y),wall(Y,Z).', 'cario_wall(X,Z):-cairo(X,cloud,Y),wall(Y,Z).', 'cario_wall(X,Z):-cairo(X,_,Y),wall(.']

parsed: 
cairo_wall(X,Z):-cairo(X,_,Y),wall(Y,Z),not cairo(X,cloud,_).

jaccard: 1.0


268
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "cosenza" as the transitive closure of predicate "toronto". Then, assign exactly one label from the set cloud,chair,laptop,storm,roof,desk,butterfly,flower to each element in "cosenza".

answer from file: 
cosenza(X,Y):-toronto(X,Y).
cosenza(X,Y):-toronto(X,Z),cosenza(Z,Y).
assign(X,"cloud")|assign(X,"chair")|assign(X,"laptop")|assign(X,"storm")|assign(X,"roof")|assign(X,"desk")|assign(X,"butterfly")|assign(X,"flower"):-cosenza(X,_).

facts: 
toronto(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "cosenza" as the transitive closure of predicate "toronto". Then, assign exactly one label from the set cloud,chair,laptop,storm,roof,desk,butterfly,flower to each element in "cosenza".
Answer: cosenza(X,Y):-toronto(X,Y).
cosenza(X,Y):-toronto(X,Z),cosenza(Z,Y).
assign(X,"cloud")|assign(X,"chair")|assign(X," arrivant")|assign(X,"storm")|assign(X,"roof")|assign(X,"desk")|assign(X," arrivant")|assign(X,"height")|assign(X,"author"):-cosenza(X,_).
retum:
assign(X,"author")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"description")|assign(X,"

unique_rules: 
['cosenza(X,Y):-toronto(X,Y).', 'cosenza(X,Y):-toronto(X,Z),cosenza(Z,Y).', 'assign(X,"cloud")|assign(X,"chair")|assign(X," arrivant")|assign(X,"storm")|assign(X,"roof")|assign(X,"desk")|assign(X," arrivant")|assign(X,"height")|assign(X,"author"):-cosenza(X,_).']

parsed: 
cosenza(X,Y):-toronto(X,Y).
cosenza(X,Y):-toronto(X,Z),cosenza(Z,Y).
assign(X,"cloud")|assign(X,"chair")|assign(X," arrivant")|assign(X,"storm")|assign(X,"roof")|assign(X,"desk")|assign(X," arrivant")|assign(X,"height")|assign(X,"author"):-cosenza(X,_).

jaccard: 0.0


269
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate darkmagenta. The labels are chair,wall,desk,flower,storm. Consider only the predicate darkmagenta not associated with label "laptop".

answer from file: 
assign(X,"chair")|assign(X,"wall")|assign(X,"desk")|assign(X,"flower")|assign(X,"storm"):-darkmagenta(X, _), not darkmagenta(X, laptop).

facts: 
darkmagenta(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate darkmagenta. The labels are chair,wall,desk,flower,storm. Consider only the predicate darkmagenta not associated with label "laptop".
Answer: assign(X,"chair")|assign(X,"wall")|assign(X,"desk")|assign(X,"flower")|assign(X,"storm"):-darkmagenta(X, _), not darkmagenta(X, laptop).
``` italienne
assign(X,"chair")|assign(X,"wall")|assign(X,"desk")|assign(X,"flower")|assign(X,"storm"):-darkmagenta(X, _), not darkmagenta(X, laptop).
```

unique_rules: 
['assign(X,"chair")|assign(X,"wall")|assign(X,"desk")|assign(X,"flower")|assign(X,"storm"):-darkmagenta(X, _), not darkmagenta(X, laptop).']

parsed: 
assign(X,"chair")|assign(X,"wall")|assign(X,"desk")|assign(X,"flower")|assign(X,"storm"):-darkmagenta(X, _), not darkmagenta(X, laptop).

jaccard: 1.0


270
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate moscow and labels weight, hair having label hair different than 89. The labels are butterfly,wall,cloud,desk.

answer from file: 
assign(X,"butterfly")|assign(X,"wall")|assign(X,"cloud")|assign(X,"desk"):-moscow(X, Y), Y!=89 .

facts: 
moscow(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate moscow and labels weight, hair having label hair different than 89. The labels are butterfly,wall,cloud,desk.
Answer: assign(X," originaux")|assign(X,"description")|assign(X,"city")|assign(X,"name")|assign(X,"price")|assign(X,"height")|retum(X, Y), Y!=89 .
 köp(X, Y), Y!=89 .
```
 köp(X, Y), Y!=89 .
assign(X," originaux")|assign(X,"description")|assign(X,"city")|assign(X,"name")|assign(X,"price")|assign(X,"height")|retum(X, Y), Y!=89 .
```
The predicate moscow has label "description", and the

unique_rules: 
[]

parsed: 


jaccard: 0.0


271
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate quality. The labels are storm,flower,wall,laptop,chair,cloud,roof.  Then, filter and return only the elements assigned to label chair.".

answer from file: 
assign(X,"storm")|assign(X,"flower")|assign(X,"wall")|assign(X,"laptop")|assign(X,"chair")|assign(X,"cloud")|assign(X,"roof"):-quality(X).
select(X):-assign(X, "chair").

facts: 
quality(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate quality. The labels are storm,flower,wall,laptop,chair,cloud,roof.  Then, filter and return only the elements assigned to label chair.".
Answer: assign(X," cœurs")|assign(X,"florence")|assign(X,"wall")|assign(X,"laptop")|assign(X,"chair")|assign(X,"cloud")|assign(X,"roof"):-quality(X).
select(X):-assign(X, "chair").
```
The predicate "assign" associates to each element the label among a given set of labels. The set of labels is expressed by predicate "quality". Then, "select" returns only the elements assigned to label "chair".
The predicate "quality" has label "name", and "chair" has label "description". So, "select" returns only the elements assigned to label "description

unique_rules: 
['assign(X," cœurs")|assign(X,"florence")|assign(X,"wall")|assign(X,"laptop")|assign(X,"chair")|assign(X,"cloud")|assign(X,"roof"):-quality(X).', 'select(X):-assign(X, "chair").']

parsed: 
assign(X," cœurs")|assign(X,"florence")|assign(X,"wall")|assign(X,"laptop")|assign(X,"chair")|assign(X,"cloud")|assign(X,"roof"):-quality(X).
select(X):-assign(X, "chair").

jaccard: 1.0


272
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "white" and "cosenza". However, avoid any combination where predicate "white" has label "flower".

answer from file: 
combination(X,Y):-white(X, _),cosenza(Y), not white(X, flower).

facts: 
white(1..4, 1..4).cosenza(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "white" and "cosenza". However, avoid any combination where predicate "white" has label "flower".
Answer: combination(X,Y):-white(X, _),cosenza(Y), not white(X, flower).
combination(X,Y):-white(X, _),cosenza(Y).
combination(X,Y):-white(X, _),cosenza(Y), label(X, flower).
```
Combinations are expressed by predicate "combination".
However, avoid any combination where predicate "white" has label "florence".
Combinations are expressed by predicate "combination".
But avoid any combination where predicate "white" has label "florence".
Result: combination(X,Y):-white(X, _),cosenza(Y), not white(X, flo

unique_rules: 
['combination(X,Y):-white(X, _),cosenza(Y), not white(X, flower).', 'combination(X,Y):-white(X, _),cosenza(Y).', 'combination(X,Y):-white(X, _),cosenza(Y), label(X, flower).', 'Result: combination(X,Y):-white(X, _),cosenza(Y), not white(X, flo.']

parsed: 
combination(X,Y):-white(X, _),cosenza(Y), not white(X, flower).

jaccard: 1.0


273
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "lightblue" having fields "ID","wallID","owner", and the predicate "wall" having fields "ID","surname". Define a predicate "lightblue_wall" that associates to each "lightblue" the "surname" of "wall" only where "surname" is different than 87.

answer from file: 
lightblue_wall(X,Z):-lightblue(X,Y,_),wall(Y,Z), Z!=87.

facts: 
lightblue("ID","wallID","owner").wall("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "lightblue" having fields "ID","wallID","owner", and the predicate "wall" having fields "ID","surname". Define a predicate "lightblue_wall" that associates to each "lightblue" the "surname" of "wall" only where "surname" is different than 87.
Answer: lightblue_wall(X,Z):-lightblue(X,Y,_),wall(Y,Z), Z!=87.
lightblue_wall(X,Y,_):-lightblue(X,Y,_),wall(Y,Z), Z==87.
assign(X,"name")|assign(X,"description")|assign(X,"price"):-lightblue_wall(X,_,_).
retum(X,Y),Z!=87.
retum(X,_,87).
 quíname(X,Z), Z!=87.
 quíname(X,Z), Z==87.
 quíname(X,_,_).


unique_rules: 
['lightblue_wall(X,Z):-lightblue(X,Y,_),wall(Y,Z), Z!=87.', 'lightblue_wall(X,Y,_):-lightblue(X,Y,_),wall(Y,Z), Z==87.', 'assign(X,"name")|assign(X,"description")|assign(X,"price"):-lightblue_wall(X,_,_).']

parsed: 
lightblue_wall(X,Z):-lightblue(X,Y,_),wall(Y,Z), Z!=87.

jaccard: 1.0


274
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "chicago" having fields "ID","cosenzaID","quality", and the predicate "cosenza" having fields "ID","owner". Define a predicate "chicago_cosenza" that associates to each "chicago", not associated with label "butterfly", the attribute "owner" of "cosenza".

answer from file: 
chicago_cosenza(X,Z):-chicago(X,Y,_),cosenza(Y,Z),not chicago(X,_,butterfly).

facts: 
chicago("ID","cosenzaID","quality").cosenza("ID","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "chicago" having fields "ID","cosenzaID","quality", and the predicate "cosenza" having fields "ID","owner". Define a predicate "chicago_cosenza" that associates to each "chicago", not associated with label "butterfly", the attribute "owner" of "cosenza".
Result: chicago_cosenza(X,Z):-chicago(X,Y,_),cosenza(Y,Z),not chicago(X,_,butterfly).
 ángulo(X,Y,Z):-chicago(X,Y,_),cosenza(Y,Z),not chicago(X,_,creator).
 ángulo(X,Y,Z):-chicago(X,Y,creator),creator(Y,Z),not chicago(X,_,name).
 ángulo(X,Y,Z):-chicago(X,Y,creator),creator(Y,Z),name(X,_,creator).
 ángulo(X,Y,Z):-chicago(X,Y,creator),creator(Y

unique_rules: 
['Result: chicago_cosenza(X,Z):-chicago(X,Y,_),cosenza(Y,Z),not chicago(X,_,butterfly).', 'ángulo(X,Y,Z):-chicago(X,Y,_),cosenza(Y,Z),not chicago(X,_,creator).', 'ángulo(X,Y,Z):-chicago(X,Y,creator),creator(Y,Z),not chicago(X,_,name).', 'ángulo(X,Y,Z):-chicago(X,Y,creator),creator(Y,Z),name(X,_,creator).', 'ángulo(X,Y,Z):-chicago(X,Y,creator),creator(Y.']

parsed: 
Result: chicago_cosenza(X,Z):-chicago(X,Y,_),cosenza(Y,Z),not chicago(X,_,butterfly).

jaccard: 0.0


275
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "cloud" as the transitive closure of predicate "weight". Then, assign exactly one label from the set roof,butterfly,storm,laptop,chair,desk,wall to each element in "cloud".

answer from file: 
cloud(X,Y):-weight(X,Y).
cloud(X,Y):-weight(X,Z),cloud(Z,Y).
assign(X,"roof")|assign(X,"butterfly")|assign(X,"storm")|assign(X,"laptop")|assign(X,"chair")|assign(X,"desk")|assign(X,"wall"):-cloud(X,_).

facts: 
weight(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "cloud" as the transitive closure of predicate "weight". Then, assign exactly one label from the set roof,butterfly,storm,laptop,chair,desk,wall to each element in "cloud".
Answer: cloud(X,Y):-weight(X,Y).
cloud(X,Y):-weight(X,Z),cloud(Z,Y).
assign(X,"roof")|assign(X," arrivant")|assign(X,"height")|assign(X,"name")|assign(X,"age")|assign(X,"description")|assign(X,"city")|assign(X,"shape") :-cloud(X,_).
retum:assign(X,"description").
retum:assign(X,"shape").
retum:assign(X,"city").
retum:assign(X,"description").
retum:assign(X,"shape").
retum:assign(X,"description

unique_rules: 
['cloud(X,Y):-weight(X,Y).', 'cloud(X,Y):-weight(X,Z),cloud(Z,Y).', 'assign(X,"roof")|assign(X," arrivant")|assign(X,"height")|assign(X,"name")|assign(X,"age")|assign(X,"description")|assign(X,"city")|assign(X,"shape") :-cloud(X,_).']

parsed: 
cloud(X,Y):-weight(X,Y).
cloud(X,Y):-weight(X,Z),cloud(Z,Y).
assign(X,"roof")|assign(X," arrivant")|assign(X,"height")|assign(X,"name")|assign(X,"age")|assign(X,"description")|assign(X,"city")|assign(X,"shape") :-cloud(X,_).

jaccard: 0.0


276
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are butterfly,roof,wall,cloud. Consider only the predicate lake not associated with label "butterfly".

answer from file: 
assign(X,"butterfly")|assign(X,"roof")|assign(X,"wall")|assign(X,"cloud"):-lake(X, _), not lake(X, butterfly).

facts: 
lake(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are butterfly,roof,wall,cloud. Consider only the predicate lake not associated with label "butterfly".
Answer: assign(X," plais")|assign(X,"rome")|assign(X,"city")|assign(X,"height")|assign(X,"description")==>lake(X, _), not lake(X, butterfly).
retum(X, Y):-assign(X, Y).
retum(X, Y):-assign(X, _), not lake(X, Y).
assign(X,"description"):-retum(X, _).
assign(X,"description"):-retum(X, Y).
retum(X, Y):-assign(X, _), lake(X, Y).
retum(X, Y):-assign(X, _), not lake(X, Y

unique_rules: 
['retum(X, Y):-assign(X, Y).', 'retum(X, Y):-assign(X, _), not lake(X, Y).', 'assign(X,"description"):-retum(X, _).', 'assign(X,"description"):-retum(X, Y).', 'retum(X, Y):-assign(X, _), lake(X, Y).', 'retum(X, Y):-assign(X, _), not lake(X, Y.']

parsed: 
retum(X, Y):-assign(X, Y).

jaccard: 0.0


277
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate pink and labels lake, hair having label hair different than 23. The labels are laptop,storm,chair,desk,flower,cloud,butterfly,roof.

answer from file: 
assign(X,"laptop")|assign(X,"storm")|assign(X,"chair")|assign(X,"desk")|assign(X,"flower")|assign(X,"cloud")|assign(X,"butterfly")|assign(X,"roof"):-pink(X, Y), Y!=23 .

facts: 
pink(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate pink and labels lake, hair having label hair different than 23. The labels are laptop,storm,chair,desk,flower,cloud,butterfly,roof.
Answer: assign(X," arrivant")|assign(X," peines")|assign(X,"height")|assign(X,"creator")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"name")|assign(X,"price")|assign(X,"shape") :-pink(X, Y), Y!=23 .
Assign(X,"creator")|assign(X,"description")|assign(X,"name")|assign(X,"price")|assign(X,"shape") :-florence(X).
The predicate florence has label description, and the predicate pink has label creator, description, name, price,

unique_rules: 
['assign(X," arrivant")|assign(X," peines")|assign(X,"height")|assign(X,"creator")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"name")|assign(X,"price")|assign(X,"shape") :-pink(X, Y), Y!=23 .', 'Assign(X,"creator")|assign(X,"description")|assign(X,"name")|assign(X,"price")|assign(X,"shape") :-florence(X).']

parsed: 
assign(X," arrivant")|assign(X," peines")|assign(X,"height")|assign(X,"creator")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"name")|assign(X,"price")|assign(X,"shape") :-pink(X, Y), Y!=23 .

jaccard: 0.0


278
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate pink. The labels are chair,cloud,wall,roof,butterfly.  Then, filter and return only the elements assigned to label cloud.".

answer from file: 
assign(X,"chair")|assign(X,"cloud")|assign(X,"wall")|assign(X,"roof")|assign(X,"butterfly"):-pink(X).
select(X):-assign(X, "cloud").

facts: 
pink(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate pink. The labels are chair,cloud,wall,roof,butterfly.  Then, filter and return only the elements assigned to label cloud.".
Answer: assign(X,"chair")|assign(X,"cloud")|assign(X,"wall")|assign(X,"roof")|assign(X," épar").
select(X):-assign(X, "cloud").
retum(X):-assign(X, "cloud").
```
Assign(X,"chair")|Assign(X,"cloud")|Assign(X,"wall")|Assign(X,"roof")|Assign(X," épar"):-pink(X).
select(X):-assign(X, "cloud").
retum(X):-assign(X, "cloud").
description:assign(X,"city").
retum(X):-assign(X, "city").
age

unique_rules: 
['select(X):-assign(X, "cloud").', 'retum(X):-assign(X, "cloud").', 'Assign(X,"chair")|Assign(X,"cloud")|Assign(X,"wall")|Assign(X,"roof")|Assign(X," épar"):-pink(X).', 'retum(X):-assign(X, "city").']

parsed: 
select(X):-assign(X, "cloud").
retum(X):-assign(X, "cloud").

jaccard: 0.0


279
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "chair" and "butterfly". However, avoid any combination where predicate "chair" has label "laptop".

answer from file: 
combination(X,Y):-chair(X, _),butterfly(Y), not chair(X, laptop).

facts: 
chair(1..4, 1..4).butterfly(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "chair" and "butterfly". However, avoid any combination where predicate "chair" has label "laptop".
Answer: combination(X,Y):-chair(X, _),butterfly(Y), not chair(X, _).
combination(X,Y):-chair(X, _),moto(Y).
combination(X,Y):-chair(X, _),age(Y).
retum(X,Y):-combination(X,Y).
retum(X,Y):-age(X),combination(X,Y).
retum(X,Y):-age(X),moto(Y).
retum(X,Y):-age(X),author(Y).
retum(X,Y):-age(X),description(Y).
retum(X,Y):-age(X),city(Y).

unique_rules: 
['combination(X,Y):-chair(X, _),butterfly(Y), not chair(X, _).', 'combination(X,Y):-chair(X, _),moto(Y).', 'combination(X,Y):-chair(X, _),age(Y).', 'retum(X,Y):-combination(X,Y).', 'retum(X,Y):-age(X),combination(X,Y).', 'retum(X,Y):-age(X),moto(Y).', 'retum(X,Y):-age(X),author(Y).', 'retum(X,Y):-age(X),description(Y).', 'retum(X,Y):-age(X),city(Y).']

parsed: 
combination(X,Y):-chair(X, _),butterfly(Y), not chair(X, _).

jaccard: 0.0


280
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "strength" having fields "ID","stormID","owner", and the predicate "storm" having fields "ID","surname". Define a predicate "strength_storm" that associates to each "strength" the "surname" of "storm" only where "surname" is different than 92.

answer from file: 
strength_storm(X,Z):-strength(X,Y,_),storm(Y,Z), Z!=92.

facts: 
strength("ID","stormID","owner").storm("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "strength" having fields "ID","stormID","owner", and the predicate "storm" having fields "ID","surname". Define a predicate "strength_storm" that associates to each "strength" the "surname" of "storm" only where "surname" is different than 92.
Answer: strength_storm(X,Z):-strength(X,Y,_),storm(Y,Z), Z!=92.
 ángulo(X,Y,Z):-strength(X,Y,_),storm(Y,Z), Z==92.
 ángulo(X,Y,Z):-strength(X,Y,_),storm(Y,Z), Z==93.
 ángulo(X,Y,Z):-strength(X,Y,_),storm(Y,Z), Z==94.
 ángulo(X,Y,Z):-strength(X,Y,_),storm(Y,Z), Z==95.
 ángulo(X,Y,Z

unique_rules: 
['strength_storm(X,Z):-strength(X,Y,_),storm(Y,Z), Z!=92.', 'ángulo(X,Y,Z):-strength(X,Y,_),storm(Y,Z), Z==92.', 'ángulo(X,Y,Z):-strength(X,Y,_),storm(Y,Z), Z==93.', 'ángulo(X,Y,Z):-strength(X,Y,_),storm(Y,Z), Z==94.', 'ángulo(X,Y,Z):-strength(X,Y,_),storm(Y,Z), Z==95.']

parsed: 
strength_storm(X,Z):-strength(X,Y,_),storm(Y,Z), Z!=92.

jaccard: 1.0


281
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "cosenza" having fields "ID","laptopID","hair", and the predicate "laptop" having fields "ID","weight". Define a predicate "cosenza_laptop" that associates to each "cosenza", not associated with label "butterfly", the attribute "weight" of "laptop".

answer from file: 
cosenza_laptop(X,Z):-cosenza(X,Y,_),laptop(Y,Z),not cosenza(X,_,butterfly).

facts: 
cosenza("ID","laptopID","hair").laptop("ID","weight").

generated: 
Write an ASP program for the following problem. Consider predicate "cosenza" having fields "ID","laptopID","hair", and the predicate "laptop" having fields "ID","weight". Define a predicate "cosenza_laptop" that associates to each "cosenza", not associated with label "butterfly", the attribute "weight" of "laptop".
Answer: cosenza_laptop(X,Z):-cosenza(X,Y,_),laptop(Y,Z),not cosenza(X,_,height).
```
 espérate that "cosenza_laptop" associates to each "cosenza", not associated with label "height", the attribute "height" of " arrivant".
```
 ángulo(X,Y,Z):-cosenza(X,Y,_), arrivant(Y,Z),not cosenza(X,_,height).
```
 meras(X,Y):- ángulo(X,_,Y).
 ángulo(X,_,Z):-cosenza(X,_,_), ángulo(X,_,Z).
 ángulo(

unique_rules: 
['cosenza_laptop(X,Z):-cosenza(X,Y,_),laptop(Y,Z),not cosenza(X,_,height).', 'ángulo(X,Y,Z):-cosenza(X,Y,_), arrivant(Y,Z),not cosenza(X,_,height).', 'meras(X,Y):- ángulo(X,_,Y).', 'ángulo(X,_,Z):-cosenza(X,_,_), ángulo(X,_,Z).']

parsed: 
cosenza_laptop(X,Z):-cosenza(X,Y,_),laptop(Y,Z),not cosenza(X,_,height).

jaccard: 1.0


282
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "strength" as the transitive closure of predicate "mumbai". Then, assign exactly one label from the set cloud,chair,storm,wall,butterfly,flower,roof,laptop,desk to each element in "strength".

answer from file: 
strength(X,Y):-mumbai(X,Y).
strength(X,Y):-mumbai(X,Z),strength(Z,Y).
assign(X,"cloud")|assign(X,"chair")|assign(X,"storm")|assign(X,"wall")|assign(X,"butterfly")|assign(X,"flower")|assign(X,"roof")|assign(X,"laptop")|assign(X,"desk"):-strength(X,_).

facts: 
mumbai(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "strength" as the transitive closure of predicate "mumbai". Then, assign exactly one label from the set cloud,chair,storm,wall,butterfly,flower,roof,laptop,desk to each element in "strength".
Answer: strength(X,Y):-mumbai(X,Y).
strength(X,Y):-mumbai(X,Z),strength(Z,Y).
assign(X,"cloud")|assign(X,"chair")|assign(X,"storm")|assign(X,"wall")|assign(X," arrivant")|assign(X,"florence")|assign(X,"roof")|assign(X,"laptop")|assign(X,"desk"):-strength(X,_).
retum:assign(X,"city")|retum:assign(X,"age").
retum:retum(X,Y),assign(Y,"city").
retum:retum(X,Y),assign(

unique_rules: 
['strength(X,Y):-mumbai(X,Y).', 'strength(X,Y):-mumbai(X,Z),strength(Z,Y).', 'assign(X,"cloud")|assign(X,"chair")|assign(X,"storm")|assign(X,"wall")|assign(X," arrivant")|assign(X,"florence")|assign(X,"roof")|assign(X,"laptop")|assign(X,"desk"):-strength(X,_).']

parsed: 
strength(X,Y):-mumbai(X,Y).
strength(X,Y):-mumbai(X,Z),strength(Z,Y).
assign(X,"cloud")|assign(X,"chair")|assign(X,"storm")|assign(X,"wall")|assign(X," arrivant")|assign(X,"florence")|assign(X,"roof")|assign(X,"laptop")|assign(X,"desk"):-strength(X,_).

jaccard: 1.0


283
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate flower. The labels are flower,butterfly. Consider only the predicate flower not associated with label "cloud".

answer from file: 
assign(X,"flower")|assign(X,"butterfly"):-flower(X, _), not flower(X, cloud).

facts: 
flower(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate flower. The labels are flower,butterfly. Consider only the predicate flower not associated with label "cloud".
Answer: assign(X,"flower")|assign(X," arrivant")|assign(X,"city")|assign(X,"height")|assign(X,"author")|assign(X,"description")|assign(X,"age")|assign(X,"name")|assign(X,"price")|assign(X,"shape")|assign(X,"city"),
flower(X, _), not flower(X, cloud).
```
 köp:assign(X,"name")| köp:assign(X,"price")| köp:assign(X,"shape")| köp:assign(X,"city"),
flower(X, _), not flower(X, cloud).
```
The predicate

unique_rules: 
[]

parsed: 


jaccard: 0.0


284
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate wall and labels quality, strength having label strength different than 19. The labels are flower,wall,chair.

answer from file: 
assign(X,"flower")|assign(X,"wall")|assign(X,"chair"):-wall(X, Y), Y!=19 .

facts: 
wall(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate wall and labels quality, strength having label strength different than 19. The labels are flower,wall,chair.
Answer: assign(X,"flower")|assign(X,"wall")|assign(X,"chair"):-wall(X, Y), Y!=19 .
```
assign(X,"florence")|assign(X,"wall")|assign(X,"chair"):-wall(X, Y), Y==19 .
```

unique_rules: 
['assign(X,"flower")|assign(X,"wall")|assign(X,"chair"):-wall(X, Y), Y!=19 .', 'assign(X,"florence")|assign(X,"wall")|assign(X,"chair"):-wall(X, Y), Y==19 .']

parsed: 
assign(X,"flower")|assign(X,"wall")|assign(X,"chair"):-wall(X, Y), Y!=19 .

jaccard: 1.0


285
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lightblue. The labels are chair,roof,laptop,wall.  Then, filter and return only the elements assigned to label wall.".

answer from file: 
assign(X,"chair")|assign(X,"roof")|assign(X,"laptop")|assign(X,"wall"):-lightblue(X).
select(X):-assign(X, "wall").

facts: 
lightblue(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lightblue. The labels are chair,roof,laptop,wall.  Then, filter and return only the elements assigned to label wall.".
Answer: assign(X,"chair")|assign(X,"roof")|assign(X,"laptop")|assign(X,"wall"):-lightblue(X).
select(X):-assign(X, "wall").
```
Assign(X," felicità")|Assign(X,"city")|Assign(X,"age")|Assign(X,"name")|Assign(X,"price")|Assign(X,"description")|Assign(X,"author")|Assign(X,"height")|Assign(X,"shape")|Assign(X,"city")|Assign(X,"description")|Assign(X,"price")|Assign(X,"author")|Assign(X,"height")|Assign

unique_rules: 
['assign(X,"chair")|assign(X,"roof")|assign(X,"laptop")|assign(X,"wall"):-lightblue(X).', 'select(X):-assign(X, "wall").']

parsed: 
assign(X,"chair")|assign(X,"roof")|assign(X,"laptop")|assign(X,"wall"):-lightblue(X).
select(X):-assign(X, "wall").

jaccard: 1.0


286
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "weight" and "flower". However, avoid any combination where predicate "weight" has label "roof".

answer from file: 
combination(X,Y):-weight(X, _),flower(Y), not weight(X, roof).

facts: 
weight(1..4, 1..4).flower(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "weight" and "flower". However, avoid any combination where predicate "weight" has label "roof".
Answer: combination(X,Y):-weight(X, _),flower(Y), not weight(X, roof).
combination(X,Y):-weight(X, _),flower(Y).
combination(X,Y):-weight(X, _),flower(Y), label("object").
assign(X, Y)
retum(X, Y).
retum(X, Y), label("object").
retum(X, Y), label("price").
retum(X, Y), label("age").
retum(X, Y), label("description").
retum(X, Y), label("height").
retum(X, Y), label("author").
retum(X, Y

unique_rules: 
['combination(X,Y):-weight(X, _),flower(Y), not weight(X, roof).', 'combination(X,Y):-weight(X, _),flower(Y).', 'combination(X,Y):-weight(X, _),flower(Y), label("object").']

parsed: 
combination(X,Y):-weight(X, _),flower(Y), not weight(X, roof).

jaccard: 1.0


287
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "quality" having fields "ID","strength","lakeID", and the predicate "lake" having fields "ID","owner". Define a predicate "quality_lake" that associates to each "quality" the "owner" of "lake" only where "owner" is different than 68.

answer from file: 
quality_lake(X,Z):-quality(X,_,Y),lake(Y,Z), Z!=68.

facts: 
quality("ID","strength","lakeID").lake("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "quality" having fields "ID","strength","lakeID", and the predicate "lake" having fields "ID","owner". Define a predicate "quality_lake" that associates to each "quality" the "owner" of "lake" only where "owner" is different than 68.
Answer: quality_lake(X,Z):-quality(X,_,Y),lake(Y,Z), Z!=68.
 quíname(X,Y):-quality(X,_,Y),lake(Y,Z), Z==68.
 quíname(X,Y):-quality(X,_,Y),lake(Y,Z), Z!=68.
 quíname(X,Y):-quality(X,_,Y),lake(Y,Z), Z==68.
 quíname(X,Y):-quality(X,_,Y),lake(Y,Z), Z==68.
 quíname(X,Y):-quality(X,_,Y),lake(

unique_rules: 
['quality_lake(X,Z):-quality(X,_,Y),lake(Y,Z), Z!=68.', 'quíname(X,Y):-quality(X,_,Y),lake(Y,Z), Z==68.', 'quíname(X,Y):-quality(X,_,Y),lake(Y,Z), Z!=68.', 'quíname(X,Y):-quality(X,_,Y),lake(.']

parsed: 
quality_lake(X,Z):-quality(X,_,Y),lake(Y,Z), Z!=68.

jaccard: 1.0


288
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "lake" having fields "ID","pinkID","lake", and the predicate "pink" having fields "ID","strength". Define a predicate "lake_pink" that associates to each "lake", not associated with label "desk", the attribute "strength" of "pink".

answer from file: 
lake_pink(X,Z):-lake(X,Y,_),pink(Y,Z),not lake(X,_,desk).

facts: 
lake("ID","pinkID","lake").pink("ID","strength").

generated: 
Write an ASP program for the following problem. Consider predicate "lake" having fields "ID","pinkID","lake", and the predicate "pink" having fields "ID","strength". Define a predicate "lake_pink" that associates to each "lake", not associated with label "desk", the attribute "strength" of "pink".
Answer: lake_pink(X,Z):-lake(X,Y,_),pink(Y,Z),not lake(X,_,desk).
lake_pink(X,Y,_):-lake(X,_,_),pink(Y,Z),label(X,table).
assign(X,Z):-lake_pink(X,_,_).
retum(X,Z).
retum(X,_,table).
 quí Medellín, Bogotá, Puebla, Cartagena, Málaga, Madrid, Girona, Verona, Quito, London, Paris, City, Flecha, Nuova York, Shanghai, Bogota, Puebla, Madrid, Cartagena, Girona, Verona, London, Paris, City, Flecha, Nuova York, Shanghai

unique_rules: 
['lake_pink(X,Z):-lake(X,Y,_),pink(Y,Z),not lake(X,_,desk).', 'lake_pink(X,Y,_):-lake(X,_,_),pink(Y,Z),label(X,table).', 'assign(X,Z):-lake_pink(X,_,_).']

parsed: 
lake_pink(X,Z):-lake(X,Y,_),pink(Y,Z),not lake(X,_,desk).

jaccard: 1.0


289
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "owner" as the transitive closure of predicate "storm". Then, assign exactly one label from the set cloud,storm,butterfly,chair,desk,laptop,roof,wall to each element in "owner".

answer from file: 
owner(X,Y):-storm(X,Y).
owner(X,Y):-storm(X,Z),owner(Z,Y).
assign(X,"cloud")|assign(X,"storm")|assign(X,"butterfly")|assign(X,"chair")|assign(X,"desk")|assign(X,"laptop")|assign(X,"roof")|assign(X,"wall"):-owner(X,_).

facts: 
storm(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "owner" as the transitive closure of predicate "storm". Then, assign exactly one label from the set cloud,storm,butterfly,chair,desk,laptop,roof,wall to each element in "owner".
Answer: owner(X,Y):-storm(X,Y).
owner(X,Y):-storm(X,Z),owner(Z,Y).
assign(X,"cloud")|assign(X,"storm")|assign(X," arrivant")|assign(X," felicità")|assign(X,"description")|assign(X,"height")|assign(X,"price")|assign(X,"name")|assign(X,"shape")|assign(X,"city"):-owner(X,_).
retum:
assign(X,"city")|assign(X,"description")|assign(X,"height")|assign(X,"price")|assign(X,"name")|assign

unique_rules: 
['owner(X,Y):-storm(X,Y).', 'owner(X,Y):-storm(X,Z),owner(Z,Y).', 'assign(X,"cloud")|assign(X,"storm")|assign(X," arrivant")|assign(X," felicità")|assign(X,"description")|assign(X,"height")|assign(X,"price")|assign(X,"name")|assign(X,"shape")|assign(X,"city"):-owner(X,_).']

parsed: 
owner(X,Y):-storm(X,Y).
owner(X,Y):-storm(X,Z),owner(Z,Y).
assign(X,"cloud")|assign(X,"storm")|assign(X," arrivant")|assign(X," felicità")|assign(X,"description")|assign(X,"height")|assign(X,"price")|assign(X,"name")|assign(X,"shape")|assign(X,"city"):-owner(X,_).

jaccard: 0.0


290
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are roof,chair,flower,desk,cloud,wall,laptop. Consider only the predicate lake not associated with label "wall".

answer from file: 
assign(X,"roof")|assign(X,"chair")|assign(X,"flower")|assign(X,"desk")|assign(X,"cloud")|assign(X,"wall")|assign(X,"laptop"):-lake(X, _), not lake(X, wall).

facts: 
lake(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are roof,chair,flower,desk,cloud,wall,laptop. Consider only the predicate lake not associated with label "wall".
Answer: assign(X," felicità")|assign(X,"price")|assign(X,"author")|assign(X,"city")|assign(X,"description")|assign(X,"name")|assign(X,"age")|assign(X,"shape")|assign(X,"height")|retum(X, Y), Y!=wall .
retum(X, Y), Y!=wall.
 köp(X, Y), Y!=wall.
 köp(X, Y), Y==wall.
 köp(X, Y), Y!=wall, Z==height.
 köp(X, Y), Y!=wall, Z!=height, Z==age.
 köp(X, Y),

unique_rules: 
[]

parsed: 


jaccard: 0.0


291
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate flower and labels lake, weight having label weight different than 85. The labels are desk,roof,wall,storm,flower,butterfly,cloud,chair.

answer from file: 
assign(X,"desk")|assign(X,"roof")|assign(X,"wall")|assign(X,"storm")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"cloud")|assign(X,"chair"):-flower(X, Y), Y!=85 .

facts: 
flower(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate flower and labels lake, weight having label weight different than 85. The labels are desk,roof,wall,storm,flower,butterfly,cloud,chair.
Answer: assign(X,"desk")|assign(X,"roof")|assign(X,"wall")|assign(X,"storm")|assign(X,"flower")|assign(X," arrivant")|assign(X,"height")|assign(X,"chair"):-flower(X, Y), Y!=85 .
```
Assign(X,"height")|Assign(X,"chair"):-florence(X, Y), Y!=85 .
```
The predicate florence has label "height", and the predicate price has label "description".
So, the predicate florence has label "height" only where "height" is different than 85.
The predicate price has label

unique_rules: 
['assign(X,"desk")|assign(X,"roof")|assign(X,"wall")|assign(X,"storm")|assign(X,"flower")|assign(X," arrivant")|assign(X,"height")|assign(X,"chair"):-flower(X, Y), Y!=85 .', 'Assign(X,"height")|Assign(X,"chair"):-florence(X, Y), Y!=85 .']

parsed: 
assign(X,"desk")|assign(X,"roof")|assign(X,"wall")|assign(X,"storm")|assign(X,"flower")|assign(X," arrivant")|assign(X,"height")|assign(X,"chair"):-flower(X, Y), Y!=85 .

jaccard: 0.0


292
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate white. The labels are cloud,wall.  Then, filter and return only the elements assigned to label cloud.".

answer from file: 
assign(X,"cloud")|assign(X,"wall"):-white(X).
select(X):-assign(X, "cloud").

facts: 
white(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate white. The labels are cloud,wall.  Then, filter and return only the elements assigned to label cloud.".
Answer: assign(X,"cloud")|assign(X,"wall"):-white(X).
select(X):-assign(X, "cloud").
retum(X).
```
Assign(X,"cloud")|Assign(X,"wall"):-white(X).
select(X):-assign(X, "cloud").
retum(X).
filter(X, "cloud").
```

unique_rules: 
['assign(X,"cloud")|assign(X,"wall"):-white(X).', 'select(X):-assign(X, "cloud").', 'Assign(X,"cloud")|Assign(X,"wall"):-white(X).']

parsed: 
assign(X,"cloud")|assign(X,"wall"):-white(X).
select(X):-assign(X, "cloud").

jaccard: 1.0


293
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "chicago" and "wall". However, avoid any combination where predicate "chicago" has label "desk".

answer from file: 
combination(X,Y):-chicago(X, _),wall(Y), not chicago(X, desk).

facts: 
chicago(1..4, 1..4).wall(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "chicago" and "wall". However, avoid any combination where predicate "chicago" has label "desk".
Answer: combination(X,Y):-chicago(X, _),wall(Y), not chicago(X, desk).
combination(X,Y):-chicago(X, _),wall(Y).
combination(X,Y):-chicago(X, _),wall(Y), label(X, "age").
assign(X, Y)
retum(X, Y).
retum(X, Y), label(X, "age").
retum(X, Y), label(X, "name").
retum(X, Y), label(X, "price").
retum(X, Y), label(X, "description").
retum(X, Y), label(X, "city

unique_rules: 
['combination(X,Y):-chicago(X, _),wall(Y), not chicago(X, desk).', 'combination(X,Y):-chicago(X, _),wall(Y).', 'combination(X,Y):-chicago(X, _),wall(Y), label(X, "age").']

parsed: 
combination(X,Y):-chicago(X, _),wall(Y), not chicago(X, desk).

jaccard: 1.0


294
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "delhi" having fields "ID","barcelonaID","weight", and the predicate "barcelona" having fields "ID","lake". Define a predicate "delhi_barcelona" that associates to each "delhi" the "lake" of "barcelona" only where "lake" is different than 92.

answer from file: 
delhi_barcelona(X,Z):-delhi(X,Y,_),barcelona(Y,Z), Z!=92.

facts: 
delhi("ID","barcelonaID","weight").barcelona("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "delhi" having fields "ID","barcelonaID","weight", and the predicate "barcelona" having fields "ID","lake". Define a predicate "delhi_barcelona" that associates to each "delhi" the "lake" of "barcelona" only where "lake" is different than 92.
Answer: delhi_barcelona(X,Z):-delhi(X,Y,_),barcelona(Y,Z), Z!=92.
delhi_barcelona(X,Y,_),_, Z!=92.
retum(X,Y,Z),label("moto").
retum(X,Y,Z),label("price").
retum(X,Y,Z),label("description").
retum(X,Y,Z),label("city").
retum(X,Y,Z),label("age").
retum(X,Y,Z),label("name").
retum(X,Y,Z),label("shape").
retum(X,Y,Z),label("height

unique_rules: 
['delhi_barcelona(X,Z):-delhi(X,Y,_),barcelona(Y,Z), Z!=92.']

parsed: 
delhi_barcelona(X,Z):-delhi(X,Y,_),barcelona(Y,Z), Z!=92.

jaccard: 1.0


295
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "flower" having fields "ID","darkmagentaID","owner", and the predicate "darkmagenta" having fields "ID","quality". Define a predicate "flower_darkmagenta" that associates to each "flower", not associated with label "laptop", the attribute "quality" of "darkmagenta".

answer from file: 
flower_darkmagenta(X,Z):-flower(X,Y,_),darkmagenta(Y,Z),not flower(X,_,laptop).

facts: 
flower("ID","darkmagentaID","owner").darkmagenta("ID","quality").

generated: 
Write an ASP program for the following problem. Consider predicate "flower" having fields "ID","darkmagentaID","owner", and the predicate "darkmagenta" having fields "ID","quality". Define a predicate "flower_darkmagenta" that associates to each "flower", not associated with label "laptop", the attribute "quality" of "darkmagenta".
Result: flower_darkmagenta(X,Z):-flower(X,Y,_),darkmagenta(Y,Z),not flower(X,_,laptop).
flower_darkmagenta(X,Z):-flower(X,Y,_),darkmagenta(Y,Z),label "bike".
 áng=flower_darkmagenta(X,Z).
 áng.name="bike".
 áng.price=Z.price.
 áng.description=Z.description.
 áng.city=Z.city.
 áng.age=Z.age.
 áng.author=Z.author.
 áng.height=Z.height.
 áng.price_name=Z.price.
 áng.price

unique_rules: 
['Result: flower_darkmagenta(X,Z):-flower(X,Y,_),darkmagenta(Y,Z),not flower(X,_,laptop).', 'flower_darkmagenta(X,Z):-flower(X,Y,_),darkmagenta(Y,Z),label "bike".']

parsed: 
Result: flower_darkmagenta(X,Z):-flower(X,Y,_),darkmagenta(Y,Z),not flower(X,_,laptop).

jaccard: 0.0


296
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "wall" as the transitive closure of predicate "black". Then, assign exactly one label from the set cloud,laptop,chair to each element in "wall".

answer from file: 
wall(X,Y):-black(X,Y).
wall(X,Y):-black(X,Z),wall(Z,Y).
assign(X,"cloud")|assign(X,"laptop")|assign(X,"chair"):-wall(X,_).

facts: 
black(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "wall" as the transitive closure of predicate "black". Then, assign exactly one label from the set cloud,laptop,chair to each element in "wall".
Answer: wall(X,Y):-black(X,Y).
wall(X,Y):-black(X,Z),wall(Z,Y).
assign(X,"cloud")|assign(X,"laptop")|assign(X,"chair"):-wall(X,_).
retum(X,Y):-wall(X,Y).
retum(X,Y):-wall(X,Z),retum(Z,Y).
retum(X,Y):-wall(X,Z),retum(Z,Y).
retum(X,Y):-wall(X,Z),retum(Z,Y),retum(Y,Y).
retum(X,Y):-wall(X,Z),

unique_rules: 
['wall(X,Y):-black(X,Y).', 'wall(X,Y):-black(X,Z),wall(Z,Y).', 'assign(X,"cloud")|assign(X,"laptop")|assign(X,"chair"):-wall(X,_).', 'retum(X,Y):-wall(X,Y).', 'retum(X,Y):-wall(X,Z),retum(Z,Y).', 'retum(X,Y):-wall(X,Z),retum(Z,Y),retum(Y,Y).', 'retum(X,Y):-wall(X,Z),.']

parsed: 
wall(X,Y):-black(X,Y).
wall(X,Y):-black(X,Z),wall(Z,Y).
assign(X,"cloud")|assign(X,"laptop")|assign(X,"chair"):-wall(X,_).

jaccard: 1.0


297
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate strength. The labels are flower,desk,laptop,storm,wall,chair,butterfly. Consider only the predicate strength not associated with label "roof".

answer from file: 
assign(X,"flower")|assign(X,"desk")|assign(X,"laptop")|assign(X,"storm")|assign(X,"wall")|assign(X,"chair")|assign(X,"butterfly"):-strength(X, _), not strength(X, roof).

facts: 
strength(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate strength. The labels are flower,desk,laptop,storm,wall,chair,butterfly. Consider only the predicate strength not associated with label "roof".
Answer: assign(X,"flower")|assign(X,"desk")|assign(X,"laptop")|assign(X,"storm")|assign(X,"wall")|assign(X,"chair")|assign(X," arrivant")|retum(X, _), not strength(X, _).
retum(X, _), not strength(X, _).
```
Assign(X,"florence")|Assign(X," felicità")|Assign(X,"city")|Assign(X,"author")|Assign(X,"age")|Assign(X,"description")|Assign(X,"height")|Assign(X,"price")|retum(X, _), not strength(X,

unique_rules: 
[]

parsed: 


jaccard: 0.0


298
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate moscow and labels surname, owner having label owner different than 79. The labels are desk,butterfly,storm,roof,laptop,chair,wall,cloud.

answer from file: 
assign(X,"desk")|assign(X,"butterfly")|assign(X,"storm")|assign(X,"roof")|assign(X,"laptop")|assign(X,"chair")|assign(X,"wall")|assign(X,"cloud"):-moscow(X, Y), Y!=79 .

facts: 
moscow(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate moscow and labels surname, owner having label owner different than 79. The labels are desk,butterfly,storm,roof,laptop,chair,wall,cloud.
Answer: assign(X,"desk")|assign(X," arrivant")|assign(X," peines")|assign(X,"height")|assign(X,"price")|assign(X,"name")|assign(X,"city")|assign(X,"shape")|assign(X,"author"):-moscow(X, Y), Y!=79 .
```
Assign(X,"name")|Assign(X,"city")|Assign(X,"shape")|Assign(X,"author"):-florence(X).
```
The predicate florence has label "author", but not "shape".
So, the predicate florence is not associated with label "shape".
Then, assign

unique_rules: 
['assign(X,"desk")|assign(X," arrivant")|assign(X," peines")|assign(X,"height")|assign(X,"price")|assign(X,"name")|assign(X,"city")|assign(X,"shape")|assign(X,"author"):-moscow(X, Y), Y!=79 .', 'Assign(X,"name")|Assign(X,"city")|Assign(X,"shape")|Assign(X,"author"):-florence(X).']

parsed: 
assign(X,"desk")|assign(X," arrivant")|assign(X," peines")|assign(X,"height")|assign(X,"price")|assign(X,"name")|assign(X,"city")|assign(X,"shape")|assign(X,"author"):-moscow(X, Y), Y!=79 .

jaccard: 0.0


299
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate hair. The labels are cloud,wall,desk,storm,roof,butterfly,chair.  Then, filter and return only the elements assigned to label butterfly.".

answer from file: 
assign(X,"cloud")|assign(X,"wall")|assign(X,"desk")|assign(X,"storm")|assign(X,"roof")|assign(X,"butterfly")|assign(X,"chair"):-hair(X).
select(X):-assign(X, "butterfly").

facts: 
hair(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate hair. The labels are cloud,wall,desk,storm,roof,butterfly,chair.  Then, filter and return only the elements assigned to label butterfly.".
Answer: assign(X,"cloud")|assign(X,"wall")|assign(X,"desk")|assign(X,"storm")|assign(X,"roof")|assign(X," épar")|assign(X,"chair"):-hair(X).
select(X):-assign(X, " épar").
retum(X):-assign(X, " felicità").
retum(X):-assign(X, "city").
retum(X):-assign(X, "price").
retum(X):-assign(X, "age").
retum(X):-assign(X, "name").
retum(X):-assign(X, "description").
retum(X):-assign(X, "

unique_rules: 
['assign(X,"cloud")|assign(X,"wall")|assign(X,"desk")|assign(X,"storm")|assign(X,"roof")|assign(X," épar")|assign(X,"chair"):-hair(X).', 'select(X):-assign(X, " épar").', 'retum(X):-assign(X, " felicità").', 'retum(X):-assign(X, "city").', 'retum(X):-assign(X, "price").', 'retum(X):-assign(X, "age").', 'retum(X):-assign(X, "name").', 'retum(X):-assign(X, "description").', 'retum(X):-assign(X, ".']

parsed: 
assign(X,"cloud")|assign(X,"wall")|assign(X,"desk")|assign(X,"storm")|assign(X,"roof")|assign(X," épar")|assign(X,"chair"):-hair(X).
select(X):-assign(X, " épar").

jaccard: 1.0


300
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "roof" and "lightblue". However, avoid any combination where predicate "roof" has label "flower".

answer from file: 
combination(X,Y):-roof(X, _),lightblue(Y), not roof(X, flower).

facts: 
roof(1..4, 1..4).lightblue(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "roof" and "lightblue". However, avoid any combination where predicate "roof" has label "flower".
Answer: combination(X,Y):-roof(X, _),lightblue(Y), not roof(X, flower).
combination(X,Y):-roof(X, _),lightblue(Y).
combination(X,Y):-roof(X, _),lightblue(Y), label("color").
assign(X, Y)
retum(X, Y).
retum(X, Y), label("color").
retum(X, Y), label("age").
retum(X, Y), label("description").
retum(X, Y), label("height").
retum(X, Y), label("price").
retum(X, Y), label("author").
retum(

unique_rules: 
['combination(X,Y):-roof(X, _),lightblue(Y), not roof(X, flower).', 'combination(X,Y):-roof(X, _),lightblue(Y).', 'combination(X,Y):-roof(X, _),lightblue(Y), label("color").']

parsed: 
combination(X,Y):-roof(X, _),lightblue(Y), not roof(X, flower).

jaccard: 1.0


301
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "chair" having fields "ID","weight","chicagoID", and the predicate "chicago" having fields "ID","strength". Define a predicate "chair_chicago" that associates to each "chair" the "strength" of "chicago" only where "strength" is different than 69.

answer from file: 
chair_chicago(X,Z):-chair(X,_,Y),chicago(Y,Z), Z!=69.

facts: 
chair("ID","weight","chicagoID").chicago("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "chair" having fields "ID","weight","chicagoID", and the predicate "chicago" having fields "ID","strength". Define a predicate "chair_chicago" that associates to each "chair" the "strength" of "chicago" only where "strength" is different than 69.
Answer: chair_chicago(X,Z):-chair(X,_,Y),chicago(Y,Z), Z!=69.
chair_chicago(X,_,Y):-chair(X,Y,_),chicago(Y,Z), Z==69.
 quíname(X,Y):-chair(X,_,Y).
 quíname(X,_,Z):-chair(X,_,Z),city(X,Y), Z!=69.
 quíname(X,_,Z):-chair(X,_,Z),city(X,Y), Z==69.
 quíname(X,_,Z):-city(X,Y), Z!=69.
 quíname(

unique_rules: 
['chair_chicago(X,Z):-chair(X,_,Y),chicago(Y,Z), Z!=69.', 'chair_chicago(X,_,Y):-chair(X,Y,_),chicago(Y,Z), Z==69.', 'quíname(X,Y):-chair(X,_,Y).', 'quíname(X,_,Z):-chair(X,_,Z),city(X,Y), Z!=69.', 'quíname(X,_,Z):-chair(X,_,Z),city(X,Y), Z==69.', 'quíname(X,_,Z):-city(X,Y), Z!=69.']

parsed: 
chair_chicago(X,Z):-chair(X,_,Y),chicago(Y,Z), Z!=69.

jaccard: 1.0


302
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "roof" having fields "ID","hair","laptopID", and the predicate "laptop" having fields "ID","strength". Define a predicate "roof_laptop" that associates to each "roof", not associated with label "flower", the attribute "strength" of "laptop".

answer from file: 
roof_laptop(X,Z):-roof(X,_,Y),laptop(Y,Z),not roof(X,flower,_).

facts: 
roof("ID","hair","laptopID").laptop("ID","strength").

generated: 
Write an ASP program for the following problem. Consider predicate "roof" having fields "ID","hair","laptopID", and the predicate "laptop" having fields "ID","strength". Define a predicate "roof_laptop" that associates to each "roof", not associated with label "flower", the attribute "strength" of "laptop".
Answer: roof_laptop(X,Z):-roof(X,_,Y),laptop(Y,Z),not roof(X,flower,_).
 ángulo(X,Y):-roof(X,_,Y),moto(Y,Z).
 ángulo(X,Y):-roof(X,_,Y),moto(Y,Z),creator(X,_,Y).
 ángulo(X,Y):-roof(X,_,Y),moto(Y,Z),description(X,_,Y).
 ángulo(X,Y):-roof(X,_,Y),moto(Y,Z),age(X,_,Y).
 ángulo(X,Y):-roof(X,_,

unique_rules: 
['roof_laptop(X,Z):-roof(X,_,Y),laptop(Y,Z),not roof(X,flower,_).', 'ángulo(X,Y):-roof(X,_,Y),moto(Y,Z).', 'ángulo(X,Y):-roof(X,_,Y),moto(Y,Z),creator(X,_,Y).', 'ángulo(X,Y):-roof(X,_,Y),moto(Y,Z),description(X,_,Y).', 'ángulo(X,Y):-roof(X,_,Y),moto(Y,Z),age(X,_,Y).', 'ángulo(X,Y):-roof(X,_,.']

parsed: 
roof_laptop(X,Z):-roof(X,_,Y),laptop(Y,Z),not roof(X,flower,_).

jaccard: 1.0


303
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "hair" as the transitive closure of predicate "chicago". Then, assign exactly one label from the set storm,roof to each element in "hair".

answer from file: 
hair(X,Y):-chicago(X,Y).
hair(X,Y):-chicago(X,Z),hair(Z,Y).
assign(X,"storm")|assign(X,"roof"):-hair(X,_).

facts: 
chicago(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "hair" as the transitive closure of predicate "chicago". Then, assign exactly one label from the set storm,roof to each element in "hair".
Answer: hair(X,Y):-chicago(X,Y).
hair(X,Y):-chicago(X,Z),hair(Z,Y).
assign(X,"storm")|assign(X,"roof"):-hair(X,_).
retum.
 ángulo(X,Y):-hair(X,Y).
 ángulo(X,Y):-hair(X,Z), ángulo(Z,Y).
 ángulo(X,Y):-food(X,Y).
 ángulo(X,Y):-food(X,Z), ángulo(Z,Y).
 ángulo(X,Y):-food(X,Z),moto(Z,Y).
 ángulo

unique_rules: 
['hair(X,Y):-chicago(X,Y).', 'hair(X,Y):-chicago(X,Z),hair(Z,Y).', 'assign(X,"storm")|assign(X,"roof"):-hair(X,_).', 'ángulo(X,Y):-hair(X,Y).', 'ángulo(X,Y):-hair(X,Z), ángulo(Z,Y).', 'ángulo(X,Y):-food(X,Y).', 'ángulo(X,Y):-food(X,Z), ángulo(Z,Y).', 'ángulo(X,Y):-food(X,Z),moto(Z,Y).']

parsed: 
hair(X,Y):-chicago(X,Y).
hair(X,Y):-chicago(X,Z),hair(Z,Y).
assign(X,"storm")|assign(X,"roof"):-hair(X,_).

jaccard: 1.0


304
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate pink. The labels are roof,chair,flower,desk,laptop. Consider only the predicate pink not associated with label "storm".

answer from file: 
assign(X,"roof")|assign(X,"chair")|assign(X,"flower")|assign(X,"desk")|assign(X,"laptop"):-pink(X, _), not pink(X, storm).

facts: 
pink(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate pink. The labels are roof,chair,flower,desk,laptop. Consider only the predicate pink not associated with label "storm".
Answer: assign(X," felicità")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")| espressione(X, _), _).
retum(X, Y), Y!=storm .
```
 köp(X, Y), Y!=storm.
assign(X, " felicità")|assign(X, "height")|assign(X, "price")|assign(X, "age")|assign(X, "city")|assign(X, "description")| espressione(X, _), _!=storm.
retum(X, Y), Y!=storm.
assign(

unique_rules: 
[]

parsed: 


jaccard: 0.0


305
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate wall and labels strength, weight having label weight different than 45. The labels are chair,cloud,storm,flower,butterfly,roof.

answer from file: 
assign(X,"chair")|assign(X,"cloud")|assign(X,"storm")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"roof"):-wall(X, Y), Y!=45 .

facts: 
wall(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate wall and labels strength, weight having label weight different than 45. The labels are chair,cloud,storm,flower,butterfly,roof.
Answer: assign(X,"chair")|assign(X,"cloud")|assign(X,"storm")|assign(X,"flower")|assign(X," arrivant")|assign(X,"roof"):-wall(X, Y), Y!=45 .
```
Assign(X,"chair")|Assign(X,"cloud")|Assign(X,"storm")|Assign(X,"flower")|Assign(X," arrivant")|Assign(X,"roof"):-wall(X, Y), Y!=45 .
```
The predicate "wall" has label "height", and the labels are "price","creator","city","description","age","shape","name","author","height".
So

unique_rules: 
['assign(X,"chair")|assign(X,"cloud")|assign(X,"storm")|assign(X,"flower")|assign(X," arrivant")|assign(X,"roof"):-wall(X, Y), Y!=45 .', 'Assign(X,"chair")|Assign(X,"cloud")|Assign(X,"storm")|Assign(X,"flower")|Assign(X," arrivant")|Assign(X,"roof"):-wall(X, Y), Y!=45 .']

parsed: 
assign(X,"chair")|assign(X,"cloud")|assign(X,"storm")|assign(X,"flower")|assign(X," arrivant")|assign(X,"roof"):-wall(X, Y), Y!=45 .

jaccard: 1.0


306
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate moscow. The labels are storm,butterfly.  Then, filter and return only the elements assigned to label butterfly.".

answer from file: 
assign(X,"storm")|assign(X,"butterfly"):-moscow(X).
select(X):-assign(X, "butterfly").

facts: 
moscow(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate moscow. The labels are storm,butterfly.  Then, filter and return only the elements assigned to label butterfly.".
Answer: assign(X," cœurs")|assign(X,"city")|assign(X,"price")|assign(X,"author")|assign(X,"description")|assign(X,"age")|retum(X, "description").
select(X):-assign(X, "description").
retum(X, "description").
assign(X,"description")
retum(X, "description").
 espressione(X, "description").
retum(X, "description").
 quíntu(X, "description").
retum(X, "description").
select(X).
retum(X, "description").
 espressione(X, "description").
retum(X, "description").


unique_rules: 
['select(X):-assign(X, "description").']

parsed: 
select(X):-assign(X, "description").

jaccard: 0.0


307
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "black" and "chair". However, avoid any combination where predicate "black" has label "butterfly".

answer from file: 
combination(X,Y):-black(X, _),chair(Y), not black(X, butterfly).

facts: 
black(1..4, 1..4).chair(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "black" and "chair". However, avoid any combination where predicate "black" has label "butterfly".
Answer: combination(X,Y):-black(X),chair(Y), not black(X, "description").
combination(X,Y):-black(X),chair(Y), label(X, "description").
assign(X, Y)
combination(X, Y).
retum.
assign(X, Y)
combination(X, Y).
retum.
assign(X, Y)
combination(X, Y).
retum.
assign(X, Y)
combination(X, Y).
retum.
assign(X, Y)
combination(X, Y).
retum.
assign(X, Y)
combination(X, Y).
retum.


unique_rules: 
['combination(X,Y):-black(X),chair(Y), not black(X, "description").', 'combination(X,Y):-black(X),chair(Y), label(X, "description").']

parsed: 
combination(X,Y):-black(X),chair(Y), not black(X, "description").

jaccard: 0.0


308
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "quality" having fields "ID","strength","lakeID", and the predicate "lake" having fields "ID","owner". Define a predicate "quality_lake" that associates to each "quality" the "owner" of "lake" only where "owner" is different than 68.

answer from file: 
quality_lake(X,Z):-quality(X,_,Y),lake(Y,Z), Z!=68.

facts: 
quality("ID","strength","lakeID").lake("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "quality" having fields "ID","strength","lakeID", and the predicate "lake" having fields "ID","owner". Define a predicate "quality_lake" that associates to each "quality" the "owner" of "lake" only where "owner" is different than 68.
Answer: quality_lake(X,Z):-quality(X,_,Y),lake(Y,Z), Z!=68.
 quíname(X,Y):-quality(X,_,Y),lake(Y,Z), Z==68.
 quíname(X,Y):-quality(X,_,Y),lake(Y,Z), Z!=72.
 quíname(X,Y):-quality(X,_,Y),lake(Y,Z), Z==72.
 quíname(X,Y):-quality(X,_,Y),lake(Y,Z), Z==80.
 quíname(X,Y):-quality(X,_,Y),lake(

unique_rules: 
['quality_lake(X,Z):-quality(X,_,Y),lake(Y,Z), Z!=68.', 'quíname(X,Y):-quality(X,_,Y),lake(Y,Z), Z==68.', 'quíname(X,Y):-quality(X,_,Y),lake(Y,Z), Z!=72.', 'quíname(X,Y):-quality(X,_,Y),lake(Y,Z), Z==72.', 'quíname(X,Y):-quality(X,_,Y),lake(Y,Z), Z==80.', 'quíname(X,Y):-quality(X,_,Y),lake(.']

parsed: 
quality_lake(X,Z):-quality(X,_,Y),lake(Y,Z), Z!=68.

jaccard: 1.0


309
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "lake" having fields "ID","pinkID","lake", and the predicate "pink" having fields "ID","strength". Define a predicate "lake_pink" that associates to each "lake", not associated with label "desk", the attribute "strength" of "pink".

answer from file: 
lake_pink(X,Z):-lake(X,Y,_),pink(Y,Z),not lake(X,_,desk).

facts: 
lake("ID","pinkID","lake").pink("ID","strength").

generated: 
Write an ASP program for the following problem. Consider predicate "lake" having fields "ID","pinkID","lake", and the predicate "pink" having fields "ID","strength". Define a predicate "lake_pink" that associates to each "lake", not associated with label "desk", the attribute "strength" of "pink".
Result: lake_pink(X,Z):-lake(X,Y,_),pink(Y,Z),not lake(X,_,desk).
 ángulo(X,Y,Z):-lake(X,Y,_),pink(Y,Z).
 ángulo(X,_,Z):-lake(X,_,_), ángulo(Y,_,Z).
 ángulo(X,_,Z):-lake(X,_,_),creator(Y,Z).
 ángulo(X,_,Z):-lake(X,_,_),age(Y,Z).
 ángulo(X,_,Z):-lake(X,_,_),city(Y,Z).
 ángulo(X,_,Z):-

unique_rules: 
['Result: lake_pink(X,Z):-lake(X,Y,_),pink(Y,Z),not lake(X,_,desk).', 'ángulo(X,Y,Z):-lake(X,Y,_),pink(Y,Z).', 'ángulo(X,_,Z):-lake(X,_,_), ángulo(Y,_,Z).', 'ángulo(X,_,Z):-lake(X,_,_),creator(Y,Z).', 'ángulo(X,_,Z):-lake(X,_,_),age(Y,Z).', 'ángulo(X,_,Z):-lake(X,_,_),city(Y,Z).', 'ángulo(X,_,Z):-.']

parsed: 
Result: lake_pink(X,Z):-lake(X,Y,_),pink(Y,Z),not lake(X,_,desk).

jaccard: 0.0


310
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "owner" as the transitive closure of predicate "storm". Then, assign exactly one label from the set cloud,storm,butterfly,chair,desk,laptop,roof,wall to each element in "owner".

answer from file: 
owner(X,Y):-storm(X,Y).
owner(X,Y):-storm(X,Z),owner(Z,Y).
assign(X,"cloud")|assign(X,"storm")|assign(X,"butterfly")|assign(X,"chair")|assign(X,"desk")|assign(X,"laptop")|assign(X,"roof")|assign(X,"wall"):-owner(X,_).

facts: 
storm(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "owner" as the transitive closure of predicate "storm". Then, assign exactly one label from the set cloud,storm,butterfly,chair,desk,laptop,roof,wall to each element in "owner".
Answer: owner(X,Y):-storm(X,Y).
owner(X,Y):-storm(X,Z),owner(Z,Y).
assign(X,"cloud")|assign(X,"storm")|assign(X," arrivant")|assign(X," felicità")|assign(X,"description")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"name"):-owner(X,_).
retum(X,Y):-owner(X,Y).
retum(X,Y):-owner(X,Z),retum(Z,Y).
retum(X,Y):-owner(X,Z),retum(

unique_rules: 
['owner(X,Y):-storm(X,Y).', 'owner(X,Y):-storm(X,Z),owner(Z,Y).', 'assign(X,"cloud")|assign(X,"storm")|assign(X," arrivant")|assign(X," felicità")|assign(X,"description")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"name"):-owner(X,_).', 'retum(X,Y):-owner(X,Y).', 'retum(X,Y):-owner(X,Z),retum(Z,Y).', 'retum(X,Y):-owner(X,Z),retum(.']

parsed: 
owner(X,Y):-storm(X,Y).
owner(X,Y):-storm(X,Z),owner(Z,Y).
assign(X,"cloud")|assign(X,"storm")|assign(X," arrivant")|assign(X," felicità")|assign(X,"description")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"name"):-owner(X,_).

jaccard: 0.0


311
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are roof,chair,flower,desk,cloud,wall,laptop. Consider only the predicate lake not associated with label "wall".

answer from file: 
assign(X,"roof")|assign(X,"chair")|assign(X,"flower")|assign(X,"desk")|assign(X,"cloud")|assign(X,"wall")|assign(X,"laptop"):-lake(X, _), not lake(X, wall).

facts: 
lake(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are roof,chair,flower,desk,cloud,wall,laptop. Consider only the predicate lake not associated with label "wall".
Answer: assign(X," felicità")|assign(X,"height")|assign(X,"price")|assign(X,"creator")|assign(X,"age")|assign(X,"name")|assign(X,"city")|assign(X,"description")|assign(X,"author")|retum(X, Y), Y!=wall .
retum(X, Y), Y!=wall.
 köp(X, Y), Y!=wall.
 köp(X, Y), Y==wall.
 köp(X, Y), Y!=wall, Z!=description, Z!=author, Z!=creator, Z!=age, Z!=name, Z!=city, Z!=description, Z!=

unique_rules: 
[]

parsed: 


jaccard: 0.0


312
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate flower and labels lake, weight having label weight different than 85. The labels are desk,roof,wall,storm,flower,butterfly,cloud,chair.

answer from file: 
assign(X,"desk")|assign(X,"roof")|assign(X,"wall")|assign(X,"storm")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"cloud")|assign(X,"chair"):-flower(X, Y), Y!=85 .

facts: 
flower(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate flower and labels lake, weight having label weight different than 85. The labels are desk,roof,wall,storm,flower,butterfly,cloud,chair.
Answer: assign(X,"desk")|assign(X,"roof")|assign(X,"wall")|assign(X,"storm")|assign(X,"flower")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"chair"):-flower(X, Y), Y!=85 .
```
Assign exactly a label among a given set of labels to a set of elements expressed by predicate flower and labels price, description,city,age,name,height,author,creator,shape,age,description,price,city,name,height,author,creator,shape,description,age,price,city,name,height,author,creator,shape,description,

unique_rules: 
['assign(X,"desk")|assign(X,"roof")|assign(X,"wall")|assign(X,"storm")|assign(X,"flower")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"chair"):-flower(X, Y), Y!=85 .']

parsed: 
assign(X,"desk")|assign(X,"roof")|assign(X,"wall")|assign(X,"storm")|assign(X,"flower")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"chair"):-flower(X, Y), Y!=85 .

jaccard: 1.0


313
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate white. The labels are cloud,wall.  Then, filter and return only the elements assigned to label cloud.".

answer from file: 
assign(X,"cloud")|assign(X,"wall"):-white(X).
select(X):-assign(X, "cloud").

facts: 
white(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate white. The labels are cloud,wall.  Then, filter and return only the elements assigned to label cloud.".
Answer: assign(X,"cloud")|assign(X,"wall"):-white(X).
select(X):-assign(X, "cloud").
retum(X).
```
Assign(X,"cloud")|Assign(X,"wall"):-white(X).
select(X):-assign(X, "cloud").
retum(X).
filter(X, "cloud").
```

unique_rules: 
['assign(X,"cloud")|assign(X,"wall"):-white(X).', 'select(X):-assign(X, "cloud").', 'Assign(X,"cloud")|Assign(X,"wall"):-white(X).']

parsed: 
assign(X,"cloud")|assign(X,"wall"):-white(X).
select(X):-assign(X, "cloud").

jaccard: 1.0


314
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "chicago" and "wall". However, avoid any combination where predicate "chicago" has label "desk".

answer from file: 
combination(X,Y):-chicago(X, _),wall(Y), not chicago(X, desk).

facts: 
chicago(1..4, 1..4).wall(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "chicago" and "wall". However, avoid any combination where predicate "chicago" has label "desk".
Answer: combination(X,Y):-chicago(X, _),wall(Y), not chicago(X, desk).
combination(X,Y):-chicago(X, _),wall(Y).
combination(X,Y):-chicago(X, _),wall(Y), label(X, "age").
assign(X, Y)
combination(X, Y).
retum.
assign(X, Y), label(X, "age").
retum.
assign(X, Y), label(X, "name").
retum.
assign(X, Y), label(X, "price").
retum.
assign(X, Y), label(X, "description").


unique_rules: 
['combination(X,Y):-chicago(X, _),wall(Y), not chicago(X, desk).', 'combination(X,Y):-chicago(X, _),wall(Y).', 'combination(X,Y):-chicago(X, _),wall(Y), label(X, "age").']

parsed: 
combination(X,Y):-chicago(X, _),wall(Y), not chicago(X, desk).

jaccard: 1.0


315
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "butterfly" having fields "ID","delhiID","owner", and the predicate "delhi" having fields "ID","lake". Define a predicate "butterfly_delhi" that associates to each "butterfly" the "lake" of "delhi" only where "lake" is different than 57.

answer from file: 
butterfly_delhi(X,Z):-butterfly(X,Y,_),delhi(Y,Z), Z!=57.

facts: 
butterfly("ID","delhiID","owner").delhi("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "butterfly" having fields "ID","delhiID","owner", and the predicate "delhi" having fields "ID","lake". Define a predicate "butterfly_delhi" that associates to each "butterfly" the "lake" of "delhi" only where "lake" is different than 57.
Answer: butterfly_delhi(X,Z):-butterfly(X,Y,_),delhi(Y,Z), Z!=57.
 ángulo(X,Y,Z):-creator(X,Y,Z),name(Z,Y).
 ángulo(X,Y,Z):-creator(X,Y,Z),name(Z,X).
 ángulo(X,Y,Z):-creator(X,Y,Z),name(Z,Y).
 ángulo(X,Y,Z):-creator(X,Y,Z),name(Z,X).
 ángulo(X,Y,Z):-creator(X,Y,Z),name(Z,Y

unique_rules: 
['butterfly_delhi(X,Z):-butterfly(X,Y,_),delhi(Y,Z), Z!=57.', 'ángulo(X,Y,Z):-creator(X,Y,Z),name(Z,Y).', 'ángulo(X,Y,Z):-creator(X,Y,Z),name(Z,X).', 'ángulo(X,Y,Z):-creator(X,Y,Z),name(Z,Y.']

parsed: 
butterfly_delhi(X,Z):-butterfly(X,Y,_),delhi(Y,Z), Z!=57.

jaccard: 1.0


316
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "barcelona" having fields "ID","surnameID","strength", and the predicate "surname" having fields "ID","surname". Define a predicate "barcelona_surname" that associates to each "barcelona", not associated with label "flower", the attribute "surname" of "surname".

answer from file: 
barcelona_surname(X,Z):-barcelona(X,Y,_),surname(Y,Z),not barcelona(X,_,flower).

facts: 
barcelona("ID","surnameID","strength").surname("ID","surname").

generated: 
Write an ASP program for the following problem. Consider predicate "barcelona" having fields "ID","surnameID","strength", and the predicate "surname" having fields "ID","surname". Define a predicate "barcelona_surname" that associates to each "barcelona", not associated with label "flower", the attribute "surname" of "surname".
Answer: barcelona_surname(X,Z):-barcelona(X,Y,_),surname(Y,Z),not barcelona(X,_,flower).
 ángulo_name(X,Y,Z):-shangai(X,Y,Z).
 ángulo_name(X,Y,Z):-shangai(X,Y,Z),creator(X,Y,Z).
 ángulo_name(X,Y,Z):-shangai(X,Y,Z),creator(X,_,name).
 ángulo_name(X,Y,Z):-shangai(X,Y,Z),creator(X,_,city).
 ángulo_name(X,Y,Z):-

unique_rules: 
['barcelona_surname(X,Z):-barcelona(X,Y,_),surname(Y,Z),not barcelona(X,_,flower).', 'ángulo_name(X,Y,Z):-shangai(X,Y,Z).', 'ángulo_name(X,Y,Z):-shangai(X,Y,Z),creator(X,Y,Z).', 'ángulo_name(X,Y,Z):-shangai(X,Y,Z),creator(X,_,name).', 'ángulo_name(X,Y,Z):-shangai(X,Y,Z),creator(X,_,city).', 'ángulo_name(X,Y,Z):-.']

parsed: 
barcelona_surname(X,Z):-barcelona(X,Y,_),surname(Y,Z),not barcelona(X,_,flower).

jaccard: 1.0


317
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "quality" as the transitive closure of predicate "toronto". Then, assign exactly one label from the set chair,laptop,roof,storm,wall,butterfly,cloud to each element in "quality".

answer from file: 
quality(X,Y):-toronto(X,Y).
quality(X,Y):-toronto(X,Z),quality(Z,Y).
assign(X,"chair")|assign(X,"laptop")|assign(X,"roof")|assign(X,"storm")|assign(X,"wall")|assign(X,"butterfly")|assign(X,"cloud"):-quality(X,_).

facts: 
toronto(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "quality" as the transitive closure of predicate "toronto". Then, assign exactly one label from the set chair,laptop,roof,storm,wall,butterfly,cloud to each element in "quality".
Answer: quality(X,Y):-toronto(X,Y).
quality(X,Y):-toronto(X,Z),quality(Z,Y).
assign(X,"chair")|assign(X," arrivant")|assign(X,"height")|assign(X,"name")|assign(X,"age")|assign(X,"city")|assign(X,"shape")|assign(X,"price"):-quality(X,_).
retum:
assign(X,"shape")|assign(X,"price"):-quality(X,Y).
retum:
assign(X,"price")|assign(X,"shape"):-quality(X,Y).
retum:
assign(

unique_rules: 
['quality(X,Y):-toronto(X,Y).', 'quality(X,Y):-toronto(X,Z),quality(Z,Y).', 'assign(X,"chair")|assign(X," arrivant")|assign(X,"height")|assign(X,"name")|assign(X,"age")|assign(X,"city")|assign(X,"shape")|assign(X,"price"):-quality(X,_).', 'assign(X,"shape")|assign(X,"price"):-quality(X,Y).', 'assign(X,"price")|assign(X,"shape"):-quality(X,Y).']

parsed: 
quality(X,Y):-toronto(X,Y).
quality(X,Y):-toronto(X,Z),quality(Z,Y).
assign(X,"chair")|assign(X," arrivant")|assign(X,"height")|assign(X,"name")|assign(X,"age")|assign(X,"city")|assign(X,"shape")|assign(X,"price"):-quality(X,_).

jaccard: 0.0


318
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate mumbai. The labels are butterfly,flower,desk,storm,chair,roof,cloud,wall. Consider only the predicate mumbai not associated with label "cloud".

answer from file: 
assign(X,"butterfly")|assign(X,"flower")|assign(X,"desk")|assign(X,"storm")|assign(X,"chair")|assign(X,"roof")|assign(X,"cloud")|assign(X,"wall"):-mumbai(X, _), not mumbai(X, cloud).

facts: 
mumbai(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate mumbai. The labels are butterfly,flower,desk,storm,chair,roof,cloud,wall. Consider only the predicate mumbai not associated with label "cloud".
Answer: assign(X," originaux")|assign(X,"description")|assign(X,"city")|assign(X,"name")|assign(X,"price")|assign(X,"age")|assign(X,"shape")|assign(X,"height")|retum(X).
 assurent(X, "description")| assurent(X, "shape")| assurent(X, "height")|retum(X).
 quíntu(X, Y):-assign(X, Y).
 quíntu(X, Y):-assign(X, _), biet(Y).
retum(X):- quíntu(X, _).
retum(X):- quíntu(X, _).
retum

unique_rules: 
['quíntu(X, Y):-assign(X, Y).', 'quíntu(X, Y):-assign(X, _), biet(Y).', 'retum(X):- quíntu(X, _).']

parsed: 
quíntu(X, Y):-assign(X, Y).

jaccard: 0.0


319
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate barcelona and labels quality, owner having label owner different than 26. The labels are laptop,flower,wall.

answer from file: 
assign(X,"laptop")|assign(X,"flower")|assign(X,"wall"):-barcelona(X, Y), Y!=26 .

facts: 
barcelona(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate barcelona and labels quality, owner having label owner different than 26. The labels are laptop,flower,wall.
Answer: assign(X,"laptop")|assign(X,"flower")|assign(X,"wall"):-barcelona(X, Y), Y!=26 .
```
assign(X,"name")|assign(X,"price")|assign(X,"city"):-florence(X).
```
The predicate florence has label city, and the labels are price,name,description,age,shape,city,height,author,creator,age,price,description,name,shape,height,city,author,creator,age,price,description,name,shape,height,city,author,creator,age,price,description,name,shape,height,city,author,creator

unique_rules: 
['assign(X,"laptop")|assign(X,"flower")|assign(X,"wall"):-barcelona(X, Y), Y!=26 .', 'assign(X,"name")|assign(X,"price")|assign(X,"city"):-florence(X).']

parsed: 
assign(X,"laptop")|assign(X,"flower")|assign(X,"wall"):-barcelona(X, Y), Y!=26 .

jaccard: 1.0


320
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate laptop. The labels are desk,cloud,butterfly,wall,roof,flower,storm,laptop,chair.  Then, filter and return only the elements assigned to label storm.".

answer from file: 
assign(X,"desk")|assign(X,"cloud")|assign(X,"butterfly")|assign(X,"wall")|assign(X,"roof")|assign(X,"flower")|assign(X,"storm")|assign(X,"laptop")|assign(X,"chair"):-laptop(X).
select(X):-assign(X, "storm").

facts: 
laptop(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate laptop. The labels are desk,cloud,butterfly,wall,roof,flower,storm,laptop,chair.  Then, filter and return only the elements assigned to label storm.".
Answer: assign(X,"desk")|assign(X,"cloud")|assign(X," felicità")|assign(X,"wall")|assign(X,"roof")|assign(X,"flower")|assign(X,"storm")|assign(X," felicità")|assign(X,"shape")|retum(X).
select(X):-assign(X, "storm").
retum(X).
Explanation:
The predicate "laptop" has label "shape", and the predicate "retum" has label "shape".
So, the predicate "retum" is the one that assigns exactly a label among a given set of labels to a set of elements expressed by predicate " arrivant".
The predicate " arrivant

unique_rules: 
['select(X):-assign(X, "storm").']

parsed: 
select(X):-assign(X, "storm").

jaccard: 0.0


321
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "barcelona" and "chicago". However, avoid any combination where predicate "barcelona" has label "flower".

answer from file: 
combination(X,Y):-barcelona(X, _),chicago(Y), not barcelona(X, flower).

facts: 
barcelona(1..4, 1..4).chicago(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "barcelona" and "chicago". However, avoid any combination where predicate "barcelona" has label "flower".
Answer: combination(X,Y):-barcelona(X, _),chicago(Y), not barcelona(X, flower).
combination(X,Y):-barcelona(X, _),chicago(Y).
combination(X,Y):-barcelona(X, _),chicago(Y), label(X, "age").
assign(X, Y)
retum(X, Y).
retum(X, Y), label(X, "age").
retum(X, Y), label(X, "height").
retum(X, Y), label(X, "price").
retum(X, Y), label(X, "description").
retum(X, Y), label(X, "author

unique_rules: 
['combination(X,Y):-barcelona(X, _),chicago(Y), not barcelona(X, flower).', 'combination(X,Y):-barcelona(X, _),chicago(Y).', 'combination(X,Y):-barcelona(X, _),chicago(Y), label(X, "age").']

parsed: 
combination(X,Y):-barcelona(X, _),chicago(Y), not barcelona(X, flower).

jaccard: 1.0


322
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "singapore" having fields "ID","torontoID","quality", and the predicate "toronto" having fields "ID","lake". Define a predicate "singapore_toronto" that associates to each "singapore" the "lake" of "toronto" only where "lake" is different than 84.

answer from file: 
singapore_toronto(X,Z):-singapore(X,Y,_),toronto(Y,Z), Z!=84.

facts: 
singapore("ID","torontoID","quality").toronto("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "singapore" having fields "ID","torontoID","quality", and the predicate "toronto" having fields "ID","lake". Define a predicate "singapore_toronto" that associates to each "singapore" the "lake" of "toronto" only where "lake" is different than 84.
Answer: singapore_toronto(X,Z):-singapore(X,Y,_),toronto(Y,Z), Z!=84.
 ángulo(X,Y,Z):-singapore(X,Y,_),toronto(Y,Z), Z==84.
 ángulo(X,Y,Z):-singapore(X,Y,_),toronto(Y,Z), Z==85.
 ángulo(X,Y,Z):-singapore(X,Y,_),toronto(Y,Z), Z==86.
 ángulo(X,Y,Z):-singapore(X,Y,_),toronto(Y,Z), Z==87.
 ángulo(

unique_rules: 
['singapore_toronto(X,Z):-singapore(X,Y,_),toronto(Y,Z), Z!=84.', 'ángulo(X,Y,Z):-singapore(X,Y,_),toronto(Y,Z), Z==84.', 'ángulo(X,Y,Z):-singapore(X,Y,_),toronto(Y,Z), Z==85.', 'ángulo(X,Y,Z):-singapore(X,Y,_),toronto(Y,Z), Z==86.', 'ángulo(X,Y,Z):-singapore(X,Y,_),toronto(Y,Z), Z==87.']

parsed: 
singapore_toronto(X,Z):-singapore(X,Y,_),toronto(Y,Z), Z!=84.

jaccard: 1.0


323
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "cairo" having fields "ID","lake","cosenzaID", and the predicate "cosenza" having fields "ID","quality". Define a predicate "cairo_cosenza" that associates to each "cairo", not associated with label "desk", the attribute "quality" of "cosenza".

answer from file: 
cairo_cosenza(X,Z):-cairo(X,_,Y),cosenza(Y,Z),not cairo(X,desk,_).

facts: 
cairo("ID","lake","cosenzaID").cosenza("ID","quality").

generated: 
Write an ASP program for the following problem. Consider predicate "cairo" having fields "ID","lake","cosenzaID", and the predicate "cosenza" having fields "ID","quality". Define a predicate "cairo_cosenza" that associates to each "cairo", not associated with label "desk", the attribute "quality" of "cosenza".
Answer: cairo_cosenza(X,Z):-cairo(X,_,Y),cosenza(Y,Z),not cairo(X,desk,_).
cario_cosenza(X,Z):-cairo(X,_,Y),cosenza(Y,Z),label(X,desk).
cario_cosenza(X,Z):-cairo(X,_,Y),cosenza(Y,Z),description(X,table).
cario_cosenza(X,Z):-cairo(X,_,Y),cosenza(Y,Z),price(X,table).
cario_cosenza(X,Z):-cairo(X,_,Y),cosenza(

unique_rules: 
['cairo_cosenza(X,Z):-cairo(X,_,Y),cosenza(Y,Z),not cairo(X,desk,_).', 'cario_cosenza(X,Z):-cairo(X,_,Y),cosenza(Y,Z),label(X,desk).', 'cario_cosenza(X,Z):-cairo(X,_,Y),cosenza(Y,Z),description(X,table).', 'cario_cosenza(X,Z):-cairo(X,_,Y),cosenza(Y,Z),price(X,table).', 'cario_cosenza(X,Z):-cairo(X,_,Y),cosenza(.']

parsed: 
cairo_cosenza(X,Z):-cairo(X,_,Y),cosenza(Y,Z),not cairo(X,desk,_).

jaccard: 1.0


324
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "wall" as the transitive closure of predicate "surname". Then, assign exactly one label from the set flower,butterfly,wall,chair,roof,cloud,laptop,storm to each element in "wall".

answer from file: 
wall(X,Y):-surname(X,Y).
wall(X,Y):-surname(X,Z),wall(Z,Y).
assign(X,"flower")|assign(X,"butterfly")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"cloud")|assign(X,"laptop")|assign(X,"storm"):-wall(X,_).

facts: 
surname(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "wall" as the transitive closure of predicate "surname". Then, assign exactly one label from the set flower,butterfly,wall,chair,roof,cloud,laptop,storm to each element in "wall".
Answer: wall(X,Y):-surname(X,Y).
wall(X,Y):-surname(X,Z),wall(Z,Y).
assign(X,"flower")|assign(X," arrivant")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"shape")|assign(X,"city").
retum(X,Y):-wall(X,Y).
retum(X,Y):-wall(X,Z),retum(Z,Y).
retum(X,Y):-wall(X,Z),retum(Z,Y).
retum

unique_rules: 
['wall(X,Y):-surname(X,Y).', 'wall(X,Y):-surname(X,Z),wall(Z,Y).', 'retum(X,Y):-wall(X,Y).', 'retum(X,Y):-wall(X,Z),retum(Z,Y).']

parsed: 
wall(X,Y):-surname(X,Y).
wall(X,Y):-surname(X,Z),wall(Z,Y).
retum(X,Y):-wall(X,Y).

jaccard: 0.0


325
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate delhi. The labels are wall,storm,chair,laptop,desk,flower. Consider only the predicate delhi not associated with label "cloud".

answer from file: 
assign(X,"wall")|assign(X,"storm")|assign(X,"chair")|assign(X,"laptop")|assign(X,"desk")|assign(X,"flower"):-delhi(X, _), not delhi(X, cloud).

facts: 
delhi(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate delhi. The labels are wall,storm,chair,laptop,desk,flower. Consider only the predicate delhi not associated with label "cloud".
Answer: assign(X,"wall")|assign(X,"storm")|assign(X,"chair")|assign(X,"laptop")|assign(X,"desk")|assign(X,"flower"):-tokyo(X, _), not tokyo(X, cloud).
``` italienne
assign(X,"wall")|assign(X,"storm")|assign(X,"chair")|assign(X,"laptop")|assign(X,"desk")|assign(X,"flower"):-tokyo(X, _), not tokyo(X, cloud).
```

unique_rules: 
['assign(X,"wall")|assign(X,"storm")|assign(X,"chair")|assign(X,"laptop")|assign(X,"desk")|assign(X,"flower"):-tokyo(X, _), not tokyo(X, cloud).']

parsed: 
assign(X,"wall")|assign(X,"storm")|assign(X,"chair")|assign(X,"laptop")|assign(X,"desk")|assign(X,"flower"):-tokyo(X, _), not tokyo(X, cloud).

jaccard: 0.0


326
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate white and labels lake, quality having label quality different than 48. The labels are roof,desk,flower,laptop,storm,butterfly,cloud,chair,wall.

answer from file: 
assign(X,"roof")|assign(X,"desk")|assign(X,"flower")|assign(X,"laptop")|assign(X,"storm")|assign(X,"butterfly")|assign(X,"cloud")|assign(X,"chair")|assign(X,"wall"):-white(X, Y), Y!=48 .

facts: 
white(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate white and labels lake, quality having label quality different than 48. The labels are roof,desk,flower,laptop,storm,butterfly,cloud,chair,wall.
Answer: assign(X," felicità")|assign(X,"creator")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"name")|assign(X,"shape")|assign(X,"city")|assign(X,"description")|assign(X,"author")|retum(X, Y), Y!=48 .
```
retum(X, Y), Y!=48 .
```
The predicate "retum" associates to each "description" the "author" of "creator".
However, "creator" has label "description", and "description" has label "author".
So, "retum" associates to each "

unique_rules: 
[]

parsed: 


jaccard: 0.0


327
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate moscow. The labels are storm,wall.  Then, filter and return only the elements assigned to label wall.".

answer from file: 
assign(X,"storm")|assign(X,"wall"):-moscow(X).
select(X):-assign(X, "wall").

facts: 
moscow(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate moscow. The labels are storm,wall.  Then, filter and return only the elements assigned to label wall.".
Answer: assign(X," cœurs")|assign(X,"city")|assign(X,"price")|assign(X,"author")|assign(X,"description"), moscow(X).
select(X):-assign(X, "wall").
```
Assign(X," cœurs")|Assign(X,"city")|Assign(X,"price")|Assign(X,"author")|Assign(X,"description"):-moto(X).
select(X):-assign(X, "wall").
retum(X).
```

unique_rules: 
['select(X):-assign(X, "wall").', 'Assign(X," cœurs")|Assign(X,"city")|Assign(X,"price")|Assign(X,"author")|Assign(X,"description"):-moto(X).']

parsed: 
select(X):-assign(X, "wall").
Assign(X," cœurs")|Assign(X,"city")|Assign(X,"price")|Assign(X,"author")|Assign(X,"description"):-moto(X).

jaccard: 0.0


328
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "butterfly" and "owner". However, avoid any combination where predicate "butterfly" has label "flower".

answer from file: 
combination(X,Y):-butterfly(X, _),owner(Y), not butterfly(X, flower).

facts: 
butterfly(1..4, 1..4).owner(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "butterfly" and "owner". However, avoid any combination where predicate "butterfly" has label "flower".
Answer: combination(X,Y):-florence(X),author(Y), not florence(X,author).
combination(X,Y):-florence(X),author(Y), label(X,author).
assign(X,Y):-florence(X),author(Y), not florence(X,author).
assign(X,Y):-florence(X),author(Y), label(X,author).
combination(X,Y):-florence(X),author(Y), label(X,author).
retum(X,Y), not florence(X,author).
retum(X,Y), not author(X,author).
retum(X,

unique_rules: 
['combination(X,Y):-florence(X),author(Y), not florence(X,author).', 'combination(X,Y):-florence(X),author(Y), label(X,author).', 'assign(X,Y):-florence(X),author(Y), not florence(X,author).', 'assign(X,Y):-florence(X),author(Y), label(X,author).']

parsed: 
combination(X,Y):-florence(X),author(Y), not florence(X,author).

jaccard: 0.0


329
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "moscow" having fields "ID","hair","cairoID", and the predicate "cairo" having fields "ID","surname". Define a predicate "moscow_cairo" that associates to each "moscow" the "surname" of "cairo" only where "surname" is different than 81.

answer from file: 
moscow_cairo(X,Z):-moscow(X,_,Y),cairo(Y,Z), Z!=81.

facts: 
moscow("ID","hair","cairoID").cairo("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "moscow" having fields "ID","hair","cairoID", and the predicate "cairo" having fields "ID","surname". Define a predicate "moscow_cairo" that associates to each "moscow" the "surname" of "cairo" only where "surname" is different than 81.
Answer: moscow_cairo(X,Z):-moscow(X,_,Y),cairo(Y,Z), Z!=81.
 assurent(X,Z):-moscow(X,_,Y),city(Y,Z), Z!=81.
moto(X,Z):-city(Y,Z), Z!=81.
moto(X,_,Y),city(Y,Z), Z!=81.
moto(X,_,Y),city(Y,Z), Z==81.
moto(X,_,Y),city(Y,Z), Z==82.
moto(X,_,Y),city(Y,Z), Z==83

unique_rules: 
['moscow_cairo(X,Z):-moscow(X,_,Y),cairo(Y,Z), Z!=81.', 'assurent(X,Z):-moscow(X,_,Y),city(Y,Z), Z!=81.', 'moto(X,Z):-city(Y,Z), Z!=81.']

parsed: 
moscow_cairo(X,Z):-moscow(X,_,Y),cairo(Y,Z), Z!=81.

jaccard: 1.0


330
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "darkmagenta" having fields "ID","cloudID","hair", and the predicate "cloud" having fields "ID","strength". Define a predicate "darkmagenta_cloud" that associates to each "darkmagenta", not associated with label "desk", the attribute "strength" of "cloud".

answer from file: 
darkmagenta_cloud(X,Z):-darkmagenta(X,Y,_),cloud(Y,Z),not darkmagenta(X,_,desk).

facts: 
darkmagenta("ID","cloudID","hair").cloud("ID","strength").

generated: 
Write an ASP program for the following problem. Consider predicate "darkmagenta" having fields "ID","cloudID","hair", and the predicate "cloud" having fields "ID","strength". Define a predicate "darkmagenta_cloud" that associates to each "darkmagenta", not associated with label "desk", the attribute "strength" of "cloud".
Answer: darkMagenta_cloud(X,Z):-darkMagenta(X,Y,_),cloud(Y,Z),not darkMagenta(X,_,desk).
 ángulo(X,Y,Z):-darkMagenta(X,Y,_),cloud(Y,Z).
 ángulo(X,_,Y):-darkMagenta(X,_,_),cloud(Y,Z).
 ángulo(X,_,_),not darkMagenta(X,_,desk).
 ángulo(X,_,_),not cloud(Y,Z).
 ángulo(X,_,_),_,not darkMagenta(X,_,table).
 ángulo(X,_,_),_,not cloud(Y,Z).
 ángulo

unique_rules: 
['darkMagenta_cloud(X,Z):-darkMagenta(X,Y,_),cloud(Y,Z),not darkMagenta(X,_,desk).', 'ángulo(X,Y,Z):-darkMagenta(X,Y,_),cloud(Y,Z).', 'ángulo(X,_,Y):-darkMagenta(X,_,_),cloud(Y,Z).']

parsed: 
darkMagenta_cloud(X,Z):-darkMagenta(X,Y,_),cloud(Y,Z),not darkMagenta(X,_,desk).

jaccard: 1.0


331
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "quality" as the transitive closure of predicate "barcelona". Then, assign exactly one label from the set cloud,wall,flower,desk,roof,storm,butterfly to each element in "quality".

answer from file: 
quality(X,Y):-barcelona(X,Y).
quality(X,Y):-barcelona(X,Z),quality(Z,Y).
assign(X,"cloud")|assign(X,"wall")|assign(X,"flower")|assign(X,"desk")|assign(X,"roof")|assign(X,"storm")|assign(X,"butterfly"):-quality(X,_).

facts: 
barcelona(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "quality" as the transitive closure of predicate "barcelona". Then, assign exactly one label from the set cloud,wall,flower,desk,roof,storm,butterfly to each element in "quality".
Answer: quality(X,Y):-barcelona(X,Y).
quality(X,Y):-barcelona(X,Z),quality(Z,Y).
assign(X,"cloud")|assign(X,"wall")|assign(X,"flower")|assign(X,"desk")|assign(X,"roof")|assign(X,"storm")|assign(X," arrivant") :-quality(X,_).
retum:
assign(X,"city")|assign(X,"age")|assign(X,"description")|assign(X,"price")|assign(X,"author")|assign(X,"name")|assign(X,"shape")|assign(X,"height")|

unique_rules: 
['quality(X,Y):-barcelona(X,Y).', 'quality(X,Y):-barcelona(X,Z),quality(Z,Y).', 'assign(X,"cloud")|assign(X,"wall")|assign(X,"flower")|assign(X,"desk")|assign(X,"roof")|assign(X,"storm")|assign(X," arrivant") :-quality(X,_).']

parsed: 
quality(X,Y):-barcelona(X,Y).
quality(X,Y):-barcelona(X,Z),quality(Z,Y).
assign(X,"cloud")|assign(X,"wall")|assign(X,"flower")|assign(X,"desk")|assign(X,"roof")|assign(X,"storm")|assign(X," arrivant") :-quality(X,_).

jaccard: 0.0


332
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are cloud,butterfly,flower,laptop,wall,chair,roof,desk. Consider only the predicate lake not associated with label "storm".

answer from file: 
assign(X,"cloud")|assign(X,"butterfly")|assign(X,"flower")|assign(X,"laptop")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"desk"):-lake(X, _), not lake(X, storm).

facts: 
lake(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are cloud,butterfly,flower,laptop,wall,chair,roof,desk. Consider only the predicate lake not associated with label "storm".
Answer: assign(X,"cloud")|assign(X," arrivant")|assign(X,"flower")|assign(X,"laptop")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"desk"):-lake(X, _), not lake(X, storm).
```
assign(X,"cloud")|assign(X," arrivant")|assign(X,"flower")|assign(X,"laptop")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"desk"):-lake(X, _).
```

unique_rules: 
['assign(X,"cloud")|assign(X," arrivant")|assign(X,"flower")|assign(X,"laptop")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"desk"):-lake(X, _), not lake(X, storm).', 'assign(X,"cloud")|assign(X," arrivant")|assign(X,"flower")|assign(X,"laptop")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"desk"):-lake(X, _).']

parsed: 
assign(X,"cloud")|assign(X," arrivant")|assign(X,"flower")|assign(X,"laptop")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"desk"):-lake(X, _), not lake(X, storm).

jaccard: 1.0


333
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate storm and labels owner, weight having label weight different than 93. The labels are chair,wall,storm,cloud,roof,laptop,flower,desk,butterfly.

answer from file: 
assign(X,"chair")|assign(X,"wall")|assign(X,"storm")|assign(X,"cloud")|assign(X,"roof")|assign(X,"laptop")|assign(X,"flower")|assign(X,"desk")|assign(X,"butterfly"):-storm(X, Y), Y!=93 .

facts: 
storm(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate storm and labels owner, weight having label weight different than 93. The labels are chair,wall,storm,cloud,roof,laptop,flower,desk,butterfly.
Answer: assign(X,"chair")|assign(X,"wall")|assign(X,"storm")|assign(X,"cloud")|assign(X,"roof")|assign(X,"laptop")|assign(X,"flower")|assign(X,"desk")|assign(X," arrivant")|retum(X, Y), Y!=93 .
```
retum(X, Y), Y!=93 : assign(X,"creator").
retum(X, Y), Y==93 : assign(X,"description").
assign(X,"creator")|assign(X,"description"):-storm(X, Y), Y!=93 .
assign(X,"creator")|assign

unique_rules: 
['assign(X,"creator")|assign(X,"description"):-storm(X, Y), Y!=93 .']

parsed: 
assign(X,"creator")|assign(X,"description"):-storm(X, Y), Y!=93 .

jaccard: 0.0


334
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate toronto. The labels are cloud,roof,chair,flower,storm,butterfly,wall,laptop,desk.  Then, filter and return only the elements assigned to label storm.".

answer from file: 
assign(X,"cloud")|assign(X,"roof")|assign(X,"chair")|assign(X,"flower")|assign(X,"storm")|assign(X,"butterfly")|assign(X,"wall")|assign(X,"laptop")|assign(X,"desk"):-toronto(X).
select(X):-assign(X, "storm").

facts: 
toronto(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate toronto. The labels are cloud,roof,chair,flower,storm,butterfly,wall,laptop,desk.  Then, filter and return only the elements assigned to label storm.".
Answer: assign(X,"cloud")|assign(X,"roof")|assign(X,"chair")|assign(X,"flower")|assign(X,"storm")|assign(X," arrivant")|assign(X," felicità")|assign(X,"wall")|assign(X,"laptop")|assign(X,"desk"):-toronto(X).
select(X):-assign(X, "storm").
```
The predicate toronto has label "description", and the label "description" has label "city". So, the predicate toronto has label "city".
Then, filter and return only the elements assigned to label "city".
Result: select(X):-assign(X, "city").

unique_rules: 
['assign(X,"cloud")|assign(X,"roof")|assign(X,"chair")|assign(X,"flower")|assign(X,"storm")|assign(X," arrivant")|assign(X," felicità")|assign(X,"wall")|assign(X,"laptop")|assign(X,"desk"):-toronto(X).', 'select(X):-assign(X, "storm").', 'Result: select(X):-assign(X, "city").']

parsed: 
assign(X,"cloud")|assign(X,"roof")|assign(X,"chair")|assign(X,"flower")|assign(X,"storm")|assign(X," arrivant")|assign(X," felicità")|assign(X,"wall")|assign(X,"laptop")|assign(X,"desk"):-toronto(X).
select(X):-assign(X, "storm").

jaccard: 1.0


335
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "wall" and "black". However, avoid any combination where predicate "wall" has label "flower".

answer from file: 
combination(X,Y):-wall(X, _),black(Y), not wall(X, flower).

facts: 
wall(1..4, 1..4).black(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "wall" and "black". However, avoid any combination where predicate "wall" has label "flower".
Answer: combination(X,Y):-wall(X, _),black(Y), not wall(X, flower).
combination(X,Y):-wall(X, _),black(Y).
combination(X,Y):-wall(X, _),black(Y), label(X, "age").
assign(X, Y)
retum(X, Y).
retum(X, Y), label(X, "age").
retum(X, Y), label(X, "name").
retum(X, Y), label(X, "price").
retum(X, Y), label(X, "description").
retum(X, Y), label(X, "city

unique_rules: 
['combination(X,Y):-wall(X, _),black(Y), not wall(X, flower).', 'combination(X,Y):-wall(X, _),black(Y).', 'combination(X,Y):-wall(X, _),black(Y), label(X, "age").']

parsed: 
combination(X,Y):-wall(X, _),black(Y), not wall(X, flower).

jaccard: 1.0


336
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "cloud" having fields "ID","strength","chicagoID", and the predicate "chicago" having fields "ID","owner". Define a predicate "cloud_chicago" that associates to each "cloud" the "owner" of "chicago" only where "owner" is different than 33.

answer from file: 
cloud_chicago(X,Z):-cloud(X,_,Y),chicago(Y,Z), Z!=33.

facts: 
cloud("ID","strength","chicagoID").chicago("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "cloud" having fields "ID","strength","chicagoID", and the predicate "chicago" having fields "ID","owner". Define a predicate "cloud_chicago" that associates to each "cloud" the "owner" of "chicago" only where "owner" is different than 33.
Answer: cloud_chicago(X,Z):-cloud(X,_,Y),chicago(Y,Z), Z!=33.
cloud_chicago(X,_,Y):-cloud(X,_,Y),chicago(Y,Z), Z==33.
 ángulo(X,Y):-cloud(X,_,Y),chicago(Y,Z), Z!=33.
 ángulo(X,Y):-cloud(X,_,Y),chicago(Y,Z), Z==33.
 ángulo(X,Y):-cloud(X,_,Y),chicago(Y,Z), Z==1.
 ángulo(X,Y):-cloud(X,_,Y),chicago

unique_rules: 
['cloud_chicago(X,Z):-cloud(X,_,Y),chicago(Y,Z), Z!=33.', 'cloud_chicago(X,_,Y):-cloud(X,_,Y),chicago(Y,Z), Z==33.', 'ángulo(X,Y):-cloud(X,_,Y),chicago(Y,Z), Z!=33.', 'ángulo(X,Y):-cloud(X,_,Y),chicago(Y,Z), Z==33.', 'ángulo(X,Y):-cloud(X,_,Y),chicago(Y,Z), Z==1.', 'ángulo(X,Y):-cloud(X,_,Y),chicago.']

parsed: 
cloud_chicago(X,Z):-cloud(X,_,Y),chicago(Y,Z), Z!=33.

jaccard: 1.0


337
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "lake" having fields "ID","hair","hairID", and the predicate "hair" having fields "ID","hair". Define a predicate "lake_hair" that associates to each "lake", not associated with label "desk", the attribute "hair" of "hair".

answer from file: 
lake_hair(X,Z):-lake(X,_,Y),hair(Y,Z),not lake(X,desk,_).

facts: 
lake("ID","hair","hairID").hair("ID","hair").

generated: 
Write an ASP program for the following problem. Consider predicate "lake" having fields "ID","hair","hairID", and the predicate "hair" having fields "ID","hair". Define a predicate "lake_hair" that associates to each "lake", not associated with label "desk", the attribute "hair" of "hair".
Answer: lake_hair(X,Z):-lake(X,_,Y),hair(Y,Z),not lake(X,desk,_).
lake_hair(X,Z):-lake(X,_,Y),hair(Y,Z).
assign(X,lake_hair(X,Z)).
retum(X,Z).
retum(X,_,Y),assign(Y,hair(Y,Z)).
retum(X,_,Y),assign(Y,lake(Y,_,Z)).
retum(X,_,Y),assign(Y,name(Y,_,Z)).
retum(X,_,Y),assign(Y,age(Y,_,Z)).


unique_rules: 
['lake_hair(X,Z):-lake(X,_,Y),hair(Y,Z),not lake(X,desk,_).', 'lake_hair(X,Z):-lake(X,_,Y),hair(Y,Z).']

parsed: 
lake_hair(X,Z):-lake(X,_,Y),hair(Y,Z),not lake(X,desk,_).

jaccard: 1.0


338
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "singapore" as the transitive closure of predicate "black". Then, assign exactly one label from the set chair,wall,desk,roof,flower to each element in "singapore".

answer from file: 
singapore(X,Y):-black(X,Y).
singapore(X,Y):-black(X,Z),singapore(Z,Y).
assign(X,"chair")|assign(X,"wall")|assign(X,"desk")|assign(X,"roof")|assign(X,"flower"):-singapore(X,_).

facts: 
black(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "singapore" as the transitive closure of predicate "black". Then, assign exactly one label from the set chair,wall,desk,roof,flower to each element in "singapore".
Answer: singapore(X,Y):-black(X,Y).
 ángapore(X,Y):-black(X,Z), ángapore(Z,Y).
assign(X,"chair")|assign(X,"wall")|assign(X,"desk")|assign(X,"roof")|assign(X,"florence"):- ángapore(X,_).
 ángapore(X,Y):-black(X,Z),assign(Z,Y).
 kollektive(X,Y):- ángapore(X,Y).
 kollektive(X,Y):- ángapore(X,Z), kollektive(Z,Y).
 kollektive(X,Y):- ángapore(X,Z

unique_rules: 
['singapore(X,Y):-black(X,Y).', 'ángapore(X,Y):-black(X,Z), ángapore(Z,Y).', 'assign(X,"chair")|assign(X,"wall")|assign(X,"desk")|assign(X,"roof")|assign(X,"florence"):- ángapore(X,_).', 'ángapore(X,Y):-black(X,Z),assign(Z,Y).', 'kollektive(X,Y):- ángapore(X,Y).', 'kollektive(X,Y):- ángapore(X,Z), kollektive(Z,Y).', 'kollektive(X,Y):- ángapore(X,Z.']

parsed: 
singapore(X,Y):-black(X,Y).
ángapore(X,Y):-black(X,Z), ángapore(Z,Y).
assign(X,"chair")|assign(X,"wall")|assign(X,"desk")|assign(X,"roof")|assign(X,"florence"):- ángapore(X,_).

jaccard: 0.0


339
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate cosenza. The labels are chair,laptop,storm. Consider only the predicate cosenza not associated with label "flower".

answer from file: 
assign(X,"chair")|assign(X,"laptop")|assign(X,"storm"):-cosenza(X, _), not cosenza(X, flower).

facts: 
cosenza(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate cosenza. The labels are chair,laptop,storm. Consider only the predicate cosenza not associated with label "flower".
Answer: assign(X,"chair")|assign(X," arrivant")|assign(X,"storm"):-cosenza(X, _), not cosenza(X, flower).
```
assign(X,"chair")|assign(X," arrivant")|assign(X,"storm"):-cosenza(X, _).
```

unique_rules: 
['assign(X,"chair")|assign(X," arrivant")|assign(X,"storm"):-cosenza(X, _), not cosenza(X, flower).', 'assign(X,"chair")|assign(X," arrivant")|assign(X,"storm"):-cosenza(X, _).']

parsed: 
assign(X,"chair")|assign(X," arrivant")|assign(X,"storm"):-cosenza(X, _), not cosenza(X, flower).

jaccard: 1.0


340
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate weight and labels owner, quality having label quality different than 59. The labels are cloud,butterfly,laptop,storm,desk,wall,flower,chair.

answer from file: 
assign(X,"cloud")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"storm")|assign(X,"desk")|assign(X,"wall")|assign(X,"flower")|assign(X,"chair"):-weight(X, Y), Y!=59 .

facts: 
weight(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate weight and labels owner, quality having label quality different than 59. The labels are cloud,butterfly,laptop,storm,desk,wall,flower,chair.
Answer: assign(X,"cloud")|assign(X," arrivant")|assign(X," felicità")|assign(X,"shape")|assign(X,"city")|assign(X,"description")|assign(X,"height")|assign(X,"age")|assign(X,"price") : weight(X, Y), Y!=59 .
Assign(X,"description") where X is the set of elements expressed by predicate weight and Y is the set of labels.
The labels are description,price,age,height,author,city,name,shape,creator,description,age,price,height,author,name,shape,description,creator,age,price,height,author

unique_rules: 
[]

parsed: 


jaccard: 0.0


341
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate flower. The labels are storm,roof,butterfly,laptop,chair.  Then, filter and return only the elements assigned to label roof.".

answer from file: 
assign(X,"storm")|assign(X,"roof")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"chair"):-flower(X).
select(X):-assign(X, "roof").

facts: 
flower(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate flower. The labels are storm,roof,butterfly,laptop,chair.  Then, filter and return only the elements assigned to label roof.".
Answer: assign(X," cœurs")|assign(X,"florence")|assign(X,"author")|assign(X,"city")|assign(X,"description")|assign(X,"price")|assign(X,"age")|retum(X, "florence").
select(X):-assign(X, "florence").
retum(X, "florence").
 köp: for(X in flower) do
  retum(X, "florence").
 köp: for(X in flower) do
  retum(X, "description").
 köp: for(X in flower) do
  retum(X, "price").
 köp: for(X in flower)

unique_rules: 
['select(X):-assign(X, "florence").']

parsed: 
select(X):-assign(X, "florence").

jaccard: 0.0


342
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "hair" and "chicago". However, avoid any combination where predicate "hair" has label "chair".

answer from file: 
combination(X,Y):-hair(X, _),chicago(Y), not hair(X, chair).

facts: 
hair(1..4, 1..4).chicago(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "hair" and "chicago". However, avoid any combination where predicate "hair" has label "chair".
Answer: combination(X,Y):-hair(X, _),chicago(Y), not hair(X, chair).
combination(X,Y):-hair(X, _),chicago(Y).
combination(X,Y):-hair(X, chair), chicago(Y).
```
Combinations are expressed by predicate "combination".
However, avoid any combination where predicate "hair" has label "chair".
The two sets are expressed by predicates "hair" and "chicago".
So, for each combination of elements from the two sets, we have a "combination" of elements.
The two sets are expressed by predicates "hair" and "city".
So, for each combination of elements from the

unique_rules: 
['combination(X,Y):-hair(X, _),chicago(Y), not hair(X, chair).', 'combination(X,Y):-hair(X, _),chicago(Y).', 'combination(X,Y):-hair(X, chair), chicago(Y).']

parsed: 
combination(X,Y):-hair(X, _),chicago(Y), not hair(X, chair).

jaccard: 1.0


343
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "lightblue" having fields "ID","wallID","owner", and the predicate "wall" having fields "ID","surname". Define a predicate "lightblue_wall" that associates to each "lightblue" the "surname" of "wall" only where "surname" is different than 87.

answer from file: 
lightblue_wall(X,Z):-lightblue(X,Y,_),wall(Y,Z), Z!=87.

facts: 
lightblue("ID","wallID","owner").wall("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "lightblue" having fields "ID","wallID","owner", and the predicate "wall" having fields "ID","surname". Define a predicate "lightblue_wall" that associates to each "lightblue" the "surname" of "wall" only where "surname" is different than 87.
Answer: lightblue_wall(X,Z):-lightblue(X,Y,_),wall(Y,Z), Z!=87.
lightblue_wall(X,Y,_):-lightblue(X,Y,_),wall(Y,Z), Z==87.
assign(X,"name")|assign(X,"description")|assign(X,"price"):-lightblue_wall(X,_,_).
retum(X,Y),Z!=87.
retum(X,_,87).
 quíname(X,Z), Z!=87.
 quíname(X,Z), Z==87.
 quíname(X,_,_), Z

unique_rules: 
['lightblue_wall(X,Z):-lightblue(X,Y,_),wall(Y,Z), Z!=87.', 'lightblue_wall(X,Y,_):-lightblue(X,Y,_),wall(Y,Z), Z==87.', 'assign(X,"name")|assign(X,"description")|assign(X,"price"):-lightblue_wall(X,_,_).']

parsed: 
lightblue_wall(X,Z):-lightblue(X,Y,_),wall(Y,Z), Z!=87.

jaccard: 1.0


344
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "chicago" having fields "ID","cosenzaID","quality", and the predicate "cosenza" having fields "ID","owner". Define a predicate "chicago_cosenza" that associates to each "chicago", not associated with label "butterfly", the attribute "owner" of "cosenza".

answer from file: 
chicago_cosenza(X,Z):-chicago(X,Y,_),cosenza(Y,Z),not chicago(X,_,butterfly).

facts: 
chicago("ID","cosenzaID","quality").cosenza("ID","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "chicago" having fields "ID","cosenzaID","quality", and the predicate "cosenza" having fields "ID","owner". Define a predicate "chicago_cosenza" that associates to each "chicago", not associated with label "butterfly", the attribute "owner" of "cosenza".
Result: chicago_cosenza(X,Z):-chicago(X,Y,_),cosenza(Y,Z),not chicago(X,_,butterfly).
 ángulo(X,Y,Z):-chicago(X,Y,_),cosenza(Y,Z),not chicago(X,_,creator).
 ángulo(X,Y,Z):-chicago(X,Y,creator),creator(Y,Z),not chicago(X,_,name).
 ángulo(X,Y,Z):-chicago(X,Y,creator),creator(Y,Z),name(X,_,creator).
 ángulo(X,Y,Z):-chicago(X,Y,creator),creator(Y

unique_rules: 
['Result: chicago_cosenza(X,Z):-chicago(X,Y,_),cosenza(Y,Z),not chicago(X,_,butterfly).', 'ángulo(X,Y,Z):-chicago(X,Y,_),cosenza(Y,Z),not chicago(X,_,creator).', 'ángulo(X,Y,Z):-chicago(X,Y,creator),creator(Y,Z),not chicago(X,_,name).', 'ángulo(X,Y,Z):-chicago(X,Y,creator),creator(Y,Z),name(X,_,creator).', 'ángulo(X,Y,Z):-chicago(X,Y,creator),creator(Y.']

parsed: 
Result: chicago_cosenza(X,Z):-chicago(X,Y,_),cosenza(Y,Z),not chicago(X,_,butterfly).

jaccard: 0.0


345
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "cloud" as the transitive closure of predicate "weight". Then, assign exactly one label from the set roof,butterfly,storm,laptop,chair,desk,wall to each element in "cloud".

answer from file: 
cloud(X,Y):-weight(X,Y).
cloud(X,Y):-weight(X,Z),cloud(Z,Y).
assign(X,"roof")|assign(X,"butterfly")|assign(X,"storm")|assign(X,"laptop")|assign(X,"chair")|assign(X,"desk")|assign(X,"wall"):-cloud(X,_).

facts: 
weight(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "cloud" as the transitive closure of predicate "weight". Then, assign exactly one label from the set roof,butterfly,storm,laptop,chair,desk,wall to each element in "cloud".
Answer: cloud(X,Y):-weight(X,Y).
cloud(X,Y):-weight(X,Z),cloud(Z,Y).
assign(X,"roof")|assign(X," arrivant")|assign(X,"height")|assign(X,"shape")|assign(X,"price")|assign(X,"age")|assign(X,"description")|assign(X,"city"):-cloud(X,_).
retum:assign(X,"description").
retum:assign(X,"city").
retum:assign(X,"description").
retum:assign(X,"price").
retum:assign(X,"age").
retum:assign(X,"description").

unique_rules: 
['cloud(X,Y):-weight(X,Y).', 'cloud(X,Y):-weight(X,Z),cloud(Z,Y).', 'assign(X,"roof")|assign(X," arrivant")|assign(X,"height")|assign(X,"shape")|assign(X,"price")|assign(X,"age")|assign(X,"description")|assign(X,"city"):-cloud(X,_).']

parsed: 
cloud(X,Y):-weight(X,Y).
cloud(X,Y):-weight(X,Z),cloud(Z,Y).
assign(X,"roof")|assign(X," arrivant")|assign(X,"height")|assign(X,"shape")|assign(X,"price")|assign(X,"age")|assign(X,"description")|assign(X,"city"):-cloud(X,_).

jaccard: 0.0


346
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are butterfly,roof,wall,cloud. Consider only the predicate lake not associated with label "butterfly".

answer from file: 
assign(X,"butterfly")|assign(X,"roof")|assign(X,"wall")|assign(X,"cloud"):-lake(X, _), not lake(X, butterfly).

facts: 
lake(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are butterfly,roof,wall,cloud. Consider only the predicate lake not associated with label "butterfly".
Answer: assign(X," plais")|assign(X,"rome")|assign(X,"city")|assign(X,"height")|assign(X,"description")==>lake(X, _), not lake(X, butterfly).
retum(X, Y):-assign(X, Y).
retum(X, Y):-assign(X, _), not lake(X, Y).
retum(X, Y):-assign(X, Y), _>.
retum(X, Y):-assign(X, Y), description.
retum(X, Y):-assign(X, Y), height.
retum(X, Y):-assign(X, Y), description, height.
retum(X

unique_rules: 
['retum(X, Y):-assign(X, Y).', 'retum(X, Y):-assign(X, _), not lake(X, Y).', 'retum(X, Y):-assign(X, Y), _>.', 'retum(X, Y):-assign(X, Y), description.', 'retum(X, Y):-assign(X, Y), height.', 'retum(X, Y):-assign(X, Y), description, height.']

parsed: 
retum(X, Y):-assign(X, Y).

jaccard: 0.0


347
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate pink and labels lake, hair having label hair different than 23. The labels are laptop,storm,chair,desk,flower,cloud,butterfly,roof.

answer from file: 
assign(X,"laptop")|assign(X,"storm")|assign(X,"chair")|assign(X,"desk")|assign(X,"flower")|assign(X,"cloud")|assign(X,"butterfly")|assign(X,"roof"):-pink(X, Y), Y!=23 .

facts: 
pink(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate pink and labels lake, hair having label hair different than 23. The labels are laptop,storm,chair,desk,flower,cloud,butterfly,roof.
Answer: assign(X," arrivant")|assign(X," peines")|assign(X,"height")|assign(X,"creator")|assign(X,"age")|assign(X,"name")|assign(X,"city")|assign(X,"description")|assign(X,"price")|assign(X,"author")|assign(X,"height")|retum(X, Y), Y!=23 .
 köp(X, Y), Y!=23 .
Definition: assign(X, "creator")|assign(X, "age")|assign(X, "description")|retum(X, Y), Y!=23 .
 köp(X, Y), Y==

unique_rules: 
[]

parsed: 


jaccard: 0.0


348
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate pink. The labels are chair,cloud,wall,roof,butterfly.  Then, filter and return only the elements assigned to label cloud.".

answer from file: 
assign(X,"chair")|assign(X,"cloud")|assign(X,"wall")|assign(X,"roof")|assign(X,"butterfly"):-pink(X).
select(X):-assign(X, "cloud").

facts: 
pink(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate pink. The labels are chair,cloud,wall,roof,butterfly.  Then, filter and return only the elements assigned to label cloud.".
Answer: assign(X,"chair")|assign(X,"cloud")|assign(X,"wall")|assign(X,"roof")|assign(X," épar").
select(X):-assign(X, "cloud").
retum(X):-assign(X, "cloud").
```
Assign(X,"chair")|Assign(X,"cloud")|Assign(X,"wall")|Assign(X,"roof")|Assign(X," épar"):-pink(X).
select(X):-assign(X, "cloud").
retum(X):-assign(X, "cloud").
```

unique_rules: 
['select(X):-assign(X, "cloud").', 'retum(X):-assign(X, "cloud").', 'Assign(X,"chair")|Assign(X,"cloud")|Assign(X,"wall")|Assign(X,"roof")|Assign(X," épar"):-pink(X).']

parsed: 
select(X):-assign(X, "cloud").
retum(X):-assign(X, "cloud").

jaccard: 0.0


349
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "chair" and "butterfly". However, avoid any combination where predicate "chair" has label "laptop".

answer from file: 
combination(X,Y):-chair(X, _),butterfly(Y), not chair(X, laptop).

facts: 
chair(1..4, 1..4).butterfly(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "chair" and "butterfly". However, avoid any combination where predicate "chair" has label "laptop".
Answer: combination(X,Y):-chair(X, _),butterfly(Y), not chair(X, laptop).
combination(X,Y):-chair(X, _),moto(Y).
combination(X,Y):-chair(X, _),age(Y).
combination(X,Y):-moto(X), age(Y).
combination(X,Y):-moto(X),description(Y).
combination(X,Y):-moto(X),city(Y).
retum(X,Y):-combination(X, Y).
retum(X,Y):-combination(X, Y),description(Z), not age(Z).
retum(X,Y):-description(X

unique_rules: 
['combination(X,Y):-chair(X, _),butterfly(Y), not chair(X, laptop).', 'combination(X,Y):-chair(X, _),moto(Y).', 'combination(X,Y):-chair(X, _),age(Y).', 'combination(X,Y):-moto(X), age(Y).', 'combination(X,Y):-moto(X),description(Y).', 'combination(X,Y):-moto(X),city(Y).', 'retum(X,Y):-combination(X, Y).', 'retum(X,Y):-combination(X, Y),description(Z), not age(Z).', 'retum(X,Y):-description(X.']

parsed: 
combination(X,Y):-chair(X, _),butterfly(Y), not chair(X, laptop).

jaccard: 1.0


350
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "roof" having fields "ID","lake","lakeID", and the predicate "lake" having fields "ID","strength". Define a predicate "roof_lake" that associates to each "roof" the "strength" of "lake" only where "strength" is different than 20.

answer from file: 
roof_lake(X,Z):-roof(X,_,Y),lake(Y,Z), Z!=20.

facts: 
roof("ID","lake","lakeID").lake("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "roof" having fields "ID","lake","lakeID", and the predicate "lake" having fields "ID","strength". Define a predicate "roof_lake" that associates to each "roof" the "strength" of "lake" only where "strength" is different than 20.
Answer: roof_lake(X,Z):-roof(X,_,Y),lake(Y,Z), Z!=20.
 ángulo(X,Y):-roof(X,Y,_),lake(Y,Z), Z==20.
 ángulo(X,Y):-roof(X,_,Y),lake(Y,Z), Z!=18.
 ángulo(X,Y):-roof(X,_,Y),lake(Y,Z), Z==19.
 ángulo(X,Y):-roof(X,_,Y),lake(Y,Z), Z==17.
 ángulo(X,Y):-roof(X,_,Y),lake(

unique_rules: 
['roof_lake(X,Z):-roof(X,_,Y),lake(Y,Z), Z!=20.', 'ángulo(X,Y):-roof(X,Y,_),lake(Y,Z), Z==20.', 'ángulo(X,Y):-roof(X,_,Y),lake(Y,Z), Z!=18.', 'ángulo(X,Y):-roof(X,_,Y),lake(Y,Z), Z==19.', 'ángulo(X,Y):-roof(X,_,Y),lake(Y,Z), Z==17.', 'ángulo(X,Y):-roof(X,_,Y),lake(.']

parsed: 
roof_lake(X,Z):-roof(X,_,Y),lake(Y,Z), Z!=20.

jaccard: 1.0


351
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "barcelona" having fields "ID","strengthID","quality", and the predicate "strength" having fields "ID","hair". Define a predicate "barcelona_strength" that associates to each "barcelona", not associated with label "chair", the attribute "hair" of "strength".

answer from file: 
barcelona_strength(X,Z):-barcelona(X,Y,_),strength(Y,Z),not barcelona(X,_,chair).

facts: 
barcelona("ID","strengthID","quality").strength("ID","hair").

generated: 
Write an ASP program for the following problem. Consider predicate "barcelona" having fields "ID","strengthID","quality", and the predicate "strength" having fields "ID","hair". Define a predicate "barcelona_strength" that associates to each "barcelona", not associated with label "chair", the attribute "hair" of "strength".
Answer: barcelona_strength(X,Z):-barcelona(X,Y,_),strength(Y,Z),not barcelona(X,_,chair).
 ángulo_strength(X,Z):-barcelona(X,Y,_), ángulo(Y,Z).
 ángulo_strength(X,Z):-barcelona(X,_,chair), ángulo(Y,Z).
 ángulo_strength(X,Z):-shangai(X,Z).
 ángulo_strength(X,Z):-shangai(X,Z),city(X,_,name).
 ángulo_strength(X,Z):-shangai(X,Z),city(X,_,description).
 ángulo_strength

unique_rules: 
['barcelona_strength(X,Z):-barcelona(X,Y,_),strength(Y,Z),not barcelona(X,_,chair).', 'ángulo_strength(X,Z):-barcelona(X,Y,_), ángulo(Y,Z).', 'ángulo_strength(X,Z):-barcelona(X,_,chair), ángulo(Y,Z).', 'ángulo_strength(X,Z):-shangai(X,Z).', 'ángulo_strength(X,Z):-shangai(X,Z),city(X,_,name).', 'ángulo_strength(X,Z):-shangai(X,Z),city(X,_,description).']

parsed: 
barcelona_strength(X,Z):-barcelona(X,Y,_),strength(Y,Z),not barcelona(X,_,chair).

jaccard: 1.0


352
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "chicago" as the transitive closure of predicate "darkmagenta". Then, assign exactly one label from the set flower,chair,storm,wall,butterfly to each element in "chicago".

answer from file: 
chicago(X,Y):-darkmagenta(X,Y).
chicago(X,Y):-darkmagenta(X,Z),chicago(Z,Y).
assign(X,"flower")|assign(X,"chair")|assign(X,"storm")|assign(X,"wall")|assign(X,"butterfly"):-chicago(X,_).

facts: 
darkmagenta(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "chicago" as the transitive closure of predicate "darkmagenta". Then, assign exactly one label from the set flower,chair,storm,wall,butterfly to each element in "chicago".
Answer: chicago(X,Y):-darkmagenta(X,Y).
chicago(X,Y):-darkmagenta(X,Z),chicago(Z,Y).
assign(X,"flower")|assign(X,"chair")|assign(X,"storm")|assign(X,"wall")|assign(X," arrivant") :-chicago(X,_).
retum(X,Y):-chicago(X,Y).
retum(X,Y):-chicago(X,Z),retum(Z,Y).
retum(X,Y):-chicago(X,Z),retum(Z,Y).
retum(X,Y):-chicago(X,Z),retum(Z,Y).
retum

unique_rules: 
['chicago(X,Y):-darkmagenta(X,Y).', 'chicago(X,Y):-darkmagenta(X,Z),chicago(Z,Y).', 'assign(X,"flower")|assign(X,"chair")|assign(X,"storm")|assign(X,"wall")|assign(X," arrivant") :-chicago(X,_).', 'retum(X,Y):-chicago(X,Y).', 'retum(X,Y):-chicago(X,Z),retum(Z,Y).']

parsed: 
chicago(X,Y):-darkmagenta(X,Y).
chicago(X,Y):-darkmagenta(X,Z),chicago(Z,Y).
assign(X,"flower")|assign(X,"chair")|assign(X,"storm")|assign(X,"wall")|assign(X," arrivant") :-chicago(X,_).

jaccard: 0.0


353
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate darkmagenta. The labels are butterfly,storm,chair,roof,flower,laptop,cloud. Consider only the predicate darkmagenta not associated with label "wall".

answer from file: 
assign(X,"butterfly")|assign(X,"storm")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"laptop")|assign(X,"cloud"):-darkmagenta(X, _), not darkmagenta(X, wall).

facts: 
darkmagenta(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate darkmagenta. The labels are butterfly,storm,chair,roof,flower,laptop,cloud. Consider only the predicate darkmagenta not associated with label "wall".
Answer: assign(X," épar")|assign(X,"florence")|assign(X,"height")|assign(X,"price")|assign(X,"author")|assign(X,"city")|assign(X,"description")|assign(X,"name")|assign(X,"age")|retum(X, Y), Y!=wall .
assign(X, "darkmagenta")
retum(X, Y), Y!=wall .
 köp(X, Y), Y!=wall .
retum(X, Y), Y!=wall .
 kollektive(X, Y), Y!=wall .
 kollektive(X, Y), Y!=wall .
retum(X, Y),

unique_rules: 
[]

parsed: 


jaccard: 0.0


354
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate lake and labels owner, quality having label quality different than 2. The labels are flower,cloud,butterfly,wall,desk,chair,storm.

answer from file: 
assign(X,"flower")|assign(X,"cloud")|assign(X,"butterfly")|assign(X,"wall")|assign(X,"desk")|assign(X,"chair")|assign(X,"storm"):-lake(X, Y), Y!=2 .

facts: 
lake(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate lake and labels owner, quality having label quality different than 2. The labels are flower,cloud,butterfly,wall,desk,chair,storm.
Answer: assign(X,"flower")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"wall")|assign(X,"desk")|assign(X,"chair")|assign(X,"storm"):-lake(X, Y), Y!=2 .
```
Assign(X,"florence")|Assign(X,"cloud")|Assign(X," arrivant")|Assign(X,"wall")|Assign(X,"desk")|Assign(X,"chair")|Assign(X,"storm"):-lake(X, Y), Y!=2 .
```

unique_rules: 
['assign(X,"flower")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"wall")|assign(X,"desk")|assign(X,"chair")|assign(X,"storm"):-lake(X, Y), Y!=2 .', 'Assign(X,"florence")|Assign(X,"cloud")|Assign(X," arrivant")|Assign(X,"wall")|Assign(X,"desk")|Assign(X,"chair")|Assign(X,"storm"):-lake(X, Y), Y!=2 .']

parsed: 
assign(X,"flower")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"wall")|assign(X,"desk")|assign(X,"chair")|assign(X,"storm"):-lake(X, Y), Y!=2 .

jaccard: 1.0


355
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lightblue. The labels are roof,butterfly.  Then, filter and return only the elements assigned to label roof.".

answer from file: 
assign(X,"roof")|assign(X,"butterfly"):-lightblue(X).
select(X):-assign(X, "roof").

facts: 
lightblue(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lightblue. The labels are roof,butterfly.  Then, filter and return only the elements assigned to label roof.".
Answer: assign(X," felicità")|assign(X,"author")|retum(X, " felicità").
select(X):-assign(X, " felicità").
retum(X, " felicità").
 köp: for(X in lightblue) do assign(X, " felicità").
select(X):-assign(X, " felicità").
retum(X, " felicità").
 quíntu(X, " felicità").
retum(X, " felicità").
 quíntu(X, "author").
retum(X, " felicità").
 quíntu(X, "city").
retum(X, "city").
 quíntu(X, "description").
retum(X, "description").

unique_rules: 
['select(X):-assign(X, " felicità").']

parsed: 
select(X):-assign(X, " felicità").

jaccard: 0.0


356
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "darkmagenta" and "pink". However, avoid any combination where predicate "darkmagenta" has label "roof".

answer from file: 
combination(X,Y):-darkmagenta(X, _),pink(Y), not darkmagenta(X, roof).

facts: 
darkmagenta(1..4, 1..4).pink(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "darkmagenta" and "pink". However, avoid any combination where predicate "darkmagenta" has label "roof".
Answer: combination(X,Y):-darkmagenta(X, _),pink(Y), not darkmagenta(X, roof).
combination(X,Y):-darkmagenta(X, _),pink(Y).
combination(X,Y):-darkmagenta(X, _),pink(Y), label("object").
assign(X, Y)
retum(X, Y).
retum(X, Y), label("object").
retum(X, Y), label("price").
retum(X, Y), label("description").
retum(X, Y), label("height").
retum(X, Y), label("age").
retum(X, Y), label("shape").
retum

unique_rules: 
['combination(X,Y):-darkmagenta(X, _),pink(Y), not darkmagenta(X, roof).', 'combination(X,Y):-darkmagenta(X, _),pink(Y).', 'combination(X,Y):-darkmagenta(X, _),pink(Y), label("object").']

parsed: 
combination(X,Y):-darkmagenta(X, _),pink(Y), not darkmagenta(X, roof).

jaccard: 1.0


357
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "white" having fields "ID","lake","roofID", and the predicate "roof" having fields "ID","surname". Define a predicate "white_roof" that associates to each "white" the "surname" of "roof" only where "surname" is different than 8.

answer from file: 
white_roof(X,Z):-white(X,_,Y),roof(Y,Z), Z!=8.

facts: 
white("ID","lake","roofID").roof("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "white" having fields "ID","lake","roofID", and the predicate "roof" having fields "ID","surname". Define a predicate "white_roof" that associates to each "white" the "surname" of "roof" only where "surname" is different than 8.
Answer: white_roof(X,Z):-white(X,_,Y),roof(Y,Z), Z!=8.
white_roof(X,_,Y):-white(X,_,Y),roof(Y,Z), Z==8.
retum(X,Y):-white_roof(X,_,Y).
retum(X,_,Y):-white(X,_,Y),roof(Y,Z), Z==8.
retum(X,_,Y):-white(X,_,Y),roof(Y,Z), Z==7.
retum(X,_,Y):-white(X,_,Y),roof(Y,Z), Z==6.
retum(X

unique_rules: 
['white_roof(X,Z):-white(X,_,Y),roof(Y,Z), Z!=8.', 'white_roof(X,_,Y):-white(X,_,Y),roof(Y,Z), Z==8.', 'retum(X,Y):-white_roof(X,_,Y).', 'retum(X,_,Y):-white(X,_,Y),roof(Y,Z), Z==8.', 'retum(X,_,Y):-white(X,_,Y),roof(Y,Z), Z==7.', 'retum(X,_,Y):-white(X,_,Y),roof(Y,Z), Z==6.']

parsed: 
white_roof(X,Z):-white(X,_,Y),roof(Y,Z), Z!=8.

jaccard: 1.0


358
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "roof" having fields "ID","surname","stormID", and the predicate "storm" having fields "ID","hair". Define a predicate "roof_storm" that associates to each "roof", not associated with label "laptop", the attribute "hair" of "storm".

answer from file: 
roof_storm(X,Z):-roof(X,_,Y),storm(Y,Z),not roof(X,laptop,_).

facts: 
roof("ID","surname","stormID").storm("ID","hair").

generated: 
Write an ASP program for the following problem. Consider predicate "roof" having fields "ID","surname","stormID", and the predicate "storm" having fields "ID","hair". Define a predicate "roof_storm" that associates to each "roof", not associated with label "laptop", the attribute "hair" of "storm".
Answer: roof_storm(X,Z):-roof(X,_,Y),storm(Y,Z),not roof(X,laptop,_).
roof_storm(X,Z):-roof(X,_,Y),name(Y,Z),not roof(X,_,_),shape(X,Z).
assign(X,"name")|assign(X,"shape")|assign(X,"height"):-roof_storm(X,Z).
retum(X,Z),not roof(X,_,_).
retum(X,_,Y),name(Y,Z),not roof(X,_,_),shape(X,Z).
retum(X,_,Y),name(Y

unique_rules: 
['roof_storm(X,Z):-roof(X,_,Y),storm(Y,Z),not roof(X,laptop,_).', 'roof_storm(X,Z):-roof(X,_,Y),name(Y,Z),not roof(X,_,_),shape(X,Z).', 'assign(X,"name")|assign(X,"shape")|assign(X,"height"):-roof_storm(X,Z).']

parsed: 
roof_storm(X,Z):-roof(X,_,Y),storm(Y,Z),not roof(X,laptop,_).

jaccard: 1.0


359
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "cloud" as the transitive closure of predicate "cairo". Then, assign exactly one label from the set chair,butterfly,cloud,flower,wall,laptop,desk,storm to each element in "cloud".

answer from file: 
cloud(X,Y):-cairo(X,Y).
cloud(X,Y):-cairo(X,Z),cloud(Z,Y).
assign(X,"chair")|assign(X,"butterfly")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall")|assign(X,"laptop")|assign(X,"desk")|assign(X,"storm"):-cloud(X,_).

facts: 
cairo(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "cloud" as the transitive closure of predicate "cairo". Then, assign exactly one label from the set chair,butterfly,cloud,flower,wall,laptop,desk,storm to each element in "cloud".
Answer: cloud(X,Y):-cairo(X,Y).
cloud(X,Y):-cairo(X,Z),cloud(Z,Y).
assign(X,"chair")|assign(X," arrivant")|assign(X,"height")|assign(X,"city")|assign(X,"name")|assign(X,"age")|assign(X,"description")|assign(X,"author"):-cloud(X,_).
retum:assign(X,"description").
retum:assign(X,"author").
retum:assign(X,"description").
retum:assign(X,"author").
retum:assign(X,"description").
retum:assign(X,"author").

unique_rules: 
['cloud(X,Y):-cairo(X,Y).', 'cloud(X,Y):-cairo(X,Z),cloud(Z,Y).', 'assign(X,"chair")|assign(X," arrivant")|assign(X,"height")|assign(X,"city")|assign(X,"name")|assign(X,"age")|assign(X,"description")|assign(X,"author"):-cloud(X,_).']

parsed: 
cloud(X,Y):-cairo(X,Y).
cloud(X,Y):-cairo(X,Z),cloud(Z,Y).
assign(X,"chair")|assign(X," arrivant")|assign(X,"height")|assign(X,"city")|assign(X,"name")|assign(X,"age")|assign(X,"description")|assign(X,"author"):-cloud(X,_).

jaccard: 0.0


360
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate hair. The labels are chair,storm,desk. Consider only the predicate hair not associated with label "storm".

answer from file: 
assign(X,"chair")|assign(X,"storm")|assign(X,"desk"):-hair(X, _), not hair(X, storm).

facts: 
hair(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate hair. The labels are chair,storm,desk. Consider only the predicate hair not associated with label "storm".
Answer: assign(X,"chair")|assign(X,"storm")|assign(X,"desk"):-hair(X, _), not hair(X, storm).
``` italienne
assign(X,"chair")|assign(X,"storm")|assign(X,"desk"):-hair(X, _), not hair(X, storm).
```

unique_rules: 
['assign(X,"chair")|assign(X,"storm")|assign(X,"desk"):-hair(X, _), not hair(X, storm).']

parsed: 
assign(X,"chair")|assign(X,"storm")|assign(X,"desk"):-hair(X, _), not hair(X, storm).

jaccard: 1.0


361
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate chair and labels hair, owner having label owner different than 52. The labels are wall,storm.

answer from file: 
assign(X,"wall")|assign(X,"storm"):-chair(X, Y), Y!=52 .

facts: 
chair(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate chair and labels hair, owner having label owner different than 52. The labels are wall,storm.
Answer: assign(X,"wall")|assign(X,"storm"):-chair(X, Y), Y!=52 .
assign(X,"wall")|assign(X,"storm"):-chair(X, Y), Y==52 .
 köp.
``` köp:assign(X,"wall")|assign(X,"storm"):-chair(X, Y), Y!=52 .
 köp:assign(X,"wall")|assign(X,"storm"):-chair(X, Y), Y==52 .
```

unique_rules: 
['assign(X,"wall")|assign(X,"storm"):-chair(X, Y), Y!=52 .', 'assign(X,"wall")|assign(X,"storm"):-chair(X, Y), Y==52 .', 'köp:assign(X,"wall")|assign(X,"storm"):-chair(X, Y), Y!=52 .', 'köp:assign(X,"wall")|assign(X,"storm"):-chair(X, Y), Y==52 .']

parsed: 
assign(X,"wall")|assign(X,"storm"):-chair(X, Y), Y!=52 .

jaccard: 1.0


362
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate cairo. The labels are roof,storm,wall,flower,butterfly,cloud,laptop,desk.  Then, filter and return only the elements assigned to label wall.".

answer from file: 
assign(X,"roof")|assign(X,"storm")|assign(X,"wall")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"cloud")|assign(X,"laptop")|assign(X,"desk"):-cairo(X).
select(X):-assign(X, "wall").

facts: 
cairo(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate cairo. The labels are roof,storm,wall,flower,butterfly,cloud,laptop,desk.  Then, filter and return only the elements assigned to label wall.".
Answer: assign(X," felicità")|assign(X,"price")|assign(X,"city")|assign(X,"author")|assign(X,"description")|assign(X,"age")|assign(X,"name")|assign(X,"shape")|retum(X, "wall").
select(X):-assign(X, "wall").
```
The predicate cairo has label "description", and the label "description" has label "shape". So, the predicate select returns only the elements assigned to label "description".
Note: The predicate "description" has label "shape", but the label "shape" has label "description". So, the predicate select returns only the elements assigned

unique_rules: 
['select(X):-assign(X, "wall").']

parsed: 
select(X):-assign(X, "wall").

jaccard: 0.0


363
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "delhi" and "lightblue". However, avoid any combination where predicate "delhi" has label "laptop".

answer from file: 
combination(X,Y):-delhi(X, _),lightblue(Y), not delhi(X, laptop).

facts: 
delhi(1..4, 1..4).lightblue(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "delhi" and "lightblue". However, avoid any combination where predicate "delhi" has label "laptop".
Answer: combination(X,Y):-delhi(X, _),lightblue(Y), not delhi(X, _).
combination(X,Y):-delhi(X, _),lightblue(Y).
combination(X,Y):-delhi(X, _),lightblue(Y), label("moto").
assign(X, Y)
retum(X, Y).
retum(X, Y), label("moto").
retum(X, Y), label("age").
retum(X, Y), label("height").
retum(X, Y), label("price").
retum(X, Y), label("description").
retum(X, Y), label("city").

unique_rules: 
['combination(X,Y):-delhi(X, _),lightblue(Y), not delhi(X, _).', 'combination(X,Y):-delhi(X, _),lightblue(Y).', 'combination(X,Y):-delhi(X, _),lightblue(Y), label("moto").']

parsed: 
combination(X,Y):-delhi(X, _),lightblue(Y), not delhi(X, _).

jaccard: 0.0


364
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "desk" having fields "ID","cairoID","strength", and the predicate "cairo" having fields "ID","hair". Define a predicate "desk_cairo" that associates to each "desk" the "hair" of "cairo" only where "hair" is different than 56.

answer from file: 
desk_cairo(X,Z):-desk(X,Y,_),cairo(Y,Z), Z!=56.

facts: 
desk("ID","cairoID","strength").cairo("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "desk" having fields "ID","cairoID","strength", and the predicate "cairo" having fields "ID","hair". Define a predicate "desk_cairo" that associates to each "desk" the "hair" of "cairo" only where "hair" is different than 56.
Answer: desk_cairo(X,Z):-desk(X,Y,_),cairo(Y,Z), Z!=56.
 espressione(X,Z):-desk(X,Y,_),car(Y,Z), Z!=56.
 espressione(X,Z):-desk(X,Y,_),car(Y,Z), Z==56.
 assurent(X,Z):-desk(X,Y,_),car(Y,Z), Z==56.
car(X,Z):-desk(X,Y,_),car(Y,Z), Z==56.
car(X,Z):-desk(X,Y,_),car(Y,Z), Z

unique_rules: 
['desk_cairo(X,Z):-desk(X,Y,_),cairo(Y,Z), Z!=56.', 'espressione(X,Z):-desk(X,Y,_),car(Y,Z), Z!=56.', 'espressione(X,Z):-desk(X,Y,_),car(Y,Z), Z==56.', 'assurent(X,Z):-desk(X,Y,_),car(Y,Z), Z==56.', 'car(X,Z):-desk(X,Y,_),car(Y,Z), Z==56.', 'car(X,Z):-desk(X,Y,_),car(Y,Z), Z.']

parsed: 
desk_cairo(X,Z):-desk(X,Y,_),cairo(Y,Z), Z!=56.

jaccard: 1.0


365
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "chicago" having fields "ID","lakeID","weight", and the predicate "lake" having fields "ID","hair". Define a predicate "chicago_lake" that associates to each "chicago", not associated with label "cloud", the attribute "hair" of "lake".

answer from file: 
chicago_lake(X,Z):-chicago(X,Y,_),lake(Y,Z),not chicago(X,_,cloud).

facts: 
chicago("ID","lakeID","weight").lake("ID","hair").

generated: 
Write an ASP program for the following problem. Consider predicate "chicago" having fields "ID","lakeID","weight", and the predicate "lake" having fields "ID","hair". Define a predicate "chicago_lake" that associates to each "chicago", not associated with label "cloud", the attribute "hair" of "lake".
Result: chicago_lake(X,Z):-chicago(X,Y,_),lake(Y,Z),not chicago(X,_,cloud).
 ángulo(X,Y,Z):-chicago(X,Y,_),lake(Y,Z).
 ángulo(X,_,cloud):-chicago(X,_,cloud).
 ángulo(X,_,_):-chicago(X,_,_),lake(Y,Z).
 ángulo(X,_,cloud),Z,Y.
 ángulo(X,_,cloud),Z,_,_:-chicago(X,_,cloud).
 ángulo(X,_,cloud),Z,_,_,_:-chicago(X,_,cloud).
 kollek

unique_rules: 
['Result: chicago_lake(X,Z):-chicago(X,Y,_),lake(Y,Z),not chicago(X,_,cloud).', 'ángulo(X,Y,Z):-chicago(X,Y,_),lake(Y,Z).', 'ángulo(X,_,cloud):-chicago(X,_,cloud).', 'ángulo(X,_,_):-chicago(X,_,_),lake(Y,Z).', 'ángulo(X,_,cloud),Z,_,_:-chicago(X,_,cloud).', 'ángulo(X,_,cloud),Z,_,_,_:-chicago(X,_,cloud).']

parsed: 
Result: chicago_lake(X,Z):-chicago(X,Y,_),lake(Y,Z),not chicago(X,_,cloud).

jaccard: 0.0


366
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "cloud" as the transitive closure of predicate "moscow". Then, assign exactly one label from the set desk,cloud,wall,laptop,flower to each element in "cloud".

answer from file: 
cloud(X,Y):-moscow(X,Y).
cloud(X,Y):-moscow(X,Z),cloud(Z,Y).
assign(X,"desk")|assign(X,"cloud")|assign(X,"wall")|assign(X,"laptop")|assign(X,"flower"):-cloud(X,_).

facts: 
moscow(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "cloud" as the transitive closure of predicate "moscow". Then, assign exactly one label from the set desk,cloud,wall,laptop,flower to each element in "cloud".
Answer: cloud(X,Y):-moscow(X,Y).
cloud(X,Y):-moscow(X,Z),cloud(Z,Y).
assign(X,"desk")|assign(X,"cloud")|assign(X,"wall")|assign(X,"laptop")|assign(X,"flower"):-cloud(X,_).
retum_ politika(X,Y):-cloud(X,Y).
retum_ politika(X,Y):-cloud(X,Z),retum_ politika(Z,Y).
retum_ politika(X,Y):-cloud(X,Z),retum_ politika(Z,Y).
retum_ politika(X,Y):-cloud(X

unique_rules: 
['cloud(X,Y):-moscow(X,Y).', 'cloud(X,Y):-moscow(X,Z),cloud(Z,Y).', 'assign(X,"desk")|assign(X,"cloud")|assign(X,"wall")|assign(X,"laptop")|assign(X,"flower"):-cloud(X,_).', 'retum_ politika(X,Y):-cloud(X,Y).', 'retum_ politika(X,Y):-cloud(X,Z),retum_ politika(Z,Y).', 'retum_ politika(X,Y):-cloud(X.']

parsed: 
cloud(X,Y):-moscow(X,Y).
cloud(X,Y):-moscow(X,Z),cloud(Z,Y).
assign(X,"desk")|assign(X,"cloud")|assign(X,"wall")|assign(X,"laptop")|assign(X,"flower"):-cloud(X,_).

jaccard: 1.0


367
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate laptop. The labels are roof,storm. Consider only the predicate laptop not associated with label "roof".

answer from file: 
assign(X,"roof")|assign(X,"storm"):-laptop(X, _), not laptop(X, roof).

facts: 
laptop(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate laptop. The labels are roof,storm. Consider only the predicate laptop not associated with label "roof".
Answer: assign(X," felicità")|assign(X,"price")|assign(X,"city")|assign(X,"name")|assign(X,"age")|assign(X,"author")|assign(X,"description")|assign(X,"height")|retum(X), not label " felicità".
 köp(X, Y), Y!= felicità.
```
 köp(X, Y), Y!= felicità.
assign(X, " felicità")|assign(X, "price")|assign(X, "city")|assign(X, "name")|assign(X, "age")|assign(X, "author")|assign(X, "description")|assign

unique_rules: 
[]

parsed: 


jaccard: 0.0


368
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate laptop and labels surname, lake having label lake different than 54. The labels are storm,butterfly,desk,flower,cloud,wall.

answer from file: 
assign(X,"storm")|assign(X,"butterfly")|assign(X,"desk")|assign(X,"flower")|assign(X,"cloud")|assign(X,"wall"):-laptop(X, Y), Y!=54 .

facts: 
laptop(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate laptop and labels surname, lake having label lake different than 54. The labels are storm,butterfly,desk,flower,cloud,wall.
Answer: assign(X," peines")|assign(X,"florence")|assign(X,"city")|assign(X,"author")|assign(X,"description")|assign(X,"name")|assign(X,"price")|assign(X,"age")|assign(X,"city"), X, Y), Y!=54 .
```
The predicate "moto" has label "description", and the predicate "florence" has label "price".
So, the predicate "assign" has label "description" only where "description" is different than 54.
The predicate "assign" has label "price" only where "price" is lower than 54.
The

unique_rules: 
[]

parsed: 


jaccard: 0.0


369
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate flower. The labels are cloud,roof.  Then, filter and return only the elements assigned to label cloud.".

answer from file: 
assign(X,"cloud")|assign(X,"roof"):-flower(X).
select(X):-assign(X, "cloud").

facts: 
flower(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate flower. The labels are cloud,roof.  Then, filter and return only the elements assigned to label cloud.".
Answer: assign(X,"cloud")|assign(X,"roof"):-flower(X).
select(X):-assign(X, "cloud").
```
Assign(X,"cloud")|Assign(X,"roof"):-flower(X).
select(X):-assign(X, "cloud").
retum(X).
```

unique_rules: 
['assign(X,"cloud")|assign(X,"roof"):-flower(X).', 'select(X):-assign(X, "cloud").', 'Assign(X,"cloud")|Assign(X,"roof"):-flower(X).']

parsed: 
assign(X,"cloud")|assign(X,"roof"):-flower(X).
select(X):-assign(X, "cloud").

jaccard: 1.0


370
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "storm" and "mumbai". However, avoid any combination where predicate "storm" has label "butterfly".

answer from file: 
combination(X,Y):-storm(X, _),mumbai(Y), not storm(X, butterfly).

facts: 
storm(1..4, 1..4).mumbai(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "storm" and "mumbai". However, avoid any combination where predicate "storm" has label "butterfly".
Answer: combination(X,Y):-storm(X, _),mumbai(Y), not storm(X, butterfly).
combination(X,Y):-storm(X, _),mumbai(Y).
assign(X, Y)
combination(X, Y).
retum.
 ángulo(X, Y):-combination(X, Y).
 ángulo(X, Y):-combination(X, Y), shape(X, Y).
 ángulo(X, Y):-combination(X, Y), price(X, Y).
 ángulo(X, Y):-combination(X, Y), description(X, Y).
 ángulo(X, Y):-combination(X, Y),

unique_rules: 
['combination(X,Y):-storm(X, _),mumbai(Y), not storm(X, butterfly).', 'combination(X,Y):-storm(X, _),mumbai(Y).', 'ángulo(X, Y):-combination(X, Y).', 'ángulo(X, Y):-combination(X, Y), shape(X, Y).', 'ángulo(X, Y):-combination(X, Y), price(X, Y).', 'ángulo(X, Y):-combination(X, Y), description(X, Y).', 'ángulo(X, Y):-combination(X, Y),.']

parsed: 
combination(X,Y):-storm(X, _),mumbai(Y), not storm(X, butterfly).

jaccard: 1.0


371
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "lightblue" having fields "ID","singaporeID","surname", and the predicate "singapore" having fields "ID","weight". Define a predicate "lightblue_singapore" that associates to each "lightblue" the "weight" of "singapore" only where "weight" is different than 50.

answer from file: 
lightblue_singapore(X,Z):-lightblue(X,Y,_),singapore(Y,Z), Z!=50.

facts: 
lightblue("ID","singaporeID","surname").singapore("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "lightblue" having fields "ID","singaporeID","surname", and the predicate "singapore" having fields "ID","weight". Define a predicate "lightblue_singapore" that associates to each "lightblue" the "weight" of "singapore" only where "weight" is different than 50.
Answer: lightblue_singapore(X,Z):-lightblue(X,Y,_),singapore(Y,Z), Z!=50.
lightblue_singapore(X,Y,_):-lightblue(X,Y,_),singapore(Y,Z), Z==50.
assign(X," kollektive")|assign(X,"name")|assign(X,"price"):-lightblue_singapore(X,_,_).
retum(X,Y),Z!=50.
retum(X,_,Z),Z==50.
 quíname(X,Y,Z), Z!=50.
 quíname(X,_,Z), Z==

unique_rules: 
['lightblue_singapore(X,Z):-lightblue(X,Y,_),singapore(Y,Z), Z!=50.', 'lightblue_singapore(X,Y,_):-lightblue(X,Y,_),singapore(Y,Z), Z==50.', 'assign(X," kollektive")|assign(X,"name")|assign(X,"price"):-lightblue_singapore(X,_,_).']

parsed: 
lightblue_singapore(X,Z):-lightblue(X,Y,_),singapore(Y,Z), Z!=50.

jaccard: 1.0


372
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "owner" having fields "ID","quality","cloudID", and the predicate "cloud" having fields "ID","owner". Define a predicate "owner_cloud" that associates to each "owner", not associated with label "flower", the attribute "owner" of "cloud".

answer from file: 
owner_cloud(X,Z):-owner(X,_,Y),cloud(Y,Z),not owner(X,flower,_).

facts: 
owner("ID","quality","cloudID").cloud("ID","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "owner" having fields "ID","quality","cloudID", and the predicate "cloud" having fields "ID","owner". Define a predicate "owner_cloud" that associates to each "owner", not associated with label "flower", the attribute "owner" of "cloud".
Answer: owner_cloud(X,Z):-owner(X,_,Y),cloud(Y,Z),not owner(X,flower,_).
owner_cloud(X,Z):-owner(X,_,Y),cloud(Y,Z),label(X,flower).
assign(X,Z):-owner_cloud(X,Z).
retum(X,Z),not owner(X,flower,_).
retum(X,Z),label(X,city).
 quíname(X,Z),not owner(X,city,_).
 quíname(X,Z),label(X,description).
 quíname(X,Z),not owner(X,description,_).


unique_rules: 
['owner_cloud(X,Z):-owner(X,_,Y),cloud(Y,Z),not owner(X,flower,_).', 'owner_cloud(X,Z):-owner(X,_,Y),cloud(Y,Z),label(X,flower).', 'assign(X,Z):-owner_cloud(X,Z).']

parsed: 
owner_cloud(X,Z):-owner(X,_,Y),cloud(Y,Z),not owner(X,flower,_).

jaccard: 1.0


373
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "butterfly" as the transitive closure of predicate "pink". Then, assign exactly one label from the set chair,butterfly,laptop to each element in "butterfly".

answer from file: 
butterfly(X,Y):-pink(X,Y).
butterfly(X,Y):-pink(X,Z),butterfly(Z,Y).
assign(X,"chair")|assign(X,"butterfly")|assign(X,"laptop"):-butterfly(X,_).

facts: 
pink(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "butterfly" as the transitive closure of predicate "pink". Then, assign exactly one label from the set chair,butterfly,laptop to each element in "butterfly".
Answer: butterfly(X,Y):-pink(X,Y).
 écouter(X,Y):-pink(X,Y).
assign(X,"chair")|assign(X," arrivant")|assign(X,"height") :-butterfly(X,_).
assign(X,"height") :-florence(X,Y),shape(Y,Z),price(Z,X).
retum(X,Y):-florence(X,Y).
retum(X,Y):-florence(X,Y),shape(Y,Z),price(Z,X).
retum(X,Y):-florence(X,Y),shape(Y,Z),price(Z,X),height

unique_rules: 
['butterfly(X,Y):-pink(X,Y).', 'écouter(X,Y):-pink(X,Y).', 'assign(X,"chair")|assign(X," arrivant")|assign(X,"height") :-butterfly(X,_).', 'assign(X,"height") :-florence(X,Y),shape(Y,Z),price(Z,X).', 'retum(X,Y):-florence(X,Y).', 'retum(X,Y):-florence(X,Y),shape(Y,Z),price(Z,X).', 'retum(X,Y):-florence(X,Y),shape(Y,Z),price(Z,X),height.']

parsed: 
butterfly(X,Y):-pink(X,Y).
écouter(X,Y):-pink(X,Y).
assign(X,"chair")|assign(X," arrivant")|assign(X,"height") :-butterfly(X,_).

jaccard: 0.0


374
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate darkmagenta. The labels are chair,butterfly,cloud,flower,desk,roof,wall. Consider only the predicate darkmagenta not associated with label "flower".

answer from file: 
assign(X,"chair")|assign(X,"butterfly")|assign(X,"cloud")|assign(X,"flower")|assign(X,"desk")|assign(X,"roof")|assign(X,"wall"):-darkmagenta(X, _), not darkmagenta(X, flower).

facts: 
darkmagenta(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate darkmagenta. The labels are chair,butterfly,cloud,flower,desk,roof,wall. Consider only the predicate darkmagenta not associated with label "flower".
Answer: assign(X,"chair")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"desk")|assign(X,"roof")|assign(X,"wall"):-darkmagenta(X, _), not darkmagenta(X, flower).
```
assign(X,"city")|assign(X,"age")|assign(X,"name")|assign(X,"price"):-darkmagenta(X, _).
```
The predicate darkmagenta has label "name", and the predicate name has label "price". So, assign(X,"price")only where predicate darkmagenta has label "name".
The labels are city,

unique_rules: 
['assign(X,"chair")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"desk")|assign(X,"roof")|assign(X,"wall"):-darkmagenta(X, _), not darkmagenta(X, flower).', 'assign(X,"city")|assign(X,"age")|assign(X,"name")|assign(X,"price"):-darkmagenta(X, _).']

parsed: 
assign(X,"chair")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"desk")|assign(X,"roof")|assign(X,"wall"):-darkmagenta(X, _), not darkmagenta(X, flower).

jaccard: 1.0


375
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate lake and labels hair, owner having label owner different than 15. The labels are laptop,butterfly,wall,flower,storm,desk,cloud.

answer from file: 
assign(X,"laptop")|assign(X,"butterfly")|assign(X,"wall")|assign(X,"flower")|assign(X,"storm")|assign(X,"desk")|assign(X,"cloud"):-lake(X, Y), Y!=15 .

facts: 
lake(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate lake and labels hair, owner having label owner different than 15. The labels are laptop,butterfly,wall,flower,storm,desk,cloud.
Answer: assign(X," arrivant")|assign(X,"height")|assign(X,"city")|assign(X,"name")|assign(X,"age")|assign(X,"description")|assign(X,"price")|assign(X,"author")|assign(X,"city"), X, Y), Y!=15 .
 köp(X, Y), Y!=15 .
```
 köp(X, Y), Y!=15 .
assign(X," arrivant")|assign(X,"height")|assign(X,"city")|assign(X,"name")|assign(X,"age")|assign(X,"description")|assign(X,"price")|

unique_rules: 
[]

parsed: 


jaccard: 0.0


376
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate storm. The labels are roof,butterfly,chair,desk,laptop,storm,cloud,wall,flower.  Then, filter and return only the elements assigned to label roof.".

answer from file: 
assign(X,"roof")|assign(X,"butterfly")|assign(X,"chair")|assign(X,"desk")|assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud")|assign(X,"wall")|assign(X,"flower"):-storm(X).
select(X):-assign(X, "roof").

facts: 
storm(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate storm. The labels are roof,butterfly,chair,desk,laptop,storm,cloud,wall,flower.  Then, filter and return only the elements assigned to label roof.".
Answer: assign(X," felicità")|assign(X,"author")|assign(X,"city")|assign(X,"description")|assign(X,"price")|assign(X,"age")|assign(X,"name")|assign(X,"shape")|assign(X,"height")|retum(X, " felicità").
select(X):-assign(X, " felicità").
retum(X, " felicità").
 köp: for (X in storm) do assign(X, " felicità").
 köp: for (X in storm) do select(X).
 köp: for (X in storm) doretum(X, " felicità").
 köp: for (X in storm)

unique_rules: 
['select(X):-assign(X, " felicità").']

parsed: 
select(X):-assign(X, " felicità").

jaccard: 0.0


377
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "darkmagenta" and "strength". However, avoid any combination where predicate "darkmagenta" has label "laptop".

answer from file: 
combination(X,Y):-darkmagenta(X, _),strength(Y), not darkmagenta(X, laptop).

facts: 
darkmagenta(1..4, 1..4).strength(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "darkmagenta" and "strength". However, avoid any combination where predicate "darkmagenta" has label "laptop".
Answer: combination(X,Y):-darkmagenta(X, _),strength(Y), not darkmagenta(X, _).
combination(X,Y):-darkmagenta(X, _),strength(Y).
assign(X, Y)
combination(X, Y).
retum.
assign(X, Y), not darkmagenta(X, _).
retum.
assign(X, Y), not strength(Y).
retum.
assign(X, Y), not darkmagenta(X, _).
retum.
assign(X, Y), not strength(Y).
retum.
assign(X, Y), not darkmagenta(X, _).
retum.
assign(

unique_rules: 
['combination(X,Y):-darkmagenta(X, _),strength(Y), not darkmagenta(X, _).', 'combination(X,Y):-darkmagenta(X, _),strength(Y).']

parsed: 
combination(X,Y):-darkmagenta(X, _),strength(Y), not darkmagenta(X, _).

jaccard: 0.0


378
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "cloud" having fields "ID","surname","whiteID", and the predicate "white" having fields "ID","surname". Define a predicate "cloud_white" that associates to each "cloud" the "surname" of "white" only where "surname" is different than 34.

answer from file: 
cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34.

facts: 
cloud("ID","surname","whiteID").white("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "cloud" having fields "ID","surname","whiteID", and the predicate "white" having fields "ID","surname". Define a predicate "cloud_white" that associates to each "cloud" the "surname" of "white" only where "surname" is different than 34.
Answer: cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34.
cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z==34.

unique_rules: 
['cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34.', 'cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z==34.']

parsed: 
cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34.

jaccard: 1.0


379
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "black" having fields "ID","quality","lakeID", and the predicate "lake" having fields "ID","owner". Define a predicate "black_lake" that associates to each "black", not associated with label "laptop", the attribute "owner" of "lake".

answer from file: 
black_lake(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).

facts: 
black("ID","quality","lakeID").lake("ID","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "black" having fields "ID","quality","lakeID", and the predicate "lake" having fields "ID","owner". Define a predicate "black_lake" that associates to each "black", not associated with label "laptop", the attribute "owner" of "lake".
Answer: black_lake(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).
black_lake(X,Z):-black(X,_,Y),lake(Y,Z),label(X,laptop).
assign(X,black_lake(X,Z)).
retum(X,Z).
retum(X,Z),label(X,moto).
retum(X,Z),label(X,description).
retum(X,Z),label(X,price).
retum(X,Z),label(X,height).
retum(X,Z),label(X,age).
retum(X,

unique_rules: 
['black_lake(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).', 'black_lake(X,Z):-black(X,_,Y),lake(Y,Z),label(X,laptop).']

parsed: 
black_lake(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).

jaccard: 1.0


380
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "storm" as the transitive closure of predicate "white". Then, assign exactly one label from the set chair,roof,flower,desk,wall,laptop,storm,cloud to each element in "storm".

answer from file: 
storm(X,Y):-white(X,Y).
storm(X,Y):-white(X,Z),storm(Z,Y).
assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk")|assign(X,"wall")|assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud"):-storm(X,_).

facts: 
white(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "storm" as the transitive closure of predicate "white". Then, assign exactly one label from the set chair,roof,flower,desk,wall,laptop,storm,cloud to each element in "storm".
Answer: storm(X,Y):-white(X,Y).
storm(X,Y):-white(X,Z),storm(Z,Y).
assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk")|assign(X,"wall")|assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud"):-storm(X,_).
retum:
assign(X,"city")|assign(X,"age")|assign(X,"name")|assign(X,"price")|assign(X,"description")|assign(X,"author")|assign(X,"creator")|assign

unique_rules: 
['storm(X,Y):-white(X,Y).', 'storm(X,Y):-white(X,Z),storm(Z,Y).', 'assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk")|assign(X,"wall")|assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud"):-storm(X,_).']

parsed: 
storm(X,Y):-white(X,Y).
storm(X,Y):-white(X,Z),storm(Z,Y).
assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk")|assign(X,"wall")|assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud"):-storm(X,_).

jaccard: 1.0


381
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate moscow. The labels are desk,butterfly,cloud,flower,wall. Consider only the predicate moscow not associated with label "roof".

answer from file: 
assign(X,"desk")|assign(X,"butterfly")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-moscow(X, _), not moscow(X, roof).

facts: 
moscow(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate moscow. The labels are desk,butterfly,cloud,flower,wall. Consider only the predicate moscow not associated with label "roof".
Answer: assign(X,"desk")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-moscow(X, _), not moscow(X, roof).
```
assign(X,"description")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"name"):-moscow(X, _).
```
The predicate moscow has label "description", and the predicate description has label "height". So, assign(X,"height") will not assign to X the label "description".
The predicate description has label "price", and the predicate price

unique_rules: 
['assign(X,"desk")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-moscow(X, _), not moscow(X, roof).', 'assign(X,"description")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"name"):-moscow(X, _).']

parsed: 
assign(X,"desk")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-moscow(X, _), not moscow(X, roof).

jaccard: 1.0


382
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate darkmagenta and labels strength, weight having label weight different than 20. The labels are wall,butterfly.

answer from file: 
assign(X,"wall")|assign(X,"butterfly"):-darkmagenta(X, Y), Y!=20 .

facts: 
darkmagenta(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate darkmagenta and labels strength, weight having label weight different than 20. The labels are wall,butterfly.
Answer: assign(X,"wall")|assign(X," venant")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"author")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"author") :-darkMagenta(X, Y), Y!=20 .
```
The predicate darkMagenta has label description, and the labels are price,age,author,city,description,height,shape,name,creator,age,description

unique_rules: 
['assign(X,"wall")|assign(X," venant")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"author")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"author") :-darkMagenta(X, Y), Y!=20 .']

parsed: 
assign(X,"wall")|assign(X," venant")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"author")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"author") :-darkMagenta(X, Y), Y!=20 .

jaccard: 0.0


383
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate desk. The labels are desk,storm,wall,butterfly,chair,laptop,flower,roof,cloud.  Then, filter and return only the elements assigned to label chair.".

answer from file: 
assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X,"butterfly")|assign(X,"chair")|assign(X,"laptop")|assign(X,"flower")|assign(X,"roof")|assign(X,"cloud"):-desk(X).
select(X):-assign(X, "chair").

facts: 
desk(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate desk. The labels are desk,storm,wall,butterfly,chair,laptop,flower,roof,cloud.  Then, filter and return only the elements assigned to label chair.".
Answer: assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X," éparror")|assign(X,"chair")|assign(X," arrivant")|assign(X,"florence")|assign(X,"roof")|assign(X,"cloud"):-desk(X).
select(X):-assign(X, "chair").
```
The predicate "desk" has label "description", and the predicate "chair" has label "shape". So, the predicate "assign" has label "shape".
Then, filter and return only the elements assigned to label "shape".
Result: select(X):-assign(X, "shape").


unique_rules: 
['assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X," éparror")|assign(X,"chair")|assign(X," arrivant")|assign(X,"florence")|assign(X,"roof")|assign(X,"cloud"):-desk(X).', 'select(X):-assign(X, "chair").', 'Result: select(X):-assign(X, "shape").']

parsed: 
assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X," éparror")|assign(X,"chair")|assign(X," arrivant")|assign(X,"florence")|assign(X,"roof")|assign(X,"cloud"):-desk(X).
select(X):-assign(X, "chair").

jaccard: 1.0


384
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "singapore" and "delhi". However, avoid any combination where predicate "singapore" has label "butterfly".

answer from file: 
combination(X,Y):-singapore(X, _),delhi(Y), not singapore(X, butterfly).

facts: 
singapore(1..4, 1..4).delhi(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "singapore" and "delhi". However, avoid any combination where predicate "singapore" has label "butterfly".
Answer: combination(X,Y):-singapore(X, _),delhi(Y), not singapore(X, butterfly).
combination(X,Y):-singapore(X, _),delhi(Y).
assign(X, "element")|assign(X, "city")|assign(X, "price")|assign(X, "age")|assign(X, "description")|assign(X, "shape")|assign(X, "height")|assign(X, "author")|assign(X, "creator")|assign(X, "name")|assign(X, "age")|assign(X, "description")|assign(X, "

unique_rules: 
['combination(X,Y):-singapore(X, _),delhi(Y), not singapore(X, butterfly).', 'combination(X,Y):-singapore(X, _),delhi(Y).']

parsed: 
combination(X,Y):-singapore(X, _),delhi(Y), not singapore(X, butterfly).

jaccard: 1.0


385
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "desk" having fields "ID","weight","qualityID", and the predicate "quality" having fields "ID","hair". Define a predicate "desk_quality" that associates to each "desk" the "hair" of "quality" only where "hair" is different than 23.

answer from file: 
desk_quality(X,Z):-desk(X,_,Y),quality(Y,Z), Z!=23.

facts: 
desk("ID","weight","qualityID").quality("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "desk" having fields "ID","weight","qualityID", and the predicate "quality" having fields "ID","hair". Define a predicate "desk_quality" that associates to each "desk" the "hair" of "quality" only where "hair" is different than 23.
Answer: desk_quality(X,Z):-desk(X,_,Y),quality(Y,Z), Z!=23.
 espressione(X,Z):-desk(X,_,Y),quality(Y,Z), Z==23.
 espressione(X,_,Y):-desk(X,_,Y),quality(Y,Z), Z!=12.
 espressione(X,_,Y):-desk(X,_,Y),quality(Y,Z), Z==12.
 espressione(X,_,Y):-desk(X,_,Y),quality(Y,Z), Z==18.
retum(X,Y):- espressione(X,Y,Z),not Z==

unique_rules: 
['desk_quality(X,Z):-desk(X,_,Y),quality(Y,Z), Z!=23.', 'espressione(X,Z):-desk(X,_,Y),quality(Y,Z), Z==23.', 'espressione(X,_,Y):-desk(X,_,Y),quality(Y,Z), Z!=12.', 'espressione(X,_,Y):-desk(X,_,Y),quality(Y,Z), Z==12.', 'espressione(X,_,Y):-desk(X,_,Y),quality(Y,Z), Z==18.', 'retum(X,Y):- espressione(X,Y,Z),not Z==.']

parsed: 
desk_quality(X,Z):-desk(X,_,Y),quality(Y,Z), Z!=23.

jaccard: 1.0


386
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "lightblue" having fields "ID","weight","mumbaiID", and the predicate "mumbai" having fields "ID","lake". Define a predicate "lightblue_mumbai" that associates to each "lightblue", not associated with label "chair", the attribute "lake" of "mumbai".

answer from file: 
lightblue_mumbai(X,Z):-lightblue(X,_,Y),mumbai(Y,Z),not lightblue(X,chair,_).

facts: 
lightblue("ID","weight","mumbaiID").mumbai("ID","lake").

generated: 
Write an ASP program for the following problem. Consider predicate "lightblue" having fields "ID","weight","mumbaiID", and the predicate "mumbai" having fields "ID","lake". Define a predicate "lightblue_mumbai" that associates to each "lightblue", not associated with label "chair", the attribute "lake" of "mumbai".
Answer: lightblue_mumbai(X,Z):-lightblue(X,_,Y),mumbai(Y,Z),not lightblue(X,chair,_).
lightblue_mumbai(X,Z):-lightblue(X,_,Y),mumbai(Y,Z),label "chair".
assign(X,lightblue_mumbai(X,Z)).
retum.
assign(X,lightblue_mumbai(X,Z)).
retum.
 quí.
retum.
 quí.
 quí.
retum.
 quí.
retum.
 quí.
retum.
 quí.
retum.
 quí.
retum.
 quí.
retum.
 quí

unique_rules: 
['lightblue_mumbai(X,Z):-lightblue(X,_,Y),mumbai(Y,Z),not lightblue(X,chair,_).', 'lightblue_mumbai(X,Z):-lightblue(X,_,Y),mumbai(Y,Z),label "chair".']

parsed: 
lightblue_mumbai(X,Z):-lightblue(X,_,Y),mumbai(Y,Z),not lightblue(X,chair,_).

jaccard: 1.0


387
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "moscow" as the transitive closure of predicate "lightblue". Then, assign exactly one label from the set roof,storm,chair,desk,flower,cloud to each element in "moscow".

answer from file: 
moscow(X,Y):-lightblue(X,Y).
moscow(X,Y):-lightblue(X,Z),moscow(Z,Y).
assign(X,"roof")|assign(X,"storm")|assign(X,"chair")|assign(X,"desk")|assign(X,"flower")|assign(X,"cloud"):-moscow(X,_).

facts: 
lightblue(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "moscow" as the transitive closure of predicate "lightblue". Then, assign exactly one label from the set roof,storm,chair,desk,flower,cloud to each element in "moscow".
Answer: moscow(X,Y):-lightblue(X,Y).
moscow(X,Y):-lightblue(X,Z),moscow(Z,Y).
assign(X,"roof")|assign(X,"storm")|assign(X,"chair")|assign(X,"desk")|assign(X,"flower")|assign(X,"cloud"):-moscow(X,_).
retum:assign(X,"city").
retum:assign(X,"description").
retum:assign(X,"price").
retum:assign(X,"age").
retum:assign(X,"name").
retum:assign(X,"shape").
retum:assign(X,"height

unique_rules: 
['moscow(X,Y):-lightblue(X,Y).', 'moscow(X,Y):-lightblue(X,Z),moscow(Z,Y).', 'assign(X,"roof")|assign(X,"storm")|assign(X,"chair")|assign(X,"desk")|assign(X,"flower")|assign(X,"cloud"):-moscow(X,_).']

parsed: 
moscow(X,Y):-lightblue(X,Y).
moscow(X,Y):-lightblue(X,Z),moscow(Z,Y).
assign(X,"roof")|assign(X,"storm")|assign(X,"chair")|assign(X,"desk")|assign(X,"flower")|assign(X,"cloud"):-moscow(X,_).

jaccard: 1.0


388
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate strength. The labels are chair,wall,storm,cloud,laptop. Consider only the predicate strength not associated with label "cloud".

answer from file: 
assign(X,"chair")|assign(X,"wall")|assign(X,"storm")|assign(X,"cloud")|assign(X,"laptop"):-strength(X, _), not strength(X, cloud).

facts: 
strength(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate strength. The labels are chair,wall,storm,cloud,laptop. Consider only the predicate strength not associated with label "cloud".
Answer: assign(X,"chair")|assign(X,"wall")|assign(X,"storm")|assign(X,"cloud")|assign(X,"laptop"):-strength(X, _), not strength(X, cloud).
```
assign(X," felicità")|assign(X,"city")|assign(X,"age")|assign(X,"name")|assign(X,"price"):-strength(X, _).
```
The predicate "strength" has label "name", and the predicate " felicità" has label "price". So, the labels are Girona,price,age,name,city,description,author,height,shape,creator,name,age,description,

unique_rules: 
['assign(X,"chair")|assign(X,"wall")|assign(X,"storm")|assign(X,"cloud")|assign(X,"laptop"):-strength(X, _), not strength(X, cloud).', 'assign(X," felicità")|assign(X,"city")|assign(X,"age")|assign(X,"name")|assign(X,"price"):-strength(X, _).']

parsed: 
assign(X,"chair")|assign(X,"wall")|assign(X,"storm")|assign(X,"cloud")|assign(X,"laptop"):-strength(X, _), not strength(X, cloud).

jaccard: 1.0


389
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate owner and labels lake, strength having label strength different than 33. The labels are chair,storm,laptop,cloud,butterfly.

answer from file: 
assign(X,"chair")|assign(X,"storm")|assign(X,"laptop")|assign(X,"cloud")|assign(X,"butterfly"):-owner(X, Y), Y!=33 .

facts: 
owner(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate owner and labels lake, strength having label strength different than 33. The labels are chair,storm,laptop,cloud,butterfly.
Answer: assign(X,"chair")|assign(X,"storm")|assign(X,"laptop")|assign(X,"cloud")|assign(X," arrivant") :-owner(X, Y), Y!=33 .
assign(X," arrivant") :-owner(X, Y), Y==33 .
 köp(X, Y), Y!=33 .
 köp(X, Y), Y==33 .
 kollektive(X, Y), Y!=33 .
 kollektive(X, Y), Y==33 .
retum(X, Y), Y!=33 .
retum(X, Y), Y==33 .
age(X, Y

unique_rules: 
['assign(X,"chair")|assign(X,"storm")|assign(X,"laptop")|assign(X,"cloud")|assign(X," arrivant") :-owner(X, Y), Y!=33 .', 'assign(X," arrivant") :-owner(X, Y), Y==33 .']

parsed: 
assign(X,"chair")|assign(X,"storm")|assign(X,"laptop")|assign(X,"cloud")|assign(X," arrivant") :-owner(X, Y), Y!=33 .

jaccard: 0.0


390
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate cosenza. The labels are laptop,desk,cloud,flower,roof,wall.  Then, filter and return only the elements assigned to label desk.".

answer from file: 
assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"flower")|assign(X,"roof")|assign(X,"wall"):-cosenza(X).
select(X):-assign(X, "desk").

facts: 
cosenza(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate cosenza. The labels are laptop,desk,cloud,flower,roof,wall.  Then, filter and return only the elements assigned to label desk.".
Answer: assign(X," arrivant")|assign(X,"city")|assign(X,"height")|assign(X,"name")|assign(X,"age")|assign(X,"shape")|assign(X,"price")|assign(X,"author")|assign(X,"description")|retum(X, "desk").
select(X):-assign(X, "description").
retum(X, "description").
The predicate "cosenza" has label "description", and the predicate "description" has label "description".
So, the predicate "retum" first assigns to each element the label "description", and then filters and returns only the elements assigned to label "description".
The

unique_rules: 
['select(X):-assign(X, "description").']

parsed: 
select(X):-assign(X, "description").

jaccard: 0.0


391
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "surname" and "quality". However, avoid any combination where predicate "surname" has label "chair".

answer from file: 
combination(X,Y):-surname(X, _),quality(Y), not surname(X, chair).

facts: 
surname(1..4, 1..4).quality(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "surname" and "quality". However, avoid any combination where predicate "surname" has label "chair".
Answer: combination(X,Y):-surname(X, _),quality(Y), not surname(X, chair).
combination(X,Y):-surname(X, _),quality(Y).
combination(X,Y):-surname(X, chair),quality(Y).
```
Combinations are expressed by predicate "combination".
However, avoid any combination where predicate "name" has label "bike".
```
result: combination(X,Y):-name(X, _),bike(Y).
result: combination(X,Y):-name(X, _),city(Y).
result: combination(X,Y):-name(X, _),age(Y).
result:

unique_rules: 
['combination(X,Y):-surname(X, _),quality(Y), not surname(X, chair).', 'combination(X,Y):-surname(X, _),quality(Y).', 'combination(X,Y):-surname(X, chair),quality(Y).', 'result: combination(X,Y):-name(X, _),bike(Y).', 'result: combination(X,Y):-name(X, _),city(Y).', 'result: combination(X,Y):-name(X, _),age(Y).']

parsed: 
combination(X,Y):-surname(X, _),quality(Y), not surname(X, chair).

jaccard: 1.0


392
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "delhi" having fields "ID","whiteID","surname", and the predicate "white" having fields "ID","owner". Define a predicate "delhi_white" that associates to each "delhi" the "owner" of "white" only where "owner" is different than 71.

answer from file: 
delhi_white(X,Z):-delhi(X,Y,_),white(Y,Z), Z!=71.

facts: 
delhi("ID","whiteID","surname").white("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "delhi" having fields "ID","whiteID","surname", and the predicate "white" having fields "ID","owner". Define a predicate "delhi_white" that associates to each "delhi" the "owner" of "white" only where "owner" is different than 71.
Answer: delhi_white(X,Z):-delhi(X,Y,_),white(Y,Z), Z!=71.
delhi_white(X,Y,_):-delhi(X,Y,_),white(Y,Z), Z==71.
retum(X,Y,_),delhi(X,Y,_),white(Y,Z), Z!=71.
retum(X,Y,_),delhi(X,Y,_),white(Y,Z), Z==71.
 quíname(X,Y,Z),not delhi_white(X,Y,Z).
 quíname(X,Y,Z),tokyo(X,Y

unique_rules: 
['delhi_white(X,Z):-delhi(X,Y,_),white(Y,Z), Z!=71.', 'delhi_white(X,Y,_):-delhi(X,Y,_),white(Y,Z), Z==71.']

parsed: 
delhi_white(X,Z):-delhi(X,Y,_),white(Y,Z), Z!=71.

jaccard: 1.0


393
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "cosenza" having fields "ID","lake","chairID", and the predicate "chair" having fields "ID","hair". Define a predicate "cosenza_chair" that associates to each "cosenza", not associated with label "laptop", the attribute "hair" of "chair".

answer from file: 
cosenza_chair(X,Z):-cosenza(X,_,Y),chair(Y,Z),not cosenza(X,laptop,_).

facts: 
cosenza("ID","lake","chairID").chair("ID","hair").

generated: 
Write an ASP program for the following problem. Consider predicate "cosenza" having fields "ID","lake","chairID", and the predicate "chair" having fields "ID","hair". Define a predicate "cosenza_chair" that associates to each "cosenza", not associated with label "laptop", the attribute "hair" of "chair".
Answer: cosenza_chair(X,Z):-cosenza(X,_,Y),chair(Y,Z),not cosenza(X,laptop,_).
 ángulo(X,Y):-cosenza(X,_,Y).
 ángulo(X,_,Z):-cosenza(X,_,Z).
 ángulo(X,_,_):- ángulo(X,_,Y).
 ángulo(X,_,_):- ángulo(X,_,Z).
 ángulo(X,_,_):- ángulo(X,_,Y).
 ángulo(X,_,_):- ángulo(X,_,Z).
 ángulo(X,_,_):-

unique_rules: 
['cosenza_chair(X,Z):-cosenza(X,_,Y),chair(Y,Z),not cosenza(X,laptop,_).', 'ángulo(X,Y):-cosenza(X,_,Y).', 'ángulo(X,_,Z):-cosenza(X,_,Z).', 'ángulo(X,_,_):- ángulo(X,_,Y).', 'ángulo(X,_,_):- ángulo(X,_,Z).', 'ángulo(X,_,_):-.']

parsed: 
cosenza_chair(X,Z):-cosenza(X,_,Y),chair(Y,Z),not cosenza(X,laptop,_).

jaccard: 1.0


394
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "hair" as the transitive closure of predicate "pink". Then, assign exactly one label from the set roof,laptop,storm,desk,cloud,chair,wall to each element in "hair".

answer from file: 
hair(X,Y):-pink(X,Y).
hair(X,Y):-pink(X,Z),hair(Z,Y).
assign(X,"roof")|assign(X,"laptop")|assign(X,"storm")|assign(X,"desk")|assign(X,"cloud")|assign(X,"chair")|assign(X,"wall"):-hair(X,_).

facts: 
pink(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "hair" as the transitive closure of predicate "pink". Then, assign exactly one label from the set roof,laptop,storm,desk,cloud,chair,wall to each element in "hair".
Answer: hair(X,Y):-pink(X,Y).
hair(X,Y):-pink(X,Z),hair(Z,Y).
assign(X,"roof")|assign(X,"laptop")|assign(X,"storm")|assign(X,"desk")|assign(X,"cloud")|assign(X,"chair")|assign(X,"wall"):-hair(X,_).
retum:assign(X,"city").
retum:assign(X,"age").
retum:assign(X,"price").
retum:assign(X,"description").
retum:assign(X,"author").
retum:assign(X,"name").
retum:assign(X,"

unique_rules: 
['hair(X,Y):-pink(X,Y).', 'hair(X,Y):-pink(X,Z),hair(Z,Y).', 'assign(X,"roof")|assign(X,"laptop")|assign(X,"storm")|assign(X,"desk")|assign(X,"cloud")|assign(X,"chair")|assign(X,"wall"):-hair(X,_).']

parsed: 
hair(X,Y):-pink(X,Y).
hair(X,Y):-pink(X,Z),hair(Z,Y).
assign(X,"roof")|assign(X,"laptop")|assign(X,"storm")|assign(X,"desk")|assign(X,"cloud")|assign(X,"chair")|assign(X,"wall"):-hair(X,_).

jaccard: 1.0


395
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate pink. The labels are chair,butterfly,cloud,laptop,flower,storm,desk,roof,wall. Consider only the predicate pink not associated with label "laptop".

answer from file: 
assign(X,"chair")|assign(X,"butterfly")|assign(X,"cloud")|assign(X,"laptop")|assign(X,"flower")|assign(X,"storm")|assign(X,"desk")|assign(X,"roof")|assign(X,"wall"):-pink(X, _), not pink(X, laptop).

facts: 
pink(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate pink. The labels are chair,butterfly,cloud,laptop,flower,storm,desk,roof,wall. Consider only the predicate pink not associated with label "laptop".
Answer: assign(X,"chair")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"laptop")|assign(X,"flower")|assign(X,"storm")|assign(X,"desk")|assign(X,"roof")|assign(X,"wall"):-pink(X, _), not pink(X, laptop).
```
assign(X,"chair")|assign(X," arrivant")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"flower")|assign(X,"shape")|assign(X,"city")|assign(X,"description")|assign(X,"price"):-pink(X, _

unique_rules: 
['assign(X,"chair")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"laptop")|assign(X,"flower")|assign(X,"storm")|assign(X,"desk")|assign(X,"roof")|assign(X,"wall"):-pink(X, _), not pink(X, laptop).', 'assign(X,"chair")|assign(X," arrivant")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"flower")|assign(X,"shape")|assign(X,"city")|assign(X,"description")|assign(X,"price"):-pink(X, _.']

parsed: 
assign(X,"chair")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"laptop")|assign(X,"flower")|assign(X,"storm")|assign(X,"desk")|assign(X,"roof")|assign(X,"wall"):-pink(X, _), not pink(X, laptop).

jaccard: 1.0


396
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate toronto and labels lake, surname having label surname different than 29. The labels are laptop,storm,flower,desk,cloud,butterfly,chair,wall,roof.

answer from file: 
assign(X,"laptop")|assign(X,"storm")|assign(X,"flower")|assign(X,"desk")|assign(X,"cloud")|assign(X,"butterfly")|assign(X,"chair")|assign(X,"wall")|assign(X,"roof"):-toronto(X, Y), Y!=29 .

facts: 
toronto(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate toronto and labels lake, surname having label surname different than 29. The labels are laptop,storm,flower,desk,cloud,butterfly,chair,wall,roof.
Answer: assign(X," arrivant")|assign(X,"storm")|assign(X,"flower")|assign(X,"desk")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"florence")|assign(X,"chair")|assign(X,"wall")|assign(X,"roof"):-toronto(X, Y), Y!=29 .
Assign(X,"florence") if not toronto(X, Y), Y!=29.
The predicate toronto has label "florence", and the predicate "florence" has label "description".
So, the predicate "assign" associates to each element the label "description" only where "description"

unique_rules: 
['assign(X," arrivant")|assign(X,"storm")|assign(X,"flower")|assign(X,"desk")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"florence")|assign(X,"chair")|assign(X,"wall")|assign(X,"roof"):-toronto(X, Y), Y!=29 .']

parsed: 
assign(X," arrivant")|assign(X,"storm")|assign(X,"flower")|assign(X,"desk")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"florence")|assign(X,"chair")|assign(X,"wall")|assign(X,"roof"):-toronto(X, Y), Y!=29 .

jaccard: 1.0


397
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate flower. The labels are storm,chair,desk,laptop,flower,wall,roof,cloud.  Then, filter and return only the elements assigned to label cloud.".

answer from file: 
assign(X,"storm")|assign(X,"chair")|assign(X,"desk")|assign(X,"laptop")|assign(X,"flower")|assign(X,"wall")|assign(X,"roof")|assign(X,"cloud"):-flower(X).
select(X):-assign(X, "cloud").

facts: 
flower(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate flower. The labels are storm,chair,desk,laptop,flower,wall,roof,cloud.  Then, filter and return only the elements assigned to label cloud.".
Answer: assign(X," cœurs")|assign(X,"description")|assign(X,"price")|assign(X,"city")|assign(X,"age")|assign(X,"name")|assign(X,"shape")|assign(X,"height")|assign(X,"author")|retum(X, "cloud").
select(X):-assign(X, "cloud").
```
The predicate flower has label "description", and the label "description" has label "shape". So, the predicate flower has label "shape".
Then, select only the elements assigned to label "shape".
The result is the set of elements expressed by predicate flower.

unique_rules: 
['select(X):-assign(X, "cloud").']

parsed: 
select(X):-assign(X, "cloud").

jaccard: 0.0


398
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "moscow" and "owner". However, avoid any combination where predicate "moscow" has label "butterfly".

answer from file: 
combination(X,Y):-moscow(X, _),owner(Y), not moscow(X, butterfly).

facts: 
moscow(1..4, 1..4).owner(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "moscow" and "owner". However, avoid any combination where predicate "moscow" has label "butterfly".
Answer: combination(X,Y):-moscow(X, _),owner(Y), not moscow(X, butterfly).
combination(X,Y):-moscow(X, _),owner(Y).
```
Combinations are expressed by predicate "combination".
However, avoid any combination where predicate "moscow" has label "description".
Result: combination(X,Y):-description(X, Y).
combination(X,Y):-description(X, _),owner(Y).
```
The predicate "description" has label "description", so we avoid any combination where "description" has label "description".
The "combination" predicate has label "description", so it only returns combinations

unique_rules: 
['combination(X,Y):-moscow(X, _),owner(Y), not moscow(X, butterfly).', 'combination(X,Y):-moscow(X, _),owner(Y).', 'Result: combination(X,Y):-description(X, Y).', 'combination(X,Y):-description(X, _),owner(Y).']

parsed: 
combination(X,Y):-moscow(X, _),owner(Y), not moscow(X, butterfly).

jaccard: 1.0


399
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "singapore" having fields "ID","chairID","owner", and the predicate "chair" having fields "ID","surname". Define a predicate "singapore_chair" that associates to each "singapore" the "surname" of "chair" only where "surname" is different than 35.

answer from file: 
singapore_chair(X,Z):-singapore(X,Y,_),chair(Y,Z), Z!=35.

facts: 
singapore("ID","chairID","owner").chair("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "singapore" having fields "ID","chairID","owner", and the predicate "chair" having fields "ID","surname". Define a predicate "singapore_chair" that associates to each "singapore" the "surname" of "chair" only where "surname" is different than 35.
Answer: singapore_chair(X,Z):-singapore(X,Y,_),chair(Y,Z), Z!=35.
 ángulo(X,Y,Z):-singapore(X,Y,_),chair(Y,Z), Z==35.
 ángulo(X,Y,Z):-singapore(X,Y,_),chair(Y,Z), Z<35.
 ángulo(X,Y,Z):-singapore(X,Y,_),chair(Y,Z), Z==35.
 ángulo(X,Y,Z):-singapore(X,Y,_),chair(Y,Z), Z>35.
 ángulo(

unique_rules: 
['singapore_chair(X,Z):-singapore(X,Y,_),chair(Y,Z), Z!=35.', 'ángulo(X,Y,Z):-singapore(X,Y,_),chair(Y,Z), Z==35.', 'ángulo(X,Y,Z):-singapore(X,Y,_),chair(Y,Z), Z<35.', 'ángulo(X,Y,Z):-singapore(X,Y,_),chair(Y,Z), Z>35.']

parsed: 
singapore_chair(X,Z):-singapore(X,Y,_),chair(Y,Z), Z!=35.

jaccard: 1.0


400
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "mumbai" having fields "ID","quality","lakeID", and the predicate "lake" having fields "ID","hair". Define a predicate "mumbai_lake" that associates to each "mumbai", not associated with label "cloud", the attribute "hair" of "lake".

answer from file: 
mumbai_lake(X,Z):-mumbai(X,_,Y),lake(Y,Z),not mumbai(X,cloud,_).

facts: 
mumbai("ID","quality","lakeID").lake("ID","hair").

generated: 
Write an ASP program for the following problem. Consider predicate "mumbai" having fields "ID","quality","lakeID", and the predicate "lake" having fields "ID","hair". Define a predicate "mumbai_lake" that associates to each "mumbai", not associated with label "cloud", the attribute "hair" of "lake".
Answer: mumbai_lake(X,Z):-mumbai(X,_,Y),lake(Y,Z),not mumbai(X,cloud,_).
 ángulo(X,Y):-mumbai(X,_,Y),lake(Y,Z).
 ángulo(X,Y):-mumbai(X,cloud,_),lake(Y,Z).
 ángulo(X,Y):-mumbai(X,_,_),lake(Y,Z).
 ángulo(X,Y):-mumbai(X,_,_),lake(Y,Z),not mumbai(X,cloud,Y).
 ángulo(X,Y):-mumbai(X,_,Y),lake(Y,Z

unique_rules: 
['mumbai_lake(X,Z):-mumbai(X,_,Y),lake(Y,Z),not mumbai(X,cloud,_).', 'ángulo(X,Y):-mumbai(X,_,Y),lake(Y,Z).', 'ángulo(X,Y):-mumbai(X,cloud,_),lake(Y,Z).', 'ángulo(X,Y):-mumbai(X,_,_),lake(Y,Z).', 'ángulo(X,Y):-mumbai(X,_,_),lake(Y,Z),not mumbai(X,cloud,Y).', 'ángulo(X,Y):-mumbai(X,_,Y),lake(Y,Z.']

parsed: 
mumbai_lake(X,Z):-mumbai(X,_,Y),lake(Y,Z),not mumbai(X,cloud,_).

jaccard: 1.0


401
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "chicago" as the transitive closure of predicate "cosenza". Then, assign exactly one label from the set flower,cloud,chair,wall,desk to each element in "chicago".

answer from file: 
chicago(X,Y):-cosenza(X,Y).
chicago(X,Y):-cosenza(X,Z),chicago(Z,Y).
assign(X,"flower")|assign(X,"cloud")|assign(X,"chair")|assign(X,"wall")|assign(X,"desk"):-chicago(X,_).

facts: 
cosenza(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "chicago" as the transitive closure of predicate "cosenza". Then, assign exactly one label from the set flower,cloud,chair,wall,desk to each element in "chicago".
Answer: chicago(X,Y):-cosenza(X,Y).
chicago(X,Y):-cosenza(X,Z),chicago(Z,Y).
assign(X,"flower")|assign(X,"cloud")|assign(X,"chair")|assign(X,"wall")|assign(X,"desk"):-chicago(X,_).
retum(X,Y):-assign(X,Y).
retum(X,Y):-assign(X,Z),retum(Z,Y).
retum(X,Y):-assign(X,Z),retum(Z,Y).
retum(X,Y):-assign(X,Z),retum(Z,Y).
retum(

unique_rules: 
['chicago(X,Y):-cosenza(X,Y).', 'chicago(X,Y):-cosenza(X,Z),chicago(Z,Y).', 'assign(X,"flower")|assign(X,"cloud")|assign(X,"chair")|assign(X,"wall")|assign(X,"desk"):-chicago(X,_).', 'retum(X,Y):-assign(X,Y).', 'retum(X,Y):-assign(X,Z),retum(Z,Y).']

parsed: 
chicago(X,Y):-cosenza(X,Y).
chicago(X,Y):-cosenza(X,Z),chicago(Z,Y).
assign(X,"flower")|assign(X,"cloud")|assign(X,"chair")|assign(X,"wall")|assign(X,"desk"):-chicago(X,_).

jaccard: 1.0


402
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate moscow. The labels are butterfly,storm,chair,cloud,desk,roof,flower. Consider only the predicate moscow not associated with label "laptop".

answer from file: 
assign(X,"butterfly")|assign(X,"storm")|assign(X,"chair")|assign(X,"cloud")|assign(X,"desk")|assign(X,"roof")|assign(X,"flower"):-moscow(X, _), not moscow(X, laptop).

facts: 
moscow(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate moscow. The labels are butterfly,storm,chair,cloud,desk,roof,flower. Consider only the predicate moscow not associated with label "laptop".
Answer: assign(X," originaux")|assign(X,"description")|assign(X,"city")|assign(X,"name")|assign(X,"price")|assign(X,"age")|assign(X,"shape")|assign(X,"height")|retum(X, Y), Y!=19.
retum(X, Y), Y==19.
 köp(X, Y), Y!=19.
 köp(X, Y), Y==19.
 köp(X, Y), Y!=19.
moto(X, Y), Y!=19.
moto(X, Y), Y==19.
retum(X, Y), Y

unique_rules: 
[]

parsed: 


jaccard: 0.0


403
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate white and labels surname, quality having label quality different than 45. The labels are storm,chair,flower,laptop,cloud,wall,desk.

answer from file: 
assign(X,"storm")|assign(X,"chair")|assign(X,"flower")|assign(X,"laptop")|assign(X,"cloud")|assign(X,"wall")|assign(X,"desk"):-white(X, Y), Y!=45 .

facts: 
white(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate white and labels surname, quality having label quality different than 45. The labels are storm,chair,flower,laptop,cloud,wall,desk.
Answer: assign(X,"storm")|assign(X,"chair")|assign(X,"flower")|assign(X,"laptop")|assign(X,"cloud")|assign(X,"wall")|assign(X,"desk"):-white(X, Y), Y!=45 .
```
Assign exactly a label among a given set of labels to a set of elements expressed by predicate white and labels price,creator,description,age,city,height,shape,name,author,price,age,description,city,height,shape,name,author,price,age,description,city,height,shape,name,author,price,age,description,city,height,shape,name

unique_rules: 
['assign(X,"storm")|assign(X,"chair")|assign(X,"flower")|assign(X,"laptop")|assign(X,"cloud")|assign(X,"wall")|assign(X,"desk"):-white(X, Y), Y!=45 .']

parsed: 
assign(X,"storm")|assign(X,"chair")|assign(X,"flower")|assign(X,"laptop")|assign(X,"cloud")|assign(X,"wall")|assign(X,"desk"):-white(X, Y), Y!=45 .

jaccard: 1.0


404
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate strength. The labels are roof,cloud,storm,desk.  Then, filter and return only the elements assigned to label roof.".

answer from file: 
assign(X,"roof")|assign(X,"cloud")|assign(X,"storm")|assign(X,"desk"):-strength(X).
select(X):-assign(X, "roof").

facts: 
strength(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate strength. The labels are roof,cloud,storm,desk.  Then, filter and return only the elements assigned to label roof.".
Answer: assign(X," felicità")|assign(X,"city")|assign(X,"age")|assign(X,"name")|assign(X,"price")|assign(X,"author")|retum(X, " felicità").
select(X):-assign(X, " felicità").
retum(X, " felicità").
```
Assign(X," felicità")|Assign(X,"city")|Assign(X,"age")|Assign(X,"name")|Assign(X,"price")|Assign(X,"author")|retum(X, " felicità").
select(X):-assign(X, " felicità").
retum(X, " felicità").
 köp(X, Y

unique_rules: 
['select(X):-assign(X, " felicità").']

parsed: 
select(X):-assign(X, " felicità").

jaccard: 0.0


405
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "cairo" and "cosenza". However, avoid any combination where predicate "cairo" has label "wall".

answer from file: 
combination(X,Y):-cairo(X, _),cosenza(Y), not cairo(X, wall).

facts: 
cairo(1..4, 1..4).cosenza(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "cairo" and "cosenza". However, avoid any combination where predicate "cairo" has label "wall".
Answer: combination(X,Y):-cairo(X, _),cosenza(Y), not cairo(X, wall).
combination(X,Y):-cairo(X, _),cosenza(Y).
combination(X,Y):-cairo(X, _),cosenza(Y), label("name").
assign(X, Y)
retum(X, Y).
retum(X, Y), label("name").
retum(X, Y), label("price").
retum(X, Y), label("description").
retum(X, Y), label("city").
retum(X, Y), label("age").
retum(X, Y), label("shape").
retum

unique_rules: 
['combination(X,Y):-cairo(X, _),cosenza(Y), not cairo(X, wall).', 'combination(X,Y):-cairo(X, _),cosenza(Y).', 'combination(X,Y):-cairo(X, _),cosenza(Y), label("name").']

parsed: 
combination(X,Y):-cairo(X, _),cosenza(Y), not cairo(X, wall).

jaccard: 1.0


406
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "mumbai" having fields "ID","cosenzaID","hair", and the predicate "cosenza" having fields "ID","quality". Define a predicate "mumbai_cosenza" that associates to each "mumbai" the "quality" of "cosenza" only where "quality" is different than 18.

answer from file: 
mumbai_cosenza(X,Z):-mumbai(X,Y,_),cosenza(Y,Z), Z!=18.

facts: 
mumbai("ID","cosenzaID","hair").cosenza("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "mumbai" having fields "ID","cosenzaID","hair", and the predicate "cosenza" having fields "ID","quality". Define a predicate "mumbai_cosenza" that associates to each "mumbai" the "quality" of "cosenza" only where "quality" is different than 18.
Answer: mumbai_cosenza(X,Z):-mumbai(X,Y,_),cosenza(Y,Z), Z!=18.
mumbai_cosenza(X,Y,_):-mumbai(X,Y,Z),cosenza(Y,Z), Z==18.
 quíname(X,Y,Z):-mumbai(X,Y,_),cosenza(Y,Z), Z!=18.
 quíname(X,Y,Z):-mumbai(X,Y,Z),cosenza(Y,Z), Z==18.
 quíname(X,Y,Z):-mumbai(X,Y,Z),not cosenza(

unique_rules: 
['mumbai_cosenza(X,Z):-mumbai(X,Y,_),cosenza(Y,Z), Z!=18.', 'mumbai_cosenza(X,Y,_):-mumbai(X,Y,Z),cosenza(Y,Z), Z==18.', 'quíname(X,Y,Z):-mumbai(X,Y,_),cosenza(Y,Z), Z!=18.', 'quíname(X,Y,Z):-mumbai(X,Y,Z),cosenza(Y,Z), Z==18.', 'quíname(X,Y,Z):-mumbai(X,Y,Z),not cosenza(.']

parsed: 
mumbai_cosenza(X,Z):-mumbai(X,Y,_),cosenza(Y,Z), Z!=18.

jaccard: 1.0


407
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "laptop" having fields "ID","chairID","owner", and the predicate "chair" having fields "ID","owner". Define a predicate "laptop_chair" that associates to each "laptop", not associated with label "wall", the attribute "owner" of "chair".

answer from file: 
laptop_chair(X,Z):-laptop(X,Y,_),chair(Y,Z),not laptop(X,_,wall).

facts: 
laptop("ID","chairID","owner").chair("ID","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "laptop" having fields "ID","chairID","owner", and the predicate "chair" having fields "ID","owner". Define a predicate "laptop_chair" that associates to each "laptop", not associated with label "wall", the attribute "owner" of "chair".
Result: " arrivant_chair"
Definition: " arrivant_chair"(X,Z):-laptop(X,Y,_),chair(Y,Z),not laptop(X,_,wall).
 arrivant_chair(X,Z):-laptop(X,Y,_),chair(Y,Z).
assign(X,Z):- arrivant_chair(X,Z).
 arrivant_chair(X,Z):- arrivant(X,_,wall).
 respekt(X,Z):- arrivant(X,_,wall).
 respekt(X,Z):- arrivant_chair(X,Z).
retum(X,Z):- arrivant(X,_,wall).
retum(X,Z):- arrivant_chair(X

unique_rules: 
['Definition: " arrivant_chair"(X,Z):-laptop(X,Y,_),chair(Y,Z),not laptop(X,_,wall).', 'arrivant_chair(X,Z):-laptop(X,Y,_),chair(Y,Z).', 'assign(X,Z):- arrivant_chair(X,Z).', 'arrivant_chair(X,Z):- arrivant(X,_,wall).', 'respekt(X,Z):- arrivant(X,_,wall).', 'respekt(X,Z):- arrivant_chair(X,Z).', 'retum(X,Z):- arrivant(X,_,wall).', 'retum(X,Z):- arrivant_chair(X.']

parsed: 
Definition: " arrivant_chair"(X,Z):-laptop(X,Y,_),chair(Y,Z),not laptop(X,_,wall).

jaccard: 0.0


408
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "laptop" as the transitive closure of predicate "mumbai". Then, assign exactly one label from the set storm,cloud,roof to each element in "laptop".

answer from file: 
laptop(X,Y):-mumbai(X,Y).
laptop(X,Y):-mumbai(X,Z),laptop(Z,Y).
assign(X,"storm")|assign(X,"cloud")|assign(X,"roof"):-laptop(X,_).

facts: 
mumbai(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "laptop" as the transitive closure of predicate "mumbai". Then, assign exactly one label from the set storm,cloud,roof to each element in "laptop".
Answer: laptop(X,Y):-mumbai(X,Y).
laptop(X,Y):-mumbai(X,Z),laptop(Z,Y).
assign(X,"storm")|assign(X,"cloud")|assign(X,"roof"):-laptop(X,_).
retum(X,Y):-assign(X,Y).
retum(X,Y):-assign(X,Z),retum(Z,Y).
retum(X,Y):-assign(X,Z),retum(Z,Y).
retum(X,Y):-assign(X,Z),retum(Z,Y),retum(Y,Y).
retum(X,Y):-assign(X,

unique_rules: 
['laptop(X,Y):-mumbai(X,Y).', 'laptop(X,Y):-mumbai(X,Z),laptop(Z,Y).', 'assign(X,"storm")|assign(X,"cloud")|assign(X,"roof"):-laptop(X,_).', 'retum(X,Y):-assign(X,Y).', 'retum(X,Y):-assign(X,Z),retum(Z,Y).', 'retum(X,Y):-assign(X,Z),retum(Z,Y),retum(Y,Y).', 'retum(X,Y):-assign(X,.']

parsed: 
laptop(X,Y):-mumbai(X,Y).
laptop(X,Y):-mumbai(X,Z),laptop(Z,Y).
assign(X,"storm")|assign(X,"cloud")|assign(X,"roof"):-laptop(X,_).

jaccard: 1.0


409
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lightblue. The labels are butterfly,laptop,chair,roof,flower,wall. Consider only the predicate lightblue not associated with label "wall".

answer from file: 
assign(X,"butterfly")|assign(X,"laptop")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"wall"):-lightblue(X, _), not lightblue(X, wall).

facts: 
lightblue(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lightblue. The labels are butterfly,laptop,chair,roof,flower,wall. Consider only the predicate lightblue not associated with label "wall".
Answer: assign(X," épar")|assign(X,"height")|assign(X,"price")|assign(X,"author")|assign(X,"city")|assign(X,"description")|assign(X,"name")|assign(X,"age")|assign(X,"shape")|retum(X, Y), Y!=wall .
retum(X, Y), Y!=wall, Z, Z!=description, Z!=name, Z!=age, Z!=shape, Z!=description, Z!=name, Z!=age, Z!=shape, Z!=description, Z!=name, Z!=age, Z!=shape, Z!=description, Z!=name, Z!=age, Z

unique_rules: 
[]

parsed: 


jaccard: 0.0


410
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate lake and labels hair, owner having label owner different than 54. The labels are flower,butterfly.

answer from file: 
assign(X,"flower")|assign(X,"butterfly"):-lake(X, Y), Y!=54 .

facts: 
lake(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate lake and labels hair, owner having label owner different than 54. The labels are flower,butterfly.
Answer: assign(X,"florence")|assign(X," arrivant")|assign(X,"height")|assign(X,"author")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"name")|assign(X,"shape") : lake(X, Y), Y!=54 .
 köp(X, Y), Y!=54 .
```
 köp(X, Y), Y!=54 .
```
The predicate "florence" has label "description", and the predicate "height" has label "description". So, the predicate "assign" has label "description" only where

unique_rules: 
[]

parsed: 


jaccard: 0.0


411
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate pink. The labels are flower,wall,laptop.  Then, filter and return only the elements assigned to label laptop.".

answer from file: 
assign(X,"flower")|assign(X,"wall")|assign(X,"laptop"):-pink(X).
select(X):-assign(X, "laptop").

facts: 
pink(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate pink. The labels are flower,wall,laptop.  Then, filter and return only the elements assigned to label laptop.".
Answer: assign(X,"flower")|assign(X,"wall")|assign(X,"laptop"):-pink(X).
select(X):-assign(X, "laptop").
retum(X).
```
Assign(X,"florence")|Assign(X,"wall")|Assign(X,"height"):-pink(X).
select(X):-assign(X, "height").
retum(X).
```
The two solutions are equivalent. The predicate "pink" has label "height", and the predicate "height" has label "florence". So, the two solutions assign exactly a label among a given set of labels to a set of elements expressed by predicate "pink".
The

unique_rules: 
['assign(X,"flower")|assign(X,"wall")|assign(X,"laptop"):-pink(X).', 'select(X):-assign(X, "laptop").', 'Assign(X,"florence")|Assign(X,"wall")|Assign(X,"height"):-pink(X).', 'select(X):-assign(X, "height").']

parsed: 
assign(X,"flower")|assign(X,"wall")|assign(X,"laptop"):-pink(X).
select(X):-assign(X, "laptop").

jaccard: 1.0


412
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "pink" and "wall". However, avoid any combination where predicate "pink" has label "chair".

answer from file: 
combination(X,Y):-pink(X, _),wall(Y), not pink(X, chair).

facts: 
pink(1..4, 1..4).wall(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "pink" and "wall". However, avoid any combination where predicate "pink" has label "chair".
Answer: combination(X,Y):-pink(X, _),wall(Y), not pink(X, chair).
combination(X,Y):-pink(X, _),wall(Y).
combination(X,Y):-pink(X, chair),wall(Y).
```
Combinations are expressed by predicate "combination".
However, avoid any combination where predicate "pink" has label "chair".
The two sets are expressed by predicates "pink" and "wall".
So, the predicate "combination" has label "object".
And, the label "object" is not associated with "name".
So, "object" is not considered in the "object" predicate.
Result:

unique_rules: 
['combination(X,Y):-pink(X, _),wall(Y), not pink(X, chair).', 'combination(X,Y):-pink(X, _),wall(Y).', 'combination(X,Y):-pink(X, chair),wall(Y).']

parsed: 
combination(X,Y):-pink(X, _),wall(Y), not pink(X, chair).

jaccard: 1.0


413
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "laptop" having fields "ID","surname","butterflyID", and the predicate "butterfly" having fields "ID","hair". Define a predicate "laptop_butterfly" that associates to each "laptop" the "hair" of "butterfly" only where "hair" is different than 64.

answer from file: 
laptop_butterfly(X,Z):-laptop(X,_,Y),butterfly(Y,Z), Z!=64.

facts: 
laptop("ID","surname","butterflyID").butterfly("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "laptop" having fields "ID","surname","butterflyID", and the predicate "butterfly" having fields "ID","hair". Define a predicate "laptop_butterfly" that associates to each "laptop" the "hair" of "butterfly" only where "hair" is different than 64.
Answer: laptop_ bréeder(X,Z):-laptop(X,_,Y),butterfly(Y,Z), Z!=64.
 assurent(X,Z):-laptop(X,_,Y),creator(Y,Z), Z!=64.
 auxquels(X,Z):-laptop(X,_,Y),creator(Y,Z), Z!=64.
retum(X,Z):-laptop(X,_,Y),creator(Y,Z), Z==64.
retum(X,Z):-creator(Y,Z), Z==64.
retum(X,Z):-creator(Y,Z), Z!=64,shape(X,Z).
retum(

unique_rules: 
['laptop_ bréeder(X,Z):-laptop(X,_,Y),butterfly(Y,Z), Z!=64.', 'assurent(X,Z):-laptop(X,_,Y),creator(Y,Z), Z!=64.', 'auxquels(X,Z):-laptop(X,_,Y),creator(Y,Z), Z!=64.', 'retum(X,Z):-laptop(X,_,Y),creator(Y,Z), Z==64.', 'retum(X,Z):-creator(Y,Z), Z==64.', 'retum(X,Z):-creator(Y,Z), Z!=64,shape(X,Z).']

parsed: 
laptop_ bréeder(X,Z):-laptop(X,_,Y),butterfly(Y,Z), Z!=64.

jaccard: 0.0


414
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "desk" having fields "ID","owner","strengthID", and the predicate "strength" having fields "ID","lake". Define a predicate "desk_strength" that associates to each "desk", not associated with label "butterfly", the attribute "lake" of "strength".

answer from file: 
desk_strength(X,Z):-desk(X,_,Y),strength(Y,Z),not desk(X,butterfly,_).

facts: 
desk("ID","owner","strengthID").strength("ID","lake").

generated: 
Write an ASP program for the following problem. Consider predicate "desk" having fields "ID","owner","strengthID", and the predicate "strength" having fields "ID","lake". Define a predicate "desk_strength" that associates to each "desk", not associated with label "butterfly", the attribute "lake" of "strength".
Result: desk_strength(X,Z):-desk(X,_,Y),strength(Y,Z),not desk(X,_,_).
 espressione(X,Z):-desk(X,_,Y),strength(Y,Z).
 espressione(X,_,Z):-desk(X,_,Y),not strength(Y,Z).
table(X,Z):- espressione(X,Z).
table(X,_,Z):- espressione(X,Z).
table(X,_,Z):-desk(X,_,Y),strength(Y,Z).
table(X,_,Z):-desk(X,_,_),strength(Y,Z),not table(Y,_,Z).

unique_rules: 
['Result: desk_strength(X,Z):-desk(X,_,Y),strength(Y,Z),not desk(X,_,_).', 'espressione(X,Z):-desk(X,_,Y),strength(Y,Z).', 'espressione(X,_,Z):-desk(X,_,Y),not strength(Y,Z).', 'table(X,Z):- espressione(X,Z).', 'table(X,_,Z):- espressione(X,Z).', 'table(X,_,Z):-desk(X,_,Y),strength(Y,Z).', 'table(X,_,Z):-desk(X,_,_),strength(Y,Z),not table(Y,_,Z).']

parsed: 
Result: desk_strength(X,Z):-desk(X,_,Y),strength(Y,Z),not desk(X,_,_).

jaccard: 0.0


415
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "black" as the transitive closure of predicate "mumbai". Then, assign exactly one label from the set wall,roof,cloud,chair,storm,flower to each element in "black".

answer from file: 
black(X,Y):-mumbai(X,Y).
black(X,Y):-mumbai(X,Z),black(Z,Y).
assign(X,"wall")|assign(X,"roof")|assign(X,"cloud")|assign(X,"chair")|assign(X,"storm")|assign(X,"flower"):-black(X,_).

facts: 
mumbai(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "black" as the transitive closure of predicate "mumbai". Then, assign exactly one label from the set wall,roof,cloud,chair,storm,flower to each element in "black".
Answer: black(X,Y):-mumbai(X,Y).
black(X,Y):-mumbai(X,Z),black(Z,Y).
assign(X,"wall")|assign(X,"roof")|assign(X,"cloud")|assign(X,"chair")|assign(X,"storm")|assign(X,"florence"):-black(X,_).
retum:assign(X,"florence").
retum:assign(X,"city").
retum:assign(X,"name").
retum:assign(X,"price").
retum:assign(X,"age").
retum:assign(X,"description").
retum:assign(X,"height").


unique_rules: 
['black(X,Y):-mumbai(X,Y).', 'black(X,Y):-mumbai(X,Z),black(Z,Y).', 'assign(X,"wall")|assign(X,"roof")|assign(X,"cloud")|assign(X,"chair")|assign(X,"storm")|assign(X,"florence"):-black(X,_).']

parsed: 
black(X,Y):-mumbai(X,Y).
black(X,Y):-mumbai(X,Z),black(Z,Y).
assign(X,"wall")|assign(X,"roof")|assign(X,"cloud")|assign(X,"chair")|assign(X,"storm")|assign(X,"florence"):-black(X,_).

jaccard: 0.0


416
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate cosenza. The labels are desk,storm,wall,roof,laptop,butterfly,flower,cloud. Consider only the predicate cosenza not associated with label "butterfly".

answer from file: 
assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X,"roof")|assign(X,"laptop")|assign(X,"butterfly")|assign(X,"flower")|assign(X,"cloud"):-cosenza(X, _), not cosenza(X, butterfly).

facts: 
cosenza(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate cosenza. The labels are desk,storm,wall,roof,laptop,butterfly,flower,cloud. Consider only the predicate cosenza not associated with label "butterfly".
Answer: assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X,"roof")|assign(X,"laptop")|assign(X," arrivant")|assign(X,"author")|assign(X,"city")|assign(X,"description") :-cosenza(X, _), not cosenza(X, butterfly).
```
assign(X,"description") :-cosenza(X, _), not cosenza(X, description).
```
Explanation:
The predicate "cosenza" has label "description", and the label "description" is not associated with label "author".
So, for each element, we assign exactly one

unique_rules: 
['assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X,"roof")|assign(X,"laptop")|assign(X," arrivant")|assign(X,"author")|assign(X,"city")|assign(X,"description") :-cosenza(X, _), not cosenza(X, butterfly).', 'assign(X,"description") :-cosenza(X, _), not cosenza(X, description).']

parsed: 
assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X,"roof")|assign(X,"laptop")|assign(X," arrivant")|assign(X,"author")|assign(X,"city")|assign(X,"description") :-cosenza(X, _), not cosenza(X, butterfly).

jaccard: 0.0


417
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate lake and labels weight, quality having label quality different than 65. The labels are chair,desk,storm,flower,cloud.

answer from file: 
assign(X,"chair")|assign(X,"desk")|assign(X,"storm")|assign(X,"flower")|assign(X,"cloud"):-lake(X, Y), Y!=65 .

facts: 
lake(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate lake and labels weight, quality having label quality different than 65. The labels are chair,desk,storm,flower,cloud.
Answer: assign(X,"chair")|assign(X,"desk")|assign(X,"storm")|assign(X,"flower")|assign(X,"cloud"):-lake(X, Y), Y!=65 .
```
assign(X,"chair")|assign(X,"desk")|assign(X,"storm")|assign(X,"flower")|assign(X,"cloud"):-lake(X, Y), Y!=65 .
```

unique_rules: 
['assign(X,"chair")|assign(X,"desk")|assign(X,"storm")|assign(X,"flower")|assign(X,"cloud"):-lake(X, Y), Y!=65 .']

parsed: 
assign(X,"chair")|assign(X,"desk")|assign(X,"storm")|assign(X,"flower")|assign(X,"cloud"):-lake(X, Y), Y!=65 .

jaccard: 1.0


418
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate darkmagenta. The labels are storm,desk,laptop,butterfly,wall,cloud,flower,chair,roof.  Then, filter and return only the elements assigned to label butterfly.".

answer from file: 
assign(X,"storm")|assign(X,"desk")|assign(X,"laptop")|assign(X,"butterfly")|assign(X,"wall")|assign(X,"cloud")|assign(X,"flower")|assign(X,"chair")|assign(X,"roof"):-darkmagenta(X).
select(X):-assign(X, "butterfly").

facts: 
darkmagenta(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate darkmagenta. The labels are storm,desk,laptop,butterfly,wall,cloud,flower,chair,roof.  Then, filter and return only the elements assigned to label butterfly.".
Answer: assign(X,"storm")|assign(X,"desk")|assign(X," felicità")|assign(X,"author")|assign(X,"wall")|assign(X,"cloud")|assign(X,"florence")|assign(X,"chair")|assign(X,"roof"):-darkmagenta(X).
select(X):-assign(X, "author").
retum(X):-assign(X, "florence").
retum(X):-assign(X, "author").
retum(X):-assign(X, " felicità").
retum(X):-assign(X, "city").
retum(X):-assign(X, "name").
retum(X):-

unique_rules: 
['assign(X,"storm")|assign(X,"desk")|assign(X," felicità")|assign(X,"author")|assign(X,"wall")|assign(X,"cloud")|assign(X,"florence")|assign(X,"chair")|assign(X,"roof"):-darkmagenta(X).', 'select(X):-assign(X, "author").', 'retum(X):-assign(X, "florence").', 'retum(X):-assign(X, "author").', 'retum(X):-assign(X, " felicità").', 'retum(X):-assign(X, "city").', 'retum(X):-assign(X, "name").', 'retum(X):-.']

parsed: 
assign(X,"storm")|assign(X,"desk")|assign(X," felicità")|assign(X,"author")|assign(X,"wall")|assign(X,"cloud")|assign(X,"florence")|assign(X,"chair")|assign(X,"roof"):-darkmagenta(X).
select(X):-assign(X, "author").

jaccard: 1.0


419
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "quality" and "delhi". However, avoid any combination where predicate "quality" has label "laptop".

answer from file: 
combination(X,Y):-quality(X, _),delhi(Y), not quality(X, laptop).

facts: 
quality(1..4, 1..4).delhi(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "quality" and "delhi". However, avoid any combination where predicate "quality" has label "laptop".
Answer: combination(X,Y):-quality(X, _),delhi(Y), not quality(X, _).
combination(X,Y):-quality(X, _),delhi(Y).
assign(X, Y)
combination(X, Y).
retum.
assign(X, Y),
retum.
assign(X, Y),
retum.
retum.
 quíntuple(X,Y):-combination(X,Y).
 quíntuple(X,Y):-combination(X, Y).
 quíntuple(X,Y):-combination(X, Y).
 quíntuple(X,Y):-combination(X, Y).
retum.
 quí

unique_rules: 
['combination(X,Y):-quality(X, _),delhi(Y), not quality(X, _).', 'combination(X,Y):-quality(X, _),delhi(Y).', 'quíntuple(X,Y):-combination(X,Y).', 'quíntuple(X,Y):-combination(X, Y).']

parsed: 
combination(X,Y):-quality(X, _),delhi(Y), not quality(X, _).

jaccard: 0.0


420
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "hair" having fields "ID","cloudID","surname", and the predicate "cloud" having fields "ID","quality". Define a predicate "hair_cloud" that associates to each "hair" the "quality" of "cloud" only where "quality" is different than 63.

answer from file: 
hair_cloud(X,Z):-hair(X,Y,_),cloud(Y,Z), Z!=63.

facts: 
hair("ID","cloudID","surname").cloud("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "hair" having fields "ID","cloudID","surname", and the predicate "cloud" having fields "ID","quality". Define a predicate "hair_cloud" that associates to each "hair" the "quality" of "cloud" only where "quality" is different than 63.
Answer: hair_cloud(X,Z):-hair(X,Y,_),cloud(Y,Z), Z!=63.
hair_cloud(X,Y,_):-hair(X,Y,_),cloud(Y,Z), Z==63.
assign(X,Z):-hair_cloud(X,Y,_).
retum(X,Y,_),Z!=63.
retum(X,Y,_),Z==63.
 quíname(X,Y,Z):-hair(X,Y,_),cloud(Y,Z), Z!=63.
 quíname(X,Y,Z):-hair(X,Y,_),cloud(Y,Z),

unique_rules: 
['hair_cloud(X,Z):-hair(X,Y,_),cloud(Y,Z), Z!=63.', 'hair_cloud(X,Y,_):-hair(X,Y,_),cloud(Y,Z), Z==63.', 'assign(X,Z):-hair_cloud(X,Y,_).', 'quíname(X,Y,Z):-hair(X,Y,_),cloud(Y,Z), Z!=63.', 'quíname(X,Y,Z):-hair(X,Y,_),cloud(Y,Z),.']

parsed: 
hair_cloud(X,Z):-hair(X,Y,_),cloud(Y,Z), Z!=63.

jaccard: 1.0


421
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "quality" having fields "ID","delhiID","quality", and the predicate "delhi" having fields "ID","owner". Define a predicate "quality_delhi" that associates to each "quality", not associated with label "laptop", the attribute "owner" of "delhi".

answer from file: 
quality_delhi(X,Z):-quality(X,Y,_),delhi(Y,Z),not quality(X,_,laptop).

facts: 
quality("ID","delhiID","quality").delhi("ID","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "quality" having fields "ID","delhiID","quality", and the predicate "delhi" having fields "ID","owner". Define a predicate "quality_delhi" that associates to each "quality", not associated with label "laptop", the attribute "owner" of "delhi".
Answer: quality_delhi(X,Z):-quality(X,Y,_),delhi(Y,Z),not quality(X,_,laptop).
 ángulo(X,Y,Z):-quality(X,Y,_),delhi(Y,Z).
 ángulo(X,_,Z):-quality(X,_,_),delhi(Y,Z).
 ángulo(X,_,Z):-quality(X,_,_),delhi(Y,Z),not quality(X,_,laptop).
 ángulo(X,_,Z):-quality(X,_,_),delhi(Y,Z),label(X,moto).
 ángulo(X,_,Z):-quality(X

unique_rules: 
['quality_delhi(X,Z):-quality(X,Y,_),delhi(Y,Z),not quality(X,_,laptop).', 'ángulo(X,Y,Z):-quality(X,Y,_),delhi(Y,Z).', 'ángulo(X,_,Z):-quality(X,_,_),delhi(Y,Z).', 'ángulo(X,_,Z):-quality(X,_,_),delhi(Y,Z),not quality(X,_,laptop).', 'ángulo(X,_,Z):-quality(X,_,_),delhi(Y,Z),label(X,moto).', 'ángulo(X,_,Z):-quality(X.']

parsed: 
quality_delhi(X,Z):-quality(X,Y,_),delhi(Y,Z),not quality(X,_,laptop).

jaccard: 1.0


422
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "moscow" as the transitive closure of predicate "black". Then, assign exactly one label from the set laptop,storm to each element in "moscow".

answer from file: 
moscow(X,Y):-black(X,Y).
moscow(X,Y):-black(X,Z),moscow(Z,Y).
assign(X,"laptop")|assign(X,"storm"):-moscow(X,_).

facts: 
black(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "moscow" as the transitive closure of predicate "black". Then, assign exactly one label from the set laptop,storm to each element in "moscow".
Answer: moscow(X,Y):-black(X,Y).
moscow(X,Y):-black(X,Z),moscow(Z,Y).
assign(X,"laptop")|assign(X,"storm"):-moscow(X,_).
assign(X,"shape")|assign(X,"price"):- felicità(X).
 felicità(X) :-assign(X,Y),florence(Y).
florence(Y) :-assign(Y,Z), felicità(Z).
 felicità(X) :-assign(X,Z),florence(Z).
 felicità(X) :-assign(X,Z),price(Z).
 felicità(X) :-

unique_rules: 
['moscow(X,Y):-black(X,Y).', 'moscow(X,Y):-black(X,Z),moscow(Z,Y).', 'assign(X,"laptop")|assign(X,"storm"):-moscow(X,_).', 'assign(X,"shape")|assign(X,"price"):- felicità(X).', 'felicità(X) :-assign(X,Y),florence(Y).', 'florence(Y) :-assign(Y,Z), felicità(Z).', 'felicità(X) :-assign(X,Z),florence(Z).', 'felicità(X) :-assign(X,Z),price(Z).', 'felicità(X) :-.']

parsed: 
moscow(X,Y):-black(X,Y).
moscow(X,Y):-black(X,Z),moscow(Z,Y).
assign(X,"laptop")|assign(X,"storm"):-moscow(X,_).

jaccard: 1.0


423
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate wall. The labels are butterfly,desk. Consider only the predicate wall not associated with label "chair".

answer from file: 
assign(X,"butterfly")|assign(X,"desk"):-wall(X, _), not wall(X, chair).

facts: 
wall(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate wall. The labels are butterfly,desk. Consider only the predicate wall not associated with label "chair".
Answer: assign(X," épargnac")|assign(X,"description")|assign(X,"height")|assign(X,"price")|assign(X,"city")|assign(X,"age")|assign(X,"name")|assign(X,"shape")|assign(X,"author")|assign(X,"description")|assign(X,"height")|assign(X,"price")|assign(X,"city")|assign(X,"age")|assign(X,"name")|assign(X,"shape") : wall(X, _), not wall(X, chair).
```
The predicate "wall" has label "description", and the predicate "description" has label

unique_rules: 
[]

parsed: 


jaccard: 0.0


424
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate black and labels owner, quality having label quality different than 92. The labels are cloud,roof,laptop,butterfly,flower,chair,storm.

answer from file: 
assign(X,"cloud")|assign(X,"roof")|assign(X,"laptop")|assign(X,"butterfly")|assign(X,"flower")|assign(X,"chair")|assign(X,"storm"):-black(X, Y), Y!=92 .

facts: 
black(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate black and labels owner, quality having label quality different than 92. The labels are cloud,roof,laptop,butterfly,flower,chair,storm.
Answer: assign(X,"cloud")|assign(X,"roof")|assign(X,"laptop")|assign(X," arrivant")|assign(X,"florence")|assign(X,"chair")|assign(X,"storm"):-black(X, Y), Y!=92 .
```
Assign exactly a label among a given set of labels to a set of elements expressed by predicate black and labels price,creator,description,age,city,height,shape,name,author,price,age,description,height,shape,city,name,price,creator,description,age,height,shape,city,name,price,author,description,height,shape,city,name,

unique_rules: 
['assign(X,"cloud")|assign(X,"roof")|assign(X,"laptop")|assign(X," arrivant")|assign(X,"florence")|assign(X,"chair")|assign(X,"storm"):-black(X, Y), Y!=92 .']

parsed: 
assign(X,"cloud")|assign(X,"roof")|assign(X,"laptop")|assign(X," arrivant")|assign(X,"florence")|assign(X,"chair")|assign(X,"storm"):-black(X, Y), Y!=92 .

jaccard: 1.0


425
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate cairo. The labels are butterfly,roof,wall,flower,chair.  Then, filter and return only the elements assigned to label chair.".

answer from file: 
assign(X,"butterfly")|assign(X,"roof")|assign(X,"wall")|assign(X,"flower")|assign(X,"chair"):-cairo(X).
select(X):-assign(X, "chair").

facts: 
cairo(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate cairo. The labels are butterfly,roof,wall,flower,chair.  Then, filter and return only the elements assigned to label chair.".
Answer: assign(X," originaux")|assign(X,"florence")|assign(X,"city")|assign(X,"name")|assign(X,"price")|assign(X,"description")
retum(X, "chair").
select(X):-assign(X, "description").
```
Assign(X," originaux")|assign(X,"florence")|assign(X,"city")|assign(X,"name")|assign(X,"price")|assign(X,"description")
retum(X, "description").
select(X):-assign(X, "description").
retum(X, "description").
cario(X).
retum(X, "

unique_rules: 
['select(X):-assign(X, "description").']

parsed: 
select(X):-assign(X, "description").

jaccard: 0.0


426
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "owner" and "lake". However, avoid any combination where predicate "owner" has label "wall".

answer from file: 
combination(X,Y):-owner(X, _),lake(Y), not owner(X, wall).

facts: 
owner(1..4, 1..4).lake(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "owner" and "lake". However, avoid any combination where predicate "owner" has label "wall".
Answer: combination(X,Y):-owner(X, _),lake(Y), not owner(X, wall).
combination(X,Y):-owner(X, _),lake(Y).
combination(X,Y):-owner(X, _),lake(Y), label(X, wall).
```
Combinations are expressed by predicate "combination".
However, avoid any combination where predicate "owner" has label "wall".
The two sets are expressed by predicates "owner" and "lake".
So, the predicate "combination" generates all the combinations of elements from the two sets.
The two sets are expressed by predicates "owner" and "lake".
However, avoid any combination where

unique_rules: 
['combination(X,Y):-owner(X, _),lake(Y), not owner(X, wall).', 'combination(X,Y):-owner(X, _),lake(Y).', 'combination(X,Y):-owner(X, _),lake(Y), label(X, wall).']

parsed: 
combination(X,Y):-owner(X, _),lake(Y), not owner(X, wall).

jaccard: 1.0


427
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "surname" having fields "ID","torontoID","hair", and the predicate "toronto" having fields "ID","hair". Define a predicate "surname_toronto" that associates to each "surname" the "hair" of "toronto" only where "hair" is different than 2.

answer from file: 
surname_toronto(X,Z):-surname(X,Y,_),toronto(Y,Z), Z!=2.

facts: 
surname("ID","torontoID","hair").toronto("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "surname" having fields "ID","torontoID","hair", and the predicate "toronto" having fields "ID","hair". Define a predicate "surname_toronto" that associates to each "surname" the "hair" of "toronto" only where "hair" is different than 2.
Answer: surname_toronto(X,Z):-surname(X,Y,_),toronto(Y,Z), Z!=2.
 assurent(X,Y,Z):-surname(X,Y,_),toronto(Y,Z), Z==2.
 ángulo(X,Y,Z):-surname(X,Y,_),toronto(Y,Z), Z==1.
 ángulo(X,Y,Z):-surname(X,Y,_),toronto(Y,Z), Z==3.
 ángulo(X,Y,Z):-surname(X,Y,_),description(Y,Z), Z==1.
 ángulo(X,Y,Z):-description(Y,Z

unique_rules: 
['surname_toronto(X,Z):-surname(X,Y,_),toronto(Y,Z), Z!=2.', 'assurent(X,Y,Z):-surname(X,Y,_),toronto(Y,Z), Z==2.', 'ángulo(X,Y,Z):-surname(X,Y,_),toronto(Y,Z), Z==1.', 'ángulo(X,Y,Z):-surname(X,Y,_),toronto(Y,Z), Z==3.', 'ángulo(X,Y,Z):-surname(X,Y,_),description(Y,Z), Z==1.', 'ángulo(X,Y,Z):-description(Y,Z.']

parsed: 
surname_toronto(X,Z):-surname(X,Y,_),toronto(Y,Z), Z!=2.

jaccard: 1.0


428
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "chicago" having fields "ID","hair","delhiID", and the predicate "delhi" having fields "ID","hair". Define a predicate "chicago_delhi" that associates to each "chicago", not associated with label "laptop", the attribute "hair" of "delhi".

answer from file: 
chicago_delhi(X,Z):-chicago(X,_,Y),delhi(Y,Z),not chicago(X,laptop,_).

facts: 
chicago("ID","hair","delhiID").delhi("ID","hair").

generated: 
Write an ASP program for the following problem. Consider predicate "chicago" having fields "ID","hair","delhiID", and the predicate "delhi" having fields "ID","hair". Define a predicate "chicago_delhi" that associates to each "chicago", not associated with label "laptop", the attribute "hair" of "delhi".
Answer: chicago_delhi(X,Z):-chicago(X,_,Y),delhi(Y,Z),not chicago(X,laptop,_).
 ángulo(X,Y):-chicago(X,_,Y),delhi(Y,Z).
 ángulo(X,Y):-chicago(X,_,Y),not delhi(Y,Z).
 ángulo(X,Y):-chicago(X,_,Y),not ( felicità(X,_,Y) and shape(X,_,Y).
 ángulo(X,Y):-chicago(X,_,Y),not ( felicità(X,_,Y) and shape(X,_,Y).
 ángulo(X,Y

unique_rules: 
['chicago_delhi(X,Z):-chicago(X,_,Y),delhi(Y,Z),not chicago(X,laptop,_).', 'ángulo(X,Y):-chicago(X,_,Y),delhi(Y,Z).', 'ángulo(X,Y):-chicago(X,_,Y),not delhi(Y,Z).', 'ángulo(X,Y):-chicago(X,_,Y),not ( felicità(X,_,Y) and shape(X,_,Y).']

parsed: 
chicago_delhi(X,Z):-chicago(X,_,Y),delhi(Y,Z),not chicago(X,laptop,_).

jaccard: 1.0


429
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "butterfly" as the transitive closure of predicate "roof". Then, assign exactly one label from the set chair,wall,desk,laptop,butterfly,cloud to each element in "butterfly".

answer from file: 
butterfly(X,Y):-roof(X,Y).
butterfly(X,Y):-roof(X,Z),butterfly(Z,Y).
assign(X,"chair")|assign(X,"wall")|assign(X,"desk")|assign(X,"laptop")|assign(X,"butterfly")|assign(X,"cloud"):-butterfly(X,_).

facts: 
roof(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "butterfly" as the transitive closure of predicate "roof". Then, assign exactly one label from the set chair,wall,desk,laptop,butterfly,cloud to each element in "butterfly".
Answer: butterfly(X,Y):-roof(X,Y).
 originaux(X,Y):-roof(X,Z),description(Z,Y).
assign(X,"chair")|assign(X,"wall")|assign(X,"desk")|assign(X,"laptop")|assign(X,"florence")|assign(X,"cloud"):-butterfly(X,_).
retum(X,Y):-assign(X,Y).
retum(X,Y):-assign(X,Z),retum(Z,Y).
retum(X,Y):-assign(X,Z),retum(Z,Y).
retum(X,Y):-assign(X,Z),retum(Z

unique_rules: 
['butterfly(X,Y):-roof(X,Y).', 'originaux(X,Y):-roof(X,Z),description(Z,Y).', 'assign(X,"chair")|assign(X,"wall")|assign(X,"desk")|assign(X,"laptop")|assign(X,"florence")|assign(X,"cloud"):-butterfly(X,_).', 'retum(X,Y):-assign(X,Y).', 'retum(X,Y):-assign(X,Z),retum(Z,Y).', 'retum(X,Y):-assign(X,Z),retum(Z.']

parsed: 
butterfly(X,Y):-roof(X,Y).
originaux(X,Y):-roof(X,Z),description(Z,Y).
assign(X,"chair")|assign(X,"wall")|assign(X,"desk")|assign(X,"laptop")|assign(X,"florence")|assign(X,"cloud"):-butterfly(X,_).

jaccard: 1.0


430
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate chair. The labels are roof,storm,laptop,chair,butterfly,cloud,wall,flower,desk. Consider only the predicate chair not associated with label "wall".

answer from file: 
assign(X,"roof")|assign(X,"storm")|assign(X,"laptop")|assign(X,"chair")|assign(X,"butterfly")|assign(X,"cloud")|assign(X,"wall")|assign(X,"flower")|assign(X,"desk"):-chair(X, _), not chair(X, wall).

facts: 
chair(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate chair. The labels are roof,storm,laptop,chair,butterfly,cloud,wall,flower,desk. Consider only the predicate chair not associated with label "wall".
Answer: assign(X," felicità")|assign(X,"price")|assign(X,"city")|assign(X,"name")|assign(X,"age")|assign(X,"description")|assign(X,"author")|assign(X,"height")|assign(X,"shape")|retum(X).
retum(X) :-chair(X, _), not chair(X, wall).
assign(X, " felicità") :-chair(X, _).
assign(X, "price") :-chair(X, _).
assign(X, "city") :-chair(X, _).
assign(X, "name") :-chair(X, _).


unique_rules: 
['retum(X) :-chair(X, _), not chair(X, wall).', 'assign(X, " felicità") :-chair(X, _).', 'assign(X, "price") :-chair(X, _).', 'assign(X, "city") :-chair(X, _).', 'assign(X, "name") :-chair(X, _).']

parsed: 
retum(X) :-chair(X, _), not chair(X, wall).

jaccard: 0.0


431
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate chicago and labels surname, weight having label weight different than 35. The labels are wall,roof,butterfly,desk.

answer from file: 
assign(X,"wall")|assign(X,"roof")|assign(X,"butterfly")|assign(X,"desk"):-chicago(X, Y), Y!=35 .

facts: 
chicago(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate chicago and labels surname, weight having label weight different than 35. The labels are wall,roof,butterfly,desk.
Answer: assign(X,"wall")|assign(X,"roof")|assign(X," épar")|assign(X,"desk"):-chicago(X, Y), Y!=35 .
```
assign(X,"wall")|assign(X,"roof")|assign(X," épar")|assign(X,"desk"):-chicago(X, Y), Y!=35 .
```

unique_rules: 
['assign(X,"wall")|assign(X,"roof")|assign(X," épar")|assign(X,"desk"):-chicago(X, Y), Y!=35 .']

parsed: 
assign(X,"wall")|assign(X,"roof")|assign(X," épar")|assign(X,"desk"):-chicago(X, Y), Y!=35 .

jaccard: 0.0


432
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate cosenza. The labels are storm,roof,desk,butterfly,chair.  Then, filter and return only the elements assigned to label butterfly.".

answer from file: 
assign(X,"storm")|assign(X,"roof")|assign(X,"desk")|assign(X,"butterfly")|assign(X,"chair"):-cosenza(X).
select(X):-assign(X, "butterfly").

facts: 
cosenza(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate cosenza. The labels are storm,roof,desk,butterfly,chair.  Then, filter and return only the elements assigned to label butterfly.".
Answer: assign(X,"storm")|assign(X,"roof")|assign(X,"desk")|assign(X," épar")|assign(X,"chair"):-cosenza(X).
select(X):-assign(X, " épar").
retum(X).
 köp: for(X in cosenza) do assign(X, " épar").
retum(X).
 köp: for(X in cosenza) do assign(X, "price").
retum(X).
 köp: for(X in cosenza) do assign(X, "description").
retum(X).
 köp: for(X in cosenza) do assign(X, "city").
retum(

unique_rules: 
['assign(X,"storm")|assign(X,"roof")|assign(X,"desk")|assign(X," épar")|assign(X,"chair"):-cosenza(X).', 'select(X):-assign(X, " épar").']

parsed: 
assign(X,"storm")|assign(X,"roof")|assign(X,"desk")|assign(X," épar")|assign(X,"chair"):-cosenza(X).
select(X):-assign(X, " épar").

jaccard: 1.0


433
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "black" and "cosenza". However, avoid any combination where predicate "black" has label "wall".

answer from file: 
combination(X,Y):-black(X, _),cosenza(Y), not black(X, wall).

facts: 
black(1..4, 1..4).cosenza(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "black" and "cosenza". However, avoid any combination where predicate "black" has label "wall".
Answer: combination(X,Y):-black(X),cosenza(Y), not black(X,wall).
combination(X,Y):-black(X),cosenza(Y).
combination(X,Y):-black(X),cosenza(Y), label(X,wall).
assign(X,Y):-black(X),cosenza(Y).
assign(X,Y):-black(X),cosenza(Y), label(X,height).
retum(X,Y):-black(X),cosenza(Y), label(X,price).
retum(X,Y):-black(X),cosenza(Y), label(X,age).
retum(X,

unique_rules: 
['combination(X,Y):-black(X),cosenza(Y), not black(X,wall).', 'combination(X,Y):-black(X),cosenza(Y).', 'combination(X,Y):-black(X),cosenza(Y), label(X,wall).', 'assign(X,Y):-black(X),cosenza(Y).', 'assign(X,Y):-black(X),cosenza(Y), label(X,height).', 'retum(X,Y):-black(X),cosenza(Y), label(X,price).', 'retum(X,Y):-black(X),cosenza(Y), label(X,age).']

parsed: 
combination(X,Y):-black(X),cosenza(Y), not black(X,wall).

jaccard: 0.0


434
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "quality" having fields "ID","strength","lakeID", and the predicate "lake" having fields "ID","owner". Define a predicate "quality_lake" that associates to each "quality" the "owner" of "lake" only where "owner" is different than 68.

answer from file: 
quality_lake(X,Z):-quality(X,_,Y),lake(Y,Z), Z!=68.

facts: 
quality("ID","strength","lakeID").lake("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "quality" having fields "ID","strength","lakeID", and the predicate "lake" having fields "ID","owner". Define a predicate "quality_lake" that associates to each "quality" the "owner" of "lake" only where "owner" is different than 68.
Answer: quality_lake(X,Z):-quality(X,_,Y),lake(Y,Z), Z!=68.
 quí_lake(X,Z):-quality(X,_,Y),lake(Y,Z), Z==68.
 quí_lake(X,Z):-quality(X,_,Y),lake(Y,Z), Z!=68, Z!=71.
 quí_lake(X,Z):-quality(X,_,Y),lake(Y,Z), Z==71.
 quí_lake(X,Z):-quality(X,_,Y),lake(Y,Z), Z==72.
 quí_lake(X,Z

unique_rules: 
['quality_lake(X,Z):-quality(X,_,Y),lake(Y,Z), Z!=68.', 'quí_lake(X,Z):-quality(X,_,Y),lake(Y,Z), Z==68.', 'quí_lake(X,Z):-quality(X,_,Y),lake(Y,Z), Z!=68, Z!=71.', 'quí_lake(X,Z):-quality(X,_,Y),lake(Y,Z), Z==71.', 'quí_lake(X,Z):-quality(X,_,Y),lake(Y,Z), Z==72.']

parsed: 
quality_lake(X,Z):-quality(X,_,Y),lake(Y,Z), Z!=68.

jaccard: 1.0


435
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "lake" having fields "ID","pinkID","lake", and the predicate "pink" having fields "ID","strength". Define a predicate "lake_pink" that associates to each "lake", not associated with label "desk", the attribute "strength" of "pink".

answer from file: 
lake_pink(X,Z):-lake(X,Y,_),pink(Y,Z),not lake(X,_,desk).

facts: 
lake("ID","pinkID","lake").pink("ID","strength").

generated: 
Write an ASP program for the following problem. Consider predicate "lake" having fields "ID","pinkID","lake", and the predicate "pink" having fields "ID","strength". Define a predicate "lake_pink" that associates to each "lake", not associated with label "desk", the attribute "strength" of "pink".
Answer: lake_pink(X,Z):-lake(X,Y,_),pink(Y,Z),not lake(X,_,desk).
lake_pink(X,Y,_):-lake(X,_,_),pink(Y,Z),label(X,table).
assign(X,Z):-lake_pink(X,_,_).
retum(X,Z).
retum(X,_,table).
 quí Medellín, Bogotá, Puebla, Cartagena, Málaga, Madrid, Girona, Verona, Quito, London, Paris, City, Flecha, Nuova York, Shanghai, Bogota, Puebla, Cartagena, Madrid, Girona, Verona, Quito, London, Paris, City, Flecha, Nuova York

unique_rules: 
['lake_pink(X,Z):-lake(X,Y,_),pink(Y,Z),not lake(X,_,desk).', 'lake_pink(X,Y,_):-lake(X,_,_),pink(Y,Z),label(X,table).', 'assign(X,Z):-lake_pink(X,_,_).']

parsed: 
lake_pink(X,Z):-lake(X,Y,_),pink(Y,Z),not lake(X,_,desk).

jaccard: 1.0


436
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "owner" as the transitive closure of predicate "storm". Then, assign exactly one label from the set cloud,storm,butterfly,chair,desk,laptop,roof,wall to each element in "owner".

answer from file: 
owner(X,Y):-storm(X,Y).
owner(X,Y):-storm(X,Z),owner(Z,Y).
assign(X,"cloud")|assign(X,"storm")|assign(X,"butterfly")|assign(X,"chair")|assign(X,"desk")|assign(X,"laptop")|assign(X,"roof")|assign(X,"wall"):-owner(X,_).

facts: 
storm(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "owner" as the transitive closure of predicate "storm". Then, assign exactly one label from the set cloud,storm,butterfly,chair,desk,laptop,roof,wall to each element in "owner".
Answer: owner(X,Y):-storm(X,Y).
owner(X,Y):-storm(X,Z),owner(Z,Y).
assign(X,"cloud")|assign(X,"storm")|assign(X," arrivant")|assign(X," felicità")|assign(X,"description")|assign(X,"height")|assign(X,"price")|assign(X,"name")|assign(X,"age"):-owner(X,_).
retum(X,Y):-owner(X,Y).
retum(X,Y):-owner(X,Z),retum(Z,Y).
retum(X,Y):-owner(X,Z),retum(

unique_rules: 
['owner(X,Y):-storm(X,Y).', 'owner(X,Y):-storm(X,Z),owner(Z,Y).', 'assign(X,"cloud")|assign(X,"storm")|assign(X," arrivant")|assign(X," felicità")|assign(X,"description")|assign(X,"height")|assign(X,"price")|assign(X,"name")|assign(X,"age"):-owner(X,_).', 'retum(X,Y):-owner(X,Y).', 'retum(X,Y):-owner(X,Z),retum(Z,Y).', 'retum(X,Y):-owner(X,Z),retum(.']

parsed: 
owner(X,Y):-storm(X,Y).
owner(X,Y):-storm(X,Z),owner(Z,Y).
assign(X,"cloud")|assign(X,"storm")|assign(X," arrivant")|assign(X," felicità")|assign(X,"description")|assign(X,"height")|assign(X,"price")|assign(X,"name")|assign(X,"age"):-owner(X,_).

jaccard: 0.0


437
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are roof,chair,flower,desk,cloud,wall,laptop. Consider only the predicate lake not associated with label "wall".

answer from file: 
assign(X,"roof")|assign(X,"chair")|assign(X,"flower")|assign(X,"desk")|assign(X,"cloud")|assign(X,"wall")|assign(X,"laptop"):-lake(X, _), not lake(X, wall).

facts: 
lake(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are roof,chair,flower,desk,cloud,wall,laptop. Consider only the predicate lake not associated with label "wall".
Answer: assign(X," felicità")|assign(X,"price")|assign(X,"city")|assign(X,"age")|assign(X,"name")|assign(X,"shape")|assign(X,"height")|assign(X,"author")|retum(X, Y), Y!=wall .
retum(X, Y), Y!=wall.
 köp(X, Y), Y!=wall.
 kollek(X, Y), Y!=wall.
 bleue(X, Y), Y!=wall.
shape(X, Y), Y!=wall.
height(X, Y), Y!=wall.
author(X, Y), Y!=wall.
age(X

unique_rules: 
[]

parsed: 


jaccard: 0.0


438
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate flower and labels lake, weight having label weight different than 85. The labels are desk,roof,wall,storm,flower,butterfly,cloud,chair.

answer from file: 
assign(X,"desk")|assign(X,"roof")|assign(X,"wall")|assign(X,"storm")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"cloud")|assign(X,"chair"):-flower(X, Y), Y!=85 .

facts: 
flower(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate flower and labels lake, weight having label weight different than 85. The labels are desk,roof,wall,storm,flower,butterfly,cloud,chair.
Answer: assign(X,"desk")|assign(X,"roof")|assign(X,"wall")|assign(X,"storm")|assign(X,"flower")|assign(X," arrivant")|assign(X,"height")|assign(X,"chair"):-flower(X, Y), Y!=85 .
```
Assign(X,"height")|Assign(X,"chair"):-florence(X, Y), Y!=85 .
```
The predicate florence has label "height", and the predicate price has label "description".
So, the predicate florence has label "height" only where "height" is different than 85.
The predicate price has label

unique_rules: 
['assign(X,"desk")|assign(X,"roof")|assign(X,"wall")|assign(X,"storm")|assign(X,"flower")|assign(X," arrivant")|assign(X,"height")|assign(X,"chair"):-flower(X, Y), Y!=85 .', 'Assign(X,"height")|Assign(X,"chair"):-florence(X, Y), Y!=85 .']

parsed: 
assign(X,"desk")|assign(X,"roof")|assign(X,"wall")|assign(X,"storm")|assign(X,"flower")|assign(X," arrivant")|assign(X,"height")|assign(X,"chair"):-flower(X, Y), Y!=85 .

jaccard: 0.0


439
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate white. The labels are cloud,wall.  Then, filter and return only the elements assigned to label cloud.".

answer from file: 
assign(X,"cloud")|assign(X,"wall"):-white(X).
select(X):-assign(X, "cloud").

facts: 
white(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate white. The labels are cloud,wall.  Then, filter and return only the elements assigned to label cloud.".
Answer: assign(X,"cloud")|assign(X,"wall"):-white(X).
select(X):-assign(X, "cloud").
retum(X).
```
Assign(X,"cloud")|Assign(X,"wall"):-white(X).
select(X):-assign(X, "cloud").
retum(X).
filter(X, "cloud").
```

unique_rules: 
['assign(X,"cloud")|assign(X,"wall"):-white(X).', 'select(X):-assign(X, "cloud").', 'Assign(X,"cloud")|Assign(X,"wall"):-white(X).']

parsed: 
assign(X,"cloud")|assign(X,"wall"):-white(X).
select(X):-assign(X, "cloud").

jaccard: 1.0


440
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "chicago" and "wall". However, avoid any combination where predicate "chicago" has label "desk".

answer from file: 
combination(X,Y):-chicago(X, _),wall(Y), not chicago(X, desk).

facts: 
chicago(1..4, 1..4).wall(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "chicago" and "wall". However, avoid any combination where predicate "chicago" has label "desk".
Answer: combination(X,Y):-chicago(X, _),wall(Y), not chicago(X, desk).
combination(X,Y):-chicago(X, _),wall(Y).
combination(X,Y):-chicago(X, _),wall(Y), label(X, "age").
assign(X, Y)
retum(X, Y).
retum(X, Y), label(X, "age").
retum(X, Y), label(X, "name").
retum(X, Y), label(X, "price").
retum(X, Y), label(X, "description").
retum(X, Y), label(X, "city

unique_rules: 
['combination(X,Y):-chicago(X, _),wall(Y), not chicago(X, desk).', 'combination(X,Y):-chicago(X, _),wall(Y).', 'combination(X,Y):-chicago(X, _),wall(Y), label(X, "age").']

parsed: 
combination(X,Y):-chicago(X, _),wall(Y), not chicago(X, desk).

jaccard: 1.0


441
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "lightblue" having fields "ID","wallID","owner", and the predicate "wall" having fields "ID","surname". Define a predicate "lightblue_wall" that associates to each "lightblue" the "surname" of "wall" only where "surname" is different than 87.

answer from file: 
lightblue_wall(X,Z):-lightblue(X,Y,_),wall(Y,Z), Z!=87.

facts: 
lightblue("ID","wallID","owner").wall("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "lightblue" having fields "ID","wallID","owner", and the predicate "wall" having fields "ID","surname". Define a predicate "lightblue_wall" that associates to each "lightblue" the "surname" of "wall" only where "surname" is different than 87.
Answer: lightblue_wall(X,Z):-lightblue(X,Y,_),wall(Y,Z), Z!=87.
lightblue_wall(X,Y,_):-lightblue(X,Y,_),wall(Y,Z), Z==87.
assign(X,"name")|assign(X,"description")|assign(X,"price"):-lightblue_wall(X,_,_).
retum(X,Y),Z!=87.
retum(X,_,87).
 quíname(X,Z), Z!=87.
 quíname(X,Z), Z==87.
 quíname(X,_,_).


unique_rules: 
['lightblue_wall(X,Z):-lightblue(X,Y,_),wall(Y,Z), Z!=87.', 'lightblue_wall(X,Y,_):-lightblue(X,Y,_),wall(Y,Z), Z==87.', 'assign(X,"name")|assign(X,"description")|assign(X,"price"):-lightblue_wall(X,_,_).']

parsed: 
lightblue_wall(X,Z):-lightblue(X,Y,_),wall(Y,Z), Z!=87.

jaccard: 1.0


442
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "chicago" having fields "ID","cosenzaID","quality", and the predicate "cosenza" having fields "ID","owner". Define a predicate "chicago_cosenza" that associates to each "chicago", not associated with label "butterfly", the attribute "owner" of "cosenza".

answer from file: 
chicago_cosenza(X,Z):-chicago(X,Y,_),cosenza(Y,Z),not chicago(X,_,butterfly).

facts: 
chicago("ID","cosenzaID","quality").cosenza("ID","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "chicago" having fields "ID","cosenzaID","quality", and the predicate "cosenza" having fields "ID","owner". Define a predicate "chicago_cosenza" that associates to each "chicago", not associated with label "butterfly", the attribute "owner" of "cosenza".
Result: chicago_cosenza(X,Z):-chicago(X,Y,_),cosenza(Y,Z),not chicago(X,_,butterfly).
 ángulo(X,Y,Z):-chicago(X,Y,_),cosenza(Y,Z),not chicago(X,_,creator).
 ángulo(X,Y,Z):-chicago(X,Y,creator),creator(Y,Z),not chicago(X,_,name).
 ángulo(X,Y,Z):-chicago(X,Y,creator),creator(Y,Z),name(X,_,creator).
 ángulo(X,Y,Z):-chicago(X,Y,creator),creator(Y

unique_rules: 
['Result: chicago_cosenza(X,Z):-chicago(X,Y,_),cosenza(Y,Z),not chicago(X,_,butterfly).', 'ángulo(X,Y,Z):-chicago(X,Y,_),cosenza(Y,Z),not chicago(X,_,creator).', 'ángulo(X,Y,Z):-chicago(X,Y,creator),creator(Y,Z),not chicago(X,_,name).', 'ángulo(X,Y,Z):-chicago(X,Y,creator),creator(Y,Z),name(X,_,creator).', 'ángulo(X,Y,Z):-chicago(X,Y,creator),creator(Y.']

parsed: 
Result: chicago_cosenza(X,Z):-chicago(X,Y,_),cosenza(Y,Z),not chicago(X,_,butterfly).

jaccard: 0.0


443
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "cloud" as the transitive closure of predicate "weight". Then, assign exactly one label from the set roof,butterfly,storm,laptop,chair,desk,wall to each element in "cloud".

answer from file: 
cloud(X,Y):-weight(X,Y).
cloud(X,Y):-weight(X,Z),cloud(Z,Y).
assign(X,"roof")|assign(X,"butterfly")|assign(X,"storm")|assign(X,"laptop")|assign(X,"chair")|assign(X,"desk")|assign(X,"wall"):-cloud(X,_).

facts: 
weight(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "cloud" as the transitive closure of predicate "weight". Then, assign exactly one label from the set roof,butterfly,storm,laptop,chair,desk,wall to each element in "cloud".
Answer: cloud(X,Y):-weight(X,Y).
cloud(X,Y):-weight(X,Z),cloud(Z,Y).
assign(X,"roof")|assign(X," arrivant")|assign(X,"height")|assign(X,"shape")|assign(X,"price")|assign(X,"age")|assign(X,"description")|assign(X,"city"):-cloud(X,_).
retum:assign(X,"description").
retum:assign(X,"city").
retum:assign(X,"description").
retum:assign(X,"price").
retum:assign(X,"age").
retum:assign(X,"description").

unique_rules: 
['cloud(X,Y):-weight(X,Y).', 'cloud(X,Y):-weight(X,Z),cloud(Z,Y).', 'assign(X,"roof")|assign(X," arrivant")|assign(X,"height")|assign(X,"shape")|assign(X,"price")|assign(X,"age")|assign(X,"description")|assign(X,"city"):-cloud(X,_).']

parsed: 
cloud(X,Y):-weight(X,Y).
cloud(X,Y):-weight(X,Z),cloud(Z,Y).
assign(X,"roof")|assign(X," arrivant")|assign(X,"height")|assign(X,"shape")|assign(X,"price")|assign(X,"age")|assign(X,"description")|assign(X,"city"):-cloud(X,_).

jaccard: 0.0


444
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are butterfly,roof,wall,cloud. Consider only the predicate lake not associated with label "butterfly".

answer from file: 
assign(X,"butterfly")|assign(X,"roof")|assign(X,"wall")|assign(X,"cloud"):-lake(X, _), not lake(X, butterfly).

facts: 
lake(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are butterfly,roof,wall,cloud. Consider only the predicate lake not associated with label "butterfly".
Answer: assign(X," épar")|assign(X,"height")|assign(X,"price")|assign(X,"author")|assign(X,"city")|assign(X,"description")|assign(X,"name")|retum(X, Y), Y!=11.
retum(X, Y) :- lake(X, _), Y!=11.
assign(X, "description") :- lake(X, _), Y==11.
assign(X, "name") :- lake(X, _), Y==12.
assign(X, "city") :- lake(X, _), Y==13.
assign(X, "author")

unique_rules: 
['retum(X, Y) :- lake(X, _), Y!=11.', 'assign(X, "description") :- lake(X, _), Y==11.', 'assign(X, "name") :- lake(X, _), Y==12.', 'assign(X, "city") :- lake(X, _), Y==13.']

parsed: 
retum(X, Y) :- lake(X, _), Y!=11.

jaccard: 0.0


445
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate pink and labels lake, hair having label hair different than 23. The labels are laptop,storm,chair,desk,flower,cloud,butterfly,roof.

answer from file: 
assign(X,"laptop")|assign(X,"storm")|assign(X,"chair")|assign(X,"desk")|assign(X,"flower")|assign(X,"cloud")|assign(X,"butterfly")|assign(X,"roof"):-pink(X, Y), Y!=23 .

facts: 
pink(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate pink and labels lake, hair having label hair different than 23. The labels are laptop,storm,chair,desk,flower,cloud,butterfly,roof.
Answer: assign(X," arrivant")|assign(X," peines")|assign(X,"height")|assign(X,"creator")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"name")|assign(X,"price")|assign(X,"shape") :-pink(X, Y), Y!=23 .
Assign(X,"creator")|assign(X,"description")|assign(X,"name")|assign(X,"price")|assign(X,"shape") :-florence(X).
The predicate florence has label description, and the predicate pink has label creator, description, name, price,

unique_rules: 
['assign(X," arrivant")|assign(X," peines")|assign(X,"height")|assign(X,"creator")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"name")|assign(X,"price")|assign(X,"shape") :-pink(X, Y), Y!=23 .', 'Assign(X,"creator")|assign(X,"description")|assign(X,"name")|assign(X,"price")|assign(X,"shape") :-florence(X).']

parsed: 
assign(X," arrivant")|assign(X," peines")|assign(X,"height")|assign(X,"creator")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"name")|assign(X,"price")|assign(X,"shape") :-pink(X, Y), Y!=23 .

jaccard: 0.0


446
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate pink. The labels are chair,cloud,wall,roof,butterfly.  Then, filter and return only the elements assigned to label cloud.".

answer from file: 
assign(X,"chair")|assign(X,"cloud")|assign(X,"wall")|assign(X,"roof")|assign(X,"butterfly"):-pink(X).
select(X):-assign(X, "cloud").

facts: 
pink(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate pink. The labels are chair,cloud,wall,roof,butterfly.  Then, filter and return only the elements assigned to label cloud.".
Answer: assign(X,"chair")|assign(X,"cloud")|assign(X,"wall")|assign(X,"roof")|assign(X," arrivant")==>pink(X).
select(X):-assign(X, "cloud").
```
Assign(X,"chair")|Assign(X,"cloud")|Assign(X,"wall")|Assign(X,"roof")|Assign(X," arrivant")==>pink(X).
select(X):-assign(X, "cloud").
retum(X).
```

unique_rules: 
['select(X):-assign(X, "cloud").']

parsed: 
select(X):-assign(X, "cloud").

jaccard: 0.0


447
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "chair" and "butterfly". However, avoid any combination where predicate "chair" has label "laptop".

answer from file: 
combination(X,Y):-chair(X, _),butterfly(Y), not chair(X, laptop).

facts: 
chair(1..4, 1..4).butterfly(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "chair" and "butterfly". However, avoid any combination where predicate "chair" has label "laptop".
Answer: combination(X,Y):-chair(X, _),butterfly(Y), not chair(X, laptop).
combination(X,Y):-chair(X, _),moto(Y).
combination(X,Y):-chair(X, _),age(Y).
combination(X,Y):-moto(X), age(Y).
combination(X,Y):-moto(X), age(Y), _ .
_ : X, Y.
```
The predicate "moto" has label "age", but not "name".
The predicate "age" has label "age".
So, the predicate "moto" has label "age" only where "age" is lower than 

unique_rules: 
['combination(X,Y):-chair(X, _),butterfly(Y), not chair(X, laptop).', 'combination(X,Y):-chair(X, _),moto(Y).', 'combination(X,Y):-chair(X, _),age(Y).', 'combination(X,Y):-moto(X), age(Y).', 'combination(X,Y):-moto(X), age(Y), _ .']

parsed: 
combination(X,Y):-chair(X, _),butterfly(Y), not chair(X, laptop).

jaccard: 1.0


448
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "cloud" having fields "ID","surname","whiteID", and the predicate "white" having fields "ID","surname". Define a predicate "cloud_white" that associates to each "cloud" the "surname" of "white" only where "surname" is different than 34.

answer from file: 
cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34.

facts: 
cloud("ID","surname","whiteID").white("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "cloud" having fields "ID","surname","whiteID", and the predicate "white" having fields "ID","surname". Define a predicate "cloud_white" that associates to each "cloud" the "surname" of "white" only where "surname" is different than 34.
Answer: cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34.
cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z==34.

unique_rules: 
['cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34.', 'cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z==34.']

parsed: 
cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34.

jaccard: 1.0


449
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "black" having fields "ID","quality","lakeID", and the predicate "lake" having fields "ID","owner". Define a predicate "black_lake" that associates to each "black", not associated with label "laptop", the attribute "owner" of "lake".

answer from file: 
black_lake(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).

facts: 
black("ID","quality","lakeID").lake("ID","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "black" having fields "ID","quality","lakeID", and the predicate "lake" having fields "ID","owner". Define a predicate "black_lake" that associates to each "black", not associated with label "laptop", the attribute "owner" of "lake".
Answer: black_lake(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).
black_lake(X,_,Y):-black(X,_,Y),lake(Y,Z),label(X,laptop).
assign(X,black_lake(X,_,Y))|assign(X,lake(Y,Z)),not black(X,_,Y).
retum(X,Y):-black(X,_,Y),not label(X,moto).
retum(X,Y):-black(X,moto,_),not label(X,city).
retum(X,Y):-black(X,city,_),

unique_rules: 
['black_lake(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).', 'black_lake(X,_,Y):-black(X,_,Y),lake(Y,Z),label(X,laptop).', 'retum(X,Y):-black(X,_,Y),not label(X,moto).', 'retum(X,Y):-black(X,moto,_),not label(X,city).', 'retum(X,Y):-black(X,city,_),.']

parsed: 
black_lake(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).

jaccard: 1.0


450
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "storm" as the transitive closure of predicate "white". Then, assign exactly one label from the set chair,roof,flower,desk,wall,laptop,storm,cloud to each element in "storm".

answer from file: 
storm(X,Y):-white(X,Y).
storm(X,Y):-white(X,Z),storm(Z,Y).
assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk")|assign(X,"wall")|assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud"):-storm(X,_).

facts: 
white(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "storm" as the transitive closure of predicate "white". Then, assign exactly one label from the set chair,roof,flower,desk,wall,laptop,storm,cloud to each element in "storm".
Answer: storm(X,Y):-white(X,Y).
storm(X,Y):-white(X,Z),storm(Z,Y).
assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk")|assign(X,"wall")|assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud"):-storm(X,_).
retum:
assign(X,"city")|assign(X,"age")|assign(X,"name")|assign(X,"price")|assign(X,"description")|assign(X,"author")|assign(X,"creator")|assign

unique_rules: 
['storm(X,Y):-white(X,Y).', 'storm(X,Y):-white(X,Z),storm(Z,Y).', 'assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk")|assign(X,"wall")|assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud"):-storm(X,_).']

parsed: 
storm(X,Y):-white(X,Y).
storm(X,Y):-white(X,Z),storm(Z,Y).
assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk")|assign(X,"wall")|assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud"):-storm(X,_).

jaccard: 1.0


451
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate moscow. The labels are desk,butterfly,cloud,flower,wall. Consider only the predicate moscow not associated with label "roof".

answer from file: 
assign(X,"desk")|assign(X,"butterfly")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-moscow(X, _), not moscow(X, roof).

facts: 
moscow(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate moscow. The labels are desk,butterfly,cloud,flower,wall. Consider only the predicate moscow not associated with label "roof".
Answer: assign(X,"desk")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-moscow(X, _), not moscow(X, roof).
```
assign(X,"description")|assign(X,"height")|assign(X,"price")|assign(X,"age"):-moscow(X, _).
```
The predicate moscow has label "description", and the predicate price has label "height". So, the labels are description,height,price,age,name,city,age,shape,author,creator,description,price,height,name,city,age,shape

unique_rules: 
['assign(X,"desk")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-moscow(X, _), not moscow(X, roof).', 'assign(X,"description")|assign(X,"height")|assign(X,"price")|assign(X,"age"):-moscow(X, _).']

parsed: 
assign(X,"desk")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-moscow(X, _), not moscow(X, roof).

jaccard: 1.0


452
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate darkmagenta and labels strength, weight having label weight different than 20. The labels are wall,butterfly.

answer from file: 
assign(X,"wall")|assign(X,"butterfly"):-darkmagenta(X, Y), Y!=20 .

facts: 
darkmagenta(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate darkmagenta and labels strength, weight having label weight different than 20. The labels are wall,butterfly.
Answer: assign(X,"wall")|assign(X," venant")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"author")   espérate(X, Y), Y!=20 .
```
 espérate(X, Y), Y!=20 .
```
The predicate darkmagenta has label "height", and the labels are price,age,author,creator,description,shape,city,name,height,age,description,price,author,creator,shape,city,name,height,description,price,age,author,creator,shape,city,name,height,description,price,age,author,

unique_rules: 
[]

parsed: 


jaccard: 0.0


453
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate desk. The labels are desk,storm,wall,butterfly,chair,laptop,flower,roof,cloud.  Then, filter and return only the elements assigned to label chair.".

answer from file: 
assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X,"butterfly")|assign(X,"chair")|assign(X,"laptop")|assign(X,"flower")|assign(X,"roof")|assign(X,"cloud"):-desk(X).
select(X):-assign(X, "chair").

facts: 
desk(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate desk. The labels are desk,storm,wall,butterfly,chair,laptop,flower,roof,cloud.  Then, filter and return only the elements assigned to label chair.".
Answer: assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X," arrivant")|assign(X,"chair")|assign(X," cœurs")|assign(X,"florence")|assign(X,"roof")|assign(X,"cloud"):-desk(X).
select(X):-assign(X, "chair").
```
The predicate desk has label "description", and the predicate chair has label "price".
So, the predicate assign has label "description" only where "description" is lower than 75.
Then, select only the elements assigned to label "description".
The predicate select has label "description" only where

unique_rules: 
['assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X," arrivant")|assign(X,"chair")|assign(X," cœurs")|assign(X,"florence")|assign(X,"roof")|assign(X,"cloud"):-desk(X).', 'select(X):-assign(X, "chair").']

parsed: 
assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X," arrivant")|assign(X,"chair")|assign(X," cœurs")|assign(X,"florence")|assign(X,"roof")|assign(X,"cloud"):-desk(X).
select(X):-assign(X, "chair").

jaccard: 1.0


454
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "singapore" and "delhi". However, avoid any combination where predicate "singapore" has label "butterfly".

answer from file: 
combination(X,Y):-singapore(X, _),delhi(Y), not singapore(X, butterfly).

facts: 
singapore(1..4, 1..4).delhi(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "singapore" and "delhi". However, avoid any combination where predicate "singapore" has label "butterfly".
Answer: combination(X,Y):-singapore(X, _),delhi(Y), not singapore(X, butterfly).
combination(X,Y):-singapore(X, _),delhi(Y).
combination(X,Y):-singapore(X, _),delhi(Y), label("color").
assign(X, Y)
combination(X, Y).
retum(X, Y).
 espressione(X, Y):-assign(X, Y).
retum(X, Y).
 bleue(X, Y):-assign(X, Y), label("color").
 bleue(X, Y):-assign(X, Y), label("age").
 bleue(X

unique_rules: 
['combination(X,Y):-singapore(X, _),delhi(Y), not singapore(X, butterfly).', 'combination(X,Y):-singapore(X, _),delhi(Y).', 'combination(X,Y):-singapore(X, _),delhi(Y), label("color").', 'espressione(X, Y):-assign(X, Y).', 'bleue(X, Y):-assign(X, Y), label("color").', 'bleue(X, Y):-assign(X, Y), label("age").']

parsed: 
combination(X,Y):-singapore(X, _),delhi(Y), not singapore(X, butterfly).

jaccard: 1.0


455
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "flower" having fields "ID","hairID","lake", and the predicate "hair" having fields "ID","surname". Define a predicate "flower_hair" that associates to each "flower" the "surname" of "hair" only where "surname" is different than 94.

answer from file: 
flower_hair(X,Z):-flower(X,Y,_),hair(Y,Z), Z!=94.

facts: 
flower("ID","hairID","lake").hair("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "flower" having fields "ID","hairID","lake", and the predicate "hair" having fields "ID","surname". Define a predicate "flower_hair" that associates to each "flower" the "surname" of "hair" only where "surname" is different than 94.
Answer: flower_hair(X,Z):-flower(X,Y,_),hair(Y,Z), Z!=94.
flower_hair(X,Y,_):-flower(X,Y,Z),Z==94.
 áng=flower_hair(X,Y,_).
 áng.shape= italienne.shape.name.height.age.description,1,1,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,

unique_rules: 
['flower_hair(X,Z):-flower(X,Y,_),hair(Y,Z), Z!=94.', 'flower_hair(X,Y,_):-flower(X,Y,Z),Z==94.']

parsed: 
flower_hair(X,Z):-flower(X,Y,_),hair(Y,Z), Z!=94.

jaccard: 1.0


456
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "hair" having fields "ID","surname","moscowID", and the predicate "moscow" having fields "ID","lake". Define a predicate "hair_moscow" that associates to each "hair", not associated with label "chair", the attribute "lake" of "moscow".

answer from file: 
hair_moscow(X,Z):-hair(X,_,Y),moscow(Y,Z),not hair(X,chair,_).

facts: 
hair("ID","surname","moscowID").moscow("ID","lake").

generated: 
Write an ASP program for the following problem. Consider predicate "hair" having fields "ID","surname","moscowID", and the predicate "moscow" having fields "ID","lake". Define a predicate "hair_moscow" that associates to each "hair", not associated with label "chair", the attribute "lake" of "moscow".
Answer: hair_moscow(X,Z):-hair(X,_,Y),moscow(Y,Z),not hair(X,chair,_).
hair_moscow(X,Z):-hair(X,_,Y),moscow(Y,Z),label(X,chair).
assign(X,Z):-hair_moscow(X,Z).
retum(X,Z),not hair(X,chair,_).
retum(X,Z),label(X,chair).
 quíname(X,Z):-hair(X,_,Y),moscow(Y,Z),not hair(X,chair,_).
 quíname(X,Z):-hair(X,

unique_rules: 
['hair_moscow(X,Z):-hair(X,_,Y),moscow(Y,Z),not hair(X,chair,_).', 'hair_moscow(X,Z):-hair(X,_,Y),moscow(Y,Z),label(X,chair).', 'assign(X,Z):-hair_moscow(X,Z).', 'quíname(X,Z):-hair(X,_,Y),moscow(Y,Z),not hair(X,chair,_).', 'quíname(X,Z):-hair(X,.']

parsed: 
hair_moscow(X,Z):-hair(X,_,Y),moscow(Y,Z),not hair(X,chair,_).

jaccard: 1.0


457
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "cairo" as the transitive closure of predicate "lightblue". Then, assign exactly one label from the set chair,laptop,flower,desk,storm,butterfly to each element in "cairo".

answer from file: 
cairo(X,Y):-lightblue(X,Y).
cairo(X,Y):-lightblue(X,Z),cairo(Z,Y).
assign(X,"chair")|assign(X,"laptop")|assign(X,"flower")|assign(X,"desk")|assign(X,"storm")|assign(X,"butterfly"):-cairo(X,_).

facts: 
lightblue(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "cairo" as the transitive closure of predicate "lightblue". Then, assign exactly one label from the set chair,laptop,flower,desk,storm,butterfly to each element in "cairo".
Answer: cairo(X,Y):-lightblue(X,Y).
cairo(X,Y):-lightblue(X,Z),cairo(Z,Y).
assign(X,"chair")|assign(X," arrivant")|assign(X,"florence")|assign(X,"desk")|assign(X,"storm")|assign(X,"height") :-cairo(X,_).
retum(X,Y):-assign(X,Y).
retum(X,Y):-assign(X,Z),retum(Z,Y).
retum(X,Y):-assign(X,Z),retum(Z,Y).
retum(X,Y):-assign(X,Z

unique_rules: 
['cairo(X,Y):-lightblue(X,Y).', 'cairo(X,Y):-lightblue(X,Z),cairo(Z,Y).', 'assign(X,"chair")|assign(X," arrivant")|assign(X,"florence")|assign(X,"desk")|assign(X,"storm")|assign(X,"height") :-cairo(X,_).', 'retum(X,Y):-assign(X,Y).', 'retum(X,Y):-assign(X,Z),retum(Z,Y).', 'retum(X,Y):-assign(X,Z.']

parsed: 
cairo(X,Y):-lightblue(X,Y).
cairo(X,Y):-lightblue(X,Z),cairo(Z,Y).
assign(X,"chair")|assign(X," arrivant")|assign(X,"florence")|assign(X,"desk")|assign(X,"storm")|assign(X,"height") :-cairo(X,_).

jaccard: 0.0


458
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate white. The labels are laptop,chair,flower. Consider only the predicate white not associated with label "flower".

answer from file: 
assign(X,"laptop")|assign(X,"chair")|assign(X,"flower"):-white(X, _), not white(X, flower).

facts: 
white(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate white. The labels are laptop,chair,flower. Consider only the predicate white not associated with label "flower".
Answer: assign(X," arrivant")|assign(X,"chair")|assign(X,"flower"):-white(X, _), not white(X, flower).
```
assign(X," arrivant")|assign(X,"chair")|assign(X,"flower"):-white(X, _), not white(X, flower).
```

unique_rules: 
['assign(X," arrivant")|assign(X,"chair")|assign(X,"flower"):-white(X, _), not white(X, flower).']

parsed: 
assign(X," arrivant")|assign(X,"chair")|assign(X,"flower"):-white(X, _), not white(X, flower).

jaccard: 1.0


459
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate butterfly and labels quality, strength having label strength different than 2. The labels are laptop,cloud,desk,chair,storm,butterfly,flower,roof.

answer from file: 
assign(X,"laptop")|assign(X,"cloud")|assign(X,"desk")|assign(X,"chair")|assign(X,"storm")|assign(X,"butterfly")|assign(X,"flower")|assign(X,"roof"):-butterfly(X, Y), Y!=2 .

facts: 
butterfly(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate butterfly and labels quality, strength having label strength different than 2. The labels are laptop,cloud,desk,chair,storm,butterfly,flower,roof.
Answer: assign(X,"laptop")|assign(X,"cloud")|assign(X,"desk")|assign(X,"chair")|assign(X,"storm")|assign(X,"butterfly")|assign(X,"flower")|assign(X,"roof"):-butterfly(X, Y), Y!=2 .
```
 köp:assign(X,"car")| köp:assign(X,"age")| köp:assign(X,"name")| köp:assign(X,"price")| köp:assign(X,"description")| köp:assign(X,"city")| köp:assign(X,"shape")| köp:assign(X,"height")| köp:assign(X

unique_rules: 
['assign(X,"laptop")|assign(X,"cloud")|assign(X,"desk")|assign(X,"chair")|assign(X,"storm")|assign(X,"butterfly")|assign(X,"flower")|assign(X,"roof"):-butterfly(X, Y), Y!=2 .']

parsed: 
assign(X,"laptop")|assign(X,"cloud")|assign(X,"desk")|assign(X,"chair")|assign(X,"storm")|assign(X,"butterfly")|assign(X,"flower")|assign(X,"roof"):-butterfly(X, Y), Y!=2 .

jaccard: 1.0


460
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate singapore. The labels are desk,chair,storm,roof,wall,laptop,flower,butterfly,cloud.  Then, filter and return only the elements assigned to label storm.".

answer from file: 
assign(X,"desk")|assign(X,"chair")|assign(X,"storm")|assign(X,"roof")|assign(X,"wall")|assign(X,"laptop")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"cloud"):-singapore(X).
select(X):-assign(X, "storm").

facts: 
singapore(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate singapore. The labels are desk,chair,storm,roof,wall,laptop,flower,butterfly,cloud.  Then, filter and return only the elements assigned to label storm.".
Answer: assign(X,"desk")|assign(X,"chair")|assign(X,"storm")|assign(X,"roof")|assign(X,"wall")|assign(X,"laptop")|assign(X,"flower")|assign(X," arrivant")|assign(X,"cloud"):-florence(X).
select(X):-assign(X, "storm").
```
The predicate florence has label "description".
So, select(X):-assign(X, "description").
But, as label "description" has label "description", only the elements assigned to label "description" are returned.
So, select(X):-assign(X, "description").
retum

unique_rules: 
['assign(X,"desk")|assign(X,"chair")|assign(X,"storm")|assign(X,"roof")|assign(X,"wall")|assign(X,"laptop")|assign(X,"flower")|assign(X," arrivant")|assign(X,"cloud"):-florence(X).', 'select(X):-assign(X, "storm").', 'So, select(X):-assign(X, "description").']

parsed: 
assign(X,"desk")|assign(X,"chair")|assign(X,"storm")|assign(X,"roof")|assign(X,"wall")|assign(X,"laptop")|assign(X,"flower")|assign(X," arrivant")|assign(X,"cloud"):-florence(X).
select(X):-assign(X, "storm").

jaccard: 0.0


461
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "butterfly" and "lightblue". However, avoid any combination where predicate "butterfly" has label "flower".

answer from file: 
combination(X,Y):-butterfly(X, _),lightblue(Y), not butterfly(X, flower).

facts: 
butterfly(1..4, 1..4).lightblue(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "butterfly" and "lightblue". However, avoid any combination where predicate "butterfly" has label "flower".
Answer: combination(X,Y):-florence(X),lightblue(Y), not florence(X,flower).
combination(X,Y):-florence(X),lightblue(Y), label(X,city).
assign(X, Y)
combination(X, Y).
retum(X, Y).
 quíntuple(X, Y):-florence(X),lightblue(Y), label(X,city).
 quíntuple(X, Y):-florence(X),lightblue(Y), height(X, Y).
 quíntuple(X, Y):-florence(X),lightblue(Y), price(X, Y).
 quíntuple

unique_rules: 
['combination(X,Y):-florence(X),lightblue(Y), not florence(X,flower).', 'combination(X,Y):-florence(X),lightblue(Y), label(X,city).', 'quíntuple(X, Y):-florence(X),lightblue(Y), label(X,city).', 'quíntuple(X, Y):-florence(X),lightblue(Y), height(X, Y).', 'quíntuple(X, Y):-florence(X),lightblue(Y), price(X, Y).']

parsed: 
combination(X,Y):-florence(X),lightblue(Y), not florence(X,flower).

jaccard: 0.0


462
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "moscow" having fields "ID","hair","cairoID", and the predicate "cairo" having fields "ID","surname". Define a predicate "moscow_cairo" that associates to each "moscow" the "surname" of "cairo" only where "surname" is different than 81.

answer from file: 
moscow_cairo(X,Z):-moscow(X,_,Y),cairo(Y,Z), Z!=81.

facts: 
moscow("ID","hair","cairoID").cairo("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "moscow" having fields "ID","hair","cairoID", and the predicate "cairo" having fields "ID","surname". Define a predicate "moscow_cairo" that associates to each "moscow" the "surname" of "cairo" only where "surname" is different than 81.
Answer: moscow_cairo(X,Z):-moscow(X,_,Y),cairo(Y,Z), Z!=81.
moscow_cairo(X,_,Y):-moscow(X,_,Y),cairo(Y,Z), Z==81.
 köp.
assign(X,"name")|assign(X,"city")|assign(X,"age"):-moscow_cairo(X,_,Y).
retum.
 köp.
assign(X,"name")|assign(X,"city")|assign(X,"age"):-moscow(X,_,Y).
retum.
 köp.
assign(X,"name")|assign(X,"

unique_rules: 
['moscow_cairo(X,Z):-moscow(X,_,Y),cairo(Y,Z), Z!=81.', 'moscow_cairo(X,_,Y):-moscow(X,_,Y),cairo(Y,Z), Z==81.', 'assign(X,"name")|assign(X,"city")|assign(X,"age"):-moscow_cairo(X,_,Y).', 'assign(X,"name")|assign(X,"city")|assign(X,"age"):-moscow(X,_,Y).']

parsed: 
moscow_cairo(X,Z):-moscow(X,_,Y),cairo(Y,Z), Z!=81.

jaccard: 1.0


463
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "darkmagenta" having fields "ID","cloudID","hair", and the predicate "cloud" having fields "ID","strength". Define a predicate "darkmagenta_cloud" that associates to each "darkmagenta", not associated with label "desk", the attribute "strength" of "cloud".

answer from file: 
darkmagenta_cloud(X,Z):-darkmagenta(X,Y,_),cloud(Y,Z),not darkmagenta(X,_,desk).

facts: 
darkmagenta("ID","cloudID","hair").cloud("ID","strength").

generated: 
Write an ASP program for the following problem. Consider predicate "darkmagenta" having fields "ID","cloudID","hair", and the predicate "cloud" having fields "ID","strength". Define a predicate "darkmagenta_cloud" that associates to each "darkmagenta", not associated with label "desk", the attribute "strength" of "cloud".
Answer: darkMagenta_cloud(X,Z):-darkmagenta(X,Y,_),cloud(Y,Z),not darkmagenta(X,_,desk).
darkMagenta_cloud(X,Y,_):-darkmagenta(X,_,_),cloud(Y,Z),label "bike".
assign(X,darkMagenta(X,_,_)),_).
assign(X,darkMagenta(X,_,bike)),_).
retum(X).
retum(Y).
retum(Z).
 quí Âge(X,Y,Z),Z>.
 quí Âge(X,Y,Z),Z<Z.
 quí Âge(X,_,Z),Z<Z.
 quí Âge

unique_rules: 
['darkMagenta_cloud(X,Z):-darkmagenta(X,Y,_),cloud(Y,Z),not darkmagenta(X,_,desk).', 'darkMagenta_cloud(X,Y,_):-darkmagenta(X,_,_),cloud(Y,Z),label "bike".']

parsed: 
darkMagenta_cloud(X,Z):-darkmagenta(X,Y,_),cloud(Y,Z),not darkmagenta(X,_,desk).

jaccard: 1.0


464
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "quality" as the transitive closure of predicate "barcelona". Then, assign exactly one label from the set cloud,wall,flower,desk,roof,storm,butterfly to each element in "quality".

answer from file: 
quality(X,Y):-barcelona(X,Y).
quality(X,Y):-barcelona(X,Z),quality(Z,Y).
assign(X,"cloud")|assign(X,"wall")|assign(X,"flower")|assign(X,"desk")|assign(X,"roof")|assign(X,"storm")|assign(X,"butterfly"):-quality(X,_).

facts: 
barcelona(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "quality" as the transitive closure of predicate "barcelona". Then, assign exactly one label from the set cloud,wall,flower,desk,roof,storm,butterfly to each element in "quality".
Answer: quality(X,Y):-barcelona(X,Y).
quality(X,Y):-barcelona(X,Z),quality(Z,Y).
assign(X,"cloud")|assign(X,"wall")|assign(X,"flower")|assign(X,"desk")|assign(X,"roof")|assign(X,"storm")|assign(X," arrivant") :-quality(X,_).
retum(X,Y):-assign(X,Y).
retum(X,Y):-assign(X,Z),retum(Z,Y).
retum(X,Y):-assign(X,Z),retum(Z,Y).
retum(X,Y):-assign(

unique_rules: 
['quality(X,Y):-barcelona(X,Y).', 'quality(X,Y):-barcelona(X,Z),quality(Z,Y).', 'assign(X,"cloud")|assign(X,"wall")|assign(X,"flower")|assign(X,"desk")|assign(X,"roof")|assign(X,"storm")|assign(X," arrivant") :-quality(X,_).', 'retum(X,Y):-assign(X,Y).', 'retum(X,Y):-assign(X,Z),retum(Z,Y).', 'retum(X,Y):-assign(.']

parsed: 
quality(X,Y):-barcelona(X,Y).
quality(X,Y):-barcelona(X,Z),quality(Z,Y).
assign(X,"cloud")|assign(X,"wall")|assign(X,"flower")|assign(X,"desk")|assign(X,"roof")|assign(X,"storm")|assign(X," arrivant") :-quality(X,_).

jaccard: 0.0


465
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are cloud,butterfly,flower,laptop,wall,chair,roof,desk. Consider only the predicate lake not associated with label "storm".

answer from file: 
assign(X,"cloud")|assign(X,"butterfly")|assign(X,"flower")|assign(X,"laptop")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"desk"):-lake(X, _), not lake(X, storm).

facts: 
lake(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are cloud,butterfly,flower,laptop,wall,chair,roof,desk. Consider only the predicate lake not associated with label "storm".
Answer: assign(X,"cloud")|assign(X," arrivant")|assign(X," felicità")|assign(X," favoris")|assign(X,"author")|assign(X,"description")|assign(X,"name")|assign(X,"age")|assign(X,"city") : lake(X, _), not lake(X, storm).
```
assign(X,"description") : lake(X, _), not lake(X, storm).
```
Explanation:
The predicate "lake" has label "description", but not associated with label "author".
The predicate "description" has label "description", but not associated with label "author".
So, for each

unique_rules: 
[]

parsed: 


jaccard: 0.0


466
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate storm and labels owner, weight having label weight different than 93. The labels are chair,wall,storm,cloud,roof,laptop,flower,desk,butterfly.

answer from file: 
assign(X,"chair")|assign(X,"wall")|assign(X,"storm")|assign(X,"cloud")|assign(X,"roof")|assign(X,"laptop")|assign(X,"flower")|assign(X,"desk")|assign(X,"butterfly"):-storm(X, Y), Y!=93 .

facts: 
storm(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate storm and labels owner, weight having label weight different than 93. The labels are chair,wall,storm,cloud,roof,laptop,flower,desk,butterfly.
Answer: assign(X,"chair")|assign(X,"wall")|assign(X,"storm")|assign(X,"cloud")|assign(X,"roof")|assign(X,"laptop")|assign(X,"flower")|assign(X,"desk")|assign(X," arrivant")==>moto(X, Y), Y!=93 .
assign(X," arrivant")==>moto(X, Y), Y==93 .
 köp(X, Y), Y!=93 .
 köp(X, Y), Y==93 .
 köp(X, Y), Y!=93 .
 köp(X, Y), Y==93 .
 kollektive(X,

unique_rules: 
[]

parsed: 


jaccard: 0.0


467
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate toronto. The labels are cloud,roof,chair,flower,storm,butterfly,wall,laptop,desk.  Then, filter and return only the elements assigned to label storm.".

answer from file: 
assign(X,"cloud")|assign(X,"roof")|assign(X,"chair")|assign(X,"flower")|assign(X,"storm")|assign(X,"butterfly")|assign(X,"wall")|assign(X,"laptop")|assign(X,"desk"):-toronto(X).
select(X):-assign(X, "storm").

facts: 
toronto(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate toronto. The labels are cloud,roof,chair,flower,storm,butterfly,wall,laptop,desk.  Then, filter and return only the elements assigned to label storm.".
Answer: assign(X,"cloud")|assign(X,"roof")|assign(X,"chair")|assign(X,"flower")|assign(X,"storm")|assign(X," arrivant")|assign(X,"wall")|assign(X,"laptop")|assign(X,"desk"):-toronto(X).
select(X):-assign(X, "storm").
```
Assign(X,"cloud")|Assign(X,"roof")|Assign(X,"chair")|Assign(X,"flower")|Assign(X,"storm")|Assign(X," arrivant")|Assign(X,"wall")|Assign(X,"laptop")|Assign(X,"desk"):-toronto(

unique_rules: 
['assign(X,"cloud")|assign(X,"roof")|assign(X,"chair")|assign(X,"flower")|assign(X,"storm")|assign(X," arrivant")|assign(X,"wall")|assign(X,"laptop")|assign(X,"desk"):-toronto(X).', 'select(X):-assign(X, "storm").', 'Assign(X,"cloud")|Assign(X,"roof")|Assign(X,"chair")|Assign(X,"flower")|Assign(X,"storm")|Assign(X," arrivant")|Assign(X,"wall")|Assign(X,"laptop")|Assign(X,"desk"):-toronto(.']

parsed: 
assign(X,"cloud")|assign(X,"roof")|assign(X,"chair")|assign(X,"flower")|assign(X,"storm")|assign(X," arrivant")|assign(X,"wall")|assign(X,"laptop")|assign(X,"desk"):-toronto(X).
select(X):-assign(X, "storm").

jaccard: 1.0


468
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "wall" and "black". However, avoid any combination where predicate "wall" has label "flower".

answer from file: 
combination(X,Y):-wall(X, _),black(Y), not wall(X, flower).

facts: 
wall(1..4, 1..4).black(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "wall" and "black". However, avoid any combination where predicate "wall" has label "flower".
Answer: combination(X,Y):-wall(X, _),black(Y), not wall(X, flower).
combination(X,Y):-wall(X, _),black(Y).
combination(X,Y):-wall(X, _),black(Y), label(X, "age").
assign(X, Y)
retum(X, Y).
retum(X, Y), label(X, "age").
retum(X, Y), label(X, "name").
retum(X, Y), label(X, "price").
retum(X, Y), label(X, "description").
retum(X, Y), label(X, "city

unique_rules: 
['combination(X,Y):-wall(X, _),black(Y), not wall(X, flower).', 'combination(X,Y):-wall(X, _),black(Y).', 'combination(X,Y):-wall(X, _),black(Y), label(X, "age").']

parsed: 
combination(X,Y):-wall(X, _),black(Y), not wall(X, flower).

jaccard: 1.0


469
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "delhi" having fields "ID","owner","weightID", and the predicate "weight" having fields "ID","hair". Define a predicate "delhi_weight" that associates to each "delhi" the "hair" of "weight" only where "hair" is different than 56.

answer from file: 
delhi_weight(X,Z):-delhi(X,_,Y),weight(Y,Z), Z!=56.

facts: 
delhi("ID","owner","weightID").weight("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "delhi" having fields "ID","owner","weightID", and the predicate "weight" having fields "ID","hair". Define a predicate "delhi_weight" that associates to each "delhi" the "hair" of "weight" only where "hair" is different than 56.
Answer: delhi_weight(X,Z):-delhi(X,_,Y),weight(Y,Z), Z!=56.
delhi_weight(X,_,Y):-delhi(X,_,Y),weight(Y,Z), Z==56.

unique_rules: 
['delhi_weight(X,Z):-delhi(X,_,Y),weight(Y,Z), Z!=56.', 'delhi_weight(X,_,Y):-delhi(X,_,Y),weight(Y,Z), Z==56.']

parsed: 
delhi_weight(X,Z):-delhi(X,_,Y),weight(Y,Z), Z!=56.

jaccard: 1.0


470
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "mumbai" having fields "ID","quality","roofID", and the predicate "roof" having fields "ID","surname". Define a predicate "mumbai_roof" that associates to each "mumbai", not associated with label "desk", the attribute "surname" of "roof".

answer from file: 
mumbai_roof(X,Z):-mumbai(X,_,Y),roof(Y,Z),not mumbai(X,desk,_).

facts: 
mumbai("ID","quality","roofID").roof("ID","surname").

generated: 
Write an ASP program for the following problem. Consider predicate "mumbai" having fields "ID","quality","roofID", and the predicate "roof" having fields "ID","surname". Define a predicate "mumbai_roof" that associates to each "mumbai", not associated with label "desk", the attribute "surname" of "roof".
Answer: mumbai_roof(X,Z):-mumbai(X,_,Y),roof(Y,Z),not mumbai(X,desk,_).
 ángulo(X,Y):-mumbai(X,_,Y),roof(Y,Z).
 ángulo(X,Y):-mumbai(X,_,Y),not roof(Y,Z).
 ángulo(X,Y):-mumbai(X,_,Y),roof(Y,Z).
 ángulo(X,Y):-mumbai(X,_,Y),not name(X,table).
 ángulo(X,Y):-mumbai(X,_,Y),name(X,table).
 ángulo(

unique_rules: 
['mumbai_roof(X,Z):-mumbai(X,_,Y),roof(Y,Z),not mumbai(X,desk,_).', 'ángulo(X,Y):-mumbai(X,_,Y),roof(Y,Z).', 'ángulo(X,Y):-mumbai(X,_,Y),not roof(Y,Z).', 'ángulo(X,Y):-mumbai(X,_,Y),not name(X,table).', 'ángulo(X,Y):-mumbai(X,_,Y),name(X,table).']

parsed: 
mumbai_roof(X,Z):-mumbai(X,_,Y),roof(Y,Z),not mumbai(X,desk,_).

jaccard: 1.0


471
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "cosenza" as the transitive closure of predicate "lake". Then, assign exactly one label from the set butterfly,wall,laptop,desk,flower,chair to each element in "cosenza".

answer from file: 
cosenza(X,Y):-lake(X,Y).
cosenza(X,Y):-lake(X,Z),cosenza(Z,Y).
assign(X,"butterfly")|assign(X,"wall")|assign(X,"laptop")|assign(X,"desk")|assign(X,"flower")|assign(X,"chair"):-cosenza(X,_).

facts: 
lake(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "cosenza" as the transitive closure of predicate "lake". Then, assign exactly one label from the set butterfly,wall,laptop,desk,flower,chair to each element in "cosenza".
Answer: cosenza(X,Y):-lake(X,Y).
cosenza(X,Y):-lake(X,Z),cosenza(Z,Y).
assign(X," réussie")|assign(X,"florence")|assign(X,"city")|assign(X,"author")|assign(X,"description")|assign(X,"age")|assign(X,"name")|assign(X,"price")|assign(X,"shape") :-cosenza(X,_).
retum(X,Y):-assign(X,Y).
retum(X,Y):-assign(X,Z),retum(Z,Y).
retum(X,Y):-assign

unique_rules: 
['cosenza(X,Y):-lake(X,Y).', 'cosenza(X,Y):-lake(X,Z),cosenza(Z,Y).', 'assign(X," réussie")|assign(X,"florence")|assign(X,"city")|assign(X,"author")|assign(X,"description")|assign(X,"age")|assign(X,"name")|assign(X,"price")|assign(X,"shape") :-cosenza(X,_).', 'retum(X,Y):-assign(X,Y).', 'retum(X,Y):-assign(X,Z),retum(Z,Y).', 'retum(X,Y):-assign.']

parsed: 
cosenza(X,Y):-lake(X,Y).
cosenza(X,Y):-lake(X,Z),cosenza(Z,Y).
assign(X," réussie")|assign(X,"florence")|assign(X,"city")|assign(X,"author")|assign(X,"description")|assign(X,"age")|assign(X,"name")|assign(X,"price")|assign(X,"shape") :-cosenza(X,_).

jaccard: 0.0


472
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate black. The labels are desk,butterfly. Consider only the predicate black not associated with label "butterfly".

answer from file: 
assign(X,"desk")|assign(X,"butterfly"):-black(X, _), not black(X, butterfly).

facts: 
black(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate black. The labels are desk,butterfly. Consider only the predicate black not associated with label "butterfly".
Answer: assign(X,"desk")|assign(X," italienne")|assign(X,"height")|assign(X,"price")|assign(X,"author")|assign(X,"city")|assign(X,"age")|assign(X,"name")|assign(X,"description")|assign(X,"shape")|assign(X,"height")|assign(X,"price")|assign(X,"author")|assign(X,"city")|assign(X,"age")|assign(X,"name")|assign(X,"description")|assign(X,"shape") : black(X, _), not black(X, butterfly).
```
Assign(X,"description

unique_rules: 
[]

parsed: 


jaccard: 0.0


473
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate surname and labels lake, weight having label weight different than 2. The labels are cloud,laptop,storm.

answer from file: 
assign(X,"cloud")|assign(X,"laptop")|assign(X,"storm"):-surname(X, Y), Y!=2 .

facts: 
surname(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate surname and labels lake, weight having label weight different than 2. The labels are cloud,laptop,storm.
Answer: assign(X,"cloud")|assign(X,"laptop")|assign(X,"storm"):-surname(X, Y), Y!=2 .
```
assign(X,"cloud")|assign(X,"laptop")|assign(X,"storm"):-surname(X, Y), Y!=2 .
```
The predicate "name" has fields "ID","description","city","author","shangaiID", and the predicate "shangai" has fields "ID","description","city","price". Define a predicate "name_shangai" that associates to each "name" the "description" of "shangai" only where "description" is lower than 70.
assign(X

unique_rules: 
['assign(X,"cloud")|assign(X,"laptop")|assign(X,"storm"):-surname(X, Y), Y!=2 .']

parsed: 
assign(X,"cloud")|assign(X,"laptop")|assign(X,"storm"):-surname(X, Y), Y!=2 .

jaccard: 1.0


474
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are butterfly,cloud,flower,wall.  Then, filter and return only the elements assigned to label cloud.".

answer from file: 
assign(X,"butterfly")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-lake(X).
select(X):-assign(X, "cloud").

facts: 
lake(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are butterfly,cloud,flower,wall.  Then, filter and return only the elements assigned to label cloud.".
Answer: assign(X," épar")|assign(X,"height")|assign(X,"price")|assign(X,"author")|assign(X,"city")|retum(X, "cloud").
select(X):-assign(X, "cloud").
```
Assign(X," épar")|Assign(X,"height")|Assign(X,"price")|Assign(X,"author")|Assign(X,"city"):-lake(X).
select(X):-assign(X, "cloud").
retum(X, "cloud").
```

unique_rules: 
['select(X):-assign(X, "cloud").', 'Assign(X," épar")|Assign(X,"height")|Assign(X,"price")|Assign(X,"author")|Assign(X,"city"):-lake(X).']

parsed: 
select(X):-assign(X, "cloud").
Assign(X," épar")|Assign(X,"height")|Assign(X,"price")|Assign(X,"author")|Assign(X,"city"):-lake(X).

jaccard: 0.0


475
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "surname" and "mumbai". However, avoid any combination where predicate "surname" has label "flower".

answer from file: 
combination(X,Y):-surname(X, _),mumbai(Y), not surname(X, flower).

facts: 
surname(1..4, 1..4).mumbai(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "surname" and "mumbai". However, avoid any combination where predicate "surname" has label "flower".
Answer: combination(X,Y):-surname(X, _),mumbai(Y), not surname(X, flower).
combination(X,Y):-surname(X, _),mumbai(Y).
assign(X, Y)
combination(X, Y).
retum.
 ángulo(X, Y):-combination(X, Y).
 ángulo(X, Y):-combination(X, Y), shape(X, Y).
 ángulo(X, Y):-combination(X, Y), price(X, Y).
 ángulo(X, Y):-combination(X, Y), description(X, Y).
 ángulo(X, Y):-combination(X, Y),

unique_rules: 
['combination(X,Y):-surname(X, _),mumbai(Y), not surname(X, flower).', 'combination(X,Y):-surname(X, _),mumbai(Y).', 'ángulo(X, Y):-combination(X, Y).', 'ángulo(X, Y):-combination(X, Y), shape(X, Y).', 'ángulo(X, Y):-combination(X, Y), price(X, Y).', 'ángulo(X, Y):-combination(X, Y), description(X, Y).', 'ángulo(X, Y):-combination(X, Y),.']

parsed: 
combination(X,Y):-surname(X, _),mumbai(Y), not surname(X, flower).

jaccard: 1.0


476
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "butterfly" having fields "ID","delhiID","owner", and the predicate "delhi" having fields "ID","lake". Define a predicate "butterfly_delhi" that associates to each "butterfly" the "lake" of "delhi" only where "lake" is different than 57.

answer from file: 
butterfly_delhi(X,Z):-butterfly(X,Y,_),delhi(Y,Z), Z!=57.

facts: 
butterfly("ID","delhiID","owner").delhi("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "butterfly" having fields "ID","delhiID","owner", and the predicate "delhi" having fields "ID","lake". Define a predicate "butterfly_delhi" that associates to each "butterfly" the "lake" of "delhi" only where "lake" is different than 57.
Answer: butterfly_delhi(X,Z):-butterfly(X,Y,_),delhi(Y,Z), Z!=57.
 ángulo(X,Y,Z):-creator(X,Y,Z),name(Z,Y).
 ángulo(X,Y,Z):-creator(X,Y,Z),name(Z,X).
 ángulo(X,Y,Z):-creator(X,Y,Z),name(Z,Y).
 ángulo(X,Y,Z):-creator(X,Y,Z),name(Z,X).
 ángulo(X,Y,Z):-creator(X,Y,Z),name(Z,Y

unique_rules: 
['butterfly_delhi(X,Z):-butterfly(X,Y,_),delhi(Y,Z), Z!=57.', 'ángulo(X,Y,Z):-creator(X,Y,Z),name(Z,Y).', 'ángulo(X,Y,Z):-creator(X,Y,Z),name(Z,X).', 'ángulo(X,Y,Z):-creator(X,Y,Z),name(Z,Y.']

parsed: 
butterfly_delhi(X,Z):-butterfly(X,Y,_),delhi(Y,Z), Z!=57.

jaccard: 1.0


477
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "barcelona" having fields "ID","surnameID","strength", and the predicate "surname" having fields "ID","surname". Define a predicate "barcelona_surname" that associates to each "barcelona", not associated with label "flower", the attribute "surname" of "surname".

answer from file: 
barcelona_surname(X,Z):-barcelona(X,Y,_),surname(Y,Z),not barcelona(X,_,flower).

facts: 
barcelona("ID","surnameID","strength").surname("ID","surname").

generated: 
Write an ASP program for the following problem. Consider predicate "barcelona" having fields "ID","surnameID","strength", and the predicate "surname" having fields "ID","surname". Define a predicate "barcelona_surname" that associates to each "barcelona", not associated with label "flower", the attribute "surname" of "surname".
Answer: barcelona_name(X,Z):-barcelona(X,Y,_),surname(Y,Z),not barcelona(X,_,flower).
 ángulo_name(X,Z):-barcelona(X,Y,_), ángulo(Y,Z).
 ángulo_name(X,Z):-barcelona(X,_,_),creator(X,Z).
 ángulo_name(X,Z):-shangai(X,Z).
 ángulo_name(X,Z):-shangai(X,Z),creator(X,Z).
 ángulo_name(X,Z):-shangai(X,Z),creator(X,Z),age(X,Z).
 ángulo

unique_rules: 
['barcelona_name(X,Z):-barcelona(X,Y,_),surname(Y,Z),not barcelona(X,_,flower).', 'ángulo_name(X,Z):-barcelona(X,Y,_), ángulo(Y,Z).', 'ángulo_name(X,Z):-barcelona(X,_,_),creator(X,Z).', 'ángulo_name(X,Z):-shangai(X,Z).', 'ángulo_name(X,Z):-shangai(X,Z),creator(X,Z).', 'ángulo_name(X,Z):-shangai(X,Z),creator(X,Z),age(X,Z).']

parsed: 
barcelona_name(X,Z):-barcelona(X,Y,_),surname(Y,Z),not barcelona(X,_,flower).

jaccard: 1.0


478
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "quality" as the transitive closure of predicate "toronto". Then, assign exactly one label from the set chair,laptop,roof,storm,wall,butterfly,cloud to each element in "quality".

answer from file: 
quality(X,Y):-toronto(X,Y).
quality(X,Y):-toronto(X,Z),quality(Z,Y).
assign(X,"chair")|assign(X,"laptop")|assign(X,"roof")|assign(X,"storm")|assign(X,"wall")|assign(X,"butterfly")|assign(X,"cloud"):-quality(X,_).

facts: 
toronto(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "quality" as the transitive closure of predicate "toronto". Then, assign exactly one label from the set chair,laptop,roof,storm,wall,butterfly,cloud to each element in "quality".
Answer: quality(X,Y):-toronto(X,Y).
quality(X,Y):-toronto(X,Z),quality(Z,Y).
assign(X,"chair")|assign(X," arrivant")|assign(X,"height")|assign(X,"name")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"price"):-quality(X,_).
retum:
assign(X,"description")|assign(X,"price"):-quality(X,Y).
retum:
assign(X,"description")|assign(X,"price"):-quality(X,Y).
retum:
assign(

unique_rules: 
['quality(X,Y):-toronto(X,Y).', 'quality(X,Y):-toronto(X,Z),quality(Z,Y).', 'assign(X,"chair")|assign(X," arrivant")|assign(X,"height")|assign(X,"name")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"price"):-quality(X,_).', 'assign(X,"description")|assign(X,"price"):-quality(X,Y).']

parsed: 
quality(X,Y):-toronto(X,Y).
quality(X,Y):-toronto(X,Z),quality(Z,Y).
assign(X,"chair")|assign(X," arrivant")|assign(X,"height")|assign(X,"name")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"price"):-quality(X,_).

jaccard: 0.0


479
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate mumbai. The labels are butterfly,flower,desk,storm,chair,roof,cloud,wall. Consider only the predicate mumbai not associated with label "cloud".

answer from file: 
assign(X,"butterfly")|assign(X,"flower")|assign(X,"desk")|assign(X,"storm")|assign(X,"chair")|assign(X,"roof")|assign(X,"cloud")|assign(X,"wall"):-mumbai(X, _), not mumbai(X, cloud).

facts: 
mumbai(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate mumbai. The labels are butterfly,flower,desk,storm,chair,roof,cloud,wall. Consider only the predicate mumbai not associated with label "cloud".
Answer: assign(X," originaux")|assign(X,"description")|assign(X,"city")|assign(X,"name")|assign(X,"price")|assign(X,"age")|assign(X,"shape")|assign(X,"height")|retum(X).
 assurent(X, "description")| assurent(X, "shape")| assurent(X, "height")|retum(X).
 quíntu(X, Y):-assign(X, Y).
 quíntu(X, Y):-assign(X, _), biet(Y).
retum(X):- quíntu(X, _).
retum(X):- quíntu(X, _).
retum

unique_rules: 
['quíntu(X, Y):-assign(X, Y).', 'quíntu(X, Y):-assign(X, _), biet(Y).', 'retum(X):- quíntu(X, _).']

parsed: 
quíntu(X, Y):-assign(X, Y).

jaccard: 0.0


480
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate barcelona and labels quality, owner having label owner different than 26. The labels are laptop,flower,wall.

answer from file: 
assign(X,"laptop")|assign(X,"flower")|assign(X,"wall"):-barcelona(X, Y), Y!=26 .

facts: 
barcelona(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate barcelona and labels quality, owner having label owner different than 26. The labels are laptop,flower,wall.
Answer: assign(X,"laptop")|assign(X,"flower")|assign(X,"wall"):-barcelona(X, Y), Y!=26 .
```
assign(X,"name")|assign(X,"price")|assign(X,"city"):-florence(X).
```
The predicate florence has label "city", but not "price".
So, the predicate florence has label "city" only where "city" is different than 26.
The labels are description,price,city,age,shape,author,height,name,creator,age,description,city,price,name,height,shape,author,age,description,creator,age

unique_rules: 
['assign(X,"laptop")|assign(X,"flower")|assign(X,"wall"):-barcelona(X, Y), Y!=26 .', 'assign(X,"name")|assign(X,"price")|assign(X,"city"):-florence(X).']

parsed: 
assign(X,"laptop")|assign(X,"flower")|assign(X,"wall"):-barcelona(X, Y), Y!=26 .

jaccard: 1.0


481
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate laptop. The labels are desk,cloud,butterfly,wall,roof,flower,storm,laptop,chair.  Then, filter and return only the elements assigned to label storm.".

answer from file: 
assign(X,"desk")|assign(X,"cloud")|assign(X,"butterfly")|assign(X,"wall")|assign(X,"roof")|assign(X,"flower")|assign(X,"storm")|assign(X,"laptop")|assign(X,"chair"):-laptop(X).
select(X):-assign(X, "storm").

facts: 
laptop(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate laptop. The labels are desk,cloud,butterfly,wall,roof,flower,storm,laptop,chair.  Then, filter and return only the elements assigned to label storm.".
Answer: assign(X,"desk")|assign(X,"cloud")|assign(X," felicità")|assign(X,"wall")|assign(X,"roof")|assign(X,"flower")|assign(X,"storm")|assign(X," felicità")|assign(X,"shape")|retum(X, "storm").
select(X):-assign(X, "storm").
```
The predicate "laptop" has label "shape", and the predicate "retum" has label "shape".
So, the predicate "retum" only returns the elements assigned to label "shape".
The predicate "assign" has label "shape", and the predicate "retum" has label "shape".


unique_rules: 
['select(X):-assign(X, "storm").']

parsed: 
select(X):-assign(X, "storm").

jaccard: 0.0


482
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "barcelona" and "chicago". However, avoid any combination where predicate "barcelona" has label "flower".

answer from file: 
combination(X,Y):-barcelona(X, _),chicago(Y), not barcelona(X, flower).

facts: 
barcelona(1..4, 1..4).chicago(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "barcelona" and "chicago". However, avoid any combination where predicate "barcelona" has label "flower".
Answer: combination(X,Y):-barcelona(X, _),chicago(Y), not barcelona(X, flower).
combination(X,Y):-barcelona(X, _),chicago(Y).
combination(X,Y):-barcelona(X, _),chicago(Y), label(X, "age").
assign(X, Y)
retum(X, Y).
retum(X, Y), label(X, "age").
retum(X, Y), label(X, "name").
retum(X, Y), label(X, "price").
retum(X, Y), label(X, "description").
retum(X, Y), label(X, "city

unique_rules: 
['combination(X,Y):-barcelona(X, _),chicago(Y), not barcelona(X, flower).', 'combination(X,Y):-barcelona(X, _),chicago(Y).', 'combination(X,Y):-barcelona(X, _),chicago(Y), label(X, "age").']

parsed: 
combination(X,Y):-barcelona(X, _),chicago(Y), not barcelona(X, flower).

jaccard: 1.0


483
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "quality" having fields "ID","strength","lakeID", and the predicate "lake" having fields "ID","owner". Define a predicate "quality_lake" that associates to each "quality" the "owner" of "lake" only where "owner" is different than 68.

answer from file: 
quality_lake(X,Z):-quality(X,_,Y),lake(Y,Z), Z!=68.

facts: 
quality("ID","strength","lakeID").lake("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "quality" having fields "ID","strength","lakeID", and the predicate "lake" having fields "ID","owner". Define a predicate "quality_lake" that associates to each "quality" the "owner" of "lake" only where "owner" is different than 68.
Answer: quality_lake(X,Z):-quality(X,_,Y),lake(Y,Z), Z!=68.
 quíname(X,Y):-quality(X,_,Y),lake(Y,Z), Z==68.
 quíname(X,Y):-quality(X,_,Y),lake(Y,Z), Z!=72.
 quíname(X,Y):-quality(X,_,Y),lake(Y,Z), Z==72.
 quíname(X,Y):-quality(X,_,Y),lake(Y,Z), Z==80.
 quíname(X,Y):-quality(X,_,Y),lake(

unique_rules: 
['quality_lake(X,Z):-quality(X,_,Y),lake(Y,Z), Z!=68.', 'quíname(X,Y):-quality(X,_,Y),lake(Y,Z), Z==68.', 'quíname(X,Y):-quality(X,_,Y),lake(Y,Z), Z!=72.', 'quíname(X,Y):-quality(X,_,Y),lake(Y,Z), Z==72.', 'quíname(X,Y):-quality(X,_,Y),lake(Y,Z), Z==80.', 'quíname(X,Y):-quality(X,_,Y),lake(.']

parsed: 
quality_lake(X,Z):-quality(X,_,Y),lake(Y,Z), Z!=68.

jaccard: 1.0


484
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "lake" having fields "ID","pinkID","lake", and the predicate "pink" having fields "ID","strength". Define a predicate "lake_pink" that associates to each "lake", not associated with label "desk", the attribute "strength" of "pink".

answer from file: 
lake_pink(X,Z):-lake(X,Y,_),pink(Y,Z),not lake(X,_,desk).

facts: 
lake("ID","pinkID","lake").pink("ID","strength").

generated: 
Write an ASP program for the following problem. Consider predicate "lake" having fields "ID","pinkID","lake", and the predicate "pink" having fields "ID","strength". Define a predicate "lake_pink" that associates to each "lake", not associated with label "desk", the attribute "strength" of "pink".
Answer: lake_pink(X,Z):-lake(X,Y,_),pink(Y,Z),not lake(X,_,desk).
lake_pink(X,Y,_):-lake(X,_,_),pink(Y,Z),label(X,table).
assign(X,Z):-lake_pink(X,_,_).
retum(X,Z).
retum(X,_,table).
 quí Medellín, Bogotá, Puebla, Cartagena, Málaga, Madrid, Girona, Verona, Quito, London, Paris, City, Flecha, Nuova York, Shanghai, Bogota, Puebla, Madrid, Cartagena, Girona, Verona, London, Paris, City, Flecha, Nuova York, Shanghai

unique_rules: 
['lake_pink(X,Z):-lake(X,Y,_),pink(Y,Z),not lake(X,_,desk).', 'lake_pink(X,Y,_):-lake(X,_,_),pink(Y,Z),label(X,table).', 'assign(X,Z):-lake_pink(X,_,_).']

parsed: 
lake_pink(X,Z):-lake(X,Y,_),pink(Y,Z),not lake(X,_,desk).

jaccard: 1.0


485
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "owner" as the transitive closure of predicate "storm". Then, assign exactly one label from the set cloud,storm,butterfly,chair,desk,laptop,roof,wall to each element in "owner".

answer from file: 
owner(X,Y):-storm(X,Y).
owner(X,Y):-storm(X,Z),owner(Z,Y).
assign(X,"cloud")|assign(X,"storm")|assign(X,"butterfly")|assign(X,"chair")|assign(X,"desk")|assign(X,"laptop")|assign(X,"roof")|assign(X,"wall"):-owner(X,_).

facts: 
storm(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "owner" as the transitive closure of predicate "storm". Then, assign exactly one label from the set cloud,storm,butterfly,chair,desk,laptop,roof,wall to each element in "owner".
Answer: owner(X,Y):-storm(X,Y).
owner(X,Y):-storm(X,Z),owner(Z,Y).
assign(X,"cloud")|assign(X,"storm")|assign(X," arrivant")|assign(X," felicità")|assign(X,"description")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"name"):-owner(X,_).
retum(X,Y):-owner(X,Y).
retum(X,Y):-owner(X,Z),retum(Z,Y).
retum(X,Y):-owner(X,Z),retum(

unique_rules: 
['owner(X,Y):-storm(X,Y).', 'owner(X,Y):-storm(X,Z),owner(Z,Y).', 'assign(X,"cloud")|assign(X,"storm")|assign(X," arrivant")|assign(X," felicità")|assign(X,"description")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"name"):-owner(X,_).', 'retum(X,Y):-owner(X,Y).', 'retum(X,Y):-owner(X,Z),retum(Z,Y).', 'retum(X,Y):-owner(X,Z),retum(.']

parsed: 
owner(X,Y):-storm(X,Y).
owner(X,Y):-storm(X,Z),owner(Z,Y).
assign(X,"cloud")|assign(X,"storm")|assign(X," arrivant")|assign(X," felicità")|assign(X,"description")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"name"):-owner(X,_).

jaccard: 0.0


486
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are roof,chair,flower,desk,cloud,wall,laptop. Consider only the predicate lake not associated with label "wall".

answer from file: 
assign(X,"roof")|assign(X,"chair")|assign(X,"flower")|assign(X,"desk")|assign(X,"cloud")|assign(X,"wall")|assign(X,"laptop"):-lake(X, _), not lake(X, wall).

facts: 
lake(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are roof,chair,flower,desk,cloud,wall,laptop. Consider only the predicate lake not associated with label "wall".
Answer: assign(X," felicità")|assign(X,"price")|assign(X,"city")|assign(X,"author")|assign(X,"description")|assign(X,"age")|assign(X,"name")|assign(X,"shape")|assign(X,"height")|retum(X, Y), Y!=wall .
retum(X, Y), Y!=wall, Z, Z!=description, Z!=age, Z!=name, Z!=shape, Z!=height.
 köp(X, Y), Y!=wall, Z, Z!=description, Z!=age, Z!=name, Z!=shape, Z!=height.
 köp(X, Y), Y

unique_rules: 
[]

parsed: 


jaccard: 0.0


487
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate flower and labels lake, weight having label weight different than 85. The labels are desk,roof,wall,storm,flower,butterfly,cloud,chair.

answer from file: 
assign(X,"desk")|assign(X,"roof")|assign(X,"wall")|assign(X,"storm")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"cloud")|assign(X,"chair"):-flower(X, Y), Y!=85 .

facts: 
flower(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate flower and labels lake, weight having label weight different than 85. The labels are desk,roof,wall,storm,flower,butterfly,cloud,chair.
Answer: assign(X,"desk")|assign(X,"roof")|assign(X,"wall")|assign(X,"storm")|assign(X,"flower")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"chair"):-flower(X, Y), Y!=85 .
```
Assign(X," felicità")|Assign(X,"creator")|Assign(X,"age")|Assign(X,"name")|Assign(X,"price")|Assign(X,"description")|Assign(X,"city")|Assign(X,"shape")|Assign(X,"height"):-creator(X).
```

unique_rules: 
['assign(X,"desk")|assign(X,"roof")|assign(X,"wall")|assign(X,"storm")|assign(X,"flower")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"chair"):-flower(X, Y), Y!=85 .', 'Assign(X," felicità")|Assign(X,"creator")|Assign(X,"age")|Assign(X,"name")|Assign(X,"price")|Assign(X,"description")|Assign(X,"city")|Assign(X,"shape")|Assign(X,"height"):-creator(X).']

parsed: 
assign(X,"desk")|assign(X,"roof")|assign(X,"wall")|assign(X,"storm")|assign(X,"flower")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"chair"):-flower(X, Y), Y!=85 .

jaccard: 1.0


488
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate white. The labels are cloud,wall.  Then, filter and return only the elements assigned to label cloud.".

answer from file: 
assign(X,"cloud")|assign(X,"wall"):-white(X).
select(X):-assign(X, "cloud").

facts: 
white(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate white. The labels are cloud,wall.  Then, filter and return only the elements assigned to label cloud.".
Answer: assign(X,"cloud")|assign(X,"wall"):-white(X).
select(X):-assign(X, "cloud").
retum(X).
```
Assign(X,"cloud")|Assign(X,"wall"):-white(X).
select(X):-assign(X, "cloud").
retum(X).
filter(X, "cloud").
```

unique_rules: 
['assign(X,"cloud")|assign(X,"wall"):-white(X).', 'select(X):-assign(X, "cloud").', 'Assign(X,"cloud")|Assign(X,"wall"):-white(X).']

parsed: 
assign(X,"cloud")|assign(X,"wall"):-white(X).
select(X):-assign(X, "cloud").

jaccard: 1.0


489
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "chicago" and "wall". However, avoid any combination where predicate "chicago" has label "desk".

answer from file: 
combination(X,Y):-chicago(X, _),wall(Y), not chicago(X, desk).

facts: 
chicago(1..4, 1..4).wall(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "chicago" and "wall". However, avoid any combination where predicate "chicago" has label "desk".
Answer: combination(X,Y):-chicago(X, _),wall(Y), not chicago(X, desk).
combination(X,Y):-chicago(X, _),wall(Y).
combination(X,Y):-chicago(X, _),wall(Y), label(X, desk).
```
Combinations are expressed by predicate "combination".
However, avoid any combination where predicate "chicago" has label "description".
```
result: combination(X,Y):-chicago(X, _),wall(Y), not chicago(X, description).
```
The predicate "combination" has label "description", so it only returns the combinations where predicate "description" is lower than 

unique_rules: 
['combination(X,Y):-chicago(X, _),wall(Y), not chicago(X, desk).', 'combination(X,Y):-chicago(X, _),wall(Y).', 'combination(X,Y):-chicago(X, _),wall(Y), label(X, desk).', 'result: combination(X,Y):-chicago(X, _),wall(Y), not chicago(X, description).']

parsed: 
combination(X,Y):-chicago(X, _),wall(Y), not chicago(X, desk).

jaccard: 1.0


490
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "toronto" having fields "ID","weight","chairID", and the predicate "chair" having fields "ID","hair". Define a predicate "toronto_chair" that associates to each "toronto" the "hair" of "chair" only where "hair" is different than 97.

answer from file: 
toronto_chair(X,Z):-toronto(X,_,Y),chair(Y,Z), Z!=97.

facts: 
toronto("ID","weight","chairID").chair("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "toronto" having fields "ID","weight","chairID", and the predicate "chair" having fields "ID","hair". Define a predicate "toronto_chair" that associates to each "toronto" the "hair" of "chair" only where "hair" is different than 97.
Answer: toronto_chair(X,Z):-toronto(X,_,Y),chair(Y,Z), Z!=97.
 assurent(X,Y):-toronto(X,_,Y),chair(Y,Z), Z==97.
 quíname(X,Y):-toronto(X,_,Y),chair(Y,Z), Z!=97.
 quíname(X,Y):-toronto(X,_,Y),chair(Y,Z), Z==97.
 quíname(X,Y):-toronto(X,_,Y),chair(Y,Z), Z==97.
retum(X,Y):-toronto(X,_,Y), quíname(X

unique_rules: 
['toronto_chair(X,Z):-toronto(X,_,Y),chair(Y,Z), Z!=97.', 'assurent(X,Y):-toronto(X,_,Y),chair(Y,Z), Z==97.', 'quíname(X,Y):-toronto(X,_,Y),chair(Y,Z), Z!=97.', 'quíname(X,Y):-toronto(X,_,Y),chair(Y,Z), Z==97.', 'retum(X,Y):-toronto(X,_,Y), quíname(X.']

parsed: 
toronto_chair(X,Z):-toronto(X,_,Y),chair(Y,Z), Z!=97.

jaccard: 1.0


491
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "chicago" having fields "ID","moscowID","weight", and the predicate "moscow" having fields "ID","weight". Define a predicate "chicago_moscow" that associates to each "chicago", not associated with label "butterfly", the attribute "weight" of "moscow".

answer from file: 
chicago_moscow(X,Z):-chicago(X,Y,_),moscow(Y,Z),not chicago(X,_,butterfly).

facts: 
chicago("ID","moscowID","weight").moscow("ID","weight").

generated: 
Write an ASP program for the following problem. Consider predicate "chicago" having fields "ID","moscowID","weight", and the predicate "moscow" having fields "ID","weight". Define a predicate "chicago_moscow" that associates to each "chicago", not associated with label "butterfly", the attribute "weight" of "moscow".
Result: chicago_moscow(X,Z):-chicago(X,Y,_),moscow(Y,Z),not chicago(X,_,butterfly).
 ángulo(X,Y,Z):-chicago(X,Y,_),moscow(Y,Z).
 ángulo(X,_,Z):-chicago(X,_,_),moto(Y,Z).
 ángulo(X,_,Z):-chicago(X,_,_),moto(Y,Z),description("color").
 ángulo(X,_,Z):-chicago(X,_,_),moto(Y,Z),description("height").
 ángulo(X,_,Z):-chicago(X,_,_),moto(Y,Z),

unique_rules: 
['Result: chicago_moscow(X,Z):-chicago(X,Y,_),moscow(Y,Z),not chicago(X,_,butterfly).', 'ángulo(X,Y,Z):-chicago(X,Y,_),moscow(Y,Z).', 'ángulo(X,_,Z):-chicago(X,_,_),moto(Y,Z).', 'ángulo(X,_,Z):-chicago(X,_,_),moto(Y,Z),description("color").', 'ángulo(X,_,Z):-chicago(X,_,_),moto(Y,Z),description("height").', 'ángulo(X,_,Z):-chicago(X,_,_),moto(Y,Z),.']

parsed: 
Result: chicago_moscow(X,Z):-chicago(X,Y,_),moscow(Y,Z),not chicago(X,_,butterfly).

jaccard: 0.0


492
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "darkmagenta" as the transitive closure of predicate "cosenza". Then, assign exactly one label from the set roof,flower,butterfly,wall,chair,cloud,desk,laptop,storm to each element in "darkmagenta".

answer from file: 
darkmagenta(X,Y):-cosenza(X,Y).
darkmagenta(X,Y):-cosenza(X,Z),darkmagenta(Z,Y).
assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"wall")|assign(X,"chair")|assign(X,"cloud")|assign(X,"desk")|assign(X,"laptop")|assign(X,"storm"):-darkmagenta(X,_).

facts: 
cosenza(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "darkmagenta" as the transitive closure of predicate "cosenza". Then, assign exactly one label from the set roof,flower,butterfly,wall,chair,cloud,desk,laptop,storm to each element in "darkmagenta".
Answer: darkMagenta(X,Y):-cosenza(X,Y).
darkMagenta(X,Y):-cosenza(X,Z),darkMagenta(Z,Y).
assign(X,"roof")|assign(X,"flower")|assign(X," arrivant")|assign(X,"wall")|assign(X,"chair")|assign(X,"cloud")|assign(X,"desk")|assign(X,"laptop")|assign(X,"storm"):-darkMagenta(X,_).
retum(X,Y):-darkMagenta(X,Y).
retum(X,Y):-darkMagenta(X,Z),retum(Z,Y).
retum(X,Y):-

unique_rules: 
['darkMagenta(X,Y):-cosenza(X,Y).', 'darkMagenta(X,Y):-cosenza(X,Z),darkMagenta(Z,Y).', 'assign(X,"roof")|assign(X,"flower")|assign(X," arrivant")|assign(X,"wall")|assign(X,"chair")|assign(X,"cloud")|assign(X,"desk")|assign(X,"laptop")|assign(X,"storm"):-darkMagenta(X,_).', 'retum(X,Y):-darkMagenta(X,Y).', 'retum(X,Y):-darkMagenta(X,Z),retum(Z,Y).', 'retum(X,Y):-.']

parsed: 
darkMagenta(X,Y):-cosenza(X,Y).
darkMagenta(X,Y):-cosenza(X,Z),darkMagenta(Z,Y).
assign(X,"roof")|assign(X,"flower")|assign(X," arrivant")|assign(X,"wall")|assign(X,"chair")|assign(X,"cloud")|assign(X,"desk")|assign(X,"laptop")|assign(X,"storm"):-darkMagenta(X,_).

jaccard: 0.0


493
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate wall. The labels are laptop,flower,desk,wall,roof. Consider only the predicate wall not associated with label "chair".

answer from file: 
assign(X,"laptop")|assign(X,"flower")|assign(X,"desk")|assign(X,"wall")|assign(X,"roof"):-wall(X, _), not wall(X, chair).

facts: 
wall(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate wall. The labels are laptop,flower,desk,wall,roof. Consider only the predicate wall not associated with label "chair".
Answer: assign(X," arrivant")|assign(X,"flower")|assign(X,"desk")|assign(X,"wall")|assign(X,"roof"):-wall(X, _), not wall(X, chair).
```
assign(X," arrivant")|assign(X,"flower")|assign(X,"desk")|assign(X,"wall")|assign(X,"roof"):-wall(X, _), not wall(X, chair).
```

unique_rules: 
['assign(X," arrivant")|assign(X,"flower")|assign(X,"desk")|assign(X,"wall")|assign(X,"roof"):-wall(X, _), not wall(X, chair).']

parsed: 
assign(X," arrivant")|assign(X,"flower")|assign(X,"desk")|assign(X,"wall")|assign(X,"roof"):-wall(X, _), not wall(X, chair).

jaccard: 1.0


494
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate weight and labels owner, surname having label surname different than 69. The labels are flower,laptop,butterfly,storm,wall,desk,roof,cloud.

answer from file: 
assign(X,"flower")|assign(X,"laptop")|assign(X,"butterfly")|assign(X,"storm")|assign(X,"wall")|assign(X,"desk")|assign(X,"roof")|assign(X,"cloud"):-weight(X, Y), Y!=69 .

facts: 
weight(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate weight and labels owner, surname having label surname different than 69. The labels are flower,laptop,butterfly,storm,wall,desk,roof,cloud.
Answer: assign(X,"flower")|assign(X," arrivant")|assign(X," felicità")|assign(X,"shape")|assign(X,"city")|assign(X,"description")|assign(X,"height")|assign(X,"name")|assign(X,"price")|assign(X,"age")  retum(X, Y), Y!=69 .
```
retum(X, Y):-assign(X, "name").
retum(X, Y):-assign(X, "price").
retum(X, Y):-assign(X, "age").
retum(X, Y):-assign(X, "description").
retum(X, Y):-assign

unique_rules: 
['retum(X, Y):-assign(X, "name").', 'retum(X, Y):-assign(X, "price").', 'retum(X, Y):-assign(X, "age").', 'retum(X, Y):-assign(X, "description").', 'retum(X, Y):-assign.']

parsed: 
retum(X, Y):-assign(X, "name").

jaccard: 0.0


495
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lightblue. The labels are chair,flower,roof,laptop,butterfly.  Then, filter and return only the elements assigned to label laptop.".

answer from file: 
assign(X,"chair")|assign(X,"flower")|assign(X,"roof")|assign(X,"laptop")|assign(X,"butterfly"):-lightblue(X).
select(X):-assign(X, "laptop").

facts: 
lightblue(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lightblue. The labels are chair,flower,roof,laptop,butterfly.  Then, filter and return only the elements assigned to label laptop.".
Answer: assign(X,"chair")|assign(X,"flower")|assign(X,"roof")|assign(X,"laptop")|assign(X," arrivant")==>lightblue(X).
select(X):-assign(X, "laptop").
retum(X).
 köp:assign(X,"city")|assign(X,"age")|assign(X,"description").
retum(X).
 quíntu(X, Y):-assign(X, Y).
retum(X).
 bleue(X, Y):-assign(X, Y).
retum(X).
age(X, Y):-assign(X, Y).
retum(X).
description(X, Y):-

unique_rules: 
['select(X):-assign(X, "laptop").', 'quíntu(X, Y):-assign(X, Y).', 'bleue(X, Y):-assign(X, Y).', 'age(X, Y):-assign(X, Y).', 'description(X, Y):-.']

parsed: 
select(X):-assign(X, "laptop").
quíntu(X, Y):-assign(X, Y).

jaccard: 0.0


496
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "barcelona" and "storm". However, avoid any combination where predicate "barcelona" has label "laptop".

answer from file: 
combination(X,Y):-barcelona(X, _),storm(Y), not barcelona(X, laptop).

facts: 
barcelona(1..4, 1..4).storm(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "barcelona" and "storm". However, avoid any combination where predicate "barcelona" has label "laptop".
Answer: combination(X,Y):-barcelona(X, _),storm(Y), not barcelona(X, _).
combination(X,Y):-barcelona(X, _),storm(Y).
assign(X, Y)
combination(X, Y).
retum.
assign(X, Y),
retum.
 espressione(X, Y).
retum.
 quíntuple(X, Y),
retum.
 bleue(X, Y),
retum.
shape(X, Y),
retum.
city(X, Y),
retum.
age(X, Y),
retum.
name(X, Y),
retum.
price(X, Y),


unique_rules: 
['combination(X,Y):-barcelona(X, _),storm(Y), not barcelona(X, _).', 'combination(X,Y):-barcelona(X, _),storm(Y).']

parsed: 
combination(X,Y):-barcelona(X, _),storm(Y), not barcelona(X, _).

jaccard: 0.0


497
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "lightblue" having fields "ID","singaporeID","surname", and the predicate "singapore" having fields "ID","weight". Define a predicate "lightblue_singapore" that associates to each "lightblue" the "weight" of "singapore" only where "weight" is different than 50.

answer from file: 
lightblue_singapore(X,Z):-lightblue(X,Y,_),singapore(Y,Z), Z!=50.

facts: 
lightblue("ID","singaporeID","surname").singapore("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "lightblue" having fields "ID","singaporeID","surname", and the predicate "singapore" having fields "ID","weight". Define a predicate "lightblue_singapore" that associates to each "lightblue" the "weight" of "singapore" only where "weight" is different than 50.
Answer: lightblue_singapore(X,Z):-lightblue(X,Y,_),singapore(Y,Z), Z!=50.
lightblue_singapore(X,Y,_):-lightblue(X,Y,_),singapore(Y,Z), Z==50.

unique_rules: 
['lightblue_singapore(X,Z):-lightblue(X,Y,_),singapore(Y,Z), Z!=50.', 'lightblue_singapore(X,Y,_):-lightblue(X,Y,_),singapore(Y,Z), Z==50.']

parsed: 
lightblue_singapore(X,Z):-lightblue(X,Y,_),singapore(Y,Z), Z!=50.

jaccard: 1.0


498
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "owner" having fields "ID","quality","cloudID", and the predicate "cloud" having fields "ID","owner". Define a predicate "owner_cloud" that associates to each "owner", not associated with label "flower", the attribute "owner" of "cloud".

answer from file: 
owner_cloud(X,Z):-owner(X,_,Y),cloud(Y,Z),not owner(X,flower,_).

facts: 
owner("ID","quality","cloudID").cloud("ID","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "owner" having fields "ID","quality","cloudID", and the predicate "cloud" having fields "ID","owner". Define a predicate "owner_cloud" that associates to each "owner", not associated with label "flower", the attribute "owner" of "cloud".
Answer: owner_cloud(X,Z):-owner(X,_,Y),cloud(Y,Z),not owner(X,flower,_).
owner_cloud(X,Z):-owner(X,_,Y),cloud(Y,Z),label(X,flower).
 quíname(X,Z):-owner(X,_,Y),cloud(Y,Z),not label(X,age).
 quíname(X,Z):-owner(X,_,Y),cloud(Y,Z),label(X,age).
 quíname(X,Z):-owner(X,_,Y),cloud(Y,Z),not label(X,height).
 quíname(X,Z

unique_rules: 
['owner_cloud(X,Z):-owner(X,_,Y),cloud(Y,Z),not owner(X,flower,_).', 'owner_cloud(X,Z):-owner(X,_,Y),cloud(Y,Z),label(X,flower).', 'quíname(X,Z):-owner(X,_,Y),cloud(Y,Z),not label(X,age).', 'quíname(X,Z):-owner(X,_,Y),cloud(Y,Z),label(X,age).', 'quíname(X,Z):-owner(X,_,Y),cloud(Y,Z),not label(X,height).']

parsed: 
owner_cloud(X,Z):-owner(X,_,Y),cloud(Y,Z),not owner(X,flower,_).

jaccard: 1.0


499
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "butterfly" as the transitive closure of predicate "pink". Then, assign exactly one label from the set chair,butterfly,laptop to each element in "butterfly".

answer from file: 
butterfly(X,Y):-pink(X,Y).
butterfly(X,Y):-pink(X,Z),butterfly(Z,Y).
assign(X,"chair")|assign(X,"butterfly")|assign(X,"laptop"):-butterfly(X,_).

facts: 
pink(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "butterfly" as the transitive closure of predicate "pink". Then, assign exactly one label from the set chair,butterfly,laptop to each element in "butterfly".
Answer: butterfly(X,Y):-pink(X,Y).
 écouter(X,Y):-pink(X,Y).
assign(X,"chair")|assign(X," arrivant")|assign(X,"height") :-butterfly(X,_).
assign(X,"height") :-florence(X,Y),shape(Y,Z),price(Z,X).
retum(X,Y):-florence(X,Y).
retum(X,Y):-florence(X,Y),shape(Y,Z),price(Z,X).
retum(X,Y):-florence(X,Y),shape(Y,Z),price(Z,X),height

unique_rules: 
['butterfly(X,Y):-pink(X,Y).', 'écouter(X,Y):-pink(X,Y).', 'assign(X,"chair")|assign(X," arrivant")|assign(X,"height") :-butterfly(X,_).', 'assign(X,"height") :-florence(X,Y),shape(Y,Z),price(Z,X).', 'retum(X,Y):-florence(X,Y).', 'retum(X,Y):-florence(X,Y),shape(Y,Z),price(Z,X).', 'retum(X,Y):-florence(X,Y),shape(Y,Z),price(Z,X),height.']

parsed: 
butterfly(X,Y):-pink(X,Y).
écouter(X,Y):-pink(X,Y).
assign(X,"chair")|assign(X," arrivant")|assign(X,"height") :-butterfly(X,_).

jaccard: 0.0


500
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate darkmagenta. The labels are chair,butterfly,cloud,flower,desk,roof,wall. Consider only the predicate darkmagenta not associated with label "flower".

answer from file: 
assign(X,"chair")|assign(X,"butterfly")|assign(X,"cloud")|assign(X,"flower")|assign(X,"desk")|assign(X,"roof")|assign(X,"wall"):-darkmagenta(X, _), not darkmagenta(X, flower).

facts: 
darkmagenta(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate darkmagenta. The labels are chair,butterfly,cloud,flower,desk,roof,wall. Consider only the predicate darkmagenta not associated with label "flower".
Answer: assign(X,"chair")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"desk")|assign(X,"roof")|assign(X,"wall"):-darkmagenta(X, _), not darkmagenta(X, flower).
```
assign(X,"city")|assign(X,"age")|assign(X,"name")|assign(X,"price"):-darkmagenta(X, _).
```
The predicate darkmagenta has label "name", and the label "name" is not associated with label "price".
The labels are city,age,name,price,description,author,creator,shape

unique_rules: 
['assign(X,"chair")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"desk")|assign(X,"roof")|assign(X,"wall"):-darkmagenta(X, _), not darkmagenta(X, flower).', 'assign(X,"city")|assign(X,"age")|assign(X,"name")|assign(X,"price"):-darkmagenta(X, _).']

parsed: 
assign(X,"chair")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"desk")|assign(X,"roof")|assign(X,"wall"):-darkmagenta(X, _), not darkmagenta(X, flower).

jaccard: 1.0


501
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate lake and labels hair, owner having label owner different than 15. The labels are laptop,butterfly,wall,flower,storm,desk,cloud.

answer from file: 
assign(X,"laptop")|assign(X,"butterfly")|assign(X,"wall")|assign(X,"flower")|assign(X,"storm")|assign(X,"desk")|assign(X,"cloud"):-lake(X, Y), Y!=15 .

facts: 
lake(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate lake and labels hair, owner having label owner different than 15. The labels are laptop,butterfly,wall,flower,storm,desk,cloud.
Answer: assign(X," arrivant")|assign(X,"height")|assign(X,"city")|assign(X,"name")|assign(X,"age")|assign(X,"shape")|assign(X,"price")|assign(X,"author")|assign(X,"description")|assign(X,"height")|retum(X, Y), Y!=15 .
 köp(X, Y), Y!=15 .
```
 köp(X, Y), Y!=15 .
assign(X," arrivant")|assign(X,"height")|assign(X,"city")|assign(X,"name")|assign(X,"age")|assign(X,"

unique_rules: 
[]

parsed: 


jaccard: 0.0


502
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate storm. The labels are roof,butterfly,chair,desk,laptop,storm,cloud,wall,flower.  Then, filter and return only the elements assigned to label roof.".

answer from file: 
assign(X,"roof")|assign(X,"butterfly")|assign(X,"chair")|assign(X,"desk")|assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud")|assign(X,"wall")|assign(X,"flower"):-storm(X).
select(X):-assign(X, "roof").

facts: 
storm(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate storm. The labels are roof,butterfly,chair,desk,laptop,storm,cloud,wall,flower.  Then, filter and return only the elements assigned to label roof.".
Answer: assign(X," felicità")|assign(X,"creator")|assign(X,"city")|assign(X,"age")|assign(X,"name")|assign(X,"price")|assign(X,"description")|assign(X,"author")|retum(X, " felicità").
select(X):-assign(X, " felicità").
retum(X, " felicità").
```
Assign(X," felicità")|Assign(X,"creator")|Assign(X,"city")|Assign(X,"age")|Assign(X,"name")|Assign(X,"price")|Assign(X,"description")|Assign(X,"author")|retum(X, "

unique_rules: 
['select(X):-assign(X, " felicità").']

parsed: 
select(X):-assign(X, " felicità").

jaccard: 0.0


503
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "darkmagenta" and "strength". However, avoid any combination where predicate "darkmagenta" has label "laptop".

answer from file: 
combination(X,Y):-darkmagenta(X, _),strength(Y), not darkmagenta(X, laptop).

facts: 
darkmagenta(1..4, 1..4).strength(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "darkmagenta" and "strength". However, avoid any combination where predicate "darkmagenta" has label "laptop".
Answer: combination(X,Y):-darkmagenta(X, _),strength(Y), not darkmagenta(X, laptop).
combination(X,Y):-darkmagenta(X, _),strength(Y).
combination(X,Y):-darkmagenta(X, _),strength(Y), label("moto").
assign(X, Y)
retum(X, Y).
retum(X, Y), label("moto").
retum(X, Y), label("age").
retum(X, Y), label("height").
retum(X, Y), label("price").
retum(X, Y), label("description").
retum(X, Y), label("city").
retum

unique_rules: 
['combination(X,Y):-darkmagenta(X, _),strength(Y), not darkmagenta(X, laptop).', 'combination(X,Y):-darkmagenta(X, _),strength(Y).', 'combination(X,Y):-darkmagenta(X, _),strength(Y), label("moto").']

parsed: 
combination(X,Y):-darkmagenta(X, _),strength(Y), not darkmagenta(X, laptop).

jaccard: 1.0


504
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "black" having fields "ID","strength","strengthID", and the predicate "strength" having fields "ID","lake". Define a predicate "black_strength" that associates to each "black" the "lake" of "strength" only where "lake" is different than 80.

answer from file: 
black_strength(X,Z):-black(X,_,Y),strength(Y,Z), Z!=80.

facts: 
black("ID","strength","strengthID").strength("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "black" having fields "ID","strength","strengthID", and the predicate "strength" having fields "ID","lake". Define a predicate "black_strength" that associates to each "black" the "lake" of "strength" only where "lake" is different than 80.
Answer: black_strength(X,Z):-black(X,_,Y),strength(Y,Z), Z!=80.
black_strength(X,_,Y):-black(X,_,Y),strength(Y,Z), Z==80.
assign(X,black(X,_,Y))|assign(X,strength(Y,Z), Z!=80).
retum(X).
 espressione(X,Y):-black(X,_,Y),strength(Y,Z), Z==80.
retum(X).
author(X,Y):-black(X,_,Y),strength(Y,Z), Z!=80.
author(X,

unique_rules: 
['black_strength(X,Z):-black(X,_,Y),strength(Y,Z), Z!=80.', 'black_strength(X,_,Y):-black(X,_,Y),strength(Y,Z), Z==80.', 'espressione(X,Y):-black(X,_,Y),strength(Y,Z), Z==80.', 'author(X,Y):-black(X,_,Y),strength(Y,Z), Z!=80.']

parsed: 
black_strength(X,Z):-black(X,_,Y),strength(Y,Z), Z!=80.

jaccard: 1.0


505
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "chicago" having fields "ID","weight","singaporeID", and the predicate "singapore" having fields "ID","owner". Define a predicate "chicago_singapore" that associates to each "chicago", not associated with label "flower", the attribute "owner" of "singapore".

answer from file: 
chicago_singapore(X,Z):-chicago(X,_,Y),singapore(Y,Z),not chicago(X,flower,_).

facts: 
chicago("ID","weight","singaporeID").singapore("ID","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "chicago" having fields "ID","weight","singaporeID", and the predicate "singapore" having fields "ID","owner". Define a predicate "chicago_singapore" that associates to each "chicago", not associated with label "flower", the attribute "owner" of "singapore".
Answer: chicago_singapore(X,Z):-chicago(X,_,Y),singapore(Y,Z),not chicago(X,flower,_).
 ángulo(X,Y):-chicago(X,_,Y), ángulo(Y,Z).
 ángulo(X,Y):-chicago(X,_,Y),not ángulo(Y,Z).
 ángulo(X,Y):-chicago(X,_,Y),creator(X,Y).
creator(X,Y):- ángulo(X,Y).
 ángulo(X,Y):-creator(X,Y).
 ángulo(X,Y):-creator(X,Y),age(X,Y).
age

unique_rules: 
['chicago_singapore(X,Z):-chicago(X,_,Y),singapore(Y,Z),not chicago(X,flower,_).', 'ángulo(X,Y):-chicago(X,_,Y), ángulo(Y,Z).', 'ángulo(X,Y):-chicago(X,_,Y),not ángulo(Y,Z).', 'ángulo(X,Y):-chicago(X,_,Y),creator(X,Y).', 'creator(X,Y):- ángulo(X,Y).', 'ángulo(X,Y):-creator(X,Y).', 'ángulo(X,Y):-creator(X,Y),age(X,Y).']

parsed: 
chicago_singapore(X,Z):-chicago(X,_,Y),singapore(Y,Z),not chicago(X,flower,_).

jaccard: 1.0


506
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "cairo" as the transitive closure of predicate "chair". Then, assign exactly one label from the set storm,laptop,desk,chair,flower,roof,cloud,wall to each element in "cairo".

answer from file: 
cairo(X,Y):-chair(X,Y).
cairo(X,Y):-chair(X,Z),cairo(Z,Y).
assign(X,"storm")|assign(X,"laptop")|assign(X,"desk")|assign(X,"chair")|assign(X,"flower")|assign(X,"roof")|assign(X,"cloud")|assign(X,"wall"):-cairo(X,_).

facts: 
chair(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "cairo" as the transitive closure of predicate "chair". Then, assign exactly one label from the set storm,laptop,desk,chair,flower,roof,cloud,wall to each element in "cairo".
Answer: cairo(X,Y):-chair(X,Y).
cairo(X,Y):-chair(X,Z),cairo(Z,Y).
assign(X,"storm")|assign(X,"laptop")|assign(X,"desk")|assign(X,"chair")|assign(X,"flower")|assign(X,"roof")|assign(X,"cloud")|assign(X,"wall"):-cairo(X,_).
retum:
assign(X,"city")|assign(X,"age")|assign(X,"name")|assign(X,"price")|assign(X,"description")|assign(X,"author")|assign(X,"creator")|

unique_rules: 
['cairo(X,Y):-chair(X,Y).', 'cairo(X,Y):-chair(X,Z),cairo(Z,Y).', 'assign(X,"storm")|assign(X,"laptop")|assign(X,"desk")|assign(X,"chair")|assign(X,"flower")|assign(X,"roof")|assign(X,"cloud")|assign(X,"wall"):-cairo(X,_).']

parsed: 
cairo(X,Y):-chair(X,Y).
cairo(X,Y):-chair(X,Z),cairo(Z,Y).
assign(X,"storm")|assign(X,"laptop")|assign(X,"desk")|assign(X,"chair")|assign(X,"flower")|assign(X,"roof")|assign(X,"cloud")|assign(X,"wall"):-cairo(X,_).

jaccard: 1.0


507
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate roof. The labels are desk,chair. Consider only the predicate roof not associated with label "cloud".

answer from file: 
assign(X,"desk")|assign(X,"chair"):-roof(X, _), not roof(X, cloud).

facts: 
roof(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate roof. The labels are desk,chair. Consider only the predicate roof not associated with label "cloud".
Answer: assign(X,"desk")|assign(X,"chair"):-roof(X, _), not roof(X, cloud).
```
assign(X," felicità")|assign(X,"city"):-roof(X, _).
```
Explanation:
The predicate " felicità" associates to each " felicità" the "city" label, not associated with label "height".
The predicate "city" associates to each " felicità" the "city" label, not associated with label "height".
The predicate "roof" associates to each " felicità" the label "height", not associated with label "city".
Then, "assign" associates to each " felicità" the label "city", not

unique_rules: 
['assign(X,"desk")|assign(X,"chair"):-roof(X, _), not roof(X, cloud).', 'assign(X," felicità")|assign(X,"city"):-roof(X, _).']

parsed: 
assign(X,"desk")|assign(X,"chair"):-roof(X, _), not roof(X, cloud).

jaccard: 1.0


508
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate singapore and labels weight, hair having label hair different than 62. The labels are flower,roof,cloud,desk,laptop.

answer from file: 
assign(X,"flower")|assign(X,"roof")|assign(X,"cloud")|assign(X,"desk")|assign(X,"laptop"):-singapore(X, Y), Y!=62 .

facts: 
singapore(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate singapore and labels weight, hair having label hair different than 62. The labels are flower,roof,cloud,desk,laptop.
Answer: assign(X,"flower")|assign(X,"roof")|assign(X,"cloud")|assign(X,"desk")|assign(X,"laptop"):- ángulo(X, Y), Y!=62 .
```
 ángulo(X, Y):-assign(X, "height").
 ángulo(X, Y):-assign(X, "price").
 ángulo(X, Y):-assign(X, "age").
 ángulo(X, Y):-assign(X, "city").
 ángulo(X, Y):-assign(X, "name").
 ángulo(X, Y):-assign(X, "description").
 ángulo(X, Y):-

unique_rules: 
['assign(X,"flower")|assign(X,"roof")|assign(X,"cloud")|assign(X,"desk")|assign(X,"laptop"):- ángulo(X, Y), Y!=62 .', 'ángulo(X, Y):-assign(X, "height").', 'ángulo(X, Y):-assign(X, "price").', 'ángulo(X, Y):-assign(X, "age").', 'ángulo(X, Y):-assign(X, "city").', 'ángulo(X, Y):-assign(X, "name").', 'ángulo(X, Y):-assign(X, "description").', 'ángulo(X, Y):-.']

parsed: 
assign(X,"flower")|assign(X,"roof")|assign(X,"cloud")|assign(X,"desk")|assign(X,"laptop"):- ángulo(X, Y), Y!=62 .

jaccard: 0.0


509
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate flower. The labels are cloud,flower,storm,roof,wall,desk,laptop.  Then, filter and return only the elements assigned to label laptop.".

answer from file: 
assign(X,"cloud")|assign(X,"flower")|assign(X,"storm")|assign(X,"roof")|assign(X,"wall")|assign(X,"desk")|assign(X,"laptop"):-flower(X).
select(X):-assign(X, "laptop").

facts: 
flower(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate flower. The labels are cloud,flower,storm,roof,wall,desk,laptop.  Then, filter and return only the elements assigned to label laptop.".
Answer: assign(X,"cloud")|assign(X,"flower")|assign(X,"storm")|assign(X,"roof")|assign(X,"wall")|assign(X,"desk")|assign(X,"laptop"):-flower(X).
select(X):-assign(X, "laptop").
```
The predicate flower returns all the elements associated with label "moto".
Then, select only the elements assigned to label "moto".
The predicate select returns only the elements selected by predicate flower.
So, select(X):-assign(X, "moto").
But, as assign(X, "moto") returns only the elements associated with label "moto", not the elements associated with

unique_rules: 
['assign(X,"cloud")|assign(X,"flower")|assign(X,"storm")|assign(X,"roof")|assign(X,"wall")|assign(X,"desk")|assign(X,"laptop"):-flower(X).', 'select(X):-assign(X, "laptop").', 'So, select(X):-assign(X, "moto").']

parsed: 
assign(X,"cloud")|assign(X,"flower")|assign(X,"storm")|assign(X,"roof")|assign(X,"wall")|assign(X,"desk")|assign(X,"laptop"):-flower(X).
select(X):-assign(X, "laptop").

jaccard: 1.0


510
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "strength" and "barcelona". However, avoid any combination where predicate "strength" has label "storm".

answer from file: 
combination(X,Y):-strength(X, _),barcelona(Y), not strength(X, storm).

facts: 
strength(1..4, 1..4).barcelona(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "strength" and "barcelona". However, avoid any combination where predicate "strength" has label "storm".
Answer: combination(X,Y):-strength(X, _),barcelona(Y), not strength(X, storm).
combination(X,Y):-strength(X, _),barcelona(Y).
combination(X,Y):-strength(X, _),barcelona(Y), label(X, "age").
assign(X, Y)
retum(X, Y).
assign(X, Y), label(X, "age").
retum(X, Y).
 quíntuple(X, Y), label(X, "age").
 quíntuple(X, Y), label(X, "name").
 quíntuple(X, Y), label(X, "price").

unique_rules: 
['combination(X,Y):-strength(X, _),barcelona(Y), not strength(X, storm).', 'combination(X,Y):-strength(X, _),barcelona(Y).', 'combination(X,Y):-strength(X, _),barcelona(Y), label(X, "age").']

parsed: 
combination(X,Y):-strength(X, _),barcelona(Y), not strength(X, storm).

jaccard: 1.0


511
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "strength" having fields "ID","weight","pinkID", and the predicate "pink" having fields "ID","quality". Define a predicate "strength_pink" that associates to each "strength" the "quality" of "pink" only where "quality" is different than 27.

answer from file: 
strength_pink(X,Z):-strength(X,_,Y),pink(Y,Z), Z!=27.

facts: 
strength("ID","weight","pinkID").pink("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "strength" having fields "ID","weight","pinkID", and the predicate "pink" having fields "ID","quality". Define a predicate "strength_pink" that associates to each "strength" the "quality" of "pink" only where "quality" is different than 27.
Answer: strength_pink(X,Z):-strength(X,_,Y),pink(Y,Z), Z!=27.
 ángulo(X,Y):-strength(X,_,Y),pink(Y,Z), Z==27.
 ángulo(X,Y):-strength(X,_,Y),pink(Y,Z), Z!=12.
 ángulo(X,Y):-strength(X,_,Y),pink(Y,Z), Z==12.
 ángulo(X,Y):-strength(X,_,Y),pink(Y,Z), Z==18.
 ángulo(X,Y):-strength(X,_,Y),pink(

unique_rules: 
['strength_pink(X,Z):-strength(X,_,Y),pink(Y,Z), Z!=27.', 'ángulo(X,Y):-strength(X,_,Y),pink(Y,Z), Z==27.', 'ángulo(X,Y):-strength(X,_,Y),pink(Y,Z), Z!=12.', 'ángulo(X,Y):-strength(X,_,Y),pink(Y,Z), Z==12.', 'ángulo(X,Y):-strength(X,_,Y),pink(Y,Z), Z==18.', 'ángulo(X,Y):-strength(X,_,Y),pink(.']

parsed: 
strength_pink(X,Z):-strength(X,_,Y),pink(Y,Z), Z!=27.

jaccard: 1.0


512
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "barcelona" having fields "ID","strengthID","quality", and the predicate "strength" having fields "ID","quality". Define a predicate "barcelona_strength" that associates to each "barcelona", not associated with label "laptop", the attribute "quality" of "strength".

answer from file: 
barcelona_strength(X,Z):-barcelona(X,Y,_),strength(Y,Z),not barcelona(X,_,laptop).

facts: 
barcelona("ID","strengthID","quality").strength("ID","quality").

generated: 
Write an ASP program for the following problem. Consider predicate "barcelona" having fields "ID","strengthID","quality", and the predicate "strength" having fields "ID","quality". Define a predicate "barcelona_strength" that associates to each "barcelona", not associated with label "laptop", the attribute "quality" of "strength".
Answer: barcelona_strength(X,Z):-barcelona(X,Y,_),strength(Y,Z),not barcelona(X,_,laptop).
 ángulo_strength(X,Z):-barcelona(X,Y,_), ángulo(Y,Z).
 ángulo_strength(X,Z):-barcelona(X,_,_),creator(X,Z).
 ángulo_strength(X,Z):-shangai(X,Z).
 ángulo_strength(X,Z):-shangai(X,Z),creator(X,Z).
 ángulo_strength(X,Z):-shangai(X,Z),creator(X,Z),age(X,Z).
 ángulo

unique_rules: 
['barcelona_strength(X,Z):-barcelona(X,Y,_),strength(Y,Z),not barcelona(X,_,laptop).', 'ángulo_strength(X,Z):-barcelona(X,Y,_), ángulo(Y,Z).', 'ángulo_strength(X,Z):-barcelona(X,_,_),creator(X,Z).', 'ángulo_strength(X,Z):-shangai(X,Z).', 'ángulo_strength(X,Z):-shangai(X,Z),creator(X,Z).', 'ángulo_strength(X,Z):-shangai(X,Z),creator(X,Z),age(X,Z).']

parsed: 
barcelona_strength(X,Z):-barcelona(X,Y,_),strength(Y,Z),not barcelona(X,_,laptop).

jaccard: 1.0


513
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "cloud" as the transitive closure of predicate "black". Then, assign exactly one label from the set cloud,roof,wall,laptop,butterfly,desk to each element in "cloud".

answer from file: 
cloud(X,Y):-black(X,Y).
cloud(X,Y):-black(X,Z),cloud(Z,Y).
assign(X,"cloud")|assign(X,"roof")|assign(X,"wall")|assign(X,"laptop")|assign(X,"butterfly")|assign(X,"desk"):-cloud(X,_).

facts: 
black(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "cloud" as the transitive closure of predicate "black". Then, assign exactly one label from the set cloud,roof,wall,laptop,butterfly,desk to each element in "cloud".
Answer: cloud(X,Y):-black(X,Y).
cloud(X,Y):-black(X,Z),cloud(Z,Y).
assign(X,"cloud")|assign(X,"roof")|assign(X,"wall")|assign(X,"laptop")|assign(X," arrivant")|assign(X,"description"),
cloud(X,_).
retum.
 espressione:assign(X,"description")|retum.
retum.
 espressione:assign(X,"description"),
cloud(X,Y).
retum.
 espressione:assign(X,"description"),
author(X,Y).
retum.
 quí.
 quí.
 quí.
retum.

unique_rules: 
['cloud(X,Y):-black(X,Y).', 'cloud(X,Y):-black(X,Z),cloud(Z,Y).']

parsed: 
cloud(X,Y):-black(X,Y).
cloud(X,Y):-black(X,Z),cloud(Z,Y).

jaccard: 0.0


514
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate mumbai. The labels are butterfly,storm,cloud,chair. Consider only the predicate mumbai not associated with label "roof".

answer from file: 
assign(X,"butterfly")|assign(X,"storm")|assign(X,"cloud")|assign(X,"chair"):-mumbai(X, _), not mumbai(X, roof).

facts: 
mumbai(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate mumbai. The labels are butterfly,storm,cloud,chair. Consider only the predicate mumbai not associated with label "roof".
Answer: assign(X," originaux")|assign(X,"description")|assign(X,"city")|assign(X,"name")|assign(X,"shape")| espressione(X, Y), Y!=roof .
retum(X, Y), Y!=roof .
 köp(X, Y), Y!=roof .
 bleue(X, Y), Y!=roof .
age(X, Y), Y!=roof .
name(X, Y), Y!=roof .
shape(X, Y), Y!=roof .
city(X, Y), Y!=roof .
description(X, Y), Y!=roof .
 originaux(X, Y), Y!=roof .
height(

unique_rules: 
[]

parsed: 


jaccard: 0.0


515
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate wall and labels weight, hair having label hair different than 66. The labels are storm,roof,wall,laptop,chair,desk,flower.

answer from file: 
assign(X,"storm")|assign(X,"roof")|assign(X,"wall")|assign(X,"laptop")|assign(X,"chair")|assign(X,"desk")|assign(X,"flower"):-wall(X, Y), Y!=66 .

facts: 
wall(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate wall and labels weight, hair having label hair different than 66. The labels are storm,roof,wall,laptop,chair,desk,flower.
Answer: assign(X," peines")|assign(X,"florence")|assign(X,"city")|assign(X,"price")|assign(X,"age")|assign(X,"name")|assign(X,"height")|retum(X, Y), Y!=66 .
 köp(X, Y), Y!=66 .
```
 köp(X, Y), Y!=66 .
assign(X,"florence")|assign(X,"city")|assign(X,"price")|assign(X,"age")|assign(X,"name")|assign(X,"height")|retum(X, Y), Y!=66 .
 köp(X,

unique_rules: 
[]

parsed: 


jaccard: 0.0


516
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are cloud,chair,butterfly,roof,storm.  Then, filter and return only the elements assigned to label storm.".

answer from file: 
assign(X,"cloud")|assign(X,"chair")|assign(X,"butterfly")|assign(X,"roof")|assign(X,"storm"):-lake(X).
select(X):-assign(X, "storm").

facts: 
lake(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are cloud,chair,butterfly,roof,storm.  Then, filter and return only the elements assigned to label storm.".
Answer: assign(X,"cloud")|assign(X,"chair")|assign(X," arrivant")|assign(X,"rome")|assign(X,"shape")|assign(X,"city")
retum(X):-assign(X, "shape").
retum(X):-assign(X, "city").
retum(X):-assign(X, "shape").
retum(X):-assign(X, "city").
retum(X):-assign(X, "shape").
retum(X):-assign(X, "city").
retum(X):-assign(X, "shape").
retum(X):-assign(X, "city").
retum(X):-assign(X, "

unique_rules: 
['retum(X):-assign(X, "shape").', 'retum(X):-assign(X, "city").', 'retum(X):-assign(X, ".']

parsed: 
retum(X):-assign(X, "shape").
retum(X):-assign(X, "city").

jaccard: 0.0


517
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "lake" and "butterfly". However, avoid any combination where predicate "lake" has label "roof".

answer from file: 
combination(X,Y):-lake(X, _),butterfly(Y), not lake(X, roof).

facts: 
lake(1..4, 1..4).butterfly(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "lake" and "butterfly". However, avoid any combination where predicate "lake" has label "roof".
Answer: combination(X,Y):-lake(X, _),butterfly(Y), not lake(X, roof).
combination(X,Y):-lake(X, _),description(Y).
combination(X,Y):-lake(X, _),city(Y).
combination(X,Y):-lake(X, _),age(Y).
combination(X,Y):-lake(X, _),price(Y).
combination(X,Y):-description(X),city(Y).
combination(X,Y):-description(X),age(Y).
combination(X,Y):-description(X),price(Y).
retum(X,Y):-combination(X,

unique_rules: 
['combination(X,Y):-lake(X, _),butterfly(Y), not lake(X, roof).', 'combination(X,Y):-lake(X, _),description(Y).', 'combination(X,Y):-lake(X, _),city(Y).', 'combination(X,Y):-lake(X, _),age(Y).', 'combination(X,Y):-lake(X, _),price(Y).', 'combination(X,Y):-description(X),city(Y).', 'combination(X,Y):-description(X),age(Y).', 'combination(X,Y):-description(X),price(Y).', 'retum(X,Y):-combination(X,.']

parsed: 
combination(X,Y):-lake(X, _),butterfly(Y), not lake(X, roof).

jaccard: 1.0


518
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "roof" having fields "ID","lakeID","quality", and the predicate "lake" having fields "ID","hair". Define a predicate "roof_lake" that associates to each "roof" the "hair" of "lake" only where "hair" is different than 67.

answer from file: 
roof_lake(X,Z):-roof(X,Y,_),lake(Y,Z), Z!=67.

facts: 
roof("ID","lakeID","quality").lake("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "roof" having fields "ID","lakeID","quality", and the predicate "lake" having fields "ID","hair". Define a predicate "roof_lake" that associates to each "roof" the "hair" of "lake" only where "hair" is different than 67.
Answer: roof_lake(X,Z):-roof(X,Y,_),lake(Y,Z), Z!=67.
 ángulo(X,Y,Z):-roof(X,Y,_),lake(Y,Z), Z==67.
 ángulo(X,Y,Z):-roof(X,Y,_),lake(Y,Z), Z!=67.
 ángulo(X,Y,Z):-roof(X,Y,_),lake(Y,Z), Z==67.
 ángulo(X,Y,Z):-roof(X,Y,_),lake(Y,Z), Z==67.
 kollektivo(X,Y,Z

unique_rules: 
['roof_lake(X,Z):-roof(X,Y,_),lake(Y,Z), Z!=67.', 'ángulo(X,Y,Z):-roof(X,Y,_),lake(Y,Z), Z==67.', 'ángulo(X,Y,Z):-roof(X,Y,_),lake(Y,Z), Z!=67.']

parsed: 
roof_lake(X,Z):-roof(X,Y,_),lake(Y,Z), Z!=67.

jaccard: 1.0


519
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "cloud" having fields "ID","chicagoID","weight", and the predicate "chicago" having fields "ID","weight". Define a predicate "cloud_chicago" that associates to each "cloud", not associated with label "storm", the attribute "weight" of "chicago".

answer from file: 
cloud_chicago(X,Z):-cloud(X,Y,_),chicago(Y,Z),not cloud(X,_,storm).

facts: 
cloud("ID","chicagoID","weight").chicago("ID","weight").

generated: 
Write an ASP program for the following problem. Consider predicate "cloud" having fields "ID","chicagoID","weight", and the predicate "chicago" having fields "ID","weight". Define a predicate "cloud_chicago" that associates to each "cloud", not associated with label "storm", the attribute "weight" of "chicago".
Answer: cloud_chicago(X,Z):-cloud(X,Y,_),chicago(Y,Z),not cloud(X,_,storm).
cloud_chicago(X,Y,_):-cloud(X,_,_),not chicago(Y,Z).
 ángulo(X,Y,Z):-cloud(X,Y,_),chicago(Y,Z).
 ángulo(X,_,Y):-cloud(X,_,_),not chicago(Y,Z).
 ángulo(X,_,Z):-cloud(X,_,_),not chicago(Y,Z).
 ángulo(X,_,Y),not cloud(X,_,storm).
 ángulo(X,_,Y),not cloud

unique_rules: 
['cloud_chicago(X,Z):-cloud(X,Y,_),chicago(Y,Z),not cloud(X,_,storm).', 'cloud_chicago(X,Y,_):-cloud(X,_,_),not chicago(Y,Z).', 'ángulo(X,Y,Z):-cloud(X,Y,_),chicago(Y,Z).', 'ángulo(X,_,Y):-cloud(X,_,_),not chicago(Y,Z).', 'ángulo(X,_,Z):-cloud(X,_,_),not chicago(Y,Z).']

parsed: 
cloud_chicago(X,Z):-cloud(X,Y,_),chicago(Y,Z),not cloud(X,_,storm).

jaccard: 1.0


520
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "delhi" as the transitive closure of predicate "weight". Then, assign exactly one label from the set chair,wall,cloud,butterfly to each element in "delhi".

answer from file: 
delhi(X,Y):-weight(X,Y).
delhi(X,Y):-weight(X,Z),delhi(Z,Y).
assign(X,"chair")|assign(X,"wall")|assign(X,"cloud")|assign(X,"butterfly"):-delhi(X,_).

facts: 
weight(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "delhi" as the transitive closure of predicate "weight". Then, assign exactly one label from the set chair,wall,cloud,butterfly to each element in "delhi".
Answer: delhi(X,Y):-weight(X,Y).
delhi(X,Y):-weight(X,Z),delhi(Z,Y).
assign(X,"chair")|assign(X,"wall")|assign(X,"cloud")|assign(X," épar") :-delhi(X,_).
retum(X,Y):-delhi(X,Y).
retum(X,Y):-delhi(X,Z),retum(Z,Y).
retum(X,Y):-delhi(X,Z),retum(Z,Y).
retum(X,Y):-delhi(X,Z),retum(Z,Y).
retum(X

unique_rules: 
['delhi(X,Y):-weight(X,Y).', 'delhi(X,Y):-weight(X,Z),delhi(Z,Y).', 'assign(X,"chair")|assign(X,"wall")|assign(X,"cloud")|assign(X," épar") :-delhi(X,_).', 'retum(X,Y):-delhi(X,Y).', 'retum(X,Y):-delhi(X,Z),retum(Z,Y).']

parsed: 
delhi(X,Y):-weight(X,Y).
delhi(X,Y):-weight(X,Z),delhi(Z,Y).
assign(X,"chair")|assign(X,"wall")|assign(X,"cloud")|assign(X," épar") :-delhi(X,_).

jaccard: 0.0


521
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate strength. The labels are roof,chair,desk,wall,flower,cloud,laptop. Consider only the predicate strength not associated with label "storm".

answer from file: 
assign(X,"roof")|assign(X,"chair")|assign(X,"desk")|assign(X,"wall")|assign(X,"flower")|assign(X,"cloud")|assign(X,"laptop"):-strength(X, _), not strength(X, storm).

facts: 
strength(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate strength. The labels are roof,chair,desk,wall,flower,cloud,laptop. Consider only the predicate strength not associated with label "storm".
Answer: assign(X," felicità")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"name")|assign(X,"shape")|assign(X,"author")|retum(X, Y), Y!=storm .
assign(X, "description")
retum(X, Y), Y==storm .
 köp(X, Y), Y!=storm .
 köp(X, Y), Y==description .
 köp(X, Y), Y!=height .
 köp(X, Y), Y==price .
 köp(X, Y), Y!=age .

unique_rules: 
[]

parsed: 


jaccard: 0.0


522
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate cosenza and labels weight, lake having label lake different than 91. The labels are butterfly,wall,cloud,laptop,flower,storm,chair,desk.

answer from file: 
assign(X,"butterfly")|assign(X,"wall")|assign(X,"cloud")|assign(X,"laptop")|assign(X,"flower")|assign(X,"storm")|assign(X,"chair")|assign(X,"desk"):-cosenza(X, Y), Y!=91 .

facts: 
cosenza(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate cosenza and labels weight, lake having label lake different than 91. The labels are butterfly,wall,cloud,laptop,flower,storm,chair,desk.
Answer: assign(X," lavorato")|assign(X,"wall")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"florence")|assign(X,"storm")|assign(X,"chair")|assign(X,"desk"):-cosenza(X, Y), Y!=91 .
```
Assign(X," lavorato")|Assign(X,"wall")|Assign(X,"cloud")|Assign(X," arrivant")|Assign(X,"florence")|Assign(X,"storm")|Assign(X,"chair")|Assign(X,"desk"):-cosenza(X, Y), Y!=91 .
```
The predicate "

unique_rules: 
['assign(X," lavorato")|assign(X,"wall")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"florence")|assign(X,"storm")|assign(X,"chair")|assign(X,"desk"):-cosenza(X, Y), Y!=91 .', 'Assign(X," lavorato")|Assign(X,"wall")|Assign(X,"cloud")|Assign(X," arrivant")|Assign(X,"florence")|Assign(X,"storm")|Assign(X,"chair")|Assign(X,"desk"):-cosenza(X, Y), Y!=91 .']

parsed: 
assign(X," lavorato")|assign(X,"wall")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"florence")|assign(X,"storm")|assign(X,"chair")|assign(X,"desk"):-cosenza(X, Y), Y!=91 .

jaccard: 1.0


523
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate owner. The labels are laptop,chair,wall.  Then, filter and return only the elements assigned to label chair.".

answer from file: 
assign(X,"laptop")|assign(X,"chair")|assign(X,"wall"):-owner(X).
select(X):-assign(X, "chair").

facts: 
owner(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate owner. The labels are laptop,chair,wall.  Then, filter and return only the elements assigned to label chair.".
Answer: assign(X," arrivant")|assign(X,"height")|assign(X,"city")| personalità(X),
retum(X, "height").
select(X):-assign(X, "chair").
```
The predicate owner has label "height", and the label "height" has label "city". So, select(X) returns only the elements assigned to label "height".
However, if "height" has label "price", then select(X) returns only the elements assigned to label "price".
So, select(X) returns only the elements assigned to label "height".
But, if "height" has label "age", then select(X) returns only the

unique_rules: 
['select(X):-assign(X, "chair").']

parsed: 
select(X):-assign(X, "chair").

jaccard: 0.0


524
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "delhi" and "butterfly". However, avoid any combination where predicate "delhi" has label "chair".

answer from file: 
combination(X,Y):-delhi(X, _),butterfly(Y), not delhi(X, chair).

facts: 
delhi(1..4, 1..4).butterfly(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "delhi" and "butterfly". However, avoid any combination where predicate "delhi" has label "chair".
Answer: combination(X,Y):-delhi(X),butterfly(Y), not delhi(X,chair).
combination(X,Y):-delhi(X),butterfly(Y).
combination(X,Y):-delhi(X),moto(Y).
assign(X, Y):-combination(X, Y).
retum(X, Y):-assign(X, Y).
retum(X, Y):-assign(X, Y), Girona(Y).
rome(X, Y):-assign(X, Y), age(Y, 1).
rome(X, Y):-assign(X, Y), age(Y, 2).
rome(X, Y):-assign(X

unique_rules: 
['combination(X,Y):-delhi(X),butterfly(Y), not delhi(X,chair).', 'combination(X,Y):-delhi(X),butterfly(Y).', 'combination(X,Y):-delhi(X),moto(Y).', 'assign(X, Y):-combination(X, Y).', 'retum(X, Y):-assign(X, Y).', 'retum(X, Y):-assign(X, Y), Girona(Y).', 'rome(X, Y):-assign(X, Y), age(Y, 1).', 'rome(X, Y):-assign(X, Y), age(Y, 2).', 'rome(X, Y):-assign(X.']

parsed: 
combination(X,Y):-delhi(X),butterfly(Y), not delhi(X,chair).

jaccard: 0.0


525
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "delhi" having fields "ID","owner","weightID", and the predicate "weight" having fields "ID","hair". Define a predicate "delhi_weight" that associates to each "delhi" the "hair" of "weight" only where "hair" is different than 56.

answer from file: 
delhi_weight(X,Z):-delhi(X,_,Y),weight(Y,Z), Z!=56.

facts: 
delhi("ID","owner","weightID").weight("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "delhi" having fields "ID","owner","weightID", and the predicate "weight" having fields "ID","hair". Define a predicate "delhi_weight" that associates to each "delhi" the "hair" of "weight" only where "hair" is different than 56.
Answer: delhi_weight(X,Z):-delhi(X,_,Y),weight(Y,Z), Z!=56.
delhi_weight(X,_,Y):-delhi(X,_,Y),weight(Y,Z), Z==56.

unique_rules: 
['delhi_weight(X,Z):-delhi(X,_,Y),weight(Y,Z), Z!=56.', 'delhi_weight(X,_,Y):-delhi(X,_,Y),weight(Y,Z), Z==56.']

parsed: 
delhi_weight(X,Z):-delhi(X,_,Y),weight(Y,Z), Z!=56.

jaccard: 1.0


526
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "mumbai" having fields "ID","quality","roofID", and the predicate "roof" having fields "ID","surname". Define a predicate "mumbai_roof" that associates to each "mumbai", not associated with label "desk", the attribute "surname" of "roof".

answer from file: 
mumbai_roof(X,Z):-mumbai(X,_,Y),roof(Y,Z),not mumbai(X,desk,_).

facts: 
mumbai("ID","quality","roofID").roof("ID","surname").

generated: 
Write an ASP program for the following problem. Consider predicate "mumbai" having fields "ID","quality","roofID", and the predicate "roof" having fields "ID","surname". Define a predicate "mumbai_roof" that associates to each "mumbai", not associated with label "desk", the attribute "surname" of "roof".
Answer: mumbai_roof(X,Z):-mumbai(X,_,Y),roof(Y,Z),not mumbai(X,desk,_).
 ángulo(X,Y):-mumbai(X,_,Y),roof(Y,Z).
 ángulo(X,Y):-mumbai(X,_,Y),not roof(Y,Z).
 ángulo(X,Y):-mumbai(X,_,Y),roof(Y,Z).
 ángulo(X,Y):-mumbai(X,_,Y),not name(X,table,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,

unique_rules: 
['mumbai_roof(X,Z):-mumbai(X,_,Y),roof(Y,Z),not mumbai(X,desk,_).', 'ángulo(X,Y):-mumbai(X,_,Y),roof(Y,Z).', 'ángulo(X,Y):-mumbai(X,_,Y),not roof(Y,Z).', 'ángulo(X,Y):-mumbai(X,_,Y),not name(X,table,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,.']

parsed: 
mumbai_roof(X,Z):-mumbai(X,_,Y),roof(Y,Z),not mumbai(X,desk,_).

jaccard: 1.0


527
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "cosenza" as the transitive closure of predicate "lake". Then, assign exactly one label from the set butterfly,wall,laptop,desk,flower,chair to each element in "cosenza".

answer from file: 
cosenza(X,Y):-lake(X,Y).
cosenza(X,Y):-lake(X,Z),cosenza(Z,Y).
assign(X,"butterfly")|assign(X,"wall")|assign(X,"laptop")|assign(X,"desk")|assign(X,"flower")|assign(X,"chair"):-cosenza(X,_).

facts: 
lake(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "cosenza" as the transitive closure of predicate "lake". Then, assign exactly one label from the set butterfly,wall,laptop,desk,flower,chair to each element in "cosenza".
Answer: cosenza(X,Y):-lake(X,Y).
cosenza(X,Y):-lake(X,Z),cosenza(Z,Y).
assign(X," réussie")|assign(X,"florence")|assign(X,"city")|assign(X,"author")|assign(X,"description")|assign(X,"age")|assign(X,"name")|assign(X,"price")|assign(X,"shape") :-cosenza(X,_).
retum(X,Y):-assign(X,Y).
retum(X,Y):-assign(X,Z),retum(Z,Y).
retum(X,Y):-assign

unique_rules: 
['cosenza(X,Y):-lake(X,Y).', 'cosenza(X,Y):-lake(X,Z),cosenza(Z,Y).', 'assign(X," réussie")|assign(X,"florence")|assign(X,"city")|assign(X,"author")|assign(X,"description")|assign(X,"age")|assign(X,"name")|assign(X,"price")|assign(X,"shape") :-cosenza(X,_).', 'retum(X,Y):-assign(X,Y).', 'retum(X,Y):-assign(X,Z),retum(Z,Y).', 'retum(X,Y):-assign.']

parsed: 
cosenza(X,Y):-lake(X,Y).
cosenza(X,Y):-lake(X,Z),cosenza(Z,Y).
assign(X," réussie")|assign(X,"florence")|assign(X,"city")|assign(X,"author")|assign(X,"description")|assign(X,"age")|assign(X,"name")|assign(X,"price")|assign(X,"shape") :-cosenza(X,_).

jaccard: 0.0


528
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate black. The labels are desk,butterfly. Consider only the predicate black not associated with label "butterfly".

answer from file: 
assign(X,"desk")|assign(X,"butterfly"):-black(X, _), not black(X, butterfly).

facts: 
black(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate black. The labels are desk,butterfly. Consider only the predicate black not associated with label "butterfly".
Answer: assign(X," felicità")|assign(X,"creator")|assign(X,"city")|assign(X,"age")|assign(X,"name")|assign(X,"price")|assign(X,"author")|assign(X,"description")|assign(X,"height")|retum(X).
 bénéficiare(X, Y), Y!=description, label(X, Y) .
retum(X).
Explanation:
The predicate black has label "description", but not associated with label "creator".
So, assign(X," felicità")|assign(X,"creator")|assign(X,"city")|assign(X,"age")|assign(X,"name

unique_rules: 
[]

parsed: 


jaccard: 0.0


529
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate surname and labels lake, weight having label weight different than 2. The labels are cloud,laptop,storm.

answer from file: 
assign(X,"cloud")|assign(X,"laptop")|assign(X,"storm"):-surname(X, Y), Y!=2 .

facts: 
surname(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate surname and labels lake, weight having label weight different than 2. The labels are cloud,laptop,storm.
Answer: assign(X,"cloud")|assign(X,"laptop")|assign(X,"storm"):-surname(X, Y), Y!=2 .
```
assign(X,"cloud")|assign(X,"laptop")|assign(X,"storm"):-surname(X, Y), Y!=2 .
```
The predicate "name" has label "city", and the predicate "shape" has label "height".
So, the predicate "name" has label "height" only where "height" is different than 2.
The predicate "shape" has label "height" only where "height" is lower than 75.
So, the predicate "name" has label "

unique_rules: 
['assign(X,"cloud")|assign(X,"laptop")|assign(X,"storm"):-surname(X, Y), Y!=2 .']

parsed: 
assign(X,"cloud")|assign(X,"laptop")|assign(X,"storm"):-surname(X, Y), Y!=2 .

jaccard: 1.0


530
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are butterfly,cloud,flower,wall.  Then, filter and return only the elements assigned to label cloud.".

answer from file: 
assign(X,"butterfly")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-lake(X).
select(X):-assign(X, "cloud").

facts: 
lake(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are butterfly,cloud,flower,wall.  Then, filter and return only the elements assigned to label cloud.".
Answer: assign(X," épar")|assign(X,"height")|assign(X,"price")|assign(X,"author")|assign(X,"city")|lake(X).
select(X):-assign(X, "cloud").
retum(X).
```
Assign(X," épar")|Assign(X,"height")|Assign(X,"price")|Assign(X,"author")|Assign(X,"city"):-lake(X).
select(X):-assign(X, "cloud").
retum(X).
 köp: for(X in lake) do
retum(X).
 köp.
 meras: for(X in lake) do
retum(X

unique_rules: 
['select(X):-assign(X, "cloud").', 'Assign(X," épar")|Assign(X,"height")|Assign(X,"price")|Assign(X,"author")|Assign(X,"city"):-lake(X).']

parsed: 
select(X):-assign(X, "cloud").
Assign(X," épar")|Assign(X,"height")|Assign(X,"price")|Assign(X,"author")|Assign(X,"city"):-lake(X).

jaccard: 0.0


531
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "surname" and "mumbai". However, avoid any combination where predicate "surname" has label "flower".

answer from file: 
combination(X,Y):-surname(X, _),mumbai(Y), not surname(X, flower).

facts: 
surname(1..4, 1..4).mumbai(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "surname" and "mumbai". However, avoid any combination where predicate "surname" has label "flower".
Answer: combination(X,Y):-surname(X, _),mumbai(Y), not surname(X, flower).
combination(X,Y):-surname(X, _),mumbai(Y).
assign(X, Y)
combination(X, Y).
retum.
 bénéficiate(X, Y)
combination(X, Y).
retum.
 espressione(X, Y):-surname(X, _),mumbai(Y).
retum.
 bleue(X, Y):-surname(X, _),mumbai(Y), label("color").
 bleue(X, Y):-surname(X, _),mumbai(Y), label("age").
 bleue(X,

unique_rules: 
['combination(X,Y):-surname(X, _),mumbai(Y), not surname(X, flower).', 'combination(X,Y):-surname(X, _),mumbai(Y).', 'espressione(X, Y):-surname(X, _),mumbai(Y).', 'bleue(X, Y):-surname(X, _),mumbai(Y), label("color").', 'bleue(X, Y):-surname(X, _),mumbai(Y), label("age").']

parsed: 
combination(X,Y):-surname(X, _),mumbai(Y), not surname(X, flower).

jaccard: 1.0


532
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "cloud" having fields "ID","surname","whiteID", and the predicate "white" having fields "ID","surname". Define a predicate "cloud_white" that associates to each "cloud" the "surname" of "white" only where "surname" is different than 34.

answer from file: 
cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34.

facts: 
cloud("ID","surname","whiteID").white("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "cloud" having fields "ID","surname","whiteID", and the predicate "white" having fields "ID","surname". Define a predicate "cloud_white" that associates to each "cloud" the "surname" of "white" only where "surname" is different than 34.
Answer: cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34.
cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z==34.
 ángulo(X,Z):-cloud(X,_,Y),white(Y,Z).
 ángulo(X,Z):-cloud(X,_,Y),white(Y,Z), Z==34.
 ángulo(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34.
 ángulo(X,Z):-cloud(X,_,Y),white(Y,Z),

unique_rules: 
['cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34.', 'cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z==34.', 'ángulo(X,Z):-cloud(X,_,Y),white(Y,Z).', 'ángulo(X,Z):-cloud(X,_,Y),white(Y,Z), Z==34.', 'ángulo(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34.', 'ángulo(X,Z):-cloud(X,_,Y),white(Y,Z),.']

parsed: 
cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34.

jaccard: 1.0


533
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "black" having fields "ID","quality","lakeID", and the predicate "lake" having fields "ID","owner". Define a predicate "black_lake" that associates to each "black", not associated with label "laptop", the attribute "owner" of "lake".

answer from file: 
black_lake(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).

facts: 
black("ID","quality","lakeID").lake("ID","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "black" having fields "ID","quality","lakeID", and the predicate "lake" having fields "ID","owner". Define a predicate "black_lake" that associates to each "black", not associated with label "laptop", the attribute "owner" of "lake".
Answer: black_lake(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).
black_lake(X,Z):-black(X,_,Y),lake(Y,Z),label(X,laptop).
assign(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).
black_lake(X,Z):-black(X,_,Y),lake(Y,Z),label(X,height).
retum(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,height,_,_).
retum(X

unique_rules: 
['black_lake(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).', 'black_lake(X,Z):-black(X,_,Y),lake(Y,Z),label(X,laptop).', 'assign(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).', 'black_lake(X,Z):-black(X,_,Y),lake(Y,Z),label(X,height).', 'retum(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,height,_,_).']

parsed: 
black_lake(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).

jaccard: 1.0


534
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "storm" as the transitive closure of predicate "white". Then, assign exactly one label from the set chair,roof,flower,desk,wall,laptop,storm,cloud to each element in "storm".

answer from file: 
storm(X,Y):-white(X,Y).
storm(X,Y):-white(X,Z),storm(Z,Y).
assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk")|assign(X,"wall")|assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud"):-storm(X,_).

facts: 
white(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "storm" as the transitive closure of predicate "white". Then, assign exactly one label from the set chair,roof,flower,desk,wall,laptop,storm,cloud to each element in "storm".
Answer: storm(X,Y):-white(X,Y).
storm(X,Y):-white(X,Z),storm(Z,Y).
assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk")|assign(X,"wall")|assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud"):-storm(X,_).
retum:
assign(X,"city")|assign(X,"age")|assign(X,"name")|assign(X,"price")|assign(X,"description")|assign(X,"author")|assign(X,"creator")|assign

unique_rules: 
['storm(X,Y):-white(X,Y).', 'storm(X,Y):-white(X,Z),storm(Z,Y).', 'assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk")|assign(X,"wall")|assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud"):-storm(X,_).']

parsed: 
storm(X,Y):-white(X,Y).
storm(X,Y):-white(X,Z),storm(Z,Y).
assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk")|assign(X,"wall")|assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud"):-storm(X,_).

jaccard: 1.0


535
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate moscow. The labels are desk,butterfly,cloud,flower,wall. Consider only the predicate moscow not associated with label "roof".

answer from file: 
assign(X,"desk")|assign(X,"butterfly")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-moscow(X, _), not moscow(X, roof).

facts: 
moscow(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate moscow. The labels are desk,butterfly,cloud,flower,wall. Consider only the predicate moscow not associated with label "roof".
Answer: assign(X,"desk")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-moscow(X, _), not moscow(X, roof).
```
assign(X,"description")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"name"):-moscow(X, _).
```
The predicate moscow has label "description", and the predicate price has label "height". So, the predicate moscow is not associated with label "description".
The predicate price has label "height", so the predicate price is not associated with

unique_rules: 
['assign(X,"desk")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-moscow(X, _), not moscow(X, roof).', 'assign(X,"description")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"name"):-moscow(X, _).']

parsed: 
assign(X,"desk")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-moscow(X, _), not moscow(X, roof).

jaccard: 1.0


536
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate darkmagenta and labels strength, weight having label weight different than 20. The labels are wall,butterfly.

answer from file: 
assign(X,"wall")|assign(X,"butterfly"):-darkmagenta(X, Y), Y!=20 .

facts: 
darkmagenta(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate darkmagenta and labels strength, weight having label weight different than 20. The labels are wall,butterfly.
Answer: assign(X,"wall")|assign(X," arrivant")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"author")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"author") :-darkMagenta(X, Y), Y!=20 .
```
The predicate darkMagenta has label "description", and the labels are price,age,author,city,description,height,shape,name,creator,age,

unique_rules: 
['assign(X,"wall")|assign(X," arrivant")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"author")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"author") :-darkMagenta(X, Y), Y!=20 .']

parsed: 
assign(X,"wall")|assign(X," arrivant")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"author")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"author") :-darkMagenta(X, Y), Y!=20 .

jaccard: 0.0


537
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate desk. The labels are desk,storm,wall,butterfly,chair,laptop,flower,roof,cloud.  Then, filter and return only the elements assigned to label chair.".

answer from file: 
assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X,"butterfly")|assign(X,"chair")|assign(X,"laptop")|assign(X,"flower")|assign(X,"roof")|assign(X,"cloud"):-desk(X).
select(X):-assign(X, "chair").

facts: 
desk(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate desk. The labels are desk,storm,wall,butterfly,chair,laptop,flower,roof,cloud.  Then, filter and return only the elements assigned to label chair.".
Answer: assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X," arrivant")|assign(X,"chair")|assign(X," cœurs")|assign(X,"florence")|assign(X,"roof")|assign(X,"cloud"):-desk(X).
select(X):-assign(X, "chair").
```
The predicate "desk" has label "description", and the predicate "chair" has label "height".
So, the predicate "select" has label "height".
But, only the elements assigned to label "height" are returned.
This is expressed by predicate "select".
The predicate "select"

unique_rules: 
['assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X," arrivant")|assign(X,"chair")|assign(X," cœurs")|assign(X,"florence")|assign(X,"roof")|assign(X,"cloud"):-desk(X).', 'select(X):-assign(X, "chair").']

parsed: 
assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X," arrivant")|assign(X,"chair")|assign(X," cœurs")|assign(X,"florence")|assign(X,"roof")|assign(X,"cloud"):-desk(X).
select(X):-assign(X, "chair").

jaccard: 1.0


538
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "singapore" and "delhi". However, avoid any combination where predicate "singapore" has label "butterfly".

answer from file: 
combination(X,Y):-singapore(X, _),delhi(Y), not singapore(X, butterfly).

facts: 
singapore(1..4, 1..4).delhi(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "singapore" and "delhi". However, avoid any combination where predicate "singapore" has label "butterfly".
Answer: combination(X,Y):-singapore(X, _),delhi(Y), not singapore(X, butterfly).
combination(X,Y):-singapore(X, _),delhi(Y).
combination(X,Y):-singapore(X, _),delhi(Y), label("color").
assign(X, Y)
retum(X, Y).
retum(X, Y), label("color").
retum(X, Y), label("age").
retum(X, Y), label("description").
retum(X, Y), label("height").
retum(X, Y), label("price").
retum(X, Y), label("author

unique_rules: 
['combination(X,Y):-singapore(X, _),delhi(Y), not singapore(X, butterfly).', 'combination(X,Y):-singapore(X, _),delhi(Y).', 'combination(X,Y):-singapore(X, _),delhi(Y), label("color").']

parsed: 
combination(X,Y):-singapore(X, _),delhi(Y), not singapore(X, butterfly).

jaccard: 1.0


539
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "surname" having fields "ID","mumbaiID","weight", and the predicate "mumbai" having fields "ID","strength". Define a predicate "surname_mumbai" that associates to each "surname" the "strength" of "mumbai" only where "strength" is different than 62.

answer from file: 
surname_mumbai(X,Z):-surname(X,Y,_),mumbai(Y,Z), Z!=62.

facts: 
surname("ID","mumbaiID","weight").mumbai("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "surname" having fields "ID","mumbaiID","weight", and the predicate "mumbai" having fields "ID","strength". Define a predicate "surname_mumbai" that associates to each "surname" the "strength" of "mumbai" only where "strength" is different than 62.
Answer: surname_mumbai(X,Z):-surname(X,Y,_),mumbai(Y,Z), Z!=62.
 assurent(X,Y,_),mumbai(Y,Z), Z!=62.
 ángulo(X,Y,Z),not surname(X,_,Y).
 ángulo(X,Y,Z),not mumbai(Y,Z), Z!=62.
 ángulo(X,_,Z),not surname(X,_,_), Z==62.
 ángulo(X,_,Z),not mumbai(Y,Z), Z==62.
 kollektivo(X,Y,Z),not surname(X,

unique_rules: 
['surname_mumbai(X,Z):-surname(X,Y,_),mumbai(Y,Z), Z!=62.']

parsed: 
surname_mumbai(X,Z):-surname(X,Y,_),mumbai(Y,Z), Z!=62.

jaccard: 1.0


540
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "white" having fields "ID","pinkID","hair", and the predicate "pink" having fields "ID","hair". Define a predicate "white_pink" that associates to each "white", not associated with label "cloud", the attribute "hair" of "pink".

answer from file: 
white_pink(X,Z):-white(X,Y,_),pink(Y,Z),not white(X,_,cloud).

facts: 
white("ID","pinkID","hair").pink("ID","hair").

generated: 
Write an ASP program for the following problem. Consider predicate "white" having fields "ID","pinkID","hair", and the predicate "pink" having fields "ID","hair". Define a predicate "white_pink" that associates to each "white", not associated with label "cloud", the attribute "hair" of "pink".
Answer: white_pink(X,Z):-white(X,Y,_),pink(Y,Z),not white(X,_,cloud).
white_pink(X,Y,_):-white(X,_,cloud),pink(Y,Z).
assign(X,white_pink(X,_,_))|assign(X,white_pink(X,_,cloud)).
retum.
Explanation:
- "white_pink(X,Y,_):-white(X,Y,_),pink(Y,Z).
- This predicate associates to each "white", not associated with label "cloud", the attribute "hair" of "pink".
- The predicate "white" has fields "

unique_rules: 
['white_pink(X,Z):-white(X,Y,_),pink(Y,Z),not white(X,_,cloud).', 'white_pink(X,Y,_):-white(X,_,cloud),pink(Y,Z).', '- "white_pink(X,Y,_):-white(X,Y,_),pink(Y,Z).']

parsed: 
white_pink(X,Z):-white(X,Y,_),pink(Y,Z),not white(X,_,cloud).

jaccard: 1.0


541
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "strength" as the transitive closure of predicate "roof". Then, assign exactly one label from the set cloud,roof to each element in "strength".

answer from file: 
strength(X,Y):-roof(X,Y).
strength(X,Y):-roof(X,Z),strength(Z,Y).
assign(X,"cloud")|assign(X,"roof"):-strength(X,_).

facts: 
roof(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "strength" as the transitive closure of predicate "roof". Then, assign exactly one label from the set cloud,roof to each element in "strength".
Answer: strength(X,Y):-roof(X,Y).
strength(X,Y):-roof(X,Z),strength(Z,Y).
assign(X,"cloud")|assign(X,"roof"):-strength(X,_).
retum.
 ángulo(X,Y):-strength(X,Y).
 ángulo(X,Y):-strength(X,Z), ángulo(Z,Y).
 ángulo(X,Y):-strength(X,Z), ángulo(Z,Y).
 ángulo(X,Y):-strength(X,Y).
retum.
 ángulo(X,Y):-strength(X,Z), kategor(Z,Y).

unique_rules: 
['strength(X,Y):-roof(X,Y).', 'strength(X,Y):-roof(X,Z),strength(Z,Y).', 'assign(X,"cloud")|assign(X,"roof"):-strength(X,_).', 'ángulo(X,Y):-strength(X,Y).', 'ángulo(X,Y):-strength(X,Z), ángulo(Z,Y).', 'ángulo(X,Y):-strength(X,Z), kategor(Z,Y).']

parsed: 
strength(X,Y):-roof(X,Y).
strength(X,Y):-roof(X,Z),strength(Z,Y).
assign(X,"cloud")|assign(X,"roof"):-strength(X,_).

jaccard: 1.0


542
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate weight. The labels are cloud,wall,flower,chair. Consider only the predicate weight not associated with label "wall".

answer from file: 
assign(X,"cloud")|assign(X,"wall")|assign(X,"flower")|assign(X,"chair"):-weight(X, _), not weight(X, wall).

facts: 
weight(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate weight. The labels are cloud,wall,flower,chair. Consider only the predicate weight not associated with label "wall".
Answer: assign(X,"cloud")|assign(X,"wall")|assign(X,"flower")|assign(X,"chair"):-weight(X, _), not weight(X, wall).
```
assign(X,"cloud")|assign(X,"wall")|assign(X,"flower")|assign(X,"chair"):-weight(X, _), not weight(X, wall).
```

unique_rules: 
['assign(X,"cloud")|assign(X,"wall")|assign(X,"flower")|assign(X,"chair"):-weight(X, _), not weight(X, wall).']

parsed: 
assign(X,"cloud")|assign(X,"wall")|assign(X,"flower")|assign(X,"chair"):-weight(X, _), not weight(X, wall).

jaccard: 1.0


543
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate black and labels weight, quality having label quality different than 74. The labels are roof,laptop,flower.

answer from file: 
assign(X,"roof")|assign(X,"laptop")|assign(X,"flower"):-black(X, Y), Y!=74 .

facts: 
black(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate black and labels weight, quality having label quality different than 74. The labels are roof,laptop,flower.
Answer: assign(X," felicità")|assign(X,"price")|assign(X,"height") : black(X, Y), Y!=74 .
assign(X," felicità")|assign(X,"price")|assign(X,"height") : black(X, Y), Y==74 .
 köp.
Result: assign(X," felicità")|assign(X,"price")|assign(X,"height") .
Name: assign.
Description: Assign exactly a label among a given set of labels to a set of elements expressed by predicate black and labels price, height having label height different than 74.
Price: 12, 14, 16

unique_rules: 
[]

parsed: 


jaccard: 0.0


544
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate surname. The labels are wall,desk,roof,butterfly,cloud,flower,chair,storm,laptop.  Then, filter and return only the elements assigned to label cloud.".

answer from file: 
assign(X,"wall")|assign(X,"desk")|assign(X,"roof")|assign(X,"butterfly")|assign(X,"cloud")|assign(X,"flower")|assign(X,"chair")|assign(X,"storm")|assign(X,"laptop"):-surname(X).
select(X):-assign(X, "cloud").

facts: 
surname(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate surname. The labels are wall,desk,roof,butterfly,cloud,flower,chair,storm,laptop.  Then, filter and return only the elements assigned to label cloud.".
Answer: assign(X,"wall")|assign(X,"desk")|assign(X,"roof")|assign(X," épar")|assign(X,"cloud")|assign(X,"florence")|assign(X,"chair")|assign(X,"storm")|assign(X," arrivant")  retum(X).
select(X):-assign(X, "cloud").
```
The predicate "name" has label "florence", and the predicate "retum" has label "description".
So, the predicate "retum" has label "description" only where "description" is lower than 70.
The predicate "name" has label "description", and the predicate "retum"

unique_rules: 
['select(X):-assign(X, "cloud").']

parsed: 
select(X):-assign(X, "cloud").

jaccard: 0.0


545
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "cosenza" and "strength". However, avoid any combination where predicate "cosenza" has label "storm".

answer from file: 
combination(X,Y):-cosenza(X, _),strength(Y), not cosenza(X, storm).

facts: 
cosenza(1..4, 1..4).strength(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "cosenza" and "strength". However, avoid any combination where predicate "cosenza" has label "storm".
Answer: combination(X,Y):-cosenza(X, _),strength(Y), not cosenza(X, storm).
combination(X,Y):-cosenza(X, _),strength(Y).
combination(X,Y):-cosenza(X, _),strength(Y), label("city").
assign(X, Y)
retum(X, Y).
retum(X, Y), label("city").
retum(X, Y), label("price").
retum(X, Y), label("age").
retum(X, Y), label("description").
retum(X, Y), label("height").
retum(X, Y), label("author").
retum

unique_rules: 
['combination(X,Y):-cosenza(X, _),strength(Y), not cosenza(X, storm).', 'combination(X,Y):-cosenza(X, _),strength(Y).', 'combination(X,Y):-cosenza(X, _),strength(Y), label("city").']

parsed: 
combination(X,Y):-cosenza(X, _),strength(Y), not cosenza(X, storm).

jaccard: 1.0


546
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "chicago" having fields "ID","ownerID","hair", and the predicate "owner" having fields "ID","quality". Define a predicate "chicago_owner" that associates to each "chicago" the "quality" of "owner" only where "quality" is different than 7.

answer from file: 
chicago_owner(X,Z):-chicago(X,Y,_),owner(Y,Z), Z!=7.

facts: 
chicago("ID","ownerID","hair").owner("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "chicago" having fields "ID","ownerID","hair", and the predicate "owner" having fields "ID","quality". Define a predicate "chicago_owner" that associates to each "chicago" the "quality" of "owner" only where "quality" is different than 7.
Answer: chicago_owner(X,Z):-chicago(X,Y,_),owner(Y,Z), Z!=7.
 ángulo(X,Y,Z):-chicago(X,Y,_),owner(Y,Z), Z==7.
 ángulo(X,Y,Z):-chicago(X,Y,_),owner(Y,Z), Z<7.
 ángulo(X,Y,Z):-chicago(X,Y,_),owner(Y,Z), Z==7.
 ángulo(X,Y,Z):-chicago(X,Y,_),owner(Y,Z), Z>7.
 ángulo(X,Y,Z):-chicago(X,

unique_rules: 
['chicago_owner(X,Z):-chicago(X,Y,_),owner(Y,Z), Z!=7.', 'ángulo(X,Y,Z):-chicago(X,Y,_),owner(Y,Z), Z==7.', 'ángulo(X,Y,Z):-chicago(X,Y,_),owner(Y,Z), Z<7.', 'ángulo(X,Y,Z):-chicago(X,Y,_),owner(Y,Z), Z>7.', 'ángulo(X,Y,Z):-chicago(X,.']

parsed: 
chicago_owner(X,Z):-chicago(X,Y,_),owner(Y,Z), Z!=7.

jaccard: 1.0


547
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "wall" having fields "ID","lake","roofID", and the predicate "roof" having fields "ID","strength". Define a predicate "wall_roof" that associates to each "wall", not associated with label "wall", the attribute "strength" of "roof".

answer from file: 
wall_roof(X,Z):-wall(X,_,Y),roof(Y,Z),not wall(X,wall,_).

facts: 
wall("ID","lake","roofID").roof("ID","strength").

generated: 
Write an ASP program for the following problem. Consider predicate "wall" having fields "ID","lake","roofID", and the predicate "roof" having fields "ID","strength". Define a predicate "wall_roof" that associates to each "wall", not associated with label "wall", the attribute "strength" of "roof".
Answer: wall_roof(X,Z):-wall(X,_,Y),roof(Y,Z),not wall(X,wall,_).
wall_roof(X,Z):-wall(X,_,Y),roof(Y,Z),label(X,wall).
assign(X,wall_roof(X,_)).
retum.
assign(X,wall_roof(X,_)).
retum.
 quíname(X,Y):-wall(X,_,Y),roof(Y,Z),not wall(X,wall,_).
 quíname(X,Y):-wall(X,_,Y),roof(Y,Z),label(X,wall).
retum

unique_rules: 
['wall_roof(X,Z):-wall(X,_,Y),roof(Y,Z),not wall(X,wall,_).', 'wall_roof(X,Z):-wall(X,_,Y),roof(Y,Z),label(X,wall).', 'quíname(X,Y):-wall(X,_,Y),roof(Y,Z),not wall(X,wall,_).', 'quíname(X,Y):-wall(X,_,Y),roof(Y,Z),label(X,wall).']

parsed: 
wall_roof(X,Z):-wall(X,_,Y),roof(Y,Z),not wall(X,wall,_).

jaccard: 1.0


548
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "delhi" as the transitive closure of predicate "butterfly". Then, assign exactly one label from the set wall,cloud,storm,desk,laptop,flower,roof,chair,butterfly to each element in "delhi".

answer from file: 
delhi(X,Y):-butterfly(X,Y).
delhi(X,Y):-butterfly(X,Z),delhi(Z,Y).
assign(X,"wall")|assign(X,"cloud")|assign(X,"storm")|assign(X,"desk")|assign(X,"laptop")|assign(X,"flower")|assign(X,"roof")|assign(X,"chair")|assign(X,"butterfly"):-delhi(X,_).

facts: 
butterfly(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "delhi" as the transitive closure of predicate "butterfly". Then, assign exactly one label from the set wall,cloud,storm,desk,laptop,flower,roof,chair,butterfly to each element in "delhi".
Answer: delhi(X,Y):-butterfly(X,Y).
delhi(X,Y):-butterfly(X,Z),delhi(Z,Y).
assign(X,"wall")|assign(X,"cloud")|assign(X,"storm")|assign(X,"desk")|assign(X,"laptop")|assign(X,"flower")|assign(X,"roof")|assign(X,"chair")|assign(X," arrivant"):-delhi(X,_).
retum:assign(X,"city").
retum:assign(X,"age").
retum:assign(X,"description").
retum:assign(X,"price").
retum:assign(X,"

unique_rules: 
['delhi(X,Y):-butterfly(X,Y).', 'delhi(X,Y):-butterfly(X,Z),delhi(Z,Y).', 'assign(X,"wall")|assign(X,"cloud")|assign(X,"storm")|assign(X,"desk")|assign(X,"laptop")|assign(X,"flower")|assign(X,"roof")|assign(X,"chair")|assign(X," arrivant"):-delhi(X,_).']

parsed: 
delhi(X,Y):-butterfly(X,Y).
delhi(X,Y):-butterfly(X,Z),delhi(Z,Y).
assign(X,"wall")|assign(X,"cloud")|assign(X,"storm")|assign(X,"desk")|assign(X,"laptop")|assign(X,"flower")|assign(X,"roof")|assign(X,"chair")|assign(X," arrivant"):-delhi(X,_).

jaccard: 0.0


549
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate cosenza. The labels are chair,storm,roof,flower,desk. Consider only the predicate cosenza not associated with label "flower".

answer from file: 
assign(X,"chair")|assign(X,"storm")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk"):-cosenza(X, _), not cosenza(X, flower).

facts: 
cosenza(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate cosenza. The labels are chair,storm,roof,flower,desk. Consider only the predicate cosenza not associated with label "flower".
Answer: assign(X,"chair")|assign(X,"storm")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk"):-cosenza(X, _), not cosenza(X, flower).
``` italienne
assign(X,"chair")|assign(X,"storm")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk"):-cosenza(X, _), not cosenza(X, flower).
```

unique_rules: 
['assign(X,"chair")|assign(X,"storm")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk"):-cosenza(X, _), not cosenza(X, flower).']

parsed: 
assign(X,"chair")|assign(X,"storm")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk"):-cosenza(X, _), not cosenza(X, flower).

jaccard: 1.0


550
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate black and labels strength, lake having label lake different than 62. The labels are roof,flower,butterfly,desk,storm,wall.

answer from file: 
assign(X,"roof")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"desk")|assign(X,"storm")|assign(X,"wall"):-black(X, Y), Y!=62 .

facts: 
black(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate black and labels strength, lake having label lake different than 62. The labels are roof,flower,butterfly,desk,storm,wall.
Answer: assign(X," felicità")|assign(X,"florence")|assign(X,"author")|assign(X,"description")|assign(X,"height")|assign(X,"price")|assign(X,"name")|assign(X,"age")|assign(X,"city") : black(X, Y), Y!=62 .
```
The predicate black has fields "ID","description","height","price","name","city","age","author","creator","shape","descriptionID", and the predicate description has fields "ID","description","city","name".
So, the predicate description has label "name" only where "name" is different than 62.
The

unique_rules: 
[]

parsed: 


jaccard: 0.0


551
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are wall,desk,butterfly.  Then, filter and return only the elements assigned to label butterfly.".

answer from file: 
assign(X,"wall")|assign(X,"desk")|assign(X,"butterfly"):-lake(X).
select(X):-assign(X, "butterfly").

facts: 
lake(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are wall,desk,butterfly.  Then, filter and return only the elements assigned to label butterfly.".
Answer: assign(X,"wall")|assign(X,"desk")|assign(X," venant") :- lake(X).
select(X):-assign(X, " venant").
retum(X).
 köp:assign(X," venant").
retum(X).
 quíntu(X).
retum(X).
 bleue(X).
 quíntu(X).
retum(X).
shape(X, " venant").
retum(X).
age(X, " venant").
retum(X).
author(X, " venant").
retum(X).
description(X, " venant").
retum(X).
city(X, " venant").
retum(X

unique_rules: 
['assign(X,"wall")|assign(X,"desk")|assign(X," venant") :- lake(X).', 'select(X):-assign(X, " venant").']

parsed: 
assign(X,"wall")|assign(X,"desk")|assign(X," venant") :- lake(X).
select(X):-assign(X, " venant").

jaccard: 0.0


552
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "singapore" and "roof". However, avoid any combination where predicate "singapore" has label "cloud".

answer from file: 
combination(X,Y):-singapore(X, _),roof(Y), not singapore(X, cloud).

facts: 
singapore(1..4, 1..4).roof(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "singapore" and "roof". However, avoid any combination where predicate "singapore" has label "cloud".
Answer: combination(X,Y):-singapore(X, _),roof(Y), not singapore(X, cloud).
combination(X,Y):-singapore(X, _),roof(Y).
combination(X,Y):-singapore(X, _),roof(Y), label("city").
assign(X, Y)
retum(Y).
retum(X)
 quíntuple(X,Y):-assign(X, Y).
 quíntuple(X,Y):-assign(X, Y), label("city").
 quíntuple(X,Y):-assign(X, Y), label("price").
 quíntuple(X,Y):-assign(X

unique_rules: 
['combination(X,Y):-singapore(X, _),roof(Y), not singapore(X, cloud).', 'combination(X,Y):-singapore(X, _),roof(Y).', 'combination(X,Y):-singapore(X, _),roof(Y), label("city").', 'quíntuple(X,Y):-assign(X, Y).', 'quíntuple(X,Y):-assign(X, Y), label("city").', 'quíntuple(X,Y):-assign(X, Y), label("price").', 'quíntuple(X,Y):-assign(X.']

parsed: 
combination(X,Y):-singapore(X, _),roof(Y), not singapore(X, cloud).

jaccard: 1.0


553
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "lightblue" having fields "ID","wallID","owner", and the predicate "wall" having fields "ID","surname". Define a predicate "lightblue_wall" that associates to each "lightblue" the "surname" of "wall" only where "surname" is different than 87.

answer from file: 
lightblue_wall(X,Z):-lightblue(X,Y,_),wall(Y,Z), Z!=87.

facts: 
lightblue("ID","wallID","owner").wall("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "lightblue" having fields "ID","wallID","owner", and the predicate "wall" having fields "ID","surname". Define a predicate "lightblue_wall" that associates to each "lightblue" the "surname" of "wall" only where "surname" is different than 87.
Answer: lightblue_wall(X,Z):-lightblue(X,Y,_),wall(Y,Z), Z!=87.
lightblue_wall(X,Y,_),wall(Y,Z), Z==87.
```
 ángulo
SELECT ID,wallID,creator
FROM lightblue
JOIN wall ON (wall.ID,wall.creator)=(lightblue.ID,creator).
WHERE creator!=87.
```

unique_rules: 
['lightblue_wall(X,Z):-lightblue(X,Y,_),wall(Y,Z), Z!=87.']

parsed: 
lightblue_wall(X,Z):-lightblue(X,Y,_),wall(Y,Z), Z!=87.

jaccard: 1.0


554
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "chicago" having fields "ID","cosenzaID","quality", and the predicate "cosenza" having fields "ID","owner". Define a predicate "chicago_cosenza" that associates to each "chicago", not associated with label "butterfly", the attribute "owner" of "cosenza".

answer from file: 
chicago_cosenza(X,Z):-chicago(X,Y,_),cosenza(Y,Z),not chicago(X,_,butterfly).

facts: 
chicago("ID","cosenzaID","quality").cosenza("ID","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "chicago" having fields "ID","cosenzaID","quality", and the predicate "cosenza" having fields "ID","owner". Define a predicate "chicago_cosenza" that associates to each "chicago", not associated with label "butterfly", the attribute "owner" of "cosenza".
Result: chicago_cosenza(X,Z):-chicago(X,Y,_),cosenza(Y,Z),not chicago(X,_,butterfly).
 ángulo(X,Y,Z):-chicago(X,Y,_),cosenza(Y,Z),not chicago(X,_,creator).
 ángulo(X,Y,Z):-chicago(X,Y,creator),creator(Y,Z),not chicago(X,_,name).
 ángulo(X,Y,Z):-chicago(X,Y,creator),creator(Y,Z),name(X,_,creator).
 ángulo(X,Y,Z):-chicago(X,Y,creator),creator(Y

unique_rules: 
['Result: chicago_cosenza(X,Z):-chicago(X,Y,_),cosenza(Y,Z),not chicago(X,_,butterfly).', 'ángulo(X,Y,Z):-chicago(X,Y,_),cosenza(Y,Z),not chicago(X,_,creator).', 'ángulo(X,Y,Z):-chicago(X,Y,creator),creator(Y,Z),not chicago(X,_,name).', 'ángulo(X,Y,Z):-chicago(X,Y,creator),creator(Y,Z),name(X,_,creator).', 'ángulo(X,Y,Z):-chicago(X,Y,creator),creator(Y.']

parsed: 
Result: chicago_cosenza(X,Z):-chicago(X,Y,_),cosenza(Y,Z),not chicago(X,_,butterfly).

jaccard: 0.0


555
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "cloud" as the transitive closure of predicate "weight". Then, assign exactly one label from the set roof,butterfly,storm,laptop,chair,desk,wall to each element in "cloud".

answer from file: 
cloud(X,Y):-weight(X,Y).
cloud(X,Y):-weight(X,Z),cloud(Z,Y).
assign(X,"roof")|assign(X,"butterfly")|assign(X,"storm")|assign(X,"laptop")|assign(X,"chair")|assign(X,"desk")|assign(X,"wall"):-cloud(X,_).

facts: 
weight(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "cloud" as the transitive closure of predicate "weight". Then, assign exactly one label from the set roof,butterfly,storm,laptop,chair,desk,wall to each element in "cloud".
Answer: cloud(X,Y):-weight(X,Y).
cloud(X,Y):-weight(X,Z),cloud(Z,Y).
assign(X,"roof")|assign(X," arrivant")|assign(X,"height")|assign(X,"shape")|assign(X,"price")|assign(X,"age")|assign(X,"city"):-cloud(X,_).
retum:assign(X,"city").
retum:assign(X,"shape").
retum:assign(X,"price").
retum:assign(X,"age").
retum:assign(X,"height").
retum:assign(X,"name").
retum:assign(X,"

unique_rules: 
['cloud(X,Y):-weight(X,Y).', 'cloud(X,Y):-weight(X,Z),cloud(Z,Y).', 'assign(X,"roof")|assign(X," arrivant")|assign(X,"height")|assign(X,"shape")|assign(X,"price")|assign(X,"age")|assign(X,"city"):-cloud(X,_).']

parsed: 
cloud(X,Y):-weight(X,Y).
cloud(X,Y):-weight(X,Z),cloud(Z,Y).
assign(X,"roof")|assign(X," arrivant")|assign(X,"height")|assign(X,"shape")|assign(X,"price")|assign(X,"age")|assign(X,"city"):-cloud(X,_).

jaccard: 0.0


556
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are butterfly,roof,wall,cloud. Consider only the predicate lake not associated with label "butterfly".

answer from file: 
assign(X,"butterfly")|assign(X,"roof")|assign(X,"wall")|assign(X,"cloud"):-lake(X, _), not lake(X, butterfly).

facts: 
lake(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are butterfly,roof,wall,cloud. Consider only the predicate lake not associated with label "butterfly".
Answer: assign(X," ↔lake(X, _), " ↔lake(X, _), _")
retum(X, Y), Y!=12, Z, Z!=12, assign(X," ↔lake(X, _), _").
 köp(X, Y), Y!=12, Z, Z!=12, assign(X," ↔lake(X, _), _").
 kollektive(X, Y), Y!=12, Z, Z!=12, assign(X," ↔lake(X, _), _").
 bleue(X, Y), Y!=12, Z, Z!=12, assign(X," ↔lake(X, _

unique_rules: 
[]

parsed: 


jaccard: 0.0


557
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate pink and labels lake, hair having label hair different than 23. The labels are laptop,storm,chair,desk,flower,cloud,butterfly,roof.

answer from file: 
assign(X,"laptop")|assign(X,"storm")|assign(X,"chair")|assign(X,"desk")|assign(X,"flower")|assign(X,"cloud")|assign(X,"butterfly")|assign(X,"roof"):-pink(X, Y), Y!=23 .

facts: 
pink(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate pink and labels lake, hair having label hair different than 23. The labels are laptop,storm,chair,desk,flower,cloud,butterfly,roof.
Answer: assign(X," arrivant")|assign(X," peines")|assign(X,"height")|assign(X,"creator")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"name")|assign(X,"price")|assign(X,"shape") :-pink(X, Y), Y!=23 .
Assign(X,"creator")|assign(X,"description")|assign(X,"name")|assign(X,"price")|assign(X,"shape") :-florence(X).
The predicate florence has label description, and the predicate pink has label creator, description, name, price,

unique_rules: 
['assign(X," arrivant")|assign(X," peines")|assign(X,"height")|assign(X,"creator")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"name")|assign(X,"price")|assign(X,"shape") :-pink(X, Y), Y!=23 .', 'Assign(X,"creator")|assign(X,"description")|assign(X,"name")|assign(X,"price")|assign(X,"shape") :-florence(X).']

parsed: 
assign(X," arrivant")|assign(X," peines")|assign(X,"height")|assign(X,"creator")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"name")|assign(X,"price")|assign(X,"shape") :-pink(X, Y), Y!=23 .

jaccard: 0.0


558
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate pink. The labels are chair,cloud,wall,roof,butterfly.  Then, filter and return only the elements assigned to label cloud.".

answer from file: 
assign(X,"chair")|assign(X,"cloud")|assign(X,"wall")|assign(X,"roof")|assign(X,"butterfly"):-pink(X).
select(X):-assign(X, "cloud").

facts: 
pink(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate pink. The labels are chair,cloud,wall,roof,butterfly.  Then, filter and return only the elements assigned to label cloud.".
Answer: assign(X,"chair")|assign(X,"cloud")|assign(X,"wall")|assign(X,"roof")|assign(X," arrivant")==>pink(X).
select(X):-assign(X, "cloud").
retum(X).
 köp:assign(X,"city").
retum(X).
 quíntu(X, "city").
retum(X).
 bleue(X, "city").
retum(X).
age(X, "city").
retum(X).
author(X, "city").
retum(X).
description(X, "city").
retum(X).
name(X, "city").
retum(

unique_rules: 
['select(X):-assign(X, "cloud").']

parsed: 
select(X):-assign(X, "cloud").

jaccard: 0.0


559
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "chair" and "butterfly". However, avoid any combination where predicate "chair" has label "laptop".

answer from file: 
combination(X,Y):-chair(X, _),butterfly(Y), not chair(X, laptop).

facts: 
chair(1..4, 1..4).butterfly(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "chair" and "butterfly". However, avoid any combination where predicate "chair" has label "laptop".
Answer: combination(X,Y):-chair(X, _),butterfly(Y), not chair(X, laptop).
combination(X,Y):-chair(X, _),moto(Y).
combination(X,Y):-chair(X, _),age(Y).
combination(X,Y):-moto(X), age(Y).
combination(X,Y):-moto(X), age(Y), _ .
assign(X, Y), not chair(X, _).
assign(X, Y), not moto(X).
assign(X, Y), not age(X).
retum(X, Y), not chair(X, _).
retum(X, Y

unique_rules: 
['combination(X,Y):-chair(X, _),butterfly(Y), not chair(X, laptop).', 'combination(X,Y):-chair(X, _),moto(Y).', 'combination(X,Y):-chair(X, _),age(Y).', 'combination(X,Y):-moto(X), age(Y).', 'combination(X,Y):-moto(X), age(Y), _ .']

parsed: 
combination(X,Y):-chair(X, _),butterfly(Y), not chair(X, laptop).

jaccard: 1.0


560
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "roof" having fields "ID","lake","lakeID", and the predicate "lake" having fields "ID","strength". Define a predicate "roof_lake" that associates to each "roof" the "strength" of "lake" only where "strength" is different than 20.

answer from file: 
roof_lake(X,Z):-roof(X,_,Y),lake(Y,Z), Z!=20.

facts: 
roof("ID","lake","lakeID").lake("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "roof" having fields "ID","lake","lakeID", and the predicate "lake" having fields "ID","strength". Define a predicate "roof_lake" that associates to each "roof" the "strength" of "lake" only where "strength" is different than 20.
Answer: roof_lake(X,Z):-roof(X,_,Y),lake(Y,Z), Z!=20.
 ángulo(X,Y):-roof(X,Y,_),lake(Y,Z), Z!=20.
 ángulo(X,Y):-roof(X,_,Y),lake(Y,Z), Z==20.
 ángulo(X,Y):-roof(X,_,Y),lake(Y,Z), Z==19.
 ángulo(X,Y):-roof(X,_,Y),lake(Y,Z), Z==18.
 ángulo(X,Y):-roof(X,_,Y),lake(

unique_rules: 
['roof_lake(X,Z):-roof(X,_,Y),lake(Y,Z), Z!=20.', 'ángulo(X,Y):-roof(X,Y,_),lake(Y,Z), Z!=20.', 'ángulo(X,Y):-roof(X,_,Y),lake(Y,Z), Z==20.', 'ángulo(X,Y):-roof(X,_,Y),lake(Y,Z), Z==19.', 'ángulo(X,Y):-roof(X,_,Y),lake(Y,Z), Z==18.', 'ángulo(X,Y):-roof(X,_,Y),lake(.']

parsed: 
roof_lake(X,Z):-roof(X,_,Y),lake(Y,Z), Z!=20.

jaccard: 1.0


561
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "barcelona" having fields "ID","strengthID","quality", and the predicate "strength" having fields "ID","hair". Define a predicate "barcelona_strength" that associates to each "barcelona", not associated with label "chair", the attribute "hair" of "strength".

answer from file: 
barcelona_strength(X,Z):-barcelona(X,Y,_),strength(Y,Z),not barcelona(X,_,chair).

facts: 
barcelona("ID","strengthID","quality").strength("ID","hair").

generated: 
Write an ASP program for the following problem. Consider predicate "barcelona" having fields "ID","strengthID","quality", and the predicate "strength" having fields "ID","hair". Define a predicate "barcelona_strength" that associates to each "barcelona", not associated with label "chair", the attribute "hair" of "strength".
Answer: barcelona_strength(X,Z):-barcelona(X,Y,_),strength(Y,Z),not barcelona(X,_,chair).
 ángulo_strength(X,Z):-barcelona(X,Y,_), ángulo(Y,Z).
 ángulo_strength(X,Z):-shangai(X,Z).
 ángulo_strength(X,Z):-shangai(X,Z),city(X,_,name).
 ángulo_strength(X,Z):-shangai(X,Z),city(X,_,description).
 ángulo_strength(X,Z):-shangai(X,Z),city(X,_,price).
 ángulo_strength

unique_rules: 
['barcelona_strength(X,Z):-barcelona(X,Y,_),strength(Y,Z),not barcelona(X,_,chair).', 'ángulo_strength(X,Z):-barcelona(X,Y,_), ángulo(Y,Z).', 'ángulo_strength(X,Z):-shangai(X,Z).', 'ángulo_strength(X,Z):-shangai(X,Z),city(X,_,name).', 'ángulo_strength(X,Z):-shangai(X,Z),city(X,_,description).', 'ángulo_strength(X,Z):-shangai(X,Z),city(X,_,price).']

parsed: 
barcelona_strength(X,Z):-barcelona(X,Y,_),strength(Y,Z),not barcelona(X,_,chair).

jaccard: 1.0


562
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "chicago" as the transitive closure of predicate "darkmagenta". Then, assign exactly one label from the set flower,chair,storm,wall,butterfly to each element in "chicago".

answer from file: 
chicago(X,Y):-darkmagenta(X,Y).
chicago(X,Y):-darkmagenta(X,Z),chicago(Z,Y).
assign(X,"flower")|assign(X,"chair")|assign(X,"storm")|assign(X,"wall")|assign(X,"butterfly"):-chicago(X,_).

facts: 
darkmagenta(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "chicago" as the transitive closure of predicate "darkmagenta". Then, assign exactly one label from the set flower,chair,storm,wall,butterfly to each element in "chicago".
Answer: chicago(X,Y):-darkmagenta(X,Y).
chicago(X,Y):-darkmagenta(X,Z),chicago(Z,Y).
assign(X,"flower")|assign(X,"chair")|assign(X,"storm")|assign(X,"wall")|assign(X," arrivant") :-chicago(X,_).
retum(X,Y):-chicago(X,Y).
retum(X,Y):-chicago(X,Z),retum(Z,Y).
retum(X,Y):-chicago(X,Z),retum(Z,Y).
retum(X,Y):-chicago(X,Z),retum(Z,Y).
retum

unique_rules: 
['chicago(X,Y):-darkmagenta(X,Y).', 'chicago(X,Y):-darkmagenta(X,Z),chicago(Z,Y).', 'assign(X,"flower")|assign(X,"chair")|assign(X,"storm")|assign(X,"wall")|assign(X," arrivant") :-chicago(X,_).', 'retum(X,Y):-chicago(X,Y).', 'retum(X,Y):-chicago(X,Z),retum(Z,Y).']

parsed: 
chicago(X,Y):-darkmagenta(X,Y).
chicago(X,Y):-darkmagenta(X,Z),chicago(Z,Y).
assign(X,"flower")|assign(X,"chair")|assign(X,"storm")|assign(X,"wall")|assign(X," arrivant") :-chicago(X,_).

jaccard: 0.0


563
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate darkmagenta. The labels are butterfly,storm,chair,roof,flower,laptop,cloud. Consider only the predicate darkmagenta not associated with label "wall".

answer from file: 
assign(X,"butterfly")|assign(X,"storm")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"laptop")|assign(X,"cloud"):-darkmagenta(X, _), not darkmagenta(X, wall).

facts: 
darkmagenta(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate darkmagenta. The labels are butterfly,storm,chair,roof,flower,laptop,cloud. Consider only the predicate darkmagenta not associated with label "wall".
Answer: assign(X," épar")|assign(X,"florence")|assign(X,"height")|assign(X,"price")|assign(X,"author")|assign(X,"city")|assign(X,"description")|assign(X,"name")|assign(X,"age")|assign(X,"shape")|assign(X,"city"), darkmagenta(X, _), not darkmagenta(X, wall).
```
assign(X," épar")|assign(X,"florence")|assign(X,"height")|assign(X,"price")|assign(X,"author")|assign(X,"city")|assign(X,"description")|assign(

unique_rules: 
[]

parsed: 


jaccard: 0.0


564
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate lake and labels owner, quality having label quality different than 2. The labels are flower,cloud,butterfly,wall,desk,chair,storm.

answer from file: 
assign(X,"flower")|assign(X,"cloud")|assign(X,"butterfly")|assign(X,"wall")|assign(X,"desk")|assign(X,"chair")|assign(X,"storm"):-lake(X, Y), Y!=2 .

facts: 
lake(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate lake and labels owner, quality having label quality different than 2. The labels are flower,cloud,butterfly,wall,desk,chair,storm.
Answer: assign(X,"flower")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"wall")|assign(X,"desk")|assign(X,"chair")|assign(X,"storm"):-lake(X, Y), Y!=2 .
```
Assign(X,"florence")|Assign(X,"cloud")|Assign(X," arrivant")|Assign(X,"wall")|Assign(X,"desk")|Assign(X,"chair")|Assign(X,"storm"):-lake(X, Y), Y!=2 .
```

unique_rules: 
['assign(X,"flower")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"wall")|assign(X,"desk")|assign(X,"chair")|assign(X,"storm"):-lake(X, Y), Y!=2 .', 'Assign(X,"florence")|Assign(X,"cloud")|Assign(X," arrivant")|Assign(X,"wall")|Assign(X,"desk")|Assign(X,"chair")|Assign(X,"storm"):-lake(X, Y), Y!=2 .']

parsed: 
assign(X,"flower")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"wall")|assign(X,"desk")|assign(X,"chair")|assign(X,"storm"):-lake(X, Y), Y!=2 .

jaccard: 1.0


565
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lightblue. The labels are roof,butterfly.  Then, filter and return only the elements assigned to label roof.".

answer from file: 
assign(X,"roof")|assign(X,"butterfly"):-lightblue(X).
select(X):-assign(X, "roof").

facts: 
lightblue(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lightblue. The labels are roof,butterfly.  Then, filter and return only the elements assigned to label roof.".
Answer: assign(X," felicità")|assign(X,"height")|assign(X,"price")|assign(X,"city")|assign(X,"author")|retum(X).
select(X):-assign(X, " felicità").
retum(X).
```
Assign(X," felicità")|Assign(X,"height")|Assign(X,"price")|Assign(X,"city")|Assign(X,"author"):-lightblue(X).
select(X):-assign(X, " felicità").
retum(X).
 köp: for(X in lightblue) do assign(X, " felicità").
retum(X).
 köp: for(X in light

unique_rules: 
['select(X):-assign(X, " felicità").', 'Assign(X," felicità")|Assign(X,"height")|Assign(X,"price")|Assign(X,"city")|Assign(X,"author"):-lightblue(X).']

parsed: 
select(X):-assign(X, " felicità").
Assign(X," felicità")|Assign(X,"height")|Assign(X,"price")|Assign(X,"city")|Assign(X,"author"):-lightblue(X).

jaccard: 0.0


566
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "darkmagenta" and "pink". However, avoid any combination where predicate "darkmagenta" has label "roof".

answer from file: 
combination(X,Y):-darkmagenta(X, _),pink(Y), not darkmagenta(X, roof).

facts: 
darkmagenta(1..4, 1..4).pink(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "darkmagenta" and "pink". However, avoid any combination where predicate "darkmagenta" has label "roof".
Answer: combination(X,Y):-darkmagenta(X, _),pink(Y), not darkmagenta(X, roof).
combination(X,Y):-darkmagenta(X, _),pink(Y).
combination(X,Y):-darkmagenta(X, _),pink(Y), label("object").
assign(X, Y)
retum(X, Y).
retum(X, Y), label("object").
retum(X, Y), label("price").
retum(X, Y), label("description").
retum(X, Y), label("city").
retum(X, Y), label("age").
retum(X, Y), label("name").
retum

unique_rules: 
['combination(X,Y):-darkmagenta(X, _),pink(Y), not darkmagenta(X, roof).', 'combination(X,Y):-darkmagenta(X, _),pink(Y).', 'combination(X,Y):-darkmagenta(X, _),pink(Y), label("object").']

parsed: 
combination(X,Y):-darkmagenta(X, _),pink(Y), not darkmagenta(X, roof).

jaccard: 1.0


567
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "darkmagenta" having fields "ID","surnameID","owner", and the predicate "surname" having fields "ID","lake". Define a predicate "darkmagenta_surname" that associates to each "darkmagenta" the "lake" of "surname" only where "lake" is different than 51.

answer from file: 
darkmagenta_surname(X,Z):-darkmagenta(X,Y,_),surname(Y,Z), Z!=51.

facts: 
darkmagenta("ID","surnameID","owner").surname("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "darkmagenta" having fields "ID","surnameID","owner", and the predicate "surname" having fields "ID","lake". Define a predicate "darkmagenta_surname" that associates to each "darkmagenta" the "lake" of "surname" only where "lake" is different than 51.
Answer: darkmagenta_surname(X,Z):-darkmagenta(X,Y,_),surname(Y,Z), Z!=51.
darkmagenta_surname(X,Y,_),_, Z==51.
```
 ángulo
DEFINE
darkmagenta_surname(X,Y,_),Z!=51.
darkmagenta(X,Y,_),surname(Y,Z), Z==51.
```
Explanation:
- "darkmagenta_surname(X,Y,_),Z!=51" associates to each "darkmagenta" the "lake" of "surname" only where "lake" is different than 51.
- "darkmagenta(X,Y

unique_rules: 
['darkmagenta_surname(X,Z):-darkmagenta(X,Y,_),surname(Y,Z), Z!=51.']

parsed: 
darkmagenta_surname(X,Z):-darkmagenta(X,Y,_),surname(Y,Z), Z!=51.

jaccard: 1.0


568
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "cloud" having fields "ID","owner","blackID", and the predicate "black" having fields "ID","quality". Define a predicate "cloud_black" that associates to each "cloud", not associated with label "cloud", the attribute "quality" of "black".

answer from file: 
cloud_black(X,Z):-cloud(X,_,Y),black(Y,Z),not cloud(X,cloud,_).

facts: 
cloud("ID","owner","blackID").black("ID","quality").

generated: 
Write an ASP program for the following problem. Consider predicate "cloud" having fields "ID","owner","blackID", and the predicate "black" having fields "ID","quality". Define a predicate "cloud_black" that associates to each "cloud", not associated with label "cloud", the attribute "quality" of "black".
Answer: cloud_black(X,Z):-cloud(X,_,Y),black(Y,Z),not cloud(X,cloud,_).
cloud_black(X,Z):-cloud(X,_,Y),black(Y,Z),cloud(X,cloud,_) .
assign(X,cloud_black(X,Z))
retum.
assign(X,cloud_black(X,Z))
retum.
 quí.
retum.
 quí.
 quí.
retum.
 quí.
retum.
 quí.
retum.
 quí.
retum.
 quí.
retum.
 quí.
retum.
 quí.
retum.
 quí.
retum

unique_rules: 
['cloud_black(X,Z):-cloud(X,_,Y),black(Y,Z),not cloud(X,cloud,_).', 'cloud_black(X,Z):-cloud(X,_,Y),black(Y,Z),cloud(X,cloud,_) .']

parsed: 
cloud_black(X,Z):-cloud(X,_,Y),black(Y,Z),not cloud(X,cloud,_).

jaccard: 1.0


569
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "desk" as the transitive closure of predicate "flower". Then, assign exactly one label from the set cloud,chair,wall,desk,butterfly,flower,laptop to each element in "desk".

answer from file: 
desk(X,Y):-flower(X,Y).
desk(X,Y):-flower(X,Z),desk(Z,Y).
assign(X,"cloud")|assign(X,"chair")|assign(X,"wall")|assign(X,"desk")|assign(X,"butterfly")|assign(X,"flower")|assign(X,"laptop"):-desk(X,_).

facts: 
flower(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "desk" as the transitive closure of predicate "flower". Then, assign exactly one label from the set cloud,chair,wall,desk,butterfly,flower,laptop to each element in "desk".
Answer: desk(X,Y):-flower(X,Y).
desk(X,Y):-flower(X,Z),desk(Z,Y).
assign(X,"cloud")|assign(X,"chair")|assign(X,"wall")|assign(X,"desk")|assign(X," arrivant")|assign(X,"florence")|assign(X,"name")|assign(X,"shape")==>desk(X).
retum(X,Y):-assign(X,Y).
retum(X,Y):-assign(X,Z),retum(Z,Y).
retum(X,Y):-assign(X,Z),retum(Z,Y).
retum(

unique_rules: 
['desk(X,Y):-flower(X,Y).', 'desk(X,Y):-flower(X,Z),desk(Z,Y).', 'retum(X,Y):-assign(X,Y).', 'retum(X,Y):-assign(X,Z),retum(Z,Y).']

parsed: 
desk(X,Y):-flower(X,Y).
desk(X,Y):-flower(X,Z),desk(Z,Y).
retum(X,Y):-assign(X,Y).

jaccard: 0.0


570
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate roof. The labels are desk,storm,chair. Consider only the predicate roof not associated with label "flower".

answer from file: 
assign(X,"desk")|assign(X,"storm")|assign(X,"chair"):-roof(X, _), not roof(X, flower).

facts: 
roof(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate roof. The labels are desk,storm,chair. Consider only the predicate roof not associated with label "flower".
Answer: assign(X,"desk")|assign(X,"storm")|assign(X,"chair"):-roof(X, _), not roof(X, flower).
```
assign(X," felicità")|assign(X,"city")|assign(X,"age"):-roof(X, _).
```
The predicate " felicità" has label "age", but not "city".
The labels are "age","description","city","name","shape","price","author","creator","height","description".
The labels are "description","price","author","shape","age","city","name","creator","height".
The labels are "description","price","author","shape","age","city","

unique_rules: 
['assign(X,"desk")|assign(X,"storm")|assign(X,"chair"):-roof(X, _), not roof(X, flower).', 'assign(X," felicità")|assign(X,"city")|assign(X,"age"):-roof(X, _).']

parsed: 
assign(X,"desk")|assign(X,"storm")|assign(X,"chair"):-roof(X, _), not roof(X, flower).

jaccard: 1.0


571
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate cloud and labels owner, weight having label weight different than 15. The labels are chair,storm.

answer from file: 
assign(X,"chair")|assign(X,"storm"):-cloud(X, Y), Y!=15 .

facts: 
cloud(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate cloud and labels owner, weight having label weight different than 15. The labels are chair,storm.
``` italienne
assign(X,"chair")|assign(X,"storm"):-cloud(X, Y), Y!=15 .
```
The predicate cloud has label "height", and the labels are price,city,description,age,shape,author,creator,name,height,description,age,city,price,shape,author,creator,name,height,description,age,city,price,shape,author,creator,name,height,description,age,city,price,shape,author,creator,name,height,description,age,city,price,shape,author,creator,name,height,description,age,city,price,shape,author,creator,name,

unique_rules: 
['assign(X,"chair")|assign(X,"storm"):-cloud(X, Y), Y!=15 .']

parsed: 
assign(X,"chair")|assign(X,"storm"):-cloud(X, Y), Y!=15 .

jaccard: 1.0


572
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate roof. The labels are wall,storm,butterfly,laptop,chair,roof.  Then, filter and return only the elements assigned to label roof.".

answer from file: 
assign(X,"wall")|assign(X,"storm")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"chair")|assign(X,"roof"):-roof(X).
select(X):-assign(X, "roof").

facts: 
roof(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate roof. The labels are wall,storm,butterfly,laptop,chair,roof.  Then, filter and return only the elements assigned to label roof.".
Answer: assign(X,"wall")|assign(X,"storm")|assign(X," felicità")|assign(X," arrivant")|assign(X,"chair")|assign(X,"roof"):-roof(X).
select(X):-assign(X, "roof").
```
Assign(X," felicità")
select(X):-assign(X, " felicità").
assign(X," arrivant")
select(X):-assign(X, " arrivant").
assign(X,"chair")
select(X):-assign(X, "chair").
assign(X," arrivant")
select(X):-assign(X, " felicità").
retum(X).
```
The predicate roof

unique_rules: 
['assign(X,"wall")|assign(X,"storm")|assign(X," felicità")|assign(X," arrivant")|assign(X,"chair")|assign(X,"roof"):-roof(X).', 'select(X):-assign(X, "roof").', 'select(X):-assign(X, " felicità").', 'select(X):-assign(X, " arrivant").', 'select(X):-assign(X, "chair").']

parsed: 
assign(X,"wall")|assign(X,"storm")|assign(X," felicità")|assign(X," arrivant")|assign(X,"chair")|assign(X,"roof"):-roof(X).
select(X):-assign(X, "roof").

jaccard: 1.0


573
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "lake" and "chicago". However, avoid any combination where predicate "lake" has label "desk".

answer from file: 
combination(X,Y):-lake(X, _),chicago(Y), not lake(X, desk).

facts: 
lake(1..4, 1..4).chicago(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "lake" and "chicago". However, avoid any combination where predicate "lake" has label "desk".
Answer: combination(X,Y):-lake(X, _),chicago(Y), not lake(X, desk).
combination(X,Y):-lake(X, _),chicago(Y).
combination(X,Y):-lake(X, _),chicago(Y), label(X, desk).
```
Combinations are expressed by predicate "combination".
However, avoid any combination where predicate "lake" has label "description".
```
result: combination(X,Y):-lake(X, _),chicago(Y), not lake(X, description).
```
The predicate "combination" has label "description", so it only returns the combinations where predicate "lake" has label "description

unique_rules: 
['combination(X,Y):-lake(X, _),chicago(Y), not lake(X, desk).', 'combination(X,Y):-lake(X, _),chicago(Y).', 'combination(X,Y):-lake(X, _),chicago(Y), label(X, desk).', 'result: combination(X,Y):-lake(X, _),chicago(Y), not lake(X, description).']

parsed: 
combination(X,Y):-lake(X, _),chicago(Y), not lake(X, desk).

jaccard: 1.0


574
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "singapore" having fields "ID","torontoID","quality", and the predicate "toronto" having fields "ID","lake". Define a predicate "singapore_toronto" that associates to each "singapore" the "lake" of "toronto" only where "lake" is different than 84.

answer from file: 
singapore_toronto(X,Z):-singapore(X,Y,_),toronto(Y,Z), Z!=84.

facts: 
singapore("ID","torontoID","quality").toronto("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "singapore" having fields "ID","torontoID","quality", and the predicate "toronto" having fields "ID","lake". Define a predicate "singapore_toronto" that associates to each "singapore" the "lake" of "toronto" only where "lake" is different than 84.
Answer: singapore_toronto(X,Z):-singapore(X,Y,_),toronto(Y,Z), Z!=84.
 ángulo(X,Y,Z):-singapore(X,Y,_),toronto(Y,Z), Z==84.
 ángulo(X,Y,Z):-singapore(X,Y,_),toronto(Y,Z), Z==85.
 ángulo(X,Y,Z):-singapore(X,Y,_),toronto(Y,Z), Z==86.
 ángulo(X,Y,Z):-singapore(X,Y,_),toronto(Y,Z), Z==87.
 ángulo(

unique_rules: 
['singapore_toronto(X,Z):-singapore(X,Y,_),toronto(Y,Z), Z!=84.', 'ángulo(X,Y,Z):-singapore(X,Y,_),toronto(Y,Z), Z==84.', 'ángulo(X,Y,Z):-singapore(X,Y,_),toronto(Y,Z), Z==85.', 'ángulo(X,Y,Z):-singapore(X,Y,_),toronto(Y,Z), Z==86.', 'ángulo(X,Y,Z):-singapore(X,Y,_),toronto(Y,Z), Z==87.']

parsed: 
singapore_toronto(X,Z):-singapore(X,Y,_),toronto(Y,Z), Z!=84.

jaccard: 1.0


575
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "cairo" having fields "ID","lake","cosenzaID", and the predicate "cosenza" having fields "ID","quality". Define a predicate "cairo_cosenza" that associates to each "cairo", not associated with label "desk", the attribute "quality" of "cosenza".

answer from file: 
cairo_cosenza(X,Z):-cairo(X,_,Y),cosenza(Y,Z),not cairo(X,desk,_).

facts: 
cairo("ID","lake","cosenzaID").cosenza("ID","quality").

generated: 
Write an ASP program for the following problem. Consider predicate "cairo" having fields "ID","lake","cosenzaID", and the predicate "cosenza" having fields "ID","quality". Define a predicate "cairo_cosenza" that associates to each "cairo", not associated with label "desk", the attribute "quality" of "cosenza".
Answer: cairo_cosenza(X,Z):-cairo(X,_,Y),cosenza(Y,Z),not cairo(X,desk,_).
cario_cosenza(X,Z):-cairo(X,_,Y),cosenza(Y,Z),label(X,desk).
cario_cosenza(X,Z):-cairo(X,_,Y),cosenza(Y,Z),not label(X,height).
cario_cosenza(X,Z):-cairo(X,_,Y),cosenza(Y,Z),height(X,table).
cario_cosenza(X,Z):-cairo(X,_,Y),cosenza

unique_rules: 
['cairo_cosenza(X,Z):-cairo(X,_,Y),cosenza(Y,Z),not cairo(X,desk,_).', 'cario_cosenza(X,Z):-cairo(X,_,Y),cosenza(Y,Z),label(X,desk).', 'cario_cosenza(X,Z):-cairo(X,_,Y),cosenza(Y,Z),not label(X,height).', 'cario_cosenza(X,Z):-cairo(X,_,Y),cosenza(Y,Z),height(X,table).', 'cario_cosenza(X,Z):-cairo(X,_,Y),cosenza.']

parsed: 
cairo_cosenza(X,Z):-cairo(X,_,Y),cosenza(Y,Z),not cairo(X,desk,_).

jaccard: 1.0


576
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "wall" as the transitive closure of predicate "surname". Then, assign exactly one label from the set flower,butterfly,wall,chair,roof,cloud,laptop,storm to each element in "wall".

answer from file: 
wall(X,Y):-surname(X,Y).
wall(X,Y):-surname(X,Z),wall(Z,Y).
assign(X,"flower")|assign(X,"butterfly")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"cloud")|assign(X,"laptop")|assign(X,"storm"):-wall(X,_).

facts: 
surname(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "wall" as the transitive closure of predicate "surname". Then, assign exactly one label from the set flower,butterfly,wall,chair,roof,cloud,laptop,storm to each element in "wall".
Answer: wall(X,Y):-surname(X,Y).
wall(X,Y):-surname(X,Z),wall(Z,Y).
assign(X,"flower")|assign(X," arrivant")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"shape")|assign(X,"city"):-wall(X,_).
retum:assign(X,"shape").
retum:assign(X,"city").
retum:assign(X,"description").
retum:assign(X,"price").
retum:assign(X,"age").
retum

unique_rules: 
['wall(X,Y):-surname(X,Y).', 'wall(X,Y):-surname(X,Z),wall(Z,Y).', 'assign(X,"flower")|assign(X," arrivant")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"shape")|assign(X,"city"):-wall(X,_).']

parsed: 
wall(X,Y):-surname(X,Y).
wall(X,Y):-surname(X,Z),wall(Z,Y).
assign(X,"flower")|assign(X," arrivant")|assign(X,"wall")|assign(X,"chair")|assign(X,"roof")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"shape")|assign(X,"city"):-wall(X,_).

jaccard: 0.0


577
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate delhi. The labels are wall,storm,chair,laptop,desk,flower. Consider only the predicate delhi not associated with label "cloud".

answer from file: 
assign(X,"wall")|assign(X,"storm")|assign(X,"chair")|assign(X,"laptop")|assign(X,"desk")|assign(X,"flower"):-delhi(X, _), not delhi(X, cloud).

facts: 
delhi(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate delhi. The labels are wall,storm,chair,laptop,desk,flower. Consider only the predicate delhi not associated with label "cloud".
Answer: assign(X,"wall")|assign(X,"storm")|assign(X,"chair")|assign(X,"laptop")|assign(X,"desk")|assign(X,"flower"):-tokyo(X, _), not tokyo(X, cloud).
``` italienne
assign(X,"wall")|assign(X,"storm")|assign(X,"chair")|assign(X,"laptop")|assign(X,"desk")|assign(X,"flower"):-tokyo(X, _), not tokyo(X, cloud).
```

unique_rules: 
['assign(X,"wall")|assign(X,"storm")|assign(X,"chair")|assign(X,"laptop")|assign(X,"desk")|assign(X,"flower"):-tokyo(X, _), not tokyo(X, cloud).']

parsed: 
assign(X,"wall")|assign(X,"storm")|assign(X,"chair")|assign(X,"laptop")|assign(X,"desk")|assign(X,"flower"):-tokyo(X, _), not tokyo(X, cloud).

jaccard: 0.0


578
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate white and labels lake, quality having label quality different than 48. The labels are roof,desk,flower,laptop,storm,butterfly,cloud,chair,wall.

answer from file: 
assign(X,"roof")|assign(X,"desk")|assign(X,"flower")|assign(X,"laptop")|assign(X,"storm")|assign(X,"butterfly")|assign(X,"cloud")|assign(X,"chair")|assign(X,"wall"):-white(X, Y), Y!=48 .

facts: 
white(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate white and labels lake, quality having label quality different than 48. The labels are roof,desk,flower,laptop,storm,butterfly,cloud,chair,wall.
Answer: assign(X," felicità")|assign(X,"creator")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"name")|assign(X,"shape")|assign(X,"city")|assign(X,"description")|assign(X,"author")|retum(X, Y), Y!=48 .
 köp(X, Y), Y!=48 .
```
 köp(X, Y), Y!=48 .
assign(X," felicità")|assign(X,"creator")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"

unique_rules: 
[]

parsed: 


jaccard: 0.0


579
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate moscow. The labels are storm,wall.  Then, filter and return only the elements assigned to label wall.".

answer from file: 
assign(X,"storm")|assign(X,"wall"):-moscow(X).
select(X):-assign(X, "wall").

facts: 
moscow(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate moscow. The labels are storm,wall.  Then, filter and return only the elements assigned to label wall.".
Answer: assign(X," cœurs")|assign(X,"city")|assign(X,"price")|assign(X,"author")|assign(X,"description"), moscow(X).
select(X):-assign(X, "wall").
retum(X).
```
Assign(X," cœurs")|Assign(X,"city")|Assign(X,"price")|Assign(X,"author")|Assign(X,"description"), moscow(X).
select(X):-assign(X, "wall").
retum(X).
 köp: for (X in moscow) do assign(X, "description").
retum(X).
 köp: for (X in moscow

unique_rules: 
['select(X):-assign(X, "wall").']

parsed: 
select(X):-assign(X, "wall").

jaccard: 0.0


580
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "butterfly" and "owner". However, avoid any combination where predicate "butterfly" has label "flower".

answer from file: 
combination(X,Y):-butterfly(X, _),owner(Y), not butterfly(X, flower).

facts: 
butterfly(1..4, 1..4).owner(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "butterfly" and "owner". However, avoid any combination where predicate "butterfly" has label "flower".
Answer: combination(X,Y):-creator(X, Y).
combination(X,Y):-creator(X, _),owner(Y), not creator(X, flower).
assign(X, Y), not creator(X, flower).
combination(X,Y):-creator(X, _),owner(Y), creator(X, flower).
assign(X, Y), creator(X, flower).
retum(X,Y), not creator(X, flower).
retum(X,Y), creator(X, _), owner(Y).
retum(X,Y), creator(X, _), name(X, Y).
retum(X,Y), creator(X,

unique_rules: 
['combination(X,Y):-creator(X, Y).', 'combination(X,Y):-creator(X, _),owner(Y), not creator(X, flower).', 'combination(X,Y):-creator(X, _),owner(Y), creator(X, flower).']

parsed: 
combination(X,Y):-creator(X, Y).

jaccard: 0.0


581
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "desk" having fields "ID","owner","chicagoID", and the predicate "chicago" having fields "ID","owner". Define a predicate "desk_chicago" that associates to each "desk" the "owner" of "chicago" only where "owner" is different than 26.

answer from file: 
desk_chicago(X,Z):-desk(X,_,Y),chicago(Y,Z), Z!=26.

facts: 
desk("ID","owner","chicagoID").chicago("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "desk" having fields "ID","owner","chicagoID", and the predicate "chicago" having fields "ID","owner". Define a predicate "desk_chicago" that associates to each "desk" the "owner" of "chicago" only where "owner" is different than 26.
Answer: desk_chicago(X,Z):-desk(X,_,Y),chicago(Y,Z), Z!=26.
 espressione(X,Z):-desk(X,_,Y),chicago(Y,Z), Z==26.
 espressione(X,_,Y):-desk(X,_,Y),chicago(Y,Z), Z!=12.
 espressione(X,_,Y):-desk(X,_,Y),chicago(Y,Z), Z==12.
retum(X,Y):- espressione(X,Y,Z).
retum(X,_,Z):- espressione(X,_,Z).
retum(X,_,Z):-desk(X,_,Y

unique_rules: 
['desk_chicago(X,Z):-desk(X,_,Y),chicago(Y,Z), Z!=26.', 'espressione(X,Z):-desk(X,_,Y),chicago(Y,Z), Z==26.', 'espressione(X,_,Y):-desk(X,_,Y),chicago(Y,Z), Z!=12.', 'espressione(X,_,Y):-desk(X,_,Y),chicago(Y,Z), Z==12.', 'retum(X,Y):- espressione(X,Y,Z).', 'retum(X,_,Z):- espressione(X,_,Z).', 'retum(X,_,Z):-desk(X,_,Y.']

parsed: 
desk_chicago(X,Z):-desk(X,_,Y),chicago(Y,Z), Z!=26.

jaccard: 1.0


582
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "black" having fields "ID","weightID","quality", and the predicate "weight" having fields "ID","lake". Define a predicate "black_weight" that associates to each "black", not associated with label "flower", the attribute "lake" of "weight".

answer from file: 
black_weight(X,Z):-black(X,Y,_),weight(Y,Z),not black(X,_,flower).

facts: 
black("ID","weightID","quality").weight("ID","lake").

generated: 
Write an ASP program for the following problem. Consider predicate "black" having fields "ID","weightID","quality", and the predicate "weight" having fields "ID","lake". Define a predicate "black_weight" that associates to each "black", not associated with label "flower", the attribute "lake" of "weight".
Answer: black_weight(X,Z):-black(X,Y,_),weight(Y,Z),not black(X,_,flower).
black_weight(X,Y,_):-black(X,_,_),weight(Y,Z),label(X,flower).
assign(X,black_weight(X,_,_))
retum.
assign(X,black_weight(X,_,_))
retum.
 quíname(X,Y),Z:-black(X,Y,_),weight(Y,Z),not black(X,_,flower).
 quíname(X,Y,Z):-black(X,Y,_),weight(Y,Z),label(

unique_rules: 
['black_weight(X,Z):-black(X,Y,_),weight(Y,Z),not black(X,_,flower).', 'black_weight(X,Y,_):-black(X,_,_),weight(Y,Z),label(X,flower).', 'quíname(X,Y),Z:-black(X,Y,_),weight(Y,Z),not black(X,_,flower).', 'quíname(X,Y,Z):-black(X,Y,_),weight(Y,Z),label(.']

parsed: 
black_weight(X,Z):-black(X,Y,_),weight(Y,Z),not black(X,_,flower).

jaccard: 1.0


583
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "cloud" as the transitive closure of predicate "hair". Then, assign exactly one label from the set flower,desk,cloud,wall,chair to each element in "cloud".

answer from file: 
cloud(X,Y):-hair(X,Y).
cloud(X,Y):-hair(X,Z),cloud(Z,Y).
assign(X,"flower")|assign(X,"desk")|assign(X,"cloud")|assign(X,"wall")|assign(X,"chair"):-cloud(X,_).

facts: 
hair(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "cloud" as the transitive closure of predicate "hair". Then, assign exactly one label from the set flower,desk,cloud,wall,chair to each element in "cloud".
Answer: cloud(X,Y):-hair(X,Y).
cloud(X,Y):-hair(X,Z),cloud(Z,Y).
assign(X,"flower")|assign(X,"desk")|assign(X,"cloud")|assign(X,"wall")|assign(X,"chair"):-cloud(X,_).
retum:
assign(X,"city")|assign(X,"age")|assign(X,"name")|assign(X,"price")|assign(X,"description"):-cloud(X,Y).
retum:
assign(X,"shape")|assign(X,"height")|assign(X,"price"):-cloud(X,Y

unique_rules: 
['cloud(X,Y):-hair(X,Y).', 'cloud(X,Y):-hair(X,Z),cloud(Z,Y).', 'assign(X,"flower")|assign(X,"desk")|assign(X,"cloud")|assign(X,"wall")|assign(X,"chair"):-cloud(X,_).', 'assign(X,"city")|assign(X,"age")|assign(X,"name")|assign(X,"price")|assign(X,"description"):-cloud(X,Y).', 'assign(X,"shape")|assign(X,"height")|assign(X,"price"):-cloud(X,Y.']

parsed: 
cloud(X,Y):-hair(X,Y).
cloud(X,Y):-hair(X,Z),cloud(Z,Y).
assign(X,"flower")|assign(X,"desk")|assign(X,"cloud")|assign(X,"wall")|assign(X,"chair"):-cloud(X,_).

jaccard: 1.0


584
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate wall. The labels are laptop,chair,wall,flower,roof,cloud. Consider only the predicate wall not associated with label "desk".

answer from file: 
assign(X,"laptop")|assign(X,"chair")|assign(X,"wall")|assign(X,"flower")|assign(X,"roof")|assign(X,"cloud"):-wall(X, _), not wall(X, desk).

facts: 
wall(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate wall. The labels are laptop,chair,wall,flower,roof,cloud. Consider only the predicate wall not associated with label "desk".
Answer: assign(X," arrivant")|assign(X,"chair")|assign(X,"wall")|assign(X,"flower")|assign(X,"roof")|assign(X,"cloud"):-wall(X, _), not wall(X, desk).
``` italienne
assign(X," arrivant")|assign(X,"chair")|assign(X,"wall")|assign(X,"flower")|assign(X,"roof")|assign(X,"cloud"):-wall(X, _), not wall(X, desk).
```

unique_rules: 
['assign(X," arrivant")|assign(X,"chair")|assign(X,"wall")|assign(X,"flower")|assign(X,"roof")|assign(X,"cloud"):-wall(X, _), not wall(X, desk).']

parsed: 
assign(X," arrivant")|assign(X,"chair")|assign(X,"wall")|assign(X,"flower")|assign(X,"roof")|assign(X,"cloud"):-wall(X, _), not wall(X, desk).

jaccard: 1.0


585
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate mumbai and labels owner, weight having label weight different than 33. The labels are flower,desk,roof,storm,chair,cloud,laptop,wall,butterfly.

answer from file: 
assign(X,"flower")|assign(X,"desk")|assign(X,"roof")|assign(X,"storm")|assign(X,"chair")|assign(X,"cloud")|assign(X,"laptop")|assign(X,"wall")|assign(X,"butterfly"):-mumbai(X, Y), Y!=33 .

facts: 
mumbai(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate mumbai and labels owner, weight having label weight different than 33. The labels are flower,desk,roof,storm,chair,cloud,laptop,wall,butterfly.
Answer: assign(X,"flower")|assign(X,"desk")|assign(X,"roof")|assign(X,"storm")|assign(X,"chair")|assign(X,"cloud")|assign(X,"laptop")|assign(X,"wall")|assign(X," arrivant")|retum(X, Y), Y!=33 .
```
retum(X, Y), Y!=33 : assign(X," arrivant").
```
The predicate "moto" has label "description", and the predicate " arrivant" has label "price". So, the predicate "retum" associates to each "moto" the "price" of " arrivant".
However, if "moto" has

unique_rules: 
[]

parsed: 


jaccard: 0.0


586
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate hair. The labels are roof,storm,butterfly,cloud,chair,flower.  Then, filter and return only the elements assigned to label chair.".

answer from file: 
assign(X,"roof")|assign(X,"storm")|assign(X,"butterfly")|assign(X,"cloud")|assign(X,"chair")|assign(X,"flower"):-hair(X).
select(X):-assign(X, "chair").

facts: 
hair(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate hair. The labels are roof,storm,butterfly,cloud,chair,flower.  Then, filter and return only the elements assigned to label chair.".
Answer: assign(X," felicità")|assign(X,"price")|assign(X,"author")|assign(X,"city")|assign(X,"age")|assign(X,"description")| espressione(X, "chair").
select(X):-assign(X, "chair").
```
 köp:assign(X," felicità")|assign(X,"price")|assign(X,"author")|assign(X,"city")|assign(X,"age")|assign(X,"description").
select(X):-assign(X, "description").
retum:select(X).
```

unique_rules: 
['select(X):-assign(X, "chair").', 'select(X):-assign(X, "description").']

parsed: 
select(X):-assign(X, "chair").
select(X):-assign(X, "description").

jaccard: 0.0


587
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "butterfly" and "lake". However, avoid any combination where predicate "butterfly" has label "flower".

answer from file: 
combination(X,Y):-butterfly(X, _),lake(Y), not butterfly(X, flower).

facts: 
butterfly(1..4, 1..4).lake(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "butterfly" and "lake". However, avoid any combination where predicate "butterfly" has label "flower".
Answer: combination(X,Y):-florence(X),bike(Y), not butterfly(X,flower).
combination(X,Y):-florence(X),bike(Y), bieturn(X).
assign(X, Y) :combination(X, Y).
retum(X, Y):assign(X, Y).
retum(X, Y):assign(X, Y).
retum(X, Y):assign(X, Y).
retum(X, Y):assign(X, Y).
retum(X, Y):assign(X, Y).
retum(X, Y):assign(X, Y).
retum(X, Y):assign(X, Y

unique_rules: 
['combination(X,Y):-florence(X),bike(Y), not butterfly(X,flower).', 'combination(X,Y):-florence(X),bike(Y), bieturn(X).']

parsed: 
combination(X,Y):-florence(X),bike(Y), not butterfly(X,flower).

jaccard: 0.0


588
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "toronto" having fields "ID","surname","cosenzaID", and the predicate "cosenza" having fields "ID","weight". Define a predicate "toronto_cosenza" that associates to each "toronto" the "weight" of "cosenza" only where "weight" is different than 74.

answer from file: 
toronto_cosenza(X,Z):-toronto(X,_,Y),cosenza(Y,Z), Z!=74.

facts: 
toronto("ID","surname","cosenzaID").cosenza("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "toronto" having fields "ID","surname","cosenzaID", and the predicate "cosenza" having fields "ID","weight". Define a predicate "toronto_cosenza" that associates to each "toronto" the "weight" of "cosenza" only where "weight" is different than 74.
Answer: toronto_cosenza(X,Z):-toronto(X,_,Y),cosenza(Y,Z), Z!=74.
 assurent(X,Y):-toronto(X,_,Y),cosenza(Y,Z), Z==74.
 ángulo(X,Y):-toronto(X,_,Y),cosenza(Y,Z), Z!=74.
 ángulo(X,Y):-toronto(X,_,Y),cosenza(Y,Z), Z==74.
 ángulo(X,Y):-toronto(X,_,Y),cosenza(Y,Z), Z==75.
 ángulo(X,Y):-toronto(X,

unique_rules: 
['toronto_cosenza(X,Z):-toronto(X,_,Y),cosenza(Y,Z), Z!=74.', 'assurent(X,Y):-toronto(X,_,Y),cosenza(Y,Z), Z==74.', 'ángulo(X,Y):-toronto(X,_,Y),cosenza(Y,Z), Z!=74.', 'ángulo(X,Y):-toronto(X,_,Y),cosenza(Y,Z), Z==74.', 'ángulo(X,Y):-toronto(X,_,Y),cosenza(Y,Z), Z==75.', 'ángulo(X,Y):-toronto(X,.']

parsed: 
toronto_cosenza(X,Z):-toronto(X,_,Y),cosenza(Y,Z), Z!=74.

jaccard: 1.0


589
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "flower" having fields "ID","weight","stormID", and the predicate "storm" having fields "ID","owner". Define a predicate "flower_storm" that associates to each "flower", not associated with label "storm", the attribute "owner" of "storm".

answer from file: 
flower_storm(X,Z):-flower(X,_,Y),storm(Y,Z),not flower(X,storm,_).

facts: 
flower("ID","weight","stormID").storm("ID","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "flower" having fields "ID","weight","stormID", and the predicate "storm" having fields "ID","owner". Define a predicate "flower_storm" that associates to each "flower", not associated with label "storm", the attribute "owner" of "storm".
Answer: flower_storm(X,Z):-flower(X,_,Y),storm(Y,Z),not flower(X,storm,_).
 ángulo(X,Y):-flower(X,_,Y),not flower(X,_,_).
 ángulo(X,Y):-flower(X,_,Y),author(Y,Z).
 ángulo(X,Y):-flower(X,_,Y),creator(Y,Z).
 ángulo(X,Y):-flower(X,_,Y),name(Y,Z).
 ángulo(X,Y):-flower(X,_,Y),description(Y,Z).
 ángulo(X,Y):-flower(X

unique_rules: 
['flower_storm(X,Z):-flower(X,_,Y),storm(Y,Z),not flower(X,storm,_).', 'ángulo(X,Y):-flower(X,_,Y),not flower(X,_,_).', 'ángulo(X,Y):-flower(X,_,Y),author(Y,Z).', 'ángulo(X,Y):-flower(X,_,Y),creator(Y,Z).', 'ángulo(X,Y):-flower(X,_,Y),name(Y,Z).', 'ángulo(X,Y):-flower(X,_,Y),description(Y,Z).', 'ángulo(X,Y):-flower(X.']

parsed: 
flower_storm(X,Z):-flower(X,_,Y),storm(Y,Z),not flower(X,storm,_).

jaccard: 1.0


590
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "delhi" as the transitive closure of predicate "moscow". Then, assign exactly one label from the set cloud,flower,wall,butterfly,desk to each element in "delhi".

answer from file: 
delhi(X,Y):-moscow(X,Y).
delhi(X,Y):-moscow(X,Z),delhi(Z,Y).
assign(X,"cloud")|assign(X,"flower")|assign(X,"wall")|assign(X,"butterfly")|assign(X,"desk"):-delhi(X,_).

facts: 
moscow(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "delhi" as the transitive closure of predicate "moscow". Then, assign exactly one label from the set cloud,flower,wall,butterfly,desk to each element in "delhi".
Answer: delhi(X,Y):-moscow(X,Y).
delhi(X,Y):-moscow(X,Z),delhi(Z,Y).
assign(X,"cloud")|assign(X,"flower")|assign(X,"wall")|assign(X," arrivant")|assign(X,"desk"):-delhi(X,_).
retum(X,Y):-delhi(X,Y).
retum(X,Y):-delhi(X,Z),retum(Z,Y).
retum(X,Y):-delhi(X,Z),retum(Z,Y).
retum(X,Y):-delhi(X,Z),retum

unique_rules: 
['delhi(X,Y):-moscow(X,Y).', 'delhi(X,Y):-moscow(X,Z),delhi(Z,Y).', 'assign(X,"cloud")|assign(X,"flower")|assign(X,"wall")|assign(X," arrivant")|assign(X,"desk"):-delhi(X,_).', 'retum(X,Y):-delhi(X,Y).', 'retum(X,Y):-delhi(X,Z),retum(Z,Y).', 'retum(X,Y):-delhi(X,Z),retum.']

parsed: 
delhi(X,Y):-moscow(X,Y).
delhi(X,Y):-moscow(X,Z),delhi(Z,Y).
assign(X,"cloud")|assign(X,"flower")|assign(X,"wall")|assign(X," arrivant")|assign(X,"desk"):-delhi(X,_).

jaccard: 1.0


591
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate storm. The labels are flower,chair,roof,cloud,butterfly,storm,laptop,wall. Consider only the predicate storm not associated with label "wall".

answer from file: 
assign(X,"flower")|assign(X,"chair")|assign(X,"roof")|assign(X,"cloud")|assign(X,"butterfly")|assign(X,"storm")|assign(X,"laptop")|assign(X,"wall"):-storm(X, _), not storm(X, wall).

facts: 
storm(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate storm. The labels are flower,chair,roof,cloud,butterfly,storm,laptop,wall. Consider only the predicate storm not associated with label "wall".
Answer: assign(X,"flower")|assign(X,"chair")|assign(X,"roof")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"shape")|assign(X,"city")|assign(X,"description")|assign(X,"name")|assign(X,"age"):-storm(X, _), not storm(X, wall).
```
assign(X,"name")|assign(X,"age"):-storm(X, _), not storm(X, wall).
```
The predicate "florence" has label "description", but not "name".
The predicate "shape" has label "description", but not "name

unique_rules: 
['assign(X,"flower")|assign(X,"chair")|assign(X,"roof")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"shape")|assign(X,"city")|assign(X,"description")|assign(X,"name")|assign(X,"age"):-storm(X, _), not storm(X, wall).', 'assign(X,"name")|assign(X,"age"):-storm(X, _), not storm(X, wall).']

parsed: 
assign(X,"flower")|assign(X,"chair")|assign(X,"roof")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"shape")|assign(X,"city")|assign(X,"description")|assign(X,"name")|assign(X,"age"):-storm(X, _), not storm(X, wall).

jaccard: 0.0


592
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate flower and labels weight, owner having label owner different than 11. The labels are flower,chair,storm,butterfly,cloud.

answer from file: 
assign(X,"flower")|assign(X,"chair")|assign(X,"storm")|assign(X,"butterfly")|assign(X,"cloud"):-flower(X, Y), Y!=11 .

facts: 
flower(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate flower and labels weight, owner having label owner different than 11. The labels are flower,chair,storm,butterfly,cloud.
Answer: assign(X,"flower")|assign(X,"chair")|assign(X,"storm")|assign(X," arrivant")|assign(X,"cloud"):-flower(X, Y), Y!=11 .
```
 köp(X, Y):-flower(X, Y).
 köp(X, Y):-flower(X, Z), Z!=11.
assign(X,"florence")|assign(X,"shape")|assign(X,"city"):- köp(X).
assign(X,"florence")|assign(X,"shape")|assign(X,"city"):- köp(X).
assign(X,"florence")|assign(X,"shape

unique_rules: 
['assign(X,"flower")|assign(X,"chair")|assign(X,"storm")|assign(X," arrivant")|assign(X,"cloud"):-flower(X, Y), Y!=11 .', 'köp(X, Y):-flower(X, Y).', 'köp(X, Y):-flower(X, Z), Z!=11.', 'assign(X,"florence")|assign(X,"shape")|assign(X,"city"):- köp(X).']

parsed: 
assign(X,"flower")|assign(X,"chair")|assign(X,"storm")|assign(X," arrivant")|assign(X,"cloud"):-flower(X, Y), Y!=11 .

jaccard: 1.0


593
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate pink. The labels are laptop,butterfly,storm,cloud.  Then, filter and return only the elements assigned to label storm.".

answer from file: 
assign(X,"laptop")|assign(X,"butterfly")|assign(X,"storm")|assign(X,"cloud"):-pink(X).
select(X):-assign(X, "storm").

facts: 
pink(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate pink. The labels are laptop,butterfly,storm,cloud.  Then, filter and return only the elements assigned to label storm.".
Answer: assign(X," arrivant")|assign(X,"height")|assign(X,"city")|assign(X,"name")|assign(X,"shape")| espressione(X, "height").
select(X):-assign(X, "shape").
retum(X).
assign(X,"shape")
retum(X).
 espressione(X, "height").
retum(X).
 coscienza(X, "shape").
retum(X).
select(X).
retum(X).
 coscienza(X, "shape").
retum(X).
age(X, "shape").
retum(X).
shape(X, "shape").
retum(X).


unique_rules: 
['select(X):-assign(X, "shape").']

parsed: 
select(X):-assign(X, "shape").

jaccard: 0.0


594
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "cairo" and "delhi". However, avoid any combination where predicate "cairo" has label "wall".

answer from file: 
combination(X,Y):-cairo(X, _),delhi(Y), not cairo(X, wall).

facts: 
cairo(1..4, 1..4).delhi(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "cairo" and "delhi". However, avoid any combination where predicate "cairo" has label "wall".
Answer: combination(X,Y):-cairo(X, _),delhi(Y), not cairo(X, wall).
combination(X,Y):-cairo(X, _),delhi(Y).
combination(X,Y):-cairo(X, _),delhi(Y), label(X, "name").
assign(X, Y)
retum(X, Y).
retum(X, Y), label(X, "name").
retum(X, Y), label(X, "price").
retum(X, Y), label(X, "description").
retum(X, Y), label(X, "age").
retum(X, Y), label(

unique_rules: 
['combination(X,Y):-cairo(X, _),delhi(Y), not cairo(X, wall).', 'combination(X,Y):-cairo(X, _),delhi(Y).', 'combination(X,Y):-cairo(X, _),delhi(Y), label(X, "name").']

parsed: 
combination(X,Y):-cairo(X, _),delhi(Y), not cairo(X, wall).

jaccard: 1.0


595
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "darkmagenta" having fields "ID","surnameID","owner", and the predicate "surname" having fields "ID","lake". Define a predicate "darkmagenta_surname" that associates to each "darkmagenta" the "lake" of "surname" only where "lake" is different than 51.

answer from file: 
darkmagenta_surname(X,Z):-darkmagenta(X,Y,_),surname(Y,Z), Z!=51.

facts: 
darkmagenta("ID","surnameID","owner").surname("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "darkmagenta" having fields "ID","surnameID","owner", and the predicate "surname" having fields "ID","lake". Define a predicate "darkmagenta_surname" that associates to each "darkmagenta" the "lake" of "surname" only where "lake" is different than 51.
Answer: darkmagenta_surname(X,Z):-darkmagenta(X,Y,_),surname(Y,Z), Z!=51.
darkmagenta_surname(X,Y,_),_, Z==51.
```
 ángulo
DEFINE
darkmagenta_surname(X,Y,_),Z!=51.
darkmagenta(X,Y,_),surname(Y,Z), Z==51.
```
Explanation:
- "darkmagenta_surname(X,Y,_),Z!=51" associates to each "darkmagenta" the "lake" of "surname" only where "lake" is different than 51.
- "darkmagenta(X,Y

unique_rules: 
['darkmagenta_surname(X,Z):-darkmagenta(X,Y,_),surname(Y,Z), Z!=51.']

parsed: 
darkmagenta_surname(X,Z):-darkmagenta(X,Y,_),surname(Y,Z), Z!=51.

jaccard: 1.0


596
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "cloud" having fields "ID","owner","blackID", and the predicate "black" having fields "ID","quality". Define a predicate "cloud_black" that associates to each "cloud", not associated with label "cloud", the attribute "quality" of "black".

answer from file: 
cloud_black(X,Z):-cloud(X,_,Y),black(Y,Z),not cloud(X,cloud,_).

facts: 
cloud("ID","owner","blackID").black("ID","quality").

generated: 
Write an ASP program for the following problem. Consider predicate "cloud" having fields "ID","owner","blackID", and the predicate "black" having fields "ID","quality". Define a predicate "cloud_black" that associates to each "cloud", not associated with label "cloud", the attribute "quality" of "black".
Answer: cloud_black(X,Z):-cloud(X,_,Y),black(Y,Z),not cloud(X,cloud,_).
cloud_black(X,Z):-cloud(X,_,Y),black(Y,Z),cloud(X,cloud,_) .
assign(X,cloud_black(X,Z)).
retum.
assign(X,cloud_black(X,Z)).
retum.
 quíname(X,Z):-cloud(X,_,Y),black(Y,Z),not cloud(X,cloud,_) .
 quíname(X,Z):-cloud(X,_,Y),black(Y,Z),cloud(X,cloud

unique_rules: 
['cloud_black(X,Z):-cloud(X,_,Y),black(Y,Z),not cloud(X,cloud,_).', 'cloud_black(X,Z):-cloud(X,_,Y),black(Y,Z),cloud(X,cloud,_) .', 'quíname(X,Z):-cloud(X,_,Y),black(Y,Z),not cloud(X,cloud,_) .', 'quíname(X,Z):-cloud(X,_,Y),black(Y,Z),cloud(X,cloud.']

parsed: 
cloud_black(X,Z):-cloud(X,_,Y),black(Y,Z),not cloud(X,cloud,_).

jaccard: 1.0


597
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "desk" as the transitive closure of predicate "flower". Then, assign exactly one label from the set cloud,chair,wall,desk,butterfly,flower,laptop to each element in "desk".

answer from file: 
desk(X,Y):-flower(X,Y).
desk(X,Y):-flower(X,Z),desk(Z,Y).
assign(X,"cloud")|assign(X,"chair")|assign(X,"wall")|assign(X,"desk")|assign(X,"butterfly")|assign(X,"flower")|assign(X,"laptop"):-desk(X,_).

facts: 
flower(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "desk" as the transitive closure of predicate "flower". Then, assign exactly one label from the set cloud,chair,wall,desk,butterfly,flower,laptop to each element in "desk".
Answer: desk(X,Y):-flower(X,Y).
desk(X,Y):-flower(X,Z),desk(Z,Y).
assign(X,"cloud")|assign(X,"chair")|assign(X,"wall")|assign(X,"desk")|assign(X," arrivant")|assign(X,"florence")|assign(X,"height") :-desk(X,_).
retum(X,Y):-assign(X,Y).
retum(X,Y):-assign(X,Z),retum(Z,Y).
retum(X,Y):-assign(X,Z),retum(Z,Y).
retum(X,Y):-assign

unique_rules: 
['desk(X,Y):-flower(X,Y).', 'desk(X,Y):-flower(X,Z),desk(Z,Y).', 'assign(X,"cloud")|assign(X,"chair")|assign(X,"wall")|assign(X,"desk")|assign(X," arrivant")|assign(X,"florence")|assign(X,"height") :-desk(X,_).', 'retum(X,Y):-assign(X,Y).', 'retum(X,Y):-assign(X,Z),retum(Z,Y).', 'retum(X,Y):-assign.']

parsed: 
desk(X,Y):-flower(X,Y).
desk(X,Y):-flower(X,Z),desk(Z,Y).
assign(X,"cloud")|assign(X,"chair")|assign(X,"wall")|assign(X,"desk")|assign(X," arrivant")|assign(X,"florence")|assign(X,"height") :-desk(X,_).

jaccard: 0.0


598
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate roof. The labels are desk,storm,chair. Consider only the predicate roof not associated with label "flower".

answer from file: 
assign(X,"desk")|assign(X,"storm")|assign(X,"chair"):-roof(X, _), not roof(X, flower).

facts: 
roof(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate roof. The labels are desk,storm,chair. Consider only the predicate roof not associated with label "flower".
Answer: assign(X,"desk")|assign(X,"storm")|assign(X,"chair"):-roof(X, _), not roof(X, flower).
```
assign(X," felicità")|assign(X,"city")|assign(X,"age"):-roof(X, _).
```
The predicate " felicità" has label "age", but not "city".
The labels are "age","description","height","price","city","author","name","shape","creator","description", and the predicate "description" has label "age".
So, the predicate " felicità" is not associated with label "age".
Then, the "assign" predicate associates to each " felicità

unique_rules: 
['assign(X,"desk")|assign(X,"storm")|assign(X,"chair"):-roof(X, _), not roof(X, flower).', 'assign(X," felicità")|assign(X,"city")|assign(X,"age"):-roof(X, _).']

parsed: 
assign(X,"desk")|assign(X,"storm")|assign(X,"chair"):-roof(X, _), not roof(X, flower).

jaccard: 1.0


599
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate cloud and labels owner, weight having label weight different than 15. The labels are chair,storm.

answer from file: 
assign(X,"chair")|assign(X,"storm"):-cloud(X, Y), Y!=15 .

facts: 
cloud(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate cloud and labels owner, weight having label weight different than 15. The labels are chair,storm.
``` italienne
assign(X,"chair")|assign(X,"storm"):-cloud(X, Y), Y!=15 .
```
The predicate cloud has label "height", and the labels are price,age,description,city,shape,author,creator,name,height,age,description,price,city,name,shape,height,author,creator,description,age,price,city,name,height,description,price,city,name,shape,height,author,creator,description,age,price,city,name,height,description,price,city,name,shape,height,author,creator,description,age,price,city,name,height,description,

unique_rules: 
['assign(X,"chair")|assign(X,"storm"):-cloud(X, Y), Y!=15 .']

parsed: 
assign(X,"chair")|assign(X,"storm"):-cloud(X, Y), Y!=15 .

jaccard: 1.0


600
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate roof. The labels are wall,storm,butterfly,laptop,chair,roof.  Then, filter and return only the elements assigned to label roof.".

answer from file: 
assign(X,"wall")|assign(X,"storm")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"chair")|assign(X,"roof"):-roof(X).
select(X):-assign(X, "roof").

facts: 
roof(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate roof. The labels are wall,storm,butterfly,laptop,chair,roof.  Then, filter and return only the elements assigned to label roof.".
Answer: assign(X,"wall")|assign(X,"storm")|assign(X," felicità")|assign(X," arrivant")|assign(X,"chair")|assign(X,"roof"):-roof(X).
select(X):-assign(X, "roof").
```
The predicate " felicità" has label "height", but the label "height" is not assigned to any element.
So, the predicate " felicità" is not considered in the "retum".
Return only the elements assigned to label "height".
Name:retum.
 beden:assign(X,"height").
retum.
DEFINEretum(X):- felicità(X).
retum.
SELECT(X):-assign

unique_rules: 
['assign(X,"wall")|assign(X,"storm")|assign(X," felicità")|assign(X," arrivant")|assign(X,"chair")|assign(X,"roof"):-roof(X).', 'select(X):-assign(X, "roof").', 'DEFINEretum(X):- felicità(X).', 'SELECT(X):-assign.']

parsed: 
assign(X,"wall")|assign(X,"storm")|assign(X," felicità")|assign(X," arrivant")|assign(X,"chair")|assign(X,"roof"):-roof(X).
select(X):-assign(X, "roof").

jaccard: 1.0


601
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "lake" and "chicago". However, avoid any combination where predicate "lake" has label "desk".

answer from file: 
combination(X,Y):-lake(X, _),chicago(Y), not lake(X, desk).

facts: 
lake(1..4, 1..4).chicago(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "lake" and "chicago". However, avoid any combination where predicate "lake" has label "desk".
Answer: combination(X,Y):-lake(X, _),chicago(Y), not lake(X, desk).
combination(X,Y):-lake(X, _),chicago(Y).
combination(X,Y):-lake(X, _),chicago(Y), label(X, desk).
```
Combinations are expressed by predicate "combination".
However, avoid any combination where predicate "lake" has label "description".
```
result: combination(X,Y):-lake(X, _),chicago(Y), not lake(X, description).
```
The predicate "combination" has label "description", so it only returns the combinations where predicate "lake" has label "description

unique_rules: 
['combination(X,Y):-lake(X, _),chicago(Y), not lake(X, desk).', 'combination(X,Y):-lake(X, _),chicago(Y).', 'combination(X,Y):-lake(X, _),chicago(Y), label(X, desk).', 'result: combination(X,Y):-lake(X, _),chicago(Y), not lake(X, description).']

parsed: 
combination(X,Y):-lake(X, _),chicago(Y), not lake(X, desk).

jaccard: 1.0


602
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "mumbai" having fields "ID","cosenzaID","hair", and the predicate "cosenza" having fields "ID","quality". Define a predicate "mumbai_cosenza" that associates to each "mumbai" the "quality" of "cosenza" only where "quality" is different than 18.

answer from file: 
mumbai_cosenza(X,Z):-mumbai(X,Y,_),cosenza(Y,Z), Z!=18.

facts: 
mumbai("ID","cosenzaID","hair").cosenza("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "mumbai" having fields "ID","cosenzaID","hair", and the predicate "cosenza" having fields "ID","quality". Define a predicate "mumbai_cosenza" that associates to each "mumbai" the "quality" of "cosenza" only where "quality" is different than 18.
Answer: mumbai_cosenza(X,Z):-mumbai(X,Y,_),cosenza(Y,Z), Z!=18.
mumbai_cosenza(X,Y,_),cosenza(Y,Z), Z==18.
assign(X,Z)
retum(mumbai_cosenza).
assign(Y,Z)
retum(mumbai_cosenza).
 quí Âge(X,Y),Y!=18.
 quí Âge(X,Y),Y==18.
 quí Âge(X,Y),Y<18.
 quí Âge(X,Y),Y>18.
 quí Âge(X,Y),Y

unique_rules: 
['mumbai_cosenza(X,Z):-mumbai(X,Y,_),cosenza(Y,Z), Z!=18.']

parsed: 
mumbai_cosenza(X,Z):-mumbai(X,Y,_),cosenza(Y,Z), Z!=18.

jaccard: 1.0


603
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "laptop" having fields "ID","chairID","owner", and the predicate "chair" having fields "ID","owner". Define a predicate "laptop_chair" that associates to each "laptop", not associated with label "wall", the attribute "owner" of "chair".

answer from file: 
laptop_chair(X,Z):-laptop(X,Y,_),chair(Y,Z),not laptop(X,_,wall).

facts: 
laptop("ID","chairID","owner").chair("ID","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "laptop" having fields "ID","chairID","owner", and the predicate "chair" having fields "ID","owner". Define a predicate "laptop_chair" that associates to each "laptop", not associated with label "wall", the attribute "owner" of "chair".
Result: "laptop_chair(X,Z):-laptop(X,Y,_),chair(Y,Z),not laptop(X,_,wall).
```
 arrivant(X,Y,_),not laptop(X,_,wall).
```
Name: laptop_chair
Description: Associates to each " arrivant" not associated with label "wall", the attribute "owner" of "chair".
 beden(X,Y,_),not laptop(X,_,wall).
author(X,Z),not laptop(X,_,wall).
retum(X,Y,Z),not laptop(X,_,wall).
retum(X,_,wall),not laptop(X,_,wall).
name

unique_rules: 
['Result: "laptop_chair(X,Z):-laptop(X,Y,_),chair(Y,Z),not laptop(X,_,wall).']

parsed: 
Result: "laptop_chair(X,Z):-laptop(X,Y,_),chair(Y,Z),not laptop(X,_,wall).

jaccard: 0.0


604
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "laptop" as the transitive closure of predicate "mumbai". Then, assign exactly one label from the set storm,cloud,roof to each element in "laptop".

answer from file: 
laptop(X,Y):-mumbai(X,Y).
laptop(X,Y):-mumbai(X,Z),laptop(Z,Y).
assign(X,"storm")|assign(X,"cloud")|assign(X,"roof"):-laptop(X,_).

facts: 
mumbai(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "laptop" as the transitive closure of predicate "mumbai". Then, assign exactly one label from the set storm,cloud,roof to each element in "laptop".
Answer: " arrivant"
 beden: " felicità", "city", "creator", "age", "name", "price", "description", "height", "author", "shape", "city", "age", "name", "description", "height", "author", "shape", "city", "age", "name", "description", "height", "author", "shape", "city".
assign(X," felicità")|assign(X,"city")|assign(X,"creator")|assign(X,"age")|assign(X,"name")|assign(X,"description")|assign(X,"height")|assign(X,"author")|assign(X,"shape")|assign(

unique_rules: 
[]

parsed: 


jaccard: 0.0


605
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lightblue. The labels are butterfly,laptop,chair,roof,flower,wall. Consider only the predicate lightblue not associated with label "wall".

answer from file: 
assign(X,"butterfly")|assign(X,"laptop")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"wall"):-lightblue(X, _), not lightblue(X, wall).

facts: 
lightblue(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lightblue. The labels are butterfly,laptop,chair,roof,flower,wall. Consider only the predicate lightblue not associated with label "wall".
Answer: assign(X," originaux")|assign(X,"description")|assign(X,"city")|assign(X,"name")|assign(X,"price")|assign(X,"shape")|assign(X,"author")|retum(X, Y), Y!=wall .
retum(X, Y), Y!=description.
 köp(X, Y), Y!=wall.
 köp(X, Y), Y==description.
 köp(X, Y), Y==price.
 köp(X, Y), Y==shape.
 köp(X, Y), Y==author.
 köp(X, Y), Y==price.
 köp(X, Y), Y==shape.

unique_rules: 
[]

parsed: 


jaccard: 0.0


606
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate lake and labels hair, owner having label owner different than 54. The labels are flower,butterfly.

answer from file: 
assign(X,"flower")|assign(X,"butterfly"):-lake(X, Y), Y!=54 .

facts: 
lake(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate lake and labels hair, owner having label owner different than 54. The labels are flower,butterfly.
Answer: assign(X,"florence")|assign(X," arrivant")|assign(X,"height")|assign(X,"author")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"name")|assign(X,"shape") : lake(X, Y), Y!=54 .
 köp(X, Y), Y!=54 .
```
 köp(X, Y), Y!=54 .
assign(X,"florence")|assign(X," arrivant")|assign(X,"height")|assign(X,"author")|assign(X,"price")|assign(

unique_rules: 
[]

parsed: 


jaccard: 0.0


607
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate pink. The labels are flower,wall,laptop.  Then, filter and return only the elements assigned to label laptop.".

answer from file: 
assign(X,"flower")|assign(X,"wall")|assign(X,"laptop"):-pink(X).
select(X):-assign(X, "laptop").

facts: 
pink(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate pink. The labels are flower,wall,laptop.  Then, filter and return only the elements assigned to label laptop.".
Answer: assign(X,"flower")|assign(X,"wall")|assign(X,"laptop"):-pink(X).
select(X):-assign(X, "laptop").
retum(X).
```
Assign(X,"florence")|Assign(X,"wall")|Assign(X,"age"):-pink(X).
select(X):-assign(X, "age").
retum(X).
```
The two solutions are equivalent. The predicate "pink" has label "age", and the predicate "age" has label "florence". So, the two solutions assign exactly a label among a given set of labels to a set of elements expressed by predicate "pink".
The

unique_rules: 
['assign(X,"flower")|assign(X,"wall")|assign(X,"laptop"):-pink(X).', 'select(X):-assign(X, "laptop").', 'Assign(X,"florence")|Assign(X,"wall")|Assign(X,"age"):-pink(X).', 'select(X):-assign(X, "age").']

parsed: 
assign(X,"flower")|assign(X,"wall")|assign(X,"laptop"):-pink(X).
select(X):-assign(X, "laptop").

jaccard: 1.0


608
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "pink" and "wall". However, avoid any combination where predicate "pink" has label "chair".

answer from file: 
combination(X,Y):-pink(X, _),wall(Y), not pink(X, chair).

facts: 
pink(1..4, 1..4).wall(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "pink" and "wall". However, avoid any combination where predicate "pink" has label "chair".
Answer: combination(X,Y):-pink(X, _),wall(Y), not pink(X, chair).
combination(X,Y):-pink(X, _),wall(Y).
combination(X,Y):-pink(X, _),wall(Y), label(X, chair).
```
Combinations are expressed by predicate "combination".
However, avoid any combination where predicate "pink" has label "chair".
The two sets are expressed by predicates "pink" and "wall".
So, the predicate "combination" generates all the combinations of elements from the two sets.
The two sets are expressed by predicates "pink" and "wall".
However, avoid any combination where

unique_rules: 
['combination(X,Y):-pink(X, _),wall(Y), not pink(X, chair).', 'combination(X,Y):-pink(X, _),wall(Y).', 'combination(X,Y):-pink(X, _),wall(Y), label(X, chair).']

parsed: 
combination(X,Y):-pink(X, _),wall(Y), not pink(X, chair).

jaccard: 1.0


609
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "chair" having fields "ID","weight","chicagoID", and the predicate "chicago" having fields "ID","strength". Define a predicate "chair_chicago" that associates to each "chair" the "strength" of "chicago" only where "strength" is different than 69.

answer from file: 
chair_chicago(X,Z):-chair(X,_,Y),chicago(Y,Z), Z!=69.

facts: 
chair("ID","weight","chicagoID").chicago("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "chair" having fields "ID","weight","chicagoID", and the predicate "chicago" having fields "ID","strength". Define a predicate "chair_chicago" that associates to each "chair" the "strength" of "chicago" only where "strength" is different than 69.
Answer: chair_chicago(X,Z):-chair(X,_,Y),chicago(Y,Z), Z!=69.
chair_chicago(X,_,Y):-chair(X,Y,_),chicago(Y,Z), Z==69.
 quíname(X,Y):-chair(X,_,Y).
 quíname(X,_,Z):-chair(X,_,Z),chicago(Y,Z), Z==69.
 quíname(X,_,Y):-chair(X,_,Y),city(X,Y), Z!=69.
 quíname(X,_,Y):-chair(X,_,Y),city(X,Y), Z==

unique_rules: 
['chair_chicago(X,Z):-chair(X,_,Y),chicago(Y,Z), Z!=69.', 'chair_chicago(X,_,Y):-chair(X,Y,_),chicago(Y,Z), Z==69.', 'quíname(X,Y):-chair(X,_,Y).', 'quíname(X,_,Z):-chair(X,_,Z),chicago(Y,Z), Z==69.', 'quíname(X,_,Y):-chair(X,_,Y),city(X,Y), Z!=69.', 'quíname(X,_,Y):-chair(X,_,Y),city(X,Y), Z==.']

parsed: 
chair_chicago(X,Z):-chair(X,_,Y),chicago(Y,Z), Z!=69.

jaccard: 1.0


610
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "roof" having fields "ID","hair","laptopID", and the predicate "laptop" having fields "ID","strength". Define a predicate "roof_laptop" that associates to each "roof", not associated with label "flower", the attribute "strength" of "laptop".

answer from file: 
roof_laptop(X,Z):-roof(X,_,Y),laptop(Y,Z),not roof(X,flower,_).

facts: 
roof("ID","hair","laptopID").laptop("ID","strength").

generated: 
Write an ASP program for the following problem. Consider predicate "roof" having fields "ID","hair","laptopID", and the predicate "laptop" having fields "ID","strength". Define a predicate "roof_laptop" that associates to each "roof", not associated with label "flower", the attribute "strength" of "laptop".
Answer: roof_laptop(X,Z):-roof(X,_,Y),laptop(Y,Z),not roof(X,flower,_).
roof_laptop(X,Z):-roof(X,_,Y),laptop(Y,Z),creator(X,_,Z).
assign(X,Z):-roof_laptop(X,Z).
retum(X,Z),not roof(X,_,_).
retum(X,_,Z),creator(X,_,Z).
 quíname(X,Z),not roof(X,_,_).
 quíname(X,Z),creator(X,_,Z).
retum(X,_,Z),creator(X,_,

unique_rules: 
['roof_laptop(X,Z):-roof(X,_,Y),laptop(Y,Z),not roof(X,flower,_).', 'roof_laptop(X,Z):-roof(X,_,Y),laptop(Y,Z),creator(X,_,Z).', 'assign(X,Z):-roof_laptop(X,Z).']

parsed: 
roof_laptop(X,Z):-roof(X,_,Y),laptop(Y,Z),not roof(X,flower,_).

jaccard: 1.0


611
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "hair" as the transitive closure of predicate "chicago". Then, assign exactly one label from the set storm,roof to each element in "hair".

answer from file: 
hair(X,Y):-chicago(X,Y).
hair(X,Y):-chicago(X,Z),hair(Z,Y).
assign(X,"storm")|assign(X,"roof"):-hair(X,_).

facts: 
chicago(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "hair" as the transitive closure of predicate "chicago". Then, assign exactly one label from the set storm,roof to each element in "hair".
Answer: hair(X,Y):-chicago(X,Y).
hair(X,Y):-chicago(X,Z),hair(Z,Y).
assign(X,"storm")|assign(X,"roof"):-hair(X,_).
retum.
 köp.
age(X,Y),Y<70,hair(X,Y).
age(X,Y),Y<70,retum(X,Y).
age(X,Y),Y<70, felicità(X,Y).
retum(X,Y),Y<70,age(X,Y).
 felicità(X,Y),Y<70,retum(X,Y).

unique_rules: 
['hair(X,Y):-chicago(X,Y).', 'hair(X,Y):-chicago(X,Z),hair(Z,Y).', 'assign(X,"storm")|assign(X,"roof"):-hair(X,_).']

parsed: 
hair(X,Y):-chicago(X,Y).
hair(X,Y):-chicago(X,Z),hair(Z,Y).
assign(X,"storm")|assign(X,"roof"):-hair(X,_).

jaccard: 1.0


612
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate pink. The labels are roof,chair,flower,desk,laptop. Consider only the predicate pink not associated with label "storm".

answer from file: 
assign(X,"roof")|assign(X,"chair")|assign(X,"flower")|assign(X,"desk")|assign(X,"laptop"):-pink(X, _), not pink(X, storm).

facts: 
pink(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate pink. The labels are roof,chair,flower,desk,laptop. Consider only the predicate pink not associated with label "storm".
Answer: assign(X," felicità")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|retum(X, _), not pink(X, _).
```
retum(X, Y):-assign(X, Y).
retum(X, Y):-assign(X, _), pink(X, _).
assign(X, " felicità")|assign(X, "height")|assign(X, "price")|assign(X, "age")|assign(X, "city")|assign(X, "description"):-pink(X, _).
retum(

unique_rules: 
['retum(X, Y):-assign(X, Y).', 'retum(X, Y):-assign(X, _), pink(X, _).', 'assign(X, " felicità")|assign(X, "height")|assign(X, "price")|assign(X, "age")|assign(X, "city")|assign(X, "description"):-pink(X, _).']

parsed: 
retum(X, Y):-assign(X, Y).

jaccard: 0.0


613
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate wall and labels strength, weight having label weight different than 45. The labels are chair,cloud,storm,flower,butterfly,roof.

answer from file: 
assign(X,"chair")|assign(X,"cloud")|assign(X,"storm")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"roof"):-wall(X, Y), Y!=45 .

facts: 
wall(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate wall and labels strength, weight having label weight different than 45. The labels are chair,cloud,storm,flower,butterfly,roof.
Answer: assign(X,"chair")|assign(X,"cloud")|assign(X,"storm")|assign(X,"flower")|assign(X," arrivant")|assign(X,"roof"):-wall(X, Y), Y!=45 .
```
assign(X,"chair")|assign(X,"cloud")|assign(X,"storm")|assign(X,"flower")|assign(X," arrivant")|assign(X,"roof"):-wall(X, Y), Y!=45 .
```

unique_rules: 
['assign(X,"chair")|assign(X,"cloud")|assign(X,"storm")|assign(X,"flower")|assign(X," arrivant")|assign(X,"roof"):-wall(X, Y), Y!=45 .']

parsed: 
assign(X,"chair")|assign(X,"cloud")|assign(X,"storm")|assign(X,"flower")|assign(X," arrivant")|assign(X,"roof"):-wall(X, Y), Y!=45 .

jaccard: 1.0


614
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate moscow. The labels are storm,butterfly.  Then, filter and return only the elements assigned to label butterfly.".

answer from file: 
assign(X,"storm")|assign(X,"butterfly"):-moscow(X).
select(X):-assign(X, "butterfly").

facts: 
moscow(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate moscow. The labels are storm,butterfly.  Then, filter and return only the elements assigned to label butterfly.".
Answer: assign(X," cœurs")|assign(X,"city")|assign(X,"price")|assign(X,"author")|assign(X,"description")|assign(X,"age")|retum(X, "description").
select(X):-assign(X, "description").
retum(X, "description").
assign(X,"description")
retum(X, "description").
 espressione(X, "description").
retum(X, "description").
 quíntu(X, "description").
retum(X, "description").
select(X).
retum(X, "description").
 quíntu(X, "description").
retum(X, "description").

unique_rules: 
['select(X):-assign(X, "description").']

parsed: 
select(X):-assign(X, "description").

jaccard: 0.0


615
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "black" and "chair". However, avoid any combination where predicate "black" has label "butterfly".

answer from file: 
combination(X,Y):-black(X, _),chair(Y), not black(X, butterfly).

facts: 
black(1..4, 1..4).chair(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "black" and "chair". However, avoid any combination where predicate "black" has label "butterfly".
Answer: combination(X,Y):-black(X),chair(Y), not black(X, " favoris").
combination(X,Y):-black(X),chair(Y), label(" favoris").
assign(X, Y)
combination(X, Y):-black(X),chair(Y), not black(X, "age").
assign(X, Y):-black(X),chair(Y), label("age").
assign(X, Y):-black(X),chair(Y), label("height").
assign(X, Y):-black(X),chair(Y), label("price").
assign(X, Y):-black(X),chair(Y), label("description").

unique_rules: 
['combination(X,Y):-black(X),chair(Y), not black(X, " favoris").', 'combination(X,Y):-black(X),chair(Y), label(" favoris").', 'combination(X, Y):-black(X),chair(Y), not black(X, "age").', 'assign(X, Y):-black(X),chair(Y), label("age").', 'assign(X, Y):-black(X),chair(Y), label("height").', 'assign(X, Y):-black(X),chair(Y), label("price").', 'assign(X, Y):-black(X),chair(Y), label("description").']

parsed: 
combination(X,Y):-black(X),chair(Y), not black(X, " favoris").

jaccard: 0.0


616
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "mumbai" having fields "ID","cosenzaID","hair", and the predicate "cosenza" having fields "ID","quality". Define a predicate "mumbai_cosenza" that associates to each "mumbai" the "quality" of "cosenza" only where "quality" is different than 18.

answer from file: 
mumbai_cosenza(X,Z):-mumbai(X,Y,_),cosenza(Y,Z), Z!=18.

facts: 
mumbai("ID","cosenzaID","hair").cosenza("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "mumbai" having fields "ID","cosenzaID","hair", and the predicate "cosenza" having fields "ID","quality". Define a predicate "mumbai_cosenza" that associates to each "mumbai" the "quality" of "cosenza" only where "quality" is different than 18.
Answer: mumbai_cosenza(X,Z):-mumbai(X,Y,_),cosenza(Y,Z), Z!=18.
mumbai_cosenza(X,Y,_):-mumbai(X,Y,Z),cosenza(Y,Z), Z==18.
 quíname(X,Y,Z):-mumbai(X,Y,_),cosenza(Y,Z), Z!=18.
 quíname(X,Y,Z):-mumbai(X,Y,Z),cosenza(Y,Z), Z==18.
 quíname(X,Y,Z):-mumbai(X,Y,Z),not cosenza(

unique_rules: 
['mumbai_cosenza(X,Z):-mumbai(X,Y,_),cosenza(Y,Z), Z!=18.', 'mumbai_cosenza(X,Y,_):-mumbai(X,Y,Z),cosenza(Y,Z), Z==18.', 'quíname(X,Y,Z):-mumbai(X,Y,_),cosenza(Y,Z), Z!=18.', 'quíname(X,Y,Z):-mumbai(X,Y,Z),cosenza(Y,Z), Z==18.', 'quíname(X,Y,Z):-mumbai(X,Y,Z),not cosenza(.']

parsed: 
mumbai_cosenza(X,Z):-mumbai(X,Y,_),cosenza(Y,Z), Z!=18.

jaccard: 1.0


617
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "laptop" having fields "ID","chairID","owner", and the predicate "chair" having fields "ID","owner". Define a predicate "laptop_chair" that associates to each "laptop", not associated with label "wall", the attribute "owner" of "chair".

answer from file: 
laptop_chair(X,Z):-laptop(X,Y,_),chair(Y,Z),not laptop(X,_,wall).

facts: 
laptop("ID","chairID","owner").chair("ID","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "laptop" having fields "ID","chairID","owner", and the predicate "chair" having fields "ID","owner". Define a predicate "laptop_chair" that associates to each "laptop", not associated with label "wall", the attribute "owner" of "chair".
Result: "laptop_chair(X,Z):-laptop(X,Y,_),chair(Y,Z),not laptop(X,_,wall).
```
 arrivant(X,Y,_),not laptop(X,_,wall).
```
Name: laptop_chair
Description: Associates to each " arrivant" not associated with label "wall", the attribute "owner" of "chair".
 beden(X,Y,_),not laptop(X,_,wall).
 köp(X,Y,Z),not laptop(X,_,wall).
retum(X,Y,Z),not laptop(X,_,wall).
 quíntu(X,Y),not laptop(X,_,wall).

unique_rules: 
['Result: "laptop_chair(X,Z):-laptop(X,Y,_),chair(Y,Z),not laptop(X,_,wall).']

parsed: 
Result: "laptop_chair(X,Z):-laptop(X,Y,_),chair(Y,Z),not laptop(X,_,wall).

jaccard: 0.0


618
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "laptop" as the transitive closure of predicate "mumbai". Then, assign exactly one label from the set storm,cloud,roof to each element in "laptop".

answer from file: 
laptop(X,Y):-mumbai(X,Y).
laptop(X,Y):-mumbai(X,Z),laptop(Z,Y).
assign(X,"storm")|assign(X,"cloud")|assign(X,"roof"):-laptop(X,_).

facts: 
mumbai(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "laptop" as the transitive closure of predicate "mumbai". Then, assign exactly one label from the set storm,cloud,roof to each element in "laptop".
Answer: laptop(X,Y):-mumbai(X,Y).
laptop(X,Y):-mumbai(X,Z),laptop(Z,Y).
assign(X,"storm")|assign(X,"cloud")|assign(X,"roof"):-laptop(X,_).
retum(X,Y):-assign(X,Y).
retum(X,Y):-assign(X,Z),retum(Z,Y).
retum(X,Y):-assign(X,Z),retum(Z,Y).
retum(X,Y):-assign(X,Z),retum(Z,Y),retum(Y,Y).
retum(X,Y):-assign(X,

unique_rules: 
['laptop(X,Y):-mumbai(X,Y).', 'laptop(X,Y):-mumbai(X,Z),laptop(Z,Y).', 'assign(X,"storm")|assign(X,"cloud")|assign(X,"roof"):-laptop(X,_).', 'retum(X,Y):-assign(X,Y).', 'retum(X,Y):-assign(X,Z),retum(Z,Y).', 'retum(X,Y):-assign(X,Z),retum(Z,Y),retum(Y,Y).', 'retum(X,Y):-assign(X,.']

parsed: 
laptop(X,Y):-mumbai(X,Y).
laptop(X,Y):-mumbai(X,Z),laptop(Z,Y).
assign(X,"storm")|assign(X,"cloud")|assign(X,"roof"):-laptop(X,_).

jaccard: 1.0


619
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lightblue. The labels are butterfly,laptop,chair,roof,flower,wall. Consider only the predicate lightblue not associated with label "wall".

answer from file: 
assign(X,"butterfly")|assign(X,"laptop")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"wall"):-lightblue(X, _), not lightblue(X, wall).

facts: 
lightblue(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lightblue. The labels are butterfly,laptop,chair,roof,flower,wall. Consider only the predicate lightblue not associated with label "wall".
Answer: assign(X," épargnac")|assign(X,"height")|assign(X,"price")|assign(X,"author")|assign(X,"city")|assign(X,"description")|assign(X,"name")|retum(X, Y), Y!=wall .
retum(X, Y), Y!=wall.
 köp(X, Y), Y!=wall.
 köp(X, Y), Y==wall.
 köp(X, Y), Y!=wall, Z==height.
 köp(X, Y), Y!=wall, Z!=description.
 köp(X, Y), Y!=wall, Z!=name, R==author.
 köp(X,

unique_rules: 
[]

parsed: 


jaccard: 0.0


620
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate lake and labels hair, owner having label owner different than 54. The labels are flower,butterfly.

answer from file: 
assign(X,"flower")|assign(X,"butterfly"):-lake(X, Y), Y!=54 .

facts: 
lake(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate lake and labels hair, owner having label owner different than 54. The labels are flower,butterfly.
Answer: assign(X,"flower")|assign(X," arrivant")|assign(X,"height")|assign(X,"author")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"name")|assign(X,"shape")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description"), Y
retum(Y, X, Z), Z!=54 .
```
The predicate "lake" has label "description", and the predicate "description" has label "price".
So, the

unique_rules: 
[]

parsed: 


jaccard: 0.0


621
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate pink. The labels are flower,wall,laptop.  Then, filter and return only the elements assigned to label laptop.".

answer from file: 
assign(X,"flower")|assign(X,"wall")|assign(X,"laptop"):-pink(X).
select(X):-assign(X, "laptop").

facts: 
pink(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate pink. The labels are flower,wall,laptop.  Then, filter and return only the elements assigned to label laptop.".
Answer: assign(X,"flower")|assign(X,"wall")|assign(X,"laptop"):-pink(X).
select(X):-assign(X, "laptop").
retum(X).
```
Assign(X,"florence")|Assign(X,"wall")|Assign(X,"age"):-pink(X).
select(X):-assign(X, "age").
retum(X).
```
The predicate "pink" returns only the elements where predicate "age" is lower than 75.
The predicate "retum" returns only the elements where predicate "age" is lower than 75 and label "age" is lower than 75.
The

unique_rules: 
['assign(X,"flower")|assign(X,"wall")|assign(X,"laptop"):-pink(X).', 'select(X):-assign(X, "laptop").', 'Assign(X,"florence")|Assign(X,"wall")|Assign(X,"age"):-pink(X).', 'select(X):-assign(X, "age").']

parsed: 
assign(X,"flower")|assign(X,"wall")|assign(X,"laptop"):-pink(X).
select(X):-assign(X, "laptop").

jaccard: 1.0


622
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "pink" and "wall". However, avoid any combination where predicate "pink" has label "chair".

answer from file: 
combination(X,Y):-pink(X, _),wall(Y), not pink(X, chair).

facts: 
pink(1..4, 1..4).wall(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "pink" and "wall". However, avoid any combination where predicate "pink" has label "chair".
Answer: combination(X,Y):-pink(X, _),wall(Y), not pink(X, chair).
combination(X,Y):-pink(X, _),wall(Y).
combination(X,Y):-pink(X, chair),wall(Y).
```
Combinations are expressed by predicate "combination".
However, avoid any combination where predicate "pink" has label "chair".
The two sets are expressed by predicates "pink" and "wall".
So, the predicate "combination" has label "object".
And, the label "object" is not associated with "name".
So, "object" is not considered in the "object" predicate.
Result:

unique_rules: 
['combination(X,Y):-pink(X, _),wall(Y), not pink(X, chair).', 'combination(X,Y):-pink(X, _),wall(Y).', 'combination(X,Y):-pink(X, chair),wall(Y).']

parsed: 
combination(X,Y):-pink(X, _),wall(Y), not pink(X, chair).

jaccard: 1.0


623
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "quality" having fields "ID","strength","lakeID", and the predicate "lake" having fields "ID","owner". Define a predicate "quality_lake" that associates to each "quality" the "owner" of "lake" only where "owner" is different than 68.

answer from file: 
quality_lake(X,Z):-quality(X,_,Y),lake(Y,Z), Z!=68.

facts: 
quality("ID","strength","lakeID").lake("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "quality" having fields "ID","strength","lakeID", and the predicate "lake" having fields "ID","owner". Define a predicate "quality_lake" that associates to each "quality" the "owner" of "lake" only where "owner" is different than 68.
Answer: quality_lake(X,Z):-quality(X,_,Y),lake(Y,Z), Z!=68.
 ángulo(X,Y):-quality(X,_,Y),lake(Y,Z), Z==68.
 ángulo(X,Y):-quality(X,_,Y),lake(Y,Z), Z!=72.
 ángulo(X,Y):-quality(X,_,Y),lake(Y,Z), Z==72.
 ángulo(X,Y):-quality(X,_,Y),lake(Y,Z), Z==80.
 ángulo(X,Y):-quality(X,_,Y),lake(

unique_rules: 
['quality_lake(X,Z):-quality(X,_,Y),lake(Y,Z), Z!=68.', 'ángulo(X,Y):-quality(X,_,Y),lake(Y,Z), Z==68.', 'ángulo(X,Y):-quality(X,_,Y),lake(Y,Z), Z!=72.', 'ángulo(X,Y):-quality(X,_,Y),lake(Y,Z), Z==72.', 'ángulo(X,Y):-quality(X,_,Y),lake(Y,Z), Z==80.', 'ángulo(X,Y):-quality(X,_,Y),lake(.']

parsed: 
quality_lake(X,Z):-quality(X,_,Y),lake(Y,Z), Z!=68.

jaccard: 1.0


624
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "lake" having fields "ID","pinkID","lake", and the predicate "pink" having fields "ID","strength". Define a predicate "lake_pink" that associates to each "lake", not associated with label "desk", the attribute "strength" of "pink".

answer from file: 
lake_pink(X,Z):-lake(X,Y,_),pink(Y,Z),not lake(X,_,desk).

facts: 
lake("ID","pinkID","lake").pink("ID","strength").

generated: 
Write an ASP program for the following problem. Consider predicate "lake" having fields "ID","pinkID","lake", and the predicate "pink" having fields "ID","strength". Define a predicate "lake_pink" that associates to each "lake", not associated with label "desk", the attribute "strength" of "pink".
Result: lake_pink(X,Z):-lake(X,Y,_),pink(Y,Z),not lake(X,_,desk).
lake_pink(X,Y,_):-lake(X,_,_),pink(Y,Z),label(X,table).
assign(X,Z):-lake_pink(X,_,_).
retum(X,Z).
retum(X,_,table).
 quí Medellín, Bogotá, Puebla, Cartagena, Málaga, Madrid, Girona, Verona, Quito, London, Paris, City, Flecha, Nuova York, Shanghai, Bogota, Puebla, Madrid, Cartagena, Girona, Verona, London, Paris, City, Flecha, Nuova York, Shanghai

unique_rules: 
['Result: lake_pink(X,Z):-lake(X,Y,_),pink(Y,Z),not lake(X,_,desk).', 'lake_pink(X,Y,_):-lake(X,_,_),pink(Y,Z),label(X,table).', 'assign(X,Z):-lake_pink(X,_,_).']

parsed: 
Result: lake_pink(X,Z):-lake(X,Y,_),pink(Y,Z),not lake(X,_,desk).

jaccard: 0.0


625
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "owner" as the transitive closure of predicate "storm". Then, assign exactly one label from the set cloud,storm,butterfly,chair,desk,laptop,roof,wall to each element in "owner".

answer from file: 
owner(X,Y):-storm(X,Y).
owner(X,Y):-storm(X,Z),owner(Z,Y).
assign(X,"cloud")|assign(X,"storm")|assign(X,"butterfly")|assign(X,"chair")|assign(X,"desk")|assign(X,"laptop")|assign(X,"roof")|assign(X,"wall"):-owner(X,_).

facts: 
storm(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "owner" as the transitive closure of predicate "storm". Then, assign exactly one label from the set cloud,storm,butterfly,chair,desk,laptop,roof,wall to each element in "owner".
Answer: owner(X,Y):-storm(X,Y).
owner(X,Y):-storm(X,Z),owner(Z,Y).
assign(X,"cloud")|assign(X,"storm")|assign(X," arrivant")|assign(X," felicità")|assign(X,"description")|assign(X,"height")|assign(X,"name")|assign(X,"price")|assign(X,"shape")|assign(X,"city"):-owner(X,_).
retum(X,Y):-owner(X,Y).
retum(X,Y):-owner(X,Z),retum(Z,Y).
retum(X,Y):-owner

unique_rules: 
['owner(X,Y):-storm(X,Y).', 'owner(X,Y):-storm(X,Z),owner(Z,Y).', 'assign(X,"cloud")|assign(X,"storm")|assign(X," arrivant")|assign(X," felicità")|assign(X,"description")|assign(X,"height")|assign(X,"name")|assign(X,"price")|assign(X,"shape")|assign(X,"city"):-owner(X,_).', 'retum(X,Y):-owner(X,Y).', 'retum(X,Y):-owner(X,Z),retum(Z,Y).', 'retum(X,Y):-owner.']

parsed: 
owner(X,Y):-storm(X,Y).
owner(X,Y):-storm(X,Z),owner(Z,Y).
assign(X,"cloud")|assign(X,"storm")|assign(X," arrivant")|assign(X," felicità")|assign(X,"description")|assign(X,"height")|assign(X,"name")|assign(X,"price")|assign(X,"shape")|assign(X,"city"):-owner(X,_).

jaccard: 0.0


626
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are roof,chair,flower,desk,cloud,wall,laptop. Consider only the predicate lake not associated with label "wall".

answer from file: 
assign(X,"roof")|assign(X,"chair")|assign(X,"flower")|assign(X,"desk")|assign(X,"cloud")|assign(X,"wall")|assign(X,"laptop"):-lake(X, _), not lake(X, wall).

facts: 
lake(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are roof,chair,flower,desk,cloud,wall,laptop. Consider only the predicate lake not associated with label "wall".
Answer: assign(X," felicità")|assign(X,"height")|assign(X,"price")|assign(X,"author")|assign(X,"city")|assign(X,"description")|assign(X,"age")|assign(X,"name")|retum(X, Y), Y!=wall .
retum(X, Y), Y!=wall.
 köp(X, Y), Y!=wall.
 kollektive(X, Y), Y!=wall.
 bleue(X, Y), Y!=wall.
age(X, Y), Y!=wall.
name(X, Y), Y!=wall.
author(X, Y), Y!=wall.
city(

unique_rules: 
[]

parsed: 


jaccard: 0.0


627
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate flower and labels lake, weight having label weight different than 85. The labels are desk,roof,wall,storm,flower,butterfly,cloud,chair.

answer from file: 
assign(X,"desk")|assign(X,"roof")|assign(X,"wall")|assign(X,"storm")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"cloud")|assign(X,"chair"):-flower(X, Y), Y!=85 .

facts: 
flower(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate flower and labels lake, weight having label weight different than 85. The labels are desk,roof,wall,storm,flower,butterfly,cloud,chair.
Answer: assign(X,"desk")|assign(X,"roof")|assign(X,"wall")|assign(X,"storm")|assign(X,"flower")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"chair"):-flower(X, Y), Y!=85 .
```
Assign(X,"description")|Assign(X,"height")|Assign(X,"price")|Assign(X,"age")|Assign(X,"name")|Assign(X,"shape")|Assign(X,"city")|Assign(X,"author")|Assign(X,"description","height"):-florence(X, Y), Y!=85 .

unique_rules: 
['assign(X,"desk")|assign(X,"roof")|assign(X,"wall")|assign(X,"storm")|assign(X,"flower")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"chair"):-flower(X, Y), Y!=85 .', 'Assign(X,"description")|Assign(X,"height")|Assign(X,"price")|Assign(X,"age")|Assign(X,"name")|Assign(X,"shape")|Assign(X,"city")|Assign(X,"author")|Assign(X,"description","height"):-florence(X, Y), Y!=85 .']

parsed: 
assign(X,"desk")|assign(X,"roof")|assign(X,"wall")|assign(X,"storm")|assign(X,"flower")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"chair"):-flower(X, Y), Y!=85 .

jaccard: 1.0


628
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate white. The labels are cloud,wall.  Then, filter and return only the elements assigned to label cloud.".

answer from file: 
assign(X,"cloud")|assign(X,"wall"):-white(X).
select(X):-assign(X, "cloud").

facts: 
white(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate white. The labels are cloud,wall.  Then, filter and return only the elements assigned to label cloud.".
Answer: assign(X,"cloud")|assign(X,"wall"):-white(X).
select(X):-assign(X, "cloud").
retum(X).
```
Assign(X,"cloud")|Assign(X,"wall"):-white(X).
select(X):-assign(X, "cloud").
retum(X).
filter(X, "cloud").
```

unique_rules: 
['assign(X,"cloud")|assign(X,"wall"):-white(X).', 'select(X):-assign(X, "cloud").', 'Assign(X,"cloud")|Assign(X,"wall"):-white(X).']

parsed: 
assign(X,"cloud")|assign(X,"wall"):-white(X).
select(X):-assign(X, "cloud").

jaccard: 1.0


629
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "chicago" and "wall". However, avoid any combination where predicate "chicago" has label "desk".

answer from file: 
combination(X,Y):-chicago(X, _),wall(Y), not chicago(X, desk).

facts: 
chicago(1..4, 1..4).wall(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "chicago" and "wall". However, avoid any combination where predicate "chicago" has label "desk".
Answer: combination(X,Y):-chicago(X, _),wall(Y), not chicago(X, desk).
combination(X,Y):-chicago(X, _),wall(Y).
combination(X,Y):-chicago(X, _),wall(Y), label(X, desk).
```
Combinations are expressed by predicate "combination".
However, avoid any combination where predicate "chicago" has label "description".
```
result: combination(X,Y):-chicago(X, _),wall(Y), not chicago(X, description).
```
The "result" predicate is the transitive closure of "combination".
The "not" predicate is used to avoid any combination

unique_rules: 
['combination(X,Y):-chicago(X, _),wall(Y), not chicago(X, desk).', 'combination(X,Y):-chicago(X, _),wall(Y).', 'combination(X,Y):-chicago(X, _),wall(Y), label(X, desk).', 'result: combination(X,Y):-chicago(X, _),wall(Y), not chicago(X, description).']

parsed: 
combination(X,Y):-chicago(X, _),wall(Y), not chicago(X, desk).

jaccard: 1.0


630
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "cloud" having fields "ID","surname","whiteID", and the predicate "white" having fields "ID","surname". Define a predicate "cloud_white" that associates to each "cloud" the "surname" of "white" only where "surname" is different than 34.

answer from file: 
cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34.

facts: 
cloud("ID","surname","whiteID").white("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "cloud" having fields "ID","surname","whiteID", and the predicate "white" having fields "ID","surname". Define a predicate "cloud_white" that associates to each "cloud" the "surname" of "white" only where "surname" is different than 34.
Answer: cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34.
cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z==34.

unique_rules: 
['cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34.', 'cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z==34.']

parsed: 
cloud_white(X,Z):-cloud(X,_,Y),white(Y,Z), Z!=34.

jaccard: 1.0


631
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "black" having fields "ID","quality","lakeID", and the predicate "lake" having fields "ID","owner". Define a predicate "black_lake" that associates to each "black", not associated with label "laptop", the attribute "owner" of "lake".

answer from file: 
black_lake(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).

facts: 
black("ID","quality","lakeID").lake("ID","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "black" having fields "ID","quality","lakeID", and the predicate "lake" having fields "ID","owner". Define a predicate "black_lake" that associates to each "black", not associated with label "laptop", the attribute "owner" of "lake".
Answer: black_lake(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).
black_lake(X,_,Y):-black(X,_,Y),lake(Y,Z),label(X,laptop).
assign(X,black_lake(X,_,Y))|assign(X,lake(Y,Z)),not black(X,_,Y).
retum(X,Y):-black(X,_,Y),not label(X,moto).
retum(X,Y):-black(X,moto,_),not label(X,city).
retum(X,Y):-black(X,city,_),

unique_rules: 
['black_lake(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).', 'black_lake(X,_,Y):-black(X,_,Y),lake(Y,Z),label(X,laptop).', 'retum(X,Y):-black(X,_,Y),not label(X,moto).', 'retum(X,Y):-black(X,moto,_),not label(X,city).', 'retum(X,Y):-black(X,city,_),.']

parsed: 
black_lake(X,Z):-black(X,_,Y),lake(Y,Z),not black(X,laptop,_).

jaccard: 1.0


632
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "storm" as the transitive closure of predicate "white". Then, assign exactly one label from the set chair,roof,flower,desk,wall,laptop,storm,cloud to each element in "storm".

answer from file: 
storm(X,Y):-white(X,Y).
storm(X,Y):-white(X,Z),storm(Z,Y).
assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk")|assign(X,"wall")|assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud"):-storm(X,_).

facts: 
white(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "storm" as the transitive closure of predicate "white". Then, assign exactly one label from the set chair,roof,flower,desk,wall,laptop,storm,cloud to each element in "storm".
Answer: storm(X,Y):-white(X,Y).
storm(X,Y):-white(X,Z),storm(Z,Y).
assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk")|assign(X,"wall")|assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud"):-storm(X,_).
retum:
assign(X,"city")|assign(X,"age")|assign(X,"name")|assign(X,"price")|assign(X,"description")|assign(X,"author")|assign(X,"creator")|assign

unique_rules: 
['storm(X,Y):-white(X,Y).', 'storm(X,Y):-white(X,Z),storm(Z,Y).', 'assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk")|assign(X,"wall")|assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud"):-storm(X,_).']

parsed: 
storm(X,Y):-white(X,Y).
storm(X,Y):-white(X,Z),storm(Z,Y).
assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"desk")|assign(X,"wall")|assign(X,"laptop")|assign(X,"storm")|assign(X,"cloud"):-storm(X,_).

jaccard: 1.0


633
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate moscow. The labels are desk,butterfly,cloud,flower,wall. Consider only the predicate moscow not associated with label "roof".

answer from file: 
assign(X,"desk")|assign(X,"butterfly")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-moscow(X, _), not moscow(X, roof).

facts: 
moscow(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate moscow. The labels are desk,butterfly,cloud,flower,wall. Consider only the predicate moscow not associated with label "roof".
Answer: assign(X,"desk")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-moscow(X, _), not moscow(X, roof).
```
assign(X,"description")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"name"):-moscow(X, _).
```
The predicate moscow has label "description", and the predicate description has label "height". So, the predicate moscow is not associated with label "height".
The labels are description,height,price,age,name,city,shape

unique_rules: 
['assign(X,"desk")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-moscow(X, _), not moscow(X, roof).', 'assign(X,"description")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"name"):-moscow(X, _).']

parsed: 
assign(X,"desk")|assign(X," arrivant")|assign(X,"cloud")|assign(X,"flower")|assign(X,"wall"):-moscow(X, _), not moscow(X, roof).

jaccard: 1.0


634
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate darkmagenta and labels strength, weight having label weight different than 20. The labels are wall,butterfly.

answer from file: 
assign(X,"wall")|assign(X,"butterfly"):-darkmagenta(X, Y), Y!=20 .

facts: 
darkmagenta(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate darkmagenta and labels strength, weight having label weight different than 20. The labels are wall,butterfly.
Answer: assign(X,"wall")|assign(X," ABE")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"author")|assign(X,"name")|assign(X,"shape")|assign(X,"price")|assign(X,"age")|assign(X,"description")|assign(X,"author")|assign(X,"name")|assign(X,"shape") :-darkMagenta(X, Y), Y!=20 .
```
The predicate darkMagenta has label "description", and the labels are price,age,shape,

unique_rules: 
['assign(X,"wall")|assign(X," ABE")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"author")|assign(X,"name")|assign(X,"shape")|assign(X,"price")|assign(X,"age")|assign(X,"description")|assign(X,"author")|assign(X,"name")|assign(X,"shape") :-darkMagenta(X, Y), Y!=20 .']

parsed: 
assign(X,"wall")|assign(X," ABE")|assign(X,"height")|assign(X,"price")|assign(X,"age")|assign(X,"city")|assign(X,"description")|assign(X,"author")|assign(X,"name")|assign(X,"shape")|assign(X,"price")|assign(X,"age")|assign(X,"description")|assign(X,"author")|assign(X,"name")|assign(X,"shape") :-darkMagenta(X, Y), Y!=20 .

jaccard: 0.0


635
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate desk. The labels are desk,storm,wall,butterfly,chair,laptop,flower,roof,cloud.  Then, filter and return only the elements assigned to label chair.".

answer from file: 
assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X,"butterfly")|assign(X,"chair")|assign(X,"laptop")|assign(X,"flower")|assign(X,"roof")|assign(X,"cloud"):-desk(X).
select(X):-assign(X, "chair").

facts: 
desk(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate desk. The labels are desk,storm,wall,butterfly,chair,laptop,flower,roof,cloud.  Then, filter and return only the elements assigned to label chair.".
Answer: assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X," épar")|assign(X,"chair")|assign(X," arrivant")|assign(X,"florence")|assign(X,"roof")|assign(X,"cloud"):-desk(X).
select(X):-assign(X, "chair").
```
The predicate "desk" has label "description", and the predicate "chair" has label "price".
So, the predicate "select" has label "price".
But, only the elements assigned to label "price" are returned.
This is expressed by predicate "select".
The predicate "select"

unique_rules: 
['assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X," épar")|assign(X,"chair")|assign(X," arrivant")|assign(X,"florence")|assign(X,"roof")|assign(X,"cloud"):-desk(X).', 'select(X):-assign(X, "chair").']

parsed: 
assign(X,"desk")|assign(X,"storm")|assign(X,"wall")|assign(X," épar")|assign(X,"chair")|assign(X," arrivant")|assign(X,"florence")|assign(X,"roof")|assign(X,"cloud"):-desk(X).
select(X):-assign(X, "chair").

jaccard: 1.0


636
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "singapore" and "delhi". However, avoid any combination where predicate "singapore" has label "butterfly".

answer from file: 
combination(X,Y):-singapore(X, _),delhi(Y), not singapore(X, butterfly).

facts: 
singapore(1..4, 1..4).delhi(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "singapore" and "delhi". However, avoid any combination where predicate "singapore" has label "butterfly".
Answer: combination(X,Y):-singapore(X, _),delhi(Y), not singapore(X, butterfly).
combination(X,Y):-singapore(X, _),delhi(Y).
combination(X,Y):-singapore(X, _),delhi(Y), label("color").
combination(X,Y):-singapore(X, _),delhi(Y), label("age").
combination(X,Y):-singapore(X, _),delhi(Y), label("price").
retum(X,Y):-combination(X,Y).
retum(X,Y):-combination(X,Y), label("height").
retum(

unique_rules: 
['combination(X,Y):-singapore(X, _),delhi(Y), not singapore(X, butterfly).', 'combination(X,Y):-singapore(X, _),delhi(Y).', 'combination(X,Y):-singapore(X, _),delhi(Y), label("color").', 'combination(X,Y):-singapore(X, _),delhi(Y), label("age").', 'combination(X,Y):-singapore(X, _),delhi(Y), label("price").', 'retum(X,Y):-combination(X,Y).', 'retum(X,Y):-combination(X,Y), label("height").']

parsed: 
combination(X,Y):-singapore(X, _),delhi(Y), not singapore(X, butterfly).

jaccard: 1.0


637
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "butterfly" having fields "ID","delhiID","owner", and the predicate "delhi" having fields "ID","lake". Define a predicate "butterfly_delhi" that associates to each "butterfly" the "lake" of "delhi" only where "lake" is different than 57.

answer from file: 
butterfly_delhi(X,Z):-butterfly(X,Y,_),delhi(Y,Z), Z!=57.

facts: 
butterfly("ID","delhiID","owner").delhi("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "butterfly" having fields "ID","delhiID","owner", and the predicate "delhi" having fields "ID","lake". Define a predicate "butterfly_delhi" that associates to each "butterfly" the "lake" of "delhi" only where "lake" is different than 57.
Answer: butterfly_delhi(X,Z):-butterfly(X,Y,_),delhi(Y,Z), Z!=57.
 ángulo(X,Y,Z):-creator(X,Y,Z),name(Z,Y).
 ángulo(X,Y,Z):-creator(X,Y,Z),name(Z,Y), Z==57.
 ángulo(X,Y,Z):-creator(X,Y,Z),name(Z,Y), Z==67.
 ángulo(X,Y,Z):-creator(X,Y,Z),name(Z,Y), Z==77.
 ángulo(X,Y,

unique_rules: 
['butterfly_delhi(X,Z):-butterfly(X,Y,_),delhi(Y,Z), Z!=57.', 'ángulo(X,Y,Z):-creator(X,Y,Z),name(Z,Y).', 'ángulo(X,Y,Z):-creator(X,Y,Z),name(Z,Y), Z==57.', 'ángulo(X,Y,Z):-creator(X,Y,Z),name(Z,Y), Z==67.', 'ángulo(X,Y,Z):-creator(X,Y,Z),name(Z,Y), Z==77.']

parsed: 
butterfly_delhi(X,Z):-butterfly(X,Y,_),delhi(Y,Z), Z!=57.

jaccard: 1.0


638
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "barcelona" having fields "ID","surnameID","strength", and the predicate "surname" having fields "ID","surname". Define a predicate "barcelona_surname" that associates to each "barcelona", not associated with label "flower", the attribute "surname" of "surname".

answer from file: 
barcelona_surname(X,Z):-barcelona(X,Y,_),surname(Y,Z),not barcelona(X,_,flower).

facts: 
barcelona("ID","surnameID","strength").surname("ID","surname").

generated: 
Write an ASP program for the following problem. Consider predicate "barcelona" having fields "ID","surnameID","strength", and the predicate "surname" having fields "ID","surname". Define a predicate "barcelona_surname" that associates to each "barcelona", not associated with label "flower", the attribute "surname" of "surname".
Answer: barcelona_surname(X,Z):-barcelona(X,Y,_),surname(Y,Z),not barcelona(X,_,flower).
 ángulo_name(X,Y,Z):-shangai(X,Y,Z).
 ángulo_name(X,Y,Z):-shangai(X,Y,Z),creator(X,Y,Z).
 ángulo_name(X,Y,Z):-shangai(X,Y,Z),author(X,Y,Z).
 ángulo_name(X,Y,Z):-shangai(X,Y,Z),description(X,Y,Z).
 ángulo_name(X,Y,

unique_rules: 
['barcelona_surname(X,Z):-barcelona(X,Y,_),surname(Y,Z),not barcelona(X,_,flower).', 'ángulo_name(X,Y,Z):-shangai(X,Y,Z).', 'ángulo_name(X,Y,Z):-shangai(X,Y,Z),creator(X,Y,Z).', 'ángulo_name(X,Y,Z):-shangai(X,Y,Z),author(X,Y,Z).', 'ángulo_name(X,Y,Z):-shangai(X,Y,Z),description(X,Y,Z).']

parsed: 
barcelona_surname(X,Z):-barcelona(X,Y,_),surname(Y,Z),not barcelona(X,_,flower).

jaccard: 1.0


639
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "quality" as the transitive closure of predicate "toronto". Then, assign exactly one label from the set chair,laptop,roof,storm,wall,butterfly,cloud to each element in "quality".

answer from file: 
quality(X,Y):-toronto(X,Y).
quality(X,Y):-toronto(X,Z),quality(Z,Y).
assign(X,"chair")|assign(X,"laptop")|assign(X,"roof")|assign(X,"storm")|assign(X,"wall")|assign(X,"butterfly")|assign(X,"cloud"):-quality(X,_).

facts: 
toronto(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "quality" as the transitive closure of predicate "toronto". Then, assign exactly one label from the set chair,laptop,roof,storm,wall,butterfly,cloud to each element in "quality".
Answer: quality(X,Y):-toronto(X,Y).
quality(X,Y):-toronto(X,Z),quality(Z,Y).
assign(X,"chair")|assign(X," arrivant")|assign(X,"height")|assign(X,"name")|assign(X,"age")|assign(X,"city")|assign(X,"shape")|assign(X,"price"):-quality(X,_).
retum:
assign(X,"shape")|assign(X,"price"):-quality(X,Y).
retum:
assign(X,"price")|assign(X,"shape"):-quality(X,Y).
retum:
assign(

unique_rules: 
['quality(X,Y):-toronto(X,Y).', 'quality(X,Y):-toronto(X,Z),quality(Z,Y).', 'assign(X,"chair")|assign(X," arrivant")|assign(X,"height")|assign(X,"name")|assign(X,"age")|assign(X,"city")|assign(X,"shape")|assign(X,"price"):-quality(X,_).', 'assign(X,"shape")|assign(X,"price"):-quality(X,Y).', 'assign(X,"price")|assign(X,"shape"):-quality(X,Y).']

parsed: 
quality(X,Y):-toronto(X,Y).
quality(X,Y):-toronto(X,Z),quality(Z,Y).
assign(X,"chair")|assign(X," arrivant")|assign(X,"height")|assign(X,"name")|assign(X,"age")|assign(X,"city")|assign(X,"shape")|assign(X,"price"):-quality(X,_).

jaccard: 0.0


640
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate mumbai. The labels are butterfly,flower,desk,storm,chair,roof,cloud,wall. Consider only the predicate mumbai not associated with label "cloud".

answer from file: 
assign(X,"butterfly")|assign(X,"flower")|assign(X,"desk")|assign(X,"storm")|assign(X,"chair")|assign(X,"roof")|assign(X,"cloud")|assign(X,"wall"):-mumbai(X, _), not mumbai(X, cloud).

facts: 
mumbai(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate mumbai. The labels are butterfly,flower,desk,storm,chair,roof,cloud,wall. Consider only the predicate mumbai not associated with label "cloud".
Answer: assign(X," originaux")|assign(X,"description")|assign(X,"city")|assign(X,"name")|assign(X,"price")|assign(X,"age")|assign(X,"author")|assign(X,"description","city")|assign(X,"description","name")|assign(X,"description","price") : mumbai(X, _), not mumbai(X, cloud).
 köp(X, Y), Y!=cloud .
 köp(X, Y), Y==cloud .
 köp(X, Y), Y!=description .
 köp(X, Y), Y==description .
 köp(X, Y), Y!=price .
 köp(

unique_rules: 
[]

parsed: 


jaccard: 0.0


641
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate barcelona and labels quality, owner having label owner different than 26. The labels are laptop,flower,wall.

answer from file: 
assign(X,"laptop")|assign(X,"flower")|assign(X,"wall"):-barcelona(X, Y), Y!=26 .

facts: 
barcelona(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate barcelona and labels quality, owner having label owner different than 26. The labels are laptop,flower,wall.
Answer: assign(X,"laptop")|assign(X,"flower")|assign(X,"wall"):-barcelona(X, Y), Y!=26 .
```
assign(X,"name")|assign(X,"price")|assign(X,"city"):-florence(X).
```
The predicate florence has label city, and the labels are price,name,description,age,shape,city,author,height,creator,age,description,price,name,shape,height,city,author,description,age,price,creator,age,description,name,shape,height,city,author,description,age,price,creator,age,description,name,shape

unique_rules: 
['assign(X,"laptop")|assign(X,"flower")|assign(X,"wall"):-barcelona(X, Y), Y!=26 .', 'assign(X,"name")|assign(X,"price")|assign(X,"city"):-florence(X).']

parsed: 
assign(X,"laptop")|assign(X,"flower")|assign(X,"wall"):-barcelona(X, Y), Y!=26 .

jaccard: 1.0


642
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate laptop. The labels are desk,cloud,butterfly,wall,roof,flower,storm,laptop,chair.  Then, filter and return only the elements assigned to label storm.".

answer from file: 
assign(X,"desk")|assign(X,"cloud")|assign(X,"butterfly")|assign(X,"wall")|assign(X,"roof")|assign(X,"flower")|assign(X,"storm")|assign(X,"laptop")|assign(X,"chair"):-laptop(X).
select(X):-assign(X, "storm").

facts: 
laptop(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate laptop. The labels are desk,cloud,butterfly,wall,roof,flower,storm,laptop,chair.  Then, filter and return only the elements assigned to label storm.".
Answer: assign(X,"desk")|assign(X,"cloud")|assign(X," felicità")|assign(X,"wall")|assign(X,"roof")|assign(X,"flower")|assign(X,"storm")|assign(X," felicità")|assign(X,"shape")|retum(X, "storm").
select(X):-assign(X, "shape").
retum(X, "shape").
```
The predicate "laptop" has label "shape", and the predicate "shape" has label "shape".
So, the predicate "retum" associates to each "shape" the "shape" of "shape".
Then, "retum" returns only the elements assigned

unique_rules: 
['select(X):-assign(X, "shape").']

parsed: 
select(X):-assign(X, "shape").

jaccard: 0.0


643
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "barcelona" and "chicago". However, avoid any combination where predicate "barcelona" has label "flower".

answer from file: 
combination(X,Y):-barcelona(X, _),chicago(Y), not barcelona(X, flower).

facts: 
barcelona(1..4, 1..4).chicago(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "barcelona" and "chicago". However, avoid any combination where predicate "barcelona" has label "flower".
Answer: combination(X,Y):-barcelona(X, _),chicago(Y), not barcelona(X, flower).
combination(X,Y):-barcelona(X, _),chicago(Y).
combination(X,Y):-barcelona(X, _),chicago(Y), label(X, "age").
assign(X, Y)
retum(X, Y).
retum(X, Y), label(X, "age").
retum(X, Y), label(X, "price").
retum(X, Y), label(X, "height").
retum(X, Y), label(X, "description").
retum(X, Y), label(X, "author

unique_rules: 
['combination(X,Y):-barcelona(X, _),chicago(Y), not barcelona(X, flower).', 'combination(X,Y):-barcelona(X, _),chicago(Y).', 'combination(X,Y):-barcelona(X, _),chicago(Y), label(X, "age").']

parsed: 
combination(X,Y):-barcelona(X, _),chicago(Y), not barcelona(X, flower).

jaccard: 1.0


644
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "surname" having fields "ID","torontoID","hair", and the predicate "toronto" having fields "ID","hair". Define a predicate "surname_toronto" that associates to each "surname" the "hair" of "toronto" only where "hair" is different than 2.

answer from file: 
surname_toronto(X,Z):-surname(X,Y,_),toronto(Y,Z), Z!=2.

facts: 
surname("ID","torontoID","hair").toronto("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "surname" having fields "ID","torontoID","hair", and the predicate "toronto" having fields "ID","hair". Define a predicate "surname_toronto" that associates to each "surname" the "hair" of "toronto" only where "hair" is different than 2.
Answer: surname_toronto(X,Z):-surname(X,Y,_),toronto(Y,Z), Z!=2.
 assurent(X,Y,Z):-surname(X,Y,_),toronto(Y,Z), Z==2.
 ángulo(X,Y,Z):-surname(X,Y,_), assurent(Y,_,Z), Z!=2.
 ángulo(X,Y,Z):-surname(X,Y,_), parlamento(Y,Z), Z!=2.
 ángulo(X,Y,Z):- assurent(Y,_,Z), biet(X,Y,Z), Z!=2.
 ángulo(X,Y,Z):- assurent(

unique_rules: 
['surname_toronto(X,Z):-surname(X,Y,_),toronto(Y,Z), Z!=2.', 'assurent(X,Y,Z):-surname(X,Y,_),toronto(Y,Z), Z==2.', 'ángulo(X,Y,Z):-surname(X,Y,_), assurent(Y,_,Z), Z!=2.', 'ángulo(X,Y,Z):-surname(X,Y,_), parlamento(Y,Z), Z!=2.', 'ángulo(X,Y,Z):- assurent(Y,_,Z), biet(X,Y,Z), Z!=2.', 'ángulo(X,Y,Z):- assurent(.']

parsed: 
surname_toronto(X,Z):-surname(X,Y,_),toronto(Y,Z), Z!=2.

jaccard: 1.0


645
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "chicago" having fields "ID","hair","delhiID", and the predicate "delhi" having fields "ID","hair". Define a predicate "chicago_delhi" that associates to each "chicago", not associated with label "laptop", the attribute "hair" of "delhi".

answer from file: 
chicago_delhi(X,Z):-chicago(X,_,Y),delhi(Y,Z),not chicago(X,laptop,_).

facts: 
chicago("ID","hair","delhiID").delhi("ID","hair").

generated: 
Write an ASP program for the following problem. Consider predicate "chicago" having fields "ID","hair","delhiID", and the predicate "delhi" having fields "ID","hair". Define a predicate "chicago_delhi" that associates to each "chicago", not associated with label "laptop", the attribute "hair" of "delhi".
Result: chicago_delhi(X,Z):-chicago(X,_,Y),delhi(Y,Z),not chicago(X,laptop,_).
 ángulo(X,Y):-chicago(X,_,Y),delhi(Y,Z).
 ángulo(X,Y):-chicago(X,_,Y),not delhi(Y,Z).
 ángulo(X,Y):-car(X,Z),not chicago(X,_,Z).
 ángulo(X,Y):-car(X,Z),not delhi(Y,Z).
 ángulo(X,Y):-car(X,Z),not chicago(X,_,Z).
 ángulo(X

unique_rules: 
['Result: chicago_delhi(X,Z):-chicago(X,_,Y),delhi(Y,Z),not chicago(X,laptop,_).', 'ángulo(X,Y):-chicago(X,_,Y),delhi(Y,Z).', 'ángulo(X,Y):-chicago(X,_,Y),not delhi(Y,Z).', 'ángulo(X,Y):-car(X,Z),not chicago(X,_,Z).', 'ángulo(X,Y):-car(X,Z),not delhi(Y,Z).']

parsed: 
Result: chicago_delhi(X,Z):-chicago(X,_,Y),delhi(Y,Z),not chicago(X,laptop,_).

jaccard: 0.0


646
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "butterfly" as the transitive closure of predicate "roof". Then, assign exactly one label from the set chair,wall,desk,laptop,butterfly,cloud to each element in "butterfly".

answer from file: 
butterfly(X,Y):-roof(X,Y).
butterfly(X,Y):-roof(X,Z),butterfly(Z,Y).
assign(X,"chair")|assign(X,"wall")|assign(X,"desk")|assign(X,"laptop")|assign(X,"butterfly")|assign(X,"cloud"):-butterfly(X,_).

facts: 
roof(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "butterfly" as the transitive closure of predicate "roof". Then, assign exactly one label from the set chair,wall,desk,laptop,butterfly,cloud to each element in "butterfly".
Answer: butterfly(X,Y):-roof(X,Y).
 écouter(X,Y):-roof(X,Y).
assign(X,"chair")|assign(X,"wall")|assign(X,"desk")|assign(X,"laptop")|assign(X," arrivant")|assign(X,"height") :-butterfly(X,_).
retum(X,Y):-assign(X,Y).
retum(X,Y):-assign(X,Y),height(X,Y).
retum(X,Y):-assign(X,Y),height(X,Y),description(X,Y).
description(X,Y):-assign(X,Y),height(

unique_rules: 
['butterfly(X,Y):-roof(X,Y).', 'écouter(X,Y):-roof(X,Y).', 'assign(X,"chair")|assign(X,"wall")|assign(X,"desk")|assign(X,"laptop")|assign(X," arrivant")|assign(X,"height") :-butterfly(X,_).', 'retum(X,Y):-assign(X,Y).', 'retum(X,Y):-assign(X,Y),height(X,Y).', 'retum(X,Y):-assign(X,Y),height(X,Y),description(X,Y).', 'description(X,Y):-assign(X,Y),height(.']

parsed: 
butterfly(X,Y):-roof(X,Y).
écouter(X,Y):-roof(X,Y).
assign(X,"chair")|assign(X,"wall")|assign(X,"desk")|assign(X,"laptop")|assign(X," arrivant")|assign(X,"height") :-butterfly(X,_).

jaccard: 0.0


647
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate chair. The labels are roof,storm,laptop,chair,butterfly,cloud,wall,flower,desk. Consider only the predicate chair not associated with label "wall".

answer from file: 
assign(X,"roof")|assign(X,"storm")|assign(X,"laptop")|assign(X,"chair")|assign(X,"butterfly")|assign(X,"cloud")|assign(X,"wall")|assign(X,"flower")|assign(X,"desk"):-chair(X, _), not chair(X, wall).

facts: 
chair(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate chair. The labels are roof,storm,laptop,chair,butterfly,cloud,wall,flower,desk. Consider only the predicate chair not associated with label "wall".
Answer: assign(X," felicità")|assign(X,"price")|assign(X,"city")|assign(X,"name")|assign(X,"age")|assign(X,"description")|assign(X,"height")|assign(X,"author")|assign(X,"shape")|retum(X).
retum(X) :-chair(X, _), not chair(X, wall).
assign(X, " felicità") :-chair(X, _), not chair(X, wall).
assign(X, "price") :-chair(X, _), not chair(X, wall).
assign(X, "city") :-chair(X, _), not chair

unique_rules: 
['retum(X) :-chair(X, _), not chair(X, wall).', 'assign(X, " felicità") :-chair(X, _), not chair(X, wall).', 'assign(X, "price") :-chair(X, _), not chair(X, wall).', 'assign(X, "city") :-chair(X, _), not chair.']

parsed: 
retum(X) :-chair(X, _), not chair(X, wall).

jaccard: 0.0


648
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate chicago and labels surname, weight having label weight different than 35. The labels are wall,roof,butterfly,desk.

answer from file: 
assign(X,"wall")|assign(X,"roof")|assign(X,"butterfly")|assign(X,"desk"):-chicago(X, Y), Y!=35 .

facts: 
chicago(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate chicago and labels surname, weight having label weight different than 35. The labels are wall,roof,butterfly,desk.
Answer: assign(X,"wall")|assign(X,"roof")|assign(X," épar")|assign(X,"desk"):-chicago(X, Y), Y!=35 .
```
assign(X,"wall")|assign(X,"roof")|assign(X," épar")|assign(X,"desk"):-chicago(X, Y), Y!=35 .
```

unique_rules: 
['assign(X,"wall")|assign(X,"roof")|assign(X," épar")|assign(X,"desk"):-chicago(X, Y), Y!=35 .']

parsed: 
assign(X,"wall")|assign(X,"roof")|assign(X," épar")|assign(X,"desk"):-chicago(X, Y), Y!=35 .

jaccard: 0.0


649
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate cosenza. The labels are storm,roof,desk,butterfly,chair.  Then, filter and return only the elements assigned to label butterfly.".

answer from file: 
assign(X,"storm")|assign(X,"roof")|assign(X,"desk")|assign(X,"butterfly")|assign(X,"chair"):-cosenza(X).
select(X):-assign(X, "butterfly").

facts: 
cosenza(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate cosenza. The labels are storm,roof,desk,butterfly,chair.  Then, filter and return only the elements assigned to label butterfly.".
Answer: assign(X," cœurs")|assign(X,"florence")|assign(X,"city")|assign(X,"author")|assign(X,"description")|assign(X,"price")|assign(X,"age")|retum(X, "description").
select(X):-assign(X, "author").
retum(X, "description").
 köp: for(X in cosenza) do assign(X, "description").
 köp: for(X in cosenza) doretum(X, "description").
 köp: for(X in cosenza) do assign(X, "price").
 köp: for(X in cosenza) doretum(X, "

unique_rules: 
['select(X):-assign(X, "author").']

parsed: 
select(X):-assign(X, "author").

jaccard: 0.0


650
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "black" and "cosenza". However, avoid any combination where predicate "black" has label "wall".

answer from file: 
combination(X,Y):-black(X, _),cosenza(Y), not black(X, wall).

facts: 
black(1..4, 1..4).cosenza(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "black" and "cosenza". However, avoid any combination where predicate "black" has label "wall".
Answer: combination(X,Y):-black(X),cosenza(Y), not black(X,wall).
combination(X,Y):-black(X),cosenza(Y).
combination(X,Y):-black(X),cosenza(Y), label(X,name).
assign(X,Y):-black(X),cosenza(Y).
assign(X,Y):-black(X),cosenza(Y), label(X,price).
assign(X,Y):-black(X),cosenza(Y), label(X,age).
retum(X,Y):-combination(X,Y).
retum(X,Y):-combination(X,Y), label

unique_rules: 
['combination(X,Y):-black(X),cosenza(Y), not black(X,wall).', 'combination(X,Y):-black(X),cosenza(Y).', 'combination(X,Y):-black(X),cosenza(Y), label(X,name).', 'assign(X,Y):-black(X),cosenza(Y).', 'assign(X,Y):-black(X),cosenza(Y), label(X,price).', 'assign(X,Y):-black(X),cosenza(Y), label(X,age).', 'retum(X,Y):-combination(X,Y).', 'retum(X,Y):-combination(X,Y), label.']

parsed: 
combination(X,Y):-black(X),cosenza(Y), not black(X,wall).

jaccard: 0.0


651
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "white" having fields "ID","surname","laptopID", and the predicate "laptop" having fields "ID","quality". Define a predicate "white_laptop" that associates to each "white" the "quality" of "laptop" only where "quality" is different than 18.

answer from file: 
white_laptop(X,Z):-white(X,_,Y),laptop(Y,Z), Z!=18.

facts: 
white("ID","surname","laptopID").laptop("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "white" having fields "ID","surname","laptopID", and the predicate "laptop" having fields "ID","quality". Define a predicate "white_laptop" that associates to each "white" the "quality" of "laptop" only where "quality" is different than 18.
Answer: white_laptop(X,Z):-white(X,_,Y),laptop(Y,Z), Z!=18.
white_laptop(X,_,Y):-white(X,_,Y),laptop(Y,Z), Z==18.

unique_rules: 
['white_laptop(X,Z):-white(X,_,Y),laptop(Y,Z), Z!=18.', 'white_laptop(X,_,Y):-white(X,_,Y),laptop(Y,Z), Z==18.']

parsed: 
white_laptop(X,Z):-white(X,_,Y),laptop(Y,Z), Z!=18.

jaccard: 1.0


652
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "black" having fields "ID","pinkID","lake", and the predicate "pink" having fields "ID","owner". Define a predicate "black_pink" that associates to each "black", not associated with label "roof", the attribute "owner" of "pink".

answer from file: 
black_pink(X,Z):-black(X,Y,_),pink(Y,Z),not black(X,_,roof).

facts: 
black("ID","pinkID","lake").pink("ID","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "black" having fields "ID","pinkID","lake", and the predicate "pink" having fields "ID","owner". Define a predicate "black_pink" that associates to each "black", not associated with label "roof", the attribute "owner" of "pink".
Answer: black_pink(X,Z):-black(X,Y,_),pink(Y,Z),not black(X,_,roof).
black_pink(X,Y,_):-black(X,_,_),pink(Y,Z),label(X,roof).
assign(X,Z):-black_pink(X,_,_).
retum(X,Z).
retum(X,_,roof).
 quíname(X,Z):-black(X,Y,_),pink(Y,Z),not black(X,_,roof).
 quíname(X,Z):-black(X,_,_),pink(Y,Z),label(X,roof).
assign(X

unique_rules: 
['black_pink(X,Z):-black(X,Y,_),pink(Y,Z),not black(X,_,roof).', 'black_pink(X,Y,_):-black(X,_,_),pink(Y,Z),label(X,roof).', 'assign(X,Z):-black_pink(X,_,_).', 'quíname(X,Z):-black(X,Y,_),pink(Y,Z),not black(X,_,roof).', 'quíname(X,Z):-black(X,_,_),pink(Y,Z),label(X,roof).']

parsed: 
black_pink(X,Z):-black(X,Y,_),pink(Y,Z),not black(X,_,roof).

jaccard: 1.0


653
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "laptop" as the transitive closure of predicate "barcelona". Then, assign exactly one label from the set desk,storm,cloud,butterfly,roof,chair to each element in "laptop".

answer from file: 
laptop(X,Y):-barcelona(X,Y).
laptop(X,Y):-barcelona(X,Z),laptop(Z,Y).
assign(X,"desk")|assign(X,"storm")|assign(X,"cloud")|assign(X,"butterfly")|assign(X,"roof")|assign(X,"chair"):-laptop(X,_).

facts: 
barcelona(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "laptop" as the transitive closure of predicate "barcelona". Then, assign exactly one label from the set desk,storm,cloud,butterfly,roof,chair to each element in "laptop".
Answer: " arrivant"(X,Y):-bike(X,Y).
 arrivant(X,Y):-bike(X,Z), arrivant(Z,Y).
assign(X,"desk")|assign(X,"storm")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"roof")|assign(X,"chair"):-laptop(X).
retum(X,Y):- arrivant(X,Y).
retum(X,Y):- arrivant(X,Z),retum(Z,Y).
retum(X,Y):- arrivant(X,Z),retum(Z,Y).
retum(X,Y):- arrivant(X,Z),retum(Z

unique_rules: 
['" arrivant"(X,Y):-bike(X,Y).', 'arrivant(X,Y):-bike(X,Z), arrivant(Z,Y).', 'assign(X,"desk")|assign(X,"storm")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"roof")|assign(X,"chair"):-laptop(X).', 'retum(X,Y):- arrivant(X,Y).', 'retum(X,Y):- arrivant(X,Z),retum(Z,Y).', 'retum(X,Y):- arrivant(X,Z),retum(Z.']

parsed: 
" arrivant"(X,Y):-bike(X,Y).
arrivant(X,Y):-bike(X,Z), arrivant(Z,Y).
assign(X,"desk")|assign(X,"storm")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"roof")|assign(X,"chair"):-laptop(X).

jaccard: 0.0


654
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate owner. The labels are wall,chair. Consider only the predicate owner not associated with label "chair".

answer from file: 
assign(X,"wall")|assign(X,"chair"):-owner(X, _), not owner(X, chair).

facts: 
owner(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate owner. The labels are wall,chair. Consider only the predicate owner not associated with label "chair".
Answer: assign(X,"wall")|assign(X,"chair"):-owner(X, _), not owner(X, chair).
```
assign(X,"wall")|assign(X,"chair"):-owner(X, _).
```

unique_rules: 
['assign(X,"wall")|assign(X,"chair"):-owner(X, _), not owner(X, chair).', 'assign(X,"wall")|assign(X,"chair"):-owner(X, _).']

parsed: 
assign(X,"wall")|assign(X,"chair"):-owner(X, _), not owner(X, chair).

jaccard: 1.0


655
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate toronto and labels weight, quality having label quality different than 19. The labels are wall,butterfly,chair,flower,laptop,desk,cloud,storm,roof.

answer from file: 
assign(X,"wall")|assign(X,"butterfly")|assign(X,"chair")|assign(X,"flower")|assign(X,"laptop")|assign(X,"desk")|assign(X,"cloud")|assign(X,"storm")|assign(X,"roof"):-toronto(X, Y), Y!=19 .

facts: 
toronto(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate toronto and labels weight, quality having label quality different than 19. The labels are wall,butterfly,chair,flower,laptop,desk,cloud,storm,roof.
Answer: assign(X,"wall")|assign(X," arrivant")|assign(X,"chair")|assign(X,"flower")|assign(X," arrivant")|assign(X," felicità")|assign(X,"shape")|assign(X,"city")|assign(X,"name")|assign(X,"price"),
retum(X, Y), Y!=19 .
```
Assign(X," felicità") :
retum(X, Y), Y!=19 .
Assign(X,"shape") :
retum(X, Y), Y!=19 .
Assign(X,"city") :
retum(X, Y), Y!=19 .
Assign(X

unique_rules: 
[]

parsed: 


jaccard: 0.0


656
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate butterfly. The labels are butterfly,roof,cloud,wall,storm,laptop.  Then, filter and return only the elements assigned to label wall.".

answer from file: 
assign(X,"butterfly")|assign(X,"roof")|assign(X,"cloud")|assign(X,"wall")|assign(X,"storm")|assign(X,"laptop"):-butterfly(X).
select(X):-assign(X, "wall").

facts: 
butterfly(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate butterfly. The labels are butterfly,roof,cloud,wall,storm,laptop.  Then, filter and return only the elements assigned to label wall.".
Answer: assign(X," originaux")|assign(X,"florence")|assign(X,"city")|assign(X,"description")|assign(X,"name")|assign(X,"price")|assign(X,"author")|retum(X, "wall").
select(X):-assign(X, "wall").
```
The predicate "moto" has label "description", and the predicate "description" has label "author".
So, the predicate "moto" has label "author" only where "author" is lower than 75.
The predicate "description" has label "author" only where "author" is greater than 75.
Therefore, the predicate "

unique_rules: 
['select(X):-assign(X, "wall").']

parsed: 
select(X):-assign(X, "wall").

jaccard: 0.0


657
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "white" and "laptop". However, avoid any combination where predicate "white" has label "butterfly".

answer from file: 
combination(X,Y):-white(X, _),laptop(Y), not white(X, butterfly).

facts: 
white(1..4, 1..4).laptop(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "white" and "laptop". However, avoid any combination where predicate "white" has label "butterfly".
Answer: combination(X,Y):-white(X, _),laptop(Y), not white(X, butterfly).
combination(X,Y):-white(X, _),laptop(Y).
combination(X,Y):-white(X, _),laptop(Y), biet(X, Y).
assign(X, Y)
combination(X, Y).
retum.
 ángulo(X, Y):-assign(X, Y), biet(X, Y).
 ángulo(X, Y):-assign(X, Y), not biet(X, Y).
 ángulo(X, Y):-assign(X, Y), biet(X, Y), _>.
 ángulo(

unique_rules: 
['combination(X,Y):-white(X, _),laptop(Y), not white(X, butterfly).', 'combination(X,Y):-white(X, _),laptop(Y).', 'combination(X,Y):-white(X, _),laptop(Y), biet(X, Y).', 'ángulo(X, Y):-assign(X, Y), biet(X, Y).', 'ángulo(X, Y):-assign(X, Y), not biet(X, Y).', 'ángulo(X, Y):-assign(X, Y), biet(X, Y), _>.']

parsed: 
combination(X,Y):-white(X, _),laptop(Y), not white(X, butterfly).

jaccard: 1.0


658
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "white" having fields "ID","qualityID","hair", and the predicate "quality" having fields "ID","owner". Define a predicate "white_quality" that associates to each "white" the "owner" of "quality" only where "owner" is different than 22.

answer from file: 
white_quality(X,Z):-white(X,Y,_),quality(Y,Z), Z!=22.

facts: 
white("ID","qualityID","hair").quality("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "white" having fields "ID","qualityID","hair", and the predicate "quality" having fields "ID","owner". Define a predicate "white_quality" that associates to each "white" the "owner" of "quality" only where "owner" is different than 22.
Answer: white_quality(X,Z):-white(X,Y,_),quality(Y,Z), Z!=22.
white_quality(X,Y,_):-white(X,Y,Z),quality(Y,Z).
assign(X,Z):-white(X,Y,_),quality(Y,Z).
retum(X,Y,Z),white_quality(X,Y,Z).
retum(X,Y,Z),not white_quality(X,Y,Z).
 quíname(X,Y,Z),white(X,Y,Z).
 quíname(X,Y,Z),not white_quality(X,Y,Z

unique_rules: 
['white_quality(X,Z):-white(X,Y,_),quality(Y,Z), Z!=22.', 'white_quality(X,Y,_):-white(X,Y,Z),quality(Y,Z).', 'assign(X,Z):-white(X,Y,_),quality(Y,Z).']

parsed: 
white_quality(X,Z):-white(X,Y,_),quality(Y,Z), Z!=22.

jaccard: 1.0


659
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "chicago" having fields "ID","cosenzaID","surname", and the predicate "cosenza" having fields "ID","owner". Define a predicate "chicago_cosenza" that associates to each "chicago", not associated with label "laptop", the attribute "owner" of "cosenza".

answer from file: 
chicago_cosenza(X,Z):-chicago(X,Y,_),cosenza(Y,Z),not chicago(X,_,laptop).

facts: 
chicago("ID","cosenzaID","surname").cosenza("ID","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "chicago" having fields "ID","cosenzaID","surname", and the predicate "cosenza" having fields "ID","owner". Define a predicate "chicago_cosenza" that associates to each "chicago", not associated with label "laptop", the attribute "owner" of "cosenza".
Result: chicago_cosenza(X,Z):-chicago(X,Y,_),cosenza(Y,Z),not chicago(X,_,laptop).
 ángulo(X,Y,Z):-chicago(X,Y,_),cosenza(Y,Z).
 ángulo(X,_,Z):-chicago(X,_,_),not cosenza(Y,Z).
 ángulo(X,_,Z):-chicago(X,_,_),object(Y,Z).
 ángulo(X,_,Z):-chicago(X,_,_),author(Y,Z).
 ángulo(X,_,Z):-chicago(X,_,_),creator(Y,Z).
 ángulo(X,

unique_rules: 
['Result: chicago_cosenza(X,Z):-chicago(X,Y,_),cosenza(Y,Z),not chicago(X,_,laptop).', 'ángulo(X,Y,Z):-chicago(X,Y,_),cosenza(Y,Z).', 'ángulo(X,_,Z):-chicago(X,_,_),not cosenza(Y,Z).', 'ángulo(X,_,Z):-chicago(X,_,_),object(Y,Z).', 'ángulo(X,_,Z):-chicago(X,_,_),author(Y,Z).', 'ángulo(X,_,Z):-chicago(X,_,_),creator(Y,Z).']

parsed: 
Result: chicago_cosenza(X,Z):-chicago(X,Y,_),cosenza(Y,Z),not chicago(X,_,laptop).

jaccard: 0.0


660
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "wall" as the transitive closure of predicate "cloud". Then, assign exactly one label from the set cloud,chair,desk,flower,wall,laptop,roof,butterfly to each element in "wall".

answer from file: 
wall(X,Y):-cloud(X,Y).
wall(X,Y):-cloud(X,Z),wall(Z,Y).
assign(X,"cloud")|assign(X,"chair")|assign(X,"desk")|assign(X,"flower")|assign(X,"wall")|assign(X,"laptop")|assign(X,"roof")|assign(X,"butterfly"):-wall(X,_).

facts: 
cloud(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "wall" as the transitive closure of predicate "cloud". Then, assign exactly one label from the set cloud,chair,desk,flower,wall,laptop,roof,butterfly to each element in "wall".
Answer: wall(X,Y):-cloud(X,Y).
wall(X,Y):-cloud(X,Z),wall(Z,Y).
assign(X,"cloud")|assign(X,"chair")|assign(X,"desk")|assign(X,"flower")|assign(X,"wall")|assign(X,"laptop")|assign(X,"roof")|assign(X," épar") :-wall(X,_).
retum:assign(X," épar") .
retum:assign(X,"city") .
retum:assign(X,"name") .
retum:assign(X,"price") .
retum:assign(X,"age") .
retum:assign

unique_rules: 
['wall(X,Y):-cloud(X,Y).', 'wall(X,Y):-cloud(X,Z),wall(Z,Y).', 'assign(X,"cloud")|assign(X,"chair")|assign(X,"desk")|assign(X,"flower")|assign(X,"wall")|assign(X,"laptop")|assign(X,"roof")|assign(X," épar") :-wall(X,_).']

parsed: 
wall(X,Y):-cloud(X,Y).
wall(X,Y):-cloud(X,Z),wall(Z,Y).
assign(X,"cloud")|assign(X,"chair")|assign(X,"desk")|assign(X,"flower")|assign(X,"wall")|assign(X,"laptop")|assign(X,"roof")|assign(X," épar") :-wall(X,_).

jaccard: 0.0


661
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate singapore. The labels are chair,desk,storm. Consider only the predicate singapore not associated with label "storm".

answer from file: 
assign(X,"chair")|assign(X,"desk")|assign(X,"storm"):-singapore(X, _), not singapore(X, storm).

facts: 
singapore(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate singapore. The labels are chair,desk,storm. Consider only the predicate singapore not associated with label "storm".
Answer: assign(X,"chair")|assign(X,"desk")|assign(X,"storm"):-singapore(X, _), not singapore(X, storm).
``` italienne
assign(X,"chair")|assign(X,"desk")|assign(X,"storm"):- ángulo(X, _), not ángulo(X, storm).
```
The predicate " ángulo" has label "description", but not "price".
The predicate "description" has label "description", but not "price".
So, the predicate "assign" has label "description" only where "description" is not "price".
The predicate " ángulo" has label "description", but not

unique_rules: 
['assign(X,"chair")|assign(X,"desk")|assign(X,"storm"):-singapore(X, _), not singapore(X, storm).', 'assign(X,"chair")|assign(X,"desk")|assign(X,"storm"):- ángulo(X, _), not ángulo(X, storm).']

parsed: 
assign(X,"chair")|assign(X,"desk")|assign(X,"storm"):-singapore(X, _), not singapore(X, storm).

jaccard: 1.0


662
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate moscow and labels lake, quality having label quality different than 94. The labels are wall,storm,roof,cloud,butterfly,flower.

answer from file: 
assign(X,"wall")|assign(X,"storm")|assign(X,"roof")|assign(X,"cloud")|assign(X,"butterfly")|assign(X,"flower"):-moscow(X, Y), Y!=94 .

facts: 
moscow(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate moscow and labels lake, quality having label quality different than 94. The labels are wall,storm,roof,cloud,butterfly,flower.
Answer: assign(X,"wall")|assign(X,"storm")|assign(X,"roof")|assign(X,"cloud")|assign(X," épar")|assign(X,"florence"):-moscow(X, Y), Y!=94 .
```
assign(X,"wall")|assign(X,"storm")|assign(X,"roof")|assign(X,"cloud")|assign(X," épar")|assign(X,"florence"):-moscow(X, Y), Y!=94 .
```

unique_rules: 
['assign(X,"wall")|assign(X,"storm")|assign(X,"roof")|assign(X,"cloud")|assign(X," épar")|assign(X,"florence"):-moscow(X, Y), Y!=94 .']

parsed: 
assign(X,"wall")|assign(X,"storm")|assign(X,"roof")|assign(X,"cloud")|assign(X," épar")|assign(X,"florence"):-moscow(X, Y), Y!=94 .

jaccard: 0.0


663
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate surname. The labels are chair,laptop,desk,roof,butterfly,storm,cloud,flower.  Then, filter and return only the elements assigned to label desk.".

answer from file: 
assign(X,"chair")|assign(X,"laptop")|assign(X,"desk")|assign(X,"roof")|assign(X,"butterfly")|assign(X,"storm")|assign(X,"cloud")|assign(X,"flower"):-surname(X).
select(X):-assign(X, "desk").

facts: 
surname(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate surname. The labels are chair,laptop,desk,roof,butterfly,storm,cloud,flower.  Then, filter and return only the elements assigned to label desk.".
Answer: assign(X,"chair")|assign(X," arrivant")|assign(X,"desk")|assign(X,"roof")|assign(X," arrivant")|assign(X,"city")|assign(X,"name")|assign(X,"age")|retum(X, "desk").
select(X):-assign(X, "desk").
```
The predicate "name" has label "age", but for the predicate "retum" only the "age" is assigned to label "description".
So, the predicate "retum" returns only the elements assigned to label "description".
The predicate "description" has label "description", but for the predicate "name" only the "description

unique_rules: 
['select(X):-assign(X, "desk").']

parsed: 
select(X):-assign(X, "desk").

jaccard: 0.0


664
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "butterfly" and "lake". However, avoid any combination where predicate "butterfly" has label "roof".

answer from file: 
combination(X,Y):-butterfly(X, _),lake(Y), not butterfly(X, roof).

facts: 
butterfly(1..4, 1..4).lake(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "butterfly" and "lake". However, avoid any combination where predicate "butterfly" has label "roof".
Answer: combination(X,Y):-florence(X),lake(Y), not florence(X,roof).
combination(X,Y):-florence(X),lake(Y), label(X,price).
assign(X,Y):-florence(X),lake(Y), not florence(X,price).
assign(X,Y):-florence(X),lake(Y), label(X,height).
assign(X,Y):-florence(X),lake(Y), label(X,age).
assign(X,Y):-florence(X),lake(Y), label(X,description).
assign(X,Y):-florence(X),

unique_rules: 
['combination(X,Y):-florence(X),lake(Y), not florence(X,roof).', 'combination(X,Y):-florence(X),lake(Y), label(X,price).', 'assign(X,Y):-florence(X),lake(Y), not florence(X,price).', 'assign(X,Y):-florence(X),lake(Y), label(X,height).', 'assign(X,Y):-florence(X),lake(Y), label(X,age).', 'assign(X,Y):-florence(X),lake(Y), label(X,description).', 'assign(X,Y):-florence(X),.']

parsed: 
combination(X,Y):-florence(X),lake(Y), not florence(X,roof).

jaccard: 0.0


665
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "black" having fields "ID","hair","singaporeID", and the predicate "singapore" having fields "ID","quality". Define a predicate "black_singapore" that associates to each "black" the "quality" of "singapore" only where "quality" is different than 17.

answer from file: 
black_singapore(X,Z):-black(X,_,Y),singapore(Y,Z), Z!=17.

facts: 
black("ID","hair","singaporeID").singapore("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "black" having fields "ID","hair","singaporeID", and the predicate "singapore" having fields "ID","quality". Define a predicate "black_singapore" that associates to each "black" the "quality" of "singapore" only where "quality" is different than 17.
Answer: black_singapore(X,Z):-black(X,_,Y),singapore(Y,Z), Z!=17.
black_singapore(X,_,Y):-black(X,_,Y),singapore(Y,Z), Z==17.

unique_rules: 
['black_singapore(X,Z):-black(X,_,Y),singapore(Y,Z), Z!=17.', 'black_singapore(X,_,Y):-black(X,_,Y),singapore(Y,Z), Z==17.']

parsed: 
black_singapore(X,Z):-black(X,_,Y),singapore(Y,Z), Z!=17.

jaccard: 1.0


666
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "flower" having fields "ID","owner","surnameID", and the predicate "surname" having fields "ID","strength". Define a predicate "flower_surname" that associates to each "flower", not associated with label "laptop", the attribute "strength" of "surname".

answer from file: 
flower_surname(X,Z):-flower(X,_,Y),surname(Y,Z),not flower(X,laptop,_).

facts: 
flower("ID","owner","surnameID").surname("ID","strength").

generated: 
Write an ASP program for the following problem. Consider predicate "flower" having fields "ID","owner","surnameID", and the predicate "surname" having fields "ID","strength". Define a predicate "flower_surname" that associates to each "flower", not associated with label "laptop", the attribute "strength" of "surname".
Result: flower_name(X,Z):-flower(X,_,Y),surname(Y,Z),not flower(X,laptop,_).
 ángulo(X,Y):-flower(X,_,Y),name(Y,_,Z).
 ángulo(X,Y):-flower(X,_,Y),name(Y,_,Z),price(Z).
 ángulo(X,Y):-flower(X,_,Y),name(Y,_,Z),age(Z).
 ángulo(X,Y):-flower(X,_,Y),name(Y,_,Z),city(Z).
 ángulo(X,Y):-flower(X,_,Y),name(Y

unique_rules: 
['Result: flower_name(X,Z):-flower(X,_,Y),surname(Y,Z),not flower(X,laptop,_).', 'ángulo(X,Y):-flower(X,_,Y),name(Y,_,Z).', 'ángulo(X,Y):-flower(X,_,Y),name(Y,_,Z),price(Z).', 'ángulo(X,Y):-flower(X,_,Y),name(Y,_,Z),age(Z).', 'ángulo(X,Y):-flower(X,_,Y),name(Y,_,Z),city(Z).', 'ángulo(X,Y):-flower(X,_,Y),name(Y.']

parsed: 
Result: flower_name(X,Z):-flower(X,_,Y),surname(Y,Z),not flower(X,laptop,_).

jaccard: 0.0


667
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "surname" as the transitive closure of predicate "delhi". Then, assign exactly one label from the set laptop,cloud,flower,roof,storm,desk to each element in "surname".

answer from file: 
surname(X,Y):-delhi(X,Y).
surname(X,Y):-delhi(X,Z),surname(Z,Y).
assign(X,"laptop")|assign(X,"cloud")|assign(X,"flower")|assign(X,"roof")|assign(X,"storm")|assign(X,"desk"):-surname(X,_).

facts: 
delhi(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "surname" as the transitive closure of predicate "delhi". Then, assign exactly one label from the set laptop,cloud,flower,roof,storm,desk to each element in "surname".
Answer: surname(X,Y):-delhi(X,Y).
surname(X,Y):-delhi(X,Z),surname(Z,Y).
assign(X,"laptop")|assign(X,"cloud")|assign(X,"flower")|assign(X,"roof")|assign(X,"storm")|assign(X,"desk"):-surname(X,_).
retum(X,Y):-assign(X,Y).
retum(X,Y):-assign(X,Z),retum(Z,Y).
retum(X,Y):-assign(X,Z),retum(Z,Y).
retum(X,Y):-assign(X,Z),retum(

unique_rules: 
['surname(X,Y):-delhi(X,Y).', 'surname(X,Y):-delhi(X,Z),surname(Z,Y).', 'assign(X,"laptop")|assign(X,"cloud")|assign(X,"flower")|assign(X,"roof")|assign(X,"storm")|assign(X,"desk"):-surname(X,_).', 'retum(X,Y):-assign(X,Y).', 'retum(X,Y):-assign(X,Z),retum(Z,Y).', 'retum(X,Y):-assign(X,Z),retum(.']

parsed: 
surname(X,Y):-delhi(X,Y).
surname(X,Y):-delhi(X,Z),surname(Z,Y).
assign(X,"laptop")|assign(X,"cloud")|assign(X,"flower")|assign(X,"roof")|assign(X,"storm")|assign(X,"desk"):-surname(X,_).

jaccard: 1.0


668
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate weight. The labels are wall,flower,cloud,butterfly,storm,desk,roof,chair. Consider only the predicate weight not associated with label "butterfly".

answer from file: 
assign(X,"wall")|assign(X,"flower")|assign(X,"cloud")|assign(X,"butterfly")|assign(X,"storm")|assign(X,"desk")|assign(X,"roof")|assign(X,"chair"):-weight(X, _), not weight(X, butterfly).

facts: 
weight(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate weight. The labels are wall,flower,cloud,butterfly,storm,desk,roof,chair. Consider only the predicate weight not associated with label "butterfly".
Answer: assign(X,"wall")|assign(X,"flower")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"shape")|assign(X,"description")|assign(X,"city")|assign(X,"name")|assign(X,"age"):-weight(X, _), not weight(X, butterfly).
```
assign(X,"description") : weight(X, _), not weight(X, butterfly).
```
The predicate "description" has label "description", but not "name".
The labels are city,description,age,shape,price,author,height,name,creator,description,age,city,name,

unique_rules: 
['assign(X,"wall")|assign(X,"flower")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"shape")|assign(X,"description")|assign(X,"city")|assign(X,"name")|assign(X,"age"):-weight(X, _), not weight(X, butterfly).']

parsed: 
assign(X,"wall")|assign(X,"flower")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"shape")|assign(X,"description")|assign(X,"city")|assign(X,"name")|assign(X,"age"):-weight(X, _), not weight(X, butterfly).

jaccard: 0.0


669
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate chair and labels strength, hair having label hair different than 28. The labels are wall,laptop,chair,flower,butterfly,desk.

answer from file: 
assign(X,"wall")|assign(X,"laptop")|assign(X,"chair")|assign(X,"flower")|assign(X,"butterfly")|assign(X,"desk"):-chair(X, Y), Y!=28 .

facts: 
chair(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate chair and labels strength, hair having label hair different than 28. The labels are wall,laptop,chair,flower,butterfly,desk.
Answer: assign(X,"wall")|assign(X,"laptop")|assign(X,"chair")|assign(X,"flower")|assign(X," arrivant")|assign(X,"desk"):-chair(X, Y), Y!=28 .
```
Assign(X,"wall")|Assign(X," arrivant")|Assign(X,"desk"):-chair(X, Y), Y==28 .
```

unique_rules: 
['assign(X,"wall")|assign(X,"laptop")|assign(X,"chair")|assign(X,"flower")|assign(X," arrivant")|assign(X,"desk"):-chair(X, Y), Y!=28 .', 'Assign(X,"wall")|Assign(X," arrivant")|Assign(X,"desk"):-chair(X, Y), Y==28 .']

parsed: 
assign(X,"wall")|assign(X,"laptop")|assign(X,"chair")|assign(X,"flower")|assign(X," arrivant")|assign(X,"desk"):-chair(X, Y), Y!=28 .

jaccard: 1.0


670
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate darkmagenta. The labels are wall,cloud,butterfly,chair.  Then, filter and return only the elements assigned to label chair.".

answer from file: 
assign(X,"wall")|assign(X,"cloud")|assign(X,"butterfly")|assign(X,"chair"):-darkmagenta(X).
select(X):-assign(X, "chair").

facts: 
darkmagenta(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate darkmagenta. The labels are wall,cloud,butterfly,chair.  Then, filter and return only the elements assigned to label chair.".
Answer: assign(X,"wall")|assign(X,"cloud")|assign(X," felicità")|assign(X,"chair"):-darkmagenta(X).
select(X):-assign(X, "chair").
```
Assign(X," felicità")
select(X):-assign(X, " felicità").
assign(X,"car")
select(X):-assign(X, "car").
retum(X):-assign(X, " felicità").
retum(X):-assign(X, "car").
retum(X):-assign(X, " felicità").
retum(X):-assign(X, " felicità").
retum(X):-assign(X, " felicità").
retum

unique_rules: 
['assign(X,"wall")|assign(X,"cloud")|assign(X," felicità")|assign(X,"chair"):-darkmagenta(X).', 'select(X):-assign(X, "chair").', 'select(X):-assign(X, " felicità").', 'select(X):-assign(X, "car").', 'retum(X):-assign(X, " felicità").', 'retum(X):-assign(X, "car").']

parsed: 
assign(X,"wall")|assign(X,"cloud")|assign(X," felicità")|assign(X,"chair"):-darkmagenta(X).
select(X):-assign(X, "chair").

jaccard: 0.0


671
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "moscow" and "barcelona". However, avoid any combination where predicate "moscow" has label "flower".

answer from file: 
combination(X,Y):-moscow(X, _),barcelona(Y), not moscow(X, flower).

facts: 
moscow(1..4, 1..4).barcelona(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "moscow" and "barcelona". However, avoid any combination where predicate "moscow" has label "flower".
Answer: combination(X,Y):-moscow(X, _),barcelona(Y), not moscow(X, flower).
combination(X,Y):-moscow(X, _),barcelona(Y).
combination(X,Y):-moscow(X, _),barcelona(Y), label(X, "age").
assign(X, Y)
retum(X, Y).
retum(X, Y), label(X, "age").
retum(X, Y), label(X, "name").
retum(X, Y), label(X, "price").
retum(X, Y), label(X, "description").
retum(X, Y), label(

unique_rules: 
['combination(X,Y):-moscow(X, _),barcelona(Y), not moscow(X, flower).', 'combination(X,Y):-moscow(X, _),barcelona(Y).', 'combination(X,Y):-moscow(X, _),barcelona(Y), label(X, "age").']

parsed: 
combination(X,Y):-moscow(X, _),barcelona(Y), not moscow(X, flower).

jaccard: 1.0


672
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "darkmagenta" having fields "ID","hair","cairoID", and the predicate "cairo" having fields "ID","quality". Define a predicate "darkmagenta_cairo" that associates to each "darkmagenta" the "quality" of "cairo" only where "quality" is different than 86.

answer from file: 
darkmagenta_cairo(X,Z):-darkmagenta(X,_,Y),cairo(Y,Z), Z!=86.

facts: 
darkmagenta("ID","hair","cairoID").cairo("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "darkmagenta" having fields "ID","hair","cairoID", and the predicate "cairo" having fields "ID","quality". Define a predicate "darkmagenta_cairo" that associates to each "darkmagenta" the "quality" of "cairo" only where "quality" is different than 86.
Answer: darkmagenta_cairo(X,Z):-darkmagenta(X,_,Y),cairo(Y,Z), Z!=86.
darkmagenta_cairo(X,_,Y):-darkmagenta(X,_,Y),cairo(Y,Z), Z==86.

unique_rules: 
['darkmagenta_cairo(X,Z):-darkmagenta(X,_,Y),cairo(Y,Z), Z!=86.', 'darkmagenta_cairo(X,_,Y):-darkmagenta(X,_,Y),cairo(Y,Z), Z==86.']

parsed: 
darkmagenta_cairo(X,Z):-darkmagenta(X,_,Y),cairo(Y,Z), Z!=86.

jaccard: 1.0


673
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "lake" having fields "ID","weight","cloudID", and the predicate "cloud" having fields "ID","lake". Define a predicate "lake_cloud" that associates to each "lake", not associated with label "flower", the attribute "lake" of "cloud".

answer from file: 
lake_cloud(X,Z):-lake(X,_,Y),cloud(Y,Z),not lake(X,flower,_).

facts: 
lake("ID","weight","cloudID").cloud("ID","lake").

generated: 
Write an ASP program for the following problem. Consider predicate "lake" having fields "ID","weight","cloudID", and the predicate "cloud" having fields "ID","lake". Define a predicate "lake_cloud" that associates to each "lake", not associated with label "flower", the attribute "lake" of "cloud".
Result: lake_cloud(X,Z):-lake(X,_,Y),cloud(Y,Z),not lake(X,flower,_).
lake_cloud(X,Z):-lake(X,_,Y),cloud(Y,Z),label(X,flower).
assign(X,lake_cloud(X,Z)).
retum(X,Z).
 espressione(X,Z):-lake(X,_,Y),cloud(Y,Z),not label(X,age).
assign(X, espressione(X,Z)).
retum(X,Z).
 quíntu(X,Z):-lake(X,_,Y),cloud(Y,Z),label(X,

unique_rules: 
['Result: lake_cloud(X,Z):-lake(X,_,Y),cloud(Y,Z),not lake(X,flower,_).', 'lake_cloud(X,Z):-lake(X,_,Y),cloud(Y,Z),label(X,flower).', 'espressione(X,Z):-lake(X,_,Y),cloud(Y,Z),not label(X,age).', 'quíntu(X,Z):-lake(X,_,Y),cloud(Y,Z),label(X,.']

parsed: 
Result: lake_cloud(X,Z):-lake(X,_,Y),cloud(Y,Z),not lake(X,flower,_).

jaccard: 0.0


674
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "roof" as the transitive closure of predicate "storm". Then, assign exactly one label from the set flower,desk,wall to each element in "roof".

answer from file: 
roof(X,Y):-storm(X,Y).
roof(X,Y):-storm(X,Z),roof(Z,Y).
assign(X,"flower")|assign(X,"desk")|assign(X,"wall"):-roof(X,_).

facts: 
storm(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "roof" as the transitive closure of predicate "storm". Then, assign exactly one label from the set flower,desk,wall to each element in "roof".
Answer: roof(X,Y):-storm(X,Y).
roof(X,Y):-storm(X,Z),roof(Z,Y).
assign(X,"flower")|assign(X,"desk")|assign(X,"wall"):-roof(X,_).
retum(X,Y):-roof(X,Y).
retum(X,Y):-roof(X,Z),retum(Z,Y).
retum(X,Y):-roof(X,Z),retum(Z,Y).
retum(X,Y):-roof(X,Z),retum(Z,Y),creator(X,Y).
creator(X,Y):- felicità(X,Y).

unique_rules: 
['roof(X,Y):-storm(X,Y).', 'roof(X,Y):-storm(X,Z),roof(Z,Y).', 'assign(X,"flower")|assign(X,"desk")|assign(X,"wall"):-roof(X,_).', 'retum(X,Y):-roof(X,Y).', 'retum(X,Y):-roof(X,Z),retum(Z,Y).', 'retum(X,Y):-roof(X,Z),retum(Z,Y),creator(X,Y).', 'creator(X,Y):- felicità(X,Y).']

parsed: 
roof(X,Y):-storm(X,Y).
roof(X,Y):-storm(X,Z),roof(Z,Y).
assign(X,"flower")|assign(X,"desk")|assign(X,"wall"):-roof(X,_).

jaccard: 1.0


675
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate moscow. The labels are cloud,butterfly,flower. Consider only the predicate moscow not associated with label "laptop".

answer from file: 
assign(X,"cloud")|assign(X,"butterfly")|assign(X,"flower"):-moscow(X, _), not moscow(X, laptop).

facts: 
moscow(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate moscow. The labels are cloud,butterfly,flower. Consider only the predicate moscow not associated with label "laptop".
Answer: assign(X,"cloud")|assign(X," arrivant")|assign(X,"flower"):-moscow(X, _), not moscow(X, laptop).
``` italienne
assign(X,"cloud")|assign(X," arrivant")|assign(X,"flower"):-moscow(X, _), not moscow(X, laptop).
```

unique_rules: 
['assign(X,"cloud")|assign(X," arrivant")|assign(X,"flower"):-moscow(X, _), not moscow(X, laptop).']

parsed: 
assign(X,"cloud")|assign(X," arrivant")|assign(X,"flower"):-moscow(X, _), not moscow(X, laptop).

jaccard: 1.0


676
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate owner and labels owner, lake having label lake different than 25. The labels are roof,butterfly,laptop,chair,wall.

answer from file: 
assign(X,"roof")|assign(X,"butterfly")|assign(X,"laptop")|assign(X,"chair")|assign(X,"wall"):-owner(X, Y), Y!=25 .

facts: 
owner(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate owner and labels owner, lake having label lake different than 25. The labels are roof,butterfly,laptop,chair,wall.
Answer: assign(X," felicità")|assign(X,"author")|assign(X,"city")|assign(X,"description")|assign(X,"name")|assign(X,"price")|assign(X,"age")|assign(X,"shape")|assign(X,"height")  retum(Y,Z), Y!=25 .
 köp(X,Y), Y!=25 .
 köp(X,Y), Y==25 .
 köp(X,Y), Y<25 .
 köp(X,Y), Y==25 .
 köp(X,Y), Y<25 .
 köp(X,Y), Y==25 .


unique_rules: 
[]

parsed: 


jaccard: 0.0


677
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate mumbai. The labels are flower,wall,storm,laptop,cloud,roof,desk,chair,butterfly.  Then, filter and return only the elements assigned to label roof.".

answer from file: 
assign(X,"flower")|assign(X,"wall")|assign(X,"storm")|assign(X,"laptop")|assign(X,"cloud")|assign(X,"roof")|assign(X,"desk")|assign(X,"chair")|assign(X,"butterfly"):-mumbai(X).
select(X):-assign(X, "roof").

facts: 
mumbai(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate mumbai. The labels are flower,wall,storm,laptop,cloud,roof,desk,chair,butterfly.  Then, filter and return only the elements assigned to label roof.".
Answer: assign(X,"flower")|assign(X,"wall")|assign(X,"storm")|assign(X,"laptop")|assign(X,"cloud")|assign(X,"roof")|assign(X,"desk")|assign(X,"chair")|assign(X," arrivant")==>moto.
select(X):-assign(X, "roof").
```
The predicate moto has label "height", and the predicate select has label "height". So, the predicate select only the elements assigned to label "height".
Note: The predicate moto has label "height", but the predicate select has label "height". So, the predicate select only the elements assigned to label "height".
The

unique_rules: 
['select(X):-assign(X, "roof").']

parsed: 
select(X):-assign(X, "roof").

jaccard: 0.0


678
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "storm" and "white". However, avoid any combination where predicate "storm" has label "butterfly".

answer from file: 
combination(X,Y):-storm(X, _),white(Y), not storm(X, butterfly).

facts: 
storm(1..4, 1..4).white(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "storm" and "white". However, avoid any combination where predicate "storm" has label "butterfly".
Answer: combination(X,Y):-storm(X, _),white(Y), not storm(X, butterfly).
combination(X,Y):-storm(X, _),white(Y).
combination(X,Y):-storm(X, _),white(Y), label(X, "color").
assign(X, Y)
retum(X, Y).
retum(X, Y), label(X, "color").
retum(X, Y), label(X, "age").
retum(X, Y), label(X, "height").
retum(X, Y), label(X, "price").
retum(X, Y), label(X, "description

unique_rules: 
['combination(X,Y):-storm(X, _),white(Y), not storm(X, butterfly).', 'combination(X,Y):-storm(X, _),white(Y).', 'combination(X,Y):-storm(X, _),white(Y), label(X, "color").']

parsed: 
combination(X,Y):-storm(X, _),white(Y), not storm(X, butterfly).

jaccard: 1.0


679
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "strength" having fields "ID","weight","pinkID", and the predicate "pink" having fields "ID","quality". Define a predicate "strength_pink" that associates to each "strength" the "quality" of "pink" only where "quality" is different than 27.

answer from file: 
strength_pink(X,Z):-strength(X,_,Y),pink(Y,Z), Z!=27.

facts: 
strength("ID","weight","pinkID").pink("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "strength" having fields "ID","weight","pinkID", and the predicate "pink" having fields "ID","quality". Define a predicate "strength_pink" that associates to each "strength" the "quality" of "pink" only where "quality" is different than 27.
Answer: strength_pink(X,Z):-strength(X,_,Y),pink(Y,Z), Z!=27.
 ángulo(X,Y):-strength(X,_,Y),pink(Y,Z), Z==27.
 ángulo(X,Y):-strength(X,_,Y),pink(Y,Z), Z!=12.
 ángulo(X,Y):-strength(X,_,Y),pink(Y,Z), Z==18.
 ángulo(X,Y):-strength(X,_,Y),pink(Y,Z), Z==21.
 ángulo(X,Y):-strength(X,_,Y),pink(

unique_rules: 
['strength_pink(X,Z):-strength(X,_,Y),pink(Y,Z), Z!=27.', 'ángulo(X,Y):-strength(X,_,Y),pink(Y,Z), Z==27.', 'ángulo(X,Y):-strength(X,_,Y),pink(Y,Z), Z!=12.', 'ángulo(X,Y):-strength(X,_,Y),pink(Y,Z), Z==18.', 'ángulo(X,Y):-strength(X,_,Y),pink(Y,Z), Z==21.', 'ángulo(X,Y):-strength(X,_,Y),pink(.']

parsed: 
strength_pink(X,Z):-strength(X,_,Y),pink(Y,Z), Z!=27.

jaccard: 1.0


680
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "barcelona" having fields "ID","strengthID","quality", and the predicate "strength" having fields "ID","quality". Define a predicate "barcelona_strength" that associates to each "barcelona", not associated with label "laptop", the attribute "quality" of "strength".

answer from file: 
barcelona_strength(X,Z):-barcelona(X,Y,_),strength(Y,Z),not barcelona(X,_,laptop).

facts: 
barcelona("ID","strengthID","quality").strength("ID","quality").

generated: 
Write an ASP program for the following problem. Consider predicate "barcelona" having fields "ID","strengthID","quality", and the predicate "strength" having fields "ID","quality". Define a predicate "barcelona_strength" that associates to each "barcelona", not associated with label "laptop", the attribute "quality" of "strength".
Answer: barcelona_strength(X,Z):-barcelona(X,Y,_),strength(Y,Z),not barcelona(X,_,laptop).
 ángulo_strength(X,Z):-barcelona(X,Y,_), ángulo(Y,Z).
 ángulo_strength(X,Z):-barcelona(X,_,_),creator(X,Z).
 ángulo_strength(X,Z):-shangai(X,Z).
 ángulo_strength(X,Z):-shangai(X,Z),creator(X,Z).
 ángulo_strength(X,Z):-shangai(X,Z),creator(X,Z),age(X,Z).
 ángulo

unique_rules: 
['barcelona_strength(X,Z):-barcelona(X,Y,_),strength(Y,Z),not barcelona(X,_,laptop).', 'ángulo_strength(X,Z):-barcelona(X,Y,_), ángulo(Y,Z).', 'ángulo_strength(X,Z):-barcelona(X,_,_),creator(X,Z).', 'ángulo_strength(X,Z):-shangai(X,Z).', 'ángulo_strength(X,Z):-shangai(X,Z),creator(X,Z).', 'ángulo_strength(X,Z):-shangai(X,Z),creator(X,Z),age(X,Z).']

parsed: 
barcelona_strength(X,Z):-barcelona(X,Y,_),strength(Y,Z),not barcelona(X,_,laptop).

jaccard: 1.0


681
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "cloud" as the transitive closure of predicate "black". Then, assign exactly one label from the set cloud,roof,wall,laptop,butterfly,desk to each element in "cloud".

answer from file: 
cloud(X,Y):-black(X,Y).
cloud(X,Y):-black(X,Z),cloud(Z,Y).
assign(X,"cloud")|assign(X,"roof")|assign(X,"wall")|assign(X,"laptop")|assign(X,"butterfly")|assign(X,"desk"):-cloud(X,_).

facts: 
black(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "cloud" as the transitive closure of predicate "black". Then, assign exactly one label from the set cloud,roof,wall,laptop,butterfly,desk to each element in "cloud".
Answer: cloud(X,Y):-black(X,Y).
cloud(X,Y):-black(X,Z),cloud(Z,Y).
assign(X,"cloud")|assign(X,"roof")|assign(X,"wall")|assign(X,"laptop")|assign(X," arrivant")|assign(X,"description"),
cloud(X,_).
retum_road(X,Y):-cloud(X,Y).
retum_road(X,Y):-cloud(X,Z),retum_road(Z,Y).
retum_road(X,Y):-cloud(X,Z),retum_road(Z,Y).
retum_road(X,

unique_rules: 
['cloud(X,Y):-black(X,Y).', 'cloud(X,Y):-black(X,Z),cloud(Z,Y).', 'retum_road(X,Y):-cloud(X,Y).', 'retum_road(X,Y):-cloud(X,Z),retum_road(Z,Y).']

parsed: 
cloud(X,Y):-black(X,Y).
cloud(X,Y):-black(X,Z),cloud(Z,Y).
retum_road(X,Y):-cloud(X,Y).

jaccard: 0.0


682
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate mumbai. The labels are butterfly,storm,cloud,chair. Consider only the predicate mumbai not associated with label "roof".

answer from file: 
assign(X,"butterfly")|assign(X,"storm")|assign(X,"cloud")|assign(X,"chair"):-mumbai(X, _), not mumbai(X, roof).

facts: 
mumbai(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate mumbai. The labels are butterfly,storm,cloud,chair. Consider only the predicate mumbai not associated with label "roof".
Answer: assign(X," originaux")|assign(X,"description")|assign(X,"city")|assign(X,"name")|assign(X,"shape")| espressione(X), not madrid(X, _), not description(X).
retum(X, Y):-assign(X, Y).
retum(X, Y):-assign(X, _), description(Y).
retum(X, Y):-assign(X, _), shape(Y).
retum(X, Y):-assign(X, _), name(Y).
retum(X, Y):-assign(X, _), shape(Y), description(Y).
retum(X, Y):-assign(X,

unique_rules: 
['retum(X, Y):-assign(X, Y).', 'retum(X, Y):-assign(X, _), description(Y).', 'retum(X, Y):-assign(X, _), shape(Y).', 'retum(X, Y):-assign(X, _), name(Y).', 'retum(X, Y):-assign(X, _), shape(Y), description(Y).', 'retum(X, Y):-assign(X,.']

parsed: 
retum(X, Y):-assign(X, Y).

jaccard: 0.0


683
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate wall and labels weight, hair having label hair different than 66. The labels are storm,roof,wall,laptop,chair,desk,flower.

answer from file: 
assign(X,"storm")|assign(X,"roof")|assign(X,"wall")|assign(X,"laptop")|assign(X,"chair")|assign(X,"desk")|assign(X,"flower"):-wall(X, Y), Y!=66 .

facts: 
wall(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate wall and labels weight, hair having label hair different than 66. The labels are storm,roof,wall,laptop,chair,desk,flower.
Answer: assign(X," peines")|assign(X,"florence")|assign(X,"city")|assign(X,"price")|assign(X,"height")|assign(X,"age")|assign(X,"name")|retum(X, Y), Y!=66 .
 köp(X, Y), Y!=66 .
Assign(X,"name")|assign(X,"price")|assign(X,"age")|retum(X, Y), Y!=66 .
 köp(X, Y), Y!=66 .
Return.
 köp(X, Y), Y!=66 .
Assign(X,"name")|assign(X,"price")

unique_rules: 
[]

parsed: 


jaccard: 0.0


684
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are cloud,chair,butterfly,roof,storm.  Then, filter and return only the elements assigned to label storm.".

answer from file: 
assign(X,"cloud")|assign(X,"chair")|assign(X,"butterfly")|assign(X,"roof")|assign(X,"storm"):-lake(X).
select(X):-assign(X, "storm").

facts: 
lake(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are cloud,chair,butterfly,roof,storm.  Then, filter and return only the elements assigned to label storm.".
Answer: assign(X,"cloud")|assign(X,"chair")|assign(X," arrivant")|assign(X,"rome")|assign(X,"shape")|assign(X,"city")
retum(X):-assign(X, "shape").
retum(X):-assign(X, "city").
retum(X):-assign(X, "shape").
retum(X):-assign(X, "city").
retum(X):-assign(X, "shape").
retum(X):-assign(X, "city").
retum(X):-assign(X, "shape").
retum(X):-assign(X, "city").
retum(X):-assign(X, "

unique_rules: 
['retum(X):-assign(X, "shape").', 'retum(X):-assign(X, "city").', 'retum(X):-assign(X, ".']

parsed: 
retum(X):-assign(X, "shape").
retum(X):-assign(X, "city").

jaccard: 0.0


685
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "lake" and "butterfly". However, avoid any combination where predicate "lake" has label "roof".

answer from file: 
combination(X,Y):-lake(X, _),butterfly(Y), not lake(X, roof).

facts: 
lake(1..4, 1..4).butterfly(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "lake" and "butterfly". However, avoid any combination where predicate "lake" has label "roof".
Answer: combination(X,Y):-lake(X, _),butterfly(Y), not lake(X, roof).
combination(X,Y):-lake(X, _),description(Y).
combination(X,Y):-lake(X, _),city(Y).
combination(X,Y):-lake(X, _),age(Y).
combination(X,Y):-description(X),city(Y).
combination(X,Y):-description(X),age(Y), city(Y).
retum(X,Y):-combination(X,Y).
retum(X,Y):-description(X),age(Y), city(Y).
retum(X,Y):-

unique_rules: 
['combination(X,Y):-lake(X, _),butterfly(Y), not lake(X, roof).', 'combination(X,Y):-lake(X, _),description(Y).', 'combination(X,Y):-lake(X, _),city(Y).', 'combination(X,Y):-lake(X, _),age(Y).', 'combination(X,Y):-description(X),city(Y).', 'combination(X,Y):-description(X),age(Y), city(Y).', 'retum(X,Y):-combination(X,Y).', 'retum(X,Y):-description(X),age(Y), city(Y).', 'retum(X,Y):-.']

parsed: 
combination(X,Y):-lake(X, _),butterfly(Y), not lake(X, roof).

jaccard: 1.0


686
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "roof" having fields "ID","lake","lakeID", and the predicate "lake" having fields "ID","strength". Define a predicate "roof_lake" that associates to each "roof" the "strength" of "lake" only where "strength" is different than 20.

answer from file: 
roof_lake(X,Z):-roof(X,_,Y),lake(Y,Z), Z!=20.

facts: 
roof("ID","lake","lakeID").lake("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "roof" having fields "ID","lake","lakeID", and the predicate "lake" having fields "ID","strength". Define a predicate "roof_lake" that associates to each "roof" the "strength" of "lake" only where "strength" is different than 20.
Answer: roof_lake(X,Z):-roof(X,_,Y),lake(Y,Z), Z!=20.
 ángulo(X,Y):-roof(X,_,Y),lake(Y,Z), Z==20.
 ángulo(X,Y):-roof(X,_,Y),lake(Y,Z), Z!=18.
 ángulo(X,Y):-roof(X,_,Y),lake(Y,Z), Z==19.
 ángulo(X,Y):-roof(X,_,Y),lake(Y,Z), Z==17.
 ángulo(X,Y):-roof(X,_,Y),lake(

unique_rules: 
['roof_lake(X,Z):-roof(X,_,Y),lake(Y,Z), Z!=20.', 'ángulo(X,Y):-roof(X,_,Y),lake(Y,Z), Z==20.', 'ángulo(X,Y):-roof(X,_,Y),lake(Y,Z), Z!=18.', 'ángulo(X,Y):-roof(X,_,Y),lake(Y,Z), Z==19.', 'ángulo(X,Y):-roof(X,_,Y),lake(Y,Z), Z==17.', 'ángulo(X,Y):-roof(X,_,Y),lake(.']

parsed: 
roof_lake(X,Z):-roof(X,_,Y),lake(Y,Z), Z!=20.

jaccard: 1.0


687
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "barcelona" having fields "ID","strengthID","quality", and the predicate "strength" having fields "ID","hair". Define a predicate "barcelona_strength" that associates to each "barcelona", not associated with label "chair", the attribute "hair" of "strength".

answer from file: 
barcelona_strength(X,Z):-barcelona(X,Y,_),strength(Y,Z),not barcelona(X,_,chair).

facts: 
barcelona("ID","strengthID","quality").strength("ID","hair").

generated: 
Write an ASP program for the following problem. Consider predicate "barcelona" having fields "ID","strengthID","quality", and the predicate "strength" having fields "ID","hair". Define a predicate "barcelona_strength" that associates to each "barcelona", not associated with label "chair", the attribute "hair" of "strength".
Answer: barcelona_strength(X,Z):-barcelona(X,Y,_),strength(Y,Z),not barcelona(X,_,chair).
 ángulo_strength(X,Z):-barcelona(X,Y,_), ángulo(Y,Z).
 ángulo_strength(X,Z):-shangai(X,Z).
 ángulo_strength(X,Z):-shangai(X,Z),price(X,_,Z).
 ángulo_strength(X,Z):-shangai(X,Z),city(X,_,Z).
 ángulo_strength(X,Z):-shangai(X,Z),description(X,_,Z).
 ángulo_strength

unique_rules: 
['barcelona_strength(X,Z):-barcelona(X,Y,_),strength(Y,Z),not barcelona(X,_,chair).', 'ángulo_strength(X,Z):-barcelona(X,Y,_), ángulo(Y,Z).', 'ángulo_strength(X,Z):-shangai(X,Z).', 'ángulo_strength(X,Z):-shangai(X,Z),price(X,_,Z).', 'ángulo_strength(X,Z):-shangai(X,Z),city(X,_,Z).', 'ángulo_strength(X,Z):-shangai(X,Z),description(X,_,Z).']

parsed: 
barcelona_strength(X,Z):-barcelona(X,Y,_),strength(Y,Z),not barcelona(X,_,chair).

jaccard: 1.0


688
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "chicago" as the transitive closure of predicate "darkmagenta". Then, assign exactly one label from the set flower,chair,storm,wall,butterfly to each element in "chicago".

answer from file: 
chicago(X,Y):-darkmagenta(X,Y).
chicago(X,Y):-darkmagenta(X,Z),chicago(Z,Y).
assign(X,"flower")|assign(X,"chair")|assign(X,"storm")|assign(X,"wall")|assign(X,"butterfly"):-chicago(X,_).

facts: 
darkmagenta(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "chicago" as the transitive closure of predicate "darkmagenta". Then, assign exactly one label from the set flower,chair,storm,wall,butterfly to each element in "chicago".
Answer: chicago(X,Y):-darkmagenta(X,Y).
chicago(X,Y):-darkmagenta(X,Z),chicago(Z,Y).
assign(X,"flower")|assign(X,"chair")|assign(X,"storm")|assign(X,"wall")|assign(X," arrivant") :-chicago(X,_).
retum(X,Y):-chicago(X,Y).
retum(X,Y):-chicago(X,Z),retum(Z,Y).
retum(X,Y):-chicago(X,Z),retum(Z,Y).
retum(X,Y):-chicago(X,Z),retum(Z,Y).
retum

unique_rules: 
['chicago(X,Y):-darkmagenta(X,Y).', 'chicago(X,Y):-darkmagenta(X,Z),chicago(Z,Y).', 'assign(X,"flower")|assign(X,"chair")|assign(X,"storm")|assign(X,"wall")|assign(X," arrivant") :-chicago(X,_).', 'retum(X,Y):-chicago(X,Y).', 'retum(X,Y):-chicago(X,Z),retum(Z,Y).']

parsed: 
chicago(X,Y):-darkmagenta(X,Y).
chicago(X,Y):-darkmagenta(X,Z),chicago(Z,Y).
assign(X,"flower")|assign(X,"chair")|assign(X,"storm")|assign(X,"wall")|assign(X," arrivant") :-chicago(X,_).

jaccard: 0.0


689
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate darkmagenta. The labels are butterfly,storm,chair,roof,flower,laptop,cloud. Consider only the predicate darkmagenta not associated with label "wall".

answer from file: 
assign(X,"butterfly")|assign(X,"storm")|assign(X,"chair")|assign(X,"roof")|assign(X,"flower")|assign(X,"laptop")|assign(X,"cloud"):-darkmagenta(X, _), not darkmagenta(X, wall).

facts: 
darkmagenta(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate darkmagenta. The labels are butterfly,storm,chair,roof,flower,laptop,cloud. Consider only the predicate darkmagenta not associated with label "wall".
Answer: assign(X," épar")|assign(X,"florence")|assign(X,"height")|assign(X,"price")|assign(X,"author")|assign(X,"city")|assign(X,"description")|assign(X,"name")|assign(X,"shape")|assign(X,"age") : darkMagenta(X, _), not darkMagenta(X, wall).
```
assign(X," épar")|assign(X,"florence")|assign(X,"height")|assign(X,"price")|assign(X,"author")|assign(X,"city")|assign(X,"description")|assign(X,"name")|assign

unique_rules: 
[]

parsed: 


jaccard: 0.0


690
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate lake and labels owner, quality having label quality different than 2. The labels are flower,cloud,butterfly,wall,desk,chair,storm.

answer from file: 
assign(X,"flower")|assign(X,"cloud")|assign(X,"butterfly")|assign(X,"wall")|assign(X,"desk")|assign(X,"chair")|assign(X,"storm"):-lake(X, Y), Y!=2 .

facts: 
lake(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate lake and labels owner, quality having label quality different than 2. The labels are flower,cloud,butterfly,wall,desk,chair,storm.
Answer: assign(X,"flower")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"wall")|assign(X,"desk")|assign(X,"chair")|assign(X,"storm"):-lake(X, Y), Y!=2 .
Assign(X,"florence")|Assign(X,"height")|Assign(X,"price")|Assign(X,"age")|Assign(X,"city")|Assign(X,"description"):-florence(X).
Result: assign(X, "description")|assign(X, "age")|assign(X, "city")|assign(X, "description"):-assign(X,

unique_rules: 
['assign(X,"flower")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"wall")|assign(X,"desk")|assign(X,"chair")|assign(X,"storm"):-lake(X, Y), Y!=2 .', 'Assign(X,"florence")|Assign(X,"height")|Assign(X,"price")|Assign(X,"age")|Assign(X,"city")|Assign(X,"description"):-florence(X).', 'Result: assign(X, "description")|assign(X, "age")|assign(X, "city")|assign(X, "description"):-assign(X,.']

parsed: 
assign(X,"flower")|assign(X,"cloud")|assign(X," arrivant")|assign(X,"wall")|assign(X,"desk")|assign(X,"chair")|assign(X,"storm"):-lake(X, Y), Y!=2 .

jaccard: 1.0


691
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lightblue. The labels are roof,butterfly.  Then, filter and return only the elements assigned to label roof.".

answer from file: 
assign(X,"roof")|assign(X,"butterfly"):-lightblue(X).
select(X):-assign(X, "roof").

facts: 
lightblue(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lightblue. The labels are roof,butterfly.  Then, filter and return only the elements assigned to label roof.".
Answer: assign(X," felicità")|assign(X,"creator")|assign(X,"city")|assign(X,"price")|assign(X,"age")|retum(X, " felicità").
select(X):-assign(X, " felicità").
retum(X, " felicità").
 köp: for(X in lightblue) do assign(X, " felicità").
 köp.
retum(X, " felicità").
select(X).
retum(X, " felicità").
 quíntu(X, " felicità").
 quíntu(X, "creator").
 quíntu(X, "city").
 quíntu(X, "price").
 quíntu(X, "

unique_rules: 
['select(X):-assign(X, " felicità").']

parsed: 
select(X):-assign(X, " felicità").

jaccard: 0.0


692
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "darkmagenta" and "pink". However, avoid any combination where predicate "darkmagenta" has label "roof".

answer from file: 
combination(X,Y):-darkmagenta(X, _),pink(Y), not darkmagenta(X, roof).

facts: 
darkmagenta(1..4, 1..4).pink(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "darkmagenta" and "pink". However, avoid any combination where predicate "darkmagenta" has label "roof".
Answer: combination(X,Y):-darkmagenta(X, _),pink(Y), not darkmagenta(X, roof).
combination(X,Y):-darkmagenta(X, _),pink(Y).
combination(X,Y):-darkmagenta(X, _),pink(Y), label("object").
assign(X, Y)
combination(X, Y).
retum.
assign(X, Y)
combination(X, Y).
retum.
assign(X, Y)
combination(X, Y).
retum.
assign(X, Y)
combination(X, Y).
retum.
assign(X, Y)
combination(X, Y).

unique_rules: 
['combination(X,Y):-darkmagenta(X, _),pink(Y), not darkmagenta(X, roof).', 'combination(X,Y):-darkmagenta(X, _),pink(Y).', 'combination(X,Y):-darkmagenta(X, _),pink(Y), label("object").']

parsed: 
combination(X,Y):-darkmagenta(X, _),pink(Y), not darkmagenta(X, roof).

jaccard: 1.0


693
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "lightblue" having fields "ID","wallID","owner", and the predicate "wall" having fields "ID","surname". Define a predicate "lightblue_wall" that associates to each "lightblue" the "surname" of "wall" only where "surname" is different than 87.

answer from file: 
lightblue_wall(X,Z):-lightblue(X,Y,_),wall(Y,Z), Z!=87.

facts: 
lightblue("ID","wallID","owner").wall("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "lightblue" having fields "ID","wallID","owner", and the predicate "wall" having fields "ID","surname". Define a predicate "lightblue_wall" that associates to each "lightblue" the "surname" of "wall" only where "surname" is different than 87.
Answer: lightblue_wall(X,Z):-lightblue(X,Y,_),wall(Y,Z), Z!=87.
lightblue_wall(X,Y,_):-lightblue(X,Y,_),wall(Y,Z), Z==87.
assign(X,"name")|assign(X,"description")|assign(X,"price"):-lightblue_wall(X,_,_).
retum(X,Y),Z!=87.
retum(X,_,87).
 quíname(X,Z), Z!=87.
 quíname(X,Z), Z==87.
 quíname(X,_,_).


unique_rules: 
['lightblue_wall(X,Z):-lightblue(X,Y,_),wall(Y,Z), Z!=87.', 'lightblue_wall(X,Y,_):-lightblue(X,Y,_),wall(Y,Z), Z==87.', 'assign(X,"name")|assign(X,"description")|assign(X,"price"):-lightblue_wall(X,_,_).']

parsed: 
lightblue_wall(X,Z):-lightblue(X,Y,_),wall(Y,Z), Z!=87.

jaccard: 1.0


694
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "chicago" having fields "ID","cosenzaID","quality", and the predicate "cosenza" having fields "ID","owner". Define a predicate "chicago_cosenza" that associates to each "chicago", not associated with label "butterfly", the attribute "owner" of "cosenza".

answer from file: 
chicago_cosenza(X,Z):-chicago(X,Y,_),cosenza(Y,Z),not chicago(X,_,butterfly).

facts: 
chicago("ID","cosenzaID","quality").cosenza("ID","owner").

generated: 
Write an ASP program for the following problem. Consider predicate "chicago" having fields "ID","cosenzaID","quality", and the predicate "cosenza" having fields "ID","owner". Define a predicate "chicago_cosenza" that associates to each "chicago", not associated with label "butterfly", the attribute "owner" of "cosenza".
Result: chicago_cosenza(X,Z):-chicago(X,Y,_),cosenza(Y,Z),not chicago(X,_,butterfly).
 ángulo(X,Y,Z):-chicago(X,Y,_),cosenza(Y,Z),not chicago(X,_,creator).
 ángulo(X,Y,Z):-chicago(X,Y,creator),creator(Y,Z),not chicago(X,_,name).
 ángulo(X,Y,Z):-chicago(X,Y,creator),creator(Y,Z),name(X,_,creator).
 ángulo(X,Y,Z):-chicago(X,Y,creator),creator(Y

unique_rules: 
['Result: chicago_cosenza(X,Z):-chicago(X,Y,_),cosenza(Y,Z),not chicago(X,_,butterfly).', 'ángulo(X,Y,Z):-chicago(X,Y,_),cosenza(Y,Z),not chicago(X,_,creator).', 'ángulo(X,Y,Z):-chicago(X,Y,creator),creator(Y,Z),not chicago(X,_,name).', 'ángulo(X,Y,Z):-chicago(X,Y,creator),creator(Y,Z),name(X,_,creator).', 'ángulo(X,Y,Z):-chicago(X,Y,creator),creator(Y.']

parsed: 
Result: chicago_cosenza(X,Z):-chicago(X,Y,_),cosenza(Y,Z),not chicago(X,_,butterfly).

jaccard: 0.0


695
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "cloud" as the transitive closure of predicate "weight". Then, assign exactly one label from the set roof,butterfly,storm,laptop,chair,desk,wall to each element in "cloud".

answer from file: 
cloud(X,Y):-weight(X,Y).
cloud(X,Y):-weight(X,Z),cloud(Z,Y).
assign(X,"roof")|assign(X,"butterfly")|assign(X,"storm")|assign(X,"laptop")|assign(X,"chair")|assign(X,"desk")|assign(X,"wall"):-cloud(X,_).

facts: 
weight(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "cloud" as the transitive closure of predicate "weight". Then, assign exactly one label from the set roof,butterfly,storm,laptop,chair,desk,wall to each element in "cloud".
Answer: cloud(X,Y):-weight(X,Y).
cloud(X,Y):-weight(X,Z),cloud(Z,Y).
assign(X,"roof")|assign(X," arrivant")|assign(X,"height")|assign(X,"shape")|assign(X,"price")|assign(X,"age")|assign(X,"description")|assign(X,"city"):-cloud(X,_).
retum:assign(X,"description").
retum:assign(X,"city").
retum:assign(X,"description").
retum:assign(X,"price").
retum:assign(X,"age").
retum:assign(X,"description").

unique_rules: 
['cloud(X,Y):-weight(X,Y).', 'cloud(X,Y):-weight(X,Z),cloud(Z,Y).', 'assign(X,"roof")|assign(X," arrivant")|assign(X,"height")|assign(X,"shape")|assign(X,"price")|assign(X,"age")|assign(X,"description")|assign(X,"city"):-cloud(X,_).']

parsed: 
cloud(X,Y):-weight(X,Y).
cloud(X,Y):-weight(X,Z),cloud(Z,Y).
assign(X,"roof")|assign(X," arrivant")|assign(X,"height")|assign(X,"shape")|assign(X,"price")|assign(X,"age")|assign(X,"description")|assign(X,"city"):-cloud(X,_).

jaccard: 0.0


696
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are butterfly,roof,wall,cloud. Consider only the predicate lake not associated with label "butterfly".

answer from file: 
assign(X,"butterfly")|assign(X,"roof")|assign(X,"wall")|assign(X,"cloud"):-lake(X, _), not lake(X, butterfly).

facts: 
lake(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate lake. The labels are butterfly,roof,wall,cloud. Consider only the predicate lake not associated with label "butterfly".
Answer: assign(X," plais")|assign(X,"rome")|assign(X,"city")|assign(X,"height")|assign(X,"description")==>lake(X, _), not lake(X, butterfly).
retum(X, Y):-assign(X, Y).
retum(X, Y):-assign(X, _), not lake(X, Y).
assign(X, "description") :-retum(X, _).
assign(X, "height") :-retum(X, _).
assign(X, "description") :-retum(X, _).
assign(X, "rome") :-retum(X, _).
assign(X, "

unique_rules: 
['retum(X, Y):-assign(X, Y).', 'retum(X, Y):-assign(X, _), not lake(X, Y).', 'assign(X, "description") :-retum(X, _).', 'assign(X, "height") :-retum(X, _).', 'assign(X, "rome") :-retum(X, _).']

parsed: 
retum(X, Y):-assign(X, Y).

jaccard: 0.0


697
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate pink and labels lake, hair having label hair different than 23. The labels are laptop,storm,chair,desk,flower,cloud,butterfly,roof.

answer from file: 
assign(X,"laptop")|assign(X,"storm")|assign(X,"chair")|assign(X,"desk")|assign(X,"flower")|assign(X,"cloud")|assign(X,"butterfly")|assign(X,"roof"):-pink(X, Y), Y!=23 .

facts: 
pink(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate pink and labels lake, hair having label hair different than 23. The labels are laptop,storm,chair,desk,flower,cloud,butterfly,roof.
Answer: assign(X," arrivant")|assign(X," peines")|assign(X,"height")|assign(X,"creator")|assign(X,"age")|assign(X,"name")|assign(X,"city")|assign(X,"description")|assign(X,"price")|assign(X,"author")|assign(X,"height")|retum(X, Y), Y!=23 .
 köp(X, Y), Y!=23 .
```
 köp(X, Y), Y!=23 .
assign(X," arrivant")|assign(X," peines")|assign(X,"height")|assign(X,"creator")|assign(X,"

unique_rules: 
[]

parsed: 


jaccard: 0.0


698
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate pink. The labels are chair,cloud,wall,roof,butterfly.  Then, filter and return only the elements assigned to label cloud.".

answer from file: 
assign(X,"chair")|assign(X,"cloud")|assign(X,"wall")|assign(X,"roof")|assign(X,"butterfly"):-pink(X).
select(X):-assign(X, "cloud").

facts: 
pink(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate pink. The labels are chair,cloud,wall,roof,butterfly.  Then, filter and return only the elements assigned to label cloud.".
Answer: assign(X,"chair")|assign(X,"cloud")|assign(X,"wall")|assign(X,"roof")|assign(X," épar").
select(X):-assign(X, "cloud").
retum(X):-assign(X, "cloud").
```
Assign(X,"chair")|Assign(X,"cloud")|Assign(X,"wall")|Assign(X,"roof")|Assign(X," épar"):-pink(X).
select(X):-assign(X, "cloud").
retum(X):-assign(X, "cloud").
```

unique_rules: 
['select(X):-assign(X, "cloud").', 'retum(X):-assign(X, "cloud").', 'Assign(X,"chair")|Assign(X,"cloud")|Assign(X,"wall")|Assign(X,"roof")|Assign(X," épar"):-pink(X).']

parsed: 
select(X):-assign(X, "cloud").
retum(X):-assign(X, "cloud").

jaccard: 0.0


699
combination_constraint

question: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "chair" and "butterfly". However, avoid any combination where predicate "chair" has label "laptop".

answer from file: 
combination(X,Y):-chair(X, _),butterfly(Y), not chair(X, laptop).

facts: 
chair(1..4, 1..4).butterfly(1..5).

generated: 
Write an ASP program for the following problem. Generate all the combinations of elements from two sets. The two sets are represented by predicates "chair" and "butterfly". However, avoid any combination where predicate "chair" has label "laptop".
Answer: combination(X,Y):-chair(X, _),butterfly(Y), not chair(X, laptop).
combination(X,Y):-chair(X, _),moto(Y).
combination(X,Y):-chair(X, _),age(Y).
combination(X,Y):-moto(X), age(Y).
combination(X,Y):-moto(X),description(Y).
combination(X,Y):-moto(X),city(Y).
retum(X,Y):-combination(X, Y).
retum(X,Y):-combination(X, Y),description(Z), not age(Z).
retum(X,Y):-combination(X

unique_rules: 
['combination(X,Y):-chair(X, _),butterfly(Y), not chair(X, laptop).', 'combination(X,Y):-chair(X, _),moto(Y).', 'combination(X,Y):-chair(X, _),age(Y).', 'combination(X,Y):-moto(X), age(Y).', 'combination(X,Y):-moto(X),description(Y).', 'combination(X,Y):-moto(X),city(Y).', 'retum(X,Y):-combination(X, Y).', 'retum(X,Y):-combination(X, Y),description(Z), not age(Z).', 'retum(X,Y):-combination(X.']

parsed: 
combination(X,Y):-chair(X, _),butterfly(Y), not chair(X, laptop).

jaccard: 1.0


700
join_numeric_filtering

question: 
Write an ASP program for the following problem. Consider predicate "cosenza" having fields "ID","mumbaiID","hair", and the predicate "mumbai" having fields "ID","surname". Define a predicate "cosenza_mumbai" that associates to each "cosenza" the "surname" of "mumbai" only where "surname" is different than 69.

answer from file: 
cosenza_mumbai(X,Z):-cosenza(X,Y,_),mumbai(Y,Z), Z!=69.

facts: 
cosenza("ID","mumbaiID","hair").mumbai("ID","1..100").

generated: 
Write an ASP program for the following problem. Consider predicate "cosenza" having fields "ID","mumbaiID","hair", and the predicate "mumbai" having fields "ID","surname". Define a predicate "cosenza_mumbai" that associates to each "cosenza" the "surname" of "mumbai" only where "surname" is different than 69.
Answer: cosenza_mumbai(X,Z):-cosenza(X,Y,_),mumbai(Y,Z), Z!=69.
cosenza_mumbai(X,Y,_):-cosenza(X,_,Z),mumbai(Y,Z), Z==69.
 quíname(X,Y):-cosenza_mumbai(X,Y,_).
 quíname(X,Y):-cosenza(X,_,Y).
 quíname(X,Y):-mumbai(Y,Z), Z!=69.
 quíname(X,Y):-mumbai(Y,Z), Z==69.
 meras(X,Y

unique_rules: 
['cosenza_mumbai(X,Z):-cosenza(X,Y,_),mumbai(Y,Z), Z!=69.', 'cosenza_mumbai(X,Y,_):-cosenza(X,_,Z),mumbai(Y,Z), Z==69.', 'quíname(X,Y):-cosenza_mumbai(X,Y,_).', 'quíname(X,Y):-cosenza(X,_,Y).', 'quíname(X,Y):-mumbai(Y,Z), Z!=69.', 'quíname(X,Y):-mumbai(Y,Z), Z==69.']

parsed: 
cosenza_mumbai(X,Z):-cosenza(X,Y,_),mumbai(Y,Z), Z!=69.

jaccard: 1.0


701
join_filtering

question: 
Write an ASP program for the following problem. Consider predicate "weight" having fields "ID","hairID","lake", and the predicate "hair" having fields "ID","hair". Define a predicate "weight_hair" that associates to each "weight", not associated with label "laptop", the attribute "hair" of "hair".

answer from file: 
weight_hair(X,Z):-weight(X,Y,_),hair(Y,Z),not weight(X,_,laptop).

facts: 
weight("ID","hairID","lake").hair("ID","hair").

generated: 
Write an ASP program for the following problem. Consider predicate "weight" having fields "ID","hairID","lake", and the predicate "hair" having fields "ID","hair". Define a predicate "weight_hair" that associates to each "weight", not associated with label "laptop", the attribute "hair" of "hair".
Answer: weight_hair(X,Z):-weight(X,Y,_),hair(Y,Z),not weight(X,_,laptop).
weight_hair(X,Y,_):-weight(X,_,_),hair(Y,Z).
assign(X,weight_hair(X,_,_))|assign(X,weight(X,Y,_)),not weight(X,_,laptop).
retum.
 meras.
name(X,Y,_),not weight(X,_,laptop).
retum.
name(X,Y,_),weight(X,_,_).
retum.
name(X,Y,_),weight(X,_,_),_,shape(X,

unique_rules: 
['weight_hair(X,Z):-weight(X,Y,_),hair(Y,Z),not weight(X,_,laptop).', 'weight_hair(X,Y,_):-weight(X,_,_),hair(Y,Z).']

parsed: 
weight_hair(X,Z):-weight(X,Y,_),hair(Y,Z),not weight(X,_,laptop).

jaccard: 1.0


702
closure_guessing

question: 
Write an ASP program for the following problem. Define predicate "chicago" as the transitive closure of predicate "surname". Then, assign exactly one label from the set wall,laptop,cloud,desk,chair,roof,storm,flower to each element in "chicago".

answer from file: 
chicago(X,Y):-surname(X,Y).
chicago(X,Y):-surname(X,Z),chicago(Z,Y).
assign(X,"wall")|assign(X,"laptop")|assign(X,"cloud")|assign(X,"desk")|assign(X,"chair")|assign(X,"roof")|assign(X,"storm")|assign(X,"flower"):-chicago(X,_).

facts: 
surname(1..3, 1..4).

generated: 
Write an ASP program for the following problem. Define predicate "chicago" as the transitive closure of predicate "surname". Then, assign exactly one label from the set wall,laptop,cloud,desk,chair,roof,storm,flower to each element in "chicago".
Answer: chicago(X,Y):-surname(X,Y).
chicago(X,Y):-surname(X,Z),chicago(Z,Y).
assign(X,"wall")|assign(X,"laptop")|assign(X,"cloud")|assign(X,"desk")|assign(X,"chair")|assign(X,"roof")|assign(X,"storm")|assign(X,"flower"):-chicago(X,_).
retum:assign(X,"city").
retum:assign(X,"age").
retum:assign(X,"price").
retum:assign(X,"description").
retum:assign(X,"author").
retum:assign(X,"name").

unique_rules: 
['chicago(X,Y):-surname(X,Y).', 'chicago(X,Y):-surname(X,Z),chicago(Z,Y).', 'assign(X,"wall")|assign(X,"laptop")|assign(X,"cloud")|assign(X,"desk")|assign(X,"chair")|assign(X,"roof")|assign(X,"storm")|assign(X,"flower"):-chicago(X,_).']

parsed: 
chicago(X,Y):-surname(X,Y).
chicago(X,Y):-surname(X,Z),chicago(Z,Y).
assign(X,"wall")|assign(X,"laptop")|assign(X,"cloud")|assign(X,"desk")|assign(X,"chair")|assign(X,"roof")|assign(X,"storm")|assign(X,"flower"):-chicago(X,_).

jaccard: 1.0


703
guessing_constraint

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate wall. The labels are flower,chair,wall,cloud,laptop. Consider only the predicate wall not associated with label "storm".

answer from file: 
assign(X,"flower")|assign(X,"chair")|assign(X,"wall")|assign(X,"cloud")|assign(X,"laptop"):-wall(X, _), not wall(X, storm).

facts: 
wall(1..5, 1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate wall. The labels are flower,chair,wall,cloud,laptop. Consider only the predicate wall not associated with label "storm".
Answer: assign(X,"flower")|assign(X,"chair")|assign(X,"wall")|assign(X,"cloud")|assign(X,"laptop"):-wall(X, _), not wall(X, storm).
```
assign(X,"name")|assign(X,"price")|assign(X,"age")|assign(X,"description"):-wall(X, _).
```
The predicate wall has label "description", but not "age".
So, the predicate wall is not associated with label "age".
Then, assign(X,"description") for all elements in "wall".
Finally, assign(X,"description") for all elements in "description".

unique_rules: 
['assign(X,"flower")|assign(X,"chair")|assign(X,"wall")|assign(X,"cloud")|assign(X,"laptop"):-wall(X, _), not wall(X, storm).', 'assign(X,"name")|assign(X,"price")|assign(X,"age")|assign(X,"description"):-wall(X, _).']

parsed: 
assign(X,"flower")|assign(X,"chair")|assign(X,"wall")|assign(X,"cloud")|assign(X,"laptop"):-wall(X, _), not wall(X, storm).

jaccard: 1.0


704
guessing_numeric_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate roof and labels surname, weight having label weight different than 91. The labels are storm,roof,cloud,butterfly,desk,chair,wall.

answer from file: 
assign(X,"storm")|assign(X,"roof")|assign(X,"cloud")|assign(X,"butterfly")|assign(X,"desk")|assign(X,"chair")|assign(X,"wall"):-roof(X, Y), Y!=91 .

facts: 
roof(1..5, 100).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements expressed by predicate roof and labels surname, weight having label weight different than 91. The labels are storm,roof,cloud,butterfly,desk,chair,wall.
Answer: assign(X," peines")|assign(X,"florence")|assign(X,"height")|assign(X,"author")|assign(X,"city")|assign(X,"description")|assign(X,"name")|assign(X,"age")|assign(X,"price")|retum(X, Y), Y!=91 .
 köp(X, Y), Y!=91 .
```
 köp(X, Y), Y!=91 .
assign(X, " peines")|assign(X, "florence")|assign(X, "height")|assign(X, "author")|assign(X, "city")|assign(X,

unique_rules: 
[]

parsed: 


jaccard: 0.0


705
guessing_filtering

question: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate surname. The labels are roof,wall,flower,storm,laptop,cloud,butterfly,desk.  Then, filter and return only the elements assigned to label cloud.".

answer from file: 
assign(X,"roof")|assign(X,"wall")|assign(X,"flower")|assign(X,"storm")|assign(X,"laptop")|assign(X,"cloud")|assign(X,"butterfly")|assign(X,"desk"):-surname(X).
select(X):-assign(X, "cloud").

facts: 
surname(1..5).

generated: 
Write an ASP program for the following problem. Assign exactly a label among a given set of labels to a set of elements. The set of elements is expressed by predicate surname. The labels are roof,wall,flower,storm,laptop,cloud,butterfly,desk.  Then, filter and return only the elements assigned to label cloud.".
Answer: assign(X," felicità")|assign(X,"city")|assign(X,"creator")|assign(X,"price")|assign(X,"age")|assign(X,"name")|assign(X,"shape")|assign(X,"description")|assign(X,"author")|retum(X, "cloud").
select(X):-assign(X, "cloud").
```
The predicate "name" has label "description", but not "author".
So, the predicate "retum" returns only the elements assigned to label "description".
The predicate "name" has label "description", but not "author".
So, the predicate "retum" returns only the elements assigned

unique_rules: 
['select(X):-assign(X, "cloud").']

parsed: 
select(X):-assign(X, "cloud").

jaccard: 0.0


